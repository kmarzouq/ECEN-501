
lab4p2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d50c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800d6a0  0800d6a0  0000e6a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db68  0800db68  0000f1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800db68  0800db68  0000eb68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db70  0800db70  0000f1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db70  0800db70  0000eb70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800db74  0800db74  0000eb74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800db78  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000228c  200001e8  0800dd60  0000f1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002474  0800dd60  0000f474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ad2c  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000581f  00000000  00000000  00039f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026a8  00000000  00000000  0003f768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e07  00000000  00000000  00041e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007c3a  00000000  00000000  00043c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cbcf  00000000  00000000  0004b851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010eb39  00000000  00000000  00078420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00186f59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b5f4  00000000  00000000  00186f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00192590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d684 	.word	0x0800d684

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800d684 	.word	0x0800d684

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b0c4      	sub	sp, #272	@ 0x110
 8000e9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f001 fc8f 	bl	80027c0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2105      	movs	r1, #5
 8000ea6:	2028      	movs	r0, #40	@ 0x28
 8000ea8:	f001 fd9e 	bl	80029e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000eac:	2028      	movs	r0, #40	@ 0x28
 8000eae:	f001 fdb7 	bl	8002a20 <HAL_NVIC_EnableIRQ>
  MX_GPIO_Init();
 8000eb2:	f000 fa4f 	bl	8001354 <MX_GPIO_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 f88b 	bl	8000fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eba:	f000 fa4b 	bl	8001354 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ebe:	f000 fa23 	bl	8001308 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000ec2:	f000 f8e7 	bl	8001094 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000ec6:	f000 f91d 	bl	8001104 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000eca:	f000 f95b 	bl	8001184 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000ece:	f000 f97f 	bl	80011d0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000ed2:	f000 f9bb 	bl	800124c <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ed6:	f000 f9e9 	bl	80012ac <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  xTempQueue = xQueueCreate(10, sizeof(float));
 8000eda:	2200      	movs	r2, #0
 8000edc:	2104      	movs	r1, #4
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f007 f91f 	bl	8008122 <xQueueGenericCreate>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	4a2c      	ldr	r2, [pc, #176]	@ (8000f98 <main+0x100>)
 8000ee8:	6013      	str	r3, [r2, #0]

  uint8_t msg[] = "=====> Temperature sensor HTS221 initialized \r\n ";
 8000eea:	4b2c      	ldr	r3, [pc, #176]	@ (8000f9c <main+0x104>)
 8000eec:	f107 04cc 	add.w	r4, r7, #204	@ 0xcc
 8000ef0:	461d      	mov	r5, r3
 8000ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000efe:	682b      	ldr	r3, [r5, #0]
 8000f00:	7023      	strb	r3, [r4, #0]

  if(BSP_TSENSOR_Init()==0){
 8000f02:	f001 fb7f 	bl	8002604 <BSP_TSENSOR_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d107      	bne.n	8000f1c <main+0x84>
	  HAL_UART_Transmit(&huart1,msg,sizeof(msg),1000);
 8000f0c:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8000f10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f14:	2231      	movs	r2, #49	@ 0x31
 8000f16:	4822      	ldr	r0, [pc, #136]	@ (8000fa0 <main+0x108>)
 8000f18:	f005 fae2 	bl	80064e0 <HAL_UART_Transmit>
  }
  xBinarySemaphore = xSemaphoreCreateBinary();
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2001      	movs	r0, #1
 8000f22:	f007 f8fe 	bl	8008122 <xQueueGenericCreate>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa4 <main+0x10c>)
 8000f2a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  QueueHandle_t xTempQueue;
  if(xTempQueue == NULL){
 8000f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d101      	bne.n	8000f38 <main+0xa0>
	  Error_Handler();
 8000f34:	f000 fd34 	bl	80019a0 <Error_Handler>
  /* creation of defaultTask */
  //defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(TempDataCollectionTask, "TempDataCollection", 128, NULL, 1, &xHandle1);
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <main+0x110>)
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2300      	movs	r3, #0
 8000f42:	2280      	movs	r2, #128	@ 0x80
 8000f44:	4919      	ldr	r1, [pc, #100]	@ (8000fac <main+0x114>)
 8000f46:	481a      	ldr	r0, [pc, #104]	@ (8000fb0 <main+0x118>)
 8000f48:	f007 ff52 	bl	8008df0 <xTaskCreate>
  xTaskCreate(TempProcessingTask, "TempProcessing", 128, NULL, 2, &xHandle2);
 8000f4c:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <main+0x11c>)
 8000f4e:	9301      	str	r3, [sp, #4]
 8000f50:	2302      	movs	r3, #2
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2300      	movs	r3, #0
 8000f56:	2280      	movs	r2, #128	@ 0x80
 8000f58:	4917      	ldr	r1, [pc, #92]	@ (8000fb8 <main+0x120>)
 8000f5a:	4818      	ldr	r0, [pc, #96]	@ (8000fbc <main+0x124>)
 8000f5c:	f007 ff48 	bl	8008df0 <xTaskCreate>
  xTaskCreate( vHandlerTask, "Handler", 128, NULL, 3, &xHandle3);
 8000f60:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <main+0x128>)
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	2303      	movs	r3, #3
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	2280      	movs	r2, #128	@ 0x80
 8000f6c:	4915      	ldr	r1, [pc, #84]	@ (8000fc4 <main+0x12c>)
 8000f6e:	4816      	ldr	r0, [pc, #88]	@ (8000fc8 <main+0x130>)
 8000f70:	f007 ff3e 	bl	8008df0 <xTaskCreate>
  vTaskStartScheduler();
 8000f74:	f008 f8b8 	bl	80090e8 <vTaskStartScheduler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  float temp = BSP_TSENSOR_ReadTemp();
 8000f78:	f001 fb60 	bl	800263c <BSP_TSENSOR_ReadTemp>
 8000f7c:	ed87 0a40 	vstr	s0, [r7, #256]	@ 0x100
	  char message[200];

//	  sprintf(message, "Temp: %f \r\n\n\0",temp); //Data to send
//	  HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY); // Using HAL library function
	  HAL_GPIO_TogglePin (GPIOB, LED2_Pin);
 8000f80:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f84:	4811      	ldr	r0, [pc, #68]	@ (8000fcc <main+0x134>)
 8000f86:	f002 fb01 	bl	800358c <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000f8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f8e:	f001 fc4f 	bl	8002830 <HAL_Delay>
  {
 8000f92:	bf00      	nop
 8000f94:	e7f0      	b.n	8000f78 <main+0xe0>
 8000f96:	bf00      	nop
 8000f98:	20000938 	.word	0x20000938
 8000f9c:	0800d6cc 	.word	0x0800d6cc
 8000fa0:	2000033c 	.word	0x2000033c
 8000fa4:	2000094c 	.word	0x2000094c
 8000fa8:	2000093c 	.word	0x2000093c
 8000fac:	0800d6a0 	.word	0x0800d6a0
 8000fb0:	080017a1 	.word	0x080017a1
 8000fb4:	20000940 	.word	0x20000940
 8000fb8:	0800d6b4 	.word	0x0800d6b4
 8000fbc:	08001821 	.word	0x08001821
 8000fc0:	20000944 	.word	0x20000944
 8000fc4:	0800d6c4 	.word	0x0800d6c4
 8000fc8:	08001711 	.word	0x08001711
 8000fcc:	48000400 	.word	0x48000400

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b096      	sub	sp, #88	@ 0x58
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	2244      	movs	r2, #68	@ 0x44
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00a fc2f 	bl	800b842 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ff2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ff6:	f003 fa9d 	bl	8004534 <HAL_PWREx_ControlVoltageScaling>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001000:	f000 fcce 	bl	80019a0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001004:	f003 fa78 	bl	80044f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001008:	4b21      	ldr	r3, [pc, #132]	@ (8001090 <SystemClock_Config+0xc0>)
 800100a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800100e:	4a20      	ldr	r2, [pc, #128]	@ (8001090 <SystemClock_Config+0xc0>)
 8001010:	f023 0318 	bic.w	r3, r3, #24
 8001014:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001018:	2314      	movs	r3, #20
 800101a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800101c:	2301      	movs	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001020:	2301      	movs	r3, #1
 8001022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001028:	2360      	movs	r3, #96	@ 0x60
 800102a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102c:	2302      	movs	r3, #2
 800102e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001030:	2301      	movs	r3, #1
 8001032:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001034:	2301      	movs	r3, #1
 8001036:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001038:	2328      	movs	r3, #40	@ 0x28
 800103a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800103c:	2307      	movs	r3, #7
 800103e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001040:	2302      	movs	r3, #2
 8001042:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001044:	2302      	movs	r3, #2
 8001046:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4618      	mov	r0, r3
 800104e:	f003 fb93 	bl	8004778 <HAL_RCC_OscConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001058:	f000 fca2 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105c:	230f      	movs	r3, #15
 800105e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001060:	2303      	movs	r3, #3
 8001062:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	2104      	movs	r1, #4
 8001074:	4618      	mov	r0, r3
 8001076:	f003 ff5b 	bl	8004f30 <HAL_RCC_ClockConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001080:	f000 fc8e 	bl	80019a0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001084:	f004 fc94 	bl	80059b0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001088:	bf00      	nop
 800108a:	3758      	adds	r7, #88	@ 0x58
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40021000 	.word	0x40021000

08001094 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001098:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <MX_DFSDM1_Init+0x68>)
 800109a:	4a19      	ldr	r2, [pc, #100]	@ (8001100 <MX_DFSDM1_Init+0x6c>)
 800109c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800109e:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <MX_DFSDM1_Init+0x68>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80010a4:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <MX_DFSDM1_Init+0x68>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80010aa:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <MX_DFSDM1_Init+0x68>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80010b0:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <MX_DFSDM1_Init+0x68>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <MX_DFSDM1_Init+0x68>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <MX_DFSDM1_Init+0x68>)
 80010be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010c2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80010c4:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <MX_DFSDM1_Init+0x68>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80010ca:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <MX_DFSDM1_Init+0x68>)
 80010cc:	2204      	movs	r2, #4
 80010ce:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80010d0:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <MX_DFSDM1_Init+0x68>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80010d6:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <MX_DFSDM1_Init+0x68>)
 80010d8:	2201      	movs	r2, #1
 80010da:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80010dc:	4b07      	ldr	r3, [pc, #28]	@ (80010fc <MX_DFSDM1_Init+0x68>)
 80010de:	2200      	movs	r2, #0
 80010e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <MX_DFSDM1_Init+0x68>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80010e8:	4804      	ldr	r0, [pc, #16]	@ (80010fc <MX_DFSDM1_Init+0x68>)
 80010ea:	f001 fca7 	bl	8002a3c <HAL_DFSDM_ChannelInit>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80010f4:	f000 fc54 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000208 	.word	0x20000208
 8001100:	40016020 	.word	0x40016020

08001104 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001108:	4b1b      	ldr	r3, [pc, #108]	@ (8001178 <MX_I2C2_Init+0x74>)
 800110a:	4a1c      	ldr	r2, [pc, #112]	@ (800117c <MX_I2C2_Init+0x78>)
 800110c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800110e:	4b1a      	ldr	r3, [pc, #104]	@ (8001178 <MX_I2C2_Init+0x74>)
 8001110:	4a1b      	ldr	r2, [pc, #108]	@ (8001180 <MX_I2C2_Init+0x7c>)
 8001112:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001114:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <MX_I2C2_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111a:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <MX_I2C2_Init+0x74>)
 800111c:	2201      	movs	r2, #1
 800111e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001120:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <MX_I2C2_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001126:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <MX_I2C2_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <MX_I2C2_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <MX_I2C2_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001138:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <MX_I2C2_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800113e:	480e      	ldr	r0, [pc, #56]	@ (8001178 <MX_I2C2_Init+0x74>)
 8001140:	f002 fa56 	bl	80035f0 <HAL_I2C_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800114a:	f000 fc29 	bl	80019a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800114e:	2100      	movs	r1, #0
 8001150:	4809      	ldr	r0, [pc, #36]	@ (8001178 <MX_I2C2_Init+0x74>)
 8001152:	f003 f807 	bl	8004164 <HAL_I2CEx_ConfigAnalogFilter>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800115c:	f000 fc20 	bl	80019a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001160:	2100      	movs	r1, #0
 8001162:	4805      	ldr	r0, [pc, #20]	@ (8001178 <MX_I2C2_Init+0x74>)
 8001164:	f003 f849 	bl	80041fa <HAL_I2CEx_ConfigDigitalFilter>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800116e:	f000 fc17 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000240 	.word	0x20000240
 800117c:	40005800 	.word	0x40005800
 8001180:	10d19ce4 	.word	0x10d19ce4

08001184 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001188:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <MX_QUADSPI_Init+0x44>)
 800118a:	4a10      	ldr	r2, [pc, #64]	@ (80011cc <MX_QUADSPI_Init+0x48>)
 800118c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800118e:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <MX_QUADSPI_Init+0x44>)
 8001190:	2202      	movs	r2, #2
 8001192:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001194:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <MX_QUADSPI_Init+0x44>)
 8001196:	2204      	movs	r2, #4
 8001198:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800119a:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <MX_QUADSPI_Init+0x44>)
 800119c:	2210      	movs	r2, #16
 800119e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80011a0:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <MX_QUADSPI_Init+0x44>)
 80011a2:	2217      	movs	r2, #23
 80011a4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <MX_QUADSPI_Init+0x44>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <MX_QUADSPI_Init+0x44>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <MX_QUADSPI_Init+0x44>)
 80011b4:	f003 fa24 	bl	8004600 <HAL_QSPI_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80011be:	f000 fbef 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000294 	.word	0x20000294
 80011cc:	a0001000 	.word	0xa0001000

080011d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <MX_SPI3_Init+0x74>)
 80011d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001248 <MX_SPI3_Init+0x78>)
 80011d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <MX_SPI3_Init+0x74>)
 80011dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011e2:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <MX_SPI3_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80011e8:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <MX_SPI3_Init+0x74>)
 80011ea:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80011ee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f0:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <MX_SPI3_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f6:	4b13      	ldr	r3, [pc, #76]	@ (8001244 <MX_SPI3_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011fc:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <MX_SPI3_Init+0x74>)
 80011fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001202:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001204:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <MX_SPI3_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800120a:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <MX_SPI3_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001210:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <MX_SPI3_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <MX_SPI3_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800121c:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <MX_SPI3_Init+0x74>)
 800121e:	2207      	movs	r2, #7
 8001220:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001222:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <MX_SPI3_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <MX_SPI3_Init+0x74>)
 800122a:	2208      	movs	r2, #8
 800122c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_SPI3_Init+0x74>)
 8001230:	f004 fda0 	bl	8005d74 <HAL_SPI_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800123a:	f000 fbb1 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200002d8 	.word	0x200002d8
 8001248:	40003c00 	.word	0x40003c00

0800124c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001250:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001252:	4a15      	ldr	r2, [pc, #84]	@ (80012a8 <MX_USART1_UART_Init+0x5c>)
 8001254:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001256:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001258:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800125c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001282:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001290:	f005 f8d8 	bl	8006444 <HAL_UART_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800129a:	f000 fb81 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2000033c 	.word	0x2000033c
 80012a8:	40013800 	.word	0x40013800

080012ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012b0:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80012b8:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ba:	2206      	movs	r2, #6
 80012bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012be:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012c0:	2202      	movs	r2, #2
 80012c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012c6:	2202      	movs	r2, #2
 80012c8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d8:	2200      	movs	r2, #0
 80012da:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80012dc:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012de:	2200      	movs	r2, #0
 80012e0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f0:	f002 ffcf 	bl	8004292 <HAL_PCD_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80012fa:	f000 fb51 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000454 	.word	0x20000454

08001308 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <MX_DMA_Init+0x48>)
 8001310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001312:	4a0f      	ldr	r2, [pc, #60]	@ (8001350 <MX_DMA_Init+0x48>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6493      	str	r3, [r2, #72]	@ 0x48
 800131a:	4b0d      	ldr	r3, [pc, #52]	@ (8001350 <MX_DMA_Init+0x48>)
 800131c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2105      	movs	r1, #5
 800132a:	200e      	movs	r0, #14
 800132c:	f001 fb5c 	bl	80029e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001330:	200e      	movs	r0, #14
 8001332:	f001 fb75 	bl	8002a20 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2105      	movs	r1, #5
 800133a:	200f      	movs	r0, #15
 800133c:	f001 fb54 	bl	80029e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001340:	200f      	movs	r0, #15
 8001342:	f001 fb6d 	bl	8002a20 <HAL_NVIC_EnableIRQ>

}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000

08001354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	@ 0x28
 8001358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800136a:	4bbd      	ldr	r3, [pc, #756]	@ (8001660 <MX_GPIO_Init+0x30c>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	4abc      	ldr	r2, [pc, #752]	@ (8001660 <MX_GPIO_Init+0x30c>)
 8001370:	f043 0310 	orr.w	r3, r3, #16
 8001374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001376:	4bba      	ldr	r3, [pc, #744]	@ (8001660 <MX_GPIO_Init+0x30c>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	4bb7      	ldr	r3, [pc, #732]	@ (8001660 <MX_GPIO_Init+0x30c>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	4ab6      	ldr	r2, [pc, #728]	@ (8001660 <MX_GPIO_Init+0x30c>)
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138e:	4bb4      	ldr	r3, [pc, #720]	@ (8001660 <MX_GPIO_Init+0x30c>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	4bb1      	ldr	r3, [pc, #708]	@ (8001660 <MX_GPIO_Init+0x30c>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139e:	4ab0      	ldr	r2, [pc, #704]	@ (8001660 <MX_GPIO_Init+0x30c>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a6:	4bae      	ldr	r3, [pc, #696]	@ (8001660 <MX_GPIO_Init+0x30c>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	4bab      	ldr	r3, [pc, #684]	@ (8001660 <MX_GPIO_Init+0x30c>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b6:	4aaa      	ldr	r2, [pc, #680]	@ (8001660 <MX_GPIO_Init+0x30c>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013be:	4ba8      	ldr	r3, [pc, #672]	@ (8001660 <MX_GPIO_Init+0x30c>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ca:	4ba5      	ldr	r3, [pc, #660]	@ (8001660 <MX_GPIO_Init+0x30c>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	4aa4      	ldr	r2, [pc, #656]	@ (8001660 <MX_GPIO_Init+0x30c>)
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d6:	4ba2      	ldr	r3, [pc, #648]	@ (8001660 <MX_GPIO_Init+0x30c>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80013e8:	489e      	ldr	r0, [pc, #632]	@ (8001664 <MX_GPIO_Init+0x310>)
 80013ea:	f002 f8b7 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	f248 1104 	movw	r1, #33028	@ 0x8104
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f8:	f002 f8b0 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80013fc:	2200      	movs	r2, #0
 80013fe:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8001402:	4899      	ldr	r0, [pc, #612]	@ (8001668 <MX_GPIO_Init+0x314>)
 8001404:	f002 f8aa 	bl	800355c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	f241 0181 	movw	r1, #4225	@ 0x1081
 800140e:	4897      	ldr	r0, [pc, #604]	@ (800166c <MX_GPIO_Init+0x318>)
 8001410:	f002 f8a4 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800141a:	4894      	ldr	r0, [pc, #592]	@ (800166c <MX_GPIO_Init+0x318>)
 800141c:	f002 f89e 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001426:	4892      	ldr	r0, [pc, #584]	@ (8001670 <MX_GPIO_Init+0x31c>)
 8001428:	f002 f898 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	2120      	movs	r1, #32
 8001430:	488d      	ldr	r0, [pc, #564]	@ (8001668 <MX_GPIO_Init+0x314>)
 8001432:	f002 f893 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	2101      	movs	r1, #1
 800143a:	488a      	ldr	r0, [pc, #552]	@ (8001664 <MX_GPIO_Init+0x310>)
 800143c:	f002 f88e 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001440:	f240 1315 	movw	r3, #277	@ 0x115
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4882      	ldr	r0, [pc, #520]	@ (8001664 <MX_GPIO_Init+0x310>)
 800145a:	f001 fde1 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800145e:	236a      	movs	r3, #106	@ 0x6a
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001462:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4619      	mov	r1, r3
 8001472:	487c      	ldr	r0, [pc, #496]	@ (8001664 <MX_GPIO_Init+0x310>)
 8001474:	f001 fdd4 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001478:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800147e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	4878      	ldr	r0, [pc, #480]	@ (8001670 <MX_GPIO_Init+0x31c>)
 8001490:	f001 fdc6 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001494:	233f      	movs	r3, #63	@ 0x3f
 8001496:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001498:	230b      	movs	r3, #11
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	4872      	ldr	r0, [pc, #456]	@ (8001670 <MX_GPIO_Init+0x31c>)
 80014a8:	f001 fdba 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80014ac:	2303      	movs	r3, #3
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014bc:	2308      	movs	r3, #8
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ca:	f001 fda9 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80014ce:	f248 1304 	movw	r3, #33028	@ 0x8104
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ea:	f001 fd99 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80014ee:	2308      	movs	r3, #8
 80014f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014fe:	2301      	movs	r3, #1
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800150c:	f001 fd88 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001510:	2310      	movs	r3, #16
 8001512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001514:	230b      	movs	r3, #11
 8001516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001526:	f001 fd7b 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800152a:	23e0      	movs	r3, #224	@ 0xe0
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800153a:	2305      	movs	r3, #5
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001548:	f001 fd6a 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800154c:	2301      	movs	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001550:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	4841      	ldr	r0, [pc, #260]	@ (8001668 <MX_GPIO_Init+0x314>)
 8001562:	f001 fd5d 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001566:	2302      	movs	r3, #2
 8001568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800156a:	230b      	movs	r3, #11
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	483b      	ldr	r0, [pc, #236]	@ (8001668 <MX_GPIO_Init+0x314>)
 800157a:	f001 fd51 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800157e:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8001582:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	2301      	movs	r3, #1
 8001586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	4834      	ldr	r0, [pc, #208]	@ (8001668 <MX_GPIO_Init+0x314>)
 8001598:	f001 fd42 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800159c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015ae:	2307      	movs	r3, #7
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	482c      	ldr	r0, [pc, #176]	@ (800166c <MX_GPIO_Init+0x318>)
 80015ba:	f001 fd31 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80015be:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 80015c2:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	4825      	ldr	r0, [pc, #148]	@ (800166c <MX_GPIO_Init+0x318>)
 80015d6:	f001 fd23 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80015da:	f243 0381 	movw	r3, #12417	@ 0x3081
 80015de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	481e      	ldr	r0, [pc, #120]	@ (800166c <MX_GPIO_Init+0x318>)
 80015f4:	f001 fd14 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80015f8:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80015fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4817      	ldr	r0, [pc, #92]	@ (8001670 <MX_GPIO_Init+0x31c>)
 8001612:	f001 fd05 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001616:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800161a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800161c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	4810      	ldr	r0, [pc, #64]	@ (8001670 <MX_GPIO_Init+0x31c>)
 800162e:	f001 fcf7 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001632:	2302      	movs	r3, #2
 8001634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001642:	2305      	movs	r3, #5
 8001644:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4807      	ldr	r0, [pc, #28]	@ (800166c <MX_GPIO_Init+0x318>)
 800164e:	f001 fce7 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001652:	2378      	movs	r3, #120	@ 0x78
 8001654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	e00a      	b.n	8001674 <MX_GPIO_Init+0x320>
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	48001000 	.word	0x48001000
 8001668:	48000400 	.word	0x48000400
 800166c:	48000c00 	.word	0x48000c00
 8001670:	48000800 	.word	0x48000800
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800167a:	2307      	movs	r3, #7
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	4813      	ldr	r0, [pc, #76]	@ (80016d4 <MX_GPIO_Init+0x380>)
 8001686:	f001 fccb 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800168a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800168e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001690:	2312      	movs	r3, #18
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800169c:	2304      	movs	r3, #4
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4619      	mov	r1, r3
 80016a6:	480c      	ldr	r0, [pc, #48]	@ (80016d8 <MX_GPIO_Init+0x384>)
 80016a8:	f001 fcba 	bl	8003020 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2105      	movs	r1, #5
 80016b0:	2017      	movs	r0, #23
 80016b2:	f001 f999 	bl	80029e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016b6:	2017      	movs	r0, #23
 80016b8:	f001 f9b2 	bl	8002a20 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2105      	movs	r1, #5
 80016c0:	2028      	movs	r0, #40	@ 0x28
 80016c2:	f001 f991 	bl	80029e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016c6:	2028      	movs	r0, #40	@ 0x28
 80016c8:	f001 f9aa 	bl	8002a20 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016cc:	bf00      	nop
 80016ce:	3728      	adds	r7, #40	@ 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	48000c00 	.word	0x48000c00
 80016d8:	48000400 	.word	0x48000400

080016dc <HAL_GPIO_EXTI_Callback>:
//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
//	HAL_UART_Receive_IT(&huart1,rx_buff,10);
//
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	80fb      	strh	r3, [r7, #6]
if (GPIO_Pin == GPIO_PIN_13) {
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016ec:	d109      	bne.n	8001702 <HAL_GPIO_EXTI_Callback+0x26>
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR( xBinarySemaphore, &xHigherPriorityTaskWoken );
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <HAL_GPIO_EXTI_Callback+0x30>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f107 020c 	add.w	r2, r7, #12
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f006 ff0f 	bl	8008520 <xQueueGiveFromISR>
// if a higher priority task is waiting, context switch to it portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
	}
}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2000094c 	.word	0x2000094c

08001710 <vHandlerTask>:

void vHandlerTask( void *pvParameters )
{
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	float temp_value;
	for( ;; )
	{
	xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );
 8001718:	4b1b      	ldr	r3, [pc, #108]	@ (8001788 <vHandlerTask+0x78>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	4618      	mov	r0, r3
 8001722:	f007 f86f 	bl	8008804 <xQueueSemaphoreTake>
	/* This is reached only after event has occurred. Process
	event */
	//temp_value = BSP_TSENSOR_ReadTemp();
	uint8_t Test[] = "Enter a number:\n"; //Data to	send
 8001726:	4b19      	ldr	r3, [pc, #100]	@ (800178c <vHandlerTask+0x7c>)
 8001728:	f107 040c 	add.w	r4, r7, #12
 800172c:	461d      	mov	r5, r3
 800172e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001732:	682b      	ldr	r3, [r5, #0]
 8001734:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);//Using HAL	library function
 8001736:	f107 010c 	add.w	r1, r7, #12
 800173a:	230a      	movs	r3, #10
 800173c:	2211      	movs	r2, #17
 800173e:	4814      	ldr	r0, [pc, #80]	@ (8001790 <vHandlerTask+0x80>)
 8001740:	f004 fece 	bl	80064e0 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1,rx_buff,sizeof(rx_buff),2000);
 8001744:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001748:	2202      	movs	r2, #2
 800174a:	4912      	ldr	r1, [pc, #72]	@ (8001794 <vHandlerTask+0x84>)
 800174c:	4810      	ldr	r0, [pc, #64]	@ (8001790 <vHandlerTask+0x80>)
 800174e:	f004 ff50 	bl	80065f2 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart1, rx_buff, sizeof(rx_buff), 100);
 8001752:	2364      	movs	r3, #100	@ 0x64
 8001754:	2202      	movs	r2, #2
 8001756:	490f      	ldr	r1, [pc, #60]	@ (8001794 <vHandlerTask+0x84>)
 8001758:	480d      	ldr	r0, [pc, #52]	@ (8001790 <vHandlerTask+0x80>)
 800175a:	f004 fec1 	bl	80064e0 <HAL_UART_Transmit>
	TEMP_THRESHOLD = atoi(rx_buff);
 800175e:	480d      	ldr	r0, [pc, #52]	@ (8001794 <vHandlerTask+0x84>)
 8001760:	f009 fa8a 	bl	800ac78 <atoi>
 8001764:	ee07 0a90 	vmov	s15, r0
 8001768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800176c:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <vHandlerTask+0x88>)
 800176e:	edc3 7a00 	vstr	s15, [r3]
	//TEMP_THRESHOLD=temp_value;
	//uint8_t Test[] = "In ISR\n Pushbutton pressed\n"; //Data to	send
	//HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);//Using HAL	library function
	//HAL_UART_Transmit(&huart1,rx_buff,sizeof(rx_buff),10);
	HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_3);
 8001772:	2108      	movs	r1, #8
 8001774:	4809      	ldr	r0, [pc, #36]	@ (800179c <vHandlerTask+0x8c>)
 8001776:	f001 ff09 	bl	800358c <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800177a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800177e:	f001 f857 	bl	8002830 <HAL_Delay>
	{
 8001782:	bf00      	nop
 8001784:	e7c8      	b.n	8001718 <vHandlerTask+0x8>
 8001786:	bf00      	nop
 8001788:	2000094c 	.word	0x2000094c
 800178c:	0800d700 	.word	0x0800d700
 8001790:	2000033c 	.word	0x2000033c
 8001794:	20000948 	.word	0x20000948
 8001798:	20000204 	.word	0x20000204
 800179c:	48001000 	.word	0x48001000

080017a0 <TempDataCollectionTask>:
	}
}

void TempDataCollectionTask(void *pvParameters){
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b093      	sub	sp, #76	@ 0x4c
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	float temp_value;

	for(;;){
			temp_value = BSP_TSENSOR_ReadTemp();
 80017a8:	f000 ff48 	bl	800263c <BSP_TSENSOR_ReadTemp>
 80017ac:	eef0 7a40 	vmov.f32	s15, s0
 80017b0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		  uint8_t msg[] = "got val  \r\n ";
 80017b4:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <TempDataCollectionTask+0x70>)
 80017b6:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80017ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017bc:	c407      	stmia	r4!, {r0, r1, r2}
 80017be:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart1,msg,sizeof(msg),1000);
 80017c0:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80017c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017c8:	220d      	movs	r2, #13
 80017ca:	4812      	ldr	r0, [pc, #72]	@ (8001814 <TempDataCollectionTask+0x74>)
 80017cc:	f004 fe88 	bl	80064e0 <HAL_UART_Transmit>
		  uint8_t msgk[25];

		if(xQueueSend(xTempQueue, &temp_value, portMAX_DELAY) == pdPASS){
 80017d0:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <TempDataCollectionTask+0x78>)
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80017d8:	2300      	movs	r3, #0
 80017da:	f04f 32ff 	mov.w	r2, #4294967295
 80017de:	f006 fcff 	bl	80081e0 <xQueueGenericSend>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d10d      	bne.n	8001804 <TempDataCollectionTask+0x64>
			  uint8_t msg2[] = "sent  \r\n ";
 80017e8:	4a0c      	ldr	r2, [pc, #48]	@ (800181c <TempDataCollectionTask+0x7c>)
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80017f0:	c303      	stmia	r3!, {r0, r1}
 80017f2:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 80017f4:	f107 010c 	add.w	r1, r7, #12
 80017f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017fc:	220a      	movs	r2, #10
 80017fe:	4805      	ldr	r0, [pc, #20]	@ (8001814 <TempDataCollectionTask+0x74>)
 8001800:	f004 fe6e 	bl	80064e0 <HAL_UART_Transmit>
		}
		  vTaskDelay(pdMS_TO_TICKS(1000));
 8001804:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001808:	f007 fc38 	bl	800907c <vTaskDelay>
	for(;;){
 800180c:	e7cc      	b.n	80017a8 <TempDataCollectionTask+0x8>
 800180e:	bf00      	nop
 8001810:	0800d714 	.word	0x0800d714
 8001814:	2000033c 	.word	0x2000033c
 8001818:	20000938 	.word	0x20000938
 800181c:	0800d724 	.word	0x0800d724

08001820 <TempProcessingTask>:
	}


}

void TempProcessingTask(void *pvParameters){
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b09a      	sub	sp, #104	@ 0x68
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	float recTemp;
	int conHigh = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	667b      	str	r3, [r7, #100]	@ 0x64

	for(;;){
		if(xQueueReceive(xTempQueue, &recTemp, portMAX_DELAY) == pdTRUE){
 800182c:	4b33      	ldr	r3, [pc, #204]	@ (80018fc <TempProcessingTask+0xdc>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001834:	f04f 32ff 	mov.w	r2, #4294967295
 8001838:	4618      	mov	r0, r3
 800183a:	f006 ff01 	bl	8008640 <xQueueReceive>
 800183e:	4603      	mov	r3, r0
 8001840:	2b01      	cmp	r3, #1
 8001842:	d1f3      	bne.n	800182c <TempProcessingTask+0xc>
			  uint8_t msg[] = "rec val \r\n ";
 8001844:	4a2e      	ldr	r2, [pc, #184]	@ (8001900 <TempProcessingTask+0xe0>)
 8001846:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800184a:	ca07      	ldmia	r2, {r0, r1, r2}
 800184c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			  HAL_UART_Transmit(&huart1,msg,sizeof(msg),1000);
 8001850:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8001854:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001858:	220c      	movs	r2, #12
 800185a:	482a      	ldr	r0, [pc, #168]	@ (8001904 <TempProcessingTask+0xe4>)
 800185c:	f004 fe40 	bl	80064e0 <HAL_UART_Transmit>
			if(recTemp > TEMP_THRESHOLD){
 8001860:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001864:	4b28      	ldr	r3, [pc, #160]	@ (8001908 <TempProcessingTask+0xe8>)
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800186e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001872:	dd15      	ble.n	80018a0 <TempProcessingTask+0x80>
				  uint8_t msg2[] = "val greater than thresh \r\n ";
 8001874:	4b25      	ldr	r3, [pc, #148]	@ (800190c <TempProcessingTask+0xec>)
 8001876:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800187a:	461d      	mov	r5, r3
 800187c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001880:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001884:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 8001888:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800188c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001890:	221c      	movs	r2, #28
 8001892:	481c      	ldr	r0, [pc, #112]	@ (8001904 <TempProcessingTask+0xe4>)
 8001894:	f004 fe24 	bl	80064e0 <HAL_UART_Transmit>
				conHigh++;
 8001898:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800189a:	3301      	adds	r3, #1
 800189c:	667b      	str	r3, [r7, #100]	@ 0x64
 800189e:	e013      	b.n	80018c8 <TempProcessingTask+0xa8>
			} else {
				  uint8_t msg3[] = "val less than thresh \r\n ";
 80018a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <TempProcessingTask+0xf0>)
 80018a2:	f107 041c 	add.w	r4, r7, #28
 80018a6:	461d      	mov	r5, r3
 80018a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018b0:	c403      	stmia	r4!, {r0, r1}
 80018b2:	7022      	strb	r2, [r4, #0]
				  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 80018b4:	f107 011c 	add.w	r1, r7, #28
 80018b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018bc:	2219      	movs	r2, #25
 80018be:	4811      	ldr	r0, [pc, #68]	@ (8001904 <TempProcessingTask+0xe4>)
 80018c0:	f004 fe0e 	bl	80064e0 <HAL_UART_Transmit>
				conHigh = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	667b      	str	r3, [r7, #100]	@ 0x64
			}

			if(conHigh > 5){
 80018c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018ca:	2b05      	cmp	r3, #5
 80018cc:	ddae      	ble.n	800182c <TempProcessingTask+0xc>
				  uint8_t msg4[] = "toggle LED \r\n ";
 80018ce:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <TempProcessingTask+0xf4>)
 80018d0:	f107 040c 	add.w	r4, r7, #12
 80018d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018d6:	c407      	stmia	r4!, {r0, r1, r2}
 80018d8:	8023      	strh	r3, [r4, #0]
 80018da:	3402      	adds	r4, #2
 80018dc:	0c1b      	lsrs	r3, r3, #16
 80018de:	7023      	strb	r3, [r4, #0]
				  HAL_UART_Transmit(&huart1,msg4,sizeof(msg4),1000);
 80018e0:	f107 010c 	add.w	r1, r7, #12
 80018e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018e8:	220f      	movs	r2, #15
 80018ea:	4806      	ldr	r0, [pc, #24]	@ (8001904 <TempProcessingTask+0xe4>)
 80018ec:	f004 fdf8 	bl	80064e0 <HAL_UART_Transmit>
				ToggleLED(10);
 80018f0:	200a      	movs	r0, #10
 80018f2:	f000 f811 	bl	8001918 <ToggleLED>
				conHigh = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	667b      	str	r3, [r7, #100]	@ 0x64
		if(xQueueReceive(xTempQueue, &recTemp, portMAX_DELAY) == pdTRUE){
 80018fa:	e797      	b.n	800182c <TempProcessingTask+0xc>
 80018fc:	20000938 	.word	0x20000938
 8001900:	0800d730 	.word	0x0800d730
 8001904:	2000033c 	.word	0x2000033c
 8001908:	20000204 	.word	0x20000204
 800190c:	0800d73c 	.word	0x0800d73c
 8001910:	0800d758 	.word	0x0800d758
 8001914:	0800d774 	.word	0x0800d774

08001918 <ToggleLED>:
			}
		}
	}
}

void ToggleLED(int x){
 8001918:	b5b0      	push	{r4, r5, r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	  uint8_t msg[] = "toggling LED \r\n ";
 8001920:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <ToggleLED+0x58>)
 8001922:	f107 0408 	add.w	r4, r7, #8
 8001926:	461d      	mov	r5, r3
 8001928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800192a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800192c:	682b      	ldr	r3, [r5, #0]
 800192e:	7023      	strb	r3, [r4, #0]

	for(int i = 0; i < x; i++){
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	e013      	b.n	800195e <ToggleLED+0x46>
		HAL_UART_Transmit(&huart1,msg,sizeof(msg),1000);
 8001936:	f107 0108 	add.w	r1, r7, #8
 800193a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800193e:	2211      	movs	r2, #17
 8001940:	480c      	ldr	r0, [pc, #48]	@ (8001974 <ToggleLED+0x5c>)
 8001942:	f004 fdcd 	bl	80064e0 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin (GPIOB, LED2_Pin);
 8001946:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800194a:	480b      	ldr	r0, [pc, #44]	@ (8001978 <ToggleLED+0x60>)
 800194c:	f001 fe1e 	bl	800358c <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001950:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001954:	f000 ff6c 	bl	8002830 <HAL_Delay>
	for(int i = 0; i < x; i++){
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	3301      	adds	r3, #1
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	429a      	cmp	r2, r3
 8001964:	dbe7      	blt.n	8001936 <ToggleLED+0x1e>
	}
}
 8001966:	bf00      	nop
 8001968:	bf00      	nop
 800196a:	3720      	adds	r7, #32
 800196c:	46bd      	mov	sp, r7
 800196e:	bdb0      	pop	{r4, r5, r7, pc}
 8001970:	0800d784 	.word	0x0800d784
 8001974:	2000033c 	.word	0x2000033c
 8001978:	48000400 	.word	0x48000400

0800197c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a04      	ldr	r2, [pc, #16]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d101      	bne.n	8001992 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800198e:	f000 ff2f 	bl	80027f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40001000 	.word	0x40001000

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <Error_Handler+0x8>

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b6:	4a10      	ldr	r2, [pc, #64]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80019be:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ce:	4a0a      	ldr	r2, [pc, #40]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80019d6:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	210f      	movs	r1, #15
 80019e6:	f06f 0001 	mvn.w	r0, #1
 80019ea:	f000 fffd 	bl	80029e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000

080019fc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b0ac      	sub	sp, #176	@ 0xb0
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2288      	movs	r2, #136	@ 0x88
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f009 ff10 	bl	800b842 <memset>
  if(DFSDM1_Init == 0)
 8001a22:	4b25      	ldr	r3, [pc, #148]	@ (8001ab8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d142      	bne.n	8001ab0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001a2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f003 fcce 	bl	80053dc <HAL_RCCEx_PeriphCLKConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001a46:	f7ff ffab 	bl	80019a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001abc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8001abc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001a50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a54:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a56:	4b19      	ldr	r3, [pc, #100]	@ (8001abc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a62:	4b16      	ldr	r3, [pc, #88]	@ (8001abc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a66:	4a15      	ldr	r2, [pc, #84]	@ (8001abc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001a68:	f043 0310 	orr.w	r3, r3, #16
 8001a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a6e:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a72:	f003 0310 	and.w	r3, r3, #16
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001a7a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001a7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001a94:	2306      	movs	r3, #6
 8001a96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a9a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4807      	ldr	r0, [pc, #28]	@ (8001ac0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001aa2:	f001 fabd 	bl	8003020 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001aa6:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	4a02      	ldr	r2, [pc, #8]	@ (8001ab8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001aae:	6013      	str	r3, [r2, #0]
  }

}
 8001ab0:	bf00      	nop
 8001ab2:	37b0      	adds	r7, #176	@ 0xb0
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000950 	.word	0x20000950
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	48001000 	.word	0x48001000

08001ac4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b0ac      	sub	sp, #176	@ 0xb0
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2288      	movs	r2, #136	@ 0x88
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f009 feac 	bl	800b842 <memset>
  if(hi2c->Instance==I2C2)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a21      	ldr	r2, [pc, #132]	@ (8001b74 <HAL_I2C_MspInit+0xb0>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d13b      	bne.n	8001b6c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001af4:	2380      	movs	r3, #128	@ 0x80
 8001af6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	4618      	mov	r0, r3
 8001b02:	f003 fc6b 	bl	80053dc <HAL_RCCEx_PeriphCLKConfig>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b0c:	f7ff ff48 	bl	80019a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b10:	4b19      	ldr	r3, [pc, #100]	@ (8001b78 <HAL_I2C_MspInit+0xb4>)
 8001b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b14:	4a18      	ldr	r2, [pc, #96]	@ (8001b78 <HAL_I2C_MspInit+0xb4>)
 8001b16:	f043 0302 	orr.w	r3, r3, #2
 8001b1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1c:	4b16      	ldr	r3, [pc, #88]	@ (8001b78 <HAL_I2C_MspInit+0xb4>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001b28:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b30:	2312      	movs	r3, #18
 8001b32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b42:	2304      	movs	r3, #4
 8001b44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	480b      	ldr	r0, [pc, #44]	@ (8001b7c <HAL_I2C_MspInit+0xb8>)
 8001b50:	f001 fa66 	bl	8003020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b54:	4b08      	ldr	r3, [pc, #32]	@ (8001b78 <HAL_I2C_MspInit+0xb4>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b58:	4a07      	ldr	r2, [pc, #28]	@ (8001b78 <HAL_I2C_MspInit+0xb4>)
 8001b5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b60:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <HAL_I2C_MspInit+0xb4>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001b6c:	bf00      	nop
 8001b6e:	37b0      	adds	r7, #176	@ 0xb0
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40005800 	.word	0x40005800
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	48000400 	.word	0x48000400

08001b80 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bbc <HAL_I2C_MspDeInit+0x3c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d10f      	bne.n	8001bb2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001b92:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <HAL_I2C_MspDeInit+0x40>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b96:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc0 <HAL_I2C_MspDeInit+0x40>)
 8001b98:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001b9c:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001b9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ba2:	4808      	ldr	r0, [pc, #32]	@ (8001bc4 <HAL_I2C_MspDeInit+0x44>)
 8001ba4:	f001 fbe6 	bl	8003374 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001ba8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001bac:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <HAL_I2C_MspDeInit+0x44>)
 8001bae:	f001 fbe1 	bl	8003374 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40005800 	.word	0x40005800
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	48000400 	.word	0x48000400

08001bc8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	@ 0x28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a17      	ldr	r2, [pc, #92]	@ (8001c44 <HAL_QSPI_MspInit+0x7c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d128      	bne.n	8001c3c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001bea:	4b17      	ldr	r3, [pc, #92]	@ (8001c48 <HAL_QSPI_MspInit+0x80>)
 8001bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bee:	4a16      	ldr	r2, [pc, #88]	@ (8001c48 <HAL_QSPI_MspInit+0x80>)
 8001bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bf4:	6513      	str	r3, [r2, #80]	@ 0x50
 8001bf6:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <HAL_QSPI_MspInit+0x80>)
 8001bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c02:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <HAL_QSPI_MspInit+0x80>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c06:	4a10      	ldr	r2, [pc, #64]	@ (8001c48 <HAL_QSPI_MspInit+0x80>)
 8001c08:	f043 0310 	orr.w	r3, r3, #16
 8001c0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <HAL_QSPI_MspInit+0x80>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001c1a:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001c1e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c2c:	230a      	movs	r3, #10
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	4805      	ldr	r0, [pc, #20]	@ (8001c4c <HAL_QSPI_MspInit+0x84>)
 8001c38:	f001 f9f2 	bl	8003020 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001c3c:	bf00      	nop
 8001c3e:	3728      	adds	r7, #40	@ 0x28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	a0001000 	.word	0xa0001000
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	48001000 	.word	0x48001000

08001c50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	@ 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a17      	ldr	r2, [pc, #92]	@ (8001ccc <HAL_SPI_MspInit+0x7c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d128      	bne.n	8001cc4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c72:	4b17      	ldr	r3, [pc, #92]	@ (8001cd0 <HAL_SPI_MspInit+0x80>)
 8001c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c76:	4a16      	ldr	r2, [pc, #88]	@ (8001cd0 <HAL_SPI_MspInit+0x80>)
 8001c78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c7e:	4b14      	ldr	r3, [pc, #80]	@ (8001cd0 <HAL_SPI_MspInit+0x80>)
 8001c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8a:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <HAL_SPI_MspInit+0x80>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8e:	4a10      	ldr	r2, [pc, #64]	@ (8001cd0 <HAL_SPI_MspInit+0x80>)
 8001c90:	f043 0304 	orr.w	r3, r3, #4
 8001c94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c96:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <HAL_SPI_MspInit+0x80>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001ca2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cb4:	2306      	movs	r3, #6
 8001cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb8:	f107 0314 	add.w	r3, r7, #20
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4805      	ldr	r0, [pc, #20]	@ (8001cd4 <HAL_SPI_MspInit+0x84>)
 8001cc0:	f001 f9ae 	bl	8003020 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001cc4:	bf00      	nop
 8001cc6:	3728      	adds	r7, #40	@ 0x28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40003c00 	.word	0x40003c00
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	48000800 	.word	0x48000800

08001cd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b0ac      	sub	sp, #176	@ 0xb0
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2288      	movs	r2, #136	@ 0x88
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f009 fda2 	bl	800b842 <memset>
  if(huart->Instance==USART1)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a4e      	ldr	r2, [pc, #312]	@ (8001e3c <HAL_UART_MspInit+0x164>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	f040 8095 	bne.w	8001e34 <HAL_UART_MspInit+0x15c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4618      	mov	r0, r3
 8001d18:	f003 fb60 	bl	80053dc <HAL_RCCEx_PeriphCLKConfig>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d22:	f7ff fe3d 	bl	80019a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d26:	4b46      	ldr	r3, [pc, #280]	@ (8001e40 <HAL_UART_MspInit+0x168>)
 8001d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d2a:	4a45      	ldr	r2, [pc, #276]	@ (8001e40 <HAL_UART_MspInit+0x168>)
 8001d2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d30:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d32:	4b43      	ldr	r3, [pc, #268]	@ (8001e40 <HAL_UART_MspInit+0x168>)
 8001d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3e:	4b40      	ldr	r3, [pc, #256]	@ (8001e40 <HAL_UART_MspInit+0x168>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d42:	4a3f      	ldr	r2, [pc, #252]	@ (8001e40 <HAL_UART_MspInit+0x168>)
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e40 <HAL_UART_MspInit+0x168>)
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001d56:	23c0      	movs	r3, #192	@ 0xc0
 8001d58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d6e:	2307      	movs	r3, #7
 8001d70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d74:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4832      	ldr	r0, [pc, #200]	@ (8001e44 <HAL_UART_MspInit+0x16c>)
 8001d7c:	f001 f950 	bl	8003020 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001d80:	4b31      	ldr	r3, [pc, #196]	@ (8001e48 <HAL_UART_MspInit+0x170>)
 8001d82:	4a32      	ldr	r2, [pc, #200]	@ (8001e4c <HAL_UART_MspInit+0x174>)
 8001d84:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001d86:	4b30      	ldr	r3, [pc, #192]	@ (8001e48 <HAL_UART_MspInit+0x170>)
 8001d88:	2202      	movs	r2, #2
 8001d8a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e48 <HAL_UART_MspInit+0x170>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d92:	4b2d      	ldr	r3, [pc, #180]	@ (8001e48 <HAL_UART_MspInit+0x170>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d98:	4b2b      	ldr	r3, [pc, #172]	@ (8001e48 <HAL_UART_MspInit+0x170>)
 8001d9a:	2280      	movs	r2, #128	@ 0x80
 8001d9c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e48 <HAL_UART_MspInit+0x170>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001da4:	4b28      	ldr	r3, [pc, #160]	@ (8001e48 <HAL_UART_MspInit+0x170>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001daa:	4b27      	ldr	r3, [pc, #156]	@ (8001e48 <HAL_UART_MspInit+0x170>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001db0:	4b25      	ldr	r3, [pc, #148]	@ (8001e48 <HAL_UART_MspInit+0x170>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001db6:	4824      	ldr	r0, [pc, #144]	@ (8001e48 <HAL_UART_MspInit+0x170>)
 8001db8:	f000 ff4c 	bl	8002c54 <HAL_DMA_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8001dc2:	f7ff fded 	bl	80019a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8001e48 <HAL_UART_MspInit+0x170>)
 8001dca:	675a      	str	r2, [r3, #116]	@ 0x74
 8001dcc:	4a1e      	ldr	r2, [pc, #120]	@ (8001e48 <HAL_UART_MspInit+0x170>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e50 <HAL_UART_MspInit+0x178>)
 8001dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8001e54 <HAL_UART_MspInit+0x17c>)
 8001dd6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <HAL_UART_MspInit+0x178>)
 8001dda:	2202      	movs	r2, #2
 8001ddc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dde:	4b1c      	ldr	r3, [pc, #112]	@ (8001e50 <HAL_UART_MspInit+0x178>)
 8001de0:	2210      	movs	r2, #16
 8001de2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e50 <HAL_UART_MspInit+0x178>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dea:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <HAL_UART_MspInit+0x178>)
 8001dec:	2280      	movs	r2, #128	@ 0x80
 8001dee:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001df0:	4b17      	ldr	r3, [pc, #92]	@ (8001e50 <HAL_UART_MspInit+0x178>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001df6:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <HAL_UART_MspInit+0x178>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001dfc:	4b14      	ldr	r3, [pc, #80]	@ (8001e50 <HAL_UART_MspInit+0x178>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e02:	4b13      	ldr	r3, [pc, #76]	@ (8001e50 <HAL_UART_MspInit+0x178>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e08:	4811      	ldr	r0, [pc, #68]	@ (8001e50 <HAL_UART_MspInit+0x178>)
 8001e0a:	f000 ff23 	bl	8002c54 <HAL_DMA_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8001e14:	f7ff fdc4 	bl	80019a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a0d      	ldr	r2, [pc, #52]	@ (8001e50 <HAL_UART_MspInit+0x178>)
 8001e1c:	671a      	str	r2, [r3, #112]	@ 0x70
 8001e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e50 <HAL_UART_MspInit+0x178>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2105      	movs	r1, #5
 8001e28:	2025      	movs	r0, #37	@ 0x25
 8001e2a:	f000 fddd 	bl	80029e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e2e:	2025      	movs	r0, #37	@ 0x25
 8001e30:	f000 fdf6 	bl	8002a20 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001e34:	bf00      	nop
 8001e36:	37b0      	adds	r7, #176	@ 0xb0
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40013800 	.word	0x40013800
 8001e40:	40021000 	.word	0x40021000
 8001e44:	48000400 	.word	0x48000400
 8001e48:	200003c4 	.word	0x200003c4
 8001e4c:	40020058 	.word	0x40020058
 8001e50:	2000040c 	.word	0x2000040c
 8001e54:	40020044 	.word	0x40020044

08001e58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b0ac      	sub	sp, #176	@ 0xb0
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	2288      	movs	r2, #136	@ 0x88
 8001e76:	2100      	movs	r1, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f009 fce2 	bl	800b842 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e86:	d17c      	bne.n	8001f82 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e8c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001e8e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001e92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001e96:	2301      	movs	r3, #1
 8001e98:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001e9e:	2318      	movs	r3, #24
 8001ea0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001eae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001eb2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 fa8f 	bl	80053dc <HAL_RCCEx_PeriphCLKConfig>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001ec4:	f7ff fd6c 	bl	80019a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec8:	4b30      	ldr	r3, [pc, #192]	@ (8001f8c <HAL_PCD_MspInit+0x134>)
 8001eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ecc:	4a2f      	ldr	r2, [pc, #188]	@ (8001f8c <HAL_PCD_MspInit+0x134>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f8c <HAL_PCD_MspInit+0x134>)
 8001ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001ee0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ee4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ef4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001efe:	f001 f88f 	bl	8003020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001f02:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001f06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f1c:	230a      	movs	r3, #10
 8001f1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f22:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f26:	4619      	mov	r1, r3
 8001f28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f2c:	f001 f878 	bl	8003020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f30:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <HAL_PCD_MspInit+0x134>)
 8001f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f34:	4a15      	ldr	r2, [pc, #84]	@ (8001f8c <HAL_PCD_MspInit+0x134>)
 8001f36:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f3c:	4b13      	ldr	r3, [pc, #76]	@ (8001f8c <HAL_PCD_MspInit+0x134>)
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f48:	4b10      	ldr	r3, [pc, #64]	@ (8001f8c <HAL_PCD_MspInit+0x134>)
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d114      	bne.n	8001f7e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f54:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <HAL_PCD_MspInit+0x134>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f58:	4a0c      	ldr	r2, [pc, #48]	@ (8001f8c <HAL_PCD_MspInit+0x134>)
 8001f5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f60:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <HAL_PCD_MspInit+0x134>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001f6c:	f002 fb38 	bl	80045e0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <HAL_PCD_MspInit+0x134>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f74:	4a05      	ldr	r2, [pc, #20]	@ (8001f8c <HAL_PCD_MspInit+0x134>)
 8001f76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f7a:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001f7c:	e001      	b.n	8001f82 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001f7e:	f002 fb2f 	bl	80045e0 <HAL_PWREx_EnableVddUSB>
}
 8001f82:	bf00      	nop
 8001f84:	37b0      	adds	r7, #176	@ 0xb0
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000

08001f90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08e      	sub	sp, #56	@ 0x38
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f9e:	4b34      	ldr	r3, [pc, #208]	@ (8002070 <HAL_InitTick+0xe0>)
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa2:	4a33      	ldr	r2, [pc, #204]	@ (8002070 <HAL_InitTick+0xe0>)
 8001fa4:	f043 0310 	orr.w	r3, r3, #16
 8001fa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001faa:	4b31      	ldr	r3, [pc, #196]	@ (8002070 <HAL_InitTick+0xe0>)
 8001fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fb6:	f107 0210 	add.w	r2, r7, #16
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f003 f979 	bl	80052b8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d103      	bne.n	8001fd8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fd0:	f003 f946 	bl	8005260 <HAL_RCC_GetPCLK1Freq>
 8001fd4:	6378      	str	r0, [r7, #52]	@ 0x34
 8001fd6:	e004      	b.n	8001fe2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001fd8:	f003 f942 	bl	8005260 <HAL_RCC_GetPCLK1Freq>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fe4:	4a23      	ldr	r2, [pc, #140]	@ (8002074 <HAL_InitTick+0xe4>)
 8001fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fea:	0c9b      	lsrs	r3, r3, #18
 8001fec:	3b01      	subs	r3, #1
 8001fee:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ff0:	4b21      	ldr	r3, [pc, #132]	@ (8002078 <HAL_InitTick+0xe8>)
 8001ff2:	4a22      	ldr	r2, [pc, #136]	@ (800207c <HAL_InitTick+0xec>)
 8001ff4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ff6:	4b20      	ldr	r3, [pc, #128]	@ (8002078 <HAL_InitTick+0xe8>)
 8001ff8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ffc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8002078 <HAL_InitTick+0xe8>)
 8002000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002002:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002004:	4b1c      	ldr	r3, [pc, #112]	@ (8002078 <HAL_InitTick+0xe8>)
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200a:	4b1b      	ldr	r3, [pc, #108]	@ (8002078 <HAL_InitTick+0xe8>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002010:	4b19      	ldr	r3, [pc, #100]	@ (8002078 <HAL_InitTick+0xe8>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002016:	4818      	ldr	r0, [pc, #96]	@ (8002078 <HAL_InitTick+0xe8>)
 8002018:	f003 ff4f 	bl	8005eba <HAL_TIM_Base_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002022:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002026:	2b00      	cmp	r3, #0
 8002028:	d11b      	bne.n	8002062 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800202a:	4813      	ldr	r0, [pc, #76]	@ (8002078 <HAL_InitTick+0xe8>)
 800202c:	f003 ffa6 	bl	8005f7c <HAL_TIM_Base_Start_IT>
 8002030:	4603      	mov	r3, r0
 8002032:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002036:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800203a:	2b00      	cmp	r3, #0
 800203c:	d111      	bne.n	8002062 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800203e:	2036      	movs	r0, #54	@ 0x36
 8002040:	f000 fcee 	bl	8002a20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b0f      	cmp	r3, #15
 8002048:	d808      	bhi.n	800205c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800204a:	2200      	movs	r2, #0
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	2036      	movs	r0, #54	@ 0x36
 8002050:	f000 fcca 	bl	80029e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002054:	4a0a      	ldr	r2, [pc, #40]	@ (8002080 <HAL_InitTick+0xf0>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e002      	b.n	8002062 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002062:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002066:	4618      	mov	r0, r3
 8002068:	3738      	adds	r7, #56	@ 0x38
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	431bde83 	.word	0x431bde83
 8002078:	20000954 	.word	0x20000954
 800207c:	40001000 	.word	0x40001000
 8002080:	20000014 	.word	0x20000014

08002084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <NMI_Handler+0x4>

0800208c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <HardFault_Handler+0x4>

08002094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <MemManage_Handler+0x4>

0800209c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <BusFault_Handler+0x4>

080020a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <UsageFault_Handler+0x4>

080020ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80020c0:	4802      	ldr	r0, [pc, #8]	@ (80020cc <DMA1_Channel4_IRQHandler+0x10>)
 80020c2:	f000 fefe 	bl	8002ec2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000040c 	.word	0x2000040c

080020d0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80020d4:	4802      	ldr	r0, [pc, #8]	@ (80020e0 <DMA1_Channel5_IRQHandler+0x10>)
 80020d6:	f000 fef4 	bl	8002ec2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	200003c4 	.word	0x200003c4

080020e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80020e8:	2020      	movs	r0, #32
 80020ea:	f001 fa69 	bl	80035c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80020ee:	2040      	movs	r0, #64	@ 0x40
 80020f0:	f001 fa66 	bl	80035c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80020f4:	2080      	movs	r0, #128	@ 0x80
 80020f6:	f001 fa63 	bl	80035c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80020fa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80020fe:	f001 fa5f 	bl	80035c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800210c:	4802      	ldr	r0, [pc, #8]	@ (8002118 <USART1_IRQHandler+0x10>)
 800210e:	f004 fb39 	bl	8006784 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	2000033c 	.word	0x2000033c

0800211c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002120:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002124:	f001 fa4c 	bl	80035c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002128:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800212c:	f001 fa48 	bl	80035c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002130:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002134:	f001 fa44 	bl	80035c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002138:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800213c:	f001 fa40 	bl	80035c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002140:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002144:	f001 fa3c 	bl	80035c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}

0800214c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002150:	4802      	ldr	r0, [pc, #8]	@ (800215c <TIM6_DAC_IRQHandler+0x10>)
 8002152:	f003 ff83 	bl	800605c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000954 	.word	0x20000954

08002160 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return 1;
 8002164:	2301      	movs	r3, #1
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <_kill>:

int _kill(int pid, int sig)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800217a:	f009 fbb5 	bl	800b8e8 <__errno>
 800217e:	4603      	mov	r3, r0
 8002180:	2216      	movs	r2, #22
 8002182:	601a      	str	r2, [r3, #0]
  return -1;
 8002184:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <_exit>:

void _exit (int status)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002198:	f04f 31ff 	mov.w	r1, #4294967295
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ffe7 	bl	8002170 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021a2:	bf00      	nop
 80021a4:	e7fd      	b.n	80021a2 <_exit+0x12>

080021a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	e00a      	b.n	80021ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021b8:	f3af 8000 	nop.w
 80021bc:	4601      	mov	r1, r0
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	60ba      	str	r2, [r7, #8]
 80021c4:	b2ca      	uxtb	r2, r1
 80021c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	3301      	adds	r3, #1
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	dbf0      	blt.n	80021b8 <_read+0x12>
  }

  return len;
 80021d6:	687b      	ldr	r3, [r7, #4]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	e009      	b.n	8002206 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	60ba      	str	r2, [r7, #8]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	3301      	adds	r3, #1
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	429a      	cmp	r2, r3
 800220c:	dbf1      	blt.n	80021f2 <_write+0x12>
  }
  return len;
 800220e:	687b      	ldr	r3, [r7, #4]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <_close>:

int _close(int file)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002240:	605a      	str	r2, [r3, #4]
  return 0;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <_isatty>:

int _isatty(int file)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002258:	2301      	movs	r3, #1
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002266:	b480      	push	{r7}
 8002268:	b085      	sub	sp, #20
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002288:	4a14      	ldr	r2, [pc, #80]	@ (80022dc <_sbrk+0x5c>)
 800228a:	4b15      	ldr	r3, [pc, #84]	@ (80022e0 <_sbrk+0x60>)
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002294:	4b13      	ldr	r3, [pc, #76]	@ (80022e4 <_sbrk+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800229c:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <_sbrk+0x64>)
 800229e:	4a12      	ldr	r2, [pc, #72]	@ (80022e8 <_sbrk+0x68>)
 80022a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022a2:	4b10      	ldr	r3, [pc, #64]	@ (80022e4 <_sbrk+0x64>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d207      	bcs.n	80022c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b0:	f009 fb1a 	bl	800b8e8 <__errno>
 80022b4:	4603      	mov	r3, r0
 80022b6:	220c      	movs	r2, #12
 80022b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295
 80022be:	e009      	b.n	80022d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c0:	4b08      	ldr	r3, [pc, #32]	@ (80022e4 <_sbrk+0x64>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022c6:	4b07      	ldr	r3, [pc, #28]	@ (80022e4 <_sbrk+0x64>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	4a05      	ldr	r2, [pc, #20]	@ (80022e4 <_sbrk+0x64>)
 80022d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022d2:	68fb      	ldr	r3, [r7, #12]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20018000 	.word	0x20018000
 80022e0:	00000400 	.word	0x00000400
 80022e4:	200009a0 	.word	0x200009a0
 80022e8:	20002478 	.word	0x20002478

080022ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022f0:	4b06      	ldr	r3, [pc, #24]	@ (800230c <SystemInit+0x20>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f6:	4a05      	ldr	r2, [pc, #20]	@ (800230c <SystemInit+0x20>)
 80022f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002310:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002348 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002314:	f7ff ffea 	bl	80022ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002318:	480c      	ldr	r0, [pc, #48]	@ (800234c <LoopForever+0x6>)
  ldr r1, =_edata
 800231a:	490d      	ldr	r1, [pc, #52]	@ (8002350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800231c:	4a0d      	ldr	r2, [pc, #52]	@ (8002354 <LoopForever+0xe>)
  movs r3, #0
 800231e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002320:	e002      	b.n	8002328 <LoopCopyDataInit>

08002322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002326:	3304      	adds	r3, #4

08002328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800232a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800232c:	d3f9      	bcc.n	8002322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800232e:	4a0a      	ldr	r2, [pc, #40]	@ (8002358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002330:	4c0a      	ldr	r4, [pc, #40]	@ (800235c <LoopForever+0x16>)
  movs r3, #0
 8002332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002334:	e001      	b.n	800233a <LoopFillZerobss>

08002336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002338:	3204      	adds	r2, #4

0800233a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800233a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800233c:	d3fb      	bcc.n	8002336 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800233e:	f009 fad9 	bl	800b8f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002342:	f7fe fda9 	bl	8000e98 <main>

08002346 <LoopForever>:

LoopForever:
    b LoopForever
 8002346:	e7fe      	b.n	8002346 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002348:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800234c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002350:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002354:	0800db78 	.word	0x0800db78
  ldr r2, =_sbss
 8002358:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800235c:	20002474 	.word	0x20002474

08002360 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002360:	e7fe      	b.n	8002360 <ADC1_2_IRQHandler>
	...

08002364 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	@ 0x28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800236c:	4b27      	ldr	r3, [pc, #156]	@ (800240c <I2Cx_MspInit+0xa8>)
 800236e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002370:	4a26      	ldr	r2, [pc, #152]	@ (800240c <I2Cx_MspInit+0xa8>)
 8002372:	f043 0302 	orr.w	r3, r3, #2
 8002376:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002378:	4b24      	ldr	r3, [pc, #144]	@ (800240c <I2Cx_MspInit+0xa8>)
 800237a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002384:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002388:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800238a:	2312      	movs	r3, #18
 800238c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800238e:	2301      	movs	r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002392:	2303      	movs	r3, #3
 8002394:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002396:	2304      	movs	r3, #4
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	481b      	ldr	r0, [pc, #108]	@ (8002410 <I2Cx_MspInit+0xac>)
 80023a2:	f000 fe3d 	bl	8003020 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4619      	mov	r1, r3
 80023ac:	4818      	ldr	r0, [pc, #96]	@ (8002410 <I2Cx_MspInit+0xac>)
 80023ae:	f000 fe37 	bl	8003020 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80023b2:	4b16      	ldr	r3, [pc, #88]	@ (800240c <I2Cx_MspInit+0xa8>)
 80023b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b6:	4a15      	ldr	r2, [pc, #84]	@ (800240c <I2Cx_MspInit+0xa8>)
 80023b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80023be:	4b13      	ldr	r3, [pc, #76]	@ (800240c <I2Cx_MspInit+0xa8>)
 80023c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80023ca:	4b10      	ldr	r3, [pc, #64]	@ (800240c <I2Cx_MspInit+0xa8>)
 80023cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ce:	4a0f      	ldr	r2, [pc, #60]	@ (800240c <I2Cx_MspInit+0xa8>)
 80023d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023d4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80023d6:	4b0d      	ldr	r3, [pc, #52]	@ (800240c <I2Cx_MspInit+0xa8>)
 80023d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023da:	4a0c      	ldr	r2, [pc, #48]	@ (800240c <I2Cx_MspInit+0xa8>)
 80023dc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80023e0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80023e2:	2200      	movs	r2, #0
 80023e4:	210f      	movs	r1, #15
 80023e6:	2021      	movs	r0, #33	@ 0x21
 80023e8:	f000 fafe 	bl	80029e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80023ec:	2021      	movs	r0, #33	@ 0x21
 80023ee:	f000 fb17 	bl	8002a20 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	210f      	movs	r1, #15
 80023f6:	2022      	movs	r0, #34	@ 0x22
 80023f8:	f000 faf6 	bl	80029e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80023fc:	2022      	movs	r0, #34	@ 0x22
 80023fe:	f000 fb0f 	bl	8002a20 <HAL_NVIC_EnableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3728      	adds	r7, #40	@ 0x28
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	48000400 	.word	0x48000400

08002414 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a12      	ldr	r2, [pc, #72]	@ (8002468 <I2Cx_Init+0x54>)
 8002420:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a11      	ldr	r2, [pc, #68]	@ (800246c <I2Cx_Init+0x58>)
 8002426:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff ff89 	bl	8002364 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f001 f8cc 	bl	80035f0 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002458:	2100      	movs	r1, #0
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f001 fe82 	bl	8004164 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40005800 	.word	0x40005800
 800246c:	00702681 	.word	0x00702681

08002470 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	@ 0x28
 8002474:	af04      	add	r7, sp, #16
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	4608      	mov	r0, r1
 800247a:	4611      	mov	r1, r2
 800247c:	461a      	mov	r2, r3
 800247e:	4603      	mov	r3, r0
 8002480:	72fb      	strb	r3, [r7, #11]
 8002482:	460b      	mov	r3, r1
 8002484:	813b      	strh	r3, [r7, #8]
 8002486:	4613      	mov	r3, r2
 8002488:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800248e:	7afb      	ldrb	r3, [r7, #11]
 8002490:	b299      	uxth	r1, r3
 8002492:	88f8      	ldrh	r0, [r7, #6]
 8002494:	893a      	ldrh	r2, [r7, #8]
 8002496:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800249a:	9302      	str	r3, [sp, #8]
 800249c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	4603      	mov	r3, r0
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f001 fa80 	bl	80039ac <HAL_I2C_Mem_Read>
 80024ac:	4603      	mov	r3, r0
 80024ae:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d004      	beq.n	80024c0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80024b6:	7afb      	ldrb	r3, [r7, #11]
 80024b8:	4619      	mov	r1, r3
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 f832 	bl	8002524 <I2Cx_Error>
  }
  return status;
 80024c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b08a      	sub	sp, #40	@ 0x28
 80024ce:	af04      	add	r7, sp, #16
 80024d0:	60f8      	str	r0, [r7, #12]
 80024d2:	4608      	mov	r0, r1
 80024d4:	4611      	mov	r1, r2
 80024d6:	461a      	mov	r2, r3
 80024d8:	4603      	mov	r3, r0
 80024da:	72fb      	strb	r3, [r7, #11]
 80024dc:	460b      	mov	r3, r1
 80024de:	813b      	strh	r3, [r7, #8]
 80024e0:	4613      	mov	r3, r2
 80024e2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80024e8:	7afb      	ldrb	r3, [r7, #11]
 80024ea:	b299      	uxth	r1, r3
 80024ec:	88f8      	ldrh	r0, [r7, #6]
 80024ee:	893a      	ldrh	r2, [r7, #8]
 80024f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024f4:	9302      	str	r3, [sp, #8]
 80024f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024f8:	9301      	str	r3, [sp, #4]
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	4603      	mov	r3, r0
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f001 f93f 	bl	8003784 <HAL_I2C_Mem_Write>
 8002506:	4603      	mov	r3, r0
 8002508:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800250a:	7dfb      	ldrb	r3, [r7, #23]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d004      	beq.n	800251a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002510:	7afb      	ldrb	r3, [r7, #11]
 8002512:	4619      	mov	r1, r3
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f805 	bl	8002524 <I2Cx_Error>
  }
  return status;
 800251a:	7dfb      	ldrb	r3, [r7, #23]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f001 f8f8 	bl	8003726 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ff6c 	bl	8002414 <I2Cx_Init>
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002548:	4802      	ldr	r0, [pc, #8]	@ (8002554 <SENSOR_IO_Init+0x10>)
 800254a:	f7ff ff63 	bl	8002414 <I2Cx_Init>
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200009a4 	.word	0x200009a4

08002558 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af02      	add	r7, sp, #8
 800255e:	4603      	mov	r3, r0
 8002560:	71fb      	strb	r3, [r7, #7]
 8002562:	460b      	mov	r3, r1
 8002564:	71bb      	strb	r3, [r7, #6]
 8002566:	4613      	mov	r3, r2
 8002568:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800256a:	79bb      	ldrb	r3, [r7, #6]
 800256c:	b29a      	uxth	r2, r3
 800256e:	79f9      	ldrb	r1, [r7, #7]
 8002570:	2301      	movs	r3, #1
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	1d7b      	adds	r3, r7, #5
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	2301      	movs	r3, #1
 800257a:	4803      	ldr	r0, [pc, #12]	@ (8002588 <SENSOR_IO_Write+0x30>)
 800257c:	f7ff ffa5 	bl	80024ca <I2Cx_WriteMultiple>
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	200009a4 	.word	0x200009a4

0800258c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af02      	add	r7, sp, #8
 8002592:	4603      	mov	r3, r0
 8002594:	460a      	mov	r2, r1
 8002596:	71fb      	strb	r3, [r7, #7]
 8002598:	4613      	mov	r3, r2
 800259a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80025a0:	79bb      	ldrb	r3, [r7, #6]
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	79f9      	ldrb	r1, [r7, #7]
 80025a6:	2301      	movs	r3, #1
 80025a8:	9301      	str	r3, [sp, #4]
 80025aa:	f107 030f 	add.w	r3, r7, #15
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	2301      	movs	r3, #1
 80025b2:	4804      	ldr	r0, [pc, #16]	@ (80025c4 <SENSOR_IO_Read+0x38>)
 80025b4:	f7ff ff5c 	bl	8002470 <I2Cx_ReadMultiple>

  return read_value;
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200009a4 	.word	0x200009a4

080025c8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	603a      	str	r2, [r7, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
 80025d6:	460b      	mov	r3, r1
 80025d8:	71bb      	strb	r3, [r7, #6]
 80025da:	4613      	mov	r3, r2
 80025dc:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80025de:	79bb      	ldrb	r3, [r7, #6]
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	79f9      	ldrb	r1, [r7, #7]
 80025e4:	88bb      	ldrh	r3, [r7, #4]
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2301      	movs	r3, #1
 80025ee:	4804      	ldr	r0, [pc, #16]	@ (8002600 <SENSOR_IO_ReadMultiple+0x38>)
 80025f0:	f7ff ff3e 	bl	8002470 <I2Cx_ReadMultiple>
 80025f4:	4603      	mov	r3, r0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200009a4 	.word	0x200009a4

08002604 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800260e:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <BSP_TSENSOR_Init+0x30>)
 8002610:	4a09      	ldr	r2, [pc, #36]	@ (8002638 <BSP_TSENSOR_Init+0x34>)
 8002612:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002614:	f7ff ff96 	bl	8002544 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002618:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <BSP_TSENSOR_Init+0x30>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2100      	movs	r1, #0
 8002620:	20be      	movs	r0, #190	@ 0xbe
 8002622:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002628:	79fb      	ldrb	r3, [r7, #7]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	200009f8 	.word	0x200009f8
 8002638:	20000004 	.word	0x20000004

0800263c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002640:	4b04      	ldr	r3, [pc, #16]	@ (8002654 <BSP_TSENSOR_ReadTemp+0x18>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	20be      	movs	r0, #190	@ 0xbe
 8002648:	4798      	blx	r3
 800264a:	eef0 7a40 	vmov.f32	s15, s0
}
 800264e:	eeb0 0a67 	vmov.f32	s0, s15
 8002652:	bd80      	pop	{r7, pc}
 8002654:	200009f8 	.word	0x200009f8

08002658 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	6039      	str	r1, [r7, #0]
 8002662:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2120      	movs	r1, #32
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff ff8e 	bl	800258c <SENSOR_IO_Read>
 8002670:	4603      	mov	r3, r0
 8002672:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	f023 0304 	bic.w	r3, r3, #4
 800267a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	f023 0303 	bic.w	r3, r3, #3
 800268a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800269a:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	2120      	movs	r1, #32
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff57 	bl	8002558 <SENSOR_IO_Write>
}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b088      	sub	sp, #32
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	b2d8      	uxtb	r0, r3
 80026c0:	f107 0208 	add.w	r2, r7, #8
 80026c4:	2302      	movs	r3, #2
 80026c6:	21b2      	movs	r1, #178	@ 0xb2
 80026c8:	f7ff ff7e 	bl	80025c8 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2135      	movs	r1, #53	@ 0x35
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ff5a 	bl	800258c <SENSOR_IO_Read>
 80026d8:	4603      	mov	r3, r0
 80026da:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80026dc:	7ffb      	ldrb	r3, [r7, #31]
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026e6:	b21a      	sxth	r2, r3
 80026e8:	7a3b      	ldrb	r3, [r7, #8]
 80026ea:	b21b      	sxth	r3, r3
 80026ec:	4313      	orrs	r3, r2
 80026ee:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80026f0:	7ffb      	ldrb	r3, [r7, #31]
 80026f2:	019b      	lsls	r3, r3, #6
 80026f4:	b21b      	sxth	r3, r3
 80026f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026fa:	b21a      	sxth	r2, r3
 80026fc:	7a7b      	ldrb	r3, [r7, #9]
 80026fe:	b21b      	sxth	r3, r3
 8002700:	4313      	orrs	r3, r2
 8002702:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002704:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002708:	10db      	asrs	r3, r3, #3
 800270a:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 800270c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002710:	10db      	asrs	r3, r3, #3
 8002712:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	b2d8      	uxtb	r0, r3
 8002718:	f107 0208 	add.w	r2, r7, #8
 800271c:	2304      	movs	r3, #4
 800271e:	21bc      	movs	r1, #188	@ 0xbc
 8002720:	f7ff ff52 	bl	80025c8 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002724:	7a7b      	ldrb	r3, [r7, #9]
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	b21a      	sxth	r2, r3
 800272a:	7a3b      	ldrb	r3, [r7, #8]
 800272c:	b21b      	sxth	r3, r3
 800272e:	4313      	orrs	r3, r2
 8002730:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002732:	7afb      	ldrb	r3, [r7, #11]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	b21a      	sxth	r2, r3
 8002738:	7abb      	ldrb	r3, [r7, #10]
 800273a:	b21b      	sxth	r3, r3
 800273c:	4313      	orrs	r3, r2
 800273e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	b2d8      	uxtb	r0, r3
 8002744:	f107 0208 	add.w	r2, r7, #8
 8002748:	2302      	movs	r3, #2
 800274a:	21aa      	movs	r1, #170	@ 0xaa
 800274c:	f7ff ff3c 	bl	80025c8 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002750:	7a7b      	ldrb	r3, [r7, #9]
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	b21a      	sxth	r2, r3
 8002756:	7a3b      	ldrb	r3, [r7, #8]
 8002758:	b21b      	sxth	r3, r3
 800275a:	4313      	orrs	r3, r2
 800275c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800275e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002762:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	ee07 3a90 	vmov	s15, r3
 800276c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002770:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002774:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002782:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002786:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800278a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	ee07 3a90 	vmov	s15, r3
 8002794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800279c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80027a0:	ee07 3a90 	vmov	s15, r3
 80027a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ac:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	ee07 3a90 	vmov	s15, r3
}
 80027b6:	eeb0 0a67 	vmov.f32	s0, s15
 80027ba:	3720      	adds	r7, #32
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ca:	2003      	movs	r0, #3
 80027cc:	f000 f901 	bl	80029d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027d0:	200f      	movs	r0, #15
 80027d2:	f7ff fbdd 	bl	8001f90 <HAL_InitTick>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	71fb      	strb	r3, [r7, #7]
 80027e0:	e001      	b.n	80027e6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027e2:	f7ff f8e3 	bl	80019ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027e6:	79fb      	ldrb	r3, [r7, #7]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027f4:	4b06      	ldr	r3, [pc, #24]	@ (8002810 <HAL_IncTick+0x20>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <HAL_IncTick+0x24>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4413      	add	r3, r2
 8002800:	4a04      	ldr	r2, [pc, #16]	@ (8002814 <HAL_IncTick+0x24>)
 8002802:	6013      	str	r3, [r2, #0]
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000018 	.word	0x20000018
 8002814:	200009fc 	.word	0x200009fc

08002818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return uwTick;
 800281c:	4b03      	ldr	r3, [pc, #12]	@ (800282c <HAL_GetTick+0x14>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	200009fc 	.word	0x200009fc

08002830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7ff ffee 	bl	8002818 <HAL_GetTick>
 800283c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d005      	beq.n	8002856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800284a:	4b0a      	ldr	r3, [pc, #40]	@ (8002874 <HAL_Delay+0x44>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4413      	add	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002856:	bf00      	nop
 8002858:	f7ff ffde 	bl	8002818 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	429a      	cmp	r2, r3
 8002866:	d8f7      	bhi.n	8002858 <HAL_Delay+0x28>
  {
  }
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000018 	.word	0x20000018

08002878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002888:	4b0c      	ldr	r3, [pc, #48]	@ (80028bc <__NVIC_SetPriorityGrouping+0x44>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002894:	4013      	ands	r3, r2
 8002896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028aa:	4a04      	ldr	r2, [pc, #16]	@ (80028bc <__NVIC_SetPriorityGrouping+0x44>)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	60d3      	str	r3, [r2, #12]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c4:	4b04      	ldr	r3, [pc, #16]	@ (80028d8 <__NVIC_GetPriorityGrouping+0x18>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	f003 0307 	and.w	r3, r3, #7
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	db0b      	blt.n	8002906 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	f003 021f 	and.w	r2, r3, #31
 80028f4:	4907      	ldr	r1, [pc, #28]	@ (8002914 <__NVIC_EnableIRQ+0x38>)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	2001      	movs	r0, #1
 80028fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000e100 	.word	0xe000e100

08002918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	6039      	str	r1, [r7, #0]
 8002922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	2b00      	cmp	r3, #0
 800292a:	db0a      	blt.n	8002942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	490c      	ldr	r1, [pc, #48]	@ (8002964 <__NVIC_SetPriority+0x4c>)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	0112      	lsls	r2, r2, #4
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	440b      	add	r3, r1
 800293c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002940:	e00a      	b.n	8002958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4908      	ldr	r1, [pc, #32]	@ (8002968 <__NVIC_SetPriority+0x50>)
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	3b04      	subs	r3, #4
 8002950:	0112      	lsls	r2, r2, #4
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	440b      	add	r3, r1
 8002956:	761a      	strb	r2, [r3, #24]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000e100 	.word	0xe000e100
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296c:	b480      	push	{r7}
 800296e:	b089      	sub	sp, #36	@ 0x24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f1c3 0307 	rsb	r3, r3, #7
 8002986:	2b04      	cmp	r3, #4
 8002988:	bf28      	it	cs
 800298a:	2304      	movcs	r3, #4
 800298c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3304      	adds	r3, #4
 8002992:	2b06      	cmp	r3, #6
 8002994:	d902      	bls.n	800299c <NVIC_EncodePriority+0x30>
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3b03      	subs	r3, #3
 800299a:	e000      	b.n	800299e <NVIC_EncodePriority+0x32>
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	f04f 32ff 	mov.w	r2, #4294967295
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43da      	mvns	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	401a      	ands	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b4:	f04f 31ff 	mov.w	r1, #4294967295
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	43d9      	mvns	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c4:	4313      	orrs	r3, r2
         );
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3724      	adds	r7, #36	@ 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff ff4c 	bl	8002878 <__NVIC_SetPriorityGrouping>
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029fa:	f7ff ff61 	bl	80028c0 <__NVIC_GetPriorityGrouping>
 80029fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	6978      	ldr	r0, [r7, #20]
 8002a06:	f7ff ffb1 	bl	800296c <NVIC_EncodePriority>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a10:	4611      	mov	r1, r2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff ff80 	bl	8002918 <__NVIC_SetPriority>
}
 8002a18:	bf00      	nop
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ff54 	bl	80028dc <__NVIC_EnableIRQ>
}
 8002a34:	bf00      	nop
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e0ac      	b.n	8002ba8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 f8b2 	bl	8002bbc <DFSDM_GetChannelFromInstance>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	4a55      	ldr	r2, [pc, #340]	@ (8002bb0 <HAL_DFSDM_ChannelInit+0x174>)
 8002a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e09f      	b.n	8002ba8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7fe ffc7 	bl	80019fc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002a6e:	4b51      	ldr	r3, [pc, #324]	@ (8002bb4 <HAL_DFSDM_ChannelInit+0x178>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	3301      	adds	r3, #1
 8002a74:	4a4f      	ldr	r2, [pc, #316]	@ (8002bb4 <HAL_DFSDM_ChannelInit+0x178>)
 8002a76:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002a78:	4b4e      	ldr	r3, [pc, #312]	@ (8002bb4 <HAL_DFSDM_ChannelInit+0x178>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d125      	bne.n	8002acc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002a80:	4b4d      	ldr	r3, [pc, #308]	@ (8002bb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a4c      	ldr	r2, [pc, #304]	@ (8002bb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a86:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a8a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002a8c:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4948      	ldr	r1, [pc, #288]	@ (8002bb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002a9a:	4b47      	ldr	r3, [pc, #284]	@ (8002bb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a46      	ldr	r2, [pc, #280]	@ (8002bb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002aa0:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8002aa4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	791b      	ldrb	r3, [r3, #4]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d108      	bne.n	8002ac0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002aae:	4b42      	ldr	r3, [pc, #264]	@ (8002bb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	041b      	lsls	r3, r3, #16
 8002aba:	493f      	ldr	r1, [pc, #252]	@ (8002bb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002ac0:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a3c      	ldr	r2, [pc, #240]	@ (8002bb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ac6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002aca:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8002ada:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6819      	ldr	r1, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002aea:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002af0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 020f 	bic.w	r2, r2, #15
 8002b08:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6819      	ldr	r1, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8002b30:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6899      	ldr	r1, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b40:	3b01      	subs	r3, #1
 8002b42:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f002 0207 	and.w	r2, r2, #7
 8002b5c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b68:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b88:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 f810 	bl	8002bbc <DFSDM_GetChannelFromInstance>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4904      	ldr	r1, [pc, #16]	@ (8002bb0 <HAL_DFSDM_ChannelInit+0x174>)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000a04 	.word	0x20000a04
 8002bb4:	20000a00 	.word	0x20000a00
 8002bb8:	40016000 	.word	0x40016000

08002bbc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c38 <DFSDM_GetChannelFromInstance+0x7c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d102      	bne.n	8002bd2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	e02b      	b.n	8002c2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a19      	ldr	r2, [pc, #100]	@ (8002c3c <DFSDM_GetChannelFromInstance+0x80>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d102      	bne.n	8002be0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	e024      	b.n	8002c2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a17      	ldr	r2, [pc, #92]	@ (8002c40 <DFSDM_GetChannelFromInstance+0x84>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d102      	bne.n	8002bee <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002be8:	2302      	movs	r3, #2
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	e01d      	b.n	8002c2a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a14      	ldr	r2, [pc, #80]	@ (8002c44 <DFSDM_GetChannelFromInstance+0x88>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d102      	bne.n	8002bfc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002bf6:	2304      	movs	r3, #4
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	e016      	b.n	8002c2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a12      	ldr	r2, [pc, #72]	@ (8002c48 <DFSDM_GetChannelFromInstance+0x8c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d102      	bne.n	8002c0a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002c04:	2305      	movs	r3, #5
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	e00f      	b.n	8002c2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a0f      	ldr	r2, [pc, #60]	@ (8002c4c <DFSDM_GetChannelFromInstance+0x90>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d102      	bne.n	8002c18 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002c12:	2306      	movs	r3, #6
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	e008      	b.n	8002c2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8002c50 <DFSDM_GetChannelFromInstance+0x94>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d102      	bne.n	8002c26 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002c20:	2307      	movs	r3, #7
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	e001      	b.n	8002c2a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002c26:	2303      	movs	r3, #3
 8002c28:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	40016000 	.word	0x40016000
 8002c3c:	40016020 	.word	0x40016020
 8002c40:	40016040 	.word	0x40016040
 8002c44:	40016080 	.word	0x40016080
 8002c48:	400160a0 	.word	0x400160a0
 8002c4c:	400160c0 	.word	0x400160c0
 8002c50:	400160e0 	.word	0x400160e0

08002c54 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e098      	b.n	8002d98 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4b4d      	ldr	r3, [pc, #308]	@ (8002da4 <HAL_DMA_Init+0x150>)
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d80f      	bhi.n	8002c92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	4b4b      	ldr	r3, [pc, #300]	@ (8002da8 <HAL_DMA_Init+0x154>)
 8002c7a:	4413      	add	r3, r2
 8002c7c:	4a4b      	ldr	r2, [pc, #300]	@ (8002dac <HAL_DMA_Init+0x158>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	091b      	lsrs	r3, r3, #4
 8002c84:	009a      	lsls	r2, r3, #2
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a48      	ldr	r2, [pc, #288]	@ (8002db0 <HAL_DMA_Init+0x15c>)
 8002c8e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c90:	e00e      	b.n	8002cb0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	4b46      	ldr	r3, [pc, #280]	@ (8002db4 <HAL_DMA_Init+0x160>)
 8002c9a:	4413      	add	r3, r2
 8002c9c:	4a43      	ldr	r2, [pc, #268]	@ (8002dac <HAL_DMA_Init+0x158>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	091b      	lsrs	r3, r3, #4
 8002ca4:	009a      	lsls	r2, r3, #2
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a42      	ldr	r2, [pc, #264]	@ (8002db8 <HAL_DMA_Init+0x164>)
 8002cae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d0a:	d039      	beq.n	8002d80 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d10:	4a27      	ldr	r2, [pc, #156]	@ (8002db0 <HAL_DMA_Init+0x15c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d11a      	bne.n	8002d4c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d16:	4b29      	ldr	r3, [pc, #164]	@ (8002dbc <HAL_DMA_Init+0x168>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1e:	f003 031c 	and.w	r3, r3, #28
 8002d22:	210f      	movs	r1, #15
 8002d24:	fa01 f303 	lsl.w	r3, r1, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	4924      	ldr	r1, [pc, #144]	@ (8002dbc <HAL_DMA_Init+0x168>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d30:	4b22      	ldr	r3, [pc, #136]	@ (8002dbc <HAL_DMA_Init+0x168>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6859      	ldr	r1, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3c:	f003 031c 	and.w	r3, r3, #28
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	491d      	ldr	r1, [pc, #116]	@ (8002dbc <HAL_DMA_Init+0x168>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	600b      	str	r3, [r1, #0]
 8002d4a:	e019      	b.n	8002d80 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc0 <HAL_DMA_Init+0x16c>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d54:	f003 031c 	and.w	r3, r3, #28
 8002d58:	210f      	movs	r1, #15
 8002d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	4917      	ldr	r1, [pc, #92]	@ (8002dc0 <HAL_DMA_Init+0x16c>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d66:	4b16      	ldr	r3, [pc, #88]	@ (8002dc0 <HAL_DMA_Init+0x16c>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6859      	ldr	r1, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d72:	f003 031c 	and.w	r3, r3, #28
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	4911      	ldr	r1, [pc, #68]	@ (8002dc0 <HAL_DMA_Init+0x16c>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	40020407 	.word	0x40020407
 8002da8:	bffdfff8 	.word	0xbffdfff8
 8002dac:	cccccccd 	.word	0xcccccccd
 8002db0:	40020000 	.word	0x40020000
 8002db4:	bffdfbf8 	.word	0xbffdfbf8
 8002db8:	40020400 	.word	0x40020400
 8002dbc:	400200a8 	.word	0x400200a8
 8002dc0:	400204a8 	.word	0x400204a8

08002dc4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d008      	beq.n	8002dee <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2204      	movs	r2, #4
 8002de0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e022      	b.n	8002e34 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 020e 	bic.w	r2, r2, #14
 8002dfc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e12:	f003 021c 	and.w	r2, r3, #28
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e20:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d005      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	73fb      	strb	r3, [r7, #15]
 8002e62:	e029      	b.n	8002eb8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 020e 	bic.w	r2, r2, #14
 8002e72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e88:	f003 021c 	and.w	r2, r3, #28
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	2101      	movs	r1, #1
 8002e92:	fa01 f202 	lsl.w	r2, r1, r2
 8002e96:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	4798      	blx	r3
    }
  }
  return status;
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ede:	f003 031c 	and.w	r3, r3, #28
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d026      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x7a>
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d021      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d107      	bne.n	8002f16 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0204 	bic.w	r2, r2, #4
 8002f14:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1a:	f003 021c 	and.w	r2, r3, #28
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	2104      	movs	r1, #4
 8002f24:	fa01 f202 	lsl.w	r2, r1, r2
 8002f28:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d071      	beq.n	8003016 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f3a:	e06c      	b.n	8003016 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f40:	f003 031c 	and.w	r3, r3, #28
 8002f44:	2202      	movs	r2, #2
 8002f46:	409a      	lsls	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d02e      	beq.n	8002fae <HAL_DMA_IRQHandler+0xec>
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d029      	beq.n	8002fae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10b      	bne.n	8002f80 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 020a 	bic.w	r2, r2, #10
 8002f76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f84:	f003 021c 	and.w	r2, r3, #28
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8c:	2102      	movs	r1, #2
 8002f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d038      	beq.n	8003016 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002fac:	e033      	b.n	8003016 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb2:	f003 031c 	and.w	r3, r3, #28
 8002fb6:	2208      	movs	r2, #8
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d02a      	beq.n	8003018 <HAL_DMA_IRQHandler+0x156>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d025      	beq.n	8003018 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 020e 	bic.w	r2, r2, #14
 8002fda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe0:	f003 021c 	and.w	r2, r3, #28
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	2101      	movs	r1, #1
 8002fea:	fa01 f202 	lsl.w	r2, r1, r2
 8002fee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003016:	bf00      	nop
 8003018:	bf00      	nop
}
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800302e:	e17f      	b.n	8003330 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	2101      	movs	r1, #1
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	fa01 f303 	lsl.w	r3, r1, r3
 800303c:	4013      	ands	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 8171 	beq.w	800332a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d005      	beq.n	8003060 <HAL_GPIO_Init+0x40>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d130      	bne.n	80030c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2203      	movs	r2, #3
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4013      	ands	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003096:	2201      	movs	r2, #1
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4013      	ands	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	091b      	lsrs	r3, r3, #4
 80030ac:	f003 0201 	and.w	r2, r3, #1
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d118      	bne.n	8003100 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80030d4:	2201      	movs	r2, #1
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	08db      	lsrs	r3, r3, #3
 80030ea:	f003 0201 	and.w	r2, r3, #1
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	2b03      	cmp	r3, #3
 800310a:	d017      	beq.n	800313c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d123      	bne.n	8003190 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	08da      	lsrs	r2, r3, #3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3208      	adds	r2, #8
 8003150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003154:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	220f      	movs	r2, #15
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4013      	ands	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	08da      	lsrs	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3208      	adds	r2, #8
 800318a:	6939      	ldr	r1, [r7, #16]
 800318c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	2203      	movs	r2, #3
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4013      	ands	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0203 	and.w	r2, r3, #3
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80ac 	beq.w	800332a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003350 <HAL_GPIO_Init+0x330>)
 80031d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d6:	4a5e      	ldr	r2, [pc, #376]	@ (8003350 <HAL_GPIO_Init+0x330>)
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80031de:	4b5c      	ldr	r3, [pc, #368]	@ (8003350 <HAL_GPIO_Init+0x330>)
 80031e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031ea:	4a5a      	ldr	r2, [pc, #360]	@ (8003354 <HAL_GPIO_Init+0x334>)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	089b      	lsrs	r3, r3, #2
 80031f0:	3302      	adds	r3, #2
 80031f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	220f      	movs	r2, #15
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4013      	ands	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003214:	d025      	beq.n	8003262 <HAL_GPIO_Init+0x242>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a4f      	ldr	r2, [pc, #316]	@ (8003358 <HAL_GPIO_Init+0x338>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d01f      	beq.n	800325e <HAL_GPIO_Init+0x23e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a4e      	ldr	r2, [pc, #312]	@ (800335c <HAL_GPIO_Init+0x33c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d019      	beq.n	800325a <HAL_GPIO_Init+0x23a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a4d      	ldr	r2, [pc, #308]	@ (8003360 <HAL_GPIO_Init+0x340>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <HAL_GPIO_Init+0x236>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a4c      	ldr	r2, [pc, #304]	@ (8003364 <HAL_GPIO_Init+0x344>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00d      	beq.n	8003252 <HAL_GPIO_Init+0x232>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a4b      	ldr	r2, [pc, #300]	@ (8003368 <HAL_GPIO_Init+0x348>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d007      	beq.n	800324e <HAL_GPIO_Init+0x22e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a4a      	ldr	r2, [pc, #296]	@ (800336c <HAL_GPIO_Init+0x34c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d101      	bne.n	800324a <HAL_GPIO_Init+0x22a>
 8003246:	2306      	movs	r3, #6
 8003248:	e00c      	b.n	8003264 <HAL_GPIO_Init+0x244>
 800324a:	2307      	movs	r3, #7
 800324c:	e00a      	b.n	8003264 <HAL_GPIO_Init+0x244>
 800324e:	2305      	movs	r3, #5
 8003250:	e008      	b.n	8003264 <HAL_GPIO_Init+0x244>
 8003252:	2304      	movs	r3, #4
 8003254:	e006      	b.n	8003264 <HAL_GPIO_Init+0x244>
 8003256:	2303      	movs	r3, #3
 8003258:	e004      	b.n	8003264 <HAL_GPIO_Init+0x244>
 800325a:	2302      	movs	r3, #2
 800325c:	e002      	b.n	8003264 <HAL_GPIO_Init+0x244>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_GPIO_Init+0x244>
 8003262:	2300      	movs	r3, #0
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	f002 0203 	and.w	r2, r2, #3
 800326a:	0092      	lsls	r2, r2, #2
 800326c:	4093      	lsls	r3, r2
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003274:	4937      	ldr	r1, [pc, #220]	@ (8003354 <HAL_GPIO_Init+0x334>)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	089b      	lsrs	r3, r3, #2
 800327a:	3302      	adds	r3, #2
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003282:	4b3b      	ldr	r3, [pc, #236]	@ (8003370 <HAL_GPIO_Init+0x350>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	43db      	mvns	r3, r3
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4013      	ands	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032a6:	4a32      	ldr	r2, [pc, #200]	@ (8003370 <HAL_GPIO_Init+0x350>)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032ac:	4b30      	ldr	r3, [pc, #192]	@ (8003370 <HAL_GPIO_Init+0x350>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	43db      	mvns	r3, r3
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4013      	ands	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032d0:	4a27      	ldr	r2, [pc, #156]	@ (8003370 <HAL_GPIO_Init+0x350>)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032d6:	4b26      	ldr	r3, [pc, #152]	@ (8003370 <HAL_GPIO_Init+0x350>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	43db      	mvns	r3, r3
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4013      	ands	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003370 <HAL_GPIO_Init+0x350>)
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003300:	4b1b      	ldr	r3, [pc, #108]	@ (8003370 <HAL_GPIO_Init+0x350>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	43db      	mvns	r3, r3
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4013      	ands	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003324:	4a12      	ldr	r2, [pc, #72]	@ (8003370 <HAL_GPIO_Init+0x350>)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	3301      	adds	r3, #1
 800332e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	fa22 f303 	lsr.w	r3, r2, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	f47f ae78 	bne.w	8003030 <HAL_GPIO_Init+0x10>
  }
}
 8003340:	bf00      	nop
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40021000 	.word	0x40021000
 8003354:	40010000 	.word	0x40010000
 8003358:	48000400 	.word	0x48000400
 800335c:	48000800 	.word	0x48000800
 8003360:	48000c00 	.word	0x48000c00
 8003364:	48001000 	.word	0x48001000
 8003368:	48001400 	.word	0x48001400
 800336c:	48001800 	.word	0x48001800
 8003370:	40010400 	.word	0x40010400

08003374 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003382:	e0cd      	b.n	8003520 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003384:	2201      	movs	r2, #1
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	4013      	ands	r3, r2
 8003390:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 80c0 	beq.w	800351a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800339a:	4a68      	ldr	r2, [pc, #416]	@ (800353c <HAL_GPIO_DeInit+0x1c8>)
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	3302      	adds	r3, #2
 80033a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	220f      	movs	r2, #15
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4013      	ands	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033c2:	d025      	beq.n	8003410 <HAL_GPIO_DeInit+0x9c>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a5e      	ldr	r2, [pc, #376]	@ (8003540 <HAL_GPIO_DeInit+0x1cc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d01f      	beq.n	800340c <HAL_GPIO_DeInit+0x98>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a5d      	ldr	r2, [pc, #372]	@ (8003544 <HAL_GPIO_DeInit+0x1d0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d019      	beq.n	8003408 <HAL_GPIO_DeInit+0x94>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a5c      	ldr	r2, [pc, #368]	@ (8003548 <HAL_GPIO_DeInit+0x1d4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d013      	beq.n	8003404 <HAL_GPIO_DeInit+0x90>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a5b      	ldr	r2, [pc, #364]	@ (800354c <HAL_GPIO_DeInit+0x1d8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00d      	beq.n	8003400 <HAL_GPIO_DeInit+0x8c>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a5a      	ldr	r2, [pc, #360]	@ (8003550 <HAL_GPIO_DeInit+0x1dc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d007      	beq.n	80033fc <HAL_GPIO_DeInit+0x88>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a59      	ldr	r2, [pc, #356]	@ (8003554 <HAL_GPIO_DeInit+0x1e0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d101      	bne.n	80033f8 <HAL_GPIO_DeInit+0x84>
 80033f4:	2306      	movs	r3, #6
 80033f6:	e00c      	b.n	8003412 <HAL_GPIO_DeInit+0x9e>
 80033f8:	2307      	movs	r3, #7
 80033fa:	e00a      	b.n	8003412 <HAL_GPIO_DeInit+0x9e>
 80033fc:	2305      	movs	r3, #5
 80033fe:	e008      	b.n	8003412 <HAL_GPIO_DeInit+0x9e>
 8003400:	2304      	movs	r3, #4
 8003402:	e006      	b.n	8003412 <HAL_GPIO_DeInit+0x9e>
 8003404:	2303      	movs	r3, #3
 8003406:	e004      	b.n	8003412 <HAL_GPIO_DeInit+0x9e>
 8003408:	2302      	movs	r3, #2
 800340a:	e002      	b.n	8003412 <HAL_GPIO_DeInit+0x9e>
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <HAL_GPIO_DeInit+0x9e>
 8003410:	2300      	movs	r3, #0
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	f002 0203 	and.w	r2, r2, #3
 8003418:	0092      	lsls	r2, r2, #2
 800341a:	4093      	lsls	r3, r2
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	429a      	cmp	r2, r3
 8003420:	d132      	bne.n	8003488 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003422:	4b4d      	ldr	r3, [pc, #308]	@ (8003558 <HAL_GPIO_DeInit+0x1e4>)
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	43db      	mvns	r3, r3
 800342a:	494b      	ldr	r1, [pc, #300]	@ (8003558 <HAL_GPIO_DeInit+0x1e4>)
 800342c:	4013      	ands	r3, r2
 800342e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003430:	4b49      	ldr	r3, [pc, #292]	@ (8003558 <HAL_GPIO_DeInit+0x1e4>)
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	43db      	mvns	r3, r3
 8003438:	4947      	ldr	r1, [pc, #284]	@ (8003558 <HAL_GPIO_DeInit+0x1e4>)
 800343a:	4013      	ands	r3, r2
 800343c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800343e:	4b46      	ldr	r3, [pc, #280]	@ (8003558 <HAL_GPIO_DeInit+0x1e4>)
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	43db      	mvns	r3, r3
 8003446:	4944      	ldr	r1, [pc, #272]	@ (8003558 <HAL_GPIO_DeInit+0x1e4>)
 8003448:	4013      	ands	r3, r2
 800344a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800344c:	4b42      	ldr	r3, [pc, #264]	@ (8003558 <HAL_GPIO_DeInit+0x1e4>)
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	43db      	mvns	r3, r3
 8003454:	4940      	ldr	r1, [pc, #256]	@ (8003558 <HAL_GPIO_DeInit+0x1e4>)
 8003456:	4013      	ands	r3, r2
 8003458:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	220f      	movs	r2, #15
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800346a:	4a34      	ldr	r2, [pc, #208]	@ (800353c <HAL_GPIO_DeInit+0x1c8>)
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	089b      	lsrs	r3, r3, #2
 8003470:	3302      	adds	r3, #2
 8003472:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	43da      	mvns	r2, r3
 800347a:	4830      	ldr	r0, [pc, #192]	@ (800353c <HAL_GPIO_DeInit+0x1c8>)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	089b      	lsrs	r3, r3, #2
 8003480:	400a      	ands	r2, r1
 8003482:	3302      	adds	r3, #2
 8003484:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	2103      	movs	r1, #3
 8003492:	fa01 f303 	lsl.w	r3, r1, r3
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	08da      	lsrs	r2, r3, #3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3208      	adds	r2, #8
 80034a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	220f      	movs	r2, #15
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	08d2      	lsrs	r2, r2, #3
 80034bc:	4019      	ands	r1, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3208      	adds	r2, #8
 80034c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	2103      	movs	r1, #3
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	401a      	ands	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	2101      	movs	r1, #1
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	fa01 f303 	lsl.w	r3, r1, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	401a      	ands	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	2103      	movs	r1, #3
 80034fa:	fa01 f303 	lsl.w	r3, r1, r3
 80034fe:	43db      	mvns	r3, r3
 8003500:	401a      	ands	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800350a:	2101      	movs	r1, #1
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	fa01 f303 	lsl.w	r3, r1, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	401a      	ands	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	3301      	adds	r3, #1
 800351e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	fa22 f303 	lsr.w	r3, r2, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	f47f af2b 	bne.w	8003384 <HAL_GPIO_DeInit+0x10>
  }
}
 800352e:	bf00      	nop
 8003530:	bf00      	nop
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	40010000 	.word	0x40010000
 8003540:	48000400 	.word	0x48000400
 8003544:	48000800 	.word	0x48000800
 8003548:	48000c00 	.word	0x48000c00
 800354c:	48001000 	.word	0x48001000
 8003550:	48001400 	.word	0x48001400
 8003554:	48001800 	.word	0x48001800
 8003558:	40010400 	.word	0x40010400

0800355c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	807b      	strh	r3, [r7, #2]
 8003568:	4613      	mov	r3, r2
 800356a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800356c:	787b      	ldrb	r3, [r7, #1]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003572:	887a      	ldrh	r2, [r7, #2]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003578:	e002      	b.n	8003580 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800357a:	887a      	ldrh	r2, [r7, #2]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800359e:	887a      	ldrh	r2, [r7, #2]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4013      	ands	r3, r2
 80035a4:	041a      	lsls	r2, r3, #16
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	43d9      	mvns	r1, r3
 80035aa:	887b      	ldrh	r3, [r7, #2]
 80035ac:	400b      	ands	r3, r1
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	619a      	str	r2, [r3, #24]
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035ca:	4b08      	ldr	r3, [pc, #32]	@ (80035ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035cc:	695a      	ldr	r2, [r3, #20]
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d006      	beq.n	80035e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035d6:	4a05      	ldr	r2, [pc, #20]	@ (80035ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035dc:	88fb      	ldrh	r3, [r7, #6]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fe f87c 	bl	80016dc <HAL_GPIO_EXTI_Callback>
  }
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40010400 	.word	0x40010400

080035f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e08d      	b.n	800371e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fe fa54 	bl	8001ac4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2224      	movs	r2, #36	@ 0x24
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003640:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003650:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d107      	bne.n	800366a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	e006      	b.n	8003678 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003676:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d108      	bne.n	8003692 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	e007      	b.n	80036a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69d9      	ldr	r1, [r3, #28]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1a      	ldr	r2, [r3, #32]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e021      	b.n	800377c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2224      	movs	r2, #36	@ 0x24
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0201 	bic.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7fe fa15 	bl	8001b80 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	4608      	mov	r0, r1
 800378e:	4611      	mov	r1, r2
 8003790:	461a      	mov	r2, r3
 8003792:	4603      	mov	r3, r0
 8003794:	817b      	strh	r3, [r7, #10]
 8003796:	460b      	mov	r3, r1
 8003798:	813b      	strh	r3, [r7, #8]
 800379a:	4613      	mov	r3, r2
 800379c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	f040 80f9 	bne.w	800399e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <HAL_I2C_Mem_Write+0x34>
 80037b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d105      	bne.n	80037c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037be:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0ed      	b.n	80039a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_I2C_Mem_Write+0x4e>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e0e6      	b.n	80039a0 <HAL_I2C_Mem_Write+0x21c>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037da:	f7ff f81d 	bl	8002818 <HAL_GetTick>
 80037de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	2319      	movs	r3, #25
 80037e6:	2201      	movs	r2, #1
 80037e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 fac3 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0d1      	b.n	80039a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2221      	movs	r2, #33	@ 0x21
 8003800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2240      	movs	r2, #64	@ 0x40
 8003808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a3a      	ldr	r2, [r7, #32]
 8003816:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800381c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003824:	88f8      	ldrh	r0, [r7, #6]
 8003826:	893a      	ldrh	r2, [r7, #8]
 8003828:	8979      	ldrh	r1, [r7, #10]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	9301      	str	r3, [sp, #4]
 800382e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	4603      	mov	r3, r0
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f9d3 	bl	8003be0 <I2C_RequestMemoryWrite>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0a9      	b.n	80039a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	2bff      	cmp	r3, #255	@ 0xff
 8003854:	d90e      	bls.n	8003874 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	22ff      	movs	r2, #255	@ 0xff
 800385a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003860:	b2da      	uxtb	r2, r3
 8003862:	8979      	ldrh	r1, [r7, #10]
 8003864:	2300      	movs	r3, #0
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 fc47 	bl	8004100 <I2C_TransferConfig>
 8003872:	e00f      	b.n	8003894 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003882:	b2da      	uxtb	r2, r3
 8003884:	8979      	ldrh	r1, [r7, #10]
 8003886:	2300      	movs	r3, #0
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 fc36 	bl	8004100 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 fac6 	bl	8003e2a <I2C_WaitOnTXISFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e07b      	b.n	80039a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ac:	781a      	ldrb	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d034      	beq.n	800394c <HAL_I2C_Mem_Write+0x1c8>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d130      	bne.n	800394c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f0:	2200      	movs	r2, #0
 80038f2:	2180      	movs	r1, #128	@ 0x80
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 fa3f 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e04d      	b.n	80039a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003908:	b29b      	uxth	r3, r3
 800390a:	2bff      	cmp	r3, #255	@ 0xff
 800390c:	d90e      	bls.n	800392c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	22ff      	movs	r2, #255	@ 0xff
 8003912:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003918:	b2da      	uxtb	r2, r3
 800391a:	8979      	ldrh	r1, [r7, #10]
 800391c:	2300      	movs	r3, #0
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 fbeb 	bl	8004100 <I2C_TransferConfig>
 800392a:	e00f      	b.n	800394c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393a:	b2da      	uxtb	r2, r3
 800393c:	8979      	ldrh	r1, [r7, #10]
 800393e:	2300      	movs	r3, #0
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 fbda 	bl	8004100 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d19e      	bne.n	8003894 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 faac 	bl	8003eb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e01a      	b.n	80039a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2220      	movs	r2, #32
 8003970:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6859      	ldr	r1, [r3, #4]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	4b0a      	ldr	r3, [pc, #40]	@ (80039a8 <HAL_I2C_Mem_Write+0x224>)
 800397e:	400b      	ands	r3, r1
 8003980:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	e000      	b.n	80039a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800399e:	2302      	movs	r3, #2
  }
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	fe00e800 	.word	0xfe00e800

080039ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	4608      	mov	r0, r1
 80039b6:	4611      	mov	r1, r2
 80039b8:	461a      	mov	r2, r3
 80039ba:	4603      	mov	r3, r0
 80039bc:	817b      	strh	r3, [r7, #10]
 80039be:	460b      	mov	r3, r1
 80039c0:	813b      	strh	r3, [r7, #8]
 80039c2:	4613      	mov	r3, r2
 80039c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	f040 80fd 	bne.w	8003bce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <HAL_I2C_Mem_Read+0x34>
 80039da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d105      	bne.n	80039ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0f1      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_I2C_Mem_Read+0x4e>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e0ea      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x224>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a02:	f7fe ff09 	bl	8002818 <HAL_GetTick>
 8003a06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	2319      	movs	r3, #25
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f9af 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0d5      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2222      	movs	r2, #34	@ 0x22
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2240      	movs	r2, #64	@ 0x40
 8003a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a3a      	ldr	r2, [r7, #32]
 8003a3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a4c:	88f8      	ldrh	r0, [r7, #6]
 8003a4e:	893a      	ldrh	r2, [r7, #8]
 8003a50:	8979      	ldrh	r1, [r7, #10]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 f913 	bl	8003c88 <I2C_RequestMemoryRead>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0ad      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2bff      	cmp	r3, #255	@ 0xff
 8003a7c:	d90e      	bls.n	8003a9c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2201      	movs	r2, #1
 8003a82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	8979      	ldrh	r1, [r7, #10]
 8003a8c:	4b52      	ldr	r3, [pc, #328]	@ (8003bd8 <HAL_I2C_Mem_Read+0x22c>)
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 fb33 	bl	8004100 <I2C_TransferConfig>
 8003a9a:	e00f      	b.n	8003abc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	8979      	ldrh	r1, [r7, #10]
 8003aae:	4b4a      	ldr	r3, [pc, #296]	@ (8003bd8 <HAL_I2C_Mem_Read+0x22c>)
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fb22 	bl	8004100 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2104      	movs	r1, #4
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f956 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e07c      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d034      	beq.n	8003b7c <HAL_I2C_Mem_Read+0x1d0>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d130      	bne.n	8003b7c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b20:	2200      	movs	r2, #0
 8003b22:	2180      	movs	r1, #128	@ 0x80
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 f927 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e04d      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2bff      	cmp	r3, #255	@ 0xff
 8003b3c:	d90e      	bls.n	8003b5c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	8979      	ldrh	r1, [r7, #10]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fad3 	bl	8004100 <I2C_TransferConfig>
 8003b5a:	e00f      	b.n	8003b7c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	8979      	ldrh	r1, [r7, #10]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fac2 	bl	8004100 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d19a      	bne.n	8003abc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f994 	bl	8003eb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e01a      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6859      	ldr	r1, [r3, #4]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	4b0b      	ldr	r3, [pc, #44]	@ (8003bdc <HAL_I2C_Mem_Read+0x230>)
 8003bae:	400b      	ands	r3, r1
 8003bb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e000      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003bce:	2302      	movs	r3, #2
  }
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	80002400 	.word	0x80002400
 8003bdc:	fe00e800 	.word	0xfe00e800

08003be0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	4608      	mov	r0, r1
 8003bea:	4611      	mov	r1, r2
 8003bec:	461a      	mov	r2, r3
 8003bee:	4603      	mov	r3, r0
 8003bf0:	817b      	strh	r3, [r7, #10]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	813b      	strh	r3, [r7, #8]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003bfa:	88fb      	ldrh	r3, [r7, #6]
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	8979      	ldrh	r1, [r7, #10]
 8003c00:	4b20      	ldr	r3, [pc, #128]	@ (8003c84 <I2C_RequestMemoryWrite+0xa4>)
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 fa79 	bl	8004100 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	69b9      	ldr	r1, [r7, #24]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f909 	bl	8003e2a <I2C_WaitOnTXISFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e02c      	b.n	8003c7c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c22:	88fb      	ldrh	r3, [r7, #6]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d105      	bne.n	8003c34 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c28:	893b      	ldrh	r3, [r7, #8]
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c32:	e015      	b.n	8003c60 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c34:	893b      	ldrh	r3, [r7, #8]
 8003c36:	0a1b      	lsrs	r3, r3, #8
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	69b9      	ldr	r1, [r7, #24]
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 f8ef 	bl	8003e2a <I2C_WaitOnTXISFlagUntilTimeout>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e012      	b.n	8003c7c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c56:	893b      	ldrh	r3, [r7, #8]
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2200      	movs	r2, #0
 8003c68:	2180      	movs	r1, #128	@ 0x80
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f884 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	80002000 	.word	0x80002000

08003c88 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	4608      	mov	r0, r1
 8003c92:	4611      	mov	r1, r2
 8003c94:	461a      	mov	r2, r3
 8003c96:	4603      	mov	r3, r0
 8003c98:	817b      	strh	r3, [r7, #10]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	813b      	strh	r3, [r7, #8]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	8979      	ldrh	r1, [r7, #10]
 8003ca8:	4b20      	ldr	r3, [pc, #128]	@ (8003d2c <I2C_RequestMemoryRead+0xa4>)
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	2300      	movs	r3, #0
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 fa26 	bl	8004100 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	69b9      	ldr	r1, [r7, #24]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f8b6 	bl	8003e2a <I2C_WaitOnTXISFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e02c      	b.n	8003d22 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cc8:	88fb      	ldrh	r3, [r7, #6]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d105      	bne.n	8003cda <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cce:	893b      	ldrh	r3, [r7, #8]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cd8:	e015      	b.n	8003d06 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cda:	893b      	ldrh	r3, [r7, #8]
 8003cdc:	0a1b      	lsrs	r3, r3, #8
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	69b9      	ldr	r1, [r7, #24]
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 f89c 	bl	8003e2a <I2C_WaitOnTXISFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e012      	b.n	8003d22 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cfc:	893b      	ldrh	r3, [r7, #8]
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2140      	movs	r1, #64	@ 0x40
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f831 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	80002000 	.word	0x80002000

08003d30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d103      	bne.n	8003d4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d007      	beq.n	8003d6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	619a      	str	r2, [r3, #24]
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	4613      	mov	r3, r2
 8003d86:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d88:	e03b      	b.n	8003e02 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	6839      	ldr	r1, [r7, #0]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f8d6 	bl	8003f40 <I2C_IsErrorOccurred>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e041      	b.n	8003e22 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da4:	d02d      	beq.n	8003e02 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da6:	f7fe fd37 	bl	8002818 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d302      	bcc.n	8003dbc <I2C_WaitOnFlagUntilTimeout+0x44>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d122      	bne.n	8003e02 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699a      	ldr	r2, [r3, #24]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	bf0c      	ite	eq
 8003dcc:	2301      	moveq	r3, #1
 8003dce:	2300      	movne	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	79fb      	ldrb	r3, [r7, #7]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d113      	bne.n	8003e02 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dde:	f043 0220 	orr.w	r2, r3, #32
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e00f      	b.n	8003e22 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699a      	ldr	r2, [r3, #24]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	bf0c      	ite	eq
 8003e12:	2301      	moveq	r3, #1
 8003e14:	2300      	movne	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	461a      	mov	r2, r3
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d0b4      	beq.n	8003d8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e36:	e033      	b.n	8003ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f87f 	bl	8003f40 <I2C_IsErrorOccurred>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e031      	b.n	8003eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e52:	d025      	beq.n	8003ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e54:	f7fe fce0 	bl	8002818 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d302      	bcc.n	8003e6a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d11a      	bne.n	8003ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d013      	beq.n	8003ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7c:	f043 0220 	orr.w	r2, r3, #32
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e007      	b.n	8003eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d1c4      	bne.n	8003e38 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ec4:	e02f      	b.n	8003f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f838 	bl	8003f40 <I2C_IsErrorOccurred>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e02d      	b.n	8003f36 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eda:	f7fe fc9d 	bl	8002818 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d302      	bcc.n	8003ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d11a      	bne.n	8003f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b20      	cmp	r3, #32
 8003efc:	d013      	beq.n	8003f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f02:	f043 0220 	orr.w	r2, r3, #32
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e007      	b.n	8003f36 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	f003 0320 	and.w	r3, r3, #32
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	d1c8      	bne.n	8003ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08a      	sub	sp, #40	@ 0x28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d068      	beq.n	800403e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2210      	movs	r2, #16
 8003f72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f74:	e049      	b.n	800400a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d045      	beq.n	800400a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f7e:	f7fe fc4b 	bl	8002818 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d302      	bcc.n	8003f94 <I2C_IsErrorOccurred+0x54>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d13a      	bne.n	800400a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fa6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fb6:	d121      	bne.n	8003ffc <I2C_IsErrorOccurred+0xbc>
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fbe:	d01d      	beq.n	8003ffc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003fc0:	7cfb      	ldrb	r3, [r7, #19]
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	d01a      	beq.n	8003ffc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fd4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003fd6:	f7fe fc1f 	bl	8002818 <HAL_GetTick>
 8003fda:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fdc:	e00e      	b.n	8003ffc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003fde:	f7fe fc1b 	bl	8002818 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b19      	cmp	r3, #25
 8003fea:	d907      	bls.n	8003ffc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	f043 0320 	orr.w	r3, r3, #32
 8003ff2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003ffa:	e006      	b.n	800400a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b20      	cmp	r3, #32
 8004008:	d1e9      	bne.n	8003fde <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b20      	cmp	r3, #32
 8004016:	d003      	beq.n	8004020 <I2C_IsErrorOccurred+0xe0>
 8004018:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0aa      	beq.n	8003f76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004024:	2b00      	cmp	r3, #0
 8004026:	d103      	bne.n	8004030 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2220      	movs	r2, #32
 800402e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	f043 0304 	orr.w	r3, r3, #4
 8004036:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00b      	beq.n	8004068 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004060:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00b      	beq.n	800408a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	f043 0308 	orr.w	r3, r3, #8
 8004078:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004082:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00b      	beq.n	80040ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	f043 0302 	orr.w	r3, r3, #2
 800409a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80040ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d01c      	beq.n	80040ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f7ff fe3b 	bl	8003d30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6859      	ldr	r1, [r3, #4]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	4b0d      	ldr	r3, [pc, #52]	@ (80040fc <I2C_IsErrorOccurred+0x1bc>)
 80040c6:	400b      	ands	r3, r1
 80040c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	431a      	orrs	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2220      	movs	r2, #32
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80040ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3728      	adds	r7, #40	@ 0x28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	fe00e800 	.word	0xfe00e800

08004100 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	607b      	str	r3, [r7, #4]
 800410a:	460b      	mov	r3, r1
 800410c:	817b      	strh	r3, [r7, #10]
 800410e:	4613      	mov	r3, r2
 8004110:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004112:	897b      	ldrh	r3, [r7, #10]
 8004114:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004118:	7a7b      	ldrb	r3, [r7, #9]
 800411a:	041b      	lsls	r3, r3, #16
 800411c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004120:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	4313      	orrs	r3, r2
 800412a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800412e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	0d5b      	lsrs	r3, r3, #21
 800413a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800413e:	4b08      	ldr	r3, [pc, #32]	@ (8004160 <I2C_TransferConfig+0x60>)
 8004140:	430b      	orrs	r3, r1
 8004142:	43db      	mvns	r3, r3
 8004144:	ea02 0103 	and.w	r1, r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004152:	bf00      	nop
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	03ff63ff 	.word	0x03ff63ff

08004164 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b20      	cmp	r3, #32
 8004178:	d138      	bne.n	80041ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004180:	2b01      	cmp	r3, #1
 8004182:	d101      	bne.n	8004188 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004184:	2302      	movs	r3, #2
 8004186:	e032      	b.n	80041ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2224      	movs	r2, #36	@ 0x24
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0201 	bic.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6819      	ldr	r1, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	e000      	b.n	80041ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041ec:	2302      	movs	r3, #2
  }
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b085      	sub	sp, #20
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b20      	cmp	r3, #32
 800420e:	d139      	bne.n	8004284 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004216:	2b01      	cmp	r3, #1
 8004218:	d101      	bne.n	800421e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800421a:	2302      	movs	r3, #2
 800421c:	e033      	b.n	8004286 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2224      	movs	r2, #36	@ 0x24
 800422a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0201 	bic.w	r2, r2, #1
 800423c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800424c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	021b      	lsls	r3, r3, #8
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	e000      	b.n	8004286 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004284:	2302      	movs	r3, #2
  }
}
 8004286:	4618      	mov	r0, r3
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b086      	sub	sp, #24
 8004296:	af02      	add	r7, sp, #8
 8004298:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e101      	b.n	80044a8 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d106      	bne.n	80042be <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7fd fdcd 	bl	8001e58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2203      	movs	r2, #3
 80042c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f003 fac7 	bl	8007864 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6818      	ldr	r0, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	7c1a      	ldrb	r2, [r3, #16]
 80042de:	f88d 2000 	strb.w	r2, [sp]
 80042e2:	3304      	adds	r3, #4
 80042e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042e6:	f003 fa90 	bl	800780a <USB_CoreInit>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0d5      	b.n	80044a8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2100      	movs	r1, #0
 8004302:	4618      	mov	r0, r3
 8004304:	f003 fabf 	bl	8007886 <USB_SetCurrentMode>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d005      	beq.n	800431a <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2202      	movs	r2, #2
 8004312:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e0c6      	b.n	80044a8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800431a:	2300      	movs	r3, #0
 800431c:	73fb      	strb	r3, [r7, #15]
 800431e:	e04a      	b.n	80043b6 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004320:	7bfa      	ldrb	r2, [r7, #15]
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	3315      	adds	r3, #21
 8004330:	2201      	movs	r2, #1
 8004332:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004334:	7bfa      	ldrb	r2, [r7, #15]
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	4613      	mov	r3, r2
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	4413      	add	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	3314      	adds	r3, #20
 8004344:	7bfa      	ldrb	r2, [r7, #15]
 8004346:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004348:	7bfa      	ldrb	r2, [r7, #15]
 800434a:	7bfb      	ldrb	r3, [r7, #15]
 800434c:	b298      	uxth	r0, r3
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	4613      	mov	r3, r2
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	332e      	adds	r3, #46	@ 0x2e
 800435c:	4602      	mov	r2, r0
 800435e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004360:	7bfa      	ldrb	r2, [r7, #15]
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	4613      	mov	r3, r2
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	3318      	adds	r3, #24
 8004370:	2200      	movs	r2, #0
 8004372:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004374:	7bfa      	ldrb	r2, [r7, #15]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	4413      	add	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	331c      	adds	r3, #28
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004388:	7bfa      	ldrb	r2, [r7, #15]
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	4613      	mov	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	4413      	add	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	3320      	adds	r3, #32
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800439c:	7bfa      	ldrb	r2, [r7, #15]
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	4613      	mov	r3, r2
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	3324      	adds	r3, #36	@ 0x24
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	3301      	adds	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	791b      	ldrb	r3, [r3, #4]
 80043ba:	7bfa      	ldrb	r2, [r7, #15]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d3af      	bcc.n	8004320 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043c0:	2300      	movs	r3, #0
 80043c2:	73fb      	strb	r3, [r7, #15]
 80043c4:	e044      	b.n	8004450 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80043c6:	7bfa      	ldrb	r2, [r7, #15]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80043d8:	2200      	movs	r2, #0
 80043da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043dc:	7bfa      	ldrb	r2, [r7, #15]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80043ee:	7bfa      	ldrb	r2, [r7, #15]
 80043f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043f2:	7bfa      	ldrb	r2, [r7, #15]
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004404:	2200      	movs	r2, #0
 8004406:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004408:	7bfa      	ldrb	r2, [r7, #15]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	4413      	add	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800441e:	7bfa      	ldrb	r2, [r7, #15]
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	4413      	add	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	440b      	add	r3, r1
 800442c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004434:	7bfa      	ldrb	r2, [r7, #15]
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	4613      	mov	r3, r2
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	3301      	adds	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	791b      	ldrb	r3, [r3, #4]
 8004454:	7bfa      	ldrb	r2, [r7, #15]
 8004456:	429a      	cmp	r2, r3
 8004458:	d3b5      	bcc.n	80043c6 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	7c1a      	ldrb	r2, [r3, #16]
 8004462:	f88d 2000 	strb.w	r2, [sp]
 8004466:	3304      	adds	r3, #4
 8004468:	cb0e      	ldmia	r3, {r1, r2, r3}
 800446a:	f003 fa59 	bl	8007920 <USB_DevInit>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e013      	b.n	80044a8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	7b1b      	ldrb	r3, [r3, #12]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d102      	bne.n	800449c <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f80a 	bl	80044b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f003 fbfe 	bl	8007ca2 <USB_DevDisconnect>

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044e2:	f043 0303 	orr.w	r3, r3, #3
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044fc:	4b05      	ldr	r3, [pc, #20]	@ (8004514 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a04      	ldr	r2, [pc, #16]	@ (8004514 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004502:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004506:	6013      	str	r3, [r2, #0]
}
 8004508:	bf00      	nop
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40007000 	.word	0x40007000

08004518 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800451c:	4b04      	ldr	r3, [pc, #16]	@ (8004530 <HAL_PWREx_GetVoltageRange+0x18>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004524:	4618      	mov	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40007000 	.word	0x40007000

08004534 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004542:	d130      	bne.n	80045a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004544:	4b23      	ldr	r3, [pc, #140]	@ (80045d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800454c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004550:	d038      	beq.n	80045c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004552:	4b20      	ldr	r3, [pc, #128]	@ (80045d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800455a:	4a1e      	ldr	r2, [pc, #120]	@ (80045d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800455c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004560:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004562:	4b1d      	ldr	r3, [pc, #116]	@ (80045d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2232      	movs	r2, #50	@ 0x32
 8004568:	fb02 f303 	mul.w	r3, r2, r3
 800456c:	4a1b      	ldr	r2, [pc, #108]	@ (80045dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	0c9b      	lsrs	r3, r3, #18
 8004574:	3301      	adds	r3, #1
 8004576:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004578:	e002      	b.n	8004580 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3b01      	subs	r3, #1
 800457e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004580:	4b14      	ldr	r3, [pc, #80]	@ (80045d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800458c:	d102      	bne.n	8004594 <HAL_PWREx_ControlVoltageScaling+0x60>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1f2      	bne.n	800457a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004594:	4b0f      	ldr	r3, [pc, #60]	@ (80045d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800459c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045a0:	d110      	bne.n	80045c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e00f      	b.n	80045c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80045a6:	4b0b      	ldr	r3, [pc, #44]	@ (80045d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80045ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045b2:	d007      	beq.n	80045c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045b4:	4b07      	ldr	r3, [pc, #28]	@ (80045d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045bc:	4a05      	ldr	r2, [pc, #20]	@ (80045d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	40007000 	.word	0x40007000
 80045d8:	20000000 	.word	0x20000000
 80045dc:	431bde83 	.word	0x431bde83

080045e0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80045e4:	4b05      	ldr	r3, [pc, #20]	@ (80045fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	4a04      	ldr	r2, [pc, #16]	@ (80045fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80045ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045ee:	6053      	str	r3, [r2, #4]
}
 80045f0:	bf00      	nop
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40007000 	.word	0x40007000

08004600 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af02      	add	r7, sp, #8
 8004606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004608:	f7fe f906 	bl	8002818 <HAL_GetTick>
 800460c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e063      	b.n	80046e0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10b      	bne.n	800463c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7fd facb 	bl	8001bc8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004632:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f858 	bl	80046ec <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	3b01      	subs	r3, #1
 800464c:	021a      	lsls	r2, r3, #8
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	2120      	movs	r1, #32
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f850 	bl	8004708 <QSPI_WaitFlagStateUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800466c:	7afb      	ldrb	r3, [r7, #11]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d131      	bne.n	80046d6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800467c:	f023 0310 	bic.w	r3, r3, #16
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6852      	ldr	r2, [r2, #4]
 8004684:	0611      	lsls	r1, r2, #24
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	68d2      	ldr	r2, [r2, #12]
 800468a:	4311      	orrs	r1, r2
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6812      	ldr	r2, [r2, #0]
 8004690:	430b      	orrs	r3, r1
 8004692:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	4b13      	ldr	r3, [pc, #76]	@ (80046e8 <HAL_QSPI_Init+0xe8>)
 800469c:	4013      	ands	r3, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6912      	ldr	r2, [r2, #16]
 80046a2:	0411      	lsls	r1, r2, #16
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6952      	ldr	r2, [r2, #20]
 80046a8:	4311      	orrs	r1, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6992      	ldr	r2, [r2, #24]
 80046ae:	4311      	orrs	r1, r2
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6812      	ldr	r2, [r2, #0]
 80046b4:	430b      	orrs	r3, r1
 80046b6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80046de:	7afb      	ldrb	r3, [r7, #11]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	ffe0f8fe 	.word	0xffe0f8fe

080046ec <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	4613      	mov	r3, r2
 8004716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004718:	e01a      	b.n	8004750 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004720:	d016      	beq.n	8004750 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004722:	f7fe f879 	bl	8002818 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	429a      	cmp	r2, r3
 8004730:	d302      	bcc.n	8004738 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10b      	bne.n	8004750 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2204      	movs	r2, #4
 800473c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004744:	f043 0201 	orr.w	r2, r3, #1
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e00e      	b.n	800476e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	4013      	ands	r3, r2
 800475a:	2b00      	cmp	r3, #0
 800475c:	bf14      	ite	ne
 800475e:	2301      	movne	r3, #1
 8004760:	2300      	moveq	r3, #0
 8004762:	b2db      	uxtb	r3, r3
 8004764:	461a      	mov	r2, r3
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	429a      	cmp	r2, r3
 800476a:	d1d6      	bne.n	800471a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e3ca      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800478a:	4b97      	ldr	r3, [pc, #604]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 030c 	and.w	r3, r3, #12
 8004792:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004794:	4b94      	ldr	r3, [pc, #592]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f003 0303 	and.w	r3, r3, #3
 800479c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 80e4 	beq.w	8004974 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d007      	beq.n	80047c2 <HAL_RCC_OscConfig+0x4a>
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b0c      	cmp	r3, #12
 80047b6:	f040 808b 	bne.w	80048d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	f040 8087 	bne.w	80048d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047c2:	4b89      	ldr	r3, [pc, #548]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d005      	beq.n	80047da <HAL_RCC_OscConfig+0x62>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e3a2      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1a      	ldr	r2, [r3, #32]
 80047de:	4b82      	ldr	r3, [pc, #520]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d004      	beq.n	80047f4 <HAL_RCC_OscConfig+0x7c>
 80047ea:	4b7f      	ldr	r3, [pc, #508]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047f2:	e005      	b.n	8004800 <HAL_RCC_OscConfig+0x88>
 80047f4:	4b7c      	ldr	r3, [pc, #496]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 80047f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047fa:	091b      	lsrs	r3, r3, #4
 80047fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004800:	4293      	cmp	r3, r2
 8004802:	d223      	bcs.n	800484c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	4618      	mov	r0, r3
 800480a:	f000 fd87 	bl	800531c <RCC_SetFlashLatencyFromMSIRange>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e383      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004818:	4b73      	ldr	r3, [pc, #460]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a72      	ldr	r2, [pc, #456]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 800481e:	f043 0308 	orr.w	r3, r3, #8
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	4b70      	ldr	r3, [pc, #448]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	496d      	ldr	r1, [pc, #436]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 8004832:	4313      	orrs	r3, r2
 8004834:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004836:	4b6c      	ldr	r3, [pc, #432]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	4968      	ldr	r1, [pc, #416]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 8004846:	4313      	orrs	r3, r2
 8004848:	604b      	str	r3, [r1, #4]
 800484a:	e025      	b.n	8004898 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800484c:	4b66      	ldr	r3, [pc, #408]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a65      	ldr	r2, [pc, #404]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 8004852:	f043 0308 	orr.w	r3, r3, #8
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	4b63      	ldr	r3, [pc, #396]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	4960      	ldr	r1, [pc, #384]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 8004866:	4313      	orrs	r3, r2
 8004868:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800486a:	4b5f      	ldr	r3, [pc, #380]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	495b      	ldr	r1, [pc, #364]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 800487a:	4313      	orrs	r3, r2
 800487c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d109      	bne.n	8004898 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	4618      	mov	r0, r3
 800488a:	f000 fd47 	bl	800531c <RCC_SetFlashLatencyFromMSIRange>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e343      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004898:	f000 fc4a 	bl	8005130 <HAL_RCC_GetSysClockFreq>
 800489c:	4602      	mov	r2, r0
 800489e:	4b52      	ldr	r3, [pc, #328]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	091b      	lsrs	r3, r3, #4
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	4950      	ldr	r1, [pc, #320]	@ (80049ec <HAL_RCC_OscConfig+0x274>)
 80048aa:	5ccb      	ldrb	r3, [r1, r3]
 80048ac:	f003 031f 	and.w	r3, r3, #31
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
 80048b4:	4a4e      	ldr	r2, [pc, #312]	@ (80049f0 <HAL_RCC_OscConfig+0x278>)
 80048b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048b8:	4b4e      	ldr	r3, [pc, #312]	@ (80049f4 <HAL_RCC_OscConfig+0x27c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fd fb67 	bl	8001f90 <HAL_InitTick>
 80048c2:	4603      	mov	r3, r0
 80048c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d052      	beq.n	8004972 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	e327      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d032      	beq.n	800493e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048d8:	4b43      	ldr	r3, [pc, #268]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a42      	ldr	r2, [pc, #264]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048e4:	f7fd ff98 	bl	8002818 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048ec:	f7fd ff94 	bl	8002818 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e310      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048fe:	4b3a      	ldr	r3, [pc, #232]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0f0      	beq.n	80048ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800490a:	4b37      	ldr	r3, [pc, #220]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a36      	ldr	r2, [pc, #216]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 8004910:	f043 0308 	orr.w	r3, r3, #8
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	4b34      	ldr	r3, [pc, #208]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	4931      	ldr	r1, [pc, #196]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 8004924:	4313      	orrs	r3, r2
 8004926:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004928:	4b2f      	ldr	r3, [pc, #188]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	021b      	lsls	r3, r3, #8
 8004936:	492c      	ldr	r1, [pc, #176]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 8004938:	4313      	orrs	r3, r2
 800493a:	604b      	str	r3, [r1, #4]
 800493c:	e01a      	b.n	8004974 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800493e:	4b2a      	ldr	r3, [pc, #168]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a29      	ldr	r2, [pc, #164]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 8004944:	f023 0301 	bic.w	r3, r3, #1
 8004948:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800494a:	f7fd ff65 	bl	8002818 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004952:	f7fd ff61 	bl	8002818 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e2dd      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004964:	4b20      	ldr	r3, [pc, #128]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1f0      	bne.n	8004952 <HAL_RCC_OscConfig+0x1da>
 8004970:	e000      	b.n	8004974 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004972:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d074      	beq.n	8004a6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	2b08      	cmp	r3, #8
 8004984:	d005      	beq.n	8004992 <HAL_RCC_OscConfig+0x21a>
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b0c      	cmp	r3, #12
 800498a:	d10e      	bne.n	80049aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2b03      	cmp	r3, #3
 8004990:	d10b      	bne.n	80049aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004992:	4b15      	ldr	r3, [pc, #84]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d064      	beq.n	8004a68 <HAL_RCC_OscConfig+0x2f0>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d160      	bne.n	8004a68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e2ba      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049b2:	d106      	bne.n	80049c2 <HAL_RCC_OscConfig+0x24a>
 80049b4:	4b0c      	ldr	r3, [pc, #48]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a0b      	ldr	r2, [pc, #44]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 80049ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049be:	6013      	str	r3, [r2, #0]
 80049c0:	e026      	b.n	8004a10 <HAL_RCC_OscConfig+0x298>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049ca:	d115      	bne.n	80049f8 <HAL_RCC_OscConfig+0x280>
 80049cc:	4b06      	ldr	r3, [pc, #24]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a05      	ldr	r2, [pc, #20]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 80049d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	4b03      	ldr	r3, [pc, #12]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a02      	ldr	r2, [pc, #8]	@ (80049e8 <HAL_RCC_OscConfig+0x270>)
 80049de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	e014      	b.n	8004a10 <HAL_RCC_OscConfig+0x298>
 80049e6:	bf00      	nop
 80049e8:	40021000 	.word	0x40021000
 80049ec:	0800d7b0 	.word	0x0800d7b0
 80049f0:	20000000 	.word	0x20000000
 80049f4:	20000014 	.word	0x20000014
 80049f8:	4ba0      	ldr	r3, [pc, #640]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a9f      	ldr	r2, [pc, #636]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 80049fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	4b9d      	ldr	r3, [pc, #628]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a9c      	ldr	r2, [pc, #624]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d013      	beq.n	8004a40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a18:	f7fd fefe 	bl	8002818 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a20:	f7fd fefa 	bl	8002818 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b64      	cmp	r3, #100	@ 0x64
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e276      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a32:	4b92      	ldr	r3, [pc, #584]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f0      	beq.n	8004a20 <HAL_RCC_OscConfig+0x2a8>
 8004a3e:	e014      	b.n	8004a6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a40:	f7fd feea 	bl	8002818 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a48:	f7fd fee6 	bl	8002818 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b64      	cmp	r3, #100	@ 0x64
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e262      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a5a:	4b88      	ldr	r3, [pc, #544]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1f0      	bne.n	8004a48 <HAL_RCC_OscConfig+0x2d0>
 8004a66:	e000      	b.n	8004a6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d060      	beq.n	8004b38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_OscConfig+0x310>
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	2b0c      	cmp	r3, #12
 8004a80:	d119      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d116      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a88:	4b7c      	ldr	r3, [pc, #496]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x328>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e23f      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa0:	4b76      	ldr	r3, [pc, #472]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	061b      	lsls	r3, r3, #24
 8004aae:	4973      	ldr	r1, [pc, #460]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab4:	e040      	b.n	8004b38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d023      	beq.n	8004b06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004abe:	4b6f      	ldr	r3, [pc, #444]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a6e      	ldr	r2, [pc, #440]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aca:	f7fd fea5 	bl	8002818 <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad2:	f7fd fea1 	bl	8002818 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e21d      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae4:	4b65      	ldr	r3, [pc, #404]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0f0      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af0:	4b62      	ldr	r3, [pc, #392]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	061b      	lsls	r3, r3, #24
 8004afe:	495f      	ldr	r1, [pc, #380]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	604b      	str	r3, [r1, #4]
 8004b04:	e018      	b.n	8004b38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b06:	4b5d      	ldr	r3, [pc, #372]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a5c      	ldr	r2, [pc, #368]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004b0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b12:	f7fd fe81 	bl	8002818 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b1a:	f7fd fe7d 	bl	8002818 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e1f9      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b2c:	4b53      	ldr	r3, [pc, #332]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1f0      	bne.n	8004b1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0308 	and.w	r3, r3, #8
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d03c      	beq.n	8004bbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01c      	beq.n	8004b86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b4c:	4b4b      	ldr	r3, [pc, #300]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b52:	4a4a      	ldr	r2, [pc, #296]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004b54:	f043 0301 	orr.w	r3, r3, #1
 8004b58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5c:	f7fd fe5c 	bl	8002818 <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b64:	f7fd fe58 	bl	8002818 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e1d4      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b76:	4b41      	ldr	r3, [pc, #260]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0ef      	beq.n	8004b64 <HAL_RCC_OscConfig+0x3ec>
 8004b84:	e01b      	b.n	8004bbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b86:	4b3d      	ldr	r3, [pc, #244]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b8c:	4a3b      	ldr	r2, [pc, #236]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b96:	f7fd fe3f 	bl	8002818 <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b9e:	f7fd fe3b 	bl	8002818 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e1b7      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bb0:	4b32      	ldr	r3, [pc, #200]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1ef      	bne.n	8004b9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0304 	and.w	r3, r3, #4
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 80a6 	beq.w	8004d18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10d      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bdc:	4b27      	ldr	r3, [pc, #156]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be0:	4a26      	ldr	r2, [pc, #152]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004be6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004be8:	4b24      	ldr	r3, [pc, #144]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bf0:	60bb      	str	r3, [r7, #8]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bf8:	4b21      	ldr	r3, [pc, #132]	@ (8004c80 <HAL_RCC_OscConfig+0x508>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d118      	bne.n	8004c36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c04:	4b1e      	ldr	r3, [pc, #120]	@ (8004c80 <HAL_RCC_OscConfig+0x508>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a1d      	ldr	r2, [pc, #116]	@ (8004c80 <HAL_RCC_OscConfig+0x508>)
 8004c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c10:	f7fd fe02 	bl	8002818 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c18:	f7fd fdfe 	bl	8002818 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e17a      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c2a:	4b15      	ldr	r3, [pc, #84]	@ (8004c80 <HAL_RCC_OscConfig+0x508>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d108      	bne.n	8004c50 <HAL_RCC_OscConfig+0x4d8>
 8004c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c44:	4a0d      	ldr	r2, [pc, #52]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004c46:	f043 0301 	orr.w	r3, r3, #1
 8004c4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c4e:	e029      	b.n	8004ca4 <HAL_RCC_OscConfig+0x52c>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	2b05      	cmp	r3, #5
 8004c56:	d115      	bne.n	8004c84 <HAL_RCC_OscConfig+0x50c>
 8004c58:	4b08      	ldr	r3, [pc, #32]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c5e:	4a07      	ldr	r2, [pc, #28]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004c60:	f043 0304 	orr.w	r3, r3, #4
 8004c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c68:	4b04      	ldr	r3, [pc, #16]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c6e:	4a03      	ldr	r2, [pc, #12]	@ (8004c7c <HAL_RCC_OscConfig+0x504>)
 8004c70:	f043 0301 	orr.w	r3, r3, #1
 8004c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c78:	e014      	b.n	8004ca4 <HAL_RCC_OscConfig+0x52c>
 8004c7a:	bf00      	nop
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	40007000 	.word	0x40007000
 8004c84:	4b9c      	ldr	r3, [pc, #624]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8a:	4a9b      	ldr	r2, [pc, #620]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004c8c:	f023 0301 	bic.w	r3, r3, #1
 8004c90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c94:	4b98      	ldr	r3, [pc, #608]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c9a:	4a97      	ldr	r2, [pc, #604]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004c9c:	f023 0304 	bic.w	r3, r3, #4
 8004ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d016      	beq.n	8004cda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cac:	f7fd fdb4 	bl	8002818 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cb2:	e00a      	b.n	8004cca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb4:	f7fd fdb0 	bl	8002818 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e12a      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cca:	4b8b      	ldr	r3, [pc, #556]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0ed      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x53c>
 8004cd8:	e015      	b.n	8004d06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cda:	f7fd fd9d 	bl	8002818 <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ce0:	e00a      	b.n	8004cf8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce2:	f7fd fd99 	bl	8002818 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e113      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cf8:	4b7f      	ldr	r3, [pc, #508]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1ed      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d06:	7ffb      	ldrb	r3, [r7, #31]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d105      	bne.n	8004d18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d0c:	4b7a      	ldr	r3, [pc, #488]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d10:	4a79      	ldr	r2, [pc, #484]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004d12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d16:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80fe 	beq.w	8004f1e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	f040 80d0 	bne.w	8004ecc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d2c:	4b72      	ldr	r3, [pc, #456]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f003 0203 	and.w	r2, r3, #3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d130      	bne.n	8004da2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d127      	bne.n	8004da2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d11f      	bne.n	8004da2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d6c:	2a07      	cmp	r2, #7
 8004d6e:	bf14      	ite	ne
 8004d70:	2201      	movne	r2, #1
 8004d72:	2200      	moveq	r2, #0
 8004d74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d113      	bne.n	8004da2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d84:	085b      	lsrs	r3, r3, #1
 8004d86:	3b01      	subs	r3, #1
 8004d88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d109      	bne.n	8004da2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d98:	085b      	lsrs	r3, r3, #1
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d06e      	beq.n	8004e80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	2b0c      	cmp	r3, #12
 8004da6:	d069      	beq.n	8004e7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004da8:	4b53      	ldr	r3, [pc, #332]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d105      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004db4:	4b50      	ldr	r3, [pc, #320]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0ad      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004dc4:	4b4c      	ldr	r3, [pc, #304]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a4b      	ldr	r2, [pc, #300]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004dca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dd0:	f7fd fd22 	bl	8002818 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd8:	f7fd fd1e 	bl	8002818 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e09a      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dea:	4b43      	ldr	r3, [pc, #268]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1f0      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004df6:	4b40      	ldr	r3, [pc, #256]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	4b40      	ldr	r3, [pc, #256]	@ (8004efc <HAL_RCC_OscConfig+0x784>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e06:	3a01      	subs	r2, #1
 8004e08:	0112      	lsls	r2, r2, #4
 8004e0a:	4311      	orrs	r1, r2
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e10:	0212      	lsls	r2, r2, #8
 8004e12:	4311      	orrs	r1, r2
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e18:	0852      	lsrs	r2, r2, #1
 8004e1a:	3a01      	subs	r2, #1
 8004e1c:	0552      	lsls	r2, r2, #21
 8004e1e:	4311      	orrs	r1, r2
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004e24:	0852      	lsrs	r2, r2, #1
 8004e26:	3a01      	subs	r2, #1
 8004e28:	0652      	lsls	r2, r2, #25
 8004e2a:	4311      	orrs	r1, r2
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e30:	0912      	lsrs	r2, r2, #4
 8004e32:	0452      	lsls	r2, r2, #17
 8004e34:	430a      	orrs	r2, r1
 8004e36:	4930      	ldr	r1, [pc, #192]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a2d      	ldr	r2, [pc, #180]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004e42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e48:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004e4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e54:	f7fd fce0 	bl	8002818 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5c:	f7fd fcdc 	bl	8002818 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e058      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e6e:	4b22      	ldr	r3, [pc, #136]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e7a:	e050      	b.n	8004f1e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e04f      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e80:	4b1d      	ldr	r3, [pc, #116]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d148      	bne.n	8004f1e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a19      	ldr	r2, [pc, #100]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004e92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e98:	4b17      	ldr	r3, [pc, #92]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	4a16      	ldr	r2, [pc, #88]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004e9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ea2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ea4:	f7fd fcb8 	bl	8002818 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eac:	f7fd fcb4 	bl	8002818 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e030      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0x734>
 8004eca:	e028      	b.n	8004f1e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	2b0c      	cmp	r3, #12
 8004ed0:	d023      	beq.n	8004f1a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed2:	4b09      	ldr	r3, [pc, #36]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a08      	ldr	r2, [pc, #32]	@ (8004ef8 <HAL_RCC_OscConfig+0x780>)
 8004ed8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ede:	f7fd fc9b 	bl	8002818 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ee4:	e00c      	b.n	8004f00 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee6:	f7fd fc97 	bl	8002818 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d905      	bls.n	8004f00 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e013      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f00:	4b09      	ldr	r3, [pc, #36]	@ (8004f28 <HAL_RCC_OscConfig+0x7b0>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1ec      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004f0c:	4b06      	ldr	r3, [pc, #24]	@ (8004f28 <HAL_RCC_OscConfig+0x7b0>)
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	4905      	ldr	r1, [pc, #20]	@ (8004f28 <HAL_RCC_OscConfig+0x7b0>)
 8004f12:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <HAL_RCC_OscConfig+0x7b4>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	60cb      	str	r3, [r1, #12]
 8004f18:	e001      	b.n	8004f1e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3720      	adds	r7, #32
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	feeefffc 	.word	0xfeeefffc

08004f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e0e7      	b.n	8005114 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f44:	4b75      	ldr	r3, [pc, #468]	@ (800511c <HAL_RCC_ClockConfig+0x1ec>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d910      	bls.n	8004f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f52:	4b72      	ldr	r3, [pc, #456]	@ (800511c <HAL_RCC_ClockConfig+0x1ec>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f023 0207 	bic.w	r2, r3, #7
 8004f5a:	4970      	ldr	r1, [pc, #448]	@ (800511c <HAL_RCC_ClockConfig+0x1ec>)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f62:	4b6e      	ldr	r3, [pc, #440]	@ (800511c <HAL_RCC_ClockConfig+0x1ec>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d001      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0cf      	b.n	8005114 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d010      	beq.n	8004fa2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	4b66      	ldr	r3, [pc, #408]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d908      	bls.n	8004fa2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f90:	4b63      	ldr	r3, [pc, #396]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	4960      	ldr	r1, [pc, #384]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d04c      	beq.n	8005048 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d107      	bne.n	8004fc6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb6:	4b5a      	ldr	r3, [pc, #360]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d121      	bne.n	8005006 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e0a6      	b.n	8005114 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d107      	bne.n	8004fde <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fce:	4b54      	ldr	r3, [pc, #336]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d115      	bne.n	8005006 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e09a      	b.n	8005114 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d107      	bne.n	8004ff6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fe6:	4b4e      	ldr	r3, [pc, #312]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d109      	bne.n	8005006 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e08e      	b.n	8005114 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e086      	b.n	8005114 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005006:	4b46      	ldr	r3, [pc, #280]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f023 0203 	bic.w	r2, r3, #3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	4943      	ldr	r1, [pc, #268]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 8005014:	4313      	orrs	r3, r2
 8005016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005018:	f7fd fbfe 	bl	8002818 <HAL_GetTick>
 800501c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800501e:	e00a      	b.n	8005036 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005020:	f7fd fbfa 	bl	8002818 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800502e:	4293      	cmp	r3, r2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e06e      	b.n	8005114 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005036:	4b3a      	ldr	r3, [pc, #232]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 020c 	and.w	r2, r3, #12
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	429a      	cmp	r2, r3
 8005046:	d1eb      	bne.n	8005020 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d010      	beq.n	8005076 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	4b31      	ldr	r3, [pc, #196]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005060:	429a      	cmp	r2, r3
 8005062:	d208      	bcs.n	8005076 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005064:	4b2e      	ldr	r3, [pc, #184]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	492b      	ldr	r1, [pc, #172]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 8005072:	4313      	orrs	r3, r2
 8005074:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005076:	4b29      	ldr	r3, [pc, #164]	@ (800511c <HAL_RCC_ClockConfig+0x1ec>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d210      	bcs.n	80050a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005084:	4b25      	ldr	r3, [pc, #148]	@ (800511c <HAL_RCC_ClockConfig+0x1ec>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f023 0207 	bic.w	r2, r3, #7
 800508c:	4923      	ldr	r1, [pc, #140]	@ (800511c <HAL_RCC_ClockConfig+0x1ec>)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	4313      	orrs	r3, r2
 8005092:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005094:	4b21      	ldr	r3, [pc, #132]	@ (800511c <HAL_RCC_ClockConfig+0x1ec>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d001      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e036      	b.n	8005114 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d008      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	4918      	ldr	r1, [pc, #96]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d009      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050d0:	4b13      	ldr	r3, [pc, #76]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	4910      	ldr	r1, [pc, #64]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050e4:	f000 f824 	bl	8005130 <HAL_RCC_GetSysClockFreq>
 80050e8:	4602      	mov	r2, r0
 80050ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	091b      	lsrs	r3, r3, #4
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	490b      	ldr	r1, [pc, #44]	@ (8005124 <HAL_RCC_ClockConfig+0x1f4>)
 80050f6:	5ccb      	ldrb	r3, [r1, r3]
 80050f8:	f003 031f 	and.w	r3, r3, #31
 80050fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005100:	4a09      	ldr	r2, [pc, #36]	@ (8005128 <HAL_RCC_ClockConfig+0x1f8>)
 8005102:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005104:	4b09      	ldr	r3, [pc, #36]	@ (800512c <HAL_RCC_ClockConfig+0x1fc>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f7fc ff41 	bl	8001f90 <HAL_InitTick>
 800510e:	4603      	mov	r3, r0
 8005110:	72fb      	strb	r3, [r7, #11]

  return status;
 8005112:	7afb      	ldrb	r3, [r7, #11]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40022000 	.word	0x40022000
 8005120:	40021000 	.word	0x40021000
 8005124:	0800d7b0 	.word	0x0800d7b0
 8005128:	20000000 	.word	0x20000000
 800512c:	20000014 	.word	0x20000014

08005130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005130:	b480      	push	{r7}
 8005132:	b089      	sub	sp, #36	@ 0x24
 8005134:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	61fb      	str	r3, [r7, #28]
 800513a:	2300      	movs	r3, #0
 800513c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800513e:	4b3e      	ldr	r3, [pc, #248]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x108>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 030c 	and.w	r3, r3, #12
 8005146:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005148:	4b3b      	ldr	r3, [pc, #236]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x108>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0303 	and.w	r3, r3, #3
 8005150:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d005      	beq.n	8005164 <HAL_RCC_GetSysClockFreq+0x34>
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	2b0c      	cmp	r3, #12
 800515c:	d121      	bne.n	80051a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d11e      	bne.n	80051a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005164:	4b34      	ldr	r3, [pc, #208]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x108>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b00      	cmp	r3, #0
 800516e:	d107      	bne.n	8005180 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005170:	4b31      	ldr	r3, [pc, #196]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x108>)
 8005172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005176:	0a1b      	lsrs	r3, r3, #8
 8005178:	f003 030f 	and.w	r3, r3, #15
 800517c:	61fb      	str	r3, [r7, #28]
 800517e:	e005      	b.n	800518c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005180:	4b2d      	ldr	r3, [pc, #180]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x108>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	091b      	lsrs	r3, r3, #4
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800518c:	4a2b      	ldr	r2, [pc, #172]	@ (800523c <HAL_RCC_GetSysClockFreq+0x10c>)
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005194:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10d      	bne.n	80051b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051a0:	e00a      	b.n	80051b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d102      	bne.n	80051ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051a8:	4b25      	ldr	r3, [pc, #148]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x110>)
 80051aa:	61bb      	str	r3, [r7, #24]
 80051ac:	e004      	b.n	80051b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d101      	bne.n	80051b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051b4:	4b23      	ldr	r3, [pc, #140]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x114>)
 80051b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	2b0c      	cmp	r3, #12
 80051bc:	d134      	bne.n	8005228 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051be:	4b1e      	ldr	r3, [pc, #120]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x108>)
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d003      	beq.n	80051d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d003      	beq.n	80051dc <HAL_RCC_GetSysClockFreq+0xac>
 80051d4:	e005      	b.n	80051e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80051d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x110>)
 80051d8:	617b      	str	r3, [r7, #20]
      break;
 80051da:	e005      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80051dc:	4b19      	ldr	r3, [pc, #100]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x114>)
 80051de:	617b      	str	r3, [r7, #20]
      break;
 80051e0:	e002      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	617b      	str	r3, [r7, #20]
      break;
 80051e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051e8:	4b13      	ldr	r3, [pc, #76]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x108>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	091b      	lsrs	r3, r3, #4
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	3301      	adds	r3, #1
 80051f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051f6:	4b10      	ldr	r3, [pc, #64]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x108>)
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	0a1b      	lsrs	r3, r3, #8
 80051fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	fb03 f202 	mul.w	r2, r3, r2
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	fbb2 f3f3 	udiv	r3, r2, r3
 800520c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800520e:	4b0a      	ldr	r3, [pc, #40]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x108>)
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	0e5b      	lsrs	r3, r3, #25
 8005214:	f003 0303 	and.w	r3, r3, #3
 8005218:	3301      	adds	r3, #1
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	fbb2 f3f3 	udiv	r3, r2, r3
 8005226:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005228:	69bb      	ldr	r3, [r7, #24]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3724      	adds	r7, #36	@ 0x24
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40021000 	.word	0x40021000
 800523c:	0800d7c8 	.word	0x0800d7c8
 8005240:	00f42400 	.word	0x00f42400
 8005244:	007a1200 	.word	0x007a1200

08005248 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800524c:	4b03      	ldr	r3, [pc, #12]	@ (800525c <HAL_RCC_GetHCLKFreq+0x14>)
 800524e:	681b      	ldr	r3, [r3, #0]
}
 8005250:	4618      	mov	r0, r3
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	20000000 	.word	0x20000000

08005260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005264:	f7ff fff0 	bl	8005248 <HAL_RCC_GetHCLKFreq>
 8005268:	4602      	mov	r2, r0
 800526a:	4b06      	ldr	r3, [pc, #24]	@ (8005284 <HAL_RCC_GetPCLK1Freq+0x24>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	0a1b      	lsrs	r3, r3, #8
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	4904      	ldr	r1, [pc, #16]	@ (8005288 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005276:	5ccb      	ldrb	r3, [r1, r3]
 8005278:	f003 031f 	and.w	r3, r3, #31
 800527c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005280:	4618      	mov	r0, r3
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40021000 	.word	0x40021000
 8005288:	0800d7c0 	.word	0x0800d7c0

0800528c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005290:	f7ff ffda 	bl	8005248 <HAL_RCC_GetHCLKFreq>
 8005294:	4602      	mov	r2, r0
 8005296:	4b06      	ldr	r3, [pc, #24]	@ (80052b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	0adb      	lsrs	r3, r3, #11
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	4904      	ldr	r1, [pc, #16]	@ (80052b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052a2:	5ccb      	ldrb	r3, [r1, r3]
 80052a4:	f003 031f 	and.w	r3, r3, #31
 80052a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40021000 	.word	0x40021000
 80052b4:	0800d7c0 	.word	0x0800d7c0

080052b8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	220f      	movs	r2, #15
 80052c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80052c8:	4b12      	ldr	r3, [pc, #72]	@ (8005314 <HAL_RCC_GetClockConfig+0x5c>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 0203 	and.w	r2, r3, #3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80052d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005314 <HAL_RCC_GetClockConfig+0x5c>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80052e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005314 <HAL_RCC_GetClockConfig+0x5c>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80052ec:	4b09      	ldr	r3, [pc, #36]	@ (8005314 <HAL_RCC_GetClockConfig+0x5c>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	08db      	lsrs	r3, r3, #3
 80052f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80052fa:	4b07      	ldr	r3, [pc, #28]	@ (8005318 <HAL_RCC_GetClockConfig+0x60>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0207 	and.w	r2, r3, #7
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	601a      	str	r2, [r3, #0]
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40021000 	.word	0x40021000
 8005318:	40022000 	.word	0x40022000

0800531c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005324:	2300      	movs	r3, #0
 8005326:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005328:	4b2a      	ldr	r3, [pc, #168]	@ (80053d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800532a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800532c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005334:	f7ff f8f0 	bl	8004518 <HAL_PWREx_GetVoltageRange>
 8005338:	6178      	str	r0, [r7, #20]
 800533a:	e014      	b.n	8005366 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800533c:	4b25      	ldr	r3, [pc, #148]	@ (80053d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800533e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005340:	4a24      	ldr	r2, [pc, #144]	@ (80053d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005342:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005346:	6593      	str	r3, [r2, #88]	@ 0x58
 8005348:	4b22      	ldr	r3, [pc, #136]	@ (80053d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800534a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800534c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005354:	f7ff f8e0 	bl	8004518 <HAL_PWREx_GetVoltageRange>
 8005358:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800535a:	4b1e      	ldr	r3, [pc, #120]	@ (80053d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800535c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800535e:	4a1d      	ldr	r2, [pc, #116]	@ (80053d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005360:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005364:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800536c:	d10b      	bne.n	8005386 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b80      	cmp	r3, #128	@ 0x80
 8005372:	d919      	bls.n	80053a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2ba0      	cmp	r3, #160	@ 0xa0
 8005378:	d902      	bls.n	8005380 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800537a:	2302      	movs	r3, #2
 800537c:	613b      	str	r3, [r7, #16]
 800537e:	e013      	b.n	80053a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005380:	2301      	movs	r3, #1
 8005382:	613b      	str	r3, [r7, #16]
 8005384:	e010      	b.n	80053a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b80      	cmp	r3, #128	@ 0x80
 800538a:	d902      	bls.n	8005392 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800538c:	2303      	movs	r3, #3
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	e00a      	b.n	80053a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b80      	cmp	r3, #128	@ 0x80
 8005396:	d102      	bne.n	800539e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005398:	2302      	movs	r3, #2
 800539a:	613b      	str	r3, [r7, #16]
 800539c:	e004      	b.n	80053a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b70      	cmp	r3, #112	@ 0x70
 80053a2:	d101      	bne.n	80053a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053a4:	2301      	movs	r3, #1
 80053a6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053a8:	4b0b      	ldr	r3, [pc, #44]	@ (80053d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f023 0207 	bic.w	r2, r3, #7
 80053b0:	4909      	ldr	r1, [pc, #36]	@ (80053d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80053b8:	4b07      	ldr	r3, [pc, #28]	@ (80053d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d001      	beq.n	80053ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40021000 	.word	0x40021000
 80053d8:	40022000 	.word	0x40022000

080053dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053e4:	2300      	movs	r3, #0
 80053e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053e8:	2300      	movs	r3, #0
 80053ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d041      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053fc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005400:	d02a      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005402:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005406:	d824      	bhi.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005408:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800540c:	d008      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800540e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005412:	d81e      	bhi.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005418:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800541c:	d010      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800541e:	e018      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005420:	4b86      	ldr	r3, [pc, #536]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	4a85      	ldr	r2, [pc, #532]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800542a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800542c:	e015      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3304      	adds	r3, #4
 8005432:	2100      	movs	r1, #0
 8005434:	4618      	mov	r0, r3
 8005436:	f000 facb 	bl	80059d0 <RCCEx_PLLSAI1_Config>
 800543a:	4603      	mov	r3, r0
 800543c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800543e:	e00c      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3320      	adds	r3, #32
 8005444:	2100      	movs	r1, #0
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fbb6 	bl	8005bb8 <RCCEx_PLLSAI2_Config>
 800544c:	4603      	mov	r3, r0
 800544e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005450:	e003      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	74fb      	strb	r3, [r7, #19]
      break;
 8005456:	e000      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800545a:	7cfb      	ldrb	r3, [r7, #19]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10b      	bne.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005460:	4b76      	ldr	r3, [pc, #472]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005466:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800546e:	4973      	ldr	r1, [pc, #460]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005476:	e001      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005478:	7cfb      	ldrb	r3, [r7, #19]
 800547a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d041      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800548c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005490:	d02a      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005492:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005496:	d824      	bhi.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005498:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800549c:	d008      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800549e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054a2:	d81e      	bhi.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80054a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054ac:	d010      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80054ae:	e018      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054b0:	4b62      	ldr	r3, [pc, #392]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	4a61      	ldr	r2, [pc, #388]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054bc:	e015      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3304      	adds	r3, #4
 80054c2:	2100      	movs	r1, #0
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 fa83 	bl	80059d0 <RCCEx_PLLSAI1_Config>
 80054ca:	4603      	mov	r3, r0
 80054cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054ce:	e00c      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3320      	adds	r3, #32
 80054d4:	2100      	movs	r1, #0
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 fb6e 	bl	8005bb8 <RCCEx_PLLSAI2_Config>
 80054dc:	4603      	mov	r3, r0
 80054de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054e0:	e003      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	74fb      	strb	r3, [r7, #19]
      break;
 80054e6:	e000      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80054e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ea:	7cfb      	ldrb	r3, [r7, #19]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10b      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054f0:	4b52      	ldr	r3, [pc, #328]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054fe:	494f      	ldr	r1, [pc, #316]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005500:	4313      	orrs	r3, r2
 8005502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005506:	e001      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005508:	7cfb      	ldrb	r3, [r7, #19]
 800550a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 80a0 	beq.w	800565a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800551a:	2300      	movs	r3, #0
 800551c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800551e:	4b47      	ldr	r3, [pc, #284]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800552a:	2301      	movs	r3, #1
 800552c:	e000      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800552e:	2300      	movs	r3, #0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00d      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005534:	4b41      	ldr	r3, [pc, #260]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005538:	4a40      	ldr	r2, [pc, #256]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800553a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800553e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005540:	4b3e      	ldr	r3, [pc, #248]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005548:	60bb      	str	r3, [r7, #8]
 800554a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800554c:	2301      	movs	r3, #1
 800554e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005550:	4b3b      	ldr	r3, [pc, #236]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a3a      	ldr	r2, [pc, #232]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800555a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800555c:	f7fd f95c 	bl	8002818 <HAL_GetTick>
 8005560:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005562:	e009      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005564:	f7fd f958 	bl	8002818 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d902      	bls.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	74fb      	strb	r3, [r7, #19]
        break;
 8005576:	e005      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005578:	4b31      	ldr	r3, [pc, #196]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0ef      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005584:	7cfb      	ldrb	r3, [r7, #19]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d15c      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800558a:	4b2c      	ldr	r3, [pc, #176]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800558c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005590:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005594:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d01f      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d019      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055a8:	4b24      	ldr	r3, [pc, #144]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055b4:	4b21      	ldr	r3, [pc, #132]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ba:	4a20      	ldr	r2, [pc, #128]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055c4:	4b1d      	ldr	r3, [pc, #116]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ca:	4a1c      	ldr	r2, [pc, #112]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055d4:	4a19      	ldr	r2, [pc, #100]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d016      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e6:	f7fd f917 	bl	8002818 <HAL_GetTick>
 80055ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ec:	e00b      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ee:	f7fd f913 	bl	8002818 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d902      	bls.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	74fb      	strb	r3, [r7, #19]
            break;
 8005604:	e006      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005606:	4b0d      	ldr	r3, [pc, #52]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0ec      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005614:	7cfb      	ldrb	r3, [r7, #19]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10c      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800561a:	4b08      	ldr	r3, [pc, #32]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800561c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005620:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800562a:	4904      	ldr	r1, [pc, #16]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005632:	e009      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005634:	7cfb      	ldrb	r3, [r7, #19]
 8005636:	74bb      	strb	r3, [r7, #18]
 8005638:	e006      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800563a:	bf00      	nop
 800563c:	40021000 	.word	0x40021000
 8005640:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005644:	7cfb      	ldrb	r3, [r7, #19]
 8005646:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005648:	7c7b      	ldrb	r3, [r7, #17]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d105      	bne.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800564e:	4b9e      	ldr	r3, [pc, #632]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005652:	4a9d      	ldr	r2, [pc, #628]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005654:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005658:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00a      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005666:	4b98      	ldr	r3, [pc, #608]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800566c:	f023 0203 	bic.w	r2, r3, #3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005674:	4994      	ldr	r1, [pc, #592]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005676:	4313      	orrs	r3, r2
 8005678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00a      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005688:	4b8f      	ldr	r3, [pc, #572]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800568a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800568e:	f023 020c 	bic.w	r2, r3, #12
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005696:	498c      	ldr	r1, [pc, #560]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005698:	4313      	orrs	r3, r2
 800569a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00a      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056aa:	4b87      	ldr	r3, [pc, #540]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b8:	4983      	ldr	r1, [pc, #524]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0308 	and.w	r3, r3, #8
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00a      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056cc:	4b7e      	ldr	r3, [pc, #504]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056da:	497b      	ldr	r1, [pc, #492]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0310 	and.w	r3, r3, #16
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056ee:	4b76      	ldr	r3, [pc, #472]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056fc:	4972      	ldr	r1, [pc, #456]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0320 	and.w	r3, r3, #32
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005710:	4b6d      	ldr	r3, [pc, #436]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005716:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800571e:	496a      	ldr	r1, [pc, #424]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005720:	4313      	orrs	r3, r2
 8005722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00a      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005732:	4b65      	ldr	r3, [pc, #404]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005738:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005740:	4961      	ldr	r1, [pc, #388]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005742:	4313      	orrs	r3, r2
 8005744:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00a      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005754:	4b5c      	ldr	r3, [pc, #368]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800575a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005762:	4959      	ldr	r1, [pc, #356]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005764:	4313      	orrs	r3, r2
 8005766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005776:	4b54      	ldr	r3, [pc, #336]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800577c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005784:	4950      	ldr	r1, [pc, #320]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005786:	4313      	orrs	r3, r2
 8005788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00a      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005798:	4b4b      	ldr	r3, [pc, #300]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800579a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a6:	4948      	ldr	r1, [pc, #288]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057ba:	4b43      	ldr	r3, [pc, #268]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c8:	493f      	ldr	r1, [pc, #252]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d028      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057dc:	4b3a      	ldr	r3, [pc, #232]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057ea:	4937      	ldr	r1, [pc, #220]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057fa:	d106      	bne.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057fc:	4b32      	ldr	r3, [pc, #200]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	4a31      	ldr	r2, [pc, #196]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005806:	60d3      	str	r3, [r2, #12]
 8005808:	e011      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800580e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005812:	d10c      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3304      	adds	r3, #4
 8005818:	2101      	movs	r1, #1
 800581a:	4618      	mov	r0, r3
 800581c:	f000 f8d8 	bl	80059d0 <RCCEx_PLLSAI1_Config>
 8005820:	4603      	mov	r3, r0
 8005822:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005824:	7cfb      	ldrb	r3, [r7, #19]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800582a:	7cfb      	ldrb	r3, [r7, #19]
 800582c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d028      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800583a:	4b23      	ldr	r3, [pc, #140]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800583c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005840:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005848:	491f      	ldr	r1, [pc, #124]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800584a:	4313      	orrs	r3, r2
 800584c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005854:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005858:	d106      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800585a:	4b1b      	ldr	r3, [pc, #108]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	4a1a      	ldr	r2, [pc, #104]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005860:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005864:	60d3      	str	r3, [r2, #12]
 8005866:	e011      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800586c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005870:	d10c      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	3304      	adds	r3, #4
 8005876:	2101      	movs	r1, #1
 8005878:	4618      	mov	r0, r3
 800587a:	f000 f8a9 	bl	80059d0 <RCCEx_PLLSAI1_Config>
 800587e:	4603      	mov	r3, r0
 8005880:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005882:	7cfb      	ldrb	r3, [r7, #19]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005888:	7cfb      	ldrb	r3, [r7, #19]
 800588a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d02b      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005898:	4b0b      	ldr	r3, [pc, #44]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800589a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800589e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058a6:	4908      	ldr	r1, [pc, #32]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058b6:	d109      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058b8:	4b03      	ldr	r3, [pc, #12]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	4a02      	ldr	r2, [pc, #8]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058c2:	60d3      	str	r3, [r2, #12]
 80058c4:	e014      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80058c6:	bf00      	nop
 80058c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058d4:	d10c      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3304      	adds	r3, #4
 80058da:	2101      	movs	r1, #1
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 f877 	bl	80059d0 <RCCEx_PLLSAI1_Config>
 80058e2:	4603      	mov	r3, r0
 80058e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058e6:	7cfb      	ldrb	r3, [r7, #19]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80058ec:	7cfb      	ldrb	r3, [r7, #19]
 80058ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d02f      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058fc:	4b2b      	ldr	r3, [pc, #172]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005902:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800590a:	4928      	ldr	r1, [pc, #160]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005916:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800591a:	d10d      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3304      	adds	r3, #4
 8005920:	2102      	movs	r1, #2
 8005922:	4618      	mov	r0, r3
 8005924:	f000 f854 	bl	80059d0 <RCCEx_PLLSAI1_Config>
 8005928:	4603      	mov	r3, r0
 800592a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800592c:	7cfb      	ldrb	r3, [r7, #19]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d014      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005932:	7cfb      	ldrb	r3, [r7, #19]
 8005934:	74bb      	strb	r3, [r7, #18]
 8005936:	e011      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800593c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005940:	d10c      	bne.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3320      	adds	r3, #32
 8005946:	2102      	movs	r1, #2
 8005948:	4618      	mov	r0, r3
 800594a:	f000 f935 	bl	8005bb8 <RCCEx_PLLSAI2_Config>
 800594e:	4603      	mov	r3, r0
 8005950:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005952:	7cfb      	ldrb	r3, [r7, #19]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005958:	7cfb      	ldrb	r3, [r7, #19]
 800595a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00a      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005968:	4b10      	ldr	r3, [pc, #64]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800596a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800596e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005976:	490d      	ldr	r1, [pc, #52]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005978:	4313      	orrs	r3, r2
 800597a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00b      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800598a:	4b08      	ldr	r3, [pc, #32]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800598c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005990:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800599a:	4904      	ldr	r1, [pc, #16]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800599c:	4313      	orrs	r3, r2
 800599e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80059a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3718      	adds	r7, #24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	40021000 	.word	0x40021000

080059b0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80059b4:	4b05      	ldr	r3, [pc, #20]	@ (80059cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a04      	ldr	r2, [pc, #16]	@ (80059cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80059ba:	f043 0304 	orr.w	r3, r3, #4
 80059be:	6013      	str	r3, [r2, #0]
}
 80059c0:	bf00      	nop
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40021000 	.word	0x40021000

080059d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059da:	2300      	movs	r3, #0
 80059dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059de:	4b75      	ldr	r3, [pc, #468]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d018      	beq.n	8005a1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80059ea:	4b72      	ldr	r3, [pc, #456]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f003 0203 	and.w	r2, r3, #3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d10d      	bne.n	8005a16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
       ||
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d009      	beq.n	8005a16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005a02:	4b6c      	ldr	r3, [pc, #432]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	091b      	lsrs	r3, r3, #4
 8005a08:	f003 0307 	and.w	r3, r3, #7
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
       ||
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d047      	beq.n	8005aa6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	73fb      	strb	r3, [r7, #15]
 8005a1a:	e044      	b.n	8005aa6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b03      	cmp	r3, #3
 8005a22:	d018      	beq.n	8005a56 <RCCEx_PLLSAI1_Config+0x86>
 8005a24:	2b03      	cmp	r3, #3
 8005a26:	d825      	bhi.n	8005a74 <RCCEx_PLLSAI1_Config+0xa4>
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d002      	beq.n	8005a32 <RCCEx_PLLSAI1_Config+0x62>
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d009      	beq.n	8005a44 <RCCEx_PLLSAI1_Config+0x74>
 8005a30:	e020      	b.n	8005a74 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a32:	4b60      	ldr	r3, [pc, #384]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d11d      	bne.n	8005a7a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a42:	e01a      	b.n	8005a7a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a44:	4b5b      	ldr	r3, [pc, #364]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d116      	bne.n	8005a7e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a54:	e013      	b.n	8005a7e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a56:	4b57      	ldr	r3, [pc, #348]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10f      	bne.n	8005a82 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a62:	4b54      	ldr	r3, [pc, #336]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d109      	bne.n	8005a82 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a72:	e006      	b.n	8005a82 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	73fb      	strb	r3, [r7, #15]
      break;
 8005a78:	e004      	b.n	8005a84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a7a:	bf00      	nop
 8005a7c:	e002      	b.n	8005a84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a7e:	bf00      	nop
 8005a80:	e000      	b.n	8005a84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a82:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10d      	bne.n	8005aa6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6819      	ldr	r1, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	011b      	lsls	r3, r3, #4
 8005a9e:	430b      	orrs	r3, r1
 8005aa0:	4944      	ldr	r1, [pc, #272]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d17d      	bne.n	8005ba8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005aac:	4b41      	ldr	r3, [pc, #260]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a40      	ldr	r2, [pc, #256]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ab2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ab6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab8:	f7fc feae 	bl	8002818 <HAL_GetTick>
 8005abc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005abe:	e009      	b.n	8005ad4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ac0:	f7fc feaa 	bl	8002818 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d902      	bls.n	8005ad4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ad2:	e005      	b.n	8005ae0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ad4:	4b37      	ldr	r3, [pc, #220]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1ef      	bne.n	8005ac0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d160      	bne.n	8005ba8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d111      	bne.n	8005b10 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005aec:	4b31      	ldr	r3, [pc, #196]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005af4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6892      	ldr	r2, [r2, #8]
 8005afc:	0211      	lsls	r1, r2, #8
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	68d2      	ldr	r2, [r2, #12]
 8005b02:	0912      	lsrs	r2, r2, #4
 8005b04:	0452      	lsls	r2, r2, #17
 8005b06:	430a      	orrs	r2, r1
 8005b08:	492a      	ldr	r1, [pc, #168]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	610b      	str	r3, [r1, #16]
 8005b0e:	e027      	b.n	8005b60 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d112      	bne.n	8005b3c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b16:	4b27      	ldr	r3, [pc, #156]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005b1e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	6892      	ldr	r2, [r2, #8]
 8005b26:	0211      	lsls	r1, r2, #8
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	6912      	ldr	r2, [r2, #16]
 8005b2c:	0852      	lsrs	r2, r2, #1
 8005b2e:	3a01      	subs	r2, #1
 8005b30:	0552      	lsls	r2, r2, #21
 8005b32:	430a      	orrs	r2, r1
 8005b34:	491f      	ldr	r1, [pc, #124]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	610b      	str	r3, [r1, #16]
 8005b3a:	e011      	b.n	8005b60 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005b44:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6892      	ldr	r2, [r2, #8]
 8005b4c:	0211      	lsls	r1, r2, #8
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	6952      	ldr	r2, [r2, #20]
 8005b52:	0852      	lsrs	r2, r2, #1
 8005b54:	3a01      	subs	r2, #1
 8005b56:	0652      	lsls	r2, r2, #25
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	4916      	ldr	r1, [pc, #88]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b60:	4b14      	ldr	r3, [pc, #80]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a13      	ldr	r2, [pc, #76]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b6c:	f7fc fe54 	bl	8002818 <HAL_GetTick>
 8005b70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b72:	e009      	b.n	8005b88 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b74:	f7fc fe50 	bl	8002818 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d902      	bls.n	8005b88 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	73fb      	strb	r3, [r7, #15]
          break;
 8005b86:	e005      	b.n	8005b94 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b88:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0ef      	beq.n	8005b74 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b9a:	4b06      	ldr	r3, [pc, #24]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b9c:	691a      	ldr	r2, [r3, #16]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	4904      	ldr	r1, [pc, #16]	@ (8005bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	40021000 	.word	0x40021000

08005bb8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005bc6:	4b6a      	ldr	r3, [pc, #424]	@ (8005d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d018      	beq.n	8005c04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005bd2:	4b67      	ldr	r3, [pc, #412]	@ (8005d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f003 0203 	and.w	r2, r3, #3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d10d      	bne.n	8005bfe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
       ||
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d009      	beq.n	8005bfe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005bea:	4b61      	ldr	r3, [pc, #388]	@ (8005d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	091b      	lsrs	r3, r3, #4
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
       ||
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d047      	beq.n	8005c8e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	73fb      	strb	r3, [r7, #15]
 8005c02:	e044      	b.n	8005c8e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d018      	beq.n	8005c3e <RCCEx_PLLSAI2_Config+0x86>
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d825      	bhi.n	8005c5c <RCCEx_PLLSAI2_Config+0xa4>
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d002      	beq.n	8005c1a <RCCEx_PLLSAI2_Config+0x62>
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d009      	beq.n	8005c2c <RCCEx_PLLSAI2_Config+0x74>
 8005c18:	e020      	b.n	8005c5c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c1a:	4b55      	ldr	r3, [pc, #340]	@ (8005d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d11d      	bne.n	8005c62 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c2a:	e01a      	b.n	8005c62 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c2c:	4b50      	ldr	r3, [pc, #320]	@ (8005d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d116      	bne.n	8005c66 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c3c:	e013      	b.n	8005c66 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c3e:	4b4c      	ldr	r3, [pc, #304]	@ (8005d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10f      	bne.n	8005c6a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c4a:	4b49      	ldr	r3, [pc, #292]	@ (8005d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d109      	bne.n	8005c6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c5a:	e006      	b.n	8005c6a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c60:	e004      	b.n	8005c6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c62:	bf00      	nop
 8005c64:	e002      	b.n	8005c6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c66:	bf00      	nop
 8005c68:	e000      	b.n	8005c6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10d      	bne.n	8005c8e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c72:	4b3f      	ldr	r3, [pc, #252]	@ (8005d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6819      	ldr	r1, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	430b      	orrs	r3, r1
 8005c88:	4939      	ldr	r1, [pc, #228]	@ (8005d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d167      	bne.n	8005d64 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c94:	4b36      	ldr	r3, [pc, #216]	@ (8005d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a35      	ldr	r2, [pc, #212]	@ (8005d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca0:	f7fc fdba 	bl	8002818 <HAL_GetTick>
 8005ca4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ca6:	e009      	b.n	8005cbc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ca8:	f7fc fdb6 	bl	8002818 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d902      	bls.n	8005cbc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	73fb      	strb	r3, [r7, #15]
        break;
 8005cba:	e005      	b.n	8005cc8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cbc:	4b2c      	ldr	r3, [pc, #176]	@ (8005d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1ef      	bne.n	8005ca8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d14a      	bne.n	8005d64 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d111      	bne.n	8005cf8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cd4:	4b26      	ldr	r3, [pc, #152]	@ (8005d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005cdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6892      	ldr	r2, [r2, #8]
 8005ce4:	0211      	lsls	r1, r2, #8
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	68d2      	ldr	r2, [r2, #12]
 8005cea:	0912      	lsrs	r2, r2, #4
 8005cec:	0452      	lsls	r2, r2, #17
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	491f      	ldr	r1, [pc, #124]	@ (8005d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	614b      	str	r3, [r1, #20]
 8005cf6:	e011      	b.n	8005d1c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8005d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005d00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6892      	ldr	r2, [r2, #8]
 8005d08:	0211      	lsls	r1, r2, #8
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6912      	ldr	r2, [r2, #16]
 8005d0e:	0852      	lsrs	r2, r2, #1
 8005d10:	3a01      	subs	r2, #1
 8005d12:	0652      	lsls	r2, r2, #25
 8005d14:	430a      	orrs	r2, r1
 8005d16:	4916      	ldr	r1, [pc, #88]	@ (8005d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d1c:	4b14      	ldr	r3, [pc, #80]	@ (8005d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a13      	ldr	r2, [pc, #76]	@ (8005d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d28:	f7fc fd76 	bl	8002818 <HAL_GetTick>
 8005d2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d2e:	e009      	b.n	8005d44 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d30:	f7fc fd72 	bl	8002818 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d902      	bls.n	8005d44 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	73fb      	strb	r3, [r7, #15]
          break;
 8005d42:	e005      	b.n	8005d50 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d44:	4b0a      	ldr	r3, [pc, #40]	@ (8005d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0ef      	beq.n	8005d30 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d106      	bne.n	8005d64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005d56:	4b06      	ldr	r3, [pc, #24]	@ (8005d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d58:	695a      	ldr	r2, [r3, #20]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	4904      	ldr	r1, [pc, #16]	@ (8005d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	40021000 	.word	0x40021000

08005d74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e095      	b.n	8005eb2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d108      	bne.n	8005da0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d96:	d009      	beq.n	8005dac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	61da      	str	r2, [r3, #28]
 8005d9e:	e005      	b.n	8005dac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d106      	bne.n	8005dcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7fb ff42 	bl	8001c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005de2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005dec:	d902      	bls.n	8005df4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005dee:	2300      	movs	r3, #0
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	e002      	b.n	8005dfa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005df4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005df8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005e02:	d007      	beq.n	8005e14 <HAL_SPI_Init+0xa0>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e0c:	d002      	beq.n	8005e14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e24:	431a      	orrs	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e56:	ea42 0103 	orr.w	r1, r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	0c1b      	lsrs	r3, r3, #16
 8005e70:	f003 0204 	and.w	r2, r3, #4
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e78:	f003 0310 	and.w	r3, r3, #16
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e82:	f003 0308 	and.w	r3, r3, #8
 8005e86:	431a      	orrs	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005e90:	ea42 0103 	orr.w	r1, r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b082      	sub	sp, #8
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e049      	b.n	8005f60 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d106      	bne.n	8005ee6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f841 	bl	8005f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2202      	movs	r2, #2
 8005eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4610      	mov	r0, r2
 8005efa:	f000 f9df 	bl	80062bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d001      	beq.n	8005f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e04f      	b.n	8006034 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0201 	orr.w	r2, r2, #1
 8005faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a23      	ldr	r2, [pc, #140]	@ (8006040 <HAL_TIM_Base_Start_IT+0xc4>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d01d      	beq.n	8005ff2 <HAL_TIM_Base_Start_IT+0x76>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fbe:	d018      	beq.n	8005ff2 <HAL_TIM_Base_Start_IT+0x76>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8006044 <HAL_TIM_Base_Start_IT+0xc8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d013      	beq.n	8005ff2 <HAL_TIM_Base_Start_IT+0x76>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a1e      	ldr	r2, [pc, #120]	@ (8006048 <HAL_TIM_Base_Start_IT+0xcc>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d00e      	beq.n	8005ff2 <HAL_TIM_Base_Start_IT+0x76>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800604c <HAL_TIM_Base_Start_IT+0xd0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d009      	beq.n	8005ff2 <HAL_TIM_Base_Start_IT+0x76>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8006050 <HAL_TIM_Base_Start_IT+0xd4>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d004      	beq.n	8005ff2 <HAL_TIM_Base_Start_IT+0x76>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a19      	ldr	r2, [pc, #100]	@ (8006054 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d115      	bne.n	800601e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	4b17      	ldr	r3, [pc, #92]	@ (8006058 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2b06      	cmp	r3, #6
 8006002:	d015      	beq.n	8006030 <HAL_TIM_Base_Start_IT+0xb4>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800600a:	d011      	beq.n	8006030 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601c:	e008      	b.n	8006030 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f042 0201 	orr.w	r2, r2, #1
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	e000      	b.n	8006032 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006030:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	40012c00 	.word	0x40012c00
 8006044:	40000400 	.word	0x40000400
 8006048:	40000800 	.word	0x40000800
 800604c:	40000c00 	.word	0x40000c00
 8006050:	40013400 	.word	0x40013400
 8006054:	40014000 	.word	0x40014000
 8006058:	00010007 	.word	0x00010007

0800605c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d020      	beq.n	80060c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01b      	beq.n	80060c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f06f 0202 	mvn.w	r2, #2
 8006090:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f8e9 	bl	800627e <HAL_TIM_IC_CaptureCallback>
 80060ac:	e005      	b.n	80060ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f8db 	bl	800626a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f8ec 	bl	8006292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d020      	beq.n	800610c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d01b      	beq.n	800610c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f06f 0204 	mvn.w	r2, #4
 80060dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2202      	movs	r2, #2
 80060e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f8c3 	bl	800627e <HAL_TIM_IC_CaptureCallback>
 80060f8:	e005      	b.n	8006106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f8b5 	bl	800626a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f8c6 	bl	8006292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	f003 0308 	and.w	r3, r3, #8
 8006112:	2b00      	cmp	r3, #0
 8006114:	d020      	beq.n	8006158 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	2b00      	cmp	r3, #0
 800611e:	d01b      	beq.n	8006158 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f06f 0208 	mvn.w	r2, #8
 8006128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2204      	movs	r2, #4
 800612e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f89d 	bl	800627e <HAL_TIM_IC_CaptureCallback>
 8006144:	e005      	b.n	8006152 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f88f 	bl	800626a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f8a0 	bl	8006292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f003 0310 	and.w	r3, r3, #16
 800615e:	2b00      	cmp	r3, #0
 8006160:	d020      	beq.n	80061a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f003 0310 	and.w	r3, r3, #16
 8006168:	2b00      	cmp	r3, #0
 800616a:	d01b      	beq.n	80061a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f06f 0210 	mvn.w	r2, #16
 8006174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2208      	movs	r2, #8
 800617a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f877 	bl	800627e <HAL_TIM_IC_CaptureCallback>
 8006190:	e005      	b.n	800619e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f869 	bl	800626a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f87a 	bl	8006292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00c      	beq.n	80061c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d007      	beq.n	80061c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f06f 0201 	mvn.w	r2, #1
 80061c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7fb fbda 	bl	800197c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d104      	bne.n	80061dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00c      	beq.n	80061f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d007      	beq.n	80061f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80061ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f913 	bl	800641c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00c      	beq.n	800621a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006206:	2b00      	cmp	r3, #0
 8006208:	d007      	beq.n	800621a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f90b 	bl	8006430 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00c      	beq.n	800623e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800622a:	2b00      	cmp	r3, #0
 800622c:	d007      	beq.n	800623e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f834 	bl	80062a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	f003 0320 	and.w	r3, r3, #32
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00c      	beq.n	8006262 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f003 0320 	and.w	r3, r3, #32
 800624e:	2b00      	cmp	r3, #0
 8006250:	d007      	beq.n	8006262 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f06f 0220 	mvn.w	r2, #32
 800625a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f8d3 	bl	8006408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006262:	bf00      	nop
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800626a:	b480      	push	{r7}
 800626c:	b083      	sub	sp, #12
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006286:	bf00      	nop
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006292:	b480      	push	{r7}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062ae:	bf00      	nop
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
	...

080062bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a46      	ldr	r2, [pc, #280]	@ (80063e8 <TIM_Base_SetConfig+0x12c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d013      	beq.n	80062fc <TIM_Base_SetConfig+0x40>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062da:	d00f      	beq.n	80062fc <TIM_Base_SetConfig+0x40>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a43      	ldr	r2, [pc, #268]	@ (80063ec <TIM_Base_SetConfig+0x130>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d00b      	beq.n	80062fc <TIM_Base_SetConfig+0x40>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a42      	ldr	r2, [pc, #264]	@ (80063f0 <TIM_Base_SetConfig+0x134>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d007      	beq.n	80062fc <TIM_Base_SetConfig+0x40>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a41      	ldr	r2, [pc, #260]	@ (80063f4 <TIM_Base_SetConfig+0x138>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d003      	beq.n	80062fc <TIM_Base_SetConfig+0x40>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a40      	ldr	r2, [pc, #256]	@ (80063f8 <TIM_Base_SetConfig+0x13c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d108      	bne.n	800630e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	4313      	orrs	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a35      	ldr	r2, [pc, #212]	@ (80063e8 <TIM_Base_SetConfig+0x12c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d01f      	beq.n	8006356 <TIM_Base_SetConfig+0x9a>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800631c:	d01b      	beq.n	8006356 <TIM_Base_SetConfig+0x9a>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a32      	ldr	r2, [pc, #200]	@ (80063ec <TIM_Base_SetConfig+0x130>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d017      	beq.n	8006356 <TIM_Base_SetConfig+0x9a>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a31      	ldr	r2, [pc, #196]	@ (80063f0 <TIM_Base_SetConfig+0x134>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d013      	beq.n	8006356 <TIM_Base_SetConfig+0x9a>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a30      	ldr	r2, [pc, #192]	@ (80063f4 <TIM_Base_SetConfig+0x138>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d00f      	beq.n	8006356 <TIM_Base_SetConfig+0x9a>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a2f      	ldr	r2, [pc, #188]	@ (80063f8 <TIM_Base_SetConfig+0x13c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d00b      	beq.n	8006356 <TIM_Base_SetConfig+0x9a>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a2e      	ldr	r2, [pc, #184]	@ (80063fc <TIM_Base_SetConfig+0x140>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d007      	beq.n	8006356 <TIM_Base_SetConfig+0x9a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a2d      	ldr	r2, [pc, #180]	@ (8006400 <TIM_Base_SetConfig+0x144>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d003      	beq.n	8006356 <TIM_Base_SetConfig+0x9a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a2c      	ldr	r2, [pc, #176]	@ (8006404 <TIM_Base_SetConfig+0x148>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d108      	bne.n	8006368 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800635c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	4313      	orrs	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a16      	ldr	r2, [pc, #88]	@ (80063e8 <TIM_Base_SetConfig+0x12c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00f      	beq.n	80063b4 <TIM_Base_SetConfig+0xf8>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a18      	ldr	r2, [pc, #96]	@ (80063f8 <TIM_Base_SetConfig+0x13c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d00b      	beq.n	80063b4 <TIM_Base_SetConfig+0xf8>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a17      	ldr	r2, [pc, #92]	@ (80063fc <TIM_Base_SetConfig+0x140>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d007      	beq.n	80063b4 <TIM_Base_SetConfig+0xf8>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a16      	ldr	r2, [pc, #88]	@ (8006400 <TIM_Base_SetConfig+0x144>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d003      	beq.n	80063b4 <TIM_Base_SetConfig+0xf8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a15      	ldr	r2, [pc, #84]	@ (8006404 <TIM_Base_SetConfig+0x148>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d103      	bne.n	80063bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	691a      	ldr	r2, [r3, #16]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d105      	bne.n	80063da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f023 0201 	bic.w	r2, r3, #1
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	611a      	str	r2, [r3, #16]
  }
}
 80063da:	bf00      	nop
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	40012c00 	.word	0x40012c00
 80063ec:	40000400 	.word	0x40000400
 80063f0:	40000800 	.word	0x40000800
 80063f4:	40000c00 	.word	0x40000c00
 80063f8:	40013400 	.word	0x40013400
 80063fc:	40014000 	.word	0x40014000
 8006400:	40014400 	.word	0x40014400
 8006404:	40014800 	.word	0x40014800

08006408 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e040      	b.n	80064d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800645a:	2b00      	cmp	r3, #0
 800645c:	d106      	bne.n	800646c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7fb fc36 	bl	8001cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2224      	movs	r2, #36	@ 0x24
 8006470:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0201 	bic.w	r2, r2, #1
 8006480:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006486:	2b00      	cmp	r3, #0
 8006488:	d002      	beq.n	8006490 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 ff58 	bl	8007340 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fc9d 	bl	8006dd0 <UART_SetConfig>
 8006496:	4603      	mov	r3, r0
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e01b      	b.n	80064d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689a      	ldr	r2, [r3, #8]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0201 	orr.w	r2, r2, #1
 80064ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 ffd7 	bl	8007484 <UART_CheckIdleState>
 80064d6:	4603      	mov	r3, r0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08a      	sub	sp, #40	@ 0x28
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	603b      	str	r3, [r7, #0]
 80064ec:	4613      	mov	r3, r2
 80064ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064f4:	2b20      	cmp	r3, #32
 80064f6:	d177      	bne.n	80065e8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <HAL_UART_Transmit+0x24>
 80064fe:	88fb      	ldrh	r3, [r7, #6]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e070      	b.n	80065ea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2221      	movs	r2, #33	@ 0x21
 8006514:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006516:	f7fc f97f 	bl	8002818 <HAL_GetTick>
 800651a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	88fa      	ldrh	r2, [r7, #6]
 8006520:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	88fa      	ldrh	r2, [r7, #6]
 8006528:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006534:	d108      	bne.n	8006548 <HAL_UART_Transmit+0x68>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d104      	bne.n	8006548 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800653e:	2300      	movs	r3, #0
 8006540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	61bb      	str	r3, [r7, #24]
 8006546:	e003      	b.n	8006550 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800654c:	2300      	movs	r3, #0
 800654e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006550:	e02f      	b.n	80065b2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2200      	movs	r2, #0
 800655a:	2180      	movs	r1, #128	@ 0x80
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f001 f839 	bl	80075d4 <UART_WaitOnFlagUntilTimeout>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d004      	beq.n	8006572 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2220      	movs	r2, #32
 800656c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e03b      	b.n	80065ea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10b      	bne.n	8006590 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	881a      	ldrh	r2, [r3, #0]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006584:	b292      	uxth	r2, r2
 8006586:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	3302      	adds	r3, #2
 800658c:	61bb      	str	r3, [r7, #24]
 800658e:	e007      	b.n	80065a0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	781a      	ldrb	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	3301      	adds	r3, #1
 800659e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	3b01      	subs	r3, #1
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1c9      	bne.n	8006552 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2200      	movs	r2, #0
 80065c6:	2140      	movs	r1, #64	@ 0x40
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f001 f803 	bl	80075d4 <UART_WaitOnFlagUntilTimeout>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d004      	beq.n	80065de <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2220      	movs	r2, #32
 80065d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e005      	b.n	80065ea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2220      	movs	r2, #32
 80065e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	e000      	b.n	80065ea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80065e8:	2302      	movs	r3, #2
  }
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3720      	adds	r7, #32
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b08a      	sub	sp, #40	@ 0x28
 80065f6:	af02      	add	r7, sp, #8
 80065f8:	60f8      	str	r0, [r7, #12]
 80065fa:	60b9      	str	r1, [r7, #8]
 80065fc:	603b      	str	r3, [r7, #0]
 80065fe:	4613      	mov	r3, r2
 8006600:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006608:	2b20      	cmp	r3, #32
 800660a:	f040 80b6 	bne.w	800677a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <HAL_UART_Receive+0x28>
 8006614:	88fb      	ldrh	r3, [r7, #6]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e0ae      	b.n	800677c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2222      	movs	r2, #34	@ 0x22
 800662a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006634:	f7fc f8f0 	bl	8002818 <HAL_GetTick>
 8006638:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	88fa      	ldrh	r2, [r7, #6]
 800663e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	88fa      	ldrh	r2, [r7, #6]
 8006646:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006652:	d10e      	bne.n	8006672 <HAL_UART_Receive+0x80>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d105      	bne.n	8006668 <HAL_UART_Receive+0x76>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006662:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006666:	e02d      	b.n	80066c4 <HAL_UART_Receive+0xd2>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	22ff      	movs	r2, #255	@ 0xff
 800666c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006670:	e028      	b.n	80066c4 <HAL_UART_Receive+0xd2>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10d      	bne.n	8006696 <HAL_UART_Receive+0xa4>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d104      	bne.n	800668c <HAL_UART_Receive+0x9a>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	22ff      	movs	r2, #255	@ 0xff
 8006686:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800668a:	e01b      	b.n	80066c4 <HAL_UART_Receive+0xd2>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	227f      	movs	r2, #127	@ 0x7f
 8006690:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006694:	e016      	b.n	80066c4 <HAL_UART_Receive+0xd2>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800669e:	d10d      	bne.n	80066bc <HAL_UART_Receive+0xca>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d104      	bne.n	80066b2 <HAL_UART_Receive+0xc0>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	227f      	movs	r2, #127	@ 0x7f
 80066ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80066b0:	e008      	b.n	80066c4 <HAL_UART_Receive+0xd2>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	223f      	movs	r2, #63	@ 0x3f
 80066b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80066ba:	e003      	b.n	80066c4 <HAL_UART_Receive+0xd2>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066ca:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066d4:	d108      	bne.n	80066e8 <HAL_UART_Receive+0xf6>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d104      	bne.n	80066e8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80066de:	2300      	movs	r3, #0
 80066e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	61bb      	str	r3, [r7, #24]
 80066e6:	e003      	b.n	80066f0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80066f0:	e037      	b.n	8006762 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2200      	movs	r2, #0
 80066fa:	2120      	movs	r1, #32
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 ff69 	bl	80075d4 <UART_WaitOnFlagUntilTimeout>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2220      	movs	r2, #32
 800670c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e033      	b.n	800677c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10c      	bne.n	8006734 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006720:	b29a      	uxth	r2, r3
 8006722:	8a7b      	ldrh	r3, [r7, #18]
 8006724:	4013      	ands	r3, r2
 8006726:	b29a      	uxth	r2, r3
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	3302      	adds	r3, #2
 8006730:	61bb      	str	r3, [r7, #24]
 8006732:	e00d      	b.n	8006750 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800673a:	b29b      	uxth	r3, r3
 800673c:	b2da      	uxtb	r2, r3
 800673e:	8a7b      	ldrh	r3, [r7, #18]
 8006740:	b2db      	uxtb	r3, r3
 8006742:	4013      	ands	r3, r2
 8006744:	b2da      	uxtb	r2, r3
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	3301      	adds	r3, #1
 800674e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006756:	b29b      	uxth	r3, r3
 8006758:	3b01      	subs	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006768:	b29b      	uxth	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1c1      	bne.n	80066f2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	e000      	b.n	800677c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800677a:	2302      	movs	r3, #2
  }
}
 800677c:	4618      	mov	r0, r3
 800677e:	3720      	adds	r7, #32
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b0ba      	sub	sp, #232	@ 0xe8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80067ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80067b2:	4013      	ands	r3, r2
 80067b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80067b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d115      	bne.n	80067ec <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80067c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067c4:	f003 0320 	and.w	r3, r3, #32
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00f      	beq.n	80067ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067d0:	f003 0320 	and.w	r3, r3, #32
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d009      	beq.n	80067ec <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 82ca 	beq.w	8006d76 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	4798      	blx	r3
      }
      return;
 80067ea:	e2c4      	b.n	8006d76 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80067ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 8117 	beq.w	8006a24 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80067f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d106      	bne.n	8006810 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006802:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006806:	4b85      	ldr	r3, [pc, #532]	@ (8006a1c <HAL_UART_IRQHandler+0x298>)
 8006808:	4013      	ands	r3, r2
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 810a 	beq.w	8006a24 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b00      	cmp	r3, #0
 800681a:	d011      	beq.n	8006840 <HAL_UART_IRQHandler+0xbc>
 800681c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00b      	beq.n	8006840 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2201      	movs	r2, #1
 800682e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006836:	f043 0201 	orr.w	r2, r3, #1
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d011      	beq.n	8006870 <HAL_UART_IRQHandler+0xec>
 800684c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00b      	beq.n	8006870 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2202      	movs	r2, #2
 800685e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006866:	f043 0204 	orr.w	r2, r3, #4
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	d011      	beq.n	80068a0 <HAL_UART_IRQHandler+0x11c>
 800687c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00b      	beq.n	80068a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2204      	movs	r2, #4
 800688e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006896:	f043 0202 	orr.w	r2, r3, #2
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d017      	beq.n	80068dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80068ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068b0:	f003 0320 	and.w	r3, r3, #32
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d105      	bne.n	80068c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80068b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00b      	beq.n	80068dc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2208      	movs	r2, #8
 80068ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068d2:	f043 0208 	orr.w	r2, r3, #8
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d012      	beq.n	800690e <HAL_UART_IRQHandler+0x18a>
 80068e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00c      	beq.n	800690e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006904:	f043 0220 	orr.w	r2, r3, #32
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 8230 	beq.w	8006d7a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800691a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800691e:	f003 0320 	and.w	r3, r3, #32
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00d      	beq.n	8006942 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800692a:	f003 0320 	and.w	r3, r3, #32
 800692e:	2b00      	cmp	r3, #0
 8006930:	d007      	beq.n	8006942 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006948:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006956:	2b40      	cmp	r3, #64	@ 0x40
 8006958:	d005      	beq.n	8006966 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800695a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800695e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006962:	2b00      	cmp	r3, #0
 8006964:	d04f      	beq.n	8006a06 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fea1 	bl	80076ae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006976:	2b40      	cmp	r3, #64	@ 0x40
 8006978:	d141      	bne.n	80069fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3308      	adds	r3, #8
 8006980:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006984:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006988:	e853 3f00 	ldrex	r3, [r3]
 800698c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006990:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006994:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006998:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3308      	adds	r3, #8
 80069a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80069a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80069aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80069b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80069b6:	e841 2300 	strex	r3, r2, [r1]
 80069ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80069be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1d9      	bne.n	800697a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d013      	beq.n	80069f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069d2:	4a13      	ldr	r2, [pc, #76]	@ (8006a20 <HAL_UART_IRQHandler+0x29c>)
 80069d4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fc fa30 	bl	8002e40 <HAL_DMA_Abort_IT>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d017      	beq.n	8006a16 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80069f0:	4610      	mov	r0, r2
 80069f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f4:	e00f      	b.n	8006a16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f9d4 	bl	8006da4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069fc:	e00b      	b.n	8006a16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f9d0 	bl	8006da4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a04:	e007      	b.n	8006a16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f9cc 	bl	8006da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006a14:	e1b1      	b.n	8006d7a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a16:	bf00      	nop
    return;
 8006a18:	e1af      	b.n	8006d7a <HAL_UART_IRQHandler+0x5f6>
 8006a1a:	bf00      	nop
 8006a1c:	04000120 	.word	0x04000120
 8006a20:	08007777 	.word	0x08007777

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	f040 816a 	bne.w	8006d02 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a32:	f003 0310 	and.w	r3, r3, #16
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 8163 	beq.w	8006d02 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a40:	f003 0310 	and.w	r3, r3, #16
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 815c 	beq.w	8006d02 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2210      	movs	r2, #16
 8006a50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a5c:	2b40      	cmp	r3, #64	@ 0x40
 8006a5e:	f040 80d4 	bne.w	8006c0a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a6e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 80ad 	beq.w	8006bd2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a82:	429a      	cmp	r2, r3
 8006a84:	f080 80a5 	bcs.w	8006bd2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a8e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0320 	and.w	r3, r3, #32
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f040 8086 	bne.w	8006bb0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ab0:	e853 3f00 	ldrex	r3, [r3]
 8006ab4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006abc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ac0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ad2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ada:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1da      	bne.n	8006aa4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3308      	adds	r3, #8
 8006af4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006afe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b00:	f023 0301 	bic.w	r3, r3, #1
 8006b04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b1e:	e841 2300 	strex	r3, r2, [r1]
 8006b22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1e1      	bne.n	8006aee <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3308      	adds	r3, #8
 8006b30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b34:	e853 3f00 	ldrex	r3, [r3]
 8006b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3308      	adds	r3, #8
 8006b4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e3      	bne.n	8006b2a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b78:	e853 3f00 	ldrex	r3, [r3]
 8006b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b80:	f023 0310 	bic.w	r3, r3, #16
 8006b84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b94:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b9a:	e841 2300 	strex	r3, r2, [r1]
 8006b9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1e4      	bne.n	8006b70 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fc f90a 	bl	8002dc4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f8f4 	bl	8006db8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006bd0:	e0d5      	b.n	8006d7e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006bd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	f040 80ce 	bne.w	8006d7e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0320 	and.w	r3, r3, #32
 8006bee:	2b20      	cmp	r3, #32
 8006bf0:	f040 80c5 	bne.w	8006d7e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f8d8 	bl	8006db8 <HAL_UARTEx_RxEventCallback>
      return;
 8006c08:	e0b9      	b.n	8006d7e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 80ab 	beq.w	8006d82 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006c2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 80a6 	beq.w	8006d82 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c3e:	e853 3f00 	ldrex	r3, [r3]
 8006c42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	461a      	mov	r2, r3
 8006c54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c58:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c5a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c60:	e841 2300 	strex	r3, r2, [r1]
 8006c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e4      	bne.n	8006c36 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3308      	adds	r3, #8
 8006c72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c76:	e853 3f00 	ldrex	r3, [r3]
 8006c7a:	623b      	str	r3, [r7, #32]
   return(result);
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	f023 0301 	bic.w	r3, r3, #1
 8006c82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3308      	adds	r3, #8
 8006c8c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c90:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c98:	e841 2300 	strex	r3, r2, [r1]
 8006c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1e3      	bne.n	8006c6c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	e853 3f00 	ldrex	r3, [r3]
 8006cc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f023 0310 	bic.w	r3, r3, #16
 8006ccc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006cda:	61fb      	str	r3, [r7, #28]
 8006cdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	69b9      	ldr	r1, [r7, #24]
 8006ce0:	69fa      	ldr	r2, [r7, #28]
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	617b      	str	r3, [r7, #20]
   return(result);
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e4      	bne.n	8006cb8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f85c 	bl	8006db8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d00:	e03f      	b.n	8006d82 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00e      	beq.n	8006d2c <HAL_UART_IRQHandler+0x5a8>
 8006d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d008      	beq.n	8006d2c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006d22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fd66 	bl	80077f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d2a:	e02d      	b.n	8006d88 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00e      	beq.n	8006d56 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d008      	beq.n	8006d56 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d01c      	beq.n	8006d86 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	4798      	blx	r3
    }
    return;
 8006d54:	e017      	b.n	8006d86 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d012      	beq.n	8006d88 <HAL_UART_IRQHandler+0x604>
 8006d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00c      	beq.n	8006d88 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fd17 	bl	80077a2 <UART_EndTransmit_IT>
    return;
 8006d74:	e008      	b.n	8006d88 <HAL_UART_IRQHandler+0x604>
      return;
 8006d76:	bf00      	nop
 8006d78:	e006      	b.n	8006d88 <HAL_UART_IRQHandler+0x604>
    return;
 8006d7a:	bf00      	nop
 8006d7c:	e004      	b.n	8006d88 <HAL_UART_IRQHandler+0x604>
      return;
 8006d7e:	bf00      	nop
 8006d80:	e002      	b.n	8006d88 <HAL_UART_IRQHandler+0x604>
      return;
 8006d82:	bf00      	nop
 8006d84:	e000      	b.n	8006d88 <HAL_UART_IRQHandler+0x604>
    return;
 8006d86:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006d88:	37e8      	adds	r7, #232	@ 0xe8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop

08006d90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dd4:	b08a      	sub	sp, #40	@ 0x28
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	431a      	orrs	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	431a      	orrs	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	69db      	ldr	r3, [r3, #28]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	4ba4      	ldr	r3, [pc, #656]	@ (8007090 <UART_SetConfig+0x2c0>)
 8006e00:	4013      	ands	r3, r2
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	6812      	ldr	r2, [r2, #0]
 8006e06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a99      	ldr	r2, [pc, #612]	@ (8007094 <UART_SetConfig+0x2c4>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d004      	beq.n	8006e3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a90      	ldr	r2, [pc, #576]	@ (8007098 <UART_SetConfig+0x2c8>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d126      	bne.n	8006ea8 <UART_SetConfig+0xd8>
 8006e5a:	4b90      	ldr	r3, [pc, #576]	@ (800709c <UART_SetConfig+0x2cc>)
 8006e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e60:	f003 0303 	and.w	r3, r3, #3
 8006e64:	2b03      	cmp	r3, #3
 8006e66:	d81b      	bhi.n	8006ea0 <UART_SetConfig+0xd0>
 8006e68:	a201      	add	r2, pc, #4	@ (adr r2, 8006e70 <UART_SetConfig+0xa0>)
 8006e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6e:	bf00      	nop
 8006e70:	08006e81 	.word	0x08006e81
 8006e74:	08006e91 	.word	0x08006e91
 8006e78:	08006e89 	.word	0x08006e89
 8006e7c:	08006e99 	.word	0x08006e99
 8006e80:	2301      	movs	r3, #1
 8006e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e86:	e116      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8006e88:	2302      	movs	r3, #2
 8006e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e8e:	e112      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8006e90:	2304      	movs	r3, #4
 8006e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e96:	e10e      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8006e98:	2308      	movs	r3, #8
 8006e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e9e:	e10a      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8006ea0:	2310      	movs	r3, #16
 8006ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ea6:	e106      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a7c      	ldr	r2, [pc, #496]	@ (80070a0 <UART_SetConfig+0x2d0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d138      	bne.n	8006f24 <UART_SetConfig+0x154>
 8006eb2:	4b7a      	ldr	r3, [pc, #488]	@ (800709c <UART_SetConfig+0x2cc>)
 8006eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb8:	f003 030c 	and.w	r3, r3, #12
 8006ebc:	2b0c      	cmp	r3, #12
 8006ebe:	d82d      	bhi.n	8006f1c <UART_SetConfig+0x14c>
 8006ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ec8 <UART_SetConfig+0xf8>)
 8006ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec6:	bf00      	nop
 8006ec8:	08006efd 	.word	0x08006efd
 8006ecc:	08006f1d 	.word	0x08006f1d
 8006ed0:	08006f1d 	.word	0x08006f1d
 8006ed4:	08006f1d 	.word	0x08006f1d
 8006ed8:	08006f0d 	.word	0x08006f0d
 8006edc:	08006f1d 	.word	0x08006f1d
 8006ee0:	08006f1d 	.word	0x08006f1d
 8006ee4:	08006f1d 	.word	0x08006f1d
 8006ee8:	08006f05 	.word	0x08006f05
 8006eec:	08006f1d 	.word	0x08006f1d
 8006ef0:	08006f1d 	.word	0x08006f1d
 8006ef4:	08006f1d 	.word	0x08006f1d
 8006ef8:	08006f15 	.word	0x08006f15
 8006efc:	2300      	movs	r3, #0
 8006efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f02:	e0d8      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8006f04:	2302      	movs	r3, #2
 8006f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f0a:	e0d4      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8006f0c:	2304      	movs	r3, #4
 8006f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f12:	e0d0      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8006f14:	2308      	movs	r3, #8
 8006f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f1a:	e0cc      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f22:	e0c8      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a5e      	ldr	r2, [pc, #376]	@ (80070a4 <UART_SetConfig+0x2d4>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d125      	bne.n	8006f7a <UART_SetConfig+0x1aa>
 8006f2e:	4b5b      	ldr	r3, [pc, #364]	@ (800709c <UART_SetConfig+0x2cc>)
 8006f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f34:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f38:	2b30      	cmp	r3, #48	@ 0x30
 8006f3a:	d016      	beq.n	8006f6a <UART_SetConfig+0x19a>
 8006f3c:	2b30      	cmp	r3, #48	@ 0x30
 8006f3e:	d818      	bhi.n	8006f72 <UART_SetConfig+0x1a2>
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d00a      	beq.n	8006f5a <UART_SetConfig+0x18a>
 8006f44:	2b20      	cmp	r3, #32
 8006f46:	d814      	bhi.n	8006f72 <UART_SetConfig+0x1a2>
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <UART_SetConfig+0x182>
 8006f4c:	2b10      	cmp	r3, #16
 8006f4e:	d008      	beq.n	8006f62 <UART_SetConfig+0x192>
 8006f50:	e00f      	b.n	8006f72 <UART_SetConfig+0x1a2>
 8006f52:	2300      	movs	r3, #0
 8006f54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f58:	e0ad      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f60:	e0a9      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8006f62:	2304      	movs	r3, #4
 8006f64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f68:	e0a5      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8006f6a:	2308      	movs	r3, #8
 8006f6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f70:	e0a1      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8006f72:	2310      	movs	r3, #16
 8006f74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f78:	e09d      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a4a      	ldr	r2, [pc, #296]	@ (80070a8 <UART_SetConfig+0x2d8>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d125      	bne.n	8006fd0 <UART_SetConfig+0x200>
 8006f84:	4b45      	ldr	r3, [pc, #276]	@ (800709c <UART_SetConfig+0x2cc>)
 8006f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f8a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f90:	d016      	beq.n	8006fc0 <UART_SetConfig+0x1f0>
 8006f92:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f94:	d818      	bhi.n	8006fc8 <UART_SetConfig+0x1f8>
 8006f96:	2b80      	cmp	r3, #128	@ 0x80
 8006f98:	d00a      	beq.n	8006fb0 <UART_SetConfig+0x1e0>
 8006f9a:	2b80      	cmp	r3, #128	@ 0x80
 8006f9c:	d814      	bhi.n	8006fc8 <UART_SetConfig+0x1f8>
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <UART_SetConfig+0x1d8>
 8006fa2:	2b40      	cmp	r3, #64	@ 0x40
 8006fa4:	d008      	beq.n	8006fb8 <UART_SetConfig+0x1e8>
 8006fa6:	e00f      	b.n	8006fc8 <UART_SetConfig+0x1f8>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fae:	e082      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fb6:	e07e      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8006fb8:	2304      	movs	r3, #4
 8006fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fbe:	e07a      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8006fc0:	2308      	movs	r3, #8
 8006fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fc6:	e076      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8006fc8:	2310      	movs	r3, #16
 8006fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fce:	e072      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a35      	ldr	r2, [pc, #212]	@ (80070ac <UART_SetConfig+0x2dc>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d12a      	bne.n	8007030 <UART_SetConfig+0x260>
 8006fda:	4b30      	ldr	r3, [pc, #192]	@ (800709c <UART_SetConfig+0x2cc>)
 8006fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fe0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fe4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fe8:	d01a      	beq.n	8007020 <UART_SetConfig+0x250>
 8006fea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fee:	d81b      	bhi.n	8007028 <UART_SetConfig+0x258>
 8006ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ff4:	d00c      	beq.n	8007010 <UART_SetConfig+0x240>
 8006ff6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ffa:	d815      	bhi.n	8007028 <UART_SetConfig+0x258>
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d003      	beq.n	8007008 <UART_SetConfig+0x238>
 8007000:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007004:	d008      	beq.n	8007018 <UART_SetConfig+0x248>
 8007006:	e00f      	b.n	8007028 <UART_SetConfig+0x258>
 8007008:	2300      	movs	r3, #0
 800700a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800700e:	e052      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8007010:	2302      	movs	r3, #2
 8007012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007016:	e04e      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8007018:	2304      	movs	r3, #4
 800701a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800701e:	e04a      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8007020:	2308      	movs	r3, #8
 8007022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007026:	e046      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8007028:	2310      	movs	r3, #16
 800702a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800702e:	e042      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a17      	ldr	r2, [pc, #92]	@ (8007094 <UART_SetConfig+0x2c4>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d13a      	bne.n	80070b0 <UART_SetConfig+0x2e0>
 800703a:	4b18      	ldr	r3, [pc, #96]	@ (800709c <UART_SetConfig+0x2cc>)
 800703c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007040:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007044:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007048:	d01a      	beq.n	8007080 <UART_SetConfig+0x2b0>
 800704a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800704e:	d81b      	bhi.n	8007088 <UART_SetConfig+0x2b8>
 8007050:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007054:	d00c      	beq.n	8007070 <UART_SetConfig+0x2a0>
 8007056:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800705a:	d815      	bhi.n	8007088 <UART_SetConfig+0x2b8>
 800705c:	2b00      	cmp	r3, #0
 800705e:	d003      	beq.n	8007068 <UART_SetConfig+0x298>
 8007060:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007064:	d008      	beq.n	8007078 <UART_SetConfig+0x2a8>
 8007066:	e00f      	b.n	8007088 <UART_SetConfig+0x2b8>
 8007068:	2300      	movs	r3, #0
 800706a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800706e:	e022      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8007070:	2302      	movs	r3, #2
 8007072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007076:	e01e      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8007078:	2304      	movs	r3, #4
 800707a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800707e:	e01a      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8007080:	2308      	movs	r3, #8
 8007082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007086:	e016      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8007088:	2310      	movs	r3, #16
 800708a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800708e:	e012      	b.n	80070b6 <UART_SetConfig+0x2e6>
 8007090:	efff69f3 	.word	0xefff69f3
 8007094:	40008000 	.word	0x40008000
 8007098:	40013800 	.word	0x40013800
 800709c:	40021000 	.word	0x40021000
 80070a0:	40004400 	.word	0x40004400
 80070a4:	40004800 	.word	0x40004800
 80070a8:	40004c00 	.word	0x40004c00
 80070ac:	40005000 	.word	0x40005000
 80070b0:	2310      	movs	r3, #16
 80070b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a9f      	ldr	r2, [pc, #636]	@ (8007338 <UART_SetConfig+0x568>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d17a      	bne.n	80071b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070c4:	2b08      	cmp	r3, #8
 80070c6:	d824      	bhi.n	8007112 <UART_SetConfig+0x342>
 80070c8:	a201      	add	r2, pc, #4	@ (adr r2, 80070d0 <UART_SetConfig+0x300>)
 80070ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ce:	bf00      	nop
 80070d0:	080070f5 	.word	0x080070f5
 80070d4:	08007113 	.word	0x08007113
 80070d8:	080070fd 	.word	0x080070fd
 80070dc:	08007113 	.word	0x08007113
 80070e0:	08007103 	.word	0x08007103
 80070e4:	08007113 	.word	0x08007113
 80070e8:	08007113 	.word	0x08007113
 80070ec:	08007113 	.word	0x08007113
 80070f0:	0800710b 	.word	0x0800710b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070f4:	f7fe f8b4 	bl	8005260 <HAL_RCC_GetPCLK1Freq>
 80070f8:	61f8      	str	r0, [r7, #28]
        break;
 80070fa:	e010      	b.n	800711e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070fc:	4b8f      	ldr	r3, [pc, #572]	@ (800733c <UART_SetConfig+0x56c>)
 80070fe:	61fb      	str	r3, [r7, #28]
        break;
 8007100:	e00d      	b.n	800711e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007102:	f7fe f815 	bl	8005130 <HAL_RCC_GetSysClockFreq>
 8007106:	61f8      	str	r0, [r7, #28]
        break;
 8007108:	e009      	b.n	800711e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800710a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800710e:	61fb      	str	r3, [r7, #28]
        break;
 8007110:	e005      	b.n	800711e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800711c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 80fb 	beq.w	800731c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	4613      	mov	r3, r2
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	4413      	add	r3, r2
 8007130:	69fa      	ldr	r2, [r7, #28]
 8007132:	429a      	cmp	r2, r3
 8007134:	d305      	bcc.n	8007142 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800713c:	69fa      	ldr	r2, [r7, #28]
 800713e:	429a      	cmp	r2, r3
 8007140:	d903      	bls.n	800714a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007148:	e0e8      	b.n	800731c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	2200      	movs	r2, #0
 800714e:	461c      	mov	r4, r3
 8007150:	4615      	mov	r5, r2
 8007152:	f04f 0200 	mov.w	r2, #0
 8007156:	f04f 0300 	mov.w	r3, #0
 800715a:	022b      	lsls	r3, r5, #8
 800715c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007160:	0222      	lsls	r2, r4, #8
 8007162:	68f9      	ldr	r1, [r7, #12]
 8007164:	6849      	ldr	r1, [r1, #4]
 8007166:	0849      	lsrs	r1, r1, #1
 8007168:	2000      	movs	r0, #0
 800716a:	4688      	mov	r8, r1
 800716c:	4681      	mov	r9, r0
 800716e:	eb12 0a08 	adds.w	sl, r2, r8
 8007172:	eb43 0b09 	adc.w	fp, r3, r9
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	603b      	str	r3, [r7, #0]
 800717e:	607a      	str	r2, [r7, #4]
 8007180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007184:	4650      	mov	r0, sl
 8007186:	4659      	mov	r1, fp
 8007188:	f7f9 fd0e 	bl	8000ba8 <__aeabi_uldivmod>
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	4613      	mov	r3, r2
 8007192:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800719a:	d308      	bcc.n	80071ae <UART_SetConfig+0x3de>
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071a2:	d204      	bcs.n	80071ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	69ba      	ldr	r2, [r7, #24]
 80071aa:	60da      	str	r2, [r3, #12]
 80071ac:	e0b6      	b.n	800731c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80071b4:	e0b2      	b.n	800731c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071be:	d15e      	bne.n	800727e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80071c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80071c4:	2b08      	cmp	r3, #8
 80071c6:	d828      	bhi.n	800721a <UART_SetConfig+0x44a>
 80071c8:	a201      	add	r2, pc, #4	@ (adr r2, 80071d0 <UART_SetConfig+0x400>)
 80071ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ce:	bf00      	nop
 80071d0:	080071f5 	.word	0x080071f5
 80071d4:	080071fd 	.word	0x080071fd
 80071d8:	08007205 	.word	0x08007205
 80071dc:	0800721b 	.word	0x0800721b
 80071e0:	0800720b 	.word	0x0800720b
 80071e4:	0800721b 	.word	0x0800721b
 80071e8:	0800721b 	.word	0x0800721b
 80071ec:	0800721b 	.word	0x0800721b
 80071f0:	08007213 	.word	0x08007213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071f4:	f7fe f834 	bl	8005260 <HAL_RCC_GetPCLK1Freq>
 80071f8:	61f8      	str	r0, [r7, #28]
        break;
 80071fa:	e014      	b.n	8007226 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071fc:	f7fe f846 	bl	800528c <HAL_RCC_GetPCLK2Freq>
 8007200:	61f8      	str	r0, [r7, #28]
        break;
 8007202:	e010      	b.n	8007226 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007204:	4b4d      	ldr	r3, [pc, #308]	@ (800733c <UART_SetConfig+0x56c>)
 8007206:	61fb      	str	r3, [r7, #28]
        break;
 8007208:	e00d      	b.n	8007226 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800720a:	f7fd ff91 	bl	8005130 <HAL_RCC_GetSysClockFreq>
 800720e:	61f8      	str	r0, [r7, #28]
        break;
 8007210:	e009      	b.n	8007226 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007216:	61fb      	str	r3, [r7, #28]
        break;
 8007218:	e005      	b.n	8007226 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800721a:	2300      	movs	r3, #0
 800721c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007224:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d077      	beq.n	800731c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	005a      	lsls	r2, r3, #1
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	085b      	lsrs	r3, r3, #1
 8007236:	441a      	add	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007240:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	2b0f      	cmp	r3, #15
 8007246:	d916      	bls.n	8007276 <UART_SetConfig+0x4a6>
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800724e:	d212      	bcs.n	8007276 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	b29b      	uxth	r3, r3
 8007254:	f023 030f 	bic.w	r3, r3, #15
 8007258:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	085b      	lsrs	r3, r3, #1
 800725e:	b29b      	uxth	r3, r3
 8007260:	f003 0307 	and.w	r3, r3, #7
 8007264:	b29a      	uxth	r2, r3
 8007266:	8afb      	ldrh	r3, [r7, #22]
 8007268:	4313      	orrs	r3, r2
 800726a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	8afa      	ldrh	r2, [r7, #22]
 8007272:	60da      	str	r2, [r3, #12]
 8007274:	e052      	b.n	800731c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800727c:	e04e      	b.n	800731c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800727e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007282:	2b08      	cmp	r3, #8
 8007284:	d827      	bhi.n	80072d6 <UART_SetConfig+0x506>
 8007286:	a201      	add	r2, pc, #4	@ (adr r2, 800728c <UART_SetConfig+0x4bc>)
 8007288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728c:	080072b1 	.word	0x080072b1
 8007290:	080072b9 	.word	0x080072b9
 8007294:	080072c1 	.word	0x080072c1
 8007298:	080072d7 	.word	0x080072d7
 800729c:	080072c7 	.word	0x080072c7
 80072a0:	080072d7 	.word	0x080072d7
 80072a4:	080072d7 	.word	0x080072d7
 80072a8:	080072d7 	.word	0x080072d7
 80072ac:	080072cf 	.word	0x080072cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072b0:	f7fd ffd6 	bl	8005260 <HAL_RCC_GetPCLK1Freq>
 80072b4:	61f8      	str	r0, [r7, #28]
        break;
 80072b6:	e014      	b.n	80072e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072b8:	f7fd ffe8 	bl	800528c <HAL_RCC_GetPCLK2Freq>
 80072bc:	61f8      	str	r0, [r7, #28]
        break;
 80072be:	e010      	b.n	80072e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072c0:	4b1e      	ldr	r3, [pc, #120]	@ (800733c <UART_SetConfig+0x56c>)
 80072c2:	61fb      	str	r3, [r7, #28]
        break;
 80072c4:	e00d      	b.n	80072e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072c6:	f7fd ff33 	bl	8005130 <HAL_RCC_GetSysClockFreq>
 80072ca:	61f8      	str	r0, [r7, #28]
        break;
 80072cc:	e009      	b.n	80072e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072d2:	61fb      	str	r3, [r7, #28]
        break;
 80072d4:	e005      	b.n	80072e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80072e0:	bf00      	nop
    }

    if (pclk != 0U)
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d019      	beq.n	800731c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	085a      	lsrs	r2, r3, #1
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	441a      	add	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	2b0f      	cmp	r3, #15
 8007300:	d909      	bls.n	8007316 <UART_SetConfig+0x546>
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007308:	d205      	bcs.n	8007316 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	b29a      	uxth	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	60da      	str	r2, [r3, #12]
 8007314:	e002      	b.n	800731c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007328:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800732c:	4618      	mov	r0, r3
 800732e:	3728      	adds	r7, #40	@ 0x28
 8007330:	46bd      	mov	sp, r7
 8007332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007336:	bf00      	nop
 8007338:	40008000 	.word	0x40008000
 800733c:	00f42400 	.word	0x00f42400

08007340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734c:	f003 0308 	and.w	r3, r3, #8
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00a      	beq.n	800736a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00a      	beq.n	800738c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	430a      	orrs	r2, r1
 800738a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007390:	f003 0302 	and.w	r3, r3, #2
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00a      	beq.n	80073ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b2:	f003 0304 	and.w	r3, r3, #4
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00a      	beq.n	80073d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d4:	f003 0310 	and.w	r3, r3, #16
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00a      	beq.n	80073f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f6:	f003 0320 	and.w	r3, r3, #32
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00a      	beq.n	8007414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	430a      	orrs	r2, r1
 8007412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800741c:	2b00      	cmp	r3, #0
 800741e:	d01a      	beq.n	8007456 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800743e:	d10a      	bne.n	8007456 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800745a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00a      	beq.n	8007478 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	430a      	orrs	r2, r1
 8007476:	605a      	str	r2, [r3, #4]
  }
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b098      	sub	sp, #96	@ 0x60
 8007488:	af02      	add	r7, sp, #8
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007494:	f7fb f9c0 	bl	8002818 <HAL_GetTick>
 8007498:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0308 	and.w	r3, r3, #8
 80074a4:	2b08      	cmp	r3, #8
 80074a6:	d12e      	bne.n	8007506 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074b0:	2200      	movs	r2, #0
 80074b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f88c 	bl	80075d4 <UART_WaitOnFlagUntilTimeout>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d021      	beq.n	8007506 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ca:	e853 3f00 	ldrex	r3, [r3]
 80074ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80074e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074e8:	e841 2300 	strex	r3, r2, [r1]
 80074ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1e6      	bne.n	80074c2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2220      	movs	r2, #32
 80074f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e062      	b.n	80075cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0304 	and.w	r3, r3, #4
 8007510:	2b04      	cmp	r3, #4
 8007512:	d149      	bne.n	80075a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007514:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800751c:	2200      	movs	r2, #0
 800751e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f856 	bl	80075d4 <UART_WaitOnFlagUntilTimeout>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d03c      	beq.n	80075a8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007536:	e853 3f00 	ldrex	r3, [r3]
 800753a:	623b      	str	r3, [r7, #32]
   return(result);
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007542:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	461a      	mov	r2, r3
 800754a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800754c:	633b      	str	r3, [r7, #48]	@ 0x30
 800754e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007550:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007554:	e841 2300 	strex	r3, r2, [r1]
 8007558:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800755a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1e6      	bne.n	800752e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3308      	adds	r3, #8
 8007566:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	e853 3f00 	ldrex	r3, [r3]
 800756e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f023 0301 	bic.w	r3, r3, #1
 8007576:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3308      	adds	r3, #8
 800757e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007580:	61fa      	str	r2, [r7, #28]
 8007582:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	69b9      	ldr	r1, [r7, #24]
 8007586:	69fa      	ldr	r2, [r7, #28]
 8007588:	e841 2300 	strex	r3, r2, [r1]
 800758c:	617b      	str	r3, [r7, #20]
   return(result);
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e5      	bne.n	8007560 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2220      	movs	r2, #32
 8007598:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e011      	b.n	80075cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2220      	movs	r2, #32
 80075ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2220      	movs	r2, #32
 80075b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3758      	adds	r7, #88	@ 0x58
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	603b      	str	r3, [r7, #0]
 80075e0:	4613      	mov	r3, r2
 80075e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075e4:	e04f      	b.n	8007686 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ec:	d04b      	beq.n	8007686 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ee:	f7fb f913 	bl	8002818 <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d302      	bcc.n	8007604 <UART_WaitOnFlagUntilTimeout+0x30>
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e04e      	b.n	80076a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0304 	and.w	r3, r3, #4
 8007612:	2b00      	cmp	r3, #0
 8007614:	d037      	beq.n	8007686 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2b80      	cmp	r3, #128	@ 0x80
 800761a:	d034      	beq.n	8007686 <UART_WaitOnFlagUntilTimeout+0xb2>
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2b40      	cmp	r3, #64	@ 0x40
 8007620:	d031      	beq.n	8007686 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	f003 0308 	and.w	r3, r3, #8
 800762c:	2b08      	cmp	r3, #8
 800762e:	d110      	bne.n	8007652 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2208      	movs	r2, #8
 8007636:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 f838 	bl	80076ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2208      	movs	r2, #8
 8007642:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e029      	b.n	80076a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800765c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007660:	d111      	bne.n	8007686 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800766a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 f81e 	bl	80076ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2220      	movs	r2, #32
 8007676:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e00f      	b.n	80076a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	69da      	ldr	r2, [r3, #28]
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	4013      	ands	r3, r2
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	429a      	cmp	r2, r3
 8007694:	bf0c      	ite	eq
 8007696:	2301      	moveq	r3, #1
 8007698:	2300      	movne	r3, #0
 800769a:	b2db      	uxtb	r3, r3
 800769c:	461a      	mov	r2, r3
 800769e:	79fb      	ldrb	r3, [r7, #7]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d0a0      	beq.n	80075e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b095      	sub	sp, #84	@ 0x54
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076be:	e853 3f00 	ldrex	r3, [r3]
 80076c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	461a      	mov	r2, r3
 80076d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80076d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076dc:	e841 2300 	strex	r3, r2, [r1]
 80076e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1e6      	bne.n	80076b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3308      	adds	r3, #8
 80076ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	e853 3f00 	ldrex	r3, [r3]
 80076f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	f023 0301 	bic.w	r3, r3, #1
 80076fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3308      	adds	r3, #8
 8007706:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007708:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800770a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800770e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007710:	e841 2300 	strex	r3, r2, [r1]
 8007714:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1e5      	bne.n	80076e8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007720:	2b01      	cmp	r3, #1
 8007722:	d118      	bne.n	8007756 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	e853 3f00 	ldrex	r3, [r3]
 8007730:	60bb      	str	r3, [r7, #8]
   return(result);
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	f023 0310 	bic.w	r3, r3, #16
 8007738:	647b      	str	r3, [r7, #68]	@ 0x44
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	461a      	mov	r2, r3
 8007740:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007742:	61bb      	str	r3, [r7, #24]
 8007744:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007746:	6979      	ldr	r1, [r7, #20]
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	e841 2300 	strex	r3, r2, [r1]
 800774e:	613b      	str	r3, [r7, #16]
   return(result);
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1e6      	bne.n	8007724 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2220      	movs	r2, #32
 800775a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800776a:	bf00      	nop
 800776c:	3754      	adds	r7, #84	@ 0x54
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b084      	sub	sp, #16
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007782:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f7ff fb05 	bl	8006da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800779a:	bf00      	nop
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b088      	sub	sp, #32
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	e853 3f00 	ldrex	r3, [r3]
 80077b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077be:	61fb      	str	r3, [r7, #28]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	461a      	mov	r2, r3
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	61bb      	str	r3, [r7, #24]
 80077ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077cc:	6979      	ldr	r1, [r7, #20]
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	e841 2300 	strex	r3, r2, [r1]
 80077d4:	613b      	str	r3, [r7, #16]
   return(result);
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e6      	bne.n	80077aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2220      	movs	r2, #32
 80077e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff fad1 	bl	8006d90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077ee:	bf00      	nop
 80077f0:	3720      	adds	r7, #32
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b083      	sub	sp, #12
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80077fe:	bf00      	nop
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800780a:	b084      	sub	sp, #16
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	f107 001c 	add.w	r0, r7, #28
 8007818:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fa69 	bl	8007d00 <USB_CoreReset>
 800782e:	4603      	mov	r3, r0
 8007830:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007832:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007836:	2b00      	cmp	r3, #0
 8007838:	d106      	bne.n	8007848 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800783e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	639a      	str	r2, [r3, #56]	@ 0x38
 8007846:	e005      	b.n	8007854 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8007854:	7bfb      	ldrb	r3, [r7, #15]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007860:	b004      	add	sp, #16
 8007862:	4770      	bx	lr

08007864 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f023 0201 	bic.w	r2, r3, #1
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	460b      	mov	r3, r1
 8007890:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007892:	2300      	movs	r3, #0
 8007894:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80078a2:	78fb      	ldrb	r3, [r7, #3]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d115      	bne.n	80078d4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80078b4:	200a      	movs	r0, #10
 80078b6:	f7fa ffbb 	bl	8002830 <HAL_Delay>
      ms += 10U;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	330a      	adds	r3, #10
 80078be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fa0f 	bl	8007ce4 <USB_GetMode>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d01e      	beq.n	800790a <USB_SetCurrentMode+0x84>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2bc7      	cmp	r3, #199	@ 0xc7
 80078d0:	d9f0      	bls.n	80078b4 <USB_SetCurrentMode+0x2e>
 80078d2:	e01a      	b.n	800790a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078d4:	78fb      	ldrb	r3, [r7, #3]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d115      	bne.n	8007906 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80078e6:	200a      	movs	r0, #10
 80078e8:	f7fa ffa2 	bl	8002830 <HAL_Delay>
      ms += 10U;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	330a      	adds	r3, #10
 80078f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f9f6 	bl	8007ce4 <USB_GetMode>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d005      	beq.n	800790a <USB_SetCurrentMode+0x84>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2bc7      	cmp	r3, #199	@ 0xc7
 8007902:	d9f0      	bls.n	80078e6 <USB_SetCurrentMode+0x60>
 8007904:	e001      	b.n	800790a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e005      	b.n	8007916 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2bc8      	cmp	r3, #200	@ 0xc8
 800790e:	d101      	bne.n	8007914 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e000      	b.n	8007916 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007920:	b084      	sub	sp, #16
 8007922:	b580      	push	{r7, lr}
 8007924:	b086      	sub	sp, #24
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800792e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800793a:	2300      	movs	r3, #0
 800793c:	613b      	str	r3, [r7, #16]
 800793e:	e009      	b.n	8007954 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	3340      	adds	r3, #64	@ 0x40
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	2200      	movs	r2, #0
 800794c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	3301      	adds	r3, #1
 8007952:	613b      	str	r3, [r7, #16]
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	2b0e      	cmp	r3, #14
 8007958:	d9f2      	bls.n	8007940 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800795a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800795e:	2b00      	cmp	r3, #0
 8007960:	d11c      	bne.n	800799c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007970:	f043 0302 	orr.w	r3, r3, #2
 8007974:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800797a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	e005      	b.n	80079a8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80079ae:	461a      	mov	r2, r3
 80079b0:	2300      	movs	r3, #0
 80079b2:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80079b4:	2103      	movs	r1, #3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f95a 	bl	8007c70 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079bc:	2110      	movs	r1, #16
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f8f6 	bl	8007bb0 <USB_FlushTxFifo>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f920 	bl	8007c14 <USB_FlushRxFifo>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079e4:	461a      	mov	r2, r3
 80079e6:	2300      	movs	r3, #0
 80079e8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079f0:	461a      	mov	r2, r3
 80079f2:	2300      	movs	r3, #0
 80079f4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079fc:	461a      	mov	r2, r3
 80079fe:	2300      	movs	r3, #0
 8007a00:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a02:	2300      	movs	r3, #0
 8007a04:	613b      	str	r3, [r7, #16]
 8007a06:	e043      	b.n	8007a90 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a1e:	d118      	bne.n	8007a52 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10a      	bne.n	8007a3c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	015a      	lsls	r2, r3, #5
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a32:	461a      	mov	r2, r3
 8007a34:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a38:	6013      	str	r3, [r2, #0]
 8007a3a:	e013      	b.n	8007a64 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	015a      	lsls	r2, r3, #5
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4413      	add	r3, r2
 8007a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a48:	461a      	mov	r2, r3
 8007a4a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	e008      	b.n	8007a64 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	015a      	lsls	r2, r3, #5
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	4413      	add	r3, r2
 8007a5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a5e:	461a      	mov	r2, r3
 8007a60:	2300      	movs	r3, #0
 8007a62:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a70:	461a      	mov	r2, r3
 8007a72:	2300      	movs	r3, #0
 8007a74:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	015a      	lsls	r2, r3, #5
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a82:	461a      	mov	r2, r3
 8007a84:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	613b      	str	r3, [r7, #16]
 8007a90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a94:	461a      	mov	r2, r3
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d3b5      	bcc.n	8007a08 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	613b      	str	r3, [r7, #16]
 8007aa0:	e043      	b.n	8007b2a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ab8:	d118      	bne.n	8007aec <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10a      	bne.n	8007ad6 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007acc:	461a      	mov	r2, r3
 8007ace:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007ad2:	6013      	str	r3, [r2, #0]
 8007ad4:	e013      	b.n	8007afe <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007ae8:	6013      	str	r3, [r2, #0]
 8007aea:	e008      	b.n	8007afe <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007af8:	461a      	mov	r2, r3
 8007afa:	2300      	movs	r3, #0
 8007afc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	015a      	lsls	r2, r3, #5
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007b22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	3301      	adds	r3, #1
 8007b28:	613b      	str	r3, [r7, #16]
 8007b2a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b2e:	461a      	mov	r2, r3
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d3b5      	bcc.n	8007aa2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b48:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007b56:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	f043 0210 	orr.w	r2, r3, #16
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	699a      	ldr	r2, [r3, #24]
 8007b68:	4b10      	ldr	r3, [pc, #64]	@ (8007bac <USB_DevInit+0x28c>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b70:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d005      	beq.n	8007b84 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	f043 0208 	orr.w	r2, r3, #8
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b84:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d107      	bne.n	8007b9c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b94:	f043 0304 	orr.w	r3, r3, #4
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ba8:	b004      	add	sp, #16
 8007baa:	4770      	bx	lr
 8007bac:	803c3800 	.word	0x803c3800

08007bb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bca:	d901      	bls.n	8007bd0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e01b      	b.n	8007c08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	daf2      	bge.n	8007bbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	019b      	lsls	r3, r3, #6
 8007be0:	f043 0220 	orr.w	r2, r3, #32
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3301      	adds	r3, #1
 8007bec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bf4:	d901      	bls.n	8007bfa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e006      	b.n	8007c08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	f003 0320 	and.w	r3, r3, #32
 8007c02:	2b20      	cmp	r3, #32
 8007c04:	d0f0      	beq.n	8007be8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3301      	adds	r3, #1
 8007c24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c2c:	d901      	bls.n	8007c32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e018      	b.n	8007c64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	daf2      	bge.n	8007c20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2210      	movs	r2, #16
 8007c42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	3301      	adds	r3, #1
 8007c48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c50:	d901      	bls.n	8007c56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e006      	b.n	8007c64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	f003 0310 	and.w	r3, r3, #16
 8007c5e:	2b10      	cmp	r3, #16
 8007c60:	d0f0      	beq.n	8007c44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	78fb      	ldrb	r3, [r7, #3]
 8007c8a:	68f9      	ldr	r1, [r7, #12]
 8007c8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c90:	4313      	orrs	r3, r2
 8007c92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b085      	sub	sp, #20
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007cbc:	f023 0303 	bic.w	r3, r3, #3
 8007cc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cd0:	f043 0302 	orr.w	r3, r3, #2
 8007cd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	f003 0301 	and.w	r3, r3, #1
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d18:	d901      	bls.n	8007d1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e01b      	b.n	8007d56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	daf2      	bge.n	8007d0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	f043 0201 	orr.w	r2, r3, #1
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d42:	d901      	bls.n	8007d48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e006      	b.n	8007d56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	f003 0301 	and.w	r3, r3, #1
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d0f0      	beq.n	8007d36 <USB_CoreReset+0x36>

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
	...

08007d64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007d64:	b580      	push	{r7, lr}
 8007d66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007d68:	4b05      	ldr	r3, [pc, #20]	@ (8007d80 <SysTick_Handler+0x1c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007d6c:	f001 fe0a 	bl	8009984 <xTaskGetSchedulerState>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d001      	beq.n	8007d7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007d76:	f002 fcff 	bl	800a778 <xPortSysTickHandler>
  }
}
 8007d7a:	bf00      	nop
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	e000e010 	.word	0xe000e010

08007d84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4a07      	ldr	r2, [pc, #28]	@ (8007db0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007d94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	4a06      	ldr	r2, [pc, #24]	@ (8007db4 <vApplicationGetIdleTaskMemory+0x30>)
 8007d9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2280      	movs	r2, #128	@ 0x80
 8007da0:	601a      	str	r2, [r3, #0]
}
 8007da2:	bf00      	nop
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	20000a24 	.word	0x20000a24
 8007db4:	20000a80 	.word	0x20000a80

08007db8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	4a07      	ldr	r2, [pc, #28]	@ (8007de4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007dc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	4a06      	ldr	r2, [pc, #24]	@ (8007de8 <vApplicationGetTimerTaskMemory+0x30>)
 8007dce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007dd6:	601a      	str	r2, [r3, #0]
}
 8007dd8:	bf00      	nop
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr
 8007de4:	20000c80 	.word	0x20000c80
 8007de8:	20000cdc 	.word	0x20000cdc

08007dec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f103 0208 	add.w	r2, r3, #8
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f04f 32ff 	mov.w	r2, #4294967295
 8007e04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f103 0208 	add.w	r2, r3, #8
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f103 0208 	add.w	r2, r3, #8
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e3a:	bf00      	nop
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e46:	b480      	push	{r7}
 8007e48:	b085      	sub	sp, #20
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	689a      	ldr	r2, [r3, #8]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	1c5a      	adds	r2, r3, #1
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	601a      	str	r2, [r3, #0]
}
 8007e82:	bf00      	nop
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b085      	sub	sp, #20
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea4:	d103      	bne.n	8007eae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	e00c      	b.n	8007ec8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	e002      	b.n	8007ebc <vListInsert+0x2e>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	60fb      	str	r3, [r7, #12]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d2f6      	bcs.n	8007eb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	683a      	ldr	r2, [r7, #0]
 8007ee2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	1c5a      	adds	r2, r3, #1
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	601a      	str	r2, [r3, #0]
}
 8007ef4:	bf00      	nop
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	6892      	ldr	r2, [r2, #8]
 8007f16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	6852      	ldr	r2, [r2, #4]
 8007f20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d103      	bne.n	8007f34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689a      	ldr	r2, [r3, #8]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	1e5a      	subs	r2, r3, #1
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10b      	bne.n	8007f80 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f7a:	bf00      	nop
 8007f7c:	bf00      	nop
 8007f7e:	e7fd      	b.n	8007f7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f80:	f002 fb6a 	bl	800a658 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f8c:	68f9      	ldr	r1, [r7, #12]
 8007f8e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f90:	fb01 f303 	mul.w	r3, r1, r3
 8007f94:	441a      	add	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	68f9      	ldr	r1, [r7, #12]
 8007fb4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007fb6:	fb01 f303 	mul.w	r3, r1, r3
 8007fba:	441a      	add	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	22ff      	movs	r2, #255	@ 0xff
 8007fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	22ff      	movs	r2, #255	@ 0xff
 8007fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d114      	bne.n	8008000 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d01a      	beq.n	8008014 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3310      	adds	r3, #16
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f001 fb0e 	bl	8009604 <xTaskRemoveFromEventList>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d012      	beq.n	8008014 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007fee:	4b0d      	ldr	r3, [pc, #52]	@ (8008024 <xQueueGenericReset+0xd0>)
 8007ff0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ff4:	601a      	str	r2, [r3, #0]
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	e009      	b.n	8008014 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	3310      	adds	r3, #16
 8008004:	4618      	mov	r0, r3
 8008006:	f7ff fef1 	bl	8007dec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3324      	adds	r3, #36	@ 0x24
 800800e:	4618      	mov	r0, r3
 8008010:	f7ff feec 	bl	8007dec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008014:	f002 fb52 	bl	800a6bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008018:	2301      	movs	r3, #1
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	e000ed04 	.word	0xe000ed04

08008028 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08e      	sub	sp, #56	@ 0x38
 800802c:	af02      	add	r7, sp, #8
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10b      	bne.n	8008054 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800803c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800804e:	bf00      	nop
 8008050:	bf00      	nop
 8008052:	e7fd      	b.n	8008050 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10b      	bne.n	8008072 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800806c:	bf00      	nop
 800806e:	bf00      	nop
 8008070:	e7fd      	b.n	800806e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <xQueueGenericCreateStatic+0x56>
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <xQueueGenericCreateStatic+0x5a>
 800807e:	2301      	movs	r3, #1
 8008080:	e000      	b.n	8008084 <xQueueGenericCreateStatic+0x5c>
 8008082:	2300      	movs	r3, #0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10b      	bne.n	80080a0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	623b      	str	r3, [r7, #32]
}
 800809a:	bf00      	nop
 800809c:	bf00      	nop
 800809e:	e7fd      	b.n	800809c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d102      	bne.n	80080ac <xQueueGenericCreateStatic+0x84>
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d101      	bne.n	80080b0 <xQueueGenericCreateStatic+0x88>
 80080ac:	2301      	movs	r3, #1
 80080ae:	e000      	b.n	80080b2 <xQueueGenericCreateStatic+0x8a>
 80080b0:	2300      	movs	r3, #0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10b      	bne.n	80080ce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	61fb      	str	r3, [r7, #28]
}
 80080c8:	bf00      	nop
 80080ca:	bf00      	nop
 80080cc:	e7fd      	b.n	80080ca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80080ce:	2350      	movs	r3, #80	@ 0x50
 80080d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2b50      	cmp	r3, #80	@ 0x50
 80080d6:	d00b      	beq.n	80080f0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80080d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	61bb      	str	r3, [r7, #24]
}
 80080ea:	bf00      	nop
 80080ec:	bf00      	nop
 80080ee:	e7fd      	b.n	80080ec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80080f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80080f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00d      	beq.n	8008118 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80080fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008104:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	4613      	mov	r3, r2
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	68b9      	ldr	r1, [r7, #8]
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f000 f840 	bl	8008198 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800811a:	4618      	mov	r0, r3
 800811c:	3730      	adds	r7, #48	@ 0x30
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008122:	b580      	push	{r7, lr}
 8008124:	b08a      	sub	sp, #40	@ 0x28
 8008126:	af02      	add	r7, sp, #8
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	4613      	mov	r3, r2
 800812e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10b      	bne.n	800814e <xQueueGenericCreate+0x2c>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	613b      	str	r3, [r7, #16]
}
 8008148:	bf00      	nop
 800814a:	bf00      	nop
 800814c:	e7fd      	b.n	800814a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	fb02 f303 	mul.w	r3, r2, r3
 8008156:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	3350      	adds	r3, #80	@ 0x50
 800815c:	4618      	mov	r0, r3
 800815e:	f002 fb9d 	bl	800a89c <pvPortMalloc>
 8008162:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d011      	beq.n	800818e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	3350      	adds	r3, #80	@ 0x50
 8008172:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800817c:	79fa      	ldrb	r2, [r7, #7]
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	4613      	mov	r3, r2
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	68b9      	ldr	r1, [r7, #8]
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 f805 	bl	8008198 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800818e:	69bb      	ldr	r3, [r7, #24]
	}
 8008190:	4618      	mov	r0, r3
 8008192:	3720      	adds	r7, #32
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
 80081a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d103      	bne.n	80081b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	69ba      	ldr	r2, [r7, #24]
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	e002      	b.n	80081ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081c6:	2101      	movs	r1, #1
 80081c8:	69b8      	ldr	r0, [r7, #24]
 80081ca:	f7ff fec3 	bl	8007f54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	78fa      	ldrb	r2, [r7, #3]
 80081d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081d6:	bf00      	nop
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
	...

080081e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b08e      	sub	sp, #56	@ 0x38
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80081ee:	2300      	movs	r3, #0
 80081f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80081f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10b      	bne.n	8008214 <xQueueGenericSend+0x34>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800820e:	bf00      	nop
 8008210:	bf00      	nop
 8008212:	e7fd      	b.n	8008210 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d103      	bne.n	8008222 <xQueueGenericSend+0x42>
 800821a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <xQueueGenericSend+0x46>
 8008222:	2301      	movs	r3, #1
 8008224:	e000      	b.n	8008228 <xQueueGenericSend+0x48>
 8008226:	2300      	movs	r3, #0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10b      	bne.n	8008244 <xQueueGenericSend+0x64>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800823e:	bf00      	nop
 8008240:	bf00      	nop
 8008242:	e7fd      	b.n	8008240 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	2b02      	cmp	r3, #2
 8008248:	d103      	bne.n	8008252 <xQueueGenericSend+0x72>
 800824a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800824e:	2b01      	cmp	r3, #1
 8008250:	d101      	bne.n	8008256 <xQueueGenericSend+0x76>
 8008252:	2301      	movs	r3, #1
 8008254:	e000      	b.n	8008258 <xQueueGenericSend+0x78>
 8008256:	2300      	movs	r3, #0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10b      	bne.n	8008274 <xQueueGenericSend+0x94>
	__asm volatile
 800825c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008260:	f383 8811 	msr	BASEPRI, r3
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	623b      	str	r3, [r7, #32]
}
 800826e:	bf00      	nop
 8008270:	bf00      	nop
 8008272:	e7fd      	b.n	8008270 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008274:	f001 fb86 	bl	8009984 <xTaskGetSchedulerState>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d102      	bne.n	8008284 <xQueueGenericSend+0xa4>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <xQueueGenericSend+0xa8>
 8008284:	2301      	movs	r3, #1
 8008286:	e000      	b.n	800828a <xQueueGenericSend+0xaa>
 8008288:	2300      	movs	r3, #0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10b      	bne.n	80082a6 <xQueueGenericSend+0xc6>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	61fb      	str	r3, [r7, #28]
}
 80082a0:	bf00      	nop
 80082a2:	bf00      	nop
 80082a4:	e7fd      	b.n	80082a2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082a6:	f002 f9d7 	bl	800a658 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d302      	bcc.n	80082bc <xQueueGenericSend+0xdc>
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d129      	bne.n	8008310 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	68b9      	ldr	r1, [r7, #8]
 80082c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082c2:	f000 fbc7 	bl	8008a54 <prvCopyDataToQueue>
 80082c6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d010      	beq.n	80082f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d2:	3324      	adds	r3, #36	@ 0x24
 80082d4:	4618      	mov	r0, r3
 80082d6:	f001 f995 	bl	8009604 <xTaskRemoveFromEventList>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d013      	beq.n	8008308 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80082e0:	4b3f      	ldr	r3, [pc, #252]	@ (80083e0 <xQueueGenericSend+0x200>)
 80082e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	e00a      	b.n	8008308 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80082f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d007      	beq.n	8008308 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80082f8:	4b39      	ldr	r3, [pc, #228]	@ (80083e0 <xQueueGenericSend+0x200>)
 80082fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008308:	f002 f9d8 	bl	800a6bc <vPortExitCritical>
				return pdPASS;
 800830c:	2301      	movs	r3, #1
 800830e:	e063      	b.n	80083d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d103      	bne.n	800831e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008316:	f002 f9d1 	bl	800a6bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800831a:	2300      	movs	r3, #0
 800831c:	e05c      	b.n	80083d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800831e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008320:	2b00      	cmp	r3, #0
 8008322:	d106      	bne.n	8008332 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008324:	f107 0314 	add.w	r3, r7, #20
 8008328:	4618      	mov	r0, r3
 800832a:	f001 f9cf 	bl	80096cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800832e:	2301      	movs	r3, #1
 8008330:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008332:	f002 f9c3 	bl	800a6bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008336:	f000 ff3f 	bl	80091b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800833a:	f002 f98d 	bl	800a658 <vPortEnterCritical>
 800833e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008340:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008344:	b25b      	sxtb	r3, r3
 8008346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834a:	d103      	bne.n	8008354 <xQueueGenericSend+0x174>
 800834c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834e:	2200      	movs	r2, #0
 8008350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008356:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800835a:	b25b      	sxtb	r3, r3
 800835c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008360:	d103      	bne.n	800836a <xQueueGenericSend+0x18a>
 8008362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800836a:	f002 f9a7 	bl	800a6bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800836e:	1d3a      	adds	r2, r7, #4
 8008370:	f107 0314 	add.w	r3, r7, #20
 8008374:	4611      	mov	r1, r2
 8008376:	4618      	mov	r0, r3
 8008378:	f001 f9be 	bl	80096f8 <xTaskCheckForTimeOut>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d124      	bne.n	80083cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008382:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008384:	f000 fc5e 	bl	8008c44 <prvIsQueueFull>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d018      	beq.n	80083c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800838e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008390:	3310      	adds	r3, #16
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	4611      	mov	r1, r2
 8008396:	4618      	mov	r0, r3
 8008398:	f001 f8e2 	bl	8009560 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800839c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800839e:	f000 fbe9 	bl	8008b74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80083a2:	f000 ff17 	bl	80091d4 <xTaskResumeAll>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f47f af7c 	bne.w	80082a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80083ae:	4b0c      	ldr	r3, [pc, #48]	@ (80083e0 <xQueueGenericSend+0x200>)
 80083b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	e772      	b.n	80082a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083c2:	f000 fbd7 	bl	8008b74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083c6:	f000 ff05 	bl	80091d4 <xTaskResumeAll>
 80083ca:	e76c      	b.n	80082a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083ce:	f000 fbd1 	bl	8008b74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083d2:	f000 feff 	bl	80091d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3738      	adds	r7, #56	@ 0x38
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	e000ed04 	.word	0xe000ed04

080083e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b090      	sub	sp, #64	@ 0x40
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80083f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10b      	bne.n	8008414 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800840e:	bf00      	nop
 8008410:	bf00      	nop
 8008412:	e7fd      	b.n	8008410 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d103      	bne.n	8008422 <xQueueGenericSendFromISR+0x3e>
 800841a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <xQueueGenericSendFromISR+0x42>
 8008422:	2301      	movs	r3, #1
 8008424:	e000      	b.n	8008428 <xQueueGenericSendFromISR+0x44>
 8008426:	2300      	movs	r3, #0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d10b      	bne.n	8008444 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800842c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008430:	f383 8811 	msr	BASEPRI, r3
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800843e:	bf00      	nop
 8008440:	bf00      	nop
 8008442:	e7fd      	b.n	8008440 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	2b02      	cmp	r3, #2
 8008448:	d103      	bne.n	8008452 <xQueueGenericSendFromISR+0x6e>
 800844a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800844c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800844e:	2b01      	cmp	r3, #1
 8008450:	d101      	bne.n	8008456 <xQueueGenericSendFromISR+0x72>
 8008452:	2301      	movs	r3, #1
 8008454:	e000      	b.n	8008458 <xQueueGenericSendFromISR+0x74>
 8008456:	2300      	movs	r3, #0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10b      	bne.n	8008474 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	623b      	str	r3, [r7, #32]
}
 800846e:	bf00      	nop
 8008470:	bf00      	nop
 8008472:	e7fd      	b.n	8008470 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008474:	f002 f9d0 	bl	800a818 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008478:	f3ef 8211 	mrs	r2, BASEPRI
 800847c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	61fa      	str	r2, [r7, #28]
 800848e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008490:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008492:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008496:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800849c:	429a      	cmp	r2, r3
 800849e:	d302      	bcc.n	80084a6 <xQueueGenericSendFromISR+0xc2>
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d12f      	bne.n	8008506 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80084a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	68b9      	ldr	r1, [r7, #8]
 80084ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80084bc:	f000 faca 	bl	8008a54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80084c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c8:	d112      	bne.n	80084f0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d016      	beq.n	8008500 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d4:	3324      	adds	r3, #36	@ 0x24
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 f894 	bl	8009604 <xTaskRemoveFromEventList>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00e      	beq.n	8008500 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00b      	beq.n	8008500 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	e007      	b.n	8008500 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80084f4:	3301      	adds	r3, #1
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	b25a      	sxtb	r2, r3
 80084fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008500:	2301      	movs	r3, #1
 8008502:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008504:	e001      	b.n	800850a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008506:	2300      	movs	r3, #0
 8008508:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800850a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800850c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008514:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008518:	4618      	mov	r0, r3
 800851a:	3740      	adds	r7, #64	@ 0x40
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b08e      	sub	sp, #56	@ 0x38
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800852e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10b      	bne.n	800854c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	623b      	str	r3, [r7, #32]
}
 8008546:	bf00      	nop
 8008548:	bf00      	nop
 800854a:	e7fd      	b.n	8008548 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800854c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00b      	beq.n	800856c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008558:	f383 8811 	msr	BASEPRI, r3
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	61fb      	str	r3, [r7, #28]
}
 8008566:	bf00      	nop
 8008568:	bf00      	nop
 800856a:	e7fd      	b.n	8008568 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800856c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d103      	bne.n	800857c <xQueueGiveFromISR+0x5c>
 8008574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <xQueueGiveFromISR+0x60>
 800857c:	2301      	movs	r3, #1
 800857e:	e000      	b.n	8008582 <xQueueGiveFromISR+0x62>
 8008580:	2300      	movs	r3, #0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10b      	bne.n	800859e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	61bb      	str	r3, [r7, #24]
}
 8008598:	bf00      	nop
 800859a:	bf00      	nop
 800859c:	e7fd      	b.n	800859a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800859e:	f002 f93b 	bl	800a818 <vPortValidateInterruptPriority>
	__asm volatile
 80085a2:	f3ef 8211 	mrs	r2, BASEPRI
 80085a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	617a      	str	r2, [r7, #20]
 80085b8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80085ba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80085c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d22b      	bcs.n	8008626 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80085ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085da:	1c5a      	adds	r2, r3, #1
 80085dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085de:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80085e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80085e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e8:	d112      	bne.n	8008610 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d016      	beq.n	8008620 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f4:	3324      	adds	r3, #36	@ 0x24
 80085f6:	4618      	mov	r0, r3
 80085f8:	f001 f804 	bl	8009604 <xTaskRemoveFromEventList>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00e      	beq.n	8008620 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00b      	beq.n	8008620 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	2201      	movs	r2, #1
 800860c:	601a      	str	r2, [r3, #0]
 800860e:	e007      	b.n	8008620 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008610:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008614:	3301      	adds	r3, #1
 8008616:	b2db      	uxtb	r3, r3
 8008618:	b25a      	sxtb	r2, r3
 800861a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008620:	2301      	movs	r3, #1
 8008622:	637b      	str	r3, [r7, #52]	@ 0x34
 8008624:	e001      	b.n	800862a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008626:	2300      	movs	r3, #0
 8008628:	637b      	str	r3, [r7, #52]	@ 0x34
 800862a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800862c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f383 8811 	msr	BASEPRI, r3
}
 8008634:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008638:	4618      	mov	r0, r3
 800863a:	3738      	adds	r7, #56	@ 0x38
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b08c      	sub	sp, #48	@ 0x30
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800864c:	2300      	movs	r3, #0
 800864e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008656:	2b00      	cmp	r3, #0
 8008658:	d10b      	bne.n	8008672 <xQueueReceive+0x32>
	__asm volatile
 800865a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800865e:	f383 8811 	msr	BASEPRI, r3
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	f3bf 8f4f 	dsb	sy
 800866a:	623b      	str	r3, [r7, #32]
}
 800866c:	bf00      	nop
 800866e:	bf00      	nop
 8008670:	e7fd      	b.n	800866e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d103      	bne.n	8008680 <xQueueReceive+0x40>
 8008678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <xQueueReceive+0x44>
 8008680:	2301      	movs	r3, #1
 8008682:	e000      	b.n	8008686 <xQueueReceive+0x46>
 8008684:	2300      	movs	r3, #0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10b      	bne.n	80086a2 <xQueueReceive+0x62>
	__asm volatile
 800868a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800868e:	f383 8811 	msr	BASEPRI, r3
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	f3bf 8f4f 	dsb	sy
 800869a:	61fb      	str	r3, [r7, #28]
}
 800869c:	bf00      	nop
 800869e:	bf00      	nop
 80086a0:	e7fd      	b.n	800869e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086a2:	f001 f96f 	bl	8009984 <xTaskGetSchedulerState>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d102      	bne.n	80086b2 <xQueueReceive+0x72>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <xQueueReceive+0x76>
 80086b2:	2301      	movs	r3, #1
 80086b4:	e000      	b.n	80086b8 <xQueueReceive+0x78>
 80086b6:	2300      	movs	r3, #0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10b      	bne.n	80086d4 <xQueueReceive+0x94>
	__asm volatile
 80086bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	61bb      	str	r3, [r7, #24]
}
 80086ce:	bf00      	nop
 80086d0:	bf00      	nop
 80086d2:	e7fd      	b.n	80086d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086d4:	f001 ffc0 	bl	800a658 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d01f      	beq.n	8008724 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80086e4:	68b9      	ldr	r1, [r7, #8]
 80086e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086e8:	f000 fa1e 	bl	8008b28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80086ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ee:	1e5a      	subs	r2, r3, #1
 80086f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00f      	beq.n	800871c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086fe:	3310      	adds	r3, #16
 8008700:	4618      	mov	r0, r3
 8008702:	f000 ff7f 	bl	8009604 <xTaskRemoveFromEventList>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d007      	beq.n	800871c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800870c:	4b3c      	ldr	r3, [pc, #240]	@ (8008800 <xQueueReceive+0x1c0>)
 800870e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	f3bf 8f4f 	dsb	sy
 8008718:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800871c:	f001 ffce 	bl	800a6bc <vPortExitCritical>
				return pdPASS;
 8008720:	2301      	movs	r3, #1
 8008722:	e069      	b.n	80087f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d103      	bne.n	8008732 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800872a:	f001 ffc7 	bl	800a6bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800872e:	2300      	movs	r3, #0
 8008730:	e062      	b.n	80087f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008734:	2b00      	cmp	r3, #0
 8008736:	d106      	bne.n	8008746 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008738:	f107 0310 	add.w	r3, r7, #16
 800873c:	4618      	mov	r0, r3
 800873e:	f000 ffc5 	bl	80096cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008742:	2301      	movs	r3, #1
 8008744:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008746:	f001 ffb9 	bl	800a6bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800874a:	f000 fd35 	bl	80091b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800874e:	f001 ff83 	bl	800a658 <vPortEnterCritical>
 8008752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008754:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008758:	b25b      	sxtb	r3, r3
 800875a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800875e:	d103      	bne.n	8008768 <xQueueReceive+0x128>
 8008760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008762:	2200      	movs	r2, #0
 8008764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800876e:	b25b      	sxtb	r3, r3
 8008770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008774:	d103      	bne.n	800877e <xQueueReceive+0x13e>
 8008776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008778:	2200      	movs	r2, #0
 800877a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800877e:	f001 ff9d 	bl	800a6bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008782:	1d3a      	adds	r2, r7, #4
 8008784:	f107 0310 	add.w	r3, r7, #16
 8008788:	4611      	mov	r1, r2
 800878a:	4618      	mov	r0, r3
 800878c:	f000 ffb4 	bl	80096f8 <xTaskCheckForTimeOut>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d123      	bne.n	80087de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008796:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008798:	f000 fa3e 	bl	8008c18 <prvIsQueueEmpty>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d017      	beq.n	80087d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80087a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a4:	3324      	adds	r3, #36	@ 0x24
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	4611      	mov	r1, r2
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fed8 	bl	8009560 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087b2:	f000 f9df 	bl	8008b74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087b6:	f000 fd0d 	bl	80091d4 <xTaskResumeAll>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d189      	bne.n	80086d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80087c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008800 <xQueueReceive+0x1c0>)
 80087c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087c6:	601a      	str	r2, [r3, #0]
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	e780      	b.n	80086d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80087d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087d4:	f000 f9ce 	bl	8008b74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087d8:	f000 fcfc 	bl	80091d4 <xTaskResumeAll>
 80087dc:	e77a      	b.n	80086d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80087de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087e0:	f000 f9c8 	bl	8008b74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087e4:	f000 fcf6 	bl	80091d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087ea:	f000 fa15 	bl	8008c18 <prvIsQueueEmpty>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f43f af6f 	beq.w	80086d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80087f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3730      	adds	r7, #48	@ 0x30
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	e000ed04 	.word	0xe000ed04

08008804 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b08e      	sub	sp, #56	@ 0x38
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800880e:	2300      	movs	r3, #0
 8008810:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008816:	2300      	movs	r3, #0
 8008818:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800881a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10b      	bne.n	8008838 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	623b      	str	r3, [r7, #32]
}
 8008832:	bf00      	nop
 8008834:	bf00      	nop
 8008836:	e7fd      	b.n	8008834 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800883a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00b      	beq.n	8008858 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	61fb      	str	r3, [r7, #28]
}
 8008852:	bf00      	nop
 8008854:	bf00      	nop
 8008856:	e7fd      	b.n	8008854 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008858:	f001 f894 	bl	8009984 <xTaskGetSchedulerState>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d102      	bne.n	8008868 <xQueueSemaphoreTake+0x64>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <xQueueSemaphoreTake+0x68>
 8008868:	2301      	movs	r3, #1
 800886a:	e000      	b.n	800886e <xQueueSemaphoreTake+0x6a>
 800886c:	2300      	movs	r3, #0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10b      	bne.n	800888a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	61bb      	str	r3, [r7, #24]
}
 8008884:	bf00      	nop
 8008886:	bf00      	nop
 8008888:	e7fd      	b.n	8008886 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800888a:	f001 fee5 	bl	800a658 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800888e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008892:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008896:	2b00      	cmp	r3, #0
 8008898:	d024      	beq.n	80088e4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800889a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800889c:	1e5a      	subs	r2, r3, #1
 800889e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d104      	bne.n	80088b4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80088aa:	f001 f9e5 	bl	8009c78 <pvTaskIncrementMutexHeldCount>
 80088ae:	4602      	mov	r2, r0
 80088b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00f      	beq.n	80088dc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088be:	3310      	adds	r3, #16
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 fe9f 	bl	8009604 <xTaskRemoveFromEventList>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d007      	beq.n	80088dc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80088cc:	4b54      	ldr	r3, [pc, #336]	@ (8008a20 <xQueueSemaphoreTake+0x21c>)
 80088ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088dc:	f001 feee 	bl	800a6bc <vPortExitCritical>
				return pdPASS;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e098      	b.n	8008a16 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d112      	bne.n	8008910 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80088ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00b      	beq.n	8008908 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	617b      	str	r3, [r7, #20]
}
 8008902:	bf00      	nop
 8008904:	bf00      	nop
 8008906:	e7fd      	b.n	8008904 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008908:	f001 fed8 	bl	800a6bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800890c:	2300      	movs	r3, #0
 800890e:	e082      	b.n	8008a16 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008912:	2b00      	cmp	r3, #0
 8008914:	d106      	bne.n	8008924 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008916:	f107 030c 	add.w	r3, r7, #12
 800891a:	4618      	mov	r0, r3
 800891c:	f000 fed6 	bl	80096cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008920:	2301      	movs	r3, #1
 8008922:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008924:	f001 feca 	bl	800a6bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008928:	f000 fc46 	bl	80091b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800892c:	f001 fe94 	bl	800a658 <vPortEnterCritical>
 8008930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008932:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008936:	b25b      	sxtb	r3, r3
 8008938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893c:	d103      	bne.n	8008946 <xQueueSemaphoreTake+0x142>
 800893e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008948:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800894c:	b25b      	sxtb	r3, r3
 800894e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008952:	d103      	bne.n	800895c <xQueueSemaphoreTake+0x158>
 8008954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008956:	2200      	movs	r2, #0
 8008958:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800895c:	f001 feae 	bl	800a6bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008960:	463a      	mov	r2, r7
 8008962:	f107 030c 	add.w	r3, r7, #12
 8008966:	4611      	mov	r1, r2
 8008968:	4618      	mov	r0, r3
 800896a:	f000 fec5 	bl	80096f8 <xTaskCheckForTimeOut>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d132      	bne.n	80089da <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008974:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008976:	f000 f94f 	bl	8008c18 <prvIsQueueEmpty>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d026      	beq.n	80089ce <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d109      	bne.n	800899c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008988:	f001 fe66 	bl	800a658 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800898c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	4618      	mov	r0, r3
 8008992:	f001 f815 	bl	80099c0 <xTaskPriorityInherit>
 8008996:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008998:	f001 fe90 	bl	800a6bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800899c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800899e:	3324      	adds	r3, #36	@ 0x24
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	4611      	mov	r1, r2
 80089a4:	4618      	mov	r0, r3
 80089a6:	f000 fddb 	bl	8009560 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80089aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80089ac:	f000 f8e2 	bl	8008b74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80089b0:	f000 fc10 	bl	80091d4 <xTaskResumeAll>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f47f af67 	bne.w	800888a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80089bc:	4b18      	ldr	r3, [pc, #96]	@ (8008a20 <xQueueSemaphoreTake+0x21c>)
 80089be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	f3bf 8f4f 	dsb	sy
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	e75d      	b.n	800888a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80089ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80089d0:	f000 f8d0 	bl	8008b74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089d4:	f000 fbfe 	bl	80091d4 <xTaskResumeAll>
 80089d8:	e757      	b.n	800888a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80089da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80089dc:	f000 f8ca 	bl	8008b74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089e0:	f000 fbf8 	bl	80091d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80089e6:	f000 f917 	bl	8008c18 <prvIsQueueEmpty>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f43f af4c 	beq.w	800888a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80089f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00d      	beq.n	8008a14 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80089f8:	f001 fe2e 	bl	800a658 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80089fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80089fe:	f000 f811 	bl	8008a24 <prvGetDisinheritPriorityAfterTimeout>
 8008a02:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f001 f8b0 	bl	8009b70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008a10:	f001 fe54 	bl	800a6bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3738      	adds	r7, #56	@ 0x38
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	e000ed04 	.word	0xe000ed04

08008a24 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d006      	beq.n	8008a42 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	e001      	b.n	8008a46 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008a42:	2300      	movs	r3, #0
 8008a44:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008a46:	68fb      	ldr	r3, [r7, #12]
	}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3714      	adds	r7, #20
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a60:	2300      	movs	r3, #0
 8008a62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10d      	bne.n	8008a8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d14d      	bne.n	8008b16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f001 f806 	bl	8009a90 <xTaskPriorityDisinherit>
 8008a84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	609a      	str	r2, [r3, #8]
 8008a8c:	e043      	b.n	8008b16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d119      	bne.n	8008ac8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6858      	ldr	r0, [r3, #4]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	68b9      	ldr	r1, [r7, #8]
 8008aa0:	f002 ff4f 	bl	800b942 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aac:	441a      	add	r2, r3
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d32b      	bcc.n	8008b16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	605a      	str	r2, [r3, #4]
 8008ac6:	e026      	b.n	8008b16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	68d8      	ldr	r0, [r3, #12]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	68b9      	ldr	r1, [r7, #8]
 8008ad4:	f002 ff35 	bl	800b942 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	68da      	ldr	r2, [r3, #12]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ae0:	425b      	negs	r3, r3
 8008ae2:	441a      	add	r2, r3
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	68da      	ldr	r2, [r3, #12]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d207      	bcs.n	8008b04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	689a      	ldr	r2, [r3, #8]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008afc:	425b      	negs	r3, r3
 8008afe:	441a      	add	r2, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d105      	bne.n	8008b16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	3b01      	subs	r3, #1
 8008b14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	1c5a      	adds	r2, r3, #1
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008b1e:	697b      	ldr	r3, [r7, #20]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3718      	adds	r7, #24
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d018      	beq.n	8008b6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68da      	ldr	r2, [r3, #12]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b42:	441a      	add	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	68da      	ldr	r2, [r3, #12]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d303      	bcc.n	8008b5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	68d9      	ldr	r1, [r3, #12]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b64:	461a      	mov	r2, r3
 8008b66:	6838      	ldr	r0, [r7, #0]
 8008b68:	f002 feeb 	bl	800b942 <memcpy>
	}
}
 8008b6c:	bf00      	nop
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b7c:	f001 fd6c 	bl	800a658 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b88:	e011      	b.n	8008bae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d012      	beq.n	8008bb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	3324      	adds	r3, #36	@ 0x24
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 fd34 	bl	8009604 <xTaskRemoveFromEventList>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d001      	beq.n	8008ba6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ba2:	f000 fe0d 	bl	80097c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	dce9      	bgt.n	8008b8a <prvUnlockQueue+0x16>
 8008bb6:	e000      	b.n	8008bba <prvUnlockQueue+0x46>
					break;
 8008bb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	22ff      	movs	r2, #255	@ 0xff
 8008bbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008bc2:	f001 fd7b 	bl	800a6bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008bc6:	f001 fd47 	bl	800a658 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bd2:	e011      	b.n	8008bf8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d012      	beq.n	8008c02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	3310      	adds	r3, #16
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 fd0f 	bl	8009604 <xTaskRemoveFromEventList>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008bec:	f000 fde8 	bl	80097c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008bf0:	7bbb      	ldrb	r3, [r7, #14]
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	dce9      	bgt.n	8008bd4 <prvUnlockQueue+0x60>
 8008c00:	e000      	b.n	8008c04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	22ff      	movs	r2, #255	@ 0xff
 8008c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008c0c:	f001 fd56 	bl	800a6bc <vPortExitCritical>
}
 8008c10:	bf00      	nop
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c20:	f001 fd1a 	bl	800a658 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d102      	bne.n	8008c32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	60fb      	str	r3, [r7, #12]
 8008c30:	e001      	b.n	8008c36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c32:	2300      	movs	r3, #0
 8008c34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c36:	f001 fd41 	bl	800a6bc <vPortExitCritical>

	return xReturn;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c4c:	f001 fd04 	bl	800a658 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d102      	bne.n	8008c62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	60fb      	str	r3, [r7, #12]
 8008c60:	e001      	b.n	8008c66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c62:	2300      	movs	r3, #0
 8008c64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c66:	f001 fd29 	bl	800a6bc <vPortExitCritical>

	return xReturn;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60fb      	str	r3, [r7, #12]
 8008c82:	e014      	b.n	8008cae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c84:	4a0f      	ldr	r2, [pc, #60]	@ (8008cc4 <vQueueAddToRegistry+0x50>)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10b      	bne.n	8008ca8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c90:	490c      	ldr	r1, [pc, #48]	@ (8008cc4 <vQueueAddToRegistry+0x50>)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	683a      	ldr	r2, [r7, #0]
 8008c96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8008cc4 <vQueueAddToRegistry+0x50>)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	00db      	lsls	r3, r3, #3
 8008ca0:	4413      	add	r3, r2
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008ca6:	e006      	b.n	8008cb6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	3301      	adds	r3, #1
 8008cac:	60fb      	str	r3, [r7, #12]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2b07      	cmp	r3, #7
 8008cb2:	d9e7      	bls.n	8008c84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	200010dc 	.word	0x200010dc

08008cc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008cd8:	f001 fcbe 	bl	800a658 <vPortEnterCritical>
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ce2:	b25b      	sxtb	r3, r3
 8008ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce8:	d103      	bne.n	8008cf2 <vQueueWaitForMessageRestricted+0x2a>
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cf8:	b25b      	sxtb	r3, r3
 8008cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cfe:	d103      	bne.n	8008d08 <vQueueWaitForMessageRestricted+0x40>
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d08:	f001 fcd8 	bl	800a6bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d106      	bne.n	8008d22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	3324      	adds	r3, #36	@ 0x24
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	68b9      	ldr	r1, [r7, #8]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f000 fc45 	bl	80095ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008d22:	6978      	ldr	r0, [r7, #20]
 8008d24:	f7ff ff26 	bl	8008b74 <prvUnlockQueue>
	}
 8008d28:	bf00      	nop
 8008d2a:	3718      	adds	r7, #24
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b08e      	sub	sp, #56	@ 0x38
 8008d34:	af04      	add	r7, sp, #16
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
 8008d3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10b      	bne.n	8008d5c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d48:	f383 8811 	msr	BASEPRI, r3
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	623b      	str	r3, [r7, #32]
}
 8008d56:	bf00      	nop
 8008d58:	bf00      	nop
 8008d5a:	e7fd      	b.n	8008d58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10b      	bne.n	8008d7a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d66:	f383 8811 	msr	BASEPRI, r3
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	61fb      	str	r3, [r7, #28]
}
 8008d74:	bf00      	nop
 8008d76:	bf00      	nop
 8008d78:	e7fd      	b.n	8008d76 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d7a:	235c      	movs	r3, #92	@ 0x5c
 8008d7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	2b5c      	cmp	r3, #92	@ 0x5c
 8008d82:	d00b      	beq.n	8008d9c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d88:	f383 8811 	msr	BASEPRI, r3
 8008d8c:	f3bf 8f6f 	isb	sy
 8008d90:	f3bf 8f4f 	dsb	sy
 8008d94:	61bb      	str	r3, [r7, #24]
}
 8008d96:	bf00      	nop
 8008d98:	bf00      	nop
 8008d9a:	e7fd      	b.n	8008d98 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d01e      	beq.n	8008de2 <xTaskCreateStatic+0xb2>
 8008da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d01b      	beq.n	8008de2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008db2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db6:	2202      	movs	r2, #2
 8008db8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	9303      	str	r3, [sp, #12]
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc2:	9302      	str	r3, [sp, #8]
 8008dc4:	f107 0314 	add.w	r3, r7, #20
 8008dc8:	9301      	str	r3, [sp, #4]
 8008dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dcc:	9300      	str	r3, [sp, #0]
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	68b9      	ldr	r1, [r7, #8]
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f000 f850 	bl	8008e7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008dda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008ddc:	f000 f8de 	bl	8008f9c <prvAddNewTaskToReadyList>
 8008de0:	e001      	b.n	8008de6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008de2:	2300      	movs	r3, #0
 8008de4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008de6:	697b      	ldr	r3, [r7, #20]
	}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3728      	adds	r7, #40	@ 0x28
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b08c      	sub	sp, #48	@ 0x30
 8008df4:	af04      	add	r7, sp, #16
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	603b      	str	r3, [r7, #0]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e00:	88fb      	ldrh	r3, [r7, #6]
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4618      	mov	r0, r3
 8008e06:	f001 fd49 	bl	800a89c <pvPortMalloc>
 8008e0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00e      	beq.n	8008e30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e12:	205c      	movs	r0, #92	@ 0x5c
 8008e14:	f001 fd42 	bl	800a89c <pvPortMalloc>
 8008e18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d003      	beq.n	8008e28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e26:	e005      	b.n	8008e34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e28:	6978      	ldr	r0, [r7, #20]
 8008e2a:	f001 fe05 	bl	800aa38 <vPortFree>
 8008e2e:	e001      	b.n	8008e34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008e30:	2300      	movs	r3, #0
 8008e32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d017      	beq.n	8008e6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e42:	88fa      	ldrh	r2, [r7, #6]
 8008e44:	2300      	movs	r3, #0
 8008e46:	9303      	str	r3, [sp, #12]
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	9302      	str	r3, [sp, #8]
 8008e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e4e:	9301      	str	r3, [sp, #4]
 8008e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	68b9      	ldr	r1, [r7, #8]
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f000 f80e 	bl	8008e7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e5e:	69f8      	ldr	r0, [r7, #28]
 8008e60:	f000 f89c 	bl	8008f9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e64:	2301      	movs	r3, #1
 8008e66:	61bb      	str	r3, [r7, #24]
 8008e68:	e002      	b.n	8008e70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e70:	69bb      	ldr	r3, [r7, #24]
	}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3720      	adds	r7, #32
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b088      	sub	sp, #32
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	60f8      	str	r0, [r7, #12]
 8008e82:	60b9      	str	r1, [r7, #8]
 8008e84:	607a      	str	r2, [r7, #4]
 8008e86:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	461a      	mov	r2, r3
 8008e92:	21a5      	movs	r1, #165	@ 0xa5
 8008e94:	f002 fcd5 	bl	800b842 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	4413      	add	r3, r2
 8008ea8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	f023 0307 	bic.w	r3, r3, #7
 8008eb0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	f003 0307 	and.w	r3, r3, #7
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00b      	beq.n	8008ed4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	617b      	str	r3, [r7, #20]
}
 8008ece:	bf00      	nop
 8008ed0:	bf00      	nop
 8008ed2:	e7fd      	b.n	8008ed0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d01f      	beq.n	8008f1a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008eda:	2300      	movs	r3, #0
 8008edc:	61fb      	str	r3, [r7, #28]
 8008ede:	e012      	b.n	8008f06 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	7819      	ldrb	r1, [r3, #0]
 8008ee8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	4413      	add	r3, r2
 8008eee:	3334      	adds	r3, #52	@ 0x34
 8008ef0:	460a      	mov	r2, r1
 8008ef2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	4413      	add	r3, r2
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d006      	beq.n	8008f0e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	3301      	adds	r3, #1
 8008f04:	61fb      	str	r3, [r7, #28]
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	2b0f      	cmp	r3, #15
 8008f0a:	d9e9      	bls.n	8008ee0 <prvInitialiseNewTask+0x66>
 8008f0c:	e000      	b.n	8008f10 <prvInitialiseNewTask+0x96>
			{
				break;
 8008f0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008f18:	e003      	b.n	8008f22 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f24:	2b37      	cmp	r3, #55	@ 0x37
 8008f26:	d901      	bls.n	8008f2c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f28:	2337      	movs	r3, #55	@ 0x37
 8008f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f30:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f36:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f40:	3304      	adds	r3, #4
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fe ff72 	bl	8007e2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4a:	3318      	adds	r3, #24
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7fe ff6d 	bl	8007e2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f5a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f66:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	68f9      	ldr	r1, [r7, #12]
 8008f7a:	69b8      	ldr	r0, [r7, #24]
 8008f7c:	f001 fa3e 	bl	800a3fc <pxPortInitialiseStack>
 8008f80:	4602      	mov	r2, r0
 8008f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d002      	beq.n	8008f92 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f92:	bf00      	nop
 8008f94:	3720      	adds	r7, #32
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
	...

08008f9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008fa4:	f001 fb58 	bl	800a658 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8009060 <prvAddNewTaskToReadyList+0xc4>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	3301      	adds	r3, #1
 8008fae:	4a2c      	ldr	r2, [pc, #176]	@ (8009060 <prvAddNewTaskToReadyList+0xc4>)
 8008fb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8009064 <prvAddNewTaskToReadyList+0xc8>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d109      	bne.n	8008fce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008fba:	4a2a      	ldr	r2, [pc, #168]	@ (8009064 <prvAddNewTaskToReadyList+0xc8>)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008fc0:	4b27      	ldr	r3, [pc, #156]	@ (8009060 <prvAddNewTaskToReadyList+0xc4>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d110      	bne.n	8008fea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008fc8:	f000 fc1e 	bl	8009808 <prvInitialiseTaskLists>
 8008fcc:	e00d      	b.n	8008fea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008fce:	4b26      	ldr	r3, [pc, #152]	@ (8009068 <prvAddNewTaskToReadyList+0xcc>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d109      	bne.n	8008fea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008fd6:	4b23      	ldr	r3, [pc, #140]	@ (8009064 <prvAddNewTaskToReadyList+0xc8>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d802      	bhi.n	8008fea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008fe4:	4a1f      	ldr	r2, [pc, #124]	@ (8009064 <prvAddNewTaskToReadyList+0xc8>)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008fea:	4b20      	ldr	r3, [pc, #128]	@ (800906c <prvAddNewTaskToReadyList+0xd0>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800906c <prvAddNewTaskToReadyList+0xd0>)
 8008ff2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800906c <prvAddNewTaskToReadyList+0xd0>)
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009000:	4b1b      	ldr	r3, [pc, #108]	@ (8009070 <prvAddNewTaskToReadyList+0xd4>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	429a      	cmp	r2, r3
 8009006:	d903      	bls.n	8009010 <prvAddNewTaskToReadyList+0x74>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800900c:	4a18      	ldr	r2, [pc, #96]	@ (8009070 <prvAddNewTaskToReadyList+0xd4>)
 800900e:	6013      	str	r3, [r2, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009014:	4613      	mov	r3, r2
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	4413      	add	r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	4a15      	ldr	r2, [pc, #84]	@ (8009074 <prvAddNewTaskToReadyList+0xd8>)
 800901e:	441a      	add	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3304      	adds	r3, #4
 8009024:	4619      	mov	r1, r3
 8009026:	4610      	mov	r0, r2
 8009028:	f7fe ff0d 	bl	8007e46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800902c:	f001 fb46 	bl	800a6bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009030:	4b0d      	ldr	r3, [pc, #52]	@ (8009068 <prvAddNewTaskToReadyList+0xcc>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00e      	beq.n	8009056 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009038:	4b0a      	ldr	r3, [pc, #40]	@ (8009064 <prvAddNewTaskToReadyList+0xc8>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009042:	429a      	cmp	r2, r3
 8009044:	d207      	bcs.n	8009056 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009046:	4b0c      	ldr	r3, [pc, #48]	@ (8009078 <prvAddNewTaskToReadyList+0xdc>)
 8009048:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009056:	bf00      	nop
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	200015f0 	.word	0x200015f0
 8009064:	2000111c 	.word	0x2000111c
 8009068:	200015fc 	.word	0x200015fc
 800906c:	2000160c 	.word	0x2000160c
 8009070:	200015f8 	.word	0x200015f8
 8009074:	20001120 	.word	0x20001120
 8009078:	e000ed04 	.word	0xe000ed04

0800907c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009084:	2300      	movs	r3, #0
 8009086:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d018      	beq.n	80090c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800908e:	4b14      	ldr	r3, [pc, #80]	@ (80090e0 <vTaskDelay+0x64>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00b      	beq.n	80090ae <vTaskDelay+0x32>
	__asm volatile
 8009096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	60bb      	str	r3, [r7, #8]
}
 80090a8:	bf00      	nop
 80090aa:	bf00      	nop
 80090ac:	e7fd      	b.n	80090aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80090ae:	f000 f883 	bl	80091b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80090b2:	2100      	movs	r1, #0
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 fdf3 	bl	8009ca0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80090ba:	f000 f88b 	bl	80091d4 <xTaskResumeAll>
 80090be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d107      	bne.n	80090d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80090c6:	4b07      	ldr	r3, [pc, #28]	@ (80090e4 <vTaskDelay+0x68>)
 80090c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090cc:	601a      	str	r2, [r3, #0]
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090d6:	bf00      	nop
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	20001618 	.word	0x20001618
 80090e4:	e000ed04 	.word	0xe000ed04

080090e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08a      	sub	sp, #40	@ 0x28
 80090ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80090ee:	2300      	movs	r3, #0
 80090f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80090f2:	2300      	movs	r3, #0
 80090f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80090f6:	463a      	mov	r2, r7
 80090f8:	1d39      	adds	r1, r7, #4
 80090fa:	f107 0308 	add.w	r3, r7, #8
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe fe40 	bl	8007d84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	68ba      	ldr	r2, [r7, #8]
 800910a:	9202      	str	r2, [sp, #8]
 800910c:	9301      	str	r3, [sp, #4]
 800910e:	2300      	movs	r3, #0
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	2300      	movs	r3, #0
 8009114:	460a      	mov	r2, r1
 8009116:	4922      	ldr	r1, [pc, #136]	@ (80091a0 <vTaskStartScheduler+0xb8>)
 8009118:	4822      	ldr	r0, [pc, #136]	@ (80091a4 <vTaskStartScheduler+0xbc>)
 800911a:	f7ff fe09 	bl	8008d30 <xTaskCreateStatic>
 800911e:	4603      	mov	r3, r0
 8009120:	4a21      	ldr	r2, [pc, #132]	@ (80091a8 <vTaskStartScheduler+0xc0>)
 8009122:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009124:	4b20      	ldr	r3, [pc, #128]	@ (80091a8 <vTaskStartScheduler+0xc0>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d002      	beq.n	8009132 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800912c:	2301      	movs	r3, #1
 800912e:	617b      	str	r3, [r7, #20]
 8009130:	e001      	b.n	8009136 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009132:	2300      	movs	r3, #0
 8009134:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d102      	bne.n	8009142 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800913c:	f000 fe04 	bl	8009d48 <xTimerCreateTimerTask>
 8009140:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d116      	bne.n	8009176 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800914c:	f383 8811 	msr	BASEPRI, r3
 8009150:	f3bf 8f6f 	isb	sy
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	613b      	str	r3, [r7, #16]
}
 800915a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800915c:	4b13      	ldr	r3, [pc, #76]	@ (80091ac <vTaskStartScheduler+0xc4>)
 800915e:	f04f 32ff 	mov.w	r2, #4294967295
 8009162:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009164:	4b12      	ldr	r3, [pc, #72]	@ (80091b0 <vTaskStartScheduler+0xc8>)
 8009166:	2201      	movs	r2, #1
 8009168:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800916a:	4b12      	ldr	r3, [pc, #72]	@ (80091b4 <vTaskStartScheduler+0xcc>)
 800916c:	2200      	movs	r2, #0
 800916e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009170:	f001 f9ce 	bl	800a510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009174:	e00f      	b.n	8009196 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800917c:	d10b      	bne.n	8009196 <vTaskStartScheduler+0xae>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	60fb      	str	r3, [r7, #12]
}
 8009190:	bf00      	nop
 8009192:	bf00      	nop
 8009194:	e7fd      	b.n	8009192 <vTaskStartScheduler+0xaa>
}
 8009196:	bf00      	nop
 8009198:	3718      	adds	r7, #24
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	0800d798 	.word	0x0800d798
 80091a4:	080097d9 	.word	0x080097d9
 80091a8:	20001614 	.word	0x20001614
 80091ac:	20001610 	.word	0x20001610
 80091b0:	200015fc 	.word	0x200015fc
 80091b4:	200015f4 	.word	0x200015f4

080091b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80091b8:	b480      	push	{r7}
 80091ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80091bc:	4b04      	ldr	r3, [pc, #16]	@ (80091d0 <vTaskSuspendAll+0x18>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3301      	adds	r3, #1
 80091c2:	4a03      	ldr	r2, [pc, #12]	@ (80091d0 <vTaskSuspendAll+0x18>)
 80091c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80091c6:	bf00      	nop
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	20001618 	.word	0x20001618

080091d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80091da:	2300      	movs	r3, #0
 80091dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80091de:	2300      	movs	r3, #0
 80091e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80091e2:	4b42      	ldr	r3, [pc, #264]	@ (80092ec <xTaskResumeAll+0x118>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10b      	bne.n	8009202 <xTaskResumeAll+0x2e>
	__asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	603b      	str	r3, [r7, #0]
}
 80091fc:	bf00      	nop
 80091fe:	bf00      	nop
 8009200:	e7fd      	b.n	80091fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009202:	f001 fa29 	bl	800a658 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009206:	4b39      	ldr	r3, [pc, #228]	@ (80092ec <xTaskResumeAll+0x118>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3b01      	subs	r3, #1
 800920c:	4a37      	ldr	r2, [pc, #220]	@ (80092ec <xTaskResumeAll+0x118>)
 800920e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009210:	4b36      	ldr	r3, [pc, #216]	@ (80092ec <xTaskResumeAll+0x118>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d162      	bne.n	80092de <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009218:	4b35      	ldr	r3, [pc, #212]	@ (80092f0 <xTaskResumeAll+0x11c>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d05e      	beq.n	80092de <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009220:	e02f      	b.n	8009282 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009222:	4b34      	ldr	r3, [pc, #208]	@ (80092f4 <xTaskResumeAll+0x120>)
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	3318      	adds	r3, #24
 800922e:	4618      	mov	r0, r3
 8009230:	f7fe fe66 	bl	8007f00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	3304      	adds	r3, #4
 8009238:	4618      	mov	r0, r3
 800923a:	f7fe fe61 	bl	8007f00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009242:	4b2d      	ldr	r3, [pc, #180]	@ (80092f8 <xTaskResumeAll+0x124>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	429a      	cmp	r2, r3
 8009248:	d903      	bls.n	8009252 <xTaskResumeAll+0x7e>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800924e:	4a2a      	ldr	r2, [pc, #168]	@ (80092f8 <xTaskResumeAll+0x124>)
 8009250:	6013      	str	r3, [r2, #0]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009256:	4613      	mov	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4413      	add	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4a27      	ldr	r2, [pc, #156]	@ (80092fc <xTaskResumeAll+0x128>)
 8009260:	441a      	add	r2, r3
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	3304      	adds	r3, #4
 8009266:	4619      	mov	r1, r3
 8009268:	4610      	mov	r0, r2
 800926a:	f7fe fdec 	bl	8007e46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009272:	4b23      	ldr	r3, [pc, #140]	@ (8009300 <xTaskResumeAll+0x12c>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009278:	429a      	cmp	r2, r3
 800927a:	d302      	bcc.n	8009282 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800927c:	4b21      	ldr	r3, [pc, #132]	@ (8009304 <xTaskResumeAll+0x130>)
 800927e:	2201      	movs	r2, #1
 8009280:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009282:	4b1c      	ldr	r3, [pc, #112]	@ (80092f4 <xTaskResumeAll+0x120>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1cb      	bne.n	8009222 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009290:	f000 fb58 	bl	8009944 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009294:	4b1c      	ldr	r3, [pc, #112]	@ (8009308 <xTaskResumeAll+0x134>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d010      	beq.n	80092c2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092a0:	f000 f846 	bl	8009330 <xTaskIncrementTick>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d002      	beq.n	80092b0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80092aa:	4b16      	ldr	r3, [pc, #88]	@ (8009304 <xTaskResumeAll+0x130>)
 80092ac:	2201      	movs	r2, #1
 80092ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	3b01      	subs	r3, #1
 80092b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1f1      	bne.n	80092a0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80092bc:	4b12      	ldr	r3, [pc, #72]	@ (8009308 <xTaskResumeAll+0x134>)
 80092be:	2200      	movs	r2, #0
 80092c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80092c2:	4b10      	ldr	r3, [pc, #64]	@ (8009304 <xTaskResumeAll+0x130>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d009      	beq.n	80092de <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80092ca:	2301      	movs	r3, #1
 80092cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80092ce:	4b0f      	ldr	r3, [pc, #60]	@ (800930c <xTaskResumeAll+0x138>)
 80092d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092de:	f001 f9ed 	bl	800a6bc <vPortExitCritical>

	return xAlreadyYielded;
 80092e2:	68bb      	ldr	r3, [r7, #8]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	20001618 	.word	0x20001618
 80092f0:	200015f0 	.word	0x200015f0
 80092f4:	200015b0 	.word	0x200015b0
 80092f8:	200015f8 	.word	0x200015f8
 80092fc:	20001120 	.word	0x20001120
 8009300:	2000111c 	.word	0x2000111c
 8009304:	20001604 	.word	0x20001604
 8009308:	20001600 	.word	0x20001600
 800930c:	e000ed04 	.word	0xe000ed04

08009310 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009316:	4b05      	ldr	r3, [pc, #20]	@ (800932c <xTaskGetTickCount+0x1c>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800931c:	687b      	ldr	r3, [r7, #4]
}
 800931e:	4618      	mov	r0, r3
 8009320:	370c      	adds	r7, #12
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	200015f4 	.word	0x200015f4

08009330 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009336:	2300      	movs	r3, #0
 8009338:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800933a:	4b4f      	ldr	r3, [pc, #316]	@ (8009478 <xTaskIncrementTick+0x148>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	f040 8090 	bne.w	8009464 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009344:	4b4d      	ldr	r3, [pc, #308]	@ (800947c <xTaskIncrementTick+0x14c>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3301      	adds	r3, #1
 800934a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800934c:	4a4b      	ldr	r2, [pc, #300]	@ (800947c <xTaskIncrementTick+0x14c>)
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d121      	bne.n	800939c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009358:	4b49      	ldr	r3, [pc, #292]	@ (8009480 <xTaskIncrementTick+0x150>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00b      	beq.n	800937a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009366:	f383 8811 	msr	BASEPRI, r3
 800936a:	f3bf 8f6f 	isb	sy
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	603b      	str	r3, [r7, #0]
}
 8009374:	bf00      	nop
 8009376:	bf00      	nop
 8009378:	e7fd      	b.n	8009376 <xTaskIncrementTick+0x46>
 800937a:	4b41      	ldr	r3, [pc, #260]	@ (8009480 <xTaskIncrementTick+0x150>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	60fb      	str	r3, [r7, #12]
 8009380:	4b40      	ldr	r3, [pc, #256]	@ (8009484 <xTaskIncrementTick+0x154>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a3e      	ldr	r2, [pc, #248]	@ (8009480 <xTaskIncrementTick+0x150>)
 8009386:	6013      	str	r3, [r2, #0]
 8009388:	4a3e      	ldr	r2, [pc, #248]	@ (8009484 <xTaskIncrementTick+0x154>)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6013      	str	r3, [r2, #0]
 800938e:	4b3e      	ldr	r3, [pc, #248]	@ (8009488 <xTaskIncrementTick+0x158>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	3301      	adds	r3, #1
 8009394:	4a3c      	ldr	r2, [pc, #240]	@ (8009488 <xTaskIncrementTick+0x158>)
 8009396:	6013      	str	r3, [r2, #0]
 8009398:	f000 fad4 	bl	8009944 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800939c:	4b3b      	ldr	r3, [pc, #236]	@ (800948c <xTaskIncrementTick+0x15c>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d349      	bcc.n	800943a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093a6:	4b36      	ldr	r3, [pc, #216]	@ (8009480 <xTaskIncrementTick+0x150>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d104      	bne.n	80093ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093b0:	4b36      	ldr	r3, [pc, #216]	@ (800948c <xTaskIncrementTick+0x15c>)
 80093b2:	f04f 32ff 	mov.w	r2, #4294967295
 80093b6:	601a      	str	r2, [r3, #0]
					break;
 80093b8:	e03f      	b.n	800943a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093ba:	4b31      	ldr	r3, [pc, #196]	@ (8009480 <xTaskIncrementTick+0x150>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80093ca:	693a      	ldr	r2, [r7, #16]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d203      	bcs.n	80093da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80093d2:	4a2e      	ldr	r2, [pc, #184]	@ (800948c <xTaskIncrementTick+0x15c>)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80093d8:	e02f      	b.n	800943a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	3304      	adds	r3, #4
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fe fd8e 	bl	8007f00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d004      	beq.n	80093f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	3318      	adds	r3, #24
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7fe fd85 	bl	8007f00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093fa:	4b25      	ldr	r3, [pc, #148]	@ (8009490 <xTaskIncrementTick+0x160>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d903      	bls.n	800940a <xTaskIncrementTick+0xda>
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009406:	4a22      	ldr	r2, [pc, #136]	@ (8009490 <xTaskIncrementTick+0x160>)
 8009408:	6013      	str	r3, [r2, #0]
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800940e:	4613      	mov	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	4413      	add	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	4a1f      	ldr	r2, [pc, #124]	@ (8009494 <xTaskIncrementTick+0x164>)
 8009418:	441a      	add	r2, r3
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	3304      	adds	r3, #4
 800941e:	4619      	mov	r1, r3
 8009420:	4610      	mov	r0, r2
 8009422:	f7fe fd10 	bl	8007e46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800942a:	4b1b      	ldr	r3, [pc, #108]	@ (8009498 <xTaskIncrementTick+0x168>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009430:	429a      	cmp	r2, r3
 8009432:	d3b8      	bcc.n	80093a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009434:	2301      	movs	r3, #1
 8009436:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009438:	e7b5      	b.n	80093a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800943a:	4b17      	ldr	r3, [pc, #92]	@ (8009498 <xTaskIncrementTick+0x168>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009440:	4914      	ldr	r1, [pc, #80]	@ (8009494 <xTaskIncrementTick+0x164>)
 8009442:	4613      	mov	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4413      	add	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	440b      	add	r3, r1
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b01      	cmp	r3, #1
 8009450:	d901      	bls.n	8009456 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009452:	2301      	movs	r3, #1
 8009454:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009456:	4b11      	ldr	r3, [pc, #68]	@ (800949c <xTaskIncrementTick+0x16c>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d007      	beq.n	800946e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800945e:	2301      	movs	r3, #1
 8009460:	617b      	str	r3, [r7, #20]
 8009462:	e004      	b.n	800946e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009464:	4b0e      	ldr	r3, [pc, #56]	@ (80094a0 <xTaskIncrementTick+0x170>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	3301      	adds	r3, #1
 800946a:	4a0d      	ldr	r2, [pc, #52]	@ (80094a0 <xTaskIncrementTick+0x170>)
 800946c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800946e:	697b      	ldr	r3, [r7, #20]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3718      	adds	r7, #24
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	20001618 	.word	0x20001618
 800947c:	200015f4 	.word	0x200015f4
 8009480:	200015a8 	.word	0x200015a8
 8009484:	200015ac 	.word	0x200015ac
 8009488:	20001608 	.word	0x20001608
 800948c:	20001610 	.word	0x20001610
 8009490:	200015f8 	.word	0x200015f8
 8009494:	20001120 	.word	0x20001120
 8009498:	2000111c 	.word	0x2000111c
 800949c:	20001604 	.word	0x20001604
 80094a0:	20001600 	.word	0x20001600

080094a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094aa:	4b28      	ldr	r3, [pc, #160]	@ (800954c <vTaskSwitchContext+0xa8>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d003      	beq.n	80094ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80094b2:	4b27      	ldr	r3, [pc, #156]	@ (8009550 <vTaskSwitchContext+0xac>)
 80094b4:	2201      	movs	r2, #1
 80094b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80094b8:	e042      	b.n	8009540 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80094ba:	4b25      	ldr	r3, [pc, #148]	@ (8009550 <vTaskSwitchContext+0xac>)
 80094bc:	2200      	movs	r2, #0
 80094be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094c0:	4b24      	ldr	r3, [pc, #144]	@ (8009554 <vTaskSwitchContext+0xb0>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	60fb      	str	r3, [r7, #12]
 80094c6:	e011      	b.n	80094ec <vTaskSwitchContext+0x48>
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10b      	bne.n	80094e6 <vTaskSwitchContext+0x42>
	__asm volatile
 80094ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d2:	f383 8811 	msr	BASEPRI, r3
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	607b      	str	r3, [r7, #4]
}
 80094e0:	bf00      	nop
 80094e2:	bf00      	nop
 80094e4:	e7fd      	b.n	80094e2 <vTaskSwitchContext+0x3e>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	3b01      	subs	r3, #1
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	491a      	ldr	r1, [pc, #104]	@ (8009558 <vTaskSwitchContext+0xb4>)
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	4613      	mov	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	440b      	add	r3, r1
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d0e3      	beq.n	80094c8 <vTaskSwitchContext+0x24>
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	4613      	mov	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4413      	add	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4a13      	ldr	r2, [pc, #76]	@ (8009558 <vTaskSwitchContext+0xb4>)
 800950c:	4413      	add	r3, r2
 800950e:	60bb      	str	r3, [r7, #8]
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	685a      	ldr	r2, [r3, #4]
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	605a      	str	r2, [r3, #4]
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	685a      	ldr	r2, [r3, #4]
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	3308      	adds	r3, #8
 8009522:	429a      	cmp	r2, r3
 8009524:	d104      	bne.n	8009530 <vTaskSwitchContext+0x8c>
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	605a      	str	r2, [r3, #4]
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	4a09      	ldr	r2, [pc, #36]	@ (800955c <vTaskSwitchContext+0xb8>)
 8009538:	6013      	str	r3, [r2, #0]
 800953a:	4a06      	ldr	r2, [pc, #24]	@ (8009554 <vTaskSwitchContext+0xb0>)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6013      	str	r3, [r2, #0]
}
 8009540:	bf00      	nop
 8009542:	3714      	adds	r7, #20
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr
 800954c:	20001618 	.word	0x20001618
 8009550:	20001604 	.word	0x20001604
 8009554:	200015f8 	.word	0x200015f8
 8009558:	20001120 	.word	0x20001120
 800955c:	2000111c 	.word	0x2000111c

08009560 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10b      	bne.n	8009588 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009574:	f383 8811 	msr	BASEPRI, r3
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	60fb      	str	r3, [r7, #12]
}
 8009582:	bf00      	nop
 8009584:	bf00      	nop
 8009586:	e7fd      	b.n	8009584 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009588:	4b07      	ldr	r3, [pc, #28]	@ (80095a8 <vTaskPlaceOnEventList+0x48>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	3318      	adds	r3, #24
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7fe fc7c 	bl	8007e8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009596:	2101      	movs	r1, #1
 8009598:	6838      	ldr	r0, [r7, #0]
 800959a:	f000 fb81 	bl	8009ca0 <prvAddCurrentTaskToDelayedList>
}
 800959e:	bf00      	nop
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	2000111c 	.word	0x2000111c

080095ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d10b      	bne.n	80095d6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80095be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c2:	f383 8811 	msr	BASEPRI, r3
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	617b      	str	r3, [r7, #20]
}
 80095d0:	bf00      	nop
 80095d2:	bf00      	nop
 80095d4:	e7fd      	b.n	80095d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095d6:	4b0a      	ldr	r3, [pc, #40]	@ (8009600 <vTaskPlaceOnEventListRestricted+0x54>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	3318      	adds	r3, #24
 80095dc:	4619      	mov	r1, r3
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f7fe fc31 	bl	8007e46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d002      	beq.n	80095f0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80095ea:	f04f 33ff 	mov.w	r3, #4294967295
 80095ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80095f0:	6879      	ldr	r1, [r7, #4]
 80095f2:	68b8      	ldr	r0, [r7, #8]
 80095f4:	f000 fb54 	bl	8009ca0 <prvAddCurrentTaskToDelayedList>
	}
 80095f8:	bf00      	nop
 80095fa:	3718      	adds	r7, #24
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	2000111c 	.word	0x2000111c

08009604 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10b      	bne.n	8009632 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800961a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800961e:	f383 8811 	msr	BASEPRI, r3
 8009622:	f3bf 8f6f 	isb	sy
 8009626:	f3bf 8f4f 	dsb	sy
 800962a:	60fb      	str	r3, [r7, #12]
}
 800962c:	bf00      	nop
 800962e:	bf00      	nop
 8009630:	e7fd      	b.n	800962e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	3318      	adds	r3, #24
 8009636:	4618      	mov	r0, r3
 8009638:	f7fe fc62 	bl	8007f00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800963c:	4b1d      	ldr	r3, [pc, #116]	@ (80096b4 <xTaskRemoveFromEventList+0xb0>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d11d      	bne.n	8009680 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	3304      	adds	r3, #4
 8009648:	4618      	mov	r0, r3
 800964a:	f7fe fc59 	bl	8007f00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009652:	4b19      	ldr	r3, [pc, #100]	@ (80096b8 <xTaskRemoveFromEventList+0xb4>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	429a      	cmp	r2, r3
 8009658:	d903      	bls.n	8009662 <xTaskRemoveFromEventList+0x5e>
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800965e:	4a16      	ldr	r2, [pc, #88]	@ (80096b8 <xTaskRemoveFromEventList+0xb4>)
 8009660:	6013      	str	r3, [r2, #0]
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009666:	4613      	mov	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	4413      	add	r3, r2
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4a13      	ldr	r2, [pc, #76]	@ (80096bc <xTaskRemoveFromEventList+0xb8>)
 8009670:	441a      	add	r2, r3
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	3304      	adds	r3, #4
 8009676:	4619      	mov	r1, r3
 8009678:	4610      	mov	r0, r2
 800967a:	f7fe fbe4 	bl	8007e46 <vListInsertEnd>
 800967e:	e005      	b.n	800968c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	3318      	adds	r3, #24
 8009684:	4619      	mov	r1, r3
 8009686:	480e      	ldr	r0, [pc, #56]	@ (80096c0 <xTaskRemoveFromEventList+0xbc>)
 8009688:	f7fe fbdd 	bl	8007e46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009690:	4b0c      	ldr	r3, [pc, #48]	@ (80096c4 <xTaskRemoveFromEventList+0xc0>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009696:	429a      	cmp	r2, r3
 8009698:	d905      	bls.n	80096a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800969a:	2301      	movs	r3, #1
 800969c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800969e:	4b0a      	ldr	r3, [pc, #40]	@ (80096c8 <xTaskRemoveFromEventList+0xc4>)
 80096a0:	2201      	movs	r2, #1
 80096a2:	601a      	str	r2, [r3, #0]
 80096a4:	e001      	b.n	80096aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80096a6:	2300      	movs	r3, #0
 80096a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80096aa:	697b      	ldr	r3, [r7, #20]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3718      	adds	r7, #24
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	20001618 	.word	0x20001618
 80096b8:	200015f8 	.word	0x200015f8
 80096bc:	20001120 	.word	0x20001120
 80096c0:	200015b0 	.word	0x200015b0
 80096c4:	2000111c 	.word	0x2000111c
 80096c8:	20001604 	.word	0x20001604

080096cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80096d4:	4b06      	ldr	r3, [pc, #24]	@ (80096f0 <vTaskInternalSetTimeOutState+0x24>)
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80096dc:	4b05      	ldr	r3, [pc, #20]	@ (80096f4 <vTaskInternalSetTimeOutState+0x28>)
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	605a      	str	r2, [r3, #4]
}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	20001608 	.word	0x20001608
 80096f4:	200015f4 	.word	0x200015f4

080096f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b088      	sub	sp, #32
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10b      	bne.n	8009720 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970c:	f383 8811 	msr	BASEPRI, r3
 8009710:	f3bf 8f6f 	isb	sy
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	613b      	str	r3, [r7, #16]
}
 800971a:	bf00      	nop
 800971c:	bf00      	nop
 800971e:	e7fd      	b.n	800971c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d10b      	bne.n	800973e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800972a:	f383 8811 	msr	BASEPRI, r3
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f3bf 8f4f 	dsb	sy
 8009736:	60fb      	str	r3, [r7, #12]
}
 8009738:	bf00      	nop
 800973a:	bf00      	nop
 800973c:	e7fd      	b.n	800973a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800973e:	f000 ff8b 	bl	800a658 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009742:	4b1d      	ldr	r3, [pc, #116]	@ (80097b8 <xTaskCheckForTimeOut+0xc0>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	69ba      	ldr	r2, [r7, #24]
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975a:	d102      	bne.n	8009762 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800975c:	2300      	movs	r3, #0
 800975e:	61fb      	str	r3, [r7, #28]
 8009760:	e023      	b.n	80097aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	4b15      	ldr	r3, [pc, #84]	@ (80097bc <xTaskCheckForTimeOut+0xc4>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	429a      	cmp	r2, r3
 800976c:	d007      	beq.n	800977e <xTaskCheckForTimeOut+0x86>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	69ba      	ldr	r2, [r7, #24]
 8009774:	429a      	cmp	r2, r3
 8009776:	d302      	bcc.n	800977e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009778:	2301      	movs	r3, #1
 800977a:	61fb      	str	r3, [r7, #28]
 800977c:	e015      	b.n	80097aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	429a      	cmp	r2, r3
 8009786:	d20b      	bcs.n	80097a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	1ad2      	subs	r2, r2, r3
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f7ff ff99 	bl	80096cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800979a:	2300      	movs	r3, #0
 800979c:	61fb      	str	r3, [r7, #28]
 800979e:	e004      	b.n	80097aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	2200      	movs	r2, #0
 80097a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80097a6:	2301      	movs	r3, #1
 80097a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80097aa:	f000 ff87 	bl	800a6bc <vPortExitCritical>

	return xReturn;
 80097ae:	69fb      	ldr	r3, [r7, #28]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3720      	adds	r7, #32
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	200015f4 	.word	0x200015f4
 80097bc:	20001608 	.word	0x20001608

080097c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80097c0:	b480      	push	{r7}
 80097c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80097c4:	4b03      	ldr	r3, [pc, #12]	@ (80097d4 <vTaskMissedYield+0x14>)
 80097c6:	2201      	movs	r2, #1
 80097c8:	601a      	str	r2, [r3, #0]
}
 80097ca:	bf00      	nop
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr
 80097d4:	20001604 	.word	0x20001604

080097d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80097e0:	f000 f852 	bl	8009888 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80097e4:	4b06      	ldr	r3, [pc, #24]	@ (8009800 <prvIdleTask+0x28>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d9f9      	bls.n	80097e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80097ec:	4b05      	ldr	r3, [pc, #20]	@ (8009804 <prvIdleTask+0x2c>)
 80097ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80097fc:	e7f0      	b.n	80097e0 <prvIdleTask+0x8>
 80097fe:	bf00      	nop
 8009800:	20001120 	.word	0x20001120
 8009804:	e000ed04 	.word	0xe000ed04

08009808 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800980e:	2300      	movs	r3, #0
 8009810:	607b      	str	r3, [r7, #4]
 8009812:	e00c      	b.n	800982e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	4613      	mov	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4a12      	ldr	r2, [pc, #72]	@ (8009868 <prvInitialiseTaskLists+0x60>)
 8009820:	4413      	add	r3, r2
 8009822:	4618      	mov	r0, r3
 8009824:	f7fe fae2 	bl	8007dec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	3301      	adds	r3, #1
 800982c:	607b      	str	r3, [r7, #4]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2b37      	cmp	r3, #55	@ 0x37
 8009832:	d9ef      	bls.n	8009814 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009834:	480d      	ldr	r0, [pc, #52]	@ (800986c <prvInitialiseTaskLists+0x64>)
 8009836:	f7fe fad9 	bl	8007dec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800983a:	480d      	ldr	r0, [pc, #52]	@ (8009870 <prvInitialiseTaskLists+0x68>)
 800983c:	f7fe fad6 	bl	8007dec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009840:	480c      	ldr	r0, [pc, #48]	@ (8009874 <prvInitialiseTaskLists+0x6c>)
 8009842:	f7fe fad3 	bl	8007dec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009846:	480c      	ldr	r0, [pc, #48]	@ (8009878 <prvInitialiseTaskLists+0x70>)
 8009848:	f7fe fad0 	bl	8007dec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800984c:	480b      	ldr	r0, [pc, #44]	@ (800987c <prvInitialiseTaskLists+0x74>)
 800984e:	f7fe facd 	bl	8007dec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009852:	4b0b      	ldr	r3, [pc, #44]	@ (8009880 <prvInitialiseTaskLists+0x78>)
 8009854:	4a05      	ldr	r2, [pc, #20]	@ (800986c <prvInitialiseTaskLists+0x64>)
 8009856:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009858:	4b0a      	ldr	r3, [pc, #40]	@ (8009884 <prvInitialiseTaskLists+0x7c>)
 800985a:	4a05      	ldr	r2, [pc, #20]	@ (8009870 <prvInitialiseTaskLists+0x68>)
 800985c:	601a      	str	r2, [r3, #0]
}
 800985e:	bf00      	nop
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	20001120 	.word	0x20001120
 800986c:	20001580 	.word	0x20001580
 8009870:	20001594 	.word	0x20001594
 8009874:	200015b0 	.word	0x200015b0
 8009878:	200015c4 	.word	0x200015c4
 800987c:	200015dc 	.word	0x200015dc
 8009880:	200015a8 	.word	0x200015a8
 8009884:	200015ac 	.word	0x200015ac

08009888 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800988e:	e019      	b.n	80098c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009890:	f000 fee2 	bl	800a658 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009894:	4b10      	ldr	r3, [pc, #64]	@ (80098d8 <prvCheckTasksWaitingTermination+0x50>)
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	3304      	adds	r3, #4
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7fe fb2d 	bl	8007f00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80098a6:	4b0d      	ldr	r3, [pc, #52]	@ (80098dc <prvCheckTasksWaitingTermination+0x54>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3b01      	subs	r3, #1
 80098ac:	4a0b      	ldr	r2, [pc, #44]	@ (80098dc <prvCheckTasksWaitingTermination+0x54>)
 80098ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80098b0:	4b0b      	ldr	r3, [pc, #44]	@ (80098e0 <prvCheckTasksWaitingTermination+0x58>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	3b01      	subs	r3, #1
 80098b6:	4a0a      	ldr	r2, [pc, #40]	@ (80098e0 <prvCheckTasksWaitingTermination+0x58>)
 80098b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80098ba:	f000 feff 	bl	800a6bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f810 	bl	80098e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098c4:	4b06      	ldr	r3, [pc, #24]	@ (80098e0 <prvCheckTasksWaitingTermination+0x58>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1e1      	bne.n	8009890 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80098cc:	bf00      	nop
 80098ce:	bf00      	nop
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	200015c4 	.word	0x200015c4
 80098dc:	200015f0 	.word	0x200015f0
 80098e0:	200015d8 	.word	0x200015d8

080098e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d108      	bne.n	8009908 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098fa:	4618      	mov	r0, r3
 80098fc:	f001 f89c 	bl	800aa38 <vPortFree>
				vPortFree( pxTCB );
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f001 f899 	bl	800aa38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009906:	e019      	b.n	800993c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800990e:	2b01      	cmp	r3, #1
 8009910:	d103      	bne.n	800991a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f001 f890 	bl	800aa38 <vPortFree>
	}
 8009918:	e010      	b.n	800993c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009920:	2b02      	cmp	r3, #2
 8009922:	d00b      	beq.n	800993c <prvDeleteTCB+0x58>
	__asm volatile
 8009924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009928:	f383 8811 	msr	BASEPRI, r3
 800992c:	f3bf 8f6f 	isb	sy
 8009930:	f3bf 8f4f 	dsb	sy
 8009934:	60fb      	str	r3, [r7, #12]
}
 8009936:	bf00      	nop
 8009938:	bf00      	nop
 800993a:	e7fd      	b.n	8009938 <prvDeleteTCB+0x54>
	}
 800993c:	bf00      	nop
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800994a:	4b0c      	ldr	r3, [pc, #48]	@ (800997c <prvResetNextTaskUnblockTime+0x38>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d104      	bne.n	800995e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009954:	4b0a      	ldr	r3, [pc, #40]	@ (8009980 <prvResetNextTaskUnblockTime+0x3c>)
 8009956:	f04f 32ff 	mov.w	r2, #4294967295
 800995a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800995c:	e008      	b.n	8009970 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800995e:	4b07      	ldr	r3, [pc, #28]	@ (800997c <prvResetNextTaskUnblockTime+0x38>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	4a04      	ldr	r2, [pc, #16]	@ (8009980 <prvResetNextTaskUnblockTime+0x3c>)
 800996e:	6013      	str	r3, [r2, #0]
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	200015a8 	.word	0x200015a8
 8009980:	20001610 	.word	0x20001610

08009984 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800998a:	4b0b      	ldr	r3, [pc, #44]	@ (80099b8 <xTaskGetSchedulerState+0x34>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d102      	bne.n	8009998 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009992:	2301      	movs	r3, #1
 8009994:	607b      	str	r3, [r7, #4]
 8009996:	e008      	b.n	80099aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009998:	4b08      	ldr	r3, [pc, #32]	@ (80099bc <xTaskGetSchedulerState+0x38>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d102      	bne.n	80099a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80099a0:	2302      	movs	r3, #2
 80099a2:	607b      	str	r3, [r7, #4]
 80099a4:	e001      	b.n	80099aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80099a6:	2300      	movs	r3, #0
 80099a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80099aa:	687b      	ldr	r3, [r7, #4]
	}
 80099ac:	4618      	mov	r0, r3
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	200015fc 	.word	0x200015fc
 80099bc:	20001618 	.word	0x20001618

080099c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80099cc:	2300      	movs	r3, #0
 80099ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d051      	beq.n	8009a7a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099da:	4b2a      	ldr	r3, [pc, #168]	@ (8009a84 <xTaskPriorityInherit+0xc4>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d241      	bcs.n	8009a68 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	db06      	blt.n	80099fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099ec:	4b25      	ldr	r3, [pc, #148]	@ (8009a84 <xTaskPriorityInherit+0xc4>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	6959      	ldr	r1, [r3, #20]
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a02:	4613      	mov	r3, r2
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	4413      	add	r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4a1f      	ldr	r2, [pc, #124]	@ (8009a88 <xTaskPriorityInherit+0xc8>)
 8009a0c:	4413      	add	r3, r2
 8009a0e:	4299      	cmp	r1, r3
 8009a10:	d122      	bne.n	8009a58 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	3304      	adds	r3, #4
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fe fa72 	bl	8007f00 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a1c:	4b19      	ldr	r3, [pc, #100]	@ (8009a84 <xTaskPriorityInherit+0xc4>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a2a:	4b18      	ldr	r3, [pc, #96]	@ (8009a8c <xTaskPriorityInherit+0xcc>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d903      	bls.n	8009a3a <xTaskPriorityInherit+0x7a>
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a36:	4a15      	ldr	r2, [pc, #84]	@ (8009a8c <xTaskPriorityInherit+0xcc>)
 8009a38:	6013      	str	r3, [r2, #0]
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a3e:	4613      	mov	r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	4413      	add	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	4a10      	ldr	r2, [pc, #64]	@ (8009a88 <xTaskPriorityInherit+0xc8>)
 8009a48:	441a      	add	r2, r3
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	3304      	adds	r3, #4
 8009a4e:	4619      	mov	r1, r3
 8009a50:	4610      	mov	r0, r2
 8009a52:	f7fe f9f8 	bl	8007e46 <vListInsertEnd>
 8009a56:	e004      	b.n	8009a62 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a58:	4b0a      	ldr	r3, [pc, #40]	@ (8009a84 <xTaskPriorityInherit+0xc4>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009a62:	2301      	movs	r3, #1
 8009a64:	60fb      	str	r3, [r7, #12]
 8009a66:	e008      	b.n	8009a7a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a6c:	4b05      	ldr	r3, [pc, #20]	@ (8009a84 <xTaskPriorityInherit+0xc4>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d201      	bcs.n	8009a7a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009a76:	2301      	movs	r3, #1
 8009a78:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
	}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3710      	adds	r7, #16
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	2000111c 	.word	0x2000111c
 8009a88:	20001120 	.word	0x20001120
 8009a8c:	200015f8 	.word	0x200015f8

08009a90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d058      	beq.n	8009b58 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8009b64 <xTaskPriorityDisinherit+0xd4>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	693a      	ldr	r2, [r7, #16]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d00b      	beq.n	8009ac8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab4:	f383 8811 	msr	BASEPRI, r3
 8009ab8:	f3bf 8f6f 	isb	sy
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	60fb      	str	r3, [r7, #12]
}
 8009ac2:	bf00      	nop
 8009ac4:	bf00      	nop
 8009ac6:	e7fd      	b.n	8009ac4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10b      	bne.n	8009ae8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	60bb      	str	r3, [r7, #8]
}
 8009ae2:	bf00      	nop
 8009ae4:	bf00      	nop
 8009ae6:	e7fd      	b.n	8009ae4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009aec:	1e5a      	subs	r2, r3, #1
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d02c      	beq.n	8009b58 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d128      	bne.n	8009b58 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	3304      	adds	r3, #4
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fe f9f8 	bl	8007f00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b1c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b28:	4b0f      	ldr	r3, [pc, #60]	@ (8009b68 <xTaskPriorityDisinherit+0xd8>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d903      	bls.n	8009b38 <xTaskPriorityDisinherit+0xa8>
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b34:	4a0c      	ldr	r2, [pc, #48]	@ (8009b68 <xTaskPriorityDisinherit+0xd8>)
 8009b36:	6013      	str	r3, [r2, #0]
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	4413      	add	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4a09      	ldr	r2, [pc, #36]	@ (8009b6c <xTaskPriorityDisinherit+0xdc>)
 8009b46:	441a      	add	r2, r3
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	4610      	mov	r0, r2
 8009b50:	f7fe f979 	bl	8007e46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b54:	2301      	movs	r3, #1
 8009b56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b58:	697b      	ldr	r3, [r7, #20]
	}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3718      	adds	r7, #24
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	2000111c 	.word	0x2000111c
 8009b68:	200015f8 	.word	0x200015f8
 8009b6c:	20001120 	.word	0x20001120

08009b70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b088      	sub	sp, #32
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d06c      	beq.n	8009c62 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10b      	bne.n	8009ba8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	60fb      	str	r3, [r7, #12]
}
 8009ba2:	bf00      	nop
 8009ba4:	bf00      	nop
 8009ba6:	e7fd      	b.n	8009ba4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bac:	683a      	ldr	r2, [r7, #0]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d902      	bls.n	8009bb8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	61fb      	str	r3, [r7, #28]
 8009bb6:	e002      	b.n	8009bbe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bbc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bc2:	69fa      	ldr	r2, [r7, #28]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d04c      	beq.n	8009c62 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bcc:	697a      	ldr	r2, [r7, #20]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d147      	bne.n	8009c62 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009bd2:	4b26      	ldr	r3, [pc, #152]	@ (8009c6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	69ba      	ldr	r2, [r7, #24]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d10b      	bne.n	8009bf4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	60bb      	str	r3, [r7, #8]
}
 8009bee:	bf00      	nop
 8009bf0:	bf00      	nop
 8009bf2:	e7fd      	b.n	8009bf0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	69fa      	ldr	r2, [r7, #28]
 8009bfe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	db04      	blt.n	8009c12 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	6959      	ldr	r1, [r3, #20]
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	4613      	mov	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	4413      	add	r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4a13      	ldr	r2, [pc, #76]	@ (8009c70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009c22:	4413      	add	r3, r2
 8009c24:	4299      	cmp	r1, r3
 8009c26:	d11c      	bne.n	8009c62 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	3304      	adds	r3, #4
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7fe f967 	bl	8007f00 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c36:	4b0f      	ldr	r3, [pc, #60]	@ (8009c74 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d903      	bls.n	8009c46 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c42:	4a0c      	ldr	r2, [pc, #48]	@ (8009c74 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009c44:	6013      	str	r3, [r2, #0]
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4413      	add	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4a07      	ldr	r2, [pc, #28]	@ (8009c70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009c54:	441a      	add	r2, r3
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	3304      	adds	r3, #4
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	f7fe f8f2 	bl	8007e46 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c62:	bf00      	nop
 8009c64:	3720      	adds	r7, #32
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	2000111c 	.word	0x2000111c
 8009c70:	20001120 	.word	0x20001120
 8009c74:	200015f8 	.word	0x200015f8

08009c78 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009c78:	b480      	push	{r7}
 8009c7a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009c7c:	4b07      	ldr	r3, [pc, #28]	@ (8009c9c <pvTaskIncrementMutexHeldCount+0x24>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d004      	beq.n	8009c8e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009c84:	4b05      	ldr	r3, [pc, #20]	@ (8009c9c <pvTaskIncrementMutexHeldCount+0x24>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c8a:	3201      	adds	r2, #1
 8009c8c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009c8e:	4b03      	ldr	r3, [pc, #12]	@ (8009c9c <pvTaskIncrementMutexHeldCount+0x24>)
 8009c90:	681b      	ldr	r3, [r3, #0]
	}
 8009c92:	4618      	mov	r0, r3
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr
 8009c9c:	2000111c 	.word	0x2000111c

08009ca0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009caa:	4b21      	ldr	r3, [pc, #132]	@ (8009d30 <prvAddCurrentTaskToDelayedList+0x90>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cb0:	4b20      	ldr	r3, [pc, #128]	@ (8009d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7fe f922 	bl	8007f00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc2:	d10a      	bne.n	8009cda <prvAddCurrentTaskToDelayedList+0x3a>
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d007      	beq.n	8009cda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cca:	4b1a      	ldr	r3, [pc, #104]	@ (8009d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	3304      	adds	r3, #4
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	4819      	ldr	r0, [pc, #100]	@ (8009d38 <prvAddCurrentTaskToDelayedList+0x98>)
 8009cd4:	f7fe f8b7 	bl	8007e46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009cd8:	e026      	b.n	8009d28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4413      	add	r3, r2
 8009ce0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ce2:	4b14      	ldr	r3, [pc, #80]	@ (8009d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d209      	bcs.n	8009d06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cf2:	4b12      	ldr	r3, [pc, #72]	@ (8009d3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8009d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	3304      	adds	r3, #4
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	4610      	mov	r0, r2
 8009d00:	f7fe f8c5 	bl	8007e8e <vListInsert>
}
 8009d04:	e010      	b.n	8009d28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d06:	4b0e      	ldr	r3, [pc, #56]	@ (8009d40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8009d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	3304      	adds	r3, #4
 8009d10:	4619      	mov	r1, r3
 8009d12:	4610      	mov	r0, r2
 8009d14:	f7fe f8bb 	bl	8007e8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d18:	4b0a      	ldr	r3, [pc, #40]	@ (8009d44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d202      	bcs.n	8009d28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009d22:	4a08      	ldr	r2, [pc, #32]	@ (8009d44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	6013      	str	r3, [r2, #0]
}
 8009d28:	bf00      	nop
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	200015f4 	.word	0x200015f4
 8009d34:	2000111c 	.word	0x2000111c
 8009d38:	200015dc 	.word	0x200015dc
 8009d3c:	200015ac 	.word	0x200015ac
 8009d40:	200015a8 	.word	0x200015a8
 8009d44:	20001610 	.word	0x20001610

08009d48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b08a      	sub	sp, #40	@ 0x28
 8009d4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009d52:	f000 fb13 	bl	800a37c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009d56:	4b1d      	ldr	r3, [pc, #116]	@ (8009dcc <xTimerCreateTimerTask+0x84>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d021      	beq.n	8009da2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009d62:	2300      	movs	r3, #0
 8009d64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009d66:	1d3a      	adds	r2, r7, #4
 8009d68:	f107 0108 	add.w	r1, r7, #8
 8009d6c:	f107 030c 	add.w	r3, r7, #12
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7fe f821 	bl	8007db8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009d76:	6879      	ldr	r1, [r7, #4]
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	9202      	str	r2, [sp, #8]
 8009d7e:	9301      	str	r3, [sp, #4]
 8009d80:	2302      	movs	r3, #2
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	2300      	movs	r3, #0
 8009d86:	460a      	mov	r2, r1
 8009d88:	4911      	ldr	r1, [pc, #68]	@ (8009dd0 <xTimerCreateTimerTask+0x88>)
 8009d8a:	4812      	ldr	r0, [pc, #72]	@ (8009dd4 <xTimerCreateTimerTask+0x8c>)
 8009d8c:	f7fe ffd0 	bl	8008d30 <xTaskCreateStatic>
 8009d90:	4603      	mov	r3, r0
 8009d92:	4a11      	ldr	r2, [pc, #68]	@ (8009dd8 <xTimerCreateTimerTask+0x90>)
 8009d94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009d96:	4b10      	ldr	r3, [pc, #64]	@ (8009dd8 <xTimerCreateTimerTask+0x90>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d001      	beq.n	8009da2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d10b      	bne.n	8009dc0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dac:	f383 8811 	msr	BASEPRI, r3
 8009db0:	f3bf 8f6f 	isb	sy
 8009db4:	f3bf 8f4f 	dsb	sy
 8009db8:	613b      	str	r3, [r7, #16]
}
 8009dba:	bf00      	nop
 8009dbc:	bf00      	nop
 8009dbe:	e7fd      	b.n	8009dbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009dc0:	697b      	ldr	r3, [r7, #20]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3718      	adds	r7, #24
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	2000164c 	.word	0x2000164c
 8009dd0:	0800d7a0 	.word	0x0800d7a0
 8009dd4:	08009f15 	.word	0x08009f15
 8009dd8:	20001650 	.word	0x20001650

08009ddc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b08a      	sub	sp, #40	@ 0x28
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
 8009de8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009dea:	2300      	movs	r3, #0
 8009dec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10b      	bne.n	8009e0c <xTimerGenericCommand+0x30>
	__asm volatile
 8009df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df8:	f383 8811 	msr	BASEPRI, r3
 8009dfc:	f3bf 8f6f 	isb	sy
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	623b      	str	r3, [r7, #32]
}
 8009e06:	bf00      	nop
 8009e08:	bf00      	nop
 8009e0a:	e7fd      	b.n	8009e08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009e0c:	4b19      	ldr	r3, [pc, #100]	@ (8009e74 <xTimerGenericCommand+0x98>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d02a      	beq.n	8009e6a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	2b05      	cmp	r3, #5
 8009e24:	dc18      	bgt.n	8009e58 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009e26:	f7ff fdad 	bl	8009984 <xTaskGetSchedulerState>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d109      	bne.n	8009e44 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009e30:	4b10      	ldr	r3, [pc, #64]	@ (8009e74 <xTimerGenericCommand+0x98>)
 8009e32:	6818      	ldr	r0, [r3, #0]
 8009e34:	f107 0110 	add.w	r1, r7, #16
 8009e38:	2300      	movs	r3, #0
 8009e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e3c:	f7fe f9d0 	bl	80081e0 <xQueueGenericSend>
 8009e40:	6278      	str	r0, [r7, #36]	@ 0x24
 8009e42:	e012      	b.n	8009e6a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009e44:	4b0b      	ldr	r3, [pc, #44]	@ (8009e74 <xTimerGenericCommand+0x98>)
 8009e46:	6818      	ldr	r0, [r3, #0]
 8009e48:	f107 0110 	add.w	r1, r7, #16
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f7fe f9c6 	bl	80081e0 <xQueueGenericSend>
 8009e54:	6278      	str	r0, [r7, #36]	@ 0x24
 8009e56:	e008      	b.n	8009e6a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009e58:	4b06      	ldr	r3, [pc, #24]	@ (8009e74 <xTimerGenericCommand+0x98>)
 8009e5a:	6818      	ldr	r0, [r3, #0]
 8009e5c:	f107 0110 	add.w	r1, r7, #16
 8009e60:	2300      	movs	r3, #0
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	f7fe fabe 	bl	80083e4 <xQueueGenericSendFromISR>
 8009e68:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3728      	adds	r7, #40	@ 0x28
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	2000164c 	.word	0x2000164c

08009e78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b088      	sub	sp, #32
 8009e7c:	af02      	add	r7, sp, #8
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e82:	4b23      	ldr	r3, [pc, #140]	@ (8009f10 <prvProcessExpiredTimer+0x98>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	3304      	adds	r3, #4
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7fe f835 	bl	8007f00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e9c:	f003 0304 	and.w	r3, r3, #4
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d023      	beq.n	8009eec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	699a      	ldr	r2, [r3, #24]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	18d1      	adds	r1, r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	683a      	ldr	r2, [r7, #0]
 8009eb0:	6978      	ldr	r0, [r7, #20]
 8009eb2:	f000 f8d5 	bl	800a060 <prvInsertTimerInActiveList>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d020      	beq.n	8009efe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	9300      	str	r3, [sp, #0]
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	6978      	ldr	r0, [r7, #20]
 8009ec8:	f7ff ff88 	bl	8009ddc <xTimerGenericCommand>
 8009ecc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d114      	bne.n	8009efe <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed8:	f383 8811 	msr	BASEPRI, r3
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	60fb      	str	r3, [r7, #12]
}
 8009ee6:	bf00      	nop
 8009ee8:	bf00      	nop
 8009eea:	e7fd      	b.n	8009ee8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ef2:	f023 0301 	bic.w	r3, r3, #1
 8009ef6:	b2da      	uxtb	r2, r3
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	6a1b      	ldr	r3, [r3, #32]
 8009f02:	6978      	ldr	r0, [r7, #20]
 8009f04:	4798      	blx	r3
}
 8009f06:	bf00      	nop
 8009f08:	3718      	adds	r7, #24
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	20001644 	.word	0x20001644

08009f14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f1c:	f107 0308 	add.w	r3, r7, #8
 8009f20:	4618      	mov	r0, r3
 8009f22:	f000 f859 	bl	8009fd8 <prvGetNextExpireTime>
 8009f26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f000 f805 	bl	8009f3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009f32:	f000 f8d7 	bl	800a0e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f36:	bf00      	nop
 8009f38:	e7f0      	b.n	8009f1c <prvTimerTask+0x8>
	...

08009f3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009f46:	f7ff f937 	bl	80091b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f4a:	f107 0308 	add.w	r3, r7, #8
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f000 f866 	bl	800a020 <prvSampleTimeNow>
 8009f54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d130      	bne.n	8009fbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d10a      	bne.n	8009f78 <prvProcessTimerOrBlockTask+0x3c>
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d806      	bhi.n	8009f78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009f6a:	f7ff f933 	bl	80091d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009f6e:	68f9      	ldr	r1, [r7, #12]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f7ff ff81 	bl	8009e78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009f76:	e024      	b.n	8009fc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d008      	beq.n	8009f90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009f7e:	4b13      	ldr	r3, [pc, #76]	@ (8009fcc <prvProcessTimerOrBlockTask+0x90>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d101      	bne.n	8009f8c <prvProcessTimerOrBlockTask+0x50>
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e000      	b.n	8009f8e <prvProcessTimerOrBlockTask+0x52>
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009f90:	4b0f      	ldr	r3, [pc, #60]	@ (8009fd0 <prvProcessTimerOrBlockTask+0x94>)
 8009f92:	6818      	ldr	r0, [r3, #0]
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	683a      	ldr	r2, [r7, #0]
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	f7fe fe93 	bl	8008cc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009fa2:	f7ff f917 	bl	80091d4 <xTaskResumeAll>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d10a      	bne.n	8009fc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009fac:	4b09      	ldr	r3, [pc, #36]	@ (8009fd4 <prvProcessTimerOrBlockTask+0x98>)
 8009fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	f3bf 8f4f 	dsb	sy
 8009fb8:	f3bf 8f6f 	isb	sy
}
 8009fbc:	e001      	b.n	8009fc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009fbe:	f7ff f909 	bl	80091d4 <xTaskResumeAll>
}
 8009fc2:	bf00      	nop
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	20001648 	.word	0x20001648
 8009fd0:	2000164c 	.word	0x2000164c
 8009fd4:	e000ed04 	.word	0xe000ed04

08009fd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800a01c <prvGetNextExpireTime+0x44>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d101      	bne.n	8009fee <prvGetNextExpireTime+0x16>
 8009fea:	2201      	movs	r2, #1
 8009fec:	e000      	b.n	8009ff0 <prvGetNextExpireTime+0x18>
 8009fee:	2200      	movs	r2, #0
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d105      	bne.n	800a008 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ffc:	4b07      	ldr	r3, [pc, #28]	@ (800a01c <prvGetNextExpireTime+0x44>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	60fb      	str	r3, [r7, #12]
 800a006:	e001      	b.n	800a00c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a008:	2300      	movs	r3, #0
 800a00a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a00c:	68fb      	ldr	r3, [r7, #12]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3714      	adds	r7, #20
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	20001644 	.word	0x20001644

0800a020 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a028:	f7ff f972 	bl	8009310 <xTaskGetTickCount>
 800a02c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a02e:	4b0b      	ldr	r3, [pc, #44]	@ (800a05c <prvSampleTimeNow+0x3c>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	429a      	cmp	r2, r3
 800a036:	d205      	bcs.n	800a044 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a038:	f000 f93a 	bl	800a2b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	601a      	str	r2, [r3, #0]
 800a042:	e002      	b.n	800a04a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a04a:	4a04      	ldr	r2, [pc, #16]	@ (800a05c <prvSampleTimeNow+0x3c>)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a050:	68fb      	ldr	r3, [r7, #12]
}
 800a052:	4618      	mov	r0, r3
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	20001654 	.word	0x20001654

0800a060 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af00      	add	r7, sp, #0
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	607a      	str	r2, [r7, #4]
 800a06c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a06e:	2300      	movs	r3, #0
 800a070:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	429a      	cmp	r2, r3
 800a084:	d812      	bhi.n	800a0ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	1ad2      	subs	r2, r2, r3
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	699b      	ldr	r3, [r3, #24]
 800a090:	429a      	cmp	r2, r3
 800a092:	d302      	bcc.n	800a09a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a094:	2301      	movs	r3, #1
 800a096:	617b      	str	r3, [r7, #20]
 800a098:	e01b      	b.n	800a0d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a09a:	4b10      	ldr	r3, [pc, #64]	@ (800a0dc <prvInsertTimerInActiveList+0x7c>)
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	3304      	adds	r3, #4
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	4610      	mov	r0, r2
 800a0a6:	f7fd fef2 	bl	8007e8e <vListInsert>
 800a0aa:	e012      	b.n	800a0d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d206      	bcs.n	800a0c2 <prvInsertTimerInActiveList+0x62>
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d302      	bcc.n	800a0c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	617b      	str	r3, [r7, #20]
 800a0c0:	e007      	b.n	800a0d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0c2:	4b07      	ldr	r3, [pc, #28]	@ (800a0e0 <prvInsertTimerInActiveList+0x80>)
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	4610      	mov	r0, r2
 800a0ce:	f7fd fede 	bl	8007e8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a0d2:	697b      	ldr	r3, [r7, #20]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3718      	adds	r7, #24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	20001648 	.word	0x20001648
 800a0e0:	20001644 	.word	0x20001644

0800a0e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b08e      	sub	sp, #56	@ 0x38
 800a0e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0ea:	e0ce      	b.n	800a28a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	da19      	bge.n	800a126 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a0f2:	1d3b      	adds	r3, r7, #4
 800a0f4:	3304      	adds	r3, #4
 800a0f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d10b      	bne.n	800a116 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a102:	f383 8811 	msr	BASEPRI, r3
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	61fb      	str	r3, [r7, #28]
}
 800a110:	bf00      	nop
 800a112:	bf00      	nop
 800a114:	e7fd      	b.n	800a112 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a11c:	6850      	ldr	r0, [r2, #4]
 800a11e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a120:	6892      	ldr	r2, [r2, #8]
 800a122:	4611      	mov	r1, r2
 800a124:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f2c0 80ae 	blt.w	800a28a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a134:	695b      	ldr	r3, [r3, #20]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d004      	beq.n	800a144 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13c:	3304      	adds	r3, #4
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fd fede 	bl	8007f00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a144:	463b      	mov	r3, r7
 800a146:	4618      	mov	r0, r3
 800a148:	f7ff ff6a 	bl	800a020 <prvSampleTimeNow>
 800a14c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2b09      	cmp	r3, #9
 800a152:	f200 8097 	bhi.w	800a284 <prvProcessReceivedCommands+0x1a0>
 800a156:	a201      	add	r2, pc, #4	@ (adr r2, 800a15c <prvProcessReceivedCommands+0x78>)
 800a158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a15c:	0800a185 	.word	0x0800a185
 800a160:	0800a185 	.word	0x0800a185
 800a164:	0800a185 	.word	0x0800a185
 800a168:	0800a1fb 	.word	0x0800a1fb
 800a16c:	0800a20f 	.word	0x0800a20f
 800a170:	0800a25b 	.word	0x0800a25b
 800a174:	0800a185 	.word	0x0800a185
 800a178:	0800a185 	.word	0x0800a185
 800a17c:	0800a1fb 	.word	0x0800a1fb
 800a180:	0800a20f 	.word	0x0800a20f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a186:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a18a:	f043 0301 	orr.w	r3, r3, #1
 800a18e:	b2da      	uxtb	r2, r3
 800a190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a192:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19a:	699b      	ldr	r3, [r3, #24]
 800a19c:	18d1      	adds	r1, r2, r3
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1a4:	f7ff ff5c 	bl	800a060 <prvInsertTimerInActiveList>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d06c      	beq.n	800a288 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1bc:	f003 0304 	and.w	r3, r3, #4
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d061      	beq.n	800a288 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c8:	699b      	ldr	r3, [r3, #24]
 800a1ca:	441a      	add	r2, r3
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	9300      	str	r3, [sp, #0]
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	2100      	movs	r1, #0
 800a1d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1d6:	f7ff fe01 	bl	8009ddc <xTimerGenericCommand>
 800a1da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a1dc:	6a3b      	ldr	r3, [r7, #32]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d152      	bne.n	800a288 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	61bb      	str	r3, [r7, #24]
}
 800a1f4:	bf00      	nop
 800a1f6:	bf00      	nop
 800a1f8:	e7fd      	b.n	800a1f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a200:	f023 0301 	bic.w	r3, r3, #1
 800a204:	b2da      	uxtb	r2, r3
 800a206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a208:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a20c:	e03d      	b.n	800a28a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a214:	f043 0301 	orr.w	r3, r3, #1
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a21c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a224:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a228:	699b      	ldr	r3, [r3, #24]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10b      	bne.n	800a246 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a232:	f383 8811 	msr	BASEPRI, r3
 800a236:	f3bf 8f6f 	isb	sy
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	617b      	str	r3, [r7, #20]
}
 800a240:	bf00      	nop
 800a242:	bf00      	nop
 800a244:	e7fd      	b.n	800a242 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a248:	699a      	ldr	r2, [r3, #24]
 800a24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a24c:	18d1      	adds	r1, r2, r3
 800a24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a252:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a254:	f7ff ff04 	bl	800a060 <prvInsertTimerInActiveList>
					break;
 800a258:	e017      	b.n	800a28a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a25c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a260:	f003 0302 	and.w	r3, r3, #2
 800a264:	2b00      	cmp	r3, #0
 800a266:	d103      	bne.n	800a270 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a268:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a26a:	f000 fbe5 	bl	800aa38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a26e:	e00c      	b.n	800a28a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a272:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a276:	f023 0301 	bic.w	r3, r3, #1
 800a27a:	b2da      	uxtb	r2, r3
 800a27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a282:	e002      	b.n	800a28a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a284:	bf00      	nop
 800a286:	e000      	b.n	800a28a <prvProcessReceivedCommands+0x1a6>
					break;
 800a288:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a28a:	4b08      	ldr	r3, [pc, #32]	@ (800a2ac <prvProcessReceivedCommands+0x1c8>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	1d39      	adds	r1, r7, #4
 800a290:	2200      	movs	r2, #0
 800a292:	4618      	mov	r0, r3
 800a294:	f7fe f9d4 	bl	8008640 <xQueueReceive>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	f47f af26 	bne.w	800a0ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a2a0:	bf00      	nop
 800a2a2:	bf00      	nop
 800a2a4:	3730      	adds	r7, #48	@ 0x30
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	2000164c 	.word	0x2000164c

0800a2b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b088      	sub	sp, #32
 800a2b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a2b6:	e049      	b.n	800a34c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2b8:	4b2e      	ldr	r3, [pc, #184]	@ (800a374 <prvSwitchTimerLists+0xc4>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2c2:	4b2c      	ldr	r3, [pc, #176]	@ (800a374 <prvSwitchTimerLists+0xc4>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3304      	adds	r3, #4
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7fd fe15 	bl	8007f00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2e4:	f003 0304 	and.w	r3, r3, #4
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d02f      	beq.n	800a34c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d90e      	bls.n	800a31c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	68ba      	ldr	r2, [r7, #8]
 800a302:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a30a:	4b1a      	ldr	r3, [pc, #104]	@ (800a374 <prvSwitchTimerLists+0xc4>)
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	3304      	adds	r3, #4
 800a312:	4619      	mov	r1, r3
 800a314:	4610      	mov	r0, r2
 800a316:	f7fd fdba 	bl	8007e8e <vListInsert>
 800a31a:	e017      	b.n	800a34c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a31c:	2300      	movs	r3, #0
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	2300      	movs	r3, #0
 800a322:	693a      	ldr	r2, [r7, #16]
 800a324:	2100      	movs	r1, #0
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f7ff fd58 	bl	8009ddc <xTimerGenericCommand>
 800a32c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10b      	bne.n	800a34c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a338:	f383 8811 	msr	BASEPRI, r3
 800a33c:	f3bf 8f6f 	isb	sy
 800a340:	f3bf 8f4f 	dsb	sy
 800a344:	603b      	str	r3, [r7, #0]
}
 800a346:	bf00      	nop
 800a348:	bf00      	nop
 800a34a:	e7fd      	b.n	800a348 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a34c:	4b09      	ldr	r3, [pc, #36]	@ (800a374 <prvSwitchTimerLists+0xc4>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1b0      	bne.n	800a2b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a356:	4b07      	ldr	r3, [pc, #28]	@ (800a374 <prvSwitchTimerLists+0xc4>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a35c:	4b06      	ldr	r3, [pc, #24]	@ (800a378 <prvSwitchTimerLists+0xc8>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a04      	ldr	r2, [pc, #16]	@ (800a374 <prvSwitchTimerLists+0xc4>)
 800a362:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a364:	4a04      	ldr	r2, [pc, #16]	@ (800a378 <prvSwitchTimerLists+0xc8>)
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	6013      	str	r3, [r2, #0]
}
 800a36a:	bf00      	nop
 800a36c:	3718      	adds	r7, #24
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	20001644 	.word	0x20001644
 800a378:	20001648 	.word	0x20001648

0800a37c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a382:	f000 f969 	bl	800a658 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a386:	4b15      	ldr	r3, [pc, #84]	@ (800a3dc <prvCheckForValidListAndQueue+0x60>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d120      	bne.n	800a3d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a38e:	4814      	ldr	r0, [pc, #80]	@ (800a3e0 <prvCheckForValidListAndQueue+0x64>)
 800a390:	f7fd fd2c 	bl	8007dec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a394:	4813      	ldr	r0, [pc, #76]	@ (800a3e4 <prvCheckForValidListAndQueue+0x68>)
 800a396:	f7fd fd29 	bl	8007dec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a39a:	4b13      	ldr	r3, [pc, #76]	@ (800a3e8 <prvCheckForValidListAndQueue+0x6c>)
 800a39c:	4a10      	ldr	r2, [pc, #64]	@ (800a3e0 <prvCheckForValidListAndQueue+0x64>)
 800a39e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a3a0:	4b12      	ldr	r3, [pc, #72]	@ (800a3ec <prvCheckForValidListAndQueue+0x70>)
 800a3a2:	4a10      	ldr	r2, [pc, #64]	@ (800a3e4 <prvCheckForValidListAndQueue+0x68>)
 800a3a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	9300      	str	r3, [sp, #0]
 800a3aa:	4b11      	ldr	r3, [pc, #68]	@ (800a3f0 <prvCheckForValidListAndQueue+0x74>)
 800a3ac:	4a11      	ldr	r2, [pc, #68]	@ (800a3f4 <prvCheckForValidListAndQueue+0x78>)
 800a3ae:	2110      	movs	r1, #16
 800a3b0:	200a      	movs	r0, #10
 800a3b2:	f7fd fe39 	bl	8008028 <xQueueGenericCreateStatic>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	4a08      	ldr	r2, [pc, #32]	@ (800a3dc <prvCheckForValidListAndQueue+0x60>)
 800a3ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a3bc:	4b07      	ldr	r3, [pc, #28]	@ (800a3dc <prvCheckForValidListAndQueue+0x60>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d005      	beq.n	800a3d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a3c4:	4b05      	ldr	r3, [pc, #20]	@ (800a3dc <prvCheckForValidListAndQueue+0x60>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	490b      	ldr	r1, [pc, #44]	@ (800a3f8 <prvCheckForValidListAndQueue+0x7c>)
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fe fc52 	bl	8008c74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3d0:	f000 f974 	bl	800a6bc <vPortExitCritical>
}
 800a3d4:	bf00      	nop
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	2000164c 	.word	0x2000164c
 800a3e0:	2000161c 	.word	0x2000161c
 800a3e4:	20001630 	.word	0x20001630
 800a3e8:	20001644 	.word	0x20001644
 800a3ec:	20001648 	.word	0x20001648
 800a3f0:	200016f8 	.word	0x200016f8
 800a3f4:	20001658 	.word	0x20001658
 800a3f8:	0800d7a8 	.word	0x0800d7a8

0800a3fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	3b04      	subs	r3, #4
 800a40c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a414:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	3b04      	subs	r3, #4
 800a41a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	f023 0201 	bic.w	r2, r3, #1
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	3b04      	subs	r3, #4
 800a42a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a42c:	4a0c      	ldr	r2, [pc, #48]	@ (800a460 <pxPortInitialiseStack+0x64>)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	3b14      	subs	r3, #20
 800a436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	3b04      	subs	r3, #4
 800a442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f06f 0202 	mvn.w	r2, #2
 800a44a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	3b20      	subs	r3, #32
 800a450:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a452:	68fb      	ldr	r3, [r7, #12]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3714      	adds	r7, #20
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr
 800a460:	0800a465 	.word	0x0800a465

0800a464 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a46a:	2300      	movs	r3, #0
 800a46c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a46e:	4b13      	ldr	r3, [pc, #76]	@ (800a4bc <prvTaskExitError+0x58>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a476:	d00b      	beq.n	800a490 <prvTaskExitError+0x2c>
	__asm volatile
 800a478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a47c:	f383 8811 	msr	BASEPRI, r3
 800a480:	f3bf 8f6f 	isb	sy
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	60fb      	str	r3, [r7, #12]
}
 800a48a:	bf00      	nop
 800a48c:	bf00      	nop
 800a48e:	e7fd      	b.n	800a48c <prvTaskExitError+0x28>
	__asm volatile
 800a490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a494:	f383 8811 	msr	BASEPRI, r3
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	60bb      	str	r3, [r7, #8]
}
 800a4a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a4a4:	bf00      	nop
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d0fc      	beq.n	800a4a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a4ac:	bf00      	nop
 800a4ae:	bf00      	nop
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	2000001c 	.word	0x2000001c

0800a4c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a4c0:	4b07      	ldr	r3, [pc, #28]	@ (800a4e0 <pxCurrentTCBConst2>)
 800a4c2:	6819      	ldr	r1, [r3, #0]
 800a4c4:	6808      	ldr	r0, [r1, #0]
 800a4c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ca:	f380 8809 	msr	PSP, r0
 800a4ce:	f3bf 8f6f 	isb	sy
 800a4d2:	f04f 0000 	mov.w	r0, #0
 800a4d6:	f380 8811 	msr	BASEPRI, r0
 800a4da:	4770      	bx	lr
 800a4dc:	f3af 8000 	nop.w

0800a4e0 <pxCurrentTCBConst2>:
 800a4e0:	2000111c 	.word	0x2000111c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a4e4:	bf00      	nop
 800a4e6:	bf00      	nop

0800a4e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a4e8:	4808      	ldr	r0, [pc, #32]	@ (800a50c <prvPortStartFirstTask+0x24>)
 800a4ea:	6800      	ldr	r0, [r0, #0]
 800a4ec:	6800      	ldr	r0, [r0, #0]
 800a4ee:	f380 8808 	msr	MSP, r0
 800a4f2:	f04f 0000 	mov.w	r0, #0
 800a4f6:	f380 8814 	msr	CONTROL, r0
 800a4fa:	b662      	cpsie	i
 800a4fc:	b661      	cpsie	f
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	df00      	svc	0
 800a508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a50a:	bf00      	nop
 800a50c:	e000ed08 	.word	0xe000ed08

0800a510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b086      	sub	sp, #24
 800a514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a516:	4b47      	ldr	r3, [pc, #284]	@ (800a634 <xPortStartScheduler+0x124>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a47      	ldr	r2, [pc, #284]	@ (800a638 <xPortStartScheduler+0x128>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d10b      	bne.n	800a538 <xPortStartScheduler+0x28>
	__asm volatile
 800a520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	613b      	str	r3, [r7, #16]
}
 800a532:	bf00      	nop
 800a534:	bf00      	nop
 800a536:	e7fd      	b.n	800a534 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a538:	4b3e      	ldr	r3, [pc, #248]	@ (800a634 <xPortStartScheduler+0x124>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a3f      	ldr	r2, [pc, #252]	@ (800a63c <xPortStartScheduler+0x12c>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d10b      	bne.n	800a55a <xPortStartScheduler+0x4a>
	__asm volatile
 800a542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a546:	f383 8811 	msr	BASEPRI, r3
 800a54a:	f3bf 8f6f 	isb	sy
 800a54e:	f3bf 8f4f 	dsb	sy
 800a552:	60fb      	str	r3, [r7, #12]
}
 800a554:	bf00      	nop
 800a556:	bf00      	nop
 800a558:	e7fd      	b.n	800a556 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a55a:	4b39      	ldr	r3, [pc, #228]	@ (800a640 <xPortStartScheduler+0x130>)
 800a55c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	b2db      	uxtb	r3, r3
 800a564:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	22ff      	movs	r2, #255	@ 0xff
 800a56a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	b2db      	uxtb	r3, r3
 800a572:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a574:	78fb      	ldrb	r3, [r7, #3]
 800a576:	b2db      	uxtb	r3, r3
 800a578:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a57c:	b2da      	uxtb	r2, r3
 800a57e:	4b31      	ldr	r3, [pc, #196]	@ (800a644 <xPortStartScheduler+0x134>)
 800a580:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a582:	4b31      	ldr	r3, [pc, #196]	@ (800a648 <xPortStartScheduler+0x138>)
 800a584:	2207      	movs	r2, #7
 800a586:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a588:	e009      	b.n	800a59e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a58a:	4b2f      	ldr	r3, [pc, #188]	@ (800a648 <xPortStartScheduler+0x138>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	3b01      	subs	r3, #1
 800a590:	4a2d      	ldr	r2, [pc, #180]	@ (800a648 <xPortStartScheduler+0x138>)
 800a592:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a594:	78fb      	ldrb	r3, [r7, #3]
 800a596:	b2db      	uxtb	r3, r3
 800a598:	005b      	lsls	r3, r3, #1
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a59e:	78fb      	ldrb	r3, [r7, #3]
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5a6:	2b80      	cmp	r3, #128	@ 0x80
 800a5a8:	d0ef      	beq.n	800a58a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a5aa:	4b27      	ldr	r3, [pc, #156]	@ (800a648 <xPortStartScheduler+0x138>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f1c3 0307 	rsb	r3, r3, #7
 800a5b2:	2b04      	cmp	r3, #4
 800a5b4:	d00b      	beq.n	800a5ce <xPortStartScheduler+0xbe>
	__asm volatile
 800a5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ba:	f383 8811 	msr	BASEPRI, r3
 800a5be:	f3bf 8f6f 	isb	sy
 800a5c2:	f3bf 8f4f 	dsb	sy
 800a5c6:	60bb      	str	r3, [r7, #8]
}
 800a5c8:	bf00      	nop
 800a5ca:	bf00      	nop
 800a5cc:	e7fd      	b.n	800a5ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a5ce:	4b1e      	ldr	r3, [pc, #120]	@ (800a648 <xPortStartScheduler+0x138>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	021b      	lsls	r3, r3, #8
 800a5d4:	4a1c      	ldr	r2, [pc, #112]	@ (800a648 <xPortStartScheduler+0x138>)
 800a5d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a5d8:	4b1b      	ldr	r3, [pc, #108]	@ (800a648 <xPortStartScheduler+0x138>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a5e0:	4a19      	ldr	r2, [pc, #100]	@ (800a648 <xPortStartScheduler+0x138>)
 800a5e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a5ec:	4b17      	ldr	r3, [pc, #92]	@ (800a64c <xPortStartScheduler+0x13c>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a16      	ldr	r2, [pc, #88]	@ (800a64c <xPortStartScheduler+0x13c>)
 800a5f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a5f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a5f8:	4b14      	ldr	r3, [pc, #80]	@ (800a64c <xPortStartScheduler+0x13c>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a13      	ldr	r2, [pc, #76]	@ (800a64c <xPortStartScheduler+0x13c>)
 800a5fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a602:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a604:	f000 f8da 	bl	800a7bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a608:	4b11      	ldr	r3, [pc, #68]	@ (800a650 <xPortStartScheduler+0x140>)
 800a60a:	2200      	movs	r2, #0
 800a60c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a60e:	f000 f8f9 	bl	800a804 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a612:	4b10      	ldr	r3, [pc, #64]	@ (800a654 <xPortStartScheduler+0x144>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a0f      	ldr	r2, [pc, #60]	@ (800a654 <xPortStartScheduler+0x144>)
 800a618:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a61c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a61e:	f7ff ff63 	bl	800a4e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a622:	f7fe ff3f 	bl	80094a4 <vTaskSwitchContext>
	prvTaskExitError();
 800a626:	f7ff ff1d 	bl	800a464 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3718      	adds	r7, #24
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	e000ed00 	.word	0xe000ed00
 800a638:	410fc271 	.word	0x410fc271
 800a63c:	410fc270 	.word	0x410fc270
 800a640:	e000e400 	.word	0xe000e400
 800a644:	20001748 	.word	0x20001748
 800a648:	2000174c 	.word	0x2000174c
 800a64c:	e000ed20 	.word	0xe000ed20
 800a650:	2000001c 	.word	0x2000001c
 800a654:	e000ef34 	.word	0xe000ef34

0800a658 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
	__asm volatile
 800a65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a662:	f383 8811 	msr	BASEPRI, r3
 800a666:	f3bf 8f6f 	isb	sy
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	607b      	str	r3, [r7, #4]
}
 800a670:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a672:	4b10      	ldr	r3, [pc, #64]	@ (800a6b4 <vPortEnterCritical+0x5c>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	3301      	adds	r3, #1
 800a678:	4a0e      	ldr	r2, [pc, #56]	@ (800a6b4 <vPortEnterCritical+0x5c>)
 800a67a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a67c:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b4 <vPortEnterCritical+0x5c>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b01      	cmp	r3, #1
 800a682:	d110      	bne.n	800a6a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a684:	4b0c      	ldr	r3, [pc, #48]	@ (800a6b8 <vPortEnterCritical+0x60>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00b      	beq.n	800a6a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a692:	f383 8811 	msr	BASEPRI, r3
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	603b      	str	r3, [r7, #0]
}
 800a6a0:	bf00      	nop
 800a6a2:	bf00      	nop
 800a6a4:	e7fd      	b.n	800a6a2 <vPortEnterCritical+0x4a>
	}
}
 800a6a6:	bf00      	nop
 800a6a8:	370c      	adds	r7, #12
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	2000001c 	.word	0x2000001c
 800a6b8:	e000ed04 	.word	0xe000ed04

0800a6bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a6c2:	4b12      	ldr	r3, [pc, #72]	@ (800a70c <vPortExitCritical+0x50>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10b      	bne.n	800a6e2 <vPortExitCritical+0x26>
	__asm volatile
 800a6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	607b      	str	r3, [r7, #4]
}
 800a6dc:	bf00      	nop
 800a6de:	bf00      	nop
 800a6e0:	e7fd      	b.n	800a6de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a6e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a70c <vPortExitCritical+0x50>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	4a08      	ldr	r2, [pc, #32]	@ (800a70c <vPortExitCritical+0x50>)
 800a6ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a6ec:	4b07      	ldr	r3, [pc, #28]	@ (800a70c <vPortExitCritical+0x50>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d105      	bne.n	800a700 <vPortExitCritical+0x44>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	f383 8811 	msr	BASEPRI, r3
}
 800a6fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a700:	bf00      	nop
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	2000001c 	.word	0x2000001c

0800a710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a710:	f3ef 8009 	mrs	r0, PSP
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	4b15      	ldr	r3, [pc, #84]	@ (800a770 <pxCurrentTCBConst>)
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	f01e 0f10 	tst.w	lr, #16
 800a720:	bf08      	it	eq
 800a722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a72a:	6010      	str	r0, [r2, #0]
 800a72c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a730:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a734:	f380 8811 	msr	BASEPRI, r0
 800a738:	f3bf 8f4f 	dsb	sy
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f7fe feb0 	bl	80094a4 <vTaskSwitchContext>
 800a744:	f04f 0000 	mov.w	r0, #0
 800a748:	f380 8811 	msr	BASEPRI, r0
 800a74c:	bc09      	pop	{r0, r3}
 800a74e:	6819      	ldr	r1, [r3, #0]
 800a750:	6808      	ldr	r0, [r1, #0]
 800a752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a756:	f01e 0f10 	tst.w	lr, #16
 800a75a:	bf08      	it	eq
 800a75c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a760:	f380 8809 	msr	PSP, r0
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	f3af 8000 	nop.w

0800a770 <pxCurrentTCBConst>:
 800a770:	2000111c 	.word	0x2000111c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a774:	bf00      	nop
 800a776:	bf00      	nop

0800a778 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
	__asm volatile
 800a77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	607b      	str	r3, [r7, #4]
}
 800a790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a792:	f7fe fdcd 	bl	8009330 <xTaskIncrementTick>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d003      	beq.n	800a7a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a79c:	4b06      	ldr	r3, [pc, #24]	@ (800a7b8 <xPortSysTickHandler+0x40>)
 800a79e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7a2:	601a      	str	r2, [r3, #0]
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	f383 8811 	msr	BASEPRI, r3
}
 800a7ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a7b0:	bf00      	nop
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	e000ed04 	.word	0xe000ed04

0800a7bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a7bc:	b480      	push	{r7}
 800a7be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a7c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a7f0 <vPortSetupTimerInterrupt+0x34>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a7c6:	4b0b      	ldr	r3, [pc, #44]	@ (800a7f4 <vPortSetupTimerInterrupt+0x38>)
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a7cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a7f8 <vPortSetupTimerInterrupt+0x3c>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a0a      	ldr	r2, [pc, #40]	@ (800a7fc <vPortSetupTimerInterrupt+0x40>)
 800a7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7d6:	099b      	lsrs	r3, r3, #6
 800a7d8:	4a09      	ldr	r2, [pc, #36]	@ (800a800 <vPortSetupTimerInterrupt+0x44>)
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a7de:	4b04      	ldr	r3, [pc, #16]	@ (800a7f0 <vPortSetupTimerInterrupt+0x34>)
 800a7e0:	2207      	movs	r2, #7
 800a7e2:	601a      	str	r2, [r3, #0]
}
 800a7e4:	bf00      	nop
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	e000e010 	.word	0xe000e010
 800a7f4:	e000e018 	.word	0xe000e018
 800a7f8:	20000000 	.word	0x20000000
 800a7fc:	10624dd3 	.word	0x10624dd3
 800a800:	e000e014 	.word	0xe000e014

0800a804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a804:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a814 <vPortEnableVFP+0x10>
 800a808:	6801      	ldr	r1, [r0, #0]
 800a80a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a80e:	6001      	str	r1, [r0, #0]
 800a810:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a812:	bf00      	nop
 800a814:	e000ed88 	.word	0xe000ed88

0800a818 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a81e:	f3ef 8305 	mrs	r3, IPSR
 800a822:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2b0f      	cmp	r3, #15
 800a828:	d915      	bls.n	800a856 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a82a:	4a18      	ldr	r2, [pc, #96]	@ (800a88c <vPortValidateInterruptPriority+0x74>)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	4413      	add	r3, r2
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a834:	4b16      	ldr	r3, [pc, #88]	@ (800a890 <vPortValidateInterruptPriority+0x78>)
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	7afa      	ldrb	r2, [r7, #11]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d20b      	bcs.n	800a856 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	607b      	str	r3, [r7, #4]
}
 800a850:	bf00      	nop
 800a852:	bf00      	nop
 800a854:	e7fd      	b.n	800a852 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a856:	4b0f      	ldr	r3, [pc, #60]	@ (800a894 <vPortValidateInterruptPriority+0x7c>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a85e:	4b0e      	ldr	r3, [pc, #56]	@ (800a898 <vPortValidateInterruptPriority+0x80>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	429a      	cmp	r2, r3
 800a864:	d90b      	bls.n	800a87e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	603b      	str	r3, [r7, #0]
}
 800a878:	bf00      	nop
 800a87a:	bf00      	nop
 800a87c:	e7fd      	b.n	800a87a <vPortValidateInterruptPriority+0x62>
	}
 800a87e:	bf00      	nop
 800a880:	3714      	adds	r7, #20
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop
 800a88c:	e000e3f0 	.word	0xe000e3f0
 800a890:	20001748 	.word	0x20001748
 800a894:	e000ed0c 	.word	0xe000ed0c
 800a898:	2000174c 	.word	0x2000174c

0800a89c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b08a      	sub	sp, #40	@ 0x28
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a8a8:	f7fe fc86 	bl	80091b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a8ac:	4b5c      	ldr	r3, [pc, #368]	@ (800aa20 <pvPortMalloc+0x184>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d101      	bne.n	800a8b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a8b4:	f000 f924 	bl	800ab00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a8b8:	4b5a      	ldr	r3, [pc, #360]	@ (800aa24 <pvPortMalloc+0x188>)
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4013      	ands	r3, r2
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f040 8095 	bne.w	800a9f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d01e      	beq.n	800a90a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a8cc:	2208      	movs	r2, #8
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f003 0307 	and.w	r3, r3, #7
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d015      	beq.n	800a90a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f023 0307 	bic.w	r3, r3, #7
 800a8e4:	3308      	adds	r3, #8
 800a8e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f003 0307 	and.w	r3, r3, #7
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00b      	beq.n	800a90a <pvPortMalloc+0x6e>
	__asm volatile
 800a8f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8f6:	f383 8811 	msr	BASEPRI, r3
 800a8fa:	f3bf 8f6f 	isb	sy
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	617b      	str	r3, [r7, #20]
}
 800a904:	bf00      	nop
 800a906:	bf00      	nop
 800a908:	e7fd      	b.n	800a906 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d06f      	beq.n	800a9f0 <pvPortMalloc+0x154>
 800a910:	4b45      	ldr	r3, [pc, #276]	@ (800aa28 <pvPortMalloc+0x18c>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	429a      	cmp	r2, r3
 800a918:	d86a      	bhi.n	800a9f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a91a:	4b44      	ldr	r3, [pc, #272]	@ (800aa2c <pvPortMalloc+0x190>)
 800a91c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a91e:	4b43      	ldr	r3, [pc, #268]	@ (800aa2c <pvPortMalloc+0x190>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a924:	e004      	b.n	800a930 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a928:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	429a      	cmp	r2, r3
 800a938:	d903      	bls.n	800a942 <pvPortMalloc+0xa6>
 800a93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d1f1      	bne.n	800a926 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a942:	4b37      	ldr	r3, [pc, #220]	@ (800aa20 <pvPortMalloc+0x184>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a948:	429a      	cmp	r2, r3
 800a94a:	d051      	beq.n	800a9f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a94c:	6a3b      	ldr	r3, [r7, #32]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2208      	movs	r2, #8
 800a952:	4413      	add	r3, r2
 800a954:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	6a3b      	ldr	r3, [r7, #32]
 800a95c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a960:	685a      	ldr	r2, [r3, #4]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	1ad2      	subs	r2, r2, r3
 800a966:	2308      	movs	r3, #8
 800a968:	005b      	lsls	r3, r3, #1
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d920      	bls.n	800a9b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a96e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	4413      	add	r3, r2
 800a974:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	f003 0307 	and.w	r3, r3, #7
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d00b      	beq.n	800a998 <pvPortMalloc+0xfc>
	__asm volatile
 800a980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a984:	f383 8811 	msr	BASEPRI, r3
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	613b      	str	r3, [r7, #16]
}
 800a992:	bf00      	nop
 800a994:	bf00      	nop
 800a996:	e7fd      	b.n	800a994 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99a:	685a      	ldr	r2, [r3, #4]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	1ad2      	subs	r2, r2, r3
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a9aa:	69b8      	ldr	r0, [r7, #24]
 800a9ac:	f000 f90a 	bl	800abc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a9b0:	4b1d      	ldr	r3, [pc, #116]	@ (800aa28 <pvPortMalloc+0x18c>)
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	1ad3      	subs	r3, r2, r3
 800a9ba:	4a1b      	ldr	r2, [pc, #108]	@ (800aa28 <pvPortMalloc+0x18c>)
 800a9bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a9be:	4b1a      	ldr	r3, [pc, #104]	@ (800aa28 <pvPortMalloc+0x18c>)
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	4b1b      	ldr	r3, [pc, #108]	@ (800aa30 <pvPortMalloc+0x194>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d203      	bcs.n	800a9d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a9ca:	4b17      	ldr	r3, [pc, #92]	@ (800aa28 <pvPortMalloc+0x18c>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a18      	ldr	r2, [pc, #96]	@ (800aa30 <pvPortMalloc+0x194>)
 800a9d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d4:	685a      	ldr	r2, [r3, #4]
 800a9d6:	4b13      	ldr	r3, [pc, #76]	@ (800aa24 <pvPortMalloc+0x188>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	431a      	orrs	r2, r3
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a9e6:	4b13      	ldr	r3, [pc, #76]	@ (800aa34 <pvPortMalloc+0x198>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	4a11      	ldr	r2, [pc, #68]	@ (800aa34 <pvPortMalloc+0x198>)
 800a9ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a9f0:	f7fe fbf0 	bl	80091d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	f003 0307 	and.w	r3, r3, #7
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00b      	beq.n	800aa16 <pvPortMalloc+0x17a>
	__asm volatile
 800a9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa02:	f383 8811 	msr	BASEPRI, r3
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	60fb      	str	r3, [r7, #12]
}
 800aa10:	bf00      	nop
 800aa12:	bf00      	nop
 800aa14:	e7fd      	b.n	800aa12 <pvPortMalloc+0x176>
	return pvReturn;
 800aa16:	69fb      	ldr	r3, [r7, #28]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3728      	adds	r7, #40	@ 0x28
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}
 800aa20:	20002310 	.word	0x20002310
 800aa24:	20002324 	.word	0x20002324
 800aa28:	20002314 	.word	0x20002314
 800aa2c:	20002308 	.word	0x20002308
 800aa30:	20002318 	.word	0x20002318
 800aa34:	2000231c 	.word	0x2000231c

0800aa38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d04f      	beq.n	800aaea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa4a:	2308      	movs	r3, #8
 800aa4c:	425b      	negs	r3, r3
 800aa4e:	697a      	ldr	r2, [r7, #20]
 800aa50:	4413      	add	r3, r2
 800aa52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	685a      	ldr	r2, [r3, #4]
 800aa5c:	4b25      	ldr	r3, [pc, #148]	@ (800aaf4 <vPortFree+0xbc>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4013      	ands	r3, r2
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d10b      	bne.n	800aa7e <vPortFree+0x46>
	__asm volatile
 800aa66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa6a:	f383 8811 	msr	BASEPRI, r3
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	f3bf 8f4f 	dsb	sy
 800aa76:	60fb      	str	r3, [r7, #12]
}
 800aa78:	bf00      	nop
 800aa7a:	bf00      	nop
 800aa7c:	e7fd      	b.n	800aa7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00b      	beq.n	800aa9e <vPortFree+0x66>
	__asm volatile
 800aa86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	60bb      	str	r3, [r7, #8]
}
 800aa98:	bf00      	nop
 800aa9a:	bf00      	nop
 800aa9c:	e7fd      	b.n	800aa9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	685a      	ldr	r2, [r3, #4]
 800aaa2:	4b14      	ldr	r3, [pc, #80]	@ (800aaf4 <vPortFree+0xbc>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d01e      	beq.n	800aaea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d11a      	bne.n	800aaea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	685a      	ldr	r2, [r3, #4]
 800aab8:	4b0e      	ldr	r3, [pc, #56]	@ (800aaf4 <vPortFree+0xbc>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	43db      	mvns	r3, r3
 800aabe:	401a      	ands	r2, r3
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aac4:	f7fe fb78 	bl	80091b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	685a      	ldr	r2, [r3, #4]
 800aacc:	4b0a      	ldr	r3, [pc, #40]	@ (800aaf8 <vPortFree+0xc0>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4413      	add	r3, r2
 800aad2:	4a09      	ldr	r2, [pc, #36]	@ (800aaf8 <vPortFree+0xc0>)
 800aad4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aad6:	6938      	ldr	r0, [r7, #16]
 800aad8:	f000 f874 	bl	800abc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aadc:	4b07      	ldr	r3, [pc, #28]	@ (800aafc <vPortFree+0xc4>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	3301      	adds	r3, #1
 800aae2:	4a06      	ldr	r2, [pc, #24]	@ (800aafc <vPortFree+0xc4>)
 800aae4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aae6:	f7fe fb75 	bl	80091d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aaea:	bf00      	nop
 800aaec:	3718      	adds	r7, #24
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	20002324 	.word	0x20002324
 800aaf8:	20002314 	.word	0x20002314
 800aafc:	20002320 	.word	0x20002320

0800ab00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab00:	b480      	push	{r7}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab06:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800ab0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab0c:	4b27      	ldr	r3, [pc, #156]	@ (800abac <prvHeapInit+0xac>)
 800ab0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f003 0307 	and.w	r3, r3, #7
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00c      	beq.n	800ab34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	3307      	adds	r3, #7
 800ab1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f023 0307 	bic.w	r3, r3, #7
 800ab26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	1ad3      	subs	r3, r2, r3
 800ab2e:	4a1f      	ldr	r2, [pc, #124]	@ (800abac <prvHeapInit+0xac>)
 800ab30:	4413      	add	r3, r2
 800ab32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab38:	4a1d      	ldr	r2, [pc, #116]	@ (800abb0 <prvHeapInit+0xb0>)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab3e:	4b1c      	ldr	r3, [pc, #112]	@ (800abb0 <prvHeapInit+0xb0>)
 800ab40:	2200      	movs	r2, #0
 800ab42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	4413      	add	r3, r2
 800ab4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab4c:	2208      	movs	r2, #8
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	1a9b      	subs	r3, r3, r2
 800ab52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f023 0307 	bic.w	r3, r3, #7
 800ab5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	4a15      	ldr	r2, [pc, #84]	@ (800abb4 <prvHeapInit+0xb4>)
 800ab60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ab62:	4b14      	ldr	r3, [pc, #80]	@ (800abb4 <prvHeapInit+0xb4>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2200      	movs	r2, #0
 800ab68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab6a:	4b12      	ldr	r3, [pc, #72]	@ (800abb4 <prvHeapInit+0xb4>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	1ad2      	subs	r2, r2, r3
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab80:	4b0c      	ldr	r3, [pc, #48]	@ (800abb4 <prvHeapInit+0xb4>)
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	4a0a      	ldr	r2, [pc, #40]	@ (800abb8 <prvHeapInit+0xb8>)
 800ab8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	4a09      	ldr	r2, [pc, #36]	@ (800abbc <prvHeapInit+0xbc>)
 800ab96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab98:	4b09      	ldr	r3, [pc, #36]	@ (800abc0 <prvHeapInit+0xc0>)
 800ab9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ab9e:	601a      	str	r2, [r3, #0]
}
 800aba0:	bf00      	nop
 800aba2:	3714      	adds	r7, #20
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr
 800abac:	20001750 	.word	0x20001750
 800abb0:	20002308 	.word	0x20002308
 800abb4:	20002310 	.word	0x20002310
 800abb8:	20002318 	.word	0x20002318
 800abbc:	20002314 	.word	0x20002314
 800abc0:	20002324 	.word	0x20002324

0800abc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800abcc:	4b28      	ldr	r3, [pc, #160]	@ (800ac70 <prvInsertBlockIntoFreeList+0xac>)
 800abce:	60fb      	str	r3, [r7, #12]
 800abd0:	e002      	b.n	800abd8 <prvInsertBlockIntoFreeList+0x14>
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	60fb      	str	r3, [r7, #12]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	429a      	cmp	r2, r3
 800abe0:	d8f7      	bhi.n	800abd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	68ba      	ldr	r2, [r7, #8]
 800abec:	4413      	add	r3, r2
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d108      	bne.n	800ac06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	685a      	ldr	r2, [r3, #4]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	441a      	add	r2, r3
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	68ba      	ldr	r2, [r7, #8]
 800ac10:	441a      	add	r2, r3
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d118      	bne.n	800ac4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	4b15      	ldr	r3, [pc, #84]	@ (800ac74 <prvInsertBlockIntoFreeList+0xb0>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d00d      	beq.n	800ac42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	685a      	ldr	r2, [r3, #4]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	441a      	add	r2, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	601a      	str	r2, [r3, #0]
 800ac40:	e008      	b.n	800ac54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac42:	4b0c      	ldr	r3, [pc, #48]	@ (800ac74 <prvInsertBlockIntoFreeList+0xb0>)
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	601a      	str	r2, [r3, #0]
 800ac4a:	e003      	b.n	800ac54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d002      	beq.n	800ac62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac62:	bf00      	nop
 800ac64:	3714      	adds	r7, #20
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	20002308 	.word	0x20002308
 800ac74:	20002310 	.word	0x20002310

0800ac78 <atoi>:
 800ac78:	220a      	movs	r2, #10
 800ac7a:	2100      	movs	r1, #0
 800ac7c:	f000 b87a 	b.w	800ad74 <strtol>

0800ac80 <_strtol_l.constprop.0>:
 800ac80:	2b24      	cmp	r3, #36	@ 0x24
 800ac82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac86:	4686      	mov	lr, r0
 800ac88:	4690      	mov	r8, r2
 800ac8a:	d801      	bhi.n	800ac90 <_strtol_l.constprop.0+0x10>
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d106      	bne.n	800ac9e <_strtol_l.constprop.0+0x1e>
 800ac90:	f000 fe2a 	bl	800b8e8 <__errno>
 800ac94:	2316      	movs	r3, #22
 800ac96:	6003      	str	r3, [r0, #0]
 800ac98:	2000      	movs	r0, #0
 800ac9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac9e:	4834      	ldr	r0, [pc, #208]	@ (800ad70 <_strtol_l.constprop.0+0xf0>)
 800aca0:	460d      	mov	r5, r1
 800aca2:	462a      	mov	r2, r5
 800aca4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aca8:	5d06      	ldrb	r6, [r0, r4]
 800acaa:	f016 0608 	ands.w	r6, r6, #8
 800acae:	d1f8      	bne.n	800aca2 <_strtol_l.constprop.0+0x22>
 800acb0:	2c2d      	cmp	r4, #45	@ 0x2d
 800acb2:	d12d      	bne.n	800ad10 <_strtol_l.constprop.0+0x90>
 800acb4:	782c      	ldrb	r4, [r5, #0]
 800acb6:	2601      	movs	r6, #1
 800acb8:	1c95      	adds	r5, r2, #2
 800acba:	f033 0210 	bics.w	r2, r3, #16
 800acbe:	d109      	bne.n	800acd4 <_strtol_l.constprop.0+0x54>
 800acc0:	2c30      	cmp	r4, #48	@ 0x30
 800acc2:	d12a      	bne.n	800ad1a <_strtol_l.constprop.0+0x9a>
 800acc4:	782a      	ldrb	r2, [r5, #0]
 800acc6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800acca:	2a58      	cmp	r2, #88	@ 0x58
 800accc:	d125      	bne.n	800ad1a <_strtol_l.constprop.0+0x9a>
 800acce:	786c      	ldrb	r4, [r5, #1]
 800acd0:	2310      	movs	r3, #16
 800acd2:	3502      	adds	r5, #2
 800acd4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800acd8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800acdc:	2200      	movs	r2, #0
 800acde:	fbbc f9f3 	udiv	r9, ip, r3
 800ace2:	4610      	mov	r0, r2
 800ace4:	fb03 ca19 	mls	sl, r3, r9, ip
 800ace8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800acec:	2f09      	cmp	r7, #9
 800acee:	d81b      	bhi.n	800ad28 <_strtol_l.constprop.0+0xa8>
 800acf0:	463c      	mov	r4, r7
 800acf2:	42a3      	cmp	r3, r4
 800acf4:	dd27      	ble.n	800ad46 <_strtol_l.constprop.0+0xc6>
 800acf6:	1c57      	adds	r7, r2, #1
 800acf8:	d007      	beq.n	800ad0a <_strtol_l.constprop.0+0x8a>
 800acfa:	4581      	cmp	r9, r0
 800acfc:	d320      	bcc.n	800ad40 <_strtol_l.constprop.0+0xc0>
 800acfe:	d101      	bne.n	800ad04 <_strtol_l.constprop.0+0x84>
 800ad00:	45a2      	cmp	sl, r4
 800ad02:	db1d      	blt.n	800ad40 <_strtol_l.constprop.0+0xc0>
 800ad04:	fb00 4003 	mla	r0, r0, r3, r4
 800ad08:	2201      	movs	r2, #1
 800ad0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad0e:	e7eb      	b.n	800ace8 <_strtol_l.constprop.0+0x68>
 800ad10:	2c2b      	cmp	r4, #43	@ 0x2b
 800ad12:	bf04      	itt	eq
 800ad14:	782c      	ldrbeq	r4, [r5, #0]
 800ad16:	1c95      	addeq	r5, r2, #2
 800ad18:	e7cf      	b.n	800acba <_strtol_l.constprop.0+0x3a>
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1da      	bne.n	800acd4 <_strtol_l.constprop.0+0x54>
 800ad1e:	2c30      	cmp	r4, #48	@ 0x30
 800ad20:	bf0c      	ite	eq
 800ad22:	2308      	moveq	r3, #8
 800ad24:	230a      	movne	r3, #10
 800ad26:	e7d5      	b.n	800acd4 <_strtol_l.constprop.0+0x54>
 800ad28:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ad2c:	2f19      	cmp	r7, #25
 800ad2e:	d801      	bhi.n	800ad34 <_strtol_l.constprop.0+0xb4>
 800ad30:	3c37      	subs	r4, #55	@ 0x37
 800ad32:	e7de      	b.n	800acf2 <_strtol_l.constprop.0+0x72>
 800ad34:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ad38:	2f19      	cmp	r7, #25
 800ad3a:	d804      	bhi.n	800ad46 <_strtol_l.constprop.0+0xc6>
 800ad3c:	3c57      	subs	r4, #87	@ 0x57
 800ad3e:	e7d8      	b.n	800acf2 <_strtol_l.constprop.0+0x72>
 800ad40:	f04f 32ff 	mov.w	r2, #4294967295
 800ad44:	e7e1      	b.n	800ad0a <_strtol_l.constprop.0+0x8a>
 800ad46:	1c53      	adds	r3, r2, #1
 800ad48:	d108      	bne.n	800ad5c <_strtol_l.constprop.0+0xdc>
 800ad4a:	2322      	movs	r3, #34	@ 0x22
 800ad4c:	f8ce 3000 	str.w	r3, [lr]
 800ad50:	4660      	mov	r0, ip
 800ad52:	f1b8 0f00 	cmp.w	r8, #0
 800ad56:	d0a0      	beq.n	800ac9a <_strtol_l.constprop.0+0x1a>
 800ad58:	1e69      	subs	r1, r5, #1
 800ad5a:	e006      	b.n	800ad6a <_strtol_l.constprop.0+0xea>
 800ad5c:	b106      	cbz	r6, 800ad60 <_strtol_l.constprop.0+0xe0>
 800ad5e:	4240      	negs	r0, r0
 800ad60:	f1b8 0f00 	cmp.w	r8, #0
 800ad64:	d099      	beq.n	800ac9a <_strtol_l.constprop.0+0x1a>
 800ad66:	2a00      	cmp	r2, #0
 800ad68:	d1f6      	bne.n	800ad58 <_strtol_l.constprop.0+0xd8>
 800ad6a:	f8c8 1000 	str.w	r1, [r8]
 800ad6e:	e794      	b.n	800ac9a <_strtol_l.constprop.0+0x1a>
 800ad70:	0800d7f9 	.word	0x0800d7f9

0800ad74 <strtol>:
 800ad74:	4613      	mov	r3, r2
 800ad76:	460a      	mov	r2, r1
 800ad78:	4601      	mov	r1, r0
 800ad7a:	4802      	ldr	r0, [pc, #8]	@ (800ad84 <strtol+0x10>)
 800ad7c:	6800      	ldr	r0, [r0, #0]
 800ad7e:	f7ff bf7f 	b.w	800ac80 <_strtol_l.constprop.0>
 800ad82:	bf00      	nop
 800ad84:	2000002c 	.word	0x2000002c

0800ad88 <__cvt>:
 800ad88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad8c:	ec57 6b10 	vmov	r6, r7, d0
 800ad90:	2f00      	cmp	r7, #0
 800ad92:	460c      	mov	r4, r1
 800ad94:	4619      	mov	r1, r3
 800ad96:	463b      	mov	r3, r7
 800ad98:	bfbb      	ittet	lt
 800ad9a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ad9e:	461f      	movlt	r7, r3
 800ada0:	2300      	movge	r3, #0
 800ada2:	232d      	movlt	r3, #45	@ 0x2d
 800ada4:	700b      	strb	r3, [r1, #0]
 800ada6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ada8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800adac:	4691      	mov	r9, r2
 800adae:	f023 0820 	bic.w	r8, r3, #32
 800adb2:	bfbc      	itt	lt
 800adb4:	4632      	movlt	r2, r6
 800adb6:	4616      	movlt	r6, r2
 800adb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800adbc:	d005      	beq.n	800adca <__cvt+0x42>
 800adbe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800adc2:	d100      	bne.n	800adc6 <__cvt+0x3e>
 800adc4:	3401      	adds	r4, #1
 800adc6:	2102      	movs	r1, #2
 800adc8:	e000      	b.n	800adcc <__cvt+0x44>
 800adca:	2103      	movs	r1, #3
 800adcc:	ab03      	add	r3, sp, #12
 800adce:	9301      	str	r3, [sp, #4]
 800add0:	ab02      	add	r3, sp, #8
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	ec47 6b10 	vmov	d0, r6, r7
 800add8:	4653      	mov	r3, sl
 800adda:	4622      	mov	r2, r4
 800addc:	f000 fe48 	bl	800ba70 <_dtoa_r>
 800ade0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ade4:	4605      	mov	r5, r0
 800ade6:	d119      	bne.n	800ae1c <__cvt+0x94>
 800ade8:	f019 0f01 	tst.w	r9, #1
 800adec:	d00e      	beq.n	800ae0c <__cvt+0x84>
 800adee:	eb00 0904 	add.w	r9, r0, r4
 800adf2:	2200      	movs	r2, #0
 800adf4:	2300      	movs	r3, #0
 800adf6:	4630      	mov	r0, r6
 800adf8:	4639      	mov	r1, r7
 800adfa:	f7f5 fe65 	bl	8000ac8 <__aeabi_dcmpeq>
 800adfe:	b108      	cbz	r0, 800ae04 <__cvt+0x7c>
 800ae00:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae04:	2230      	movs	r2, #48	@ 0x30
 800ae06:	9b03      	ldr	r3, [sp, #12]
 800ae08:	454b      	cmp	r3, r9
 800ae0a:	d31e      	bcc.n	800ae4a <__cvt+0xc2>
 800ae0c:	9b03      	ldr	r3, [sp, #12]
 800ae0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae10:	1b5b      	subs	r3, r3, r5
 800ae12:	4628      	mov	r0, r5
 800ae14:	6013      	str	r3, [r2, #0]
 800ae16:	b004      	add	sp, #16
 800ae18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ae20:	eb00 0904 	add.w	r9, r0, r4
 800ae24:	d1e5      	bne.n	800adf2 <__cvt+0x6a>
 800ae26:	7803      	ldrb	r3, [r0, #0]
 800ae28:	2b30      	cmp	r3, #48	@ 0x30
 800ae2a:	d10a      	bne.n	800ae42 <__cvt+0xba>
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	2300      	movs	r3, #0
 800ae30:	4630      	mov	r0, r6
 800ae32:	4639      	mov	r1, r7
 800ae34:	f7f5 fe48 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae38:	b918      	cbnz	r0, 800ae42 <__cvt+0xba>
 800ae3a:	f1c4 0401 	rsb	r4, r4, #1
 800ae3e:	f8ca 4000 	str.w	r4, [sl]
 800ae42:	f8da 3000 	ldr.w	r3, [sl]
 800ae46:	4499      	add	r9, r3
 800ae48:	e7d3      	b.n	800adf2 <__cvt+0x6a>
 800ae4a:	1c59      	adds	r1, r3, #1
 800ae4c:	9103      	str	r1, [sp, #12]
 800ae4e:	701a      	strb	r2, [r3, #0]
 800ae50:	e7d9      	b.n	800ae06 <__cvt+0x7e>

0800ae52 <__exponent>:
 800ae52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae54:	2900      	cmp	r1, #0
 800ae56:	bfba      	itte	lt
 800ae58:	4249      	neglt	r1, r1
 800ae5a:	232d      	movlt	r3, #45	@ 0x2d
 800ae5c:	232b      	movge	r3, #43	@ 0x2b
 800ae5e:	2909      	cmp	r1, #9
 800ae60:	7002      	strb	r2, [r0, #0]
 800ae62:	7043      	strb	r3, [r0, #1]
 800ae64:	dd29      	ble.n	800aeba <__exponent+0x68>
 800ae66:	f10d 0307 	add.w	r3, sp, #7
 800ae6a:	461d      	mov	r5, r3
 800ae6c:	270a      	movs	r7, #10
 800ae6e:	461a      	mov	r2, r3
 800ae70:	fbb1 f6f7 	udiv	r6, r1, r7
 800ae74:	fb07 1416 	mls	r4, r7, r6, r1
 800ae78:	3430      	adds	r4, #48	@ 0x30
 800ae7a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ae7e:	460c      	mov	r4, r1
 800ae80:	2c63      	cmp	r4, #99	@ 0x63
 800ae82:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae86:	4631      	mov	r1, r6
 800ae88:	dcf1      	bgt.n	800ae6e <__exponent+0x1c>
 800ae8a:	3130      	adds	r1, #48	@ 0x30
 800ae8c:	1e94      	subs	r4, r2, #2
 800ae8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ae92:	1c41      	adds	r1, r0, #1
 800ae94:	4623      	mov	r3, r4
 800ae96:	42ab      	cmp	r3, r5
 800ae98:	d30a      	bcc.n	800aeb0 <__exponent+0x5e>
 800ae9a:	f10d 0309 	add.w	r3, sp, #9
 800ae9e:	1a9b      	subs	r3, r3, r2
 800aea0:	42ac      	cmp	r4, r5
 800aea2:	bf88      	it	hi
 800aea4:	2300      	movhi	r3, #0
 800aea6:	3302      	adds	r3, #2
 800aea8:	4403      	add	r3, r0
 800aeaa:	1a18      	subs	r0, r3, r0
 800aeac:	b003      	add	sp, #12
 800aeae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeb0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aeb4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800aeb8:	e7ed      	b.n	800ae96 <__exponent+0x44>
 800aeba:	2330      	movs	r3, #48	@ 0x30
 800aebc:	3130      	adds	r1, #48	@ 0x30
 800aebe:	7083      	strb	r3, [r0, #2]
 800aec0:	70c1      	strb	r1, [r0, #3]
 800aec2:	1d03      	adds	r3, r0, #4
 800aec4:	e7f1      	b.n	800aeaa <__exponent+0x58>
	...

0800aec8 <_printf_float>:
 800aec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aecc:	b08d      	sub	sp, #52	@ 0x34
 800aece:	460c      	mov	r4, r1
 800aed0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800aed4:	4616      	mov	r6, r2
 800aed6:	461f      	mov	r7, r3
 800aed8:	4605      	mov	r5, r0
 800aeda:	f000 fcbb 	bl	800b854 <_localeconv_r>
 800aede:	6803      	ldr	r3, [r0, #0]
 800aee0:	9304      	str	r3, [sp, #16]
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7f5 f9c4 	bl	8000270 <strlen>
 800aee8:	2300      	movs	r3, #0
 800aeea:	930a      	str	r3, [sp, #40]	@ 0x28
 800aeec:	f8d8 3000 	ldr.w	r3, [r8]
 800aef0:	9005      	str	r0, [sp, #20]
 800aef2:	3307      	adds	r3, #7
 800aef4:	f023 0307 	bic.w	r3, r3, #7
 800aef8:	f103 0208 	add.w	r2, r3, #8
 800aefc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800af00:	f8d4 b000 	ldr.w	fp, [r4]
 800af04:	f8c8 2000 	str.w	r2, [r8]
 800af08:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800af10:	9307      	str	r3, [sp, #28]
 800af12:	f8cd 8018 	str.w	r8, [sp, #24]
 800af16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800af1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af1e:	4b9c      	ldr	r3, [pc, #624]	@ (800b190 <_printf_float+0x2c8>)
 800af20:	f04f 32ff 	mov.w	r2, #4294967295
 800af24:	f7f5 fe02 	bl	8000b2c <__aeabi_dcmpun>
 800af28:	bb70      	cbnz	r0, 800af88 <_printf_float+0xc0>
 800af2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af2e:	4b98      	ldr	r3, [pc, #608]	@ (800b190 <_printf_float+0x2c8>)
 800af30:	f04f 32ff 	mov.w	r2, #4294967295
 800af34:	f7f5 fddc 	bl	8000af0 <__aeabi_dcmple>
 800af38:	bb30      	cbnz	r0, 800af88 <_printf_float+0xc0>
 800af3a:	2200      	movs	r2, #0
 800af3c:	2300      	movs	r3, #0
 800af3e:	4640      	mov	r0, r8
 800af40:	4649      	mov	r1, r9
 800af42:	f7f5 fdcb 	bl	8000adc <__aeabi_dcmplt>
 800af46:	b110      	cbz	r0, 800af4e <_printf_float+0x86>
 800af48:	232d      	movs	r3, #45	@ 0x2d
 800af4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af4e:	4a91      	ldr	r2, [pc, #580]	@ (800b194 <_printf_float+0x2cc>)
 800af50:	4b91      	ldr	r3, [pc, #580]	@ (800b198 <_printf_float+0x2d0>)
 800af52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800af56:	bf94      	ite	ls
 800af58:	4690      	movls	r8, r2
 800af5a:	4698      	movhi	r8, r3
 800af5c:	2303      	movs	r3, #3
 800af5e:	6123      	str	r3, [r4, #16]
 800af60:	f02b 0304 	bic.w	r3, fp, #4
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	f04f 0900 	mov.w	r9, #0
 800af6a:	9700      	str	r7, [sp, #0]
 800af6c:	4633      	mov	r3, r6
 800af6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800af70:	4621      	mov	r1, r4
 800af72:	4628      	mov	r0, r5
 800af74:	f000 f9d2 	bl	800b31c <_printf_common>
 800af78:	3001      	adds	r0, #1
 800af7a:	f040 808d 	bne.w	800b098 <_printf_float+0x1d0>
 800af7e:	f04f 30ff 	mov.w	r0, #4294967295
 800af82:	b00d      	add	sp, #52	@ 0x34
 800af84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af88:	4642      	mov	r2, r8
 800af8a:	464b      	mov	r3, r9
 800af8c:	4640      	mov	r0, r8
 800af8e:	4649      	mov	r1, r9
 800af90:	f7f5 fdcc 	bl	8000b2c <__aeabi_dcmpun>
 800af94:	b140      	cbz	r0, 800afa8 <_printf_float+0xe0>
 800af96:	464b      	mov	r3, r9
 800af98:	2b00      	cmp	r3, #0
 800af9a:	bfbc      	itt	lt
 800af9c:	232d      	movlt	r3, #45	@ 0x2d
 800af9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800afa2:	4a7e      	ldr	r2, [pc, #504]	@ (800b19c <_printf_float+0x2d4>)
 800afa4:	4b7e      	ldr	r3, [pc, #504]	@ (800b1a0 <_printf_float+0x2d8>)
 800afa6:	e7d4      	b.n	800af52 <_printf_float+0x8a>
 800afa8:	6863      	ldr	r3, [r4, #4]
 800afaa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800afae:	9206      	str	r2, [sp, #24]
 800afb0:	1c5a      	adds	r2, r3, #1
 800afb2:	d13b      	bne.n	800b02c <_printf_float+0x164>
 800afb4:	2306      	movs	r3, #6
 800afb6:	6063      	str	r3, [r4, #4]
 800afb8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800afbc:	2300      	movs	r3, #0
 800afbe:	6022      	str	r2, [r4, #0]
 800afc0:	9303      	str	r3, [sp, #12]
 800afc2:	ab0a      	add	r3, sp, #40	@ 0x28
 800afc4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800afc8:	ab09      	add	r3, sp, #36	@ 0x24
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	6861      	ldr	r1, [r4, #4]
 800afce:	ec49 8b10 	vmov	d0, r8, r9
 800afd2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800afd6:	4628      	mov	r0, r5
 800afd8:	f7ff fed6 	bl	800ad88 <__cvt>
 800afdc:	9b06      	ldr	r3, [sp, #24]
 800afde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800afe0:	2b47      	cmp	r3, #71	@ 0x47
 800afe2:	4680      	mov	r8, r0
 800afe4:	d129      	bne.n	800b03a <_printf_float+0x172>
 800afe6:	1cc8      	adds	r0, r1, #3
 800afe8:	db02      	blt.n	800aff0 <_printf_float+0x128>
 800afea:	6863      	ldr	r3, [r4, #4]
 800afec:	4299      	cmp	r1, r3
 800afee:	dd41      	ble.n	800b074 <_printf_float+0x1ac>
 800aff0:	f1aa 0a02 	sub.w	sl, sl, #2
 800aff4:	fa5f fa8a 	uxtb.w	sl, sl
 800aff8:	3901      	subs	r1, #1
 800affa:	4652      	mov	r2, sl
 800affc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b000:	9109      	str	r1, [sp, #36]	@ 0x24
 800b002:	f7ff ff26 	bl	800ae52 <__exponent>
 800b006:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b008:	1813      	adds	r3, r2, r0
 800b00a:	2a01      	cmp	r2, #1
 800b00c:	4681      	mov	r9, r0
 800b00e:	6123      	str	r3, [r4, #16]
 800b010:	dc02      	bgt.n	800b018 <_printf_float+0x150>
 800b012:	6822      	ldr	r2, [r4, #0]
 800b014:	07d2      	lsls	r2, r2, #31
 800b016:	d501      	bpl.n	800b01c <_printf_float+0x154>
 800b018:	3301      	adds	r3, #1
 800b01a:	6123      	str	r3, [r4, #16]
 800b01c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b020:	2b00      	cmp	r3, #0
 800b022:	d0a2      	beq.n	800af6a <_printf_float+0xa2>
 800b024:	232d      	movs	r3, #45	@ 0x2d
 800b026:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b02a:	e79e      	b.n	800af6a <_printf_float+0xa2>
 800b02c:	9a06      	ldr	r2, [sp, #24]
 800b02e:	2a47      	cmp	r2, #71	@ 0x47
 800b030:	d1c2      	bne.n	800afb8 <_printf_float+0xf0>
 800b032:	2b00      	cmp	r3, #0
 800b034:	d1c0      	bne.n	800afb8 <_printf_float+0xf0>
 800b036:	2301      	movs	r3, #1
 800b038:	e7bd      	b.n	800afb6 <_printf_float+0xee>
 800b03a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b03e:	d9db      	bls.n	800aff8 <_printf_float+0x130>
 800b040:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b044:	d118      	bne.n	800b078 <_printf_float+0x1b0>
 800b046:	2900      	cmp	r1, #0
 800b048:	6863      	ldr	r3, [r4, #4]
 800b04a:	dd0b      	ble.n	800b064 <_printf_float+0x19c>
 800b04c:	6121      	str	r1, [r4, #16]
 800b04e:	b913      	cbnz	r3, 800b056 <_printf_float+0x18e>
 800b050:	6822      	ldr	r2, [r4, #0]
 800b052:	07d0      	lsls	r0, r2, #31
 800b054:	d502      	bpl.n	800b05c <_printf_float+0x194>
 800b056:	3301      	adds	r3, #1
 800b058:	440b      	add	r3, r1
 800b05a:	6123      	str	r3, [r4, #16]
 800b05c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b05e:	f04f 0900 	mov.w	r9, #0
 800b062:	e7db      	b.n	800b01c <_printf_float+0x154>
 800b064:	b913      	cbnz	r3, 800b06c <_printf_float+0x1a4>
 800b066:	6822      	ldr	r2, [r4, #0]
 800b068:	07d2      	lsls	r2, r2, #31
 800b06a:	d501      	bpl.n	800b070 <_printf_float+0x1a8>
 800b06c:	3302      	adds	r3, #2
 800b06e:	e7f4      	b.n	800b05a <_printf_float+0x192>
 800b070:	2301      	movs	r3, #1
 800b072:	e7f2      	b.n	800b05a <_printf_float+0x192>
 800b074:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b078:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b07a:	4299      	cmp	r1, r3
 800b07c:	db05      	blt.n	800b08a <_printf_float+0x1c2>
 800b07e:	6823      	ldr	r3, [r4, #0]
 800b080:	6121      	str	r1, [r4, #16]
 800b082:	07d8      	lsls	r0, r3, #31
 800b084:	d5ea      	bpl.n	800b05c <_printf_float+0x194>
 800b086:	1c4b      	adds	r3, r1, #1
 800b088:	e7e7      	b.n	800b05a <_printf_float+0x192>
 800b08a:	2900      	cmp	r1, #0
 800b08c:	bfd4      	ite	le
 800b08e:	f1c1 0202 	rsble	r2, r1, #2
 800b092:	2201      	movgt	r2, #1
 800b094:	4413      	add	r3, r2
 800b096:	e7e0      	b.n	800b05a <_printf_float+0x192>
 800b098:	6823      	ldr	r3, [r4, #0]
 800b09a:	055a      	lsls	r2, r3, #21
 800b09c:	d407      	bmi.n	800b0ae <_printf_float+0x1e6>
 800b09e:	6923      	ldr	r3, [r4, #16]
 800b0a0:	4642      	mov	r2, r8
 800b0a2:	4631      	mov	r1, r6
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	47b8      	blx	r7
 800b0a8:	3001      	adds	r0, #1
 800b0aa:	d12b      	bne.n	800b104 <_printf_float+0x23c>
 800b0ac:	e767      	b.n	800af7e <_printf_float+0xb6>
 800b0ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b0b2:	f240 80dd 	bls.w	800b270 <_printf_float+0x3a8>
 800b0b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	2300      	movs	r3, #0
 800b0be:	f7f5 fd03 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	d033      	beq.n	800b12e <_printf_float+0x266>
 800b0c6:	4a37      	ldr	r2, [pc, #220]	@ (800b1a4 <_printf_float+0x2dc>)
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	4631      	mov	r1, r6
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	47b8      	blx	r7
 800b0d0:	3001      	adds	r0, #1
 800b0d2:	f43f af54 	beq.w	800af7e <_printf_float+0xb6>
 800b0d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b0da:	4543      	cmp	r3, r8
 800b0dc:	db02      	blt.n	800b0e4 <_printf_float+0x21c>
 800b0de:	6823      	ldr	r3, [r4, #0]
 800b0e0:	07d8      	lsls	r0, r3, #31
 800b0e2:	d50f      	bpl.n	800b104 <_printf_float+0x23c>
 800b0e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0e8:	4631      	mov	r1, r6
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	47b8      	blx	r7
 800b0ee:	3001      	adds	r0, #1
 800b0f0:	f43f af45 	beq.w	800af7e <_printf_float+0xb6>
 800b0f4:	f04f 0900 	mov.w	r9, #0
 800b0f8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b0fc:	f104 0a1a 	add.w	sl, r4, #26
 800b100:	45c8      	cmp	r8, r9
 800b102:	dc09      	bgt.n	800b118 <_printf_float+0x250>
 800b104:	6823      	ldr	r3, [r4, #0]
 800b106:	079b      	lsls	r3, r3, #30
 800b108:	f100 8103 	bmi.w	800b312 <_printf_float+0x44a>
 800b10c:	68e0      	ldr	r0, [r4, #12]
 800b10e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b110:	4298      	cmp	r0, r3
 800b112:	bfb8      	it	lt
 800b114:	4618      	movlt	r0, r3
 800b116:	e734      	b.n	800af82 <_printf_float+0xba>
 800b118:	2301      	movs	r3, #1
 800b11a:	4652      	mov	r2, sl
 800b11c:	4631      	mov	r1, r6
 800b11e:	4628      	mov	r0, r5
 800b120:	47b8      	blx	r7
 800b122:	3001      	adds	r0, #1
 800b124:	f43f af2b 	beq.w	800af7e <_printf_float+0xb6>
 800b128:	f109 0901 	add.w	r9, r9, #1
 800b12c:	e7e8      	b.n	800b100 <_printf_float+0x238>
 800b12e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b130:	2b00      	cmp	r3, #0
 800b132:	dc39      	bgt.n	800b1a8 <_printf_float+0x2e0>
 800b134:	4a1b      	ldr	r2, [pc, #108]	@ (800b1a4 <_printf_float+0x2dc>)
 800b136:	2301      	movs	r3, #1
 800b138:	4631      	mov	r1, r6
 800b13a:	4628      	mov	r0, r5
 800b13c:	47b8      	blx	r7
 800b13e:	3001      	adds	r0, #1
 800b140:	f43f af1d 	beq.w	800af7e <_printf_float+0xb6>
 800b144:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b148:	ea59 0303 	orrs.w	r3, r9, r3
 800b14c:	d102      	bne.n	800b154 <_printf_float+0x28c>
 800b14e:	6823      	ldr	r3, [r4, #0]
 800b150:	07d9      	lsls	r1, r3, #31
 800b152:	d5d7      	bpl.n	800b104 <_printf_float+0x23c>
 800b154:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b158:	4631      	mov	r1, r6
 800b15a:	4628      	mov	r0, r5
 800b15c:	47b8      	blx	r7
 800b15e:	3001      	adds	r0, #1
 800b160:	f43f af0d 	beq.w	800af7e <_printf_float+0xb6>
 800b164:	f04f 0a00 	mov.w	sl, #0
 800b168:	f104 0b1a 	add.w	fp, r4, #26
 800b16c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b16e:	425b      	negs	r3, r3
 800b170:	4553      	cmp	r3, sl
 800b172:	dc01      	bgt.n	800b178 <_printf_float+0x2b0>
 800b174:	464b      	mov	r3, r9
 800b176:	e793      	b.n	800b0a0 <_printf_float+0x1d8>
 800b178:	2301      	movs	r3, #1
 800b17a:	465a      	mov	r2, fp
 800b17c:	4631      	mov	r1, r6
 800b17e:	4628      	mov	r0, r5
 800b180:	47b8      	blx	r7
 800b182:	3001      	adds	r0, #1
 800b184:	f43f aefb 	beq.w	800af7e <_printf_float+0xb6>
 800b188:	f10a 0a01 	add.w	sl, sl, #1
 800b18c:	e7ee      	b.n	800b16c <_printf_float+0x2a4>
 800b18e:	bf00      	nop
 800b190:	7fefffff 	.word	0x7fefffff
 800b194:	0800d8f9 	.word	0x0800d8f9
 800b198:	0800d8fd 	.word	0x0800d8fd
 800b19c:	0800d901 	.word	0x0800d901
 800b1a0:	0800d905 	.word	0x0800d905
 800b1a4:	0800d909 	.word	0x0800d909
 800b1a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b1aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b1ae:	4553      	cmp	r3, sl
 800b1b0:	bfa8      	it	ge
 800b1b2:	4653      	movge	r3, sl
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	4699      	mov	r9, r3
 800b1b8:	dc36      	bgt.n	800b228 <_printf_float+0x360>
 800b1ba:	f04f 0b00 	mov.w	fp, #0
 800b1be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1c2:	f104 021a 	add.w	r2, r4, #26
 800b1c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b1c8:	9306      	str	r3, [sp, #24]
 800b1ca:	eba3 0309 	sub.w	r3, r3, r9
 800b1ce:	455b      	cmp	r3, fp
 800b1d0:	dc31      	bgt.n	800b236 <_printf_float+0x36e>
 800b1d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1d4:	459a      	cmp	sl, r3
 800b1d6:	dc3a      	bgt.n	800b24e <_printf_float+0x386>
 800b1d8:	6823      	ldr	r3, [r4, #0]
 800b1da:	07da      	lsls	r2, r3, #31
 800b1dc:	d437      	bmi.n	800b24e <_printf_float+0x386>
 800b1de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1e0:	ebaa 0903 	sub.w	r9, sl, r3
 800b1e4:	9b06      	ldr	r3, [sp, #24]
 800b1e6:	ebaa 0303 	sub.w	r3, sl, r3
 800b1ea:	4599      	cmp	r9, r3
 800b1ec:	bfa8      	it	ge
 800b1ee:	4699      	movge	r9, r3
 800b1f0:	f1b9 0f00 	cmp.w	r9, #0
 800b1f4:	dc33      	bgt.n	800b25e <_printf_float+0x396>
 800b1f6:	f04f 0800 	mov.w	r8, #0
 800b1fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1fe:	f104 0b1a 	add.w	fp, r4, #26
 800b202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b204:	ebaa 0303 	sub.w	r3, sl, r3
 800b208:	eba3 0309 	sub.w	r3, r3, r9
 800b20c:	4543      	cmp	r3, r8
 800b20e:	f77f af79 	ble.w	800b104 <_printf_float+0x23c>
 800b212:	2301      	movs	r3, #1
 800b214:	465a      	mov	r2, fp
 800b216:	4631      	mov	r1, r6
 800b218:	4628      	mov	r0, r5
 800b21a:	47b8      	blx	r7
 800b21c:	3001      	adds	r0, #1
 800b21e:	f43f aeae 	beq.w	800af7e <_printf_float+0xb6>
 800b222:	f108 0801 	add.w	r8, r8, #1
 800b226:	e7ec      	b.n	800b202 <_printf_float+0x33a>
 800b228:	4642      	mov	r2, r8
 800b22a:	4631      	mov	r1, r6
 800b22c:	4628      	mov	r0, r5
 800b22e:	47b8      	blx	r7
 800b230:	3001      	adds	r0, #1
 800b232:	d1c2      	bne.n	800b1ba <_printf_float+0x2f2>
 800b234:	e6a3      	b.n	800af7e <_printf_float+0xb6>
 800b236:	2301      	movs	r3, #1
 800b238:	4631      	mov	r1, r6
 800b23a:	4628      	mov	r0, r5
 800b23c:	9206      	str	r2, [sp, #24]
 800b23e:	47b8      	blx	r7
 800b240:	3001      	adds	r0, #1
 800b242:	f43f ae9c 	beq.w	800af7e <_printf_float+0xb6>
 800b246:	9a06      	ldr	r2, [sp, #24]
 800b248:	f10b 0b01 	add.w	fp, fp, #1
 800b24c:	e7bb      	b.n	800b1c6 <_printf_float+0x2fe>
 800b24e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b252:	4631      	mov	r1, r6
 800b254:	4628      	mov	r0, r5
 800b256:	47b8      	blx	r7
 800b258:	3001      	adds	r0, #1
 800b25a:	d1c0      	bne.n	800b1de <_printf_float+0x316>
 800b25c:	e68f      	b.n	800af7e <_printf_float+0xb6>
 800b25e:	9a06      	ldr	r2, [sp, #24]
 800b260:	464b      	mov	r3, r9
 800b262:	4442      	add	r2, r8
 800b264:	4631      	mov	r1, r6
 800b266:	4628      	mov	r0, r5
 800b268:	47b8      	blx	r7
 800b26a:	3001      	adds	r0, #1
 800b26c:	d1c3      	bne.n	800b1f6 <_printf_float+0x32e>
 800b26e:	e686      	b.n	800af7e <_printf_float+0xb6>
 800b270:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b274:	f1ba 0f01 	cmp.w	sl, #1
 800b278:	dc01      	bgt.n	800b27e <_printf_float+0x3b6>
 800b27a:	07db      	lsls	r3, r3, #31
 800b27c:	d536      	bpl.n	800b2ec <_printf_float+0x424>
 800b27e:	2301      	movs	r3, #1
 800b280:	4642      	mov	r2, r8
 800b282:	4631      	mov	r1, r6
 800b284:	4628      	mov	r0, r5
 800b286:	47b8      	blx	r7
 800b288:	3001      	adds	r0, #1
 800b28a:	f43f ae78 	beq.w	800af7e <_printf_float+0xb6>
 800b28e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b292:	4631      	mov	r1, r6
 800b294:	4628      	mov	r0, r5
 800b296:	47b8      	blx	r7
 800b298:	3001      	adds	r0, #1
 800b29a:	f43f ae70 	beq.w	800af7e <_printf_float+0xb6>
 800b29e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2aa:	f7f5 fc0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2ae:	b9c0      	cbnz	r0, 800b2e2 <_printf_float+0x41a>
 800b2b0:	4653      	mov	r3, sl
 800b2b2:	f108 0201 	add.w	r2, r8, #1
 800b2b6:	4631      	mov	r1, r6
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	47b8      	blx	r7
 800b2bc:	3001      	adds	r0, #1
 800b2be:	d10c      	bne.n	800b2da <_printf_float+0x412>
 800b2c0:	e65d      	b.n	800af7e <_printf_float+0xb6>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	465a      	mov	r2, fp
 800b2c6:	4631      	mov	r1, r6
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	47b8      	blx	r7
 800b2cc:	3001      	adds	r0, #1
 800b2ce:	f43f ae56 	beq.w	800af7e <_printf_float+0xb6>
 800b2d2:	f108 0801 	add.w	r8, r8, #1
 800b2d6:	45d0      	cmp	r8, sl
 800b2d8:	dbf3      	blt.n	800b2c2 <_printf_float+0x3fa>
 800b2da:	464b      	mov	r3, r9
 800b2dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b2e0:	e6df      	b.n	800b0a2 <_printf_float+0x1da>
 800b2e2:	f04f 0800 	mov.w	r8, #0
 800b2e6:	f104 0b1a 	add.w	fp, r4, #26
 800b2ea:	e7f4      	b.n	800b2d6 <_printf_float+0x40e>
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	4642      	mov	r2, r8
 800b2f0:	e7e1      	b.n	800b2b6 <_printf_float+0x3ee>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	464a      	mov	r2, r9
 800b2f6:	4631      	mov	r1, r6
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	47b8      	blx	r7
 800b2fc:	3001      	adds	r0, #1
 800b2fe:	f43f ae3e 	beq.w	800af7e <_printf_float+0xb6>
 800b302:	f108 0801 	add.w	r8, r8, #1
 800b306:	68e3      	ldr	r3, [r4, #12]
 800b308:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b30a:	1a5b      	subs	r3, r3, r1
 800b30c:	4543      	cmp	r3, r8
 800b30e:	dcf0      	bgt.n	800b2f2 <_printf_float+0x42a>
 800b310:	e6fc      	b.n	800b10c <_printf_float+0x244>
 800b312:	f04f 0800 	mov.w	r8, #0
 800b316:	f104 0919 	add.w	r9, r4, #25
 800b31a:	e7f4      	b.n	800b306 <_printf_float+0x43e>

0800b31c <_printf_common>:
 800b31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b320:	4616      	mov	r6, r2
 800b322:	4698      	mov	r8, r3
 800b324:	688a      	ldr	r2, [r1, #8]
 800b326:	690b      	ldr	r3, [r1, #16]
 800b328:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b32c:	4293      	cmp	r3, r2
 800b32e:	bfb8      	it	lt
 800b330:	4613      	movlt	r3, r2
 800b332:	6033      	str	r3, [r6, #0]
 800b334:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b338:	4607      	mov	r7, r0
 800b33a:	460c      	mov	r4, r1
 800b33c:	b10a      	cbz	r2, 800b342 <_printf_common+0x26>
 800b33e:	3301      	adds	r3, #1
 800b340:	6033      	str	r3, [r6, #0]
 800b342:	6823      	ldr	r3, [r4, #0]
 800b344:	0699      	lsls	r1, r3, #26
 800b346:	bf42      	ittt	mi
 800b348:	6833      	ldrmi	r3, [r6, #0]
 800b34a:	3302      	addmi	r3, #2
 800b34c:	6033      	strmi	r3, [r6, #0]
 800b34e:	6825      	ldr	r5, [r4, #0]
 800b350:	f015 0506 	ands.w	r5, r5, #6
 800b354:	d106      	bne.n	800b364 <_printf_common+0x48>
 800b356:	f104 0a19 	add.w	sl, r4, #25
 800b35a:	68e3      	ldr	r3, [r4, #12]
 800b35c:	6832      	ldr	r2, [r6, #0]
 800b35e:	1a9b      	subs	r3, r3, r2
 800b360:	42ab      	cmp	r3, r5
 800b362:	dc26      	bgt.n	800b3b2 <_printf_common+0x96>
 800b364:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b368:	6822      	ldr	r2, [r4, #0]
 800b36a:	3b00      	subs	r3, #0
 800b36c:	bf18      	it	ne
 800b36e:	2301      	movne	r3, #1
 800b370:	0692      	lsls	r2, r2, #26
 800b372:	d42b      	bmi.n	800b3cc <_printf_common+0xb0>
 800b374:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b378:	4641      	mov	r1, r8
 800b37a:	4638      	mov	r0, r7
 800b37c:	47c8      	blx	r9
 800b37e:	3001      	adds	r0, #1
 800b380:	d01e      	beq.n	800b3c0 <_printf_common+0xa4>
 800b382:	6823      	ldr	r3, [r4, #0]
 800b384:	6922      	ldr	r2, [r4, #16]
 800b386:	f003 0306 	and.w	r3, r3, #6
 800b38a:	2b04      	cmp	r3, #4
 800b38c:	bf02      	ittt	eq
 800b38e:	68e5      	ldreq	r5, [r4, #12]
 800b390:	6833      	ldreq	r3, [r6, #0]
 800b392:	1aed      	subeq	r5, r5, r3
 800b394:	68a3      	ldr	r3, [r4, #8]
 800b396:	bf0c      	ite	eq
 800b398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b39c:	2500      	movne	r5, #0
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	bfc4      	itt	gt
 800b3a2:	1a9b      	subgt	r3, r3, r2
 800b3a4:	18ed      	addgt	r5, r5, r3
 800b3a6:	2600      	movs	r6, #0
 800b3a8:	341a      	adds	r4, #26
 800b3aa:	42b5      	cmp	r5, r6
 800b3ac:	d11a      	bne.n	800b3e4 <_printf_common+0xc8>
 800b3ae:	2000      	movs	r0, #0
 800b3b0:	e008      	b.n	800b3c4 <_printf_common+0xa8>
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	4652      	mov	r2, sl
 800b3b6:	4641      	mov	r1, r8
 800b3b8:	4638      	mov	r0, r7
 800b3ba:	47c8      	blx	r9
 800b3bc:	3001      	adds	r0, #1
 800b3be:	d103      	bne.n	800b3c8 <_printf_common+0xac>
 800b3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3c8:	3501      	adds	r5, #1
 800b3ca:	e7c6      	b.n	800b35a <_printf_common+0x3e>
 800b3cc:	18e1      	adds	r1, r4, r3
 800b3ce:	1c5a      	adds	r2, r3, #1
 800b3d0:	2030      	movs	r0, #48	@ 0x30
 800b3d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b3d6:	4422      	add	r2, r4
 800b3d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b3dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b3e0:	3302      	adds	r3, #2
 800b3e2:	e7c7      	b.n	800b374 <_printf_common+0x58>
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	4622      	mov	r2, r4
 800b3e8:	4641      	mov	r1, r8
 800b3ea:	4638      	mov	r0, r7
 800b3ec:	47c8      	blx	r9
 800b3ee:	3001      	adds	r0, #1
 800b3f0:	d0e6      	beq.n	800b3c0 <_printf_common+0xa4>
 800b3f2:	3601      	adds	r6, #1
 800b3f4:	e7d9      	b.n	800b3aa <_printf_common+0x8e>
	...

0800b3f8 <_printf_i>:
 800b3f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3fc:	7e0f      	ldrb	r7, [r1, #24]
 800b3fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b400:	2f78      	cmp	r7, #120	@ 0x78
 800b402:	4691      	mov	r9, r2
 800b404:	4680      	mov	r8, r0
 800b406:	460c      	mov	r4, r1
 800b408:	469a      	mov	sl, r3
 800b40a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b40e:	d807      	bhi.n	800b420 <_printf_i+0x28>
 800b410:	2f62      	cmp	r7, #98	@ 0x62
 800b412:	d80a      	bhi.n	800b42a <_printf_i+0x32>
 800b414:	2f00      	cmp	r7, #0
 800b416:	f000 80d2 	beq.w	800b5be <_printf_i+0x1c6>
 800b41a:	2f58      	cmp	r7, #88	@ 0x58
 800b41c:	f000 80b9 	beq.w	800b592 <_printf_i+0x19a>
 800b420:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b424:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b428:	e03a      	b.n	800b4a0 <_printf_i+0xa8>
 800b42a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b42e:	2b15      	cmp	r3, #21
 800b430:	d8f6      	bhi.n	800b420 <_printf_i+0x28>
 800b432:	a101      	add	r1, pc, #4	@ (adr r1, 800b438 <_printf_i+0x40>)
 800b434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b438:	0800b491 	.word	0x0800b491
 800b43c:	0800b4a5 	.word	0x0800b4a5
 800b440:	0800b421 	.word	0x0800b421
 800b444:	0800b421 	.word	0x0800b421
 800b448:	0800b421 	.word	0x0800b421
 800b44c:	0800b421 	.word	0x0800b421
 800b450:	0800b4a5 	.word	0x0800b4a5
 800b454:	0800b421 	.word	0x0800b421
 800b458:	0800b421 	.word	0x0800b421
 800b45c:	0800b421 	.word	0x0800b421
 800b460:	0800b421 	.word	0x0800b421
 800b464:	0800b5a5 	.word	0x0800b5a5
 800b468:	0800b4cf 	.word	0x0800b4cf
 800b46c:	0800b55f 	.word	0x0800b55f
 800b470:	0800b421 	.word	0x0800b421
 800b474:	0800b421 	.word	0x0800b421
 800b478:	0800b5c7 	.word	0x0800b5c7
 800b47c:	0800b421 	.word	0x0800b421
 800b480:	0800b4cf 	.word	0x0800b4cf
 800b484:	0800b421 	.word	0x0800b421
 800b488:	0800b421 	.word	0x0800b421
 800b48c:	0800b567 	.word	0x0800b567
 800b490:	6833      	ldr	r3, [r6, #0]
 800b492:	1d1a      	adds	r2, r3, #4
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	6032      	str	r2, [r6, #0]
 800b498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b49c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e09d      	b.n	800b5e0 <_printf_i+0x1e8>
 800b4a4:	6833      	ldr	r3, [r6, #0]
 800b4a6:	6820      	ldr	r0, [r4, #0]
 800b4a8:	1d19      	adds	r1, r3, #4
 800b4aa:	6031      	str	r1, [r6, #0]
 800b4ac:	0606      	lsls	r6, r0, #24
 800b4ae:	d501      	bpl.n	800b4b4 <_printf_i+0xbc>
 800b4b0:	681d      	ldr	r5, [r3, #0]
 800b4b2:	e003      	b.n	800b4bc <_printf_i+0xc4>
 800b4b4:	0645      	lsls	r5, r0, #25
 800b4b6:	d5fb      	bpl.n	800b4b0 <_printf_i+0xb8>
 800b4b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b4bc:	2d00      	cmp	r5, #0
 800b4be:	da03      	bge.n	800b4c8 <_printf_i+0xd0>
 800b4c0:	232d      	movs	r3, #45	@ 0x2d
 800b4c2:	426d      	negs	r5, r5
 800b4c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4c8:	4859      	ldr	r0, [pc, #356]	@ (800b630 <_printf_i+0x238>)
 800b4ca:	230a      	movs	r3, #10
 800b4cc:	e011      	b.n	800b4f2 <_printf_i+0xfa>
 800b4ce:	6821      	ldr	r1, [r4, #0]
 800b4d0:	6833      	ldr	r3, [r6, #0]
 800b4d2:	0608      	lsls	r0, r1, #24
 800b4d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b4d8:	d402      	bmi.n	800b4e0 <_printf_i+0xe8>
 800b4da:	0649      	lsls	r1, r1, #25
 800b4dc:	bf48      	it	mi
 800b4de:	b2ad      	uxthmi	r5, r5
 800b4e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b4e2:	4853      	ldr	r0, [pc, #332]	@ (800b630 <_printf_i+0x238>)
 800b4e4:	6033      	str	r3, [r6, #0]
 800b4e6:	bf14      	ite	ne
 800b4e8:	230a      	movne	r3, #10
 800b4ea:	2308      	moveq	r3, #8
 800b4ec:	2100      	movs	r1, #0
 800b4ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b4f2:	6866      	ldr	r6, [r4, #4]
 800b4f4:	60a6      	str	r6, [r4, #8]
 800b4f6:	2e00      	cmp	r6, #0
 800b4f8:	bfa2      	ittt	ge
 800b4fa:	6821      	ldrge	r1, [r4, #0]
 800b4fc:	f021 0104 	bicge.w	r1, r1, #4
 800b500:	6021      	strge	r1, [r4, #0]
 800b502:	b90d      	cbnz	r5, 800b508 <_printf_i+0x110>
 800b504:	2e00      	cmp	r6, #0
 800b506:	d04b      	beq.n	800b5a0 <_printf_i+0x1a8>
 800b508:	4616      	mov	r6, r2
 800b50a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b50e:	fb03 5711 	mls	r7, r3, r1, r5
 800b512:	5dc7      	ldrb	r7, [r0, r7]
 800b514:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b518:	462f      	mov	r7, r5
 800b51a:	42bb      	cmp	r3, r7
 800b51c:	460d      	mov	r5, r1
 800b51e:	d9f4      	bls.n	800b50a <_printf_i+0x112>
 800b520:	2b08      	cmp	r3, #8
 800b522:	d10b      	bne.n	800b53c <_printf_i+0x144>
 800b524:	6823      	ldr	r3, [r4, #0]
 800b526:	07df      	lsls	r7, r3, #31
 800b528:	d508      	bpl.n	800b53c <_printf_i+0x144>
 800b52a:	6923      	ldr	r3, [r4, #16]
 800b52c:	6861      	ldr	r1, [r4, #4]
 800b52e:	4299      	cmp	r1, r3
 800b530:	bfde      	ittt	le
 800b532:	2330      	movle	r3, #48	@ 0x30
 800b534:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b538:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b53c:	1b92      	subs	r2, r2, r6
 800b53e:	6122      	str	r2, [r4, #16]
 800b540:	f8cd a000 	str.w	sl, [sp]
 800b544:	464b      	mov	r3, r9
 800b546:	aa03      	add	r2, sp, #12
 800b548:	4621      	mov	r1, r4
 800b54a:	4640      	mov	r0, r8
 800b54c:	f7ff fee6 	bl	800b31c <_printf_common>
 800b550:	3001      	adds	r0, #1
 800b552:	d14a      	bne.n	800b5ea <_printf_i+0x1f2>
 800b554:	f04f 30ff 	mov.w	r0, #4294967295
 800b558:	b004      	add	sp, #16
 800b55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b55e:	6823      	ldr	r3, [r4, #0]
 800b560:	f043 0320 	orr.w	r3, r3, #32
 800b564:	6023      	str	r3, [r4, #0]
 800b566:	4833      	ldr	r0, [pc, #204]	@ (800b634 <_printf_i+0x23c>)
 800b568:	2778      	movs	r7, #120	@ 0x78
 800b56a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b56e:	6823      	ldr	r3, [r4, #0]
 800b570:	6831      	ldr	r1, [r6, #0]
 800b572:	061f      	lsls	r7, r3, #24
 800b574:	f851 5b04 	ldr.w	r5, [r1], #4
 800b578:	d402      	bmi.n	800b580 <_printf_i+0x188>
 800b57a:	065f      	lsls	r7, r3, #25
 800b57c:	bf48      	it	mi
 800b57e:	b2ad      	uxthmi	r5, r5
 800b580:	6031      	str	r1, [r6, #0]
 800b582:	07d9      	lsls	r1, r3, #31
 800b584:	bf44      	itt	mi
 800b586:	f043 0320 	orrmi.w	r3, r3, #32
 800b58a:	6023      	strmi	r3, [r4, #0]
 800b58c:	b11d      	cbz	r5, 800b596 <_printf_i+0x19e>
 800b58e:	2310      	movs	r3, #16
 800b590:	e7ac      	b.n	800b4ec <_printf_i+0xf4>
 800b592:	4827      	ldr	r0, [pc, #156]	@ (800b630 <_printf_i+0x238>)
 800b594:	e7e9      	b.n	800b56a <_printf_i+0x172>
 800b596:	6823      	ldr	r3, [r4, #0]
 800b598:	f023 0320 	bic.w	r3, r3, #32
 800b59c:	6023      	str	r3, [r4, #0]
 800b59e:	e7f6      	b.n	800b58e <_printf_i+0x196>
 800b5a0:	4616      	mov	r6, r2
 800b5a2:	e7bd      	b.n	800b520 <_printf_i+0x128>
 800b5a4:	6833      	ldr	r3, [r6, #0]
 800b5a6:	6825      	ldr	r5, [r4, #0]
 800b5a8:	6961      	ldr	r1, [r4, #20]
 800b5aa:	1d18      	adds	r0, r3, #4
 800b5ac:	6030      	str	r0, [r6, #0]
 800b5ae:	062e      	lsls	r6, r5, #24
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	d501      	bpl.n	800b5b8 <_printf_i+0x1c0>
 800b5b4:	6019      	str	r1, [r3, #0]
 800b5b6:	e002      	b.n	800b5be <_printf_i+0x1c6>
 800b5b8:	0668      	lsls	r0, r5, #25
 800b5ba:	d5fb      	bpl.n	800b5b4 <_printf_i+0x1bc>
 800b5bc:	8019      	strh	r1, [r3, #0]
 800b5be:	2300      	movs	r3, #0
 800b5c0:	6123      	str	r3, [r4, #16]
 800b5c2:	4616      	mov	r6, r2
 800b5c4:	e7bc      	b.n	800b540 <_printf_i+0x148>
 800b5c6:	6833      	ldr	r3, [r6, #0]
 800b5c8:	1d1a      	adds	r2, r3, #4
 800b5ca:	6032      	str	r2, [r6, #0]
 800b5cc:	681e      	ldr	r6, [r3, #0]
 800b5ce:	6862      	ldr	r2, [r4, #4]
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	4630      	mov	r0, r6
 800b5d4:	f7f4 fdfc 	bl	80001d0 <memchr>
 800b5d8:	b108      	cbz	r0, 800b5de <_printf_i+0x1e6>
 800b5da:	1b80      	subs	r0, r0, r6
 800b5dc:	6060      	str	r0, [r4, #4]
 800b5de:	6863      	ldr	r3, [r4, #4]
 800b5e0:	6123      	str	r3, [r4, #16]
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5e8:	e7aa      	b.n	800b540 <_printf_i+0x148>
 800b5ea:	6923      	ldr	r3, [r4, #16]
 800b5ec:	4632      	mov	r2, r6
 800b5ee:	4649      	mov	r1, r9
 800b5f0:	4640      	mov	r0, r8
 800b5f2:	47d0      	blx	sl
 800b5f4:	3001      	adds	r0, #1
 800b5f6:	d0ad      	beq.n	800b554 <_printf_i+0x15c>
 800b5f8:	6823      	ldr	r3, [r4, #0]
 800b5fa:	079b      	lsls	r3, r3, #30
 800b5fc:	d413      	bmi.n	800b626 <_printf_i+0x22e>
 800b5fe:	68e0      	ldr	r0, [r4, #12]
 800b600:	9b03      	ldr	r3, [sp, #12]
 800b602:	4298      	cmp	r0, r3
 800b604:	bfb8      	it	lt
 800b606:	4618      	movlt	r0, r3
 800b608:	e7a6      	b.n	800b558 <_printf_i+0x160>
 800b60a:	2301      	movs	r3, #1
 800b60c:	4632      	mov	r2, r6
 800b60e:	4649      	mov	r1, r9
 800b610:	4640      	mov	r0, r8
 800b612:	47d0      	blx	sl
 800b614:	3001      	adds	r0, #1
 800b616:	d09d      	beq.n	800b554 <_printf_i+0x15c>
 800b618:	3501      	adds	r5, #1
 800b61a:	68e3      	ldr	r3, [r4, #12]
 800b61c:	9903      	ldr	r1, [sp, #12]
 800b61e:	1a5b      	subs	r3, r3, r1
 800b620:	42ab      	cmp	r3, r5
 800b622:	dcf2      	bgt.n	800b60a <_printf_i+0x212>
 800b624:	e7eb      	b.n	800b5fe <_printf_i+0x206>
 800b626:	2500      	movs	r5, #0
 800b628:	f104 0619 	add.w	r6, r4, #25
 800b62c:	e7f5      	b.n	800b61a <_printf_i+0x222>
 800b62e:	bf00      	nop
 800b630:	0800d90b 	.word	0x0800d90b
 800b634:	0800d91c 	.word	0x0800d91c

0800b638 <std>:
 800b638:	2300      	movs	r3, #0
 800b63a:	b510      	push	{r4, lr}
 800b63c:	4604      	mov	r4, r0
 800b63e:	e9c0 3300 	strd	r3, r3, [r0]
 800b642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b646:	6083      	str	r3, [r0, #8]
 800b648:	8181      	strh	r1, [r0, #12]
 800b64a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b64c:	81c2      	strh	r2, [r0, #14]
 800b64e:	6183      	str	r3, [r0, #24]
 800b650:	4619      	mov	r1, r3
 800b652:	2208      	movs	r2, #8
 800b654:	305c      	adds	r0, #92	@ 0x5c
 800b656:	f000 f8f4 	bl	800b842 <memset>
 800b65a:	4b0d      	ldr	r3, [pc, #52]	@ (800b690 <std+0x58>)
 800b65c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b65e:	4b0d      	ldr	r3, [pc, #52]	@ (800b694 <std+0x5c>)
 800b660:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b662:	4b0d      	ldr	r3, [pc, #52]	@ (800b698 <std+0x60>)
 800b664:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b666:	4b0d      	ldr	r3, [pc, #52]	@ (800b69c <std+0x64>)
 800b668:	6323      	str	r3, [r4, #48]	@ 0x30
 800b66a:	4b0d      	ldr	r3, [pc, #52]	@ (800b6a0 <std+0x68>)
 800b66c:	6224      	str	r4, [r4, #32]
 800b66e:	429c      	cmp	r4, r3
 800b670:	d006      	beq.n	800b680 <std+0x48>
 800b672:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b676:	4294      	cmp	r4, r2
 800b678:	d002      	beq.n	800b680 <std+0x48>
 800b67a:	33d0      	adds	r3, #208	@ 0xd0
 800b67c:	429c      	cmp	r4, r3
 800b67e:	d105      	bne.n	800b68c <std+0x54>
 800b680:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b688:	f000 b958 	b.w	800b93c <__retarget_lock_init_recursive>
 800b68c:	bd10      	pop	{r4, pc}
 800b68e:	bf00      	nop
 800b690:	0800b7bd 	.word	0x0800b7bd
 800b694:	0800b7df 	.word	0x0800b7df
 800b698:	0800b817 	.word	0x0800b817
 800b69c:	0800b83b 	.word	0x0800b83b
 800b6a0:	20002328 	.word	0x20002328

0800b6a4 <stdio_exit_handler>:
 800b6a4:	4a02      	ldr	r2, [pc, #8]	@ (800b6b0 <stdio_exit_handler+0xc>)
 800b6a6:	4903      	ldr	r1, [pc, #12]	@ (800b6b4 <stdio_exit_handler+0x10>)
 800b6a8:	4803      	ldr	r0, [pc, #12]	@ (800b6b8 <stdio_exit_handler+0x14>)
 800b6aa:	f000 b869 	b.w	800b780 <_fwalk_sglue>
 800b6ae:	bf00      	nop
 800b6b0:	20000020 	.word	0x20000020
 800b6b4:	0800d005 	.word	0x0800d005
 800b6b8:	20000030 	.word	0x20000030

0800b6bc <cleanup_stdio>:
 800b6bc:	6841      	ldr	r1, [r0, #4]
 800b6be:	4b0c      	ldr	r3, [pc, #48]	@ (800b6f0 <cleanup_stdio+0x34>)
 800b6c0:	4299      	cmp	r1, r3
 800b6c2:	b510      	push	{r4, lr}
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	d001      	beq.n	800b6cc <cleanup_stdio+0x10>
 800b6c8:	f001 fc9c 	bl	800d004 <_fflush_r>
 800b6cc:	68a1      	ldr	r1, [r4, #8]
 800b6ce:	4b09      	ldr	r3, [pc, #36]	@ (800b6f4 <cleanup_stdio+0x38>)
 800b6d0:	4299      	cmp	r1, r3
 800b6d2:	d002      	beq.n	800b6da <cleanup_stdio+0x1e>
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	f001 fc95 	bl	800d004 <_fflush_r>
 800b6da:	68e1      	ldr	r1, [r4, #12]
 800b6dc:	4b06      	ldr	r3, [pc, #24]	@ (800b6f8 <cleanup_stdio+0x3c>)
 800b6de:	4299      	cmp	r1, r3
 800b6e0:	d004      	beq.n	800b6ec <cleanup_stdio+0x30>
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6e8:	f001 bc8c 	b.w	800d004 <_fflush_r>
 800b6ec:	bd10      	pop	{r4, pc}
 800b6ee:	bf00      	nop
 800b6f0:	20002328 	.word	0x20002328
 800b6f4:	20002390 	.word	0x20002390
 800b6f8:	200023f8 	.word	0x200023f8

0800b6fc <global_stdio_init.part.0>:
 800b6fc:	b510      	push	{r4, lr}
 800b6fe:	4b0b      	ldr	r3, [pc, #44]	@ (800b72c <global_stdio_init.part.0+0x30>)
 800b700:	4c0b      	ldr	r4, [pc, #44]	@ (800b730 <global_stdio_init.part.0+0x34>)
 800b702:	4a0c      	ldr	r2, [pc, #48]	@ (800b734 <global_stdio_init.part.0+0x38>)
 800b704:	601a      	str	r2, [r3, #0]
 800b706:	4620      	mov	r0, r4
 800b708:	2200      	movs	r2, #0
 800b70a:	2104      	movs	r1, #4
 800b70c:	f7ff ff94 	bl	800b638 <std>
 800b710:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b714:	2201      	movs	r2, #1
 800b716:	2109      	movs	r1, #9
 800b718:	f7ff ff8e 	bl	800b638 <std>
 800b71c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b720:	2202      	movs	r2, #2
 800b722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b726:	2112      	movs	r1, #18
 800b728:	f7ff bf86 	b.w	800b638 <std>
 800b72c:	20002460 	.word	0x20002460
 800b730:	20002328 	.word	0x20002328
 800b734:	0800b6a5 	.word	0x0800b6a5

0800b738 <__sfp_lock_acquire>:
 800b738:	4801      	ldr	r0, [pc, #4]	@ (800b740 <__sfp_lock_acquire+0x8>)
 800b73a:	f000 b900 	b.w	800b93e <__retarget_lock_acquire_recursive>
 800b73e:	bf00      	nop
 800b740:	20002469 	.word	0x20002469

0800b744 <__sfp_lock_release>:
 800b744:	4801      	ldr	r0, [pc, #4]	@ (800b74c <__sfp_lock_release+0x8>)
 800b746:	f000 b8fb 	b.w	800b940 <__retarget_lock_release_recursive>
 800b74a:	bf00      	nop
 800b74c:	20002469 	.word	0x20002469

0800b750 <__sinit>:
 800b750:	b510      	push	{r4, lr}
 800b752:	4604      	mov	r4, r0
 800b754:	f7ff fff0 	bl	800b738 <__sfp_lock_acquire>
 800b758:	6a23      	ldr	r3, [r4, #32]
 800b75a:	b11b      	cbz	r3, 800b764 <__sinit+0x14>
 800b75c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b760:	f7ff bff0 	b.w	800b744 <__sfp_lock_release>
 800b764:	4b04      	ldr	r3, [pc, #16]	@ (800b778 <__sinit+0x28>)
 800b766:	6223      	str	r3, [r4, #32]
 800b768:	4b04      	ldr	r3, [pc, #16]	@ (800b77c <__sinit+0x2c>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1f5      	bne.n	800b75c <__sinit+0xc>
 800b770:	f7ff ffc4 	bl	800b6fc <global_stdio_init.part.0>
 800b774:	e7f2      	b.n	800b75c <__sinit+0xc>
 800b776:	bf00      	nop
 800b778:	0800b6bd 	.word	0x0800b6bd
 800b77c:	20002460 	.word	0x20002460

0800b780 <_fwalk_sglue>:
 800b780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b784:	4607      	mov	r7, r0
 800b786:	4688      	mov	r8, r1
 800b788:	4614      	mov	r4, r2
 800b78a:	2600      	movs	r6, #0
 800b78c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b790:	f1b9 0901 	subs.w	r9, r9, #1
 800b794:	d505      	bpl.n	800b7a2 <_fwalk_sglue+0x22>
 800b796:	6824      	ldr	r4, [r4, #0]
 800b798:	2c00      	cmp	r4, #0
 800b79a:	d1f7      	bne.n	800b78c <_fwalk_sglue+0xc>
 800b79c:	4630      	mov	r0, r6
 800b79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7a2:	89ab      	ldrh	r3, [r5, #12]
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d907      	bls.n	800b7b8 <_fwalk_sglue+0x38>
 800b7a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	d003      	beq.n	800b7b8 <_fwalk_sglue+0x38>
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	4638      	mov	r0, r7
 800b7b4:	47c0      	blx	r8
 800b7b6:	4306      	orrs	r6, r0
 800b7b8:	3568      	adds	r5, #104	@ 0x68
 800b7ba:	e7e9      	b.n	800b790 <_fwalk_sglue+0x10>

0800b7bc <__sread>:
 800b7bc:	b510      	push	{r4, lr}
 800b7be:	460c      	mov	r4, r1
 800b7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c4:	f000 f86c 	bl	800b8a0 <_read_r>
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	bfab      	itete	ge
 800b7cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b7ce:	89a3      	ldrhlt	r3, [r4, #12]
 800b7d0:	181b      	addge	r3, r3, r0
 800b7d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b7d6:	bfac      	ite	ge
 800b7d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b7da:	81a3      	strhlt	r3, [r4, #12]
 800b7dc:	bd10      	pop	{r4, pc}

0800b7de <__swrite>:
 800b7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e2:	461f      	mov	r7, r3
 800b7e4:	898b      	ldrh	r3, [r1, #12]
 800b7e6:	05db      	lsls	r3, r3, #23
 800b7e8:	4605      	mov	r5, r0
 800b7ea:	460c      	mov	r4, r1
 800b7ec:	4616      	mov	r6, r2
 800b7ee:	d505      	bpl.n	800b7fc <__swrite+0x1e>
 800b7f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f000 f840 	bl	800b87c <_lseek_r>
 800b7fc:	89a3      	ldrh	r3, [r4, #12]
 800b7fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b802:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b806:	81a3      	strh	r3, [r4, #12]
 800b808:	4632      	mov	r2, r6
 800b80a:	463b      	mov	r3, r7
 800b80c:	4628      	mov	r0, r5
 800b80e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b812:	f000 b857 	b.w	800b8c4 <_write_r>

0800b816 <__sseek>:
 800b816:	b510      	push	{r4, lr}
 800b818:	460c      	mov	r4, r1
 800b81a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b81e:	f000 f82d 	bl	800b87c <_lseek_r>
 800b822:	1c43      	adds	r3, r0, #1
 800b824:	89a3      	ldrh	r3, [r4, #12]
 800b826:	bf15      	itete	ne
 800b828:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b82a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b82e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b832:	81a3      	strheq	r3, [r4, #12]
 800b834:	bf18      	it	ne
 800b836:	81a3      	strhne	r3, [r4, #12]
 800b838:	bd10      	pop	{r4, pc}

0800b83a <__sclose>:
 800b83a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b83e:	f000 b80d 	b.w	800b85c <_close_r>

0800b842 <memset>:
 800b842:	4402      	add	r2, r0
 800b844:	4603      	mov	r3, r0
 800b846:	4293      	cmp	r3, r2
 800b848:	d100      	bne.n	800b84c <memset+0xa>
 800b84a:	4770      	bx	lr
 800b84c:	f803 1b01 	strb.w	r1, [r3], #1
 800b850:	e7f9      	b.n	800b846 <memset+0x4>
	...

0800b854 <_localeconv_r>:
 800b854:	4800      	ldr	r0, [pc, #0]	@ (800b858 <_localeconv_r+0x4>)
 800b856:	4770      	bx	lr
 800b858:	2000016c 	.word	0x2000016c

0800b85c <_close_r>:
 800b85c:	b538      	push	{r3, r4, r5, lr}
 800b85e:	4d06      	ldr	r5, [pc, #24]	@ (800b878 <_close_r+0x1c>)
 800b860:	2300      	movs	r3, #0
 800b862:	4604      	mov	r4, r0
 800b864:	4608      	mov	r0, r1
 800b866:	602b      	str	r3, [r5, #0]
 800b868:	f7f6 fcd6 	bl	8002218 <_close>
 800b86c:	1c43      	adds	r3, r0, #1
 800b86e:	d102      	bne.n	800b876 <_close_r+0x1a>
 800b870:	682b      	ldr	r3, [r5, #0]
 800b872:	b103      	cbz	r3, 800b876 <_close_r+0x1a>
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	bd38      	pop	{r3, r4, r5, pc}
 800b878:	20002464 	.word	0x20002464

0800b87c <_lseek_r>:
 800b87c:	b538      	push	{r3, r4, r5, lr}
 800b87e:	4d07      	ldr	r5, [pc, #28]	@ (800b89c <_lseek_r+0x20>)
 800b880:	4604      	mov	r4, r0
 800b882:	4608      	mov	r0, r1
 800b884:	4611      	mov	r1, r2
 800b886:	2200      	movs	r2, #0
 800b888:	602a      	str	r2, [r5, #0]
 800b88a:	461a      	mov	r2, r3
 800b88c:	f7f6 fceb 	bl	8002266 <_lseek>
 800b890:	1c43      	adds	r3, r0, #1
 800b892:	d102      	bne.n	800b89a <_lseek_r+0x1e>
 800b894:	682b      	ldr	r3, [r5, #0]
 800b896:	b103      	cbz	r3, 800b89a <_lseek_r+0x1e>
 800b898:	6023      	str	r3, [r4, #0]
 800b89a:	bd38      	pop	{r3, r4, r5, pc}
 800b89c:	20002464 	.word	0x20002464

0800b8a0 <_read_r>:
 800b8a0:	b538      	push	{r3, r4, r5, lr}
 800b8a2:	4d07      	ldr	r5, [pc, #28]	@ (800b8c0 <_read_r+0x20>)
 800b8a4:	4604      	mov	r4, r0
 800b8a6:	4608      	mov	r0, r1
 800b8a8:	4611      	mov	r1, r2
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	602a      	str	r2, [r5, #0]
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	f7f6 fc79 	bl	80021a6 <_read>
 800b8b4:	1c43      	adds	r3, r0, #1
 800b8b6:	d102      	bne.n	800b8be <_read_r+0x1e>
 800b8b8:	682b      	ldr	r3, [r5, #0]
 800b8ba:	b103      	cbz	r3, 800b8be <_read_r+0x1e>
 800b8bc:	6023      	str	r3, [r4, #0]
 800b8be:	bd38      	pop	{r3, r4, r5, pc}
 800b8c0:	20002464 	.word	0x20002464

0800b8c4 <_write_r>:
 800b8c4:	b538      	push	{r3, r4, r5, lr}
 800b8c6:	4d07      	ldr	r5, [pc, #28]	@ (800b8e4 <_write_r+0x20>)
 800b8c8:	4604      	mov	r4, r0
 800b8ca:	4608      	mov	r0, r1
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	602a      	str	r2, [r5, #0]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	f7f6 fc84 	bl	80021e0 <_write>
 800b8d8:	1c43      	adds	r3, r0, #1
 800b8da:	d102      	bne.n	800b8e2 <_write_r+0x1e>
 800b8dc:	682b      	ldr	r3, [r5, #0]
 800b8de:	b103      	cbz	r3, 800b8e2 <_write_r+0x1e>
 800b8e0:	6023      	str	r3, [r4, #0]
 800b8e2:	bd38      	pop	{r3, r4, r5, pc}
 800b8e4:	20002464 	.word	0x20002464

0800b8e8 <__errno>:
 800b8e8:	4b01      	ldr	r3, [pc, #4]	@ (800b8f0 <__errno+0x8>)
 800b8ea:	6818      	ldr	r0, [r3, #0]
 800b8ec:	4770      	bx	lr
 800b8ee:	bf00      	nop
 800b8f0:	2000002c 	.word	0x2000002c

0800b8f4 <__libc_init_array>:
 800b8f4:	b570      	push	{r4, r5, r6, lr}
 800b8f6:	4d0d      	ldr	r5, [pc, #52]	@ (800b92c <__libc_init_array+0x38>)
 800b8f8:	4c0d      	ldr	r4, [pc, #52]	@ (800b930 <__libc_init_array+0x3c>)
 800b8fa:	1b64      	subs	r4, r4, r5
 800b8fc:	10a4      	asrs	r4, r4, #2
 800b8fe:	2600      	movs	r6, #0
 800b900:	42a6      	cmp	r6, r4
 800b902:	d109      	bne.n	800b918 <__libc_init_array+0x24>
 800b904:	4d0b      	ldr	r5, [pc, #44]	@ (800b934 <__libc_init_array+0x40>)
 800b906:	4c0c      	ldr	r4, [pc, #48]	@ (800b938 <__libc_init_array+0x44>)
 800b908:	f001 febc 	bl	800d684 <_init>
 800b90c:	1b64      	subs	r4, r4, r5
 800b90e:	10a4      	asrs	r4, r4, #2
 800b910:	2600      	movs	r6, #0
 800b912:	42a6      	cmp	r6, r4
 800b914:	d105      	bne.n	800b922 <__libc_init_array+0x2e>
 800b916:	bd70      	pop	{r4, r5, r6, pc}
 800b918:	f855 3b04 	ldr.w	r3, [r5], #4
 800b91c:	4798      	blx	r3
 800b91e:	3601      	adds	r6, #1
 800b920:	e7ee      	b.n	800b900 <__libc_init_array+0xc>
 800b922:	f855 3b04 	ldr.w	r3, [r5], #4
 800b926:	4798      	blx	r3
 800b928:	3601      	adds	r6, #1
 800b92a:	e7f2      	b.n	800b912 <__libc_init_array+0x1e>
 800b92c:	0800db70 	.word	0x0800db70
 800b930:	0800db70 	.word	0x0800db70
 800b934:	0800db70 	.word	0x0800db70
 800b938:	0800db74 	.word	0x0800db74

0800b93c <__retarget_lock_init_recursive>:
 800b93c:	4770      	bx	lr

0800b93e <__retarget_lock_acquire_recursive>:
 800b93e:	4770      	bx	lr

0800b940 <__retarget_lock_release_recursive>:
 800b940:	4770      	bx	lr

0800b942 <memcpy>:
 800b942:	440a      	add	r2, r1
 800b944:	4291      	cmp	r1, r2
 800b946:	f100 33ff 	add.w	r3, r0, #4294967295
 800b94a:	d100      	bne.n	800b94e <memcpy+0xc>
 800b94c:	4770      	bx	lr
 800b94e:	b510      	push	{r4, lr}
 800b950:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b954:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b958:	4291      	cmp	r1, r2
 800b95a:	d1f9      	bne.n	800b950 <memcpy+0xe>
 800b95c:	bd10      	pop	{r4, pc}

0800b95e <quorem>:
 800b95e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b962:	6903      	ldr	r3, [r0, #16]
 800b964:	690c      	ldr	r4, [r1, #16]
 800b966:	42a3      	cmp	r3, r4
 800b968:	4607      	mov	r7, r0
 800b96a:	db7e      	blt.n	800ba6a <quorem+0x10c>
 800b96c:	3c01      	subs	r4, #1
 800b96e:	f101 0814 	add.w	r8, r1, #20
 800b972:	00a3      	lsls	r3, r4, #2
 800b974:	f100 0514 	add.w	r5, r0, #20
 800b978:	9300      	str	r3, [sp, #0]
 800b97a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b97e:	9301      	str	r3, [sp, #4]
 800b980:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b984:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b988:	3301      	adds	r3, #1
 800b98a:	429a      	cmp	r2, r3
 800b98c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b990:	fbb2 f6f3 	udiv	r6, r2, r3
 800b994:	d32e      	bcc.n	800b9f4 <quorem+0x96>
 800b996:	f04f 0a00 	mov.w	sl, #0
 800b99a:	46c4      	mov	ip, r8
 800b99c:	46ae      	mov	lr, r5
 800b99e:	46d3      	mov	fp, sl
 800b9a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b9a4:	b298      	uxth	r0, r3
 800b9a6:	fb06 a000 	mla	r0, r6, r0, sl
 800b9aa:	0c02      	lsrs	r2, r0, #16
 800b9ac:	0c1b      	lsrs	r3, r3, #16
 800b9ae:	fb06 2303 	mla	r3, r6, r3, r2
 800b9b2:	f8de 2000 	ldr.w	r2, [lr]
 800b9b6:	b280      	uxth	r0, r0
 800b9b8:	b292      	uxth	r2, r2
 800b9ba:	1a12      	subs	r2, r2, r0
 800b9bc:	445a      	add	r2, fp
 800b9be:	f8de 0000 	ldr.w	r0, [lr]
 800b9c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b9cc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b9d0:	b292      	uxth	r2, r2
 800b9d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b9d6:	45e1      	cmp	r9, ip
 800b9d8:	f84e 2b04 	str.w	r2, [lr], #4
 800b9dc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b9e0:	d2de      	bcs.n	800b9a0 <quorem+0x42>
 800b9e2:	9b00      	ldr	r3, [sp, #0]
 800b9e4:	58eb      	ldr	r3, [r5, r3]
 800b9e6:	b92b      	cbnz	r3, 800b9f4 <quorem+0x96>
 800b9e8:	9b01      	ldr	r3, [sp, #4]
 800b9ea:	3b04      	subs	r3, #4
 800b9ec:	429d      	cmp	r5, r3
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	d32f      	bcc.n	800ba52 <quorem+0xf4>
 800b9f2:	613c      	str	r4, [r7, #16]
 800b9f4:	4638      	mov	r0, r7
 800b9f6:	f001 f979 	bl	800ccec <__mcmp>
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	db25      	blt.n	800ba4a <quorem+0xec>
 800b9fe:	4629      	mov	r1, r5
 800ba00:	2000      	movs	r0, #0
 800ba02:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba06:	f8d1 c000 	ldr.w	ip, [r1]
 800ba0a:	fa1f fe82 	uxth.w	lr, r2
 800ba0e:	fa1f f38c 	uxth.w	r3, ip
 800ba12:	eba3 030e 	sub.w	r3, r3, lr
 800ba16:	4403      	add	r3, r0
 800ba18:	0c12      	lsrs	r2, r2, #16
 800ba1a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ba1e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba28:	45c1      	cmp	r9, r8
 800ba2a:	f841 3b04 	str.w	r3, [r1], #4
 800ba2e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ba32:	d2e6      	bcs.n	800ba02 <quorem+0xa4>
 800ba34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba3c:	b922      	cbnz	r2, 800ba48 <quorem+0xea>
 800ba3e:	3b04      	subs	r3, #4
 800ba40:	429d      	cmp	r5, r3
 800ba42:	461a      	mov	r2, r3
 800ba44:	d30b      	bcc.n	800ba5e <quorem+0x100>
 800ba46:	613c      	str	r4, [r7, #16]
 800ba48:	3601      	adds	r6, #1
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	b003      	add	sp, #12
 800ba4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba52:	6812      	ldr	r2, [r2, #0]
 800ba54:	3b04      	subs	r3, #4
 800ba56:	2a00      	cmp	r2, #0
 800ba58:	d1cb      	bne.n	800b9f2 <quorem+0x94>
 800ba5a:	3c01      	subs	r4, #1
 800ba5c:	e7c6      	b.n	800b9ec <quorem+0x8e>
 800ba5e:	6812      	ldr	r2, [r2, #0]
 800ba60:	3b04      	subs	r3, #4
 800ba62:	2a00      	cmp	r2, #0
 800ba64:	d1ef      	bne.n	800ba46 <quorem+0xe8>
 800ba66:	3c01      	subs	r4, #1
 800ba68:	e7ea      	b.n	800ba40 <quorem+0xe2>
 800ba6a:	2000      	movs	r0, #0
 800ba6c:	e7ee      	b.n	800ba4c <quorem+0xee>
	...

0800ba70 <_dtoa_r>:
 800ba70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba74:	69c7      	ldr	r7, [r0, #28]
 800ba76:	b099      	sub	sp, #100	@ 0x64
 800ba78:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ba7c:	ec55 4b10 	vmov	r4, r5, d0
 800ba80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ba82:	9109      	str	r1, [sp, #36]	@ 0x24
 800ba84:	4683      	mov	fp, r0
 800ba86:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba88:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba8a:	b97f      	cbnz	r7, 800baac <_dtoa_r+0x3c>
 800ba8c:	2010      	movs	r0, #16
 800ba8e:	f000 fdfd 	bl	800c68c <malloc>
 800ba92:	4602      	mov	r2, r0
 800ba94:	f8cb 001c 	str.w	r0, [fp, #28]
 800ba98:	b920      	cbnz	r0, 800baa4 <_dtoa_r+0x34>
 800ba9a:	4ba7      	ldr	r3, [pc, #668]	@ (800bd38 <_dtoa_r+0x2c8>)
 800ba9c:	21ef      	movs	r1, #239	@ 0xef
 800ba9e:	48a7      	ldr	r0, [pc, #668]	@ (800bd3c <_dtoa_r+0x2cc>)
 800baa0:	f001 fae8 	bl	800d074 <__assert_func>
 800baa4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800baa8:	6007      	str	r7, [r0, #0]
 800baaa:	60c7      	str	r7, [r0, #12]
 800baac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bab0:	6819      	ldr	r1, [r3, #0]
 800bab2:	b159      	cbz	r1, 800bacc <_dtoa_r+0x5c>
 800bab4:	685a      	ldr	r2, [r3, #4]
 800bab6:	604a      	str	r2, [r1, #4]
 800bab8:	2301      	movs	r3, #1
 800baba:	4093      	lsls	r3, r2
 800babc:	608b      	str	r3, [r1, #8]
 800babe:	4658      	mov	r0, fp
 800bac0:	f000 feda 	bl	800c878 <_Bfree>
 800bac4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bac8:	2200      	movs	r2, #0
 800baca:	601a      	str	r2, [r3, #0]
 800bacc:	1e2b      	subs	r3, r5, #0
 800bace:	bfb9      	ittee	lt
 800bad0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bad4:	9303      	strlt	r3, [sp, #12]
 800bad6:	2300      	movge	r3, #0
 800bad8:	6033      	strge	r3, [r6, #0]
 800bada:	9f03      	ldr	r7, [sp, #12]
 800badc:	4b98      	ldr	r3, [pc, #608]	@ (800bd40 <_dtoa_r+0x2d0>)
 800bade:	bfbc      	itt	lt
 800bae0:	2201      	movlt	r2, #1
 800bae2:	6032      	strlt	r2, [r6, #0]
 800bae4:	43bb      	bics	r3, r7
 800bae6:	d112      	bne.n	800bb0e <_dtoa_r+0x9e>
 800bae8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800baea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800baee:	6013      	str	r3, [r2, #0]
 800baf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800baf4:	4323      	orrs	r3, r4
 800baf6:	f000 854d 	beq.w	800c594 <_dtoa_r+0xb24>
 800bafa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bafc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bd54 <_dtoa_r+0x2e4>
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f000 854f 	beq.w	800c5a4 <_dtoa_r+0xb34>
 800bb06:	f10a 0303 	add.w	r3, sl, #3
 800bb0a:	f000 bd49 	b.w	800c5a0 <_dtoa_r+0xb30>
 800bb0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb12:	2200      	movs	r2, #0
 800bb14:	ec51 0b17 	vmov	r0, r1, d7
 800bb18:	2300      	movs	r3, #0
 800bb1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bb1e:	f7f4 ffd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb22:	4680      	mov	r8, r0
 800bb24:	b158      	cbz	r0, 800bb3e <_dtoa_r+0xce>
 800bb26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bb28:	2301      	movs	r3, #1
 800bb2a:	6013      	str	r3, [r2, #0]
 800bb2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb2e:	b113      	cbz	r3, 800bb36 <_dtoa_r+0xc6>
 800bb30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bb32:	4b84      	ldr	r3, [pc, #528]	@ (800bd44 <_dtoa_r+0x2d4>)
 800bb34:	6013      	str	r3, [r2, #0]
 800bb36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bd58 <_dtoa_r+0x2e8>
 800bb3a:	f000 bd33 	b.w	800c5a4 <_dtoa_r+0xb34>
 800bb3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bb42:	aa16      	add	r2, sp, #88	@ 0x58
 800bb44:	a917      	add	r1, sp, #92	@ 0x5c
 800bb46:	4658      	mov	r0, fp
 800bb48:	f001 f980 	bl	800ce4c <__d2b>
 800bb4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bb50:	4681      	mov	r9, r0
 800bb52:	2e00      	cmp	r6, #0
 800bb54:	d077      	beq.n	800bc46 <_dtoa_r+0x1d6>
 800bb56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bb5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bb68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bb6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bb70:	4619      	mov	r1, r3
 800bb72:	2200      	movs	r2, #0
 800bb74:	4b74      	ldr	r3, [pc, #464]	@ (800bd48 <_dtoa_r+0x2d8>)
 800bb76:	f7f4 fb87 	bl	8000288 <__aeabi_dsub>
 800bb7a:	a369      	add	r3, pc, #420	@ (adr r3, 800bd20 <_dtoa_r+0x2b0>)
 800bb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb80:	f7f4 fd3a 	bl	80005f8 <__aeabi_dmul>
 800bb84:	a368      	add	r3, pc, #416	@ (adr r3, 800bd28 <_dtoa_r+0x2b8>)
 800bb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8a:	f7f4 fb7f 	bl	800028c <__adddf3>
 800bb8e:	4604      	mov	r4, r0
 800bb90:	4630      	mov	r0, r6
 800bb92:	460d      	mov	r5, r1
 800bb94:	f7f4 fcc6 	bl	8000524 <__aeabi_i2d>
 800bb98:	a365      	add	r3, pc, #404	@ (adr r3, 800bd30 <_dtoa_r+0x2c0>)
 800bb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9e:	f7f4 fd2b 	bl	80005f8 <__aeabi_dmul>
 800bba2:	4602      	mov	r2, r0
 800bba4:	460b      	mov	r3, r1
 800bba6:	4620      	mov	r0, r4
 800bba8:	4629      	mov	r1, r5
 800bbaa:	f7f4 fb6f 	bl	800028c <__adddf3>
 800bbae:	4604      	mov	r4, r0
 800bbb0:	460d      	mov	r5, r1
 800bbb2:	f7f4 ffd1 	bl	8000b58 <__aeabi_d2iz>
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	4607      	mov	r7, r0
 800bbba:	2300      	movs	r3, #0
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	4629      	mov	r1, r5
 800bbc0:	f7f4 ff8c 	bl	8000adc <__aeabi_dcmplt>
 800bbc4:	b140      	cbz	r0, 800bbd8 <_dtoa_r+0x168>
 800bbc6:	4638      	mov	r0, r7
 800bbc8:	f7f4 fcac 	bl	8000524 <__aeabi_i2d>
 800bbcc:	4622      	mov	r2, r4
 800bbce:	462b      	mov	r3, r5
 800bbd0:	f7f4 ff7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbd4:	b900      	cbnz	r0, 800bbd8 <_dtoa_r+0x168>
 800bbd6:	3f01      	subs	r7, #1
 800bbd8:	2f16      	cmp	r7, #22
 800bbda:	d851      	bhi.n	800bc80 <_dtoa_r+0x210>
 800bbdc:	4b5b      	ldr	r3, [pc, #364]	@ (800bd4c <_dtoa_r+0x2dc>)
 800bbde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbea:	f7f4 ff77 	bl	8000adc <__aeabi_dcmplt>
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	d048      	beq.n	800bc84 <_dtoa_r+0x214>
 800bbf2:	3f01      	subs	r7, #1
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	9312      	str	r3, [sp, #72]	@ 0x48
 800bbf8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bbfa:	1b9b      	subs	r3, r3, r6
 800bbfc:	1e5a      	subs	r2, r3, #1
 800bbfe:	bf44      	itt	mi
 800bc00:	f1c3 0801 	rsbmi	r8, r3, #1
 800bc04:	2300      	movmi	r3, #0
 800bc06:	9208      	str	r2, [sp, #32]
 800bc08:	bf54      	ite	pl
 800bc0a:	f04f 0800 	movpl.w	r8, #0
 800bc0e:	9308      	strmi	r3, [sp, #32]
 800bc10:	2f00      	cmp	r7, #0
 800bc12:	db39      	blt.n	800bc88 <_dtoa_r+0x218>
 800bc14:	9b08      	ldr	r3, [sp, #32]
 800bc16:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bc18:	443b      	add	r3, r7
 800bc1a:	9308      	str	r3, [sp, #32]
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc22:	2b09      	cmp	r3, #9
 800bc24:	d864      	bhi.n	800bcf0 <_dtoa_r+0x280>
 800bc26:	2b05      	cmp	r3, #5
 800bc28:	bfc4      	itt	gt
 800bc2a:	3b04      	subgt	r3, #4
 800bc2c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bc2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc30:	f1a3 0302 	sub.w	r3, r3, #2
 800bc34:	bfcc      	ite	gt
 800bc36:	2400      	movgt	r4, #0
 800bc38:	2401      	movle	r4, #1
 800bc3a:	2b03      	cmp	r3, #3
 800bc3c:	d863      	bhi.n	800bd06 <_dtoa_r+0x296>
 800bc3e:	e8df f003 	tbb	[pc, r3]
 800bc42:	372a      	.short	0x372a
 800bc44:	5535      	.short	0x5535
 800bc46:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bc4a:	441e      	add	r6, r3
 800bc4c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bc50:	2b20      	cmp	r3, #32
 800bc52:	bfc1      	itttt	gt
 800bc54:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bc58:	409f      	lslgt	r7, r3
 800bc5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bc5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bc62:	bfd6      	itet	le
 800bc64:	f1c3 0320 	rsble	r3, r3, #32
 800bc68:	ea47 0003 	orrgt.w	r0, r7, r3
 800bc6c:	fa04 f003 	lslle.w	r0, r4, r3
 800bc70:	f7f4 fc48 	bl	8000504 <__aeabi_ui2d>
 800bc74:	2201      	movs	r2, #1
 800bc76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bc7a:	3e01      	subs	r6, #1
 800bc7c:	9214      	str	r2, [sp, #80]	@ 0x50
 800bc7e:	e777      	b.n	800bb70 <_dtoa_r+0x100>
 800bc80:	2301      	movs	r3, #1
 800bc82:	e7b8      	b.n	800bbf6 <_dtoa_r+0x186>
 800bc84:	9012      	str	r0, [sp, #72]	@ 0x48
 800bc86:	e7b7      	b.n	800bbf8 <_dtoa_r+0x188>
 800bc88:	427b      	negs	r3, r7
 800bc8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	eba8 0807 	sub.w	r8, r8, r7
 800bc92:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bc94:	e7c4      	b.n	800bc20 <_dtoa_r+0x1b0>
 800bc96:	2300      	movs	r3, #0
 800bc98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	dc35      	bgt.n	800bd0c <_dtoa_r+0x29c>
 800bca0:	2301      	movs	r3, #1
 800bca2:	9300      	str	r3, [sp, #0]
 800bca4:	9307      	str	r3, [sp, #28]
 800bca6:	461a      	mov	r2, r3
 800bca8:	920e      	str	r2, [sp, #56]	@ 0x38
 800bcaa:	e00b      	b.n	800bcc4 <_dtoa_r+0x254>
 800bcac:	2301      	movs	r3, #1
 800bcae:	e7f3      	b.n	800bc98 <_dtoa_r+0x228>
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcb6:	18fb      	adds	r3, r7, r3
 800bcb8:	9300      	str	r3, [sp, #0]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	9307      	str	r3, [sp, #28]
 800bcc0:	bfb8      	it	lt
 800bcc2:	2301      	movlt	r3, #1
 800bcc4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bcc8:	2100      	movs	r1, #0
 800bcca:	2204      	movs	r2, #4
 800bccc:	f102 0514 	add.w	r5, r2, #20
 800bcd0:	429d      	cmp	r5, r3
 800bcd2:	d91f      	bls.n	800bd14 <_dtoa_r+0x2a4>
 800bcd4:	6041      	str	r1, [r0, #4]
 800bcd6:	4658      	mov	r0, fp
 800bcd8:	f000 fd8e 	bl	800c7f8 <_Balloc>
 800bcdc:	4682      	mov	sl, r0
 800bcde:	2800      	cmp	r0, #0
 800bce0:	d13c      	bne.n	800bd5c <_dtoa_r+0x2ec>
 800bce2:	4b1b      	ldr	r3, [pc, #108]	@ (800bd50 <_dtoa_r+0x2e0>)
 800bce4:	4602      	mov	r2, r0
 800bce6:	f240 11af 	movw	r1, #431	@ 0x1af
 800bcea:	e6d8      	b.n	800ba9e <_dtoa_r+0x2e>
 800bcec:	2301      	movs	r3, #1
 800bcee:	e7e0      	b.n	800bcb2 <_dtoa_r+0x242>
 800bcf0:	2401      	movs	r4, #1
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcf6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bcf8:	f04f 33ff 	mov.w	r3, #4294967295
 800bcfc:	9300      	str	r3, [sp, #0]
 800bcfe:	9307      	str	r3, [sp, #28]
 800bd00:	2200      	movs	r2, #0
 800bd02:	2312      	movs	r3, #18
 800bd04:	e7d0      	b.n	800bca8 <_dtoa_r+0x238>
 800bd06:	2301      	movs	r3, #1
 800bd08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd0a:	e7f5      	b.n	800bcf8 <_dtoa_r+0x288>
 800bd0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd0e:	9300      	str	r3, [sp, #0]
 800bd10:	9307      	str	r3, [sp, #28]
 800bd12:	e7d7      	b.n	800bcc4 <_dtoa_r+0x254>
 800bd14:	3101      	adds	r1, #1
 800bd16:	0052      	lsls	r2, r2, #1
 800bd18:	e7d8      	b.n	800bccc <_dtoa_r+0x25c>
 800bd1a:	bf00      	nop
 800bd1c:	f3af 8000 	nop.w
 800bd20:	636f4361 	.word	0x636f4361
 800bd24:	3fd287a7 	.word	0x3fd287a7
 800bd28:	8b60c8b3 	.word	0x8b60c8b3
 800bd2c:	3fc68a28 	.word	0x3fc68a28
 800bd30:	509f79fb 	.word	0x509f79fb
 800bd34:	3fd34413 	.word	0x3fd34413
 800bd38:	0800d93a 	.word	0x0800d93a
 800bd3c:	0800d951 	.word	0x0800d951
 800bd40:	7ff00000 	.word	0x7ff00000
 800bd44:	0800d90a 	.word	0x0800d90a
 800bd48:	3ff80000 	.word	0x3ff80000
 800bd4c:	0800da48 	.word	0x0800da48
 800bd50:	0800d9a9 	.word	0x0800d9a9
 800bd54:	0800d936 	.word	0x0800d936
 800bd58:	0800d909 	.word	0x0800d909
 800bd5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bd60:	6018      	str	r0, [r3, #0]
 800bd62:	9b07      	ldr	r3, [sp, #28]
 800bd64:	2b0e      	cmp	r3, #14
 800bd66:	f200 80a4 	bhi.w	800beb2 <_dtoa_r+0x442>
 800bd6a:	2c00      	cmp	r4, #0
 800bd6c:	f000 80a1 	beq.w	800beb2 <_dtoa_r+0x442>
 800bd70:	2f00      	cmp	r7, #0
 800bd72:	dd33      	ble.n	800bddc <_dtoa_r+0x36c>
 800bd74:	4bad      	ldr	r3, [pc, #692]	@ (800c02c <_dtoa_r+0x5bc>)
 800bd76:	f007 020f 	and.w	r2, r7, #15
 800bd7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd7e:	ed93 7b00 	vldr	d7, [r3]
 800bd82:	05f8      	lsls	r0, r7, #23
 800bd84:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bd88:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bd8c:	d516      	bpl.n	800bdbc <_dtoa_r+0x34c>
 800bd8e:	4ba8      	ldr	r3, [pc, #672]	@ (800c030 <_dtoa_r+0x5c0>)
 800bd90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bd98:	f7f4 fd58 	bl	800084c <__aeabi_ddiv>
 800bd9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bda0:	f004 040f 	and.w	r4, r4, #15
 800bda4:	2603      	movs	r6, #3
 800bda6:	4da2      	ldr	r5, [pc, #648]	@ (800c030 <_dtoa_r+0x5c0>)
 800bda8:	b954      	cbnz	r4, 800bdc0 <_dtoa_r+0x350>
 800bdaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdb2:	f7f4 fd4b 	bl	800084c <__aeabi_ddiv>
 800bdb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdba:	e028      	b.n	800be0e <_dtoa_r+0x39e>
 800bdbc:	2602      	movs	r6, #2
 800bdbe:	e7f2      	b.n	800bda6 <_dtoa_r+0x336>
 800bdc0:	07e1      	lsls	r1, r4, #31
 800bdc2:	d508      	bpl.n	800bdd6 <_dtoa_r+0x366>
 800bdc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bdcc:	f7f4 fc14 	bl	80005f8 <__aeabi_dmul>
 800bdd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdd4:	3601      	adds	r6, #1
 800bdd6:	1064      	asrs	r4, r4, #1
 800bdd8:	3508      	adds	r5, #8
 800bdda:	e7e5      	b.n	800bda8 <_dtoa_r+0x338>
 800bddc:	f000 80d2 	beq.w	800bf84 <_dtoa_r+0x514>
 800bde0:	427c      	negs	r4, r7
 800bde2:	4b92      	ldr	r3, [pc, #584]	@ (800c02c <_dtoa_r+0x5bc>)
 800bde4:	4d92      	ldr	r5, [pc, #584]	@ (800c030 <_dtoa_r+0x5c0>)
 800bde6:	f004 020f 	and.w	r2, r4, #15
 800bdea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdf6:	f7f4 fbff 	bl	80005f8 <__aeabi_dmul>
 800bdfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdfe:	1124      	asrs	r4, r4, #4
 800be00:	2300      	movs	r3, #0
 800be02:	2602      	movs	r6, #2
 800be04:	2c00      	cmp	r4, #0
 800be06:	f040 80b2 	bne.w	800bf6e <_dtoa_r+0x4fe>
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d1d3      	bne.n	800bdb6 <_dtoa_r+0x346>
 800be0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800be10:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800be14:	2b00      	cmp	r3, #0
 800be16:	f000 80b7 	beq.w	800bf88 <_dtoa_r+0x518>
 800be1a:	4b86      	ldr	r3, [pc, #536]	@ (800c034 <_dtoa_r+0x5c4>)
 800be1c:	2200      	movs	r2, #0
 800be1e:	4620      	mov	r0, r4
 800be20:	4629      	mov	r1, r5
 800be22:	f7f4 fe5b 	bl	8000adc <__aeabi_dcmplt>
 800be26:	2800      	cmp	r0, #0
 800be28:	f000 80ae 	beq.w	800bf88 <_dtoa_r+0x518>
 800be2c:	9b07      	ldr	r3, [sp, #28]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	f000 80aa 	beq.w	800bf88 <_dtoa_r+0x518>
 800be34:	9b00      	ldr	r3, [sp, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	dd37      	ble.n	800beaa <_dtoa_r+0x43a>
 800be3a:	1e7b      	subs	r3, r7, #1
 800be3c:	9304      	str	r3, [sp, #16]
 800be3e:	4620      	mov	r0, r4
 800be40:	4b7d      	ldr	r3, [pc, #500]	@ (800c038 <_dtoa_r+0x5c8>)
 800be42:	2200      	movs	r2, #0
 800be44:	4629      	mov	r1, r5
 800be46:	f7f4 fbd7 	bl	80005f8 <__aeabi_dmul>
 800be4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be4e:	9c00      	ldr	r4, [sp, #0]
 800be50:	3601      	adds	r6, #1
 800be52:	4630      	mov	r0, r6
 800be54:	f7f4 fb66 	bl	8000524 <__aeabi_i2d>
 800be58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be5c:	f7f4 fbcc 	bl	80005f8 <__aeabi_dmul>
 800be60:	4b76      	ldr	r3, [pc, #472]	@ (800c03c <_dtoa_r+0x5cc>)
 800be62:	2200      	movs	r2, #0
 800be64:	f7f4 fa12 	bl	800028c <__adddf3>
 800be68:	4605      	mov	r5, r0
 800be6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800be6e:	2c00      	cmp	r4, #0
 800be70:	f040 808d 	bne.w	800bf8e <_dtoa_r+0x51e>
 800be74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be78:	4b71      	ldr	r3, [pc, #452]	@ (800c040 <_dtoa_r+0x5d0>)
 800be7a:	2200      	movs	r2, #0
 800be7c:	f7f4 fa04 	bl	8000288 <__aeabi_dsub>
 800be80:	4602      	mov	r2, r0
 800be82:	460b      	mov	r3, r1
 800be84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be88:	462a      	mov	r2, r5
 800be8a:	4633      	mov	r3, r6
 800be8c:	f7f4 fe44 	bl	8000b18 <__aeabi_dcmpgt>
 800be90:	2800      	cmp	r0, #0
 800be92:	f040 828b 	bne.w	800c3ac <_dtoa_r+0x93c>
 800be96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be9a:	462a      	mov	r2, r5
 800be9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bea0:	f7f4 fe1c 	bl	8000adc <__aeabi_dcmplt>
 800bea4:	2800      	cmp	r0, #0
 800bea6:	f040 8128 	bne.w	800c0fa <_dtoa_r+0x68a>
 800beaa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800beae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800beb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	f2c0 815a 	blt.w	800c16e <_dtoa_r+0x6fe>
 800beba:	2f0e      	cmp	r7, #14
 800bebc:	f300 8157 	bgt.w	800c16e <_dtoa_r+0x6fe>
 800bec0:	4b5a      	ldr	r3, [pc, #360]	@ (800c02c <_dtoa_r+0x5bc>)
 800bec2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bec6:	ed93 7b00 	vldr	d7, [r3]
 800beca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800becc:	2b00      	cmp	r3, #0
 800bece:	ed8d 7b00 	vstr	d7, [sp]
 800bed2:	da03      	bge.n	800bedc <_dtoa_r+0x46c>
 800bed4:	9b07      	ldr	r3, [sp, #28]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	f340 8101 	ble.w	800c0de <_dtoa_r+0x66e>
 800bedc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bee0:	4656      	mov	r6, sl
 800bee2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bee6:	4620      	mov	r0, r4
 800bee8:	4629      	mov	r1, r5
 800beea:	f7f4 fcaf 	bl	800084c <__aeabi_ddiv>
 800beee:	f7f4 fe33 	bl	8000b58 <__aeabi_d2iz>
 800bef2:	4680      	mov	r8, r0
 800bef4:	f7f4 fb16 	bl	8000524 <__aeabi_i2d>
 800bef8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800befc:	f7f4 fb7c 	bl	80005f8 <__aeabi_dmul>
 800bf00:	4602      	mov	r2, r0
 800bf02:	460b      	mov	r3, r1
 800bf04:	4620      	mov	r0, r4
 800bf06:	4629      	mov	r1, r5
 800bf08:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bf0c:	f7f4 f9bc 	bl	8000288 <__aeabi_dsub>
 800bf10:	f806 4b01 	strb.w	r4, [r6], #1
 800bf14:	9d07      	ldr	r5, [sp, #28]
 800bf16:	eba6 040a 	sub.w	r4, r6, sl
 800bf1a:	42a5      	cmp	r5, r4
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	460b      	mov	r3, r1
 800bf20:	f040 8117 	bne.w	800c152 <_dtoa_r+0x6e2>
 800bf24:	f7f4 f9b2 	bl	800028c <__adddf3>
 800bf28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf2c:	4604      	mov	r4, r0
 800bf2e:	460d      	mov	r5, r1
 800bf30:	f7f4 fdf2 	bl	8000b18 <__aeabi_dcmpgt>
 800bf34:	2800      	cmp	r0, #0
 800bf36:	f040 80f9 	bne.w	800c12c <_dtoa_r+0x6bc>
 800bf3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf3e:	4620      	mov	r0, r4
 800bf40:	4629      	mov	r1, r5
 800bf42:	f7f4 fdc1 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf46:	b118      	cbz	r0, 800bf50 <_dtoa_r+0x4e0>
 800bf48:	f018 0f01 	tst.w	r8, #1
 800bf4c:	f040 80ee 	bne.w	800c12c <_dtoa_r+0x6bc>
 800bf50:	4649      	mov	r1, r9
 800bf52:	4658      	mov	r0, fp
 800bf54:	f000 fc90 	bl	800c878 <_Bfree>
 800bf58:	2300      	movs	r3, #0
 800bf5a:	7033      	strb	r3, [r6, #0]
 800bf5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bf5e:	3701      	adds	r7, #1
 800bf60:	601f      	str	r7, [r3, #0]
 800bf62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	f000 831d 	beq.w	800c5a4 <_dtoa_r+0xb34>
 800bf6a:	601e      	str	r6, [r3, #0]
 800bf6c:	e31a      	b.n	800c5a4 <_dtoa_r+0xb34>
 800bf6e:	07e2      	lsls	r2, r4, #31
 800bf70:	d505      	bpl.n	800bf7e <_dtoa_r+0x50e>
 800bf72:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf76:	f7f4 fb3f 	bl	80005f8 <__aeabi_dmul>
 800bf7a:	3601      	adds	r6, #1
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	1064      	asrs	r4, r4, #1
 800bf80:	3508      	adds	r5, #8
 800bf82:	e73f      	b.n	800be04 <_dtoa_r+0x394>
 800bf84:	2602      	movs	r6, #2
 800bf86:	e742      	b.n	800be0e <_dtoa_r+0x39e>
 800bf88:	9c07      	ldr	r4, [sp, #28]
 800bf8a:	9704      	str	r7, [sp, #16]
 800bf8c:	e761      	b.n	800be52 <_dtoa_r+0x3e2>
 800bf8e:	4b27      	ldr	r3, [pc, #156]	@ (800c02c <_dtoa_r+0x5bc>)
 800bf90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bf96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bf9a:	4454      	add	r4, sl
 800bf9c:	2900      	cmp	r1, #0
 800bf9e:	d053      	beq.n	800c048 <_dtoa_r+0x5d8>
 800bfa0:	4928      	ldr	r1, [pc, #160]	@ (800c044 <_dtoa_r+0x5d4>)
 800bfa2:	2000      	movs	r0, #0
 800bfa4:	f7f4 fc52 	bl	800084c <__aeabi_ddiv>
 800bfa8:	4633      	mov	r3, r6
 800bfaa:	462a      	mov	r2, r5
 800bfac:	f7f4 f96c 	bl	8000288 <__aeabi_dsub>
 800bfb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bfb4:	4656      	mov	r6, sl
 800bfb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfba:	f7f4 fdcd 	bl	8000b58 <__aeabi_d2iz>
 800bfbe:	4605      	mov	r5, r0
 800bfc0:	f7f4 fab0 	bl	8000524 <__aeabi_i2d>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfcc:	f7f4 f95c 	bl	8000288 <__aeabi_dsub>
 800bfd0:	3530      	adds	r5, #48	@ 0x30
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bfda:	f806 5b01 	strb.w	r5, [r6], #1
 800bfde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bfe2:	f7f4 fd7b 	bl	8000adc <__aeabi_dcmplt>
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	d171      	bne.n	800c0ce <_dtoa_r+0x65e>
 800bfea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfee:	4911      	ldr	r1, [pc, #68]	@ (800c034 <_dtoa_r+0x5c4>)
 800bff0:	2000      	movs	r0, #0
 800bff2:	f7f4 f949 	bl	8000288 <__aeabi_dsub>
 800bff6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bffa:	f7f4 fd6f 	bl	8000adc <__aeabi_dcmplt>
 800bffe:	2800      	cmp	r0, #0
 800c000:	f040 8095 	bne.w	800c12e <_dtoa_r+0x6be>
 800c004:	42a6      	cmp	r6, r4
 800c006:	f43f af50 	beq.w	800beaa <_dtoa_r+0x43a>
 800c00a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c00e:	4b0a      	ldr	r3, [pc, #40]	@ (800c038 <_dtoa_r+0x5c8>)
 800c010:	2200      	movs	r2, #0
 800c012:	f7f4 faf1 	bl	80005f8 <__aeabi_dmul>
 800c016:	4b08      	ldr	r3, [pc, #32]	@ (800c038 <_dtoa_r+0x5c8>)
 800c018:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c01c:	2200      	movs	r2, #0
 800c01e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c022:	f7f4 fae9 	bl	80005f8 <__aeabi_dmul>
 800c026:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c02a:	e7c4      	b.n	800bfb6 <_dtoa_r+0x546>
 800c02c:	0800da48 	.word	0x0800da48
 800c030:	0800da20 	.word	0x0800da20
 800c034:	3ff00000 	.word	0x3ff00000
 800c038:	40240000 	.word	0x40240000
 800c03c:	401c0000 	.word	0x401c0000
 800c040:	40140000 	.word	0x40140000
 800c044:	3fe00000 	.word	0x3fe00000
 800c048:	4631      	mov	r1, r6
 800c04a:	4628      	mov	r0, r5
 800c04c:	f7f4 fad4 	bl	80005f8 <__aeabi_dmul>
 800c050:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c054:	9415      	str	r4, [sp, #84]	@ 0x54
 800c056:	4656      	mov	r6, sl
 800c058:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c05c:	f7f4 fd7c 	bl	8000b58 <__aeabi_d2iz>
 800c060:	4605      	mov	r5, r0
 800c062:	f7f4 fa5f 	bl	8000524 <__aeabi_i2d>
 800c066:	4602      	mov	r2, r0
 800c068:	460b      	mov	r3, r1
 800c06a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c06e:	f7f4 f90b 	bl	8000288 <__aeabi_dsub>
 800c072:	3530      	adds	r5, #48	@ 0x30
 800c074:	f806 5b01 	strb.w	r5, [r6], #1
 800c078:	4602      	mov	r2, r0
 800c07a:	460b      	mov	r3, r1
 800c07c:	42a6      	cmp	r6, r4
 800c07e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c082:	f04f 0200 	mov.w	r2, #0
 800c086:	d124      	bne.n	800c0d2 <_dtoa_r+0x662>
 800c088:	4bac      	ldr	r3, [pc, #688]	@ (800c33c <_dtoa_r+0x8cc>)
 800c08a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c08e:	f7f4 f8fd 	bl	800028c <__adddf3>
 800c092:	4602      	mov	r2, r0
 800c094:	460b      	mov	r3, r1
 800c096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c09a:	f7f4 fd3d 	bl	8000b18 <__aeabi_dcmpgt>
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	d145      	bne.n	800c12e <_dtoa_r+0x6be>
 800c0a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c0a6:	49a5      	ldr	r1, [pc, #660]	@ (800c33c <_dtoa_r+0x8cc>)
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	f7f4 f8ed 	bl	8000288 <__aeabi_dsub>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0b6:	f7f4 fd11 	bl	8000adc <__aeabi_dcmplt>
 800c0ba:	2800      	cmp	r0, #0
 800c0bc:	f43f aef5 	beq.w	800beaa <_dtoa_r+0x43a>
 800c0c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c0c2:	1e73      	subs	r3, r6, #1
 800c0c4:	9315      	str	r3, [sp, #84]	@ 0x54
 800c0c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c0ca:	2b30      	cmp	r3, #48	@ 0x30
 800c0cc:	d0f8      	beq.n	800c0c0 <_dtoa_r+0x650>
 800c0ce:	9f04      	ldr	r7, [sp, #16]
 800c0d0:	e73e      	b.n	800bf50 <_dtoa_r+0x4e0>
 800c0d2:	4b9b      	ldr	r3, [pc, #620]	@ (800c340 <_dtoa_r+0x8d0>)
 800c0d4:	f7f4 fa90 	bl	80005f8 <__aeabi_dmul>
 800c0d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0dc:	e7bc      	b.n	800c058 <_dtoa_r+0x5e8>
 800c0de:	d10c      	bne.n	800c0fa <_dtoa_r+0x68a>
 800c0e0:	4b98      	ldr	r3, [pc, #608]	@ (800c344 <_dtoa_r+0x8d4>)
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0e8:	f7f4 fa86 	bl	80005f8 <__aeabi_dmul>
 800c0ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0f0:	f7f4 fd08 	bl	8000b04 <__aeabi_dcmpge>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	f000 8157 	beq.w	800c3a8 <_dtoa_r+0x938>
 800c0fa:	2400      	movs	r4, #0
 800c0fc:	4625      	mov	r5, r4
 800c0fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c100:	43db      	mvns	r3, r3
 800c102:	9304      	str	r3, [sp, #16]
 800c104:	4656      	mov	r6, sl
 800c106:	2700      	movs	r7, #0
 800c108:	4621      	mov	r1, r4
 800c10a:	4658      	mov	r0, fp
 800c10c:	f000 fbb4 	bl	800c878 <_Bfree>
 800c110:	2d00      	cmp	r5, #0
 800c112:	d0dc      	beq.n	800c0ce <_dtoa_r+0x65e>
 800c114:	b12f      	cbz	r7, 800c122 <_dtoa_r+0x6b2>
 800c116:	42af      	cmp	r7, r5
 800c118:	d003      	beq.n	800c122 <_dtoa_r+0x6b2>
 800c11a:	4639      	mov	r1, r7
 800c11c:	4658      	mov	r0, fp
 800c11e:	f000 fbab 	bl	800c878 <_Bfree>
 800c122:	4629      	mov	r1, r5
 800c124:	4658      	mov	r0, fp
 800c126:	f000 fba7 	bl	800c878 <_Bfree>
 800c12a:	e7d0      	b.n	800c0ce <_dtoa_r+0x65e>
 800c12c:	9704      	str	r7, [sp, #16]
 800c12e:	4633      	mov	r3, r6
 800c130:	461e      	mov	r6, r3
 800c132:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c136:	2a39      	cmp	r2, #57	@ 0x39
 800c138:	d107      	bne.n	800c14a <_dtoa_r+0x6da>
 800c13a:	459a      	cmp	sl, r3
 800c13c:	d1f8      	bne.n	800c130 <_dtoa_r+0x6c0>
 800c13e:	9a04      	ldr	r2, [sp, #16]
 800c140:	3201      	adds	r2, #1
 800c142:	9204      	str	r2, [sp, #16]
 800c144:	2230      	movs	r2, #48	@ 0x30
 800c146:	f88a 2000 	strb.w	r2, [sl]
 800c14a:	781a      	ldrb	r2, [r3, #0]
 800c14c:	3201      	adds	r2, #1
 800c14e:	701a      	strb	r2, [r3, #0]
 800c150:	e7bd      	b.n	800c0ce <_dtoa_r+0x65e>
 800c152:	4b7b      	ldr	r3, [pc, #492]	@ (800c340 <_dtoa_r+0x8d0>)
 800c154:	2200      	movs	r2, #0
 800c156:	f7f4 fa4f 	bl	80005f8 <__aeabi_dmul>
 800c15a:	2200      	movs	r2, #0
 800c15c:	2300      	movs	r3, #0
 800c15e:	4604      	mov	r4, r0
 800c160:	460d      	mov	r5, r1
 800c162:	f7f4 fcb1 	bl	8000ac8 <__aeabi_dcmpeq>
 800c166:	2800      	cmp	r0, #0
 800c168:	f43f aebb 	beq.w	800bee2 <_dtoa_r+0x472>
 800c16c:	e6f0      	b.n	800bf50 <_dtoa_r+0x4e0>
 800c16e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c170:	2a00      	cmp	r2, #0
 800c172:	f000 80db 	beq.w	800c32c <_dtoa_r+0x8bc>
 800c176:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c178:	2a01      	cmp	r2, #1
 800c17a:	f300 80bf 	bgt.w	800c2fc <_dtoa_r+0x88c>
 800c17e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c180:	2a00      	cmp	r2, #0
 800c182:	f000 80b7 	beq.w	800c2f4 <_dtoa_r+0x884>
 800c186:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c18a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c18c:	4646      	mov	r6, r8
 800c18e:	9a08      	ldr	r2, [sp, #32]
 800c190:	2101      	movs	r1, #1
 800c192:	441a      	add	r2, r3
 800c194:	4658      	mov	r0, fp
 800c196:	4498      	add	r8, r3
 800c198:	9208      	str	r2, [sp, #32]
 800c19a:	f000 fc21 	bl	800c9e0 <__i2b>
 800c19e:	4605      	mov	r5, r0
 800c1a0:	b15e      	cbz	r6, 800c1ba <_dtoa_r+0x74a>
 800c1a2:	9b08      	ldr	r3, [sp, #32]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	dd08      	ble.n	800c1ba <_dtoa_r+0x74a>
 800c1a8:	42b3      	cmp	r3, r6
 800c1aa:	9a08      	ldr	r2, [sp, #32]
 800c1ac:	bfa8      	it	ge
 800c1ae:	4633      	movge	r3, r6
 800c1b0:	eba8 0803 	sub.w	r8, r8, r3
 800c1b4:	1af6      	subs	r6, r6, r3
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	9308      	str	r3, [sp, #32]
 800c1ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1bc:	b1f3      	cbz	r3, 800c1fc <_dtoa_r+0x78c>
 800c1be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	f000 80b7 	beq.w	800c334 <_dtoa_r+0x8c4>
 800c1c6:	b18c      	cbz	r4, 800c1ec <_dtoa_r+0x77c>
 800c1c8:	4629      	mov	r1, r5
 800c1ca:	4622      	mov	r2, r4
 800c1cc:	4658      	mov	r0, fp
 800c1ce:	f000 fcc7 	bl	800cb60 <__pow5mult>
 800c1d2:	464a      	mov	r2, r9
 800c1d4:	4601      	mov	r1, r0
 800c1d6:	4605      	mov	r5, r0
 800c1d8:	4658      	mov	r0, fp
 800c1da:	f000 fc17 	bl	800ca0c <__multiply>
 800c1de:	4649      	mov	r1, r9
 800c1e0:	9004      	str	r0, [sp, #16]
 800c1e2:	4658      	mov	r0, fp
 800c1e4:	f000 fb48 	bl	800c878 <_Bfree>
 800c1e8:	9b04      	ldr	r3, [sp, #16]
 800c1ea:	4699      	mov	r9, r3
 800c1ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1ee:	1b1a      	subs	r2, r3, r4
 800c1f0:	d004      	beq.n	800c1fc <_dtoa_r+0x78c>
 800c1f2:	4649      	mov	r1, r9
 800c1f4:	4658      	mov	r0, fp
 800c1f6:	f000 fcb3 	bl	800cb60 <__pow5mult>
 800c1fa:	4681      	mov	r9, r0
 800c1fc:	2101      	movs	r1, #1
 800c1fe:	4658      	mov	r0, fp
 800c200:	f000 fbee 	bl	800c9e0 <__i2b>
 800c204:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c206:	4604      	mov	r4, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f000 81cf 	beq.w	800c5ac <_dtoa_r+0xb3c>
 800c20e:	461a      	mov	r2, r3
 800c210:	4601      	mov	r1, r0
 800c212:	4658      	mov	r0, fp
 800c214:	f000 fca4 	bl	800cb60 <__pow5mult>
 800c218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	4604      	mov	r4, r0
 800c21e:	f300 8095 	bgt.w	800c34c <_dtoa_r+0x8dc>
 800c222:	9b02      	ldr	r3, [sp, #8]
 800c224:	2b00      	cmp	r3, #0
 800c226:	f040 8087 	bne.w	800c338 <_dtoa_r+0x8c8>
 800c22a:	9b03      	ldr	r3, [sp, #12]
 800c22c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c230:	2b00      	cmp	r3, #0
 800c232:	f040 8089 	bne.w	800c348 <_dtoa_r+0x8d8>
 800c236:	9b03      	ldr	r3, [sp, #12]
 800c238:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c23c:	0d1b      	lsrs	r3, r3, #20
 800c23e:	051b      	lsls	r3, r3, #20
 800c240:	b12b      	cbz	r3, 800c24e <_dtoa_r+0x7de>
 800c242:	9b08      	ldr	r3, [sp, #32]
 800c244:	3301      	adds	r3, #1
 800c246:	9308      	str	r3, [sp, #32]
 800c248:	f108 0801 	add.w	r8, r8, #1
 800c24c:	2301      	movs	r3, #1
 800c24e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c252:	2b00      	cmp	r3, #0
 800c254:	f000 81b0 	beq.w	800c5b8 <_dtoa_r+0xb48>
 800c258:	6923      	ldr	r3, [r4, #16]
 800c25a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c25e:	6918      	ldr	r0, [r3, #16]
 800c260:	f000 fb72 	bl	800c948 <__hi0bits>
 800c264:	f1c0 0020 	rsb	r0, r0, #32
 800c268:	9b08      	ldr	r3, [sp, #32]
 800c26a:	4418      	add	r0, r3
 800c26c:	f010 001f 	ands.w	r0, r0, #31
 800c270:	d077      	beq.n	800c362 <_dtoa_r+0x8f2>
 800c272:	f1c0 0320 	rsb	r3, r0, #32
 800c276:	2b04      	cmp	r3, #4
 800c278:	dd6b      	ble.n	800c352 <_dtoa_r+0x8e2>
 800c27a:	9b08      	ldr	r3, [sp, #32]
 800c27c:	f1c0 001c 	rsb	r0, r0, #28
 800c280:	4403      	add	r3, r0
 800c282:	4480      	add	r8, r0
 800c284:	4406      	add	r6, r0
 800c286:	9308      	str	r3, [sp, #32]
 800c288:	f1b8 0f00 	cmp.w	r8, #0
 800c28c:	dd05      	ble.n	800c29a <_dtoa_r+0x82a>
 800c28e:	4649      	mov	r1, r9
 800c290:	4642      	mov	r2, r8
 800c292:	4658      	mov	r0, fp
 800c294:	f000 fcbe 	bl	800cc14 <__lshift>
 800c298:	4681      	mov	r9, r0
 800c29a:	9b08      	ldr	r3, [sp, #32]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	dd05      	ble.n	800c2ac <_dtoa_r+0x83c>
 800c2a0:	4621      	mov	r1, r4
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	4658      	mov	r0, fp
 800c2a6:	f000 fcb5 	bl	800cc14 <__lshift>
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d059      	beq.n	800c366 <_dtoa_r+0x8f6>
 800c2b2:	4621      	mov	r1, r4
 800c2b4:	4648      	mov	r0, r9
 800c2b6:	f000 fd19 	bl	800ccec <__mcmp>
 800c2ba:	2800      	cmp	r0, #0
 800c2bc:	da53      	bge.n	800c366 <_dtoa_r+0x8f6>
 800c2be:	1e7b      	subs	r3, r7, #1
 800c2c0:	9304      	str	r3, [sp, #16]
 800c2c2:	4649      	mov	r1, r9
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	220a      	movs	r2, #10
 800c2c8:	4658      	mov	r0, fp
 800c2ca:	f000 faf7 	bl	800c8bc <__multadd>
 800c2ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2d0:	4681      	mov	r9, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	f000 8172 	beq.w	800c5bc <_dtoa_r+0xb4c>
 800c2d8:	2300      	movs	r3, #0
 800c2da:	4629      	mov	r1, r5
 800c2dc:	220a      	movs	r2, #10
 800c2de:	4658      	mov	r0, fp
 800c2e0:	f000 faec 	bl	800c8bc <__multadd>
 800c2e4:	9b00      	ldr	r3, [sp, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	4605      	mov	r5, r0
 800c2ea:	dc67      	bgt.n	800c3bc <_dtoa_r+0x94c>
 800c2ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2ee:	2b02      	cmp	r3, #2
 800c2f0:	dc41      	bgt.n	800c376 <_dtoa_r+0x906>
 800c2f2:	e063      	b.n	800c3bc <_dtoa_r+0x94c>
 800c2f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c2f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c2fa:	e746      	b.n	800c18a <_dtoa_r+0x71a>
 800c2fc:	9b07      	ldr	r3, [sp, #28]
 800c2fe:	1e5c      	subs	r4, r3, #1
 800c300:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c302:	42a3      	cmp	r3, r4
 800c304:	bfbf      	itttt	lt
 800c306:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c308:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c30a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c30c:	1ae3      	sublt	r3, r4, r3
 800c30e:	bfb4      	ite	lt
 800c310:	18d2      	addlt	r2, r2, r3
 800c312:	1b1c      	subge	r4, r3, r4
 800c314:	9b07      	ldr	r3, [sp, #28]
 800c316:	bfbc      	itt	lt
 800c318:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c31a:	2400      	movlt	r4, #0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	bfb5      	itete	lt
 800c320:	eba8 0603 	sublt.w	r6, r8, r3
 800c324:	9b07      	ldrge	r3, [sp, #28]
 800c326:	2300      	movlt	r3, #0
 800c328:	4646      	movge	r6, r8
 800c32a:	e730      	b.n	800c18e <_dtoa_r+0x71e>
 800c32c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c32e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c330:	4646      	mov	r6, r8
 800c332:	e735      	b.n	800c1a0 <_dtoa_r+0x730>
 800c334:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c336:	e75c      	b.n	800c1f2 <_dtoa_r+0x782>
 800c338:	2300      	movs	r3, #0
 800c33a:	e788      	b.n	800c24e <_dtoa_r+0x7de>
 800c33c:	3fe00000 	.word	0x3fe00000
 800c340:	40240000 	.word	0x40240000
 800c344:	40140000 	.word	0x40140000
 800c348:	9b02      	ldr	r3, [sp, #8]
 800c34a:	e780      	b.n	800c24e <_dtoa_r+0x7de>
 800c34c:	2300      	movs	r3, #0
 800c34e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c350:	e782      	b.n	800c258 <_dtoa_r+0x7e8>
 800c352:	d099      	beq.n	800c288 <_dtoa_r+0x818>
 800c354:	9a08      	ldr	r2, [sp, #32]
 800c356:	331c      	adds	r3, #28
 800c358:	441a      	add	r2, r3
 800c35a:	4498      	add	r8, r3
 800c35c:	441e      	add	r6, r3
 800c35e:	9208      	str	r2, [sp, #32]
 800c360:	e792      	b.n	800c288 <_dtoa_r+0x818>
 800c362:	4603      	mov	r3, r0
 800c364:	e7f6      	b.n	800c354 <_dtoa_r+0x8e4>
 800c366:	9b07      	ldr	r3, [sp, #28]
 800c368:	9704      	str	r7, [sp, #16]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	dc20      	bgt.n	800c3b0 <_dtoa_r+0x940>
 800c36e:	9300      	str	r3, [sp, #0]
 800c370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c372:	2b02      	cmp	r3, #2
 800c374:	dd1e      	ble.n	800c3b4 <_dtoa_r+0x944>
 800c376:	9b00      	ldr	r3, [sp, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	f47f aec0 	bne.w	800c0fe <_dtoa_r+0x68e>
 800c37e:	4621      	mov	r1, r4
 800c380:	2205      	movs	r2, #5
 800c382:	4658      	mov	r0, fp
 800c384:	f000 fa9a 	bl	800c8bc <__multadd>
 800c388:	4601      	mov	r1, r0
 800c38a:	4604      	mov	r4, r0
 800c38c:	4648      	mov	r0, r9
 800c38e:	f000 fcad 	bl	800ccec <__mcmp>
 800c392:	2800      	cmp	r0, #0
 800c394:	f77f aeb3 	ble.w	800c0fe <_dtoa_r+0x68e>
 800c398:	4656      	mov	r6, sl
 800c39a:	2331      	movs	r3, #49	@ 0x31
 800c39c:	f806 3b01 	strb.w	r3, [r6], #1
 800c3a0:	9b04      	ldr	r3, [sp, #16]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	9304      	str	r3, [sp, #16]
 800c3a6:	e6ae      	b.n	800c106 <_dtoa_r+0x696>
 800c3a8:	9c07      	ldr	r4, [sp, #28]
 800c3aa:	9704      	str	r7, [sp, #16]
 800c3ac:	4625      	mov	r5, r4
 800c3ae:	e7f3      	b.n	800c398 <_dtoa_r+0x928>
 800c3b0:	9b07      	ldr	r3, [sp, #28]
 800c3b2:	9300      	str	r3, [sp, #0]
 800c3b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f000 8104 	beq.w	800c5c4 <_dtoa_r+0xb54>
 800c3bc:	2e00      	cmp	r6, #0
 800c3be:	dd05      	ble.n	800c3cc <_dtoa_r+0x95c>
 800c3c0:	4629      	mov	r1, r5
 800c3c2:	4632      	mov	r2, r6
 800c3c4:	4658      	mov	r0, fp
 800c3c6:	f000 fc25 	bl	800cc14 <__lshift>
 800c3ca:	4605      	mov	r5, r0
 800c3cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d05a      	beq.n	800c488 <_dtoa_r+0xa18>
 800c3d2:	6869      	ldr	r1, [r5, #4]
 800c3d4:	4658      	mov	r0, fp
 800c3d6:	f000 fa0f 	bl	800c7f8 <_Balloc>
 800c3da:	4606      	mov	r6, r0
 800c3dc:	b928      	cbnz	r0, 800c3ea <_dtoa_r+0x97a>
 800c3de:	4b84      	ldr	r3, [pc, #528]	@ (800c5f0 <_dtoa_r+0xb80>)
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c3e6:	f7ff bb5a 	b.w	800ba9e <_dtoa_r+0x2e>
 800c3ea:	692a      	ldr	r2, [r5, #16]
 800c3ec:	3202      	adds	r2, #2
 800c3ee:	0092      	lsls	r2, r2, #2
 800c3f0:	f105 010c 	add.w	r1, r5, #12
 800c3f4:	300c      	adds	r0, #12
 800c3f6:	f7ff faa4 	bl	800b942 <memcpy>
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	4631      	mov	r1, r6
 800c3fe:	4658      	mov	r0, fp
 800c400:	f000 fc08 	bl	800cc14 <__lshift>
 800c404:	f10a 0301 	add.w	r3, sl, #1
 800c408:	9307      	str	r3, [sp, #28]
 800c40a:	9b00      	ldr	r3, [sp, #0]
 800c40c:	4453      	add	r3, sl
 800c40e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c410:	9b02      	ldr	r3, [sp, #8]
 800c412:	f003 0301 	and.w	r3, r3, #1
 800c416:	462f      	mov	r7, r5
 800c418:	930a      	str	r3, [sp, #40]	@ 0x28
 800c41a:	4605      	mov	r5, r0
 800c41c:	9b07      	ldr	r3, [sp, #28]
 800c41e:	4621      	mov	r1, r4
 800c420:	3b01      	subs	r3, #1
 800c422:	4648      	mov	r0, r9
 800c424:	9300      	str	r3, [sp, #0]
 800c426:	f7ff fa9a 	bl	800b95e <quorem>
 800c42a:	4639      	mov	r1, r7
 800c42c:	9002      	str	r0, [sp, #8]
 800c42e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c432:	4648      	mov	r0, r9
 800c434:	f000 fc5a 	bl	800ccec <__mcmp>
 800c438:	462a      	mov	r2, r5
 800c43a:	9008      	str	r0, [sp, #32]
 800c43c:	4621      	mov	r1, r4
 800c43e:	4658      	mov	r0, fp
 800c440:	f000 fc70 	bl	800cd24 <__mdiff>
 800c444:	68c2      	ldr	r2, [r0, #12]
 800c446:	4606      	mov	r6, r0
 800c448:	bb02      	cbnz	r2, 800c48c <_dtoa_r+0xa1c>
 800c44a:	4601      	mov	r1, r0
 800c44c:	4648      	mov	r0, r9
 800c44e:	f000 fc4d 	bl	800ccec <__mcmp>
 800c452:	4602      	mov	r2, r0
 800c454:	4631      	mov	r1, r6
 800c456:	4658      	mov	r0, fp
 800c458:	920e      	str	r2, [sp, #56]	@ 0x38
 800c45a:	f000 fa0d 	bl	800c878 <_Bfree>
 800c45e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c460:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c462:	9e07      	ldr	r6, [sp, #28]
 800c464:	ea43 0102 	orr.w	r1, r3, r2
 800c468:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c46a:	4319      	orrs	r1, r3
 800c46c:	d110      	bne.n	800c490 <_dtoa_r+0xa20>
 800c46e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c472:	d029      	beq.n	800c4c8 <_dtoa_r+0xa58>
 800c474:	9b08      	ldr	r3, [sp, #32]
 800c476:	2b00      	cmp	r3, #0
 800c478:	dd02      	ble.n	800c480 <_dtoa_r+0xa10>
 800c47a:	9b02      	ldr	r3, [sp, #8]
 800c47c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c480:	9b00      	ldr	r3, [sp, #0]
 800c482:	f883 8000 	strb.w	r8, [r3]
 800c486:	e63f      	b.n	800c108 <_dtoa_r+0x698>
 800c488:	4628      	mov	r0, r5
 800c48a:	e7bb      	b.n	800c404 <_dtoa_r+0x994>
 800c48c:	2201      	movs	r2, #1
 800c48e:	e7e1      	b.n	800c454 <_dtoa_r+0x9e4>
 800c490:	9b08      	ldr	r3, [sp, #32]
 800c492:	2b00      	cmp	r3, #0
 800c494:	db04      	blt.n	800c4a0 <_dtoa_r+0xa30>
 800c496:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c498:	430b      	orrs	r3, r1
 800c49a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c49c:	430b      	orrs	r3, r1
 800c49e:	d120      	bne.n	800c4e2 <_dtoa_r+0xa72>
 800c4a0:	2a00      	cmp	r2, #0
 800c4a2:	dded      	ble.n	800c480 <_dtoa_r+0xa10>
 800c4a4:	4649      	mov	r1, r9
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	4658      	mov	r0, fp
 800c4aa:	f000 fbb3 	bl	800cc14 <__lshift>
 800c4ae:	4621      	mov	r1, r4
 800c4b0:	4681      	mov	r9, r0
 800c4b2:	f000 fc1b 	bl	800ccec <__mcmp>
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	dc03      	bgt.n	800c4c2 <_dtoa_r+0xa52>
 800c4ba:	d1e1      	bne.n	800c480 <_dtoa_r+0xa10>
 800c4bc:	f018 0f01 	tst.w	r8, #1
 800c4c0:	d0de      	beq.n	800c480 <_dtoa_r+0xa10>
 800c4c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c4c6:	d1d8      	bne.n	800c47a <_dtoa_r+0xa0a>
 800c4c8:	9a00      	ldr	r2, [sp, #0]
 800c4ca:	2339      	movs	r3, #57	@ 0x39
 800c4cc:	7013      	strb	r3, [r2, #0]
 800c4ce:	4633      	mov	r3, r6
 800c4d0:	461e      	mov	r6, r3
 800c4d2:	3b01      	subs	r3, #1
 800c4d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c4d8:	2a39      	cmp	r2, #57	@ 0x39
 800c4da:	d052      	beq.n	800c582 <_dtoa_r+0xb12>
 800c4dc:	3201      	adds	r2, #1
 800c4de:	701a      	strb	r2, [r3, #0]
 800c4e0:	e612      	b.n	800c108 <_dtoa_r+0x698>
 800c4e2:	2a00      	cmp	r2, #0
 800c4e4:	dd07      	ble.n	800c4f6 <_dtoa_r+0xa86>
 800c4e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c4ea:	d0ed      	beq.n	800c4c8 <_dtoa_r+0xa58>
 800c4ec:	9a00      	ldr	r2, [sp, #0]
 800c4ee:	f108 0301 	add.w	r3, r8, #1
 800c4f2:	7013      	strb	r3, [r2, #0]
 800c4f4:	e608      	b.n	800c108 <_dtoa_r+0x698>
 800c4f6:	9b07      	ldr	r3, [sp, #28]
 800c4f8:	9a07      	ldr	r2, [sp, #28]
 800c4fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c4fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c500:	4293      	cmp	r3, r2
 800c502:	d028      	beq.n	800c556 <_dtoa_r+0xae6>
 800c504:	4649      	mov	r1, r9
 800c506:	2300      	movs	r3, #0
 800c508:	220a      	movs	r2, #10
 800c50a:	4658      	mov	r0, fp
 800c50c:	f000 f9d6 	bl	800c8bc <__multadd>
 800c510:	42af      	cmp	r7, r5
 800c512:	4681      	mov	r9, r0
 800c514:	f04f 0300 	mov.w	r3, #0
 800c518:	f04f 020a 	mov.w	r2, #10
 800c51c:	4639      	mov	r1, r7
 800c51e:	4658      	mov	r0, fp
 800c520:	d107      	bne.n	800c532 <_dtoa_r+0xac2>
 800c522:	f000 f9cb 	bl	800c8bc <__multadd>
 800c526:	4607      	mov	r7, r0
 800c528:	4605      	mov	r5, r0
 800c52a:	9b07      	ldr	r3, [sp, #28]
 800c52c:	3301      	adds	r3, #1
 800c52e:	9307      	str	r3, [sp, #28]
 800c530:	e774      	b.n	800c41c <_dtoa_r+0x9ac>
 800c532:	f000 f9c3 	bl	800c8bc <__multadd>
 800c536:	4629      	mov	r1, r5
 800c538:	4607      	mov	r7, r0
 800c53a:	2300      	movs	r3, #0
 800c53c:	220a      	movs	r2, #10
 800c53e:	4658      	mov	r0, fp
 800c540:	f000 f9bc 	bl	800c8bc <__multadd>
 800c544:	4605      	mov	r5, r0
 800c546:	e7f0      	b.n	800c52a <_dtoa_r+0xaba>
 800c548:	9b00      	ldr	r3, [sp, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	bfcc      	ite	gt
 800c54e:	461e      	movgt	r6, r3
 800c550:	2601      	movle	r6, #1
 800c552:	4456      	add	r6, sl
 800c554:	2700      	movs	r7, #0
 800c556:	4649      	mov	r1, r9
 800c558:	2201      	movs	r2, #1
 800c55a:	4658      	mov	r0, fp
 800c55c:	f000 fb5a 	bl	800cc14 <__lshift>
 800c560:	4621      	mov	r1, r4
 800c562:	4681      	mov	r9, r0
 800c564:	f000 fbc2 	bl	800ccec <__mcmp>
 800c568:	2800      	cmp	r0, #0
 800c56a:	dcb0      	bgt.n	800c4ce <_dtoa_r+0xa5e>
 800c56c:	d102      	bne.n	800c574 <_dtoa_r+0xb04>
 800c56e:	f018 0f01 	tst.w	r8, #1
 800c572:	d1ac      	bne.n	800c4ce <_dtoa_r+0xa5e>
 800c574:	4633      	mov	r3, r6
 800c576:	461e      	mov	r6, r3
 800c578:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c57c:	2a30      	cmp	r2, #48	@ 0x30
 800c57e:	d0fa      	beq.n	800c576 <_dtoa_r+0xb06>
 800c580:	e5c2      	b.n	800c108 <_dtoa_r+0x698>
 800c582:	459a      	cmp	sl, r3
 800c584:	d1a4      	bne.n	800c4d0 <_dtoa_r+0xa60>
 800c586:	9b04      	ldr	r3, [sp, #16]
 800c588:	3301      	adds	r3, #1
 800c58a:	9304      	str	r3, [sp, #16]
 800c58c:	2331      	movs	r3, #49	@ 0x31
 800c58e:	f88a 3000 	strb.w	r3, [sl]
 800c592:	e5b9      	b.n	800c108 <_dtoa_r+0x698>
 800c594:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c596:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c5f4 <_dtoa_r+0xb84>
 800c59a:	b11b      	cbz	r3, 800c5a4 <_dtoa_r+0xb34>
 800c59c:	f10a 0308 	add.w	r3, sl, #8
 800c5a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c5a2:	6013      	str	r3, [r2, #0]
 800c5a4:	4650      	mov	r0, sl
 800c5a6:	b019      	add	sp, #100	@ 0x64
 800c5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	f77f ae37 	ble.w	800c222 <_dtoa_r+0x7b2>
 800c5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5b8:	2001      	movs	r0, #1
 800c5ba:	e655      	b.n	800c268 <_dtoa_r+0x7f8>
 800c5bc:	9b00      	ldr	r3, [sp, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	f77f aed6 	ble.w	800c370 <_dtoa_r+0x900>
 800c5c4:	4656      	mov	r6, sl
 800c5c6:	4621      	mov	r1, r4
 800c5c8:	4648      	mov	r0, r9
 800c5ca:	f7ff f9c8 	bl	800b95e <quorem>
 800c5ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c5d2:	f806 8b01 	strb.w	r8, [r6], #1
 800c5d6:	9b00      	ldr	r3, [sp, #0]
 800c5d8:	eba6 020a 	sub.w	r2, r6, sl
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	ddb3      	ble.n	800c548 <_dtoa_r+0xad8>
 800c5e0:	4649      	mov	r1, r9
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	220a      	movs	r2, #10
 800c5e6:	4658      	mov	r0, fp
 800c5e8:	f000 f968 	bl	800c8bc <__multadd>
 800c5ec:	4681      	mov	r9, r0
 800c5ee:	e7ea      	b.n	800c5c6 <_dtoa_r+0xb56>
 800c5f0:	0800d9a9 	.word	0x0800d9a9
 800c5f4:	0800d92d 	.word	0x0800d92d

0800c5f8 <_free_r>:
 800c5f8:	b538      	push	{r3, r4, r5, lr}
 800c5fa:	4605      	mov	r5, r0
 800c5fc:	2900      	cmp	r1, #0
 800c5fe:	d041      	beq.n	800c684 <_free_r+0x8c>
 800c600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c604:	1f0c      	subs	r4, r1, #4
 800c606:	2b00      	cmp	r3, #0
 800c608:	bfb8      	it	lt
 800c60a:	18e4      	addlt	r4, r4, r3
 800c60c:	f000 f8e8 	bl	800c7e0 <__malloc_lock>
 800c610:	4a1d      	ldr	r2, [pc, #116]	@ (800c688 <_free_r+0x90>)
 800c612:	6813      	ldr	r3, [r2, #0]
 800c614:	b933      	cbnz	r3, 800c624 <_free_r+0x2c>
 800c616:	6063      	str	r3, [r4, #4]
 800c618:	6014      	str	r4, [r2, #0]
 800c61a:	4628      	mov	r0, r5
 800c61c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c620:	f000 b8e4 	b.w	800c7ec <__malloc_unlock>
 800c624:	42a3      	cmp	r3, r4
 800c626:	d908      	bls.n	800c63a <_free_r+0x42>
 800c628:	6820      	ldr	r0, [r4, #0]
 800c62a:	1821      	adds	r1, r4, r0
 800c62c:	428b      	cmp	r3, r1
 800c62e:	bf01      	itttt	eq
 800c630:	6819      	ldreq	r1, [r3, #0]
 800c632:	685b      	ldreq	r3, [r3, #4]
 800c634:	1809      	addeq	r1, r1, r0
 800c636:	6021      	streq	r1, [r4, #0]
 800c638:	e7ed      	b.n	800c616 <_free_r+0x1e>
 800c63a:	461a      	mov	r2, r3
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	b10b      	cbz	r3, 800c644 <_free_r+0x4c>
 800c640:	42a3      	cmp	r3, r4
 800c642:	d9fa      	bls.n	800c63a <_free_r+0x42>
 800c644:	6811      	ldr	r1, [r2, #0]
 800c646:	1850      	adds	r0, r2, r1
 800c648:	42a0      	cmp	r0, r4
 800c64a:	d10b      	bne.n	800c664 <_free_r+0x6c>
 800c64c:	6820      	ldr	r0, [r4, #0]
 800c64e:	4401      	add	r1, r0
 800c650:	1850      	adds	r0, r2, r1
 800c652:	4283      	cmp	r3, r0
 800c654:	6011      	str	r1, [r2, #0]
 800c656:	d1e0      	bne.n	800c61a <_free_r+0x22>
 800c658:	6818      	ldr	r0, [r3, #0]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	6053      	str	r3, [r2, #4]
 800c65e:	4408      	add	r0, r1
 800c660:	6010      	str	r0, [r2, #0]
 800c662:	e7da      	b.n	800c61a <_free_r+0x22>
 800c664:	d902      	bls.n	800c66c <_free_r+0x74>
 800c666:	230c      	movs	r3, #12
 800c668:	602b      	str	r3, [r5, #0]
 800c66a:	e7d6      	b.n	800c61a <_free_r+0x22>
 800c66c:	6820      	ldr	r0, [r4, #0]
 800c66e:	1821      	adds	r1, r4, r0
 800c670:	428b      	cmp	r3, r1
 800c672:	bf04      	itt	eq
 800c674:	6819      	ldreq	r1, [r3, #0]
 800c676:	685b      	ldreq	r3, [r3, #4]
 800c678:	6063      	str	r3, [r4, #4]
 800c67a:	bf04      	itt	eq
 800c67c:	1809      	addeq	r1, r1, r0
 800c67e:	6021      	streq	r1, [r4, #0]
 800c680:	6054      	str	r4, [r2, #4]
 800c682:	e7ca      	b.n	800c61a <_free_r+0x22>
 800c684:	bd38      	pop	{r3, r4, r5, pc}
 800c686:	bf00      	nop
 800c688:	20002470 	.word	0x20002470

0800c68c <malloc>:
 800c68c:	4b02      	ldr	r3, [pc, #8]	@ (800c698 <malloc+0xc>)
 800c68e:	4601      	mov	r1, r0
 800c690:	6818      	ldr	r0, [r3, #0]
 800c692:	f000 b825 	b.w	800c6e0 <_malloc_r>
 800c696:	bf00      	nop
 800c698:	2000002c 	.word	0x2000002c

0800c69c <sbrk_aligned>:
 800c69c:	b570      	push	{r4, r5, r6, lr}
 800c69e:	4e0f      	ldr	r6, [pc, #60]	@ (800c6dc <sbrk_aligned+0x40>)
 800c6a0:	460c      	mov	r4, r1
 800c6a2:	6831      	ldr	r1, [r6, #0]
 800c6a4:	4605      	mov	r5, r0
 800c6a6:	b911      	cbnz	r1, 800c6ae <sbrk_aligned+0x12>
 800c6a8:	f000 fcd4 	bl	800d054 <_sbrk_r>
 800c6ac:	6030      	str	r0, [r6, #0]
 800c6ae:	4621      	mov	r1, r4
 800c6b0:	4628      	mov	r0, r5
 800c6b2:	f000 fccf 	bl	800d054 <_sbrk_r>
 800c6b6:	1c43      	adds	r3, r0, #1
 800c6b8:	d103      	bne.n	800c6c2 <sbrk_aligned+0x26>
 800c6ba:	f04f 34ff 	mov.w	r4, #4294967295
 800c6be:	4620      	mov	r0, r4
 800c6c0:	bd70      	pop	{r4, r5, r6, pc}
 800c6c2:	1cc4      	adds	r4, r0, #3
 800c6c4:	f024 0403 	bic.w	r4, r4, #3
 800c6c8:	42a0      	cmp	r0, r4
 800c6ca:	d0f8      	beq.n	800c6be <sbrk_aligned+0x22>
 800c6cc:	1a21      	subs	r1, r4, r0
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	f000 fcc0 	bl	800d054 <_sbrk_r>
 800c6d4:	3001      	adds	r0, #1
 800c6d6:	d1f2      	bne.n	800c6be <sbrk_aligned+0x22>
 800c6d8:	e7ef      	b.n	800c6ba <sbrk_aligned+0x1e>
 800c6da:	bf00      	nop
 800c6dc:	2000246c 	.word	0x2000246c

0800c6e0 <_malloc_r>:
 800c6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6e4:	1ccd      	adds	r5, r1, #3
 800c6e6:	f025 0503 	bic.w	r5, r5, #3
 800c6ea:	3508      	adds	r5, #8
 800c6ec:	2d0c      	cmp	r5, #12
 800c6ee:	bf38      	it	cc
 800c6f0:	250c      	movcc	r5, #12
 800c6f2:	2d00      	cmp	r5, #0
 800c6f4:	4606      	mov	r6, r0
 800c6f6:	db01      	blt.n	800c6fc <_malloc_r+0x1c>
 800c6f8:	42a9      	cmp	r1, r5
 800c6fa:	d904      	bls.n	800c706 <_malloc_r+0x26>
 800c6fc:	230c      	movs	r3, #12
 800c6fe:	6033      	str	r3, [r6, #0]
 800c700:	2000      	movs	r0, #0
 800c702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c706:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c7dc <_malloc_r+0xfc>
 800c70a:	f000 f869 	bl	800c7e0 <__malloc_lock>
 800c70e:	f8d8 3000 	ldr.w	r3, [r8]
 800c712:	461c      	mov	r4, r3
 800c714:	bb44      	cbnz	r4, 800c768 <_malloc_r+0x88>
 800c716:	4629      	mov	r1, r5
 800c718:	4630      	mov	r0, r6
 800c71a:	f7ff ffbf 	bl	800c69c <sbrk_aligned>
 800c71e:	1c43      	adds	r3, r0, #1
 800c720:	4604      	mov	r4, r0
 800c722:	d158      	bne.n	800c7d6 <_malloc_r+0xf6>
 800c724:	f8d8 4000 	ldr.w	r4, [r8]
 800c728:	4627      	mov	r7, r4
 800c72a:	2f00      	cmp	r7, #0
 800c72c:	d143      	bne.n	800c7b6 <_malloc_r+0xd6>
 800c72e:	2c00      	cmp	r4, #0
 800c730:	d04b      	beq.n	800c7ca <_malloc_r+0xea>
 800c732:	6823      	ldr	r3, [r4, #0]
 800c734:	4639      	mov	r1, r7
 800c736:	4630      	mov	r0, r6
 800c738:	eb04 0903 	add.w	r9, r4, r3
 800c73c:	f000 fc8a 	bl	800d054 <_sbrk_r>
 800c740:	4581      	cmp	r9, r0
 800c742:	d142      	bne.n	800c7ca <_malloc_r+0xea>
 800c744:	6821      	ldr	r1, [r4, #0]
 800c746:	1a6d      	subs	r5, r5, r1
 800c748:	4629      	mov	r1, r5
 800c74a:	4630      	mov	r0, r6
 800c74c:	f7ff ffa6 	bl	800c69c <sbrk_aligned>
 800c750:	3001      	adds	r0, #1
 800c752:	d03a      	beq.n	800c7ca <_malloc_r+0xea>
 800c754:	6823      	ldr	r3, [r4, #0]
 800c756:	442b      	add	r3, r5
 800c758:	6023      	str	r3, [r4, #0]
 800c75a:	f8d8 3000 	ldr.w	r3, [r8]
 800c75e:	685a      	ldr	r2, [r3, #4]
 800c760:	bb62      	cbnz	r2, 800c7bc <_malloc_r+0xdc>
 800c762:	f8c8 7000 	str.w	r7, [r8]
 800c766:	e00f      	b.n	800c788 <_malloc_r+0xa8>
 800c768:	6822      	ldr	r2, [r4, #0]
 800c76a:	1b52      	subs	r2, r2, r5
 800c76c:	d420      	bmi.n	800c7b0 <_malloc_r+0xd0>
 800c76e:	2a0b      	cmp	r2, #11
 800c770:	d917      	bls.n	800c7a2 <_malloc_r+0xc2>
 800c772:	1961      	adds	r1, r4, r5
 800c774:	42a3      	cmp	r3, r4
 800c776:	6025      	str	r5, [r4, #0]
 800c778:	bf18      	it	ne
 800c77a:	6059      	strne	r1, [r3, #4]
 800c77c:	6863      	ldr	r3, [r4, #4]
 800c77e:	bf08      	it	eq
 800c780:	f8c8 1000 	streq.w	r1, [r8]
 800c784:	5162      	str	r2, [r4, r5]
 800c786:	604b      	str	r3, [r1, #4]
 800c788:	4630      	mov	r0, r6
 800c78a:	f000 f82f 	bl	800c7ec <__malloc_unlock>
 800c78e:	f104 000b 	add.w	r0, r4, #11
 800c792:	1d23      	adds	r3, r4, #4
 800c794:	f020 0007 	bic.w	r0, r0, #7
 800c798:	1ac2      	subs	r2, r0, r3
 800c79a:	bf1c      	itt	ne
 800c79c:	1a1b      	subne	r3, r3, r0
 800c79e:	50a3      	strne	r3, [r4, r2]
 800c7a0:	e7af      	b.n	800c702 <_malloc_r+0x22>
 800c7a2:	6862      	ldr	r2, [r4, #4]
 800c7a4:	42a3      	cmp	r3, r4
 800c7a6:	bf0c      	ite	eq
 800c7a8:	f8c8 2000 	streq.w	r2, [r8]
 800c7ac:	605a      	strne	r2, [r3, #4]
 800c7ae:	e7eb      	b.n	800c788 <_malloc_r+0xa8>
 800c7b0:	4623      	mov	r3, r4
 800c7b2:	6864      	ldr	r4, [r4, #4]
 800c7b4:	e7ae      	b.n	800c714 <_malloc_r+0x34>
 800c7b6:	463c      	mov	r4, r7
 800c7b8:	687f      	ldr	r7, [r7, #4]
 800c7ba:	e7b6      	b.n	800c72a <_malloc_r+0x4a>
 800c7bc:	461a      	mov	r2, r3
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	42a3      	cmp	r3, r4
 800c7c2:	d1fb      	bne.n	800c7bc <_malloc_r+0xdc>
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	6053      	str	r3, [r2, #4]
 800c7c8:	e7de      	b.n	800c788 <_malloc_r+0xa8>
 800c7ca:	230c      	movs	r3, #12
 800c7cc:	6033      	str	r3, [r6, #0]
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	f000 f80c 	bl	800c7ec <__malloc_unlock>
 800c7d4:	e794      	b.n	800c700 <_malloc_r+0x20>
 800c7d6:	6005      	str	r5, [r0, #0]
 800c7d8:	e7d6      	b.n	800c788 <_malloc_r+0xa8>
 800c7da:	bf00      	nop
 800c7dc:	20002470 	.word	0x20002470

0800c7e0 <__malloc_lock>:
 800c7e0:	4801      	ldr	r0, [pc, #4]	@ (800c7e8 <__malloc_lock+0x8>)
 800c7e2:	f7ff b8ac 	b.w	800b93e <__retarget_lock_acquire_recursive>
 800c7e6:	bf00      	nop
 800c7e8:	20002468 	.word	0x20002468

0800c7ec <__malloc_unlock>:
 800c7ec:	4801      	ldr	r0, [pc, #4]	@ (800c7f4 <__malloc_unlock+0x8>)
 800c7ee:	f7ff b8a7 	b.w	800b940 <__retarget_lock_release_recursive>
 800c7f2:	bf00      	nop
 800c7f4:	20002468 	.word	0x20002468

0800c7f8 <_Balloc>:
 800c7f8:	b570      	push	{r4, r5, r6, lr}
 800c7fa:	69c6      	ldr	r6, [r0, #28]
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	460d      	mov	r5, r1
 800c800:	b976      	cbnz	r6, 800c820 <_Balloc+0x28>
 800c802:	2010      	movs	r0, #16
 800c804:	f7ff ff42 	bl	800c68c <malloc>
 800c808:	4602      	mov	r2, r0
 800c80a:	61e0      	str	r0, [r4, #28]
 800c80c:	b920      	cbnz	r0, 800c818 <_Balloc+0x20>
 800c80e:	4b18      	ldr	r3, [pc, #96]	@ (800c870 <_Balloc+0x78>)
 800c810:	4818      	ldr	r0, [pc, #96]	@ (800c874 <_Balloc+0x7c>)
 800c812:	216b      	movs	r1, #107	@ 0x6b
 800c814:	f000 fc2e 	bl	800d074 <__assert_func>
 800c818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c81c:	6006      	str	r6, [r0, #0]
 800c81e:	60c6      	str	r6, [r0, #12]
 800c820:	69e6      	ldr	r6, [r4, #28]
 800c822:	68f3      	ldr	r3, [r6, #12]
 800c824:	b183      	cbz	r3, 800c848 <_Balloc+0x50>
 800c826:	69e3      	ldr	r3, [r4, #28]
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c82e:	b9b8      	cbnz	r0, 800c860 <_Balloc+0x68>
 800c830:	2101      	movs	r1, #1
 800c832:	fa01 f605 	lsl.w	r6, r1, r5
 800c836:	1d72      	adds	r2, r6, #5
 800c838:	0092      	lsls	r2, r2, #2
 800c83a:	4620      	mov	r0, r4
 800c83c:	f000 fc38 	bl	800d0b0 <_calloc_r>
 800c840:	b160      	cbz	r0, 800c85c <_Balloc+0x64>
 800c842:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c846:	e00e      	b.n	800c866 <_Balloc+0x6e>
 800c848:	2221      	movs	r2, #33	@ 0x21
 800c84a:	2104      	movs	r1, #4
 800c84c:	4620      	mov	r0, r4
 800c84e:	f000 fc2f 	bl	800d0b0 <_calloc_r>
 800c852:	69e3      	ldr	r3, [r4, #28]
 800c854:	60f0      	str	r0, [r6, #12]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d1e4      	bne.n	800c826 <_Balloc+0x2e>
 800c85c:	2000      	movs	r0, #0
 800c85e:	bd70      	pop	{r4, r5, r6, pc}
 800c860:	6802      	ldr	r2, [r0, #0]
 800c862:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c866:	2300      	movs	r3, #0
 800c868:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c86c:	e7f7      	b.n	800c85e <_Balloc+0x66>
 800c86e:	bf00      	nop
 800c870:	0800d93a 	.word	0x0800d93a
 800c874:	0800d9ba 	.word	0x0800d9ba

0800c878 <_Bfree>:
 800c878:	b570      	push	{r4, r5, r6, lr}
 800c87a:	69c6      	ldr	r6, [r0, #28]
 800c87c:	4605      	mov	r5, r0
 800c87e:	460c      	mov	r4, r1
 800c880:	b976      	cbnz	r6, 800c8a0 <_Bfree+0x28>
 800c882:	2010      	movs	r0, #16
 800c884:	f7ff ff02 	bl	800c68c <malloc>
 800c888:	4602      	mov	r2, r0
 800c88a:	61e8      	str	r0, [r5, #28]
 800c88c:	b920      	cbnz	r0, 800c898 <_Bfree+0x20>
 800c88e:	4b09      	ldr	r3, [pc, #36]	@ (800c8b4 <_Bfree+0x3c>)
 800c890:	4809      	ldr	r0, [pc, #36]	@ (800c8b8 <_Bfree+0x40>)
 800c892:	218f      	movs	r1, #143	@ 0x8f
 800c894:	f000 fbee 	bl	800d074 <__assert_func>
 800c898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c89c:	6006      	str	r6, [r0, #0]
 800c89e:	60c6      	str	r6, [r0, #12]
 800c8a0:	b13c      	cbz	r4, 800c8b2 <_Bfree+0x3a>
 800c8a2:	69eb      	ldr	r3, [r5, #28]
 800c8a4:	6862      	ldr	r2, [r4, #4]
 800c8a6:	68db      	ldr	r3, [r3, #12]
 800c8a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8ac:	6021      	str	r1, [r4, #0]
 800c8ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c8b2:	bd70      	pop	{r4, r5, r6, pc}
 800c8b4:	0800d93a 	.word	0x0800d93a
 800c8b8:	0800d9ba 	.word	0x0800d9ba

0800c8bc <__multadd>:
 800c8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8c0:	690d      	ldr	r5, [r1, #16]
 800c8c2:	4607      	mov	r7, r0
 800c8c4:	460c      	mov	r4, r1
 800c8c6:	461e      	mov	r6, r3
 800c8c8:	f101 0c14 	add.w	ip, r1, #20
 800c8cc:	2000      	movs	r0, #0
 800c8ce:	f8dc 3000 	ldr.w	r3, [ip]
 800c8d2:	b299      	uxth	r1, r3
 800c8d4:	fb02 6101 	mla	r1, r2, r1, r6
 800c8d8:	0c1e      	lsrs	r6, r3, #16
 800c8da:	0c0b      	lsrs	r3, r1, #16
 800c8dc:	fb02 3306 	mla	r3, r2, r6, r3
 800c8e0:	b289      	uxth	r1, r1
 800c8e2:	3001      	adds	r0, #1
 800c8e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c8e8:	4285      	cmp	r5, r0
 800c8ea:	f84c 1b04 	str.w	r1, [ip], #4
 800c8ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c8f2:	dcec      	bgt.n	800c8ce <__multadd+0x12>
 800c8f4:	b30e      	cbz	r6, 800c93a <__multadd+0x7e>
 800c8f6:	68a3      	ldr	r3, [r4, #8]
 800c8f8:	42ab      	cmp	r3, r5
 800c8fa:	dc19      	bgt.n	800c930 <__multadd+0x74>
 800c8fc:	6861      	ldr	r1, [r4, #4]
 800c8fe:	4638      	mov	r0, r7
 800c900:	3101      	adds	r1, #1
 800c902:	f7ff ff79 	bl	800c7f8 <_Balloc>
 800c906:	4680      	mov	r8, r0
 800c908:	b928      	cbnz	r0, 800c916 <__multadd+0x5a>
 800c90a:	4602      	mov	r2, r0
 800c90c:	4b0c      	ldr	r3, [pc, #48]	@ (800c940 <__multadd+0x84>)
 800c90e:	480d      	ldr	r0, [pc, #52]	@ (800c944 <__multadd+0x88>)
 800c910:	21ba      	movs	r1, #186	@ 0xba
 800c912:	f000 fbaf 	bl	800d074 <__assert_func>
 800c916:	6922      	ldr	r2, [r4, #16]
 800c918:	3202      	adds	r2, #2
 800c91a:	f104 010c 	add.w	r1, r4, #12
 800c91e:	0092      	lsls	r2, r2, #2
 800c920:	300c      	adds	r0, #12
 800c922:	f7ff f80e 	bl	800b942 <memcpy>
 800c926:	4621      	mov	r1, r4
 800c928:	4638      	mov	r0, r7
 800c92a:	f7ff ffa5 	bl	800c878 <_Bfree>
 800c92e:	4644      	mov	r4, r8
 800c930:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c934:	3501      	adds	r5, #1
 800c936:	615e      	str	r6, [r3, #20]
 800c938:	6125      	str	r5, [r4, #16]
 800c93a:	4620      	mov	r0, r4
 800c93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c940:	0800d9a9 	.word	0x0800d9a9
 800c944:	0800d9ba 	.word	0x0800d9ba

0800c948 <__hi0bits>:
 800c948:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c94c:	4603      	mov	r3, r0
 800c94e:	bf36      	itet	cc
 800c950:	0403      	lslcc	r3, r0, #16
 800c952:	2000      	movcs	r0, #0
 800c954:	2010      	movcc	r0, #16
 800c956:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c95a:	bf3c      	itt	cc
 800c95c:	021b      	lslcc	r3, r3, #8
 800c95e:	3008      	addcc	r0, #8
 800c960:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c964:	bf3c      	itt	cc
 800c966:	011b      	lslcc	r3, r3, #4
 800c968:	3004      	addcc	r0, #4
 800c96a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c96e:	bf3c      	itt	cc
 800c970:	009b      	lslcc	r3, r3, #2
 800c972:	3002      	addcc	r0, #2
 800c974:	2b00      	cmp	r3, #0
 800c976:	db05      	blt.n	800c984 <__hi0bits+0x3c>
 800c978:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c97c:	f100 0001 	add.w	r0, r0, #1
 800c980:	bf08      	it	eq
 800c982:	2020      	moveq	r0, #32
 800c984:	4770      	bx	lr

0800c986 <__lo0bits>:
 800c986:	6803      	ldr	r3, [r0, #0]
 800c988:	4602      	mov	r2, r0
 800c98a:	f013 0007 	ands.w	r0, r3, #7
 800c98e:	d00b      	beq.n	800c9a8 <__lo0bits+0x22>
 800c990:	07d9      	lsls	r1, r3, #31
 800c992:	d421      	bmi.n	800c9d8 <__lo0bits+0x52>
 800c994:	0798      	lsls	r0, r3, #30
 800c996:	bf49      	itett	mi
 800c998:	085b      	lsrmi	r3, r3, #1
 800c99a:	089b      	lsrpl	r3, r3, #2
 800c99c:	2001      	movmi	r0, #1
 800c99e:	6013      	strmi	r3, [r2, #0]
 800c9a0:	bf5c      	itt	pl
 800c9a2:	6013      	strpl	r3, [r2, #0]
 800c9a4:	2002      	movpl	r0, #2
 800c9a6:	4770      	bx	lr
 800c9a8:	b299      	uxth	r1, r3
 800c9aa:	b909      	cbnz	r1, 800c9b0 <__lo0bits+0x2a>
 800c9ac:	0c1b      	lsrs	r3, r3, #16
 800c9ae:	2010      	movs	r0, #16
 800c9b0:	b2d9      	uxtb	r1, r3
 800c9b2:	b909      	cbnz	r1, 800c9b8 <__lo0bits+0x32>
 800c9b4:	3008      	adds	r0, #8
 800c9b6:	0a1b      	lsrs	r3, r3, #8
 800c9b8:	0719      	lsls	r1, r3, #28
 800c9ba:	bf04      	itt	eq
 800c9bc:	091b      	lsreq	r3, r3, #4
 800c9be:	3004      	addeq	r0, #4
 800c9c0:	0799      	lsls	r1, r3, #30
 800c9c2:	bf04      	itt	eq
 800c9c4:	089b      	lsreq	r3, r3, #2
 800c9c6:	3002      	addeq	r0, #2
 800c9c8:	07d9      	lsls	r1, r3, #31
 800c9ca:	d403      	bmi.n	800c9d4 <__lo0bits+0x4e>
 800c9cc:	085b      	lsrs	r3, r3, #1
 800c9ce:	f100 0001 	add.w	r0, r0, #1
 800c9d2:	d003      	beq.n	800c9dc <__lo0bits+0x56>
 800c9d4:	6013      	str	r3, [r2, #0]
 800c9d6:	4770      	bx	lr
 800c9d8:	2000      	movs	r0, #0
 800c9da:	4770      	bx	lr
 800c9dc:	2020      	movs	r0, #32
 800c9de:	4770      	bx	lr

0800c9e0 <__i2b>:
 800c9e0:	b510      	push	{r4, lr}
 800c9e2:	460c      	mov	r4, r1
 800c9e4:	2101      	movs	r1, #1
 800c9e6:	f7ff ff07 	bl	800c7f8 <_Balloc>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	b928      	cbnz	r0, 800c9fa <__i2b+0x1a>
 800c9ee:	4b05      	ldr	r3, [pc, #20]	@ (800ca04 <__i2b+0x24>)
 800c9f0:	4805      	ldr	r0, [pc, #20]	@ (800ca08 <__i2b+0x28>)
 800c9f2:	f240 1145 	movw	r1, #325	@ 0x145
 800c9f6:	f000 fb3d 	bl	800d074 <__assert_func>
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	6144      	str	r4, [r0, #20]
 800c9fe:	6103      	str	r3, [r0, #16]
 800ca00:	bd10      	pop	{r4, pc}
 800ca02:	bf00      	nop
 800ca04:	0800d9a9 	.word	0x0800d9a9
 800ca08:	0800d9ba 	.word	0x0800d9ba

0800ca0c <__multiply>:
 800ca0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca10:	4614      	mov	r4, r2
 800ca12:	690a      	ldr	r2, [r1, #16]
 800ca14:	6923      	ldr	r3, [r4, #16]
 800ca16:	429a      	cmp	r2, r3
 800ca18:	bfa8      	it	ge
 800ca1a:	4623      	movge	r3, r4
 800ca1c:	460f      	mov	r7, r1
 800ca1e:	bfa4      	itt	ge
 800ca20:	460c      	movge	r4, r1
 800ca22:	461f      	movge	r7, r3
 800ca24:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ca28:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ca2c:	68a3      	ldr	r3, [r4, #8]
 800ca2e:	6861      	ldr	r1, [r4, #4]
 800ca30:	eb0a 0609 	add.w	r6, sl, r9
 800ca34:	42b3      	cmp	r3, r6
 800ca36:	b085      	sub	sp, #20
 800ca38:	bfb8      	it	lt
 800ca3a:	3101      	addlt	r1, #1
 800ca3c:	f7ff fedc 	bl	800c7f8 <_Balloc>
 800ca40:	b930      	cbnz	r0, 800ca50 <__multiply+0x44>
 800ca42:	4602      	mov	r2, r0
 800ca44:	4b44      	ldr	r3, [pc, #272]	@ (800cb58 <__multiply+0x14c>)
 800ca46:	4845      	ldr	r0, [pc, #276]	@ (800cb5c <__multiply+0x150>)
 800ca48:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ca4c:	f000 fb12 	bl	800d074 <__assert_func>
 800ca50:	f100 0514 	add.w	r5, r0, #20
 800ca54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ca58:	462b      	mov	r3, r5
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	4543      	cmp	r3, r8
 800ca5e:	d321      	bcc.n	800caa4 <__multiply+0x98>
 800ca60:	f107 0114 	add.w	r1, r7, #20
 800ca64:	f104 0214 	add.w	r2, r4, #20
 800ca68:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ca6c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ca70:	9302      	str	r3, [sp, #8]
 800ca72:	1b13      	subs	r3, r2, r4
 800ca74:	3b15      	subs	r3, #21
 800ca76:	f023 0303 	bic.w	r3, r3, #3
 800ca7a:	3304      	adds	r3, #4
 800ca7c:	f104 0715 	add.w	r7, r4, #21
 800ca80:	42ba      	cmp	r2, r7
 800ca82:	bf38      	it	cc
 800ca84:	2304      	movcc	r3, #4
 800ca86:	9301      	str	r3, [sp, #4]
 800ca88:	9b02      	ldr	r3, [sp, #8]
 800ca8a:	9103      	str	r1, [sp, #12]
 800ca8c:	428b      	cmp	r3, r1
 800ca8e:	d80c      	bhi.n	800caaa <__multiply+0x9e>
 800ca90:	2e00      	cmp	r6, #0
 800ca92:	dd03      	ble.n	800ca9c <__multiply+0x90>
 800ca94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d05b      	beq.n	800cb54 <__multiply+0x148>
 800ca9c:	6106      	str	r6, [r0, #16]
 800ca9e:	b005      	add	sp, #20
 800caa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa4:	f843 2b04 	str.w	r2, [r3], #4
 800caa8:	e7d8      	b.n	800ca5c <__multiply+0x50>
 800caaa:	f8b1 a000 	ldrh.w	sl, [r1]
 800caae:	f1ba 0f00 	cmp.w	sl, #0
 800cab2:	d024      	beq.n	800cafe <__multiply+0xf2>
 800cab4:	f104 0e14 	add.w	lr, r4, #20
 800cab8:	46a9      	mov	r9, r5
 800caba:	f04f 0c00 	mov.w	ip, #0
 800cabe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cac2:	f8d9 3000 	ldr.w	r3, [r9]
 800cac6:	fa1f fb87 	uxth.w	fp, r7
 800caca:	b29b      	uxth	r3, r3
 800cacc:	fb0a 330b 	mla	r3, sl, fp, r3
 800cad0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cad4:	f8d9 7000 	ldr.w	r7, [r9]
 800cad8:	4463      	add	r3, ip
 800cada:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cade:	fb0a c70b 	mla	r7, sl, fp, ip
 800cae2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800caec:	4572      	cmp	r2, lr
 800caee:	f849 3b04 	str.w	r3, [r9], #4
 800caf2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800caf6:	d8e2      	bhi.n	800cabe <__multiply+0xb2>
 800caf8:	9b01      	ldr	r3, [sp, #4]
 800cafa:	f845 c003 	str.w	ip, [r5, r3]
 800cafe:	9b03      	ldr	r3, [sp, #12]
 800cb00:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cb04:	3104      	adds	r1, #4
 800cb06:	f1b9 0f00 	cmp.w	r9, #0
 800cb0a:	d021      	beq.n	800cb50 <__multiply+0x144>
 800cb0c:	682b      	ldr	r3, [r5, #0]
 800cb0e:	f104 0c14 	add.w	ip, r4, #20
 800cb12:	46ae      	mov	lr, r5
 800cb14:	f04f 0a00 	mov.w	sl, #0
 800cb18:	f8bc b000 	ldrh.w	fp, [ip]
 800cb1c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cb20:	fb09 770b 	mla	r7, r9, fp, r7
 800cb24:	4457      	add	r7, sl
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cb2c:	f84e 3b04 	str.w	r3, [lr], #4
 800cb30:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cb34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb38:	f8be 3000 	ldrh.w	r3, [lr]
 800cb3c:	fb09 330a 	mla	r3, r9, sl, r3
 800cb40:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cb44:	4562      	cmp	r2, ip
 800cb46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb4a:	d8e5      	bhi.n	800cb18 <__multiply+0x10c>
 800cb4c:	9f01      	ldr	r7, [sp, #4]
 800cb4e:	51eb      	str	r3, [r5, r7]
 800cb50:	3504      	adds	r5, #4
 800cb52:	e799      	b.n	800ca88 <__multiply+0x7c>
 800cb54:	3e01      	subs	r6, #1
 800cb56:	e79b      	b.n	800ca90 <__multiply+0x84>
 800cb58:	0800d9a9 	.word	0x0800d9a9
 800cb5c:	0800d9ba 	.word	0x0800d9ba

0800cb60 <__pow5mult>:
 800cb60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb64:	4615      	mov	r5, r2
 800cb66:	f012 0203 	ands.w	r2, r2, #3
 800cb6a:	4607      	mov	r7, r0
 800cb6c:	460e      	mov	r6, r1
 800cb6e:	d007      	beq.n	800cb80 <__pow5mult+0x20>
 800cb70:	4c25      	ldr	r4, [pc, #148]	@ (800cc08 <__pow5mult+0xa8>)
 800cb72:	3a01      	subs	r2, #1
 800cb74:	2300      	movs	r3, #0
 800cb76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb7a:	f7ff fe9f 	bl	800c8bc <__multadd>
 800cb7e:	4606      	mov	r6, r0
 800cb80:	10ad      	asrs	r5, r5, #2
 800cb82:	d03d      	beq.n	800cc00 <__pow5mult+0xa0>
 800cb84:	69fc      	ldr	r4, [r7, #28]
 800cb86:	b97c      	cbnz	r4, 800cba8 <__pow5mult+0x48>
 800cb88:	2010      	movs	r0, #16
 800cb8a:	f7ff fd7f 	bl	800c68c <malloc>
 800cb8e:	4602      	mov	r2, r0
 800cb90:	61f8      	str	r0, [r7, #28]
 800cb92:	b928      	cbnz	r0, 800cba0 <__pow5mult+0x40>
 800cb94:	4b1d      	ldr	r3, [pc, #116]	@ (800cc0c <__pow5mult+0xac>)
 800cb96:	481e      	ldr	r0, [pc, #120]	@ (800cc10 <__pow5mult+0xb0>)
 800cb98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cb9c:	f000 fa6a 	bl	800d074 <__assert_func>
 800cba0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cba4:	6004      	str	r4, [r0, #0]
 800cba6:	60c4      	str	r4, [r0, #12]
 800cba8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cbac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cbb0:	b94c      	cbnz	r4, 800cbc6 <__pow5mult+0x66>
 800cbb2:	f240 2171 	movw	r1, #625	@ 0x271
 800cbb6:	4638      	mov	r0, r7
 800cbb8:	f7ff ff12 	bl	800c9e0 <__i2b>
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	f8c8 0008 	str.w	r0, [r8, #8]
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	6003      	str	r3, [r0, #0]
 800cbc6:	f04f 0900 	mov.w	r9, #0
 800cbca:	07eb      	lsls	r3, r5, #31
 800cbcc:	d50a      	bpl.n	800cbe4 <__pow5mult+0x84>
 800cbce:	4631      	mov	r1, r6
 800cbd0:	4622      	mov	r2, r4
 800cbd2:	4638      	mov	r0, r7
 800cbd4:	f7ff ff1a 	bl	800ca0c <__multiply>
 800cbd8:	4631      	mov	r1, r6
 800cbda:	4680      	mov	r8, r0
 800cbdc:	4638      	mov	r0, r7
 800cbde:	f7ff fe4b 	bl	800c878 <_Bfree>
 800cbe2:	4646      	mov	r6, r8
 800cbe4:	106d      	asrs	r5, r5, #1
 800cbe6:	d00b      	beq.n	800cc00 <__pow5mult+0xa0>
 800cbe8:	6820      	ldr	r0, [r4, #0]
 800cbea:	b938      	cbnz	r0, 800cbfc <__pow5mult+0x9c>
 800cbec:	4622      	mov	r2, r4
 800cbee:	4621      	mov	r1, r4
 800cbf0:	4638      	mov	r0, r7
 800cbf2:	f7ff ff0b 	bl	800ca0c <__multiply>
 800cbf6:	6020      	str	r0, [r4, #0]
 800cbf8:	f8c0 9000 	str.w	r9, [r0]
 800cbfc:	4604      	mov	r4, r0
 800cbfe:	e7e4      	b.n	800cbca <__pow5mult+0x6a>
 800cc00:	4630      	mov	r0, r6
 800cc02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc06:	bf00      	nop
 800cc08:	0800da14 	.word	0x0800da14
 800cc0c:	0800d93a 	.word	0x0800d93a
 800cc10:	0800d9ba 	.word	0x0800d9ba

0800cc14 <__lshift>:
 800cc14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc18:	460c      	mov	r4, r1
 800cc1a:	6849      	ldr	r1, [r1, #4]
 800cc1c:	6923      	ldr	r3, [r4, #16]
 800cc1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc22:	68a3      	ldr	r3, [r4, #8]
 800cc24:	4607      	mov	r7, r0
 800cc26:	4691      	mov	r9, r2
 800cc28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc2c:	f108 0601 	add.w	r6, r8, #1
 800cc30:	42b3      	cmp	r3, r6
 800cc32:	db0b      	blt.n	800cc4c <__lshift+0x38>
 800cc34:	4638      	mov	r0, r7
 800cc36:	f7ff fddf 	bl	800c7f8 <_Balloc>
 800cc3a:	4605      	mov	r5, r0
 800cc3c:	b948      	cbnz	r0, 800cc52 <__lshift+0x3e>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	4b28      	ldr	r3, [pc, #160]	@ (800cce4 <__lshift+0xd0>)
 800cc42:	4829      	ldr	r0, [pc, #164]	@ (800cce8 <__lshift+0xd4>)
 800cc44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cc48:	f000 fa14 	bl	800d074 <__assert_func>
 800cc4c:	3101      	adds	r1, #1
 800cc4e:	005b      	lsls	r3, r3, #1
 800cc50:	e7ee      	b.n	800cc30 <__lshift+0x1c>
 800cc52:	2300      	movs	r3, #0
 800cc54:	f100 0114 	add.w	r1, r0, #20
 800cc58:	f100 0210 	add.w	r2, r0, #16
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	4553      	cmp	r3, sl
 800cc60:	db33      	blt.n	800ccca <__lshift+0xb6>
 800cc62:	6920      	ldr	r0, [r4, #16]
 800cc64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc68:	f104 0314 	add.w	r3, r4, #20
 800cc6c:	f019 091f 	ands.w	r9, r9, #31
 800cc70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc78:	d02b      	beq.n	800ccd2 <__lshift+0xbe>
 800cc7a:	f1c9 0e20 	rsb	lr, r9, #32
 800cc7e:	468a      	mov	sl, r1
 800cc80:	2200      	movs	r2, #0
 800cc82:	6818      	ldr	r0, [r3, #0]
 800cc84:	fa00 f009 	lsl.w	r0, r0, r9
 800cc88:	4310      	orrs	r0, r2
 800cc8a:	f84a 0b04 	str.w	r0, [sl], #4
 800cc8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc92:	459c      	cmp	ip, r3
 800cc94:	fa22 f20e 	lsr.w	r2, r2, lr
 800cc98:	d8f3      	bhi.n	800cc82 <__lshift+0x6e>
 800cc9a:	ebac 0304 	sub.w	r3, ip, r4
 800cc9e:	3b15      	subs	r3, #21
 800cca0:	f023 0303 	bic.w	r3, r3, #3
 800cca4:	3304      	adds	r3, #4
 800cca6:	f104 0015 	add.w	r0, r4, #21
 800ccaa:	4584      	cmp	ip, r0
 800ccac:	bf38      	it	cc
 800ccae:	2304      	movcc	r3, #4
 800ccb0:	50ca      	str	r2, [r1, r3]
 800ccb2:	b10a      	cbz	r2, 800ccb8 <__lshift+0xa4>
 800ccb4:	f108 0602 	add.w	r6, r8, #2
 800ccb8:	3e01      	subs	r6, #1
 800ccba:	4638      	mov	r0, r7
 800ccbc:	612e      	str	r6, [r5, #16]
 800ccbe:	4621      	mov	r1, r4
 800ccc0:	f7ff fdda 	bl	800c878 <_Bfree>
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccca:	f842 0f04 	str.w	r0, [r2, #4]!
 800ccce:	3301      	adds	r3, #1
 800ccd0:	e7c5      	b.n	800cc5e <__lshift+0x4a>
 800ccd2:	3904      	subs	r1, #4
 800ccd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccd8:	f841 2f04 	str.w	r2, [r1, #4]!
 800ccdc:	459c      	cmp	ip, r3
 800ccde:	d8f9      	bhi.n	800ccd4 <__lshift+0xc0>
 800cce0:	e7ea      	b.n	800ccb8 <__lshift+0xa4>
 800cce2:	bf00      	nop
 800cce4:	0800d9a9 	.word	0x0800d9a9
 800cce8:	0800d9ba 	.word	0x0800d9ba

0800ccec <__mcmp>:
 800ccec:	690a      	ldr	r2, [r1, #16]
 800ccee:	4603      	mov	r3, r0
 800ccf0:	6900      	ldr	r0, [r0, #16]
 800ccf2:	1a80      	subs	r0, r0, r2
 800ccf4:	b530      	push	{r4, r5, lr}
 800ccf6:	d10e      	bne.n	800cd16 <__mcmp+0x2a>
 800ccf8:	3314      	adds	r3, #20
 800ccfa:	3114      	adds	r1, #20
 800ccfc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cd00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cd04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cd08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cd0c:	4295      	cmp	r5, r2
 800cd0e:	d003      	beq.n	800cd18 <__mcmp+0x2c>
 800cd10:	d205      	bcs.n	800cd1e <__mcmp+0x32>
 800cd12:	f04f 30ff 	mov.w	r0, #4294967295
 800cd16:	bd30      	pop	{r4, r5, pc}
 800cd18:	42a3      	cmp	r3, r4
 800cd1a:	d3f3      	bcc.n	800cd04 <__mcmp+0x18>
 800cd1c:	e7fb      	b.n	800cd16 <__mcmp+0x2a>
 800cd1e:	2001      	movs	r0, #1
 800cd20:	e7f9      	b.n	800cd16 <__mcmp+0x2a>
	...

0800cd24 <__mdiff>:
 800cd24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd28:	4689      	mov	r9, r1
 800cd2a:	4606      	mov	r6, r0
 800cd2c:	4611      	mov	r1, r2
 800cd2e:	4648      	mov	r0, r9
 800cd30:	4614      	mov	r4, r2
 800cd32:	f7ff ffdb 	bl	800ccec <__mcmp>
 800cd36:	1e05      	subs	r5, r0, #0
 800cd38:	d112      	bne.n	800cd60 <__mdiff+0x3c>
 800cd3a:	4629      	mov	r1, r5
 800cd3c:	4630      	mov	r0, r6
 800cd3e:	f7ff fd5b 	bl	800c7f8 <_Balloc>
 800cd42:	4602      	mov	r2, r0
 800cd44:	b928      	cbnz	r0, 800cd52 <__mdiff+0x2e>
 800cd46:	4b3f      	ldr	r3, [pc, #252]	@ (800ce44 <__mdiff+0x120>)
 800cd48:	f240 2137 	movw	r1, #567	@ 0x237
 800cd4c:	483e      	ldr	r0, [pc, #248]	@ (800ce48 <__mdiff+0x124>)
 800cd4e:	f000 f991 	bl	800d074 <__assert_func>
 800cd52:	2301      	movs	r3, #1
 800cd54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cd58:	4610      	mov	r0, r2
 800cd5a:	b003      	add	sp, #12
 800cd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd60:	bfbc      	itt	lt
 800cd62:	464b      	movlt	r3, r9
 800cd64:	46a1      	movlt	r9, r4
 800cd66:	4630      	mov	r0, r6
 800cd68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cd6c:	bfba      	itte	lt
 800cd6e:	461c      	movlt	r4, r3
 800cd70:	2501      	movlt	r5, #1
 800cd72:	2500      	movge	r5, #0
 800cd74:	f7ff fd40 	bl	800c7f8 <_Balloc>
 800cd78:	4602      	mov	r2, r0
 800cd7a:	b918      	cbnz	r0, 800cd84 <__mdiff+0x60>
 800cd7c:	4b31      	ldr	r3, [pc, #196]	@ (800ce44 <__mdiff+0x120>)
 800cd7e:	f240 2145 	movw	r1, #581	@ 0x245
 800cd82:	e7e3      	b.n	800cd4c <__mdiff+0x28>
 800cd84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cd88:	6926      	ldr	r6, [r4, #16]
 800cd8a:	60c5      	str	r5, [r0, #12]
 800cd8c:	f109 0310 	add.w	r3, r9, #16
 800cd90:	f109 0514 	add.w	r5, r9, #20
 800cd94:	f104 0e14 	add.w	lr, r4, #20
 800cd98:	f100 0b14 	add.w	fp, r0, #20
 800cd9c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cda0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cda4:	9301      	str	r3, [sp, #4]
 800cda6:	46d9      	mov	r9, fp
 800cda8:	f04f 0c00 	mov.w	ip, #0
 800cdac:	9b01      	ldr	r3, [sp, #4]
 800cdae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cdb2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cdb6:	9301      	str	r3, [sp, #4]
 800cdb8:	fa1f f38a 	uxth.w	r3, sl
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	b283      	uxth	r3, r0
 800cdc0:	1acb      	subs	r3, r1, r3
 800cdc2:	0c00      	lsrs	r0, r0, #16
 800cdc4:	4463      	add	r3, ip
 800cdc6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cdca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cdd4:	4576      	cmp	r6, lr
 800cdd6:	f849 3b04 	str.w	r3, [r9], #4
 800cdda:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cdde:	d8e5      	bhi.n	800cdac <__mdiff+0x88>
 800cde0:	1b33      	subs	r3, r6, r4
 800cde2:	3b15      	subs	r3, #21
 800cde4:	f023 0303 	bic.w	r3, r3, #3
 800cde8:	3415      	adds	r4, #21
 800cdea:	3304      	adds	r3, #4
 800cdec:	42a6      	cmp	r6, r4
 800cdee:	bf38      	it	cc
 800cdf0:	2304      	movcc	r3, #4
 800cdf2:	441d      	add	r5, r3
 800cdf4:	445b      	add	r3, fp
 800cdf6:	461e      	mov	r6, r3
 800cdf8:	462c      	mov	r4, r5
 800cdfa:	4544      	cmp	r4, r8
 800cdfc:	d30e      	bcc.n	800ce1c <__mdiff+0xf8>
 800cdfe:	f108 0103 	add.w	r1, r8, #3
 800ce02:	1b49      	subs	r1, r1, r5
 800ce04:	f021 0103 	bic.w	r1, r1, #3
 800ce08:	3d03      	subs	r5, #3
 800ce0a:	45a8      	cmp	r8, r5
 800ce0c:	bf38      	it	cc
 800ce0e:	2100      	movcc	r1, #0
 800ce10:	440b      	add	r3, r1
 800ce12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce16:	b191      	cbz	r1, 800ce3e <__mdiff+0x11a>
 800ce18:	6117      	str	r7, [r2, #16]
 800ce1a:	e79d      	b.n	800cd58 <__mdiff+0x34>
 800ce1c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ce20:	46e6      	mov	lr, ip
 800ce22:	0c08      	lsrs	r0, r1, #16
 800ce24:	fa1c fc81 	uxtah	ip, ip, r1
 800ce28:	4471      	add	r1, lr
 800ce2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ce2e:	b289      	uxth	r1, r1
 800ce30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ce34:	f846 1b04 	str.w	r1, [r6], #4
 800ce38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ce3c:	e7dd      	b.n	800cdfa <__mdiff+0xd6>
 800ce3e:	3f01      	subs	r7, #1
 800ce40:	e7e7      	b.n	800ce12 <__mdiff+0xee>
 800ce42:	bf00      	nop
 800ce44:	0800d9a9 	.word	0x0800d9a9
 800ce48:	0800d9ba 	.word	0x0800d9ba

0800ce4c <__d2b>:
 800ce4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce50:	460f      	mov	r7, r1
 800ce52:	2101      	movs	r1, #1
 800ce54:	ec59 8b10 	vmov	r8, r9, d0
 800ce58:	4616      	mov	r6, r2
 800ce5a:	f7ff fccd 	bl	800c7f8 <_Balloc>
 800ce5e:	4604      	mov	r4, r0
 800ce60:	b930      	cbnz	r0, 800ce70 <__d2b+0x24>
 800ce62:	4602      	mov	r2, r0
 800ce64:	4b23      	ldr	r3, [pc, #140]	@ (800cef4 <__d2b+0xa8>)
 800ce66:	4824      	ldr	r0, [pc, #144]	@ (800cef8 <__d2b+0xac>)
 800ce68:	f240 310f 	movw	r1, #783	@ 0x30f
 800ce6c:	f000 f902 	bl	800d074 <__assert_func>
 800ce70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ce74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce78:	b10d      	cbz	r5, 800ce7e <__d2b+0x32>
 800ce7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ce7e:	9301      	str	r3, [sp, #4]
 800ce80:	f1b8 0300 	subs.w	r3, r8, #0
 800ce84:	d023      	beq.n	800cece <__d2b+0x82>
 800ce86:	4668      	mov	r0, sp
 800ce88:	9300      	str	r3, [sp, #0]
 800ce8a:	f7ff fd7c 	bl	800c986 <__lo0bits>
 800ce8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ce92:	b1d0      	cbz	r0, 800ceca <__d2b+0x7e>
 800ce94:	f1c0 0320 	rsb	r3, r0, #32
 800ce98:	fa02 f303 	lsl.w	r3, r2, r3
 800ce9c:	430b      	orrs	r3, r1
 800ce9e:	40c2      	lsrs	r2, r0
 800cea0:	6163      	str	r3, [r4, #20]
 800cea2:	9201      	str	r2, [sp, #4]
 800cea4:	9b01      	ldr	r3, [sp, #4]
 800cea6:	61a3      	str	r3, [r4, #24]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	bf0c      	ite	eq
 800ceac:	2201      	moveq	r2, #1
 800ceae:	2202      	movne	r2, #2
 800ceb0:	6122      	str	r2, [r4, #16]
 800ceb2:	b1a5      	cbz	r5, 800cede <__d2b+0x92>
 800ceb4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ceb8:	4405      	add	r5, r0
 800ceba:	603d      	str	r5, [r7, #0]
 800cebc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cec0:	6030      	str	r0, [r6, #0]
 800cec2:	4620      	mov	r0, r4
 800cec4:	b003      	add	sp, #12
 800cec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ceca:	6161      	str	r1, [r4, #20]
 800cecc:	e7ea      	b.n	800cea4 <__d2b+0x58>
 800cece:	a801      	add	r0, sp, #4
 800ced0:	f7ff fd59 	bl	800c986 <__lo0bits>
 800ced4:	9b01      	ldr	r3, [sp, #4]
 800ced6:	6163      	str	r3, [r4, #20]
 800ced8:	3020      	adds	r0, #32
 800ceda:	2201      	movs	r2, #1
 800cedc:	e7e8      	b.n	800ceb0 <__d2b+0x64>
 800cede:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cee2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cee6:	6038      	str	r0, [r7, #0]
 800cee8:	6918      	ldr	r0, [r3, #16]
 800ceea:	f7ff fd2d 	bl	800c948 <__hi0bits>
 800ceee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cef2:	e7e5      	b.n	800cec0 <__d2b+0x74>
 800cef4:	0800d9a9 	.word	0x0800d9a9
 800cef8:	0800d9ba 	.word	0x0800d9ba

0800cefc <__sflush_r>:
 800cefc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf04:	0716      	lsls	r6, r2, #28
 800cf06:	4605      	mov	r5, r0
 800cf08:	460c      	mov	r4, r1
 800cf0a:	d454      	bmi.n	800cfb6 <__sflush_r+0xba>
 800cf0c:	684b      	ldr	r3, [r1, #4]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	dc02      	bgt.n	800cf18 <__sflush_r+0x1c>
 800cf12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	dd48      	ble.n	800cfaa <__sflush_r+0xae>
 800cf18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf1a:	2e00      	cmp	r6, #0
 800cf1c:	d045      	beq.n	800cfaa <__sflush_r+0xae>
 800cf1e:	2300      	movs	r3, #0
 800cf20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cf24:	682f      	ldr	r7, [r5, #0]
 800cf26:	6a21      	ldr	r1, [r4, #32]
 800cf28:	602b      	str	r3, [r5, #0]
 800cf2a:	d030      	beq.n	800cf8e <__sflush_r+0x92>
 800cf2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cf2e:	89a3      	ldrh	r3, [r4, #12]
 800cf30:	0759      	lsls	r1, r3, #29
 800cf32:	d505      	bpl.n	800cf40 <__sflush_r+0x44>
 800cf34:	6863      	ldr	r3, [r4, #4]
 800cf36:	1ad2      	subs	r2, r2, r3
 800cf38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cf3a:	b10b      	cbz	r3, 800cf40 <__sflush_r+0x44>
 800cf3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cf3e:	1ad2      	subs	r2, r2, r3
 800cf40:	2300      	movs	r3, #0
 800cf42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf44:	6a21      	ldr	r1, [r4, #32]
 800cf46:	4628      	mov	r0, r5
 800cf48:	47b0      	blx	r6
 800cf4a:	1c43      	adds	r3, r0, #1
 800cf4c:	89a3      	ldrh	r3, [r4, #12]
 800cf4e:	d106      	bne.n	800cf5e <__sflush_r+0x62>
 800cf50:	6829      	ldr	r1, [r5, #0]
 800cf52:	291d      	cmp	r1, #29
 800cf54:	d82b      	bhi.n	800cfae <__sflush_r+0xb2>
 800cf56:	4a2a      	ldr	r2, [pc, #168]	@ (800d000 <__sflush_r+0x104>)
 800cf58:	410a      	asrs	r2, r1
 800cf5a:	07d6      	lsls	r6, r2, #31
 800cf5c:	d427      	bmi.n	800cfae <__sflush_r+0xb2>
 800cf5e:	2200      	movs	r2, #0
 800cf60:	6062      	str	r2, [r4, #4]
 800cf62:	04d9      	lsls	r1, r3, #19
 800cf64:	6922      	ldr	r2, [r4, #16]
 800cf66:	6022      	str	r2, [r4, #0]
 800cf68:	d504      	bpl.n	800cf74 <__sflush_r+0x78>
 800cf6a:	1c42      	adds	r2, r0, #1
 800cf6c:	d101      	bne.n	800cf72 <__sflush_r+0x76>
 800cf6e:	682b      	ldr	r3, [r5, #0]
 800cf70:	b903      	cbnz	r3, 800cf74 <__sflush_r+0x78>
 800cf72:	6560      	str	r0, [r4, #84]	@ 0x54
 800cf74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf76:	602f      	str	r7, [r5, #0]
 800cf78:	b1b9      	cbz	r1, 800cfaa <__sflush_r+0xae>
 800cf7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf7e:	4299      	cmp	r1, r3
 800cf80:	d002      	beq.n	800cf88 <__sflush_r+0x8c>
 800cf82:	4628      	mov	r0, r5
 800cf84:	f7ff fb38 	bl	800c5f8 <_free_r>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf8c:	e00d      	b.n	800cfaa <__sflush_r+0xae>
 800cf8e:	2301      	movs	r3, #1
 800cf90:	4628      	mov	r0, r5
 800cf92:	47b0      	blx	r6
 800cf94:	4602      	mov	r2, r0
 800cf96:	1c50      	adds	r0, r2, #1
 800cf98:	d1c9      	bne.n	800cf2e <__sflush_r+0x32>
 800cf9a:	682b      	ldr	r3, [r5, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d0c6      	beq.n	800cf2e <__sflush_r+0x32>
 800cfa0:	2b1d      	cmp	r3, #29
 800cfa2:	d001      	beq.n	800cfa8 <__sflush_r+0xac>
 800cfa4:	2b16      	cmp	r3, #22
 800cfa6:	d11e      	bne.n	800cfe6 <__sflush_r+0xea>
 800cfa8:	602f      	str	r7, [r5, #0]
 800cfaa:	2000      	movs	r0, #0
 800cfac:	e022      	b.n	800cff4 <__sflush_r+0xf8>
 800cfae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfb2:	b21b      	sxth	r3, r3
 800cfb4:	e01b      	b.n	800cfee <__sflush_r+0xf2>
 800cfb6:	690f      	ldr	r7, [r1, #16]
 800cfb8:	2f00      	cmp	r7, #0
 800cfba:	d0f6      	beq.n	800cfaa <__sflush_r+0xae>
 800cfbc:	0793      	lsls	r3, r2, #30
 800cfbe:	680e      	ldr	r6, [r1, #0]
 800cfc0:	bf08      	it	eq
 800cfc2:	694b      	ldreq	r3, [r1, #20]
 800cfc4:	600f      	str	r7, [r1, #0]
 800cfc6:	bf18      	it	ne
 800cfc8:	2300      	movne	r3, #0
 800cfca:	eba6 0807 	sub.w	r8, r6, r7
 800cfce:	608b      	str	r3, [r1, #8]
 800cfd0:	f1b8 0f00 	cmp.w	r8, #0
 800cfd4:	dde9      	ble.n	800cfaa <__sflush_r+0xae>
 800cfd6:	6a21      	ldr	r1, [r4, #32]
 800cfd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cfda:	4643      	mov	r3, r8
 800cfdc:	463a      	mov	r2, r7
 800cfde:	4628      	mov	r0, r5
 800cfe0:	47b0      	blx	r6
 800cfe2:	2800      	cmp	r0, #0
 800cfe4:	dc08      	bgt.n	800cff8 <__sflush_r+0xfc>
 800cfe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfee:	81a3      	strh	r3, [r4, #12]
 800cff0:	f04f 30ff 	mov.w	r0, #4294967295
 800cff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cff8:	4407      	add	r7, r0
 800cffa:	eba8 0800 	sub.w	r8, r8, r0
 800cffe:	e7e7      	b.n	800cfd0 <__sflush_r+0xd4>
 800d000:	dfbffffe 	.word	0xdfbffffe

0800d004 <_fflush_r>:
 800d004:	b538      	push	{r3, r4, r5, lr}
 800d006:	690b      	ldr	r3, [r1, #16]
 800d008:	4605      	mov	r5, r0
 800d00a:	460c      	mov	r4, r1
 800d00c:	b913      	cbnz	r3, 800d014 <_fflush_r+0x10>
 800d00e:	2500      	movs	r5, #0
 800d010:	4628      	mov	r0, r5
 800d012:	bd38      	pop	{r3, r4, r5, pc}
 800d014:	b118      	cbz	r0, 800d01e <_fflush_r+0x1a>
 800d016:	6a03      	ldr	r3, [r0, #32]
 800d018:	b90b      	cbnz	r3, 800d01e <_fflush_r+0x1a>
 800d01a:	f7fe fb99 	bl	800b750 <__sinit>
 800d01e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d0f3      	beq.n	800d00e <_fflush_r+0xa>
 800d026:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d028:	07d0      	lsls	r0, r2, #31
 800d02a:	d404      	bmi.n	800d036 <_fflush_r+0x32>
 800d02c:	0599      	lsls	r1, r3, #22
 800d02e:	d402      	bmi.n	800d036 <_fflush_r+0x32>
 800d030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d032:	f7fe fc84 	bl	800b93e <__retarget_lock_acquire_recursive>
 800d036:	4628      	mov	r0, r5
 800d038:	4621      	mov	r1, r4
 800d03a:	f7ff ff5f 	bl	800cefc <__sflush_r>
 800d03e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d040:	07da      	lsls	r2, r3, #31
 800d042:	4605      	mov	r5, r0
 800d044:	d4e4      	bmi.n	800d010 <_fflush_r+0xc>
 800d046:	89a3      	ldrh	r3, [r4, #12]
 800d048:	059b      	lsls	r3, r3, #22
 800d04a:	d4e1      	bmi.n	800d010 <_fflush_r+0xc>
 800d04c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d04e:	f7fe fc77 	bl	800b940 <__retarget_lock_release_recursive>
 800d052:	e7dd      	b.n	800d010 <_fflush_r+0xc>

0800d054 <_sbrk_r>:
 800d054:	b538      	push	{r3, r4, r5, lr}
 800d056:	4d06      	ldr	r5, [pc, #24]	@ (800d070 <_sbrk_r+0x1c>)
 800d058:	2300      	movs	r3, #0
 800d05a:	4604      	mov	r4, r0
 800d05c:	4608      	mov	r0, r1
 800d05e:	602b      	str	r3, [r5, #0]
 800d060:	f7f5 f90e 	bl	8002280 <_sbrk>
 800d064:	1c43      	adds	r3, r0, #1
 800d066:	d102      	bne.n	800d06e <_sbrk_r+0x1a>
 800d068:	682b      	ldr	r3, [r5, #0]
 800d06a:	b103      	cbz	r3, 800d06e <_sbrk_r+0x1a>
 800d06c:	6023      	str	r3, [r4, #0]
 800d06e:	bd38      	pop	{r3, r4, r5, pc}
 800d070:	20002464 	.word	0x20002464

0800d074 <__assert_func>:
 800d074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d076:	4614      	mov	r4, r2
 800d078:	461a      	mov	r2, r3
 800d07a:	4b09      	ldr	r3, [pc, #36]	@ (800d0a0 <__assert_func+0x2c>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4605      	mov	r5, r0
 800d080:	68d8      	ldr	r0, [r3, #12]
 800d082:	b954      	cbnz	r4, 800d09a <__assert_func+0x26>
 800d084:	4b07      	ldr	r3, [pc, #28]	@ (800d0a4 <__assert_func+0x30>)
 800d086:	461c      	mov	r4, r3
 800d088:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d08c:	9100      	str	r1, [sp, #0]
 800d08e:	462b      	mov	r3, r5
 800d090:	4905      	ldr	r1, [pc, #20]	@ (800d0a8 <__assert_func+0x34>)
 800d092:	f000 f841 	bl	800d118 <fiprintf>
 800d096:	f000 f851 	bl	800d13c <abort>
 800d09a:	4b04      	ldr	r3, [pc, #16]	@ (800d0ac <__assert_func+0x38>)
 800d09c:	e7f4      	b.n	800d088 <__assert_func+0x14>
 800d09e:	bf00      	nop
 800d0a0:	2000002c 	.word	0x2000002c
 800d0a4:	0800db55 	.word	0x0800db55
 800d0a8:	0800db27 	.word	0x0800db27
 800d0ac:	0800db1a 	.word	0x0800db1a

0800d0b0 <_calloc_r>:
 800d0b0:	b570      	push	{r4, r5, r6, lr}
 800d0b2:	fba1 5402 	umull	r5, r4, r1, r2
 800d0b6:	b93c      	cbnz	r4, 800d0c8 <_calloc_r+0x18>
 800d0b8:	4629      	mov	r1, r5
 800d0ba:	f7ff fb11 	bl	800c6e0 <_malloc_r>
 800d0be:	4606      	mov	r6, r0
 800d0c0:	b928      	cbnz	r0, 800d0ce <_calloc_r+0x1e>
 800d0c2:	2600      	movs	r6, #0
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	bd70      	pop	{r4, r5, r6, pc}
 800d0c8:	220c      	movs	r2, #12
 800d0ca:	6002      	str	r2, [r0, #0]
 800d0cc:	e7f9      	b.n	800d0c2 <_calloc_r+0x12>
 800d0ce:	462a      	mov	r2, r5
 800d0d0:	4621      	mov	r1, r4
 800d0d2:	f7fe fbb6 	bl	800b842 <memset>
 800d0d6:	e7f5      	b.n	800d0c4 <_calloc_r+0x14>

0800d0d8 <__ascii_mbtowc>:
 800d0d8:	b082      	sub	sp, #8
 800d0da:	b901      	cbnz	r1, 800d0de <__ascii_mbtowc+0x6>
 800d0dc:	a901      	add	r1, sp, #4
 800d0de:	b142      	cbz	r2, 800d0f2 <__ascii_mbtowc+0x1a>
 800d0e0:	b14b      	cbz	r3, 800d0f6 <__ascii_mbtowc+0x1e>
 800d0e2:	7813      	ldrb	r3, [r2, #0]
 800d0e4:	600b      	str	r3, [r1, #0]
 800d0e6:	7812      	ldrb	r2, [r2, #0]
 800d0e8:	1e10      	subs	r0, r2, #0
 800d0ea:	bf18      	it	ne
 800d0ec:	2001      	movne	r0, #1
 800d0ee:	b002      	add	sp, #8
 800d0f0:	4770      	bx	lr
 800d0f2:	4610      	mov	r0, r2
 800d0f4:	e7fb      	b.n	800d0ee <__ascii_mbtowc+0x16>
 800d0f6:	f06f 0001 	mvn.w	r0, #1
 800d0fa:	e7f8      	b.n	800d0ee <__ascii_mbtowc+0x16>

0800d0fc <__ascii_wctomb>:
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	4608      	mov	r0, r1
 800d100:	b141      	cbz	r1, 800d114 <__ascii_wctomb+0x18>
 800d102:	2aff      	cmp	r2, #255	@ 0xff
 800d104:	d904      	bls.n	800d110 <__ascii_wctomb+0x14>
 800d106:	228a      	movs	r2, #138	@ 0x8a
 800d108:	601a      	str	r2, [r3, #0]
 800d10a:	f04f 30ff 	mov.w	r0, #4294967295
 800d10e:	4770      	bx	lr
 800d110:	700a      	strb	r2, [r1, #0]
 800d112:	2001      	movs	r0, #1
 800d114:	4770      	bx	lr
	...

0800d118 <fiprintf>:
 800d118:	b40e      	push	{r1, r2, r3}
 800d11a:	b503      	push	{r0, r1, lr}
 800d11c:	4601      	mov	r1, r0
 800d11e:	ab03      	add	r3, sp, #12
 800d120:	4805      	ldr	r0, [pc, #20]	@ (800d138 <fiprintf+0x20>)
 800d122:	f853 2b04 	ldr.w	r2, [r3], #4
 800d126:	6800      	ldr	r0, [r0, #0]
 800d128:	9301      	str	r3, [sp, #4]
 800d12a:	f000 f837 	bl	800d19c <_vfiprintf_r>
 800d12e:	b002      	add	sp, #8
 800d130:	f85d eb04 	ldr.w	lr, [sp], #4
 800d134:	b003      	add	sp, #12
 800d136:	4770      	bx	lr
 800d138:	2000002c 	.word	0x2000002c

0800d13c <abort>:
 800d13c:	b508      	push	{r3, lr}
 800d13e:	2006      	movs	r0, #6
 800d140:	f000 fa00 	bl	800d544 <raise>
 800d144:	2001      	movs	r0, #1
 800d146:	f7f5 f823 	bl	8002190 <_exit>

0800d14a <__sfputc_r>:
 800d14a:	6893      	ldr	r3, [r2, #8]
 800d14c:	3b01      	subs	r3, #1
 800d14e:	2b00      	cmp	r3, #0
 800d150:	b410      	push	{r4}
 800d152:	6093      	str	r3, [r2, #8]
 800d154:	da08      	bge.n	800d168 <__sfputc_r+0x1e>
 800d156:	6994      	ldr	r4, [r2, #24]
 800d158:	42a3      	cmp	r3, r4
 800d15a:	db01      	blt.n	800d160 <__sfputc_r+0x16>
 800d15c:	290a      	cmp	r1, #10
 800d15e:	d103      	bne.n	800d168 <__sfputc_r+0x1e>
 800d160:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d164:	f000 b932 	b.w	800d3cc <__swbuf_r>
 800d168:	6813      	ldr	r3, [r2, #0]
 800d16a:	1c58      	adds	r0, r3, #1
 800d16c:	6010      	str	r0, [r2, #0]
 800d16e:	7019      	strb	r1, [r3, #0]
 800d170:	4608      	mov	r0, r1
 800d172:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <__sfputs_r>:
 800d178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d17a:	4606      	mov	r6, r0
 800d17c:	460f      	mov	r7, r1
 800d17e:	4614      	mov	r4, r2
 800d180:	18d5      	adds	r5, r2, r3
 800d182:	42ac      	cmp	r4, r5
 800d184:	d101      	bne.n	800d18a <__sfputs_r+0x12>
 800d186:	2000      	movs	r0, #0
 800d188:	e007      	b.n	800d19a <__sfputs_r+0x22>
 800d18a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d18e:	463a      	mov	r2, r7
 800d190:	4630      	mov	r0, r6
 800d192:	f7ff ffda 	bl	800d14a <__sfputc_r>
 800d196:	1c43      	adds	r3, r0, #1
 800d198:	d1f3      	bne.n	800d182 <__sfputs_r+0xa>
 800d19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d19c <_vfiprintf_r>:
 800d19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a0:	460d      	mov	r5, r1
 800d1a2:	b09d      	sub	sp, #116	@ 0x74
 800d1a4:	4614      	mov	r4, r2
 800d1a6:	4698      	mov	r8, r3
 800d1a8:	4606      	mov	r6, r0
 800d1aa:	b118      	cbz	r0, 800d1b4 <_vfiprintf_r+0x18>
 800d1ac:	6a03      	ldr	r3, [r0, #32]
 800d1ae:	b90b      	cbnz	r3, 800d1b4 <_vfiprintf_r+0x18>
 800d1b0:	f7fe face 	bl	800b750 <__sinit>
 800d1b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1b6:	07d9      	lsls	r1, r3, #31
 800d1b8:	d405      	bmi.n	800d1c6 <_vfiprintf_r+0x2a>
 800d1ba:	89ab      	ldrh	r3, [r5, #12]
 800d1bc:	059a      	lsls	r2, r3, #22
 800d1be:	d402      	bmi.n	800d1c6 <_vfiprintf_r+0x2a>
 800d1c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1c2:	f7fe fbbc 	bl	800b93e <__retarget_lock_acquire_recursive>
 800d1c6:	89ab      	ldrh	r3, [r5, #12]
 800d1c8:	071b      	lsls	r3, r3, #28
 800d1ca:	d501      	bpl.n	800d1d0 <_vfiprintf_r+0x34>
 800d1cc:	692b      	ldr	r3, [r5, #16]
 800d1ce:	b99b      	cbnz	r3, 800d1f8 <_vfiprintf_r+0x5c>
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	4630      	mov	r0, r6
 800d1d4:	f000 f938 	bl	800d448 <__swsetup_r>
 800d1d8:	b170      	cbz	r0, 800d1f8 <_vfiprintf_r+0x5c>
 800d1da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1dc:	07dc      	lsls	r4, r3, #31
 800d1de:	d504      	bpl.n	800d1ea <_vfiprintf_r+0x4e>
 800d1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e4:	b01d      	add	sp, #116	@ 0x74
 800d1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ea:	89ab      	ldrh	r3, [r5, #12]
 800d1ec:	0598      	lsls	r0, r3, #22
 800d1ee:	d4f7      	bmi.n	800d1e0 <_vfiprintf_r+0x44>
 800d1f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1f2:	f7fe fba5 	bl	800b940 <__retarget_lock_release_recursive>
 800d1f6:	e7f3      	b.n	800d1e0 <_vfiprintf_r+0x44>
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1fc:	2320      	movs	r3, #32
 800d1fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d202:	f8cd 800c 	str.w	r8, [sp, #12]
 800d206:	2330      	movs	r3, #48	@ 0x30
 800d208:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d3b8 <_vfiprintf_r+0x21c>
 800d20c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d210:	f04f 0901 	mov.w	r9, #1
 800d214:	4623      	mov	r3, r4
 800d216:	469a      	mov	sl, r3
 800d218:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d21c:	b10a      	cbz	r2, 800d222 <_vfiprintf_r+0x86>
 800d21e:	2a25      	cmp	r2, #37	@ 0x25
 800d220:	d1f9      	bne.n	800d216 <_vfiprintf_r+0x7a>
 800d222:	ebba 0b04 	subs.w	fp, sl, r4
 800d226:	d00b      	beq.n	800d240 <_vfiprintf_r+0xa4>
 800d228:	465b      	mov	r3, fp
 800d22a:	4622      	mov	r2, r4
 800d22c:	4629      	mov	r1, r5
 800d22e:	4630      	mov	r0, r6
 800d230:	f7ff ffa2 	bl	800d178 <__sfputs_r>
 800d234:	3001      	adds	r0, #1
 800d236:	f000 80a7 	beq.w	800d388 <_vfiprintf_r+0x1ec>
 800d23a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d23c:	445a      	add	r2, fp
 800d23e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d240:	f89a 3000 	ldrb.w	r3, [sl]
 800d244:	2b00      	cmp	r3, #0
 800d246:	f000 809f 	beq.w	800d388 <_vfiprintf_r+0x1ec>
 800d24a:	2300      	movs	r3, #0
 800d24c:	f04f 32ff 	mov.w	r2, #4294967295
 800d250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d254:	f10a 0a01 	add.w	sl, sl, #1
 800d258:	9304      	str	r3, [sp, #16]
 800d25a:	9307      	str	r3, [sp, #28]
 800d25c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d260:	931a      	str	r3, [sp, #104]	@ 0x68
 800d262:	4654      	mov	r4, sl
 800d264:	2205      	movs	r2, #5
 800d266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d26a:	4853      	ldr	r0, [pc, #332]	@ (800d3b8 <_vfiprintf_r+0x21c>)
 800d26c:	f7f2 ffb0 	bl	80001d0 <memchr>
 800d270:	9a04      	ldr	r2, [sp, #16]
 800d272:	b9d8      	cbnz	r0, 800d2ac <_vfiprintf_r+0x110>
 800d274:	06d1      	lsls	r1, r2, #27
 800d276:	bf44      	itt	mi
 800d278:	2320      	movmi	r3, #32
 800d27a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d27e:	0713      	lsls	r3, r2, #28
 800d280:	bf44      	itt	mi
 800d282:	232b      	movmi	r3, #43	@ 0x2b
 800d284:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d288:	f89a 3000 	ldrb.w	r3, [sl]
 800d28c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d28e:	d015      	beq.n	800d2bc <_vfiprintf_r+0x120>
 800d290:	9a07      	ldr	r2, [sp, #28]
 800d292:	4654      	mov	r4, sl
 800d294:	2000      	movs	r0, #0
 800d296:	f04f 0c0a 	mov.w	ip, #10
 800d29a:	4621      	mov	r1, r4
 800d29c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2a0:	3b30      	subs	r3, #48	@ 0x30
 800d2a2:	2b09      	cmp	r3, #9
 800d2a4:	d94b      	bls.n	800d33e <_vfiprintf_r+0x1a2>
 800d2a6:	b1b0      	cbz	r0, 800d2d6 <_vfiprintf_r+0x13a>
 800d2a8:	9207      	str	r2, [sp, #28]
 800d2aa:	e014      	b.n	800d2d6 <_vfiprintf_r+0x13a>
 800d2ac:	eba0 0308 	sub.w	r3, r0, r8
 800d2b0:	fa09 f303 	lsl.w	r3, r9, r3
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	9304      	str	r3, [sp, #16]
 800d2b8:	46a2      	mov	sl, r4
 800d2ba:	e7d2      	b.n	800d262 <_vfiprintf_r+0xc6>
 800d2bc:	9b03      	ldr	r3, [sp, #12]
 800d2be:	1d19      	adds	r1, r3, #4
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	9103      	str	r1, [sp, #12]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	bfbb      	ittet	lt
 800d2c8:	425b      	neglt	r3, r3
 800d2ca:	f042 0202 	orrlt.w	r2, r2, #2
 800d2ce:	9307      	strge	r3, [sp, #28]
 800d2d0:	9307      	strlt	r3, [sp, #28]
 800d2d2:	bfb8      	it	lt
 800d2d4:	9204      	strlt	r2, [sp, #16]
 800d2d6:	7823      	ldrb	r3, [r4, #0]
 800d2d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2da:	d10a      	bne.n	800d2f2 <_vfiprintf_r+0x156>
 800d2dc:	7863      	ldrb	r3, [r4, #1]
 800d2de:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2e0:	d132      	bne.n	800d348 <_vfiprintf_r+0x1ac>
 800d2e2:	9b03      	ldr	r3, [sp, #12]
 800d2e4:	1d1a      	adds	r2, r3, #4
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	9203      	str	r2, [sp, #12]
 800d2ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d2ee:	3402      	adds	r4, #2
 800d2f0:	9305      	str	r3, [sp, #20]
 800d2f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d3c8 <_vfiprintf_r+0x22c>
 800d2f6:	7821      	ldrb	r1, [r4, #0]
 800d2f8:	2203      	movs	r2, #3
 800d2fa:	4650      	mov	r0, sl
 800d2fc:	f7f2 ff68 	bl	80001d0 <memchr>
 800d300:	b138      	cbz	r0, 800d312 <_vfiprintf_r+0x176>
 800d302:	9b04      	ldr	r3, [sp, #16]
 800d304:	eba0 000a 	sub.w	r0, r0, sl
 800d308:	2240      	movs	r2, #64	@ 0x40
 800d30a:	4082      	lsls	r2, r0
 800d30c:	4313      	orrs	r3, r2
 800d30e:	3401      	adds	r4, #1
 800d310:	9304      	str	r3, [sp, #16]
 800d312:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d316:	4829      	ldr	r0, [pc, #164]	@ (800d3bc <_vfiprintf_r+0x220>)
 800d318:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d31c:	2206      	movs	r2, #6
 800d31e:	f7f2 ff57 	bl	80001d0 <memchr>
 800d322:	2800      	cmp	r0, #0
 800d324:	d03f      	beq.n	800d3a6 <_vfiprintf_r+0x20a>
 800d326:	4b26      	ldr	r3, [pc, #152]	@ (800d3c0 <_vfiprintf_r+0x224>)
 800d328:	bb1b      	cbnz	r3, 800d372 <_vfiprintf_r+0x1d6>
 800d32a:	9b03      	ldr	r3, [sp, #12]
 800d32c:	3307      	adds	r3, #7
 800d32e:	f023 0307 	bic.w	r3, r3, #7
 800d332:	3308      	adds	r3, #8
 800d334:	9303      	str	r3, [sp, #12]
 800d336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d338:	443b      	add	r3, r7
 800d33a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d33c:	e76a      	b.n	800d214 <_vfiprintf_r+0x78>
 800d33e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d342:	460c      	mov	r4, r1
 800d344:	2001      	movs	r0, #1
 800d346:	e7a8      	b.n	800d29a <_vfiprintf_r+0xfe>
 800d348:	2300      	movs	r3, #0
 800d34a:	3401      	adds	r4, #1
 800d34c:	9305      	str	r3, [sp, #20]
 800d34e:	4619      	mov	r1, r3
 800d350:	f04f 0c0a 	mov.w	ip, #10
 800d354:	4620      	mov	r0, r4
 800d356:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d35a:	3a30      	subs	r2, #48	@ 0x30
 800d35c:	2a09      	cmp	r2, #9
 800d35e:	d903      	bls.n	800d368 <_vfiprintf_r+0x1cc>
 800d360:	2b00      	cmp	r3, #0
 800d362:	d0c6      	beq.n	800d2f2 <_vfiprintf_r+0x156>
 800d364:	9105      	str	r1, [sp, #20]
 800d366:	e7c4      	b.n	800d2f2 <_vfiprintf_r+0x156>
 800d368:	fb0c 2101 	mla	r1, ip, r1, r2
 800d36c:	4604      	mov	r4, r0
 800d36e:	2301      	movs	r3, #1
 800d370:	e7f0      	b.n	800d354 <_vfiprintf_r+0x1b8>
 800d372:	ab03      	add	r3, sp, #12
 800d374:	9300      	str	r3, [sp, #0]
 800d376:	462a      	mov	r2, r5
 800d378:	4b12      	ldr	r3, [pc, #72]	@ (800d3c4 <_vfiprintf_r+0x228>)
 800d37a:	a904      	add	r1, sp, #16
 800d37c:	4630      	mov	r0, r6
 800d37e:	f7fd fda3 	bl	800aec8 <_printf_float>
 800d382:	4607      	mov	r7, r0
 800d384:	1c78      	adds	r0, r7, #1
 800d386:	d1d6      	bne.n	800d336 <_vfiprintf_r+0x19a>
 800d388:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d38a:	07d9      	lsls	r1, r3, #31
 800d38c:	d405      	bmi.n	800d39a <_vfiprintf_r+0x1fe>
 800d38e:	89ab      	ldrh	r3, [r5, #12]
 800d390:	059a      	lsls	r2, r3, #22
 800d392:	d402      	bmi.n	800d39a <_vfiprintf_r+0x1fe>
 800d394:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d396:	f7fe fad3 	bl	800b940 <__retarget_lock_release_recursive>
 800d39a:	89ab      	ldrh	r3, [r5, #12]
 800d39c:	065b      	lsls	r3, r3, #25
 800d39e:	f53f af1f 	bmi.w	800d1e0 <_vfiprintf_r+0x44>
 800d3a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3a4:	e71e      	b.n	800d1e4 <_vfiprintf_r+0x48>
 800d3a6:	ab03      	add	r3, sp, #12
 800d3a8:	9300      	str	r3, [sp, #0]
 800d3aa:	462a      	mov	r2, r5
 800d3ac:	4b05      	ldr	r3, [pc, #20]	@ (800d3c4 <_vfiprintf_r+0x228>)
 800d3ae:	a904      	add	r1, sp, #16
 800d3b0:	4630      	mov	r0, r6
 800d3b2:	f7fe f821 	bl	800b3f8 <_printf_i>
 800d3b6:	e7e4      	b.n	800d382 <_vfiprintf_r+0x1e6>
 800d3b8:	0800db56 	.word	0x0800db56
 800d3bc:	0800db60 	.word	0x0800db60
 800d3c0:	0800aec9 	.word	0x0800aec9
 800d3c4:	0800d179 	.word	0x0800d179
 800d3c8:	0800db5c 	.word	0x0800db5c

0800d3cc <__swbuf_r>:
 800d3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ce:	460e      	mov	r6, r1
 800d3d0:	4614      	mov	r4, r2
 800d3d2:	4605      	mov	r5, r0
 800d3d4:	b118      	cbz	r0, 800d3de <__swbuf_r+0x12>
 800d3d6:	6a03      	ldr	r3, [r0, #32]
 800d3d8:	b90b      	cbnz	r3, 800d3de <__swbuf_r+0x12>
 800d3da:	f7fe f9b9 	bl	800b750 <__sinit>
 800d3de:	69a3      	ldr	r3, [r4, #24]
 800d3e0:	60a3      	str	r3, [r4, #8]
 800d3e2:	89a3      	ldrh	r3, [r4, #12]
 800d3e4:	071a      	lsls	r2, r3, #28
 800d3e6:	d501      	bpl.n	800d3ec <__swbuf_r+0x20>
 800d3e8:	6923      	ldr	r3, [r4, #16]
 800d3ea:	b943      	cbnz	r3, 800d3fe <__swbuf_r+0x32>
 800d3ec:	4621      	mov	r1, r4
 800d3ee:	4628      	mov	r0, r5
 800d3f0:	f000 f82a 	bl	800d448 <__swsetup_r>
 800d3f4:	b118      	cbz	r0, 800d3fe <__swbuf_r+0x32>
 800d3f6:	f04f 37ff 	mov.w	r7, #4294967295
 800d3fa:	4638      	mov	r0, r7
 800d3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3fe:	6823      	ldr	r3, [r4, #0]
 800d400:	6922      	ldr	r2, [r4, #16]
 800d402:	1a98      	subs	r0, r3, r2
 800d404:	6963      	ldr	r3, [r4, #20]
 800d406:	b2f6      	uxtb	r6, r6
 800d408:	4283      	cmp	r3, r0
 800d40a:	4637      	mov	r7, r6
 800d40c:	dc05      	bgt.n	800d41a <__swbuf_r+0x4e>
 800d40e:	4621      	mov	r1, r4
 800d410:	4628      	mov	r0, r5
 800d412:	f7ff fdf7 	bl	800d004 <_fflush_r>
 800d416:	2800      	cmp	r0, #0
 800d418:	d1ed      	bne.n	800d3f6 <__swbuf_r+0x2a>
 800d41a:	68a3      	ldr	r3, [r4, #8]
 800d41c:	3b01      	subs	r3, #1
 800d41e:	60a3      	str	r3, [r4, #8]
 800d420:	6823      	ldr	r3, [r4, #0]
 800d422:	1c5a      	adds	r2, r3, #1
 800d424:	6022      	str	r2, [r4, #0]
 800d426:	701e      	strb	r6, [r3, #0]
 800d428:	6962      	ldr	r2, [r4, #20]
 800d42a:	1c43      	adds	r3, r0, #1
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d004      	beq.n	800d43a <__swbuf_r+0x6e>
 800d430:	89a3      	ldrh	r3, [r4, #12]
 800d432:	07db      	lsls	r3, r3, #31
 800d434:	d5e1      	bpl.n	800d3fa <__swbuf_r+0x2e>
 800d436:	2e0a      	cmp	r6, #10
 800d438:	d1df      	bne.n	800d3fa <__swbuf_r+0x2e>
 800d43a:	4621      	mov	r1, r4
 800d43c:	4628      	mov	r0, r5
 800d43e:	f7ff fde1 	bl	800d004 <_fflush_r>
 800d442:	2800      	cmp	r0, #0
 800d444:	d0d9      	beq.n	800d3fa <__swbuf_r+0x2e>
 800d446:	e7d6      	b.n	800d3f6 <__swbuf_r+0x2a>

0800d448 <__swsetup_r>:
 800d448:	b538      	push	{r3, r4, r5, lr}
 800d44a:	4b29      	ldr	r3, [pc, #164]	@ (800d4f0 <__swsetup_r+0xa8>)
 800d44c:	4605      	mov	r5, r0
 800d44e:	6818      	ldr	r0, [r3, #0]
 800d450:	460c      	mov	r4, r1
 800d452:	b118      	cbz	r0, 800d45c <__swsetup_r+0x14>
 800d454:	6a03      	ldr	r3, [r0, #32]
 800d456:	b90b      	cbnz	r3, 800d45c <__swsetup_r+0x14>
 800d458:	f7fe f97a 	bl	800b750 <__sinit>
 800d45c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d460:	0719      	lsls	r1, r3, #28
 800d462:	d422      	bmi.n	800d4aa <__swsetup_r+0x62>
 800d464:	06da      	lsls	r2, r3, #27
 800d466:	d407      	bmi.n	800d478 <__swsetup_r+0x30>
 800d468:	2209      	movs	r2, #9
 800d46a:	602a      	str	r2, [r5, #0]
 800d46c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d470:	81a3      	strh	r3, [r4, #12]
 800d472:	f04f 30ff 	mov.w	r0, #4294967295
 800d476:	e033      	b.n	800d4e0 <__swsetup_r+0x98>
 800d478:	0758      	lsls	r0, r3, #29
 800d47a:	d512      	bpl.n	800d4a2 <__swsetup_r+0x5a>
 800d47c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d47e:	b141      	cbz	r1, 800d492 <__swsetup_r+0x4a>
 800d480:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d484:	4299      	cmp	r1, r3
 800d486:	d002      	beq.n	800d48e <__swsetup_r+0x46>
 800d488:	4628      	mov	r0, r5
 800d48a:	f7ff f8b5 	bl	800c5f8 <_free_r>
 800d48e:	2300      	movs	r3, #0
 800d490:	6363      	str	r3, [r4, #52]	@ 0x34
 800d492:	89a3      	ldrh	r3, [r4, #12]
 800d494:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d498:	81a3      	strh	r3, [r4, #12]
 800d49a:	2300      	movs	r3, #0
 800d49c:	6063      	str	r3, [r4, #4]
 800d49e:	6923      	ldr	r3, [r4, #16]
 800d4a0:	6023      	str	r3, [r4, #0]
 800d4a2:	89a3      	ldrh	r3, [r4, #12]
 800d4a4:	f043 0308 	orr.w	r3, r3, #8
 800d4a8:	81a3      	strh	r3, [r4, #12]
 800d4aa:	6923      	ldr	r3, [r4, #16]
 800d4ac:	b94b      	cbnz	r3, 800d4c2 <__swsetup_r+0x7a>
 800d4ae:	89a3      	ldrh	r3, [r4, #12]
 800d4b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d4b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4b8:	d003      	beq.n	800d4c2 <__swsetup_r+0x7a>
 800d4ba:	4621      	mov	r1, r4
 800d4bc:	4628      	mov	r0, r5
 800d4be:	f000 f883 	bl	800d5c8 <__smakebuf_r>
 800d4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4c6:	f013 0201 	ands.w	r2, r3, #1
 800d4ca:	d00a      	beq.n	800d4e2 <__swsetup_r+0x9a>
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	60a2      	str	r2, [r4, #8]
 800d4d0:	6962      	ldr	r2, [r4, #20]
 800d4d2:	4252      	negs	r2, r2
 800d4d4:	61a2      	str	r2, [r4, #24]
 800d4d6:	6922      	ldr	r2, [r4, #16]
 800d4d8:	b942      	cbnz	r2, 800d4ec <__swsetup_r+0xa4>
 800d4da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d4de:	d1c5      	bne.n	800d46c <__swsetup_r+0x24>
 800d4e0:	bd38      	pop	{r3, r4, r5, pc}
 800d4e2:	0799      	lsls	r1, r3, #30
 800d4e4:	bf58      	it	pl
 800d4e6:	6962      	ldrpl	r2, [r4, #20]
 800d4e8:	60a2      	str	r2, [r4, #8]
 800d4ea:	e7f4      	b.n	800d4d6 <__swsetup_r+0x8e>
 800d4ec:	2000      	movs	r0, #0
 800d4ee:	e7f7      	b.n	800d4e0 <__swsetup_r+0x98>
 800d4f0:	2000002c 	.word	0x2000002c

0800d4f4 <_raise_r>:
 800d4f4:	291f      	cmp	r1, #31
 800d4f6:	b538      	push	{r3, r4, r5, lr}
 800d4f8:	4605      	mov	r5, r0
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	d904      	bls.n	800d508 <_raise_r+0x14>
 800d4fe:	2316      	movs	r3, #22
 800d500:	6003      	str	r3, [r0, #0]
 800d502:	f04f 30ff 	mov.w	r0, #4294967295
 800d506:	bd38      	pop	{r3, r4, r5, pc}
 800d508:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d50a:	b112      	cbz	r2, 800d512 <_raise_r+0x1e>
 800d50c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d510:	b94b      	cbnz	r3, 800d526 <_raise_r+0x32>
 800d512:	4628      	mov	r0, r5
 800d514:	f000 f830 	bl	800d578 <_getpid_r>
 800d518:	4622      	mov	r2, r4
 800d51a:	4601      	mov	r1, r0
 800d51c:	4628      	mov	r0, r5
 800d51e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d522:	f000 b817 	b.w	800d554 <_kill_r>
 800d526:	2b01      	cmp	r3, #1
 800d528:	d00a      	beq.n	800d540 <_raise_r+0x4c>
 800d52a:	1c59      	adds	r1, r3, #1
 800d52c:	d103      	bne.n	800d536 <_raise_r+0x42>
 800d52e:	2316      	movs	r3, #22
 800d530:	6003      	str	r3, [r0, #0]
 800d532:	2001      	movs	r0, #1
 800d534:	e7e7      	b.n	800d506 <_raise_r+0x12>
 800d536:	2100      	movs	r1, #0
 800d538:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d53c:	4620      	mov	r0, r4
 800d53e:	4798      	blx	r3
 800d540:	2000      	movs	r0, #0
 800d542:	e7e0      	b.n	800d506 <_raise_r+0x12>

0800d544 <raise>:
 800d544:	4b02      	ldr	r3, [pc, #8]	@ (800d550 <raise+0xc>)
 800d546:	4601      	mov	r1, r0
 800d548:	6818      	ldr	r0, [r3, #0]
 800d54a:	f7ff bfd3 	b.w	800d4f4 <_raise_r>
 800d54e:	bf00      	nop
 800d550:	2000002c 	.word	0x2000002c

0800d554 <_kill_r>:
 800d554:	b538      	push	{r3, r4, r5, lr}
 800d556:	4d07      	ldr	r5, [pc, #28]	@ (800d574 <_kill_r+0x20>)
 800d558:	2300      	movs	r3, #0
 800d55a:	4604      	mov	r4, r0
 800d55c:	4608      	mov	r0, r1
 800d55e:	4611      	mov	r1, r2
 800d560:	602b      	str	r3, [r5, #0]
 800d562:	f7f4 fe05 	bl	8002170 <_kill>
 800d566:	1c43      	adds	r3, r0, #1
 800d568:	d102      	bne.n	800d570 <_kill_r+0x1c>
 800d56a:	682b      	ldr	r3, [r5, #0]
 800d56c:	b103      	cbz	r3, 800d570 <_kill_r+0x1c>
 800d56e:	6023      	str	r3, [r4, #0]
 800d570:	bd38      	pop	{r3, r4, r5, pc}
 800d572:	bf00      	nop
 800d574:	20002464 	.word	0x20002464

0800d578 <_getpid_r>:
 800d578:	f7f4 bdf2 	b.w	8002160 <_getpid>

0800d57c <__swhatbuf_r>:
 800d57c:	b570      	push	{r4, r5, r6, lr}
 800d57e:	460c      	mov	r4, r1
 800d580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d584:	2900      	cmp	r1, #0
 800d586:	b096      	sub	sp, #88	@ 0x58
 800d588:	4615      	mov	r5, r2
 800d58a:	461e      	mov	r6, r3
 800d58c:	da0d      	bge.n	800d5aa <__swhatbuf_r+0x2e>
 800d58e:	89a3      	ldrh	r3, [r4, #12]
 800d590:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d594:	f04f 0100 	mov.w	r1, #0
 800d598:	bf14      	ite	ne
 800d59a:	2340      	movne	r3, #64	@ 0x40
 800d59c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d5a0:	2000      	movs	r0, #0
 800d5a2:	6031      	str	r1, [r6, #0]
 800d5a4:	602b      	str	r3, [r5, #0]
 800d5a6:	b016      	add	sp, #88	@ 0x58
 800d5a8:	bd70      	pop	{r4, r5, r6, pc}
 800d5aa:	466a      	mov	r2, sp
 800d5ac:	f000 f848 	bl	800d640 <_fstat_r>
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	dbec      	blt.n	800d58e <__swhatbuf_r+0x12>
 800d5b4:	9901      	ldr	r1, [sp, #4]
 800d5b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d5ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d5be:	4259      	negs	r1, r3
 800d5c0:	4159      	adcs	r1, r3
 800d5c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5c6:	e7eb      	b.n	800d5a0 <__swhatbuf_r+0x24>

0800d5c8 <__smakebuf_r>:
 800d5c8:	898b      	ldrh	r3, [r1, #12]
 800d5ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5cc:	079d      	lsls	r5, r3, #30
 800d5ce:	4606      	mov	r6, r0
 800d5d0:	460c      	mov	r4, r1
 800d5d2:	d507      	bpl.n	800d5e4 <__smakebuf_r+0x1c>
 800d5d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d5d8:	6023      	str	r3, [r4, #0]
 800d5da:	6123      	str	r3, [r4, #16]
 800d5dc:	2301      	movs	r3, #1
 800d5de:	6163      	str	r3, [r4, #20]
 800d5e0:	b003      	add	sp, #12
 800d5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5e4:	ab01      	add	r3, sp, #4
 800d5e6:	466a      	mov	r2, sp
 800d5e8:	f7ff ffc8 	bl	800d57c <__swhatbuf_r>
 800d5ec:	9f00      	ldr	r7, [sp, #0]
 800d5ee:	4605      	mov	r5, r0
 800d5f0:	4639      	mov	r1, r7
 800d5f2:	4630      	mov	r0, r6
 800d5f4:	f7ff f874 	bl	800c6e0 <_malloc_r>
 800d5f8:	b948      	cbnz	r0, 800d60e <__smakebuf_r+0x46>
 800d5fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5fe:	059a      	lsls	r2, r3, #22
 800d600:	d4ee      	bmi.n	800d5e0 <__smakebuf_r+0x18>
 800d602:	f023 0303 	bic.w	r3, r3, #3
 800d606:	f043 0302 	orr.w	r3, r3, #2
 800d60a:	81a3      	strh	r3, [r4, #12]
 800d60c:	e7e2      	b.n	800d5d4 <__smakebuf_r+0xc>
 800d60e:	89a3      	ldrh	r3, [r4, #12]
 800d610:	6020      	str	r0, [r4, #0]
 800d612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d616:	81a3      	strh	r3, [r4, #12]
 800d618:	9b01      	ldr	r3, [sp, #4]
 800d61a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d61e:	b15b      	cbz	r3, 800d638 <__smakebuf_r+0x70>
 800d620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d624:	4630      	mov	r0, r6
 800d626:	f000 f81d 	bl	800d664 <_isatty_r>
 800d62a:	b128      	cbz	r0, 800d638 <__smakebuf_r+0x70>
 800d62c:	89a3      	ldrh	r3, [r4, #12]
 800d62e:	f023 0303 	bic.w	r3, r3, #3
 800d632:	f043 0301 	orr.w	r3, r3, #1
 800d636:	81a3      	strh	r3, [r4, #12]
 800d638:	89a3      	ldrh	r3, [r4, #12]
 800d63a:	431d      	orrs	r5, r3
 800d63c:	81a5      	strh	r5, [r4, #12]
 800d63e:	e7cf      	b.n	800d5e0 <__smakebuf_r+0x18>

0800d640 <_fstat_r>:
 800d640:	b538      	push	{r3, r4, r5, lr}
 800d642:	4d07      	ldr	r5, [pc, #28]	@ (800d660 <_fstat_r+0x20>)
 800d644:	2300      	movs	r3, #0
 800d646:	4604      	mov	r4, r0
 800d648:	4608      	mov	r0, r1
 800d64a:	4611      	mov	r1, r2
 800d64c:	602b      	str	r3, [r5, #0]
 800d64e:	f7f4 fdef 	bl	8002230 <_fstat>
 800d652:	1c43      	adds	r3, r0, #1
 800d654:	d102      	bne.n	800d65c <_fstat_r+0x1c>
 800d656:	682b      	ldr	r3, [r5, #0]
 800d658:	b103      	cbz	r3, 800d65c <_fstat_r+0x1c>
 800d65a:	6023      	str	r3, [r4, #0]
 800d65c:	bd38      	pop	{r3, r4, r5, pc}
 800d65e:	bf00      	nop
 800d660:	20002464 	.word	0x20002464

0800d664 <_isatty_r>:
 800d664:	b538      	push	{r3, r4, r5, lr}
 800d666:	4d06      	ldr	r5, [pc, #24]	@ (800d680 <_isatty_r+0x1c>)
 800d668:	2300      	movs	r3, #0
 800d66a:	4604      	mov	r4, r0
 800d66c:	4608      	mov	r0, r1
 800d66e:	602b      	str	r3, [r5, #0]
 800d670:	f7f4 fdee 	bl	8002250 <_isatty>
 800d674:	1c43      	adds	r3, r0, #1
 800d676:	d102      	bne.n	800d67e <_isatty_r+0x1a>
 800d678:	682b      	ldr	r3, [r5, #0]
 800d67a:	b103      	cbz	r3, 800d67e <_isatty_r+0x1a>
 800d67c:	6023      	str	r3, [r4, #0]
 800d67e:	bd38      	pop	{r3, r4, r5, pc}
 800d680:	20002464 	.word	0x20002464

0800d684 <_init>:
 800d684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d686:	bf00      	nop
 800d688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d68a:	bc08      	pop	{r3}
 800d68c:	469e      	mov	lr, r3
 800d68e:	4770      	bx	lr

0800d690 <_fini>:
 800d690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d692:	bf00      	nop
 800d694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d696:	bc08      	pop	{r3}
 800d698:	469e      	mov	lr, r3
 800d69a:	4770      	bx	lr
