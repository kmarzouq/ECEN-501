
AImotionsens.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000115a4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c318  08011740  08011740  00012740  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801da58  0801da58  0001fa6c  2**0
                  CONTENTS
  4 .ARM          00000008  0801da58  0801da58  0001ea58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801da60  0801da60  0001fa6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801da60  0801da60  0001ea60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801da64  0801da64  0001ea64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a6c  20000000  0801da68  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a88  20000a6c  0801e4d4  0001fa6c  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200034f4  0801e4d4  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001fa6c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026e15  00000000  00000000  0001fa9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000548f  00000000  00000000  000468b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020f8  00000000  00000000  0004bd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001950  00000000  00000000  0004de38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008119  00000000  00000000  0004f788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027135  00000000  00000000  000578a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d5ea  00000000  00000000  0007e9d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000093  00000000  00000000  0018bfc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a31c  00000000  00000000  0018c054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00196370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000a6c 	.word	0x20000a6c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801171c 	.word	0x0801171c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000a70 	.word	0x20000a70
 80001cc:	0801171c 	.word	0x0801171c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ff0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d013      	beq.n	8001024 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ffc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001000:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001004:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00b      	beq.n	8001024 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800100c:	e000      	b.n	8001010 <ITM_SendChar+0x2c>
    {
      __NOP();
 800100e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001010:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f9      	beq.n	800100e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800101a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001024:	687b      	ldr	r3, [r7, #4]
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <_write>:
static uint32_t argmax(const float * values, uint32_t len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]


 for (int i = 0; i < len; i++) {
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	e009      	b.n	8001058 <_write+0x26>


 ITM_SendChar((*ptr++));
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	60ba      	str	r2, [r7, #8]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ffc9 	bl	8000fe4 <ITM_SendChar>
 for (int i = 0; i < len; i++) {
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	3301      	adds	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	429a      	cmp	r2, r3
 800105e:	dbf1      	blt.n	8001044 <_write+0x12>


 }


 return len;
 8001060:	687b      	ldr	r3, [r7, #4]


}
 8001062:	4618      	mov	r0, r3
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800106c:	b5b0      	push	{r4, r5, r7, lr}
 800106e:	b08e      	sub	sp, #56	@ 0x38
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	  uint32_t write_index = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	637b      	str	r3, [r7, #52]	@ 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001076:	f001 fb73 	bl	8002760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107a:	f000 f85d 	bl	8001138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107e:	f000 fa17 	bl	80014b0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001082:	f000 f8dd 	bl	8001240 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001086:	f000 f913 	bl	80012b0 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800108a:	f000 f94f 	bl	800132c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800108e:	f000 f973 	bl	8001378 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001092:	f000 f9af 	bl	80013f4 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001096:	f000 f9dd 	bl	8001454 <MX_USB_OTG_FS_PCD_Init>
  MX_CRC_Init();
 800109a:	f000 f8af 	bl	80011fc <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  dataRdyIntReceived = 0;
 800109e:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <main+0xa0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
    uint8_t msg8[] = "=====> Accelerometer sensor LSM6DSL initialized \r\n ";
 80010a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <main+0xa4>)
 80010a6:	463c      	mov	r4, r7
 80010a8:	461d      	mov	r5, r3
 80010aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b6:	682b      	ldr	r3, [r5, #0]
 80010b8:	6023      	str	r3, [r4, #0]

      AI_Init();
 80010ba:	f000 fbbd 	bl	8001838 <AI_Init>
      BSP_ACCELERO_Init();
 80010be:	f001 f9e3 	bl	8002488 <BSP_ACCELERO_Init>
      HAL_UART_Transmit(&huart1,msg8,sizeof(msg8),1000);
 80010c2:	4639      	mov	r1, r7
 80010c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c8:	2234      	movs	r2, #52	@ 0x34
 80010ca:	4812      	ldr	r0, [pc, #72]	@ (8001114 <main+0xa8>)
 80010cc:	f004 fe4b 	bl	8005d66 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010d0:	f005 fe86 	bl	8006de0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of PrintQ */
  PrintQHandle = osMessageQueueNew (10, sizeof(uint32_t), &PrintQ_attributes);
 80010d4:	4a10      	ldr	r2, [pc, #64]	@ (8001118 <main+0xac>)
 80010d6:	2104      	movs	r1, #4
 80010d8:	200a      	movs	r0, #10
 80010da:	f005 ff78 	bl	8006fce <osMessageQueueNew>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a0e      	ldr	r2, [pc, #56]	@ (800111c <main+0xb0>)
 80010e2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001120 <main+0xb4>)
 80010e6:	2100      	movs	r1, #0
 80010e8:	480e      	ldr	r0, [pc, #56]	@ (8001124 <main+0xb8>)
 80010ea:	f005 fec3 	bl	8006e74 <osThreadNew>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001128 <main+0xbc>)
 80010f2:	6013      	str	r3, [r2, #0]

  /* creation of printTask */
  printTaskHandle = osThreadNew(printData, NULL, &printTask_attributes);
 80010f4:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <main+0xc0>)
 80010f6:	2100      	movs	r1, #0
 80010f8:	480d      	ldr	r0, [pc, #52]	@ (8001130 <main+0xc4>)
 80010fa:	f005 febb 	bl	8006e74 <osThreadNew>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a0c      	ldr	r2, [pc, #48]	@ (8001134 <main+0xc8>)
 8001102:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001104:	f005 fe90 	bl	8006e28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <main+0x9c>
 800110c:	20001158 	.word	0x20001158
 8001110:	0801177c 	.word	0x0801177c
 8001114:	20000be0 	.word	0x20000be0
 8001118:	080118c0 	.word	0x080118c0
 800111c:	20001154 	.word	0x20001154
 8001120:	08011878 	.word	0x08011878
 8001124:	08001981 	.word	0x08001981
 8001128:	2000114c 	.word	0x2000114c
 800112c:	0801189c 	.word	0x0801189c
 8001130:	08001aa1 	.word	0x08001aa1
 8001134:	20001150 	.word	0x20001150

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b096      	sub	sp, #88	@ 0x58
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	2244      	movs	r2, #68	@ 0x44
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f00c ff18 	bl	800df7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	463b      	mov	r3, r7
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800115a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800115e:	f003 f923 	bl	80043a8 <HAL_PWREx_ControlVoltageScaling>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001168:	f000 fcc4 	bl	8001af4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800116c:	f003 f8fe 	bl	800436c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001170:	4b21      	ldr	r3, [pc, #132]	@ (80011f8 <SystemClock_Config+0xc0>)
 8001172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001176:	4a20      	ldr	r2, [pc, #128]	@ (80011f8 <SystemClock_Config+0xc0>)
 8001178:	f023 0318 	bic.w	r3, r3, #24
 800117c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001180:	2314      	movs	r3, #20
 8001182:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001184:	2301      	movs	r3, #1
 8001186:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001188:	2301      	movs	r3, #1
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001190:	2360      	movs	r3, #96	@ 0x60
 8001192:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001194:	2302      	movs	r3, #2
 8001196:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001198:	2301      	movs	r3, #1
 800119a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800119c:	2301      	movs	r3, #1
 800119e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80011a0:	2328      	movs	r3, #40	@ 0x28
 80011a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011a4:	2307      	movs	r3, #7
 80011a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4618      	mov	r0, r3
 80011b6:	f003 fa19 	bl	80045ec <HAL_RCC_OscConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011c0:	f000 fc98 	bl	8001af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c4:	230f      	movs	r3, #15
 80011c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c8:	2303      	movs	r3, #3
 80011ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011d8:	463b      	mov	r3, r7
 80011da:	2104      	movs	r1, #4
 80011dc:	4618      	mov	r0, r3
 80011de:	f003 fde1 	bl	8004da4 <HAL_RCC_ClockConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80011e8:	f000 fc84 	bl	8001af4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011ec:	f004 fae8 	bl	80057c0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80011f0:	bf00      	nop
 80011f2:	3758      	adds	r7, #88	@ 0x58
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40021000 	.word	0x40021000

080011fc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001200:	4b0d      	ldr	r3, [pc, #52]	@ (8001238 <MX_CRC_Init+0x3c>)
 8001202:	4a0e      	ldr	r2, [pc, #56]	@ (800123c <MX_CRC_Init+0x40>)
 8001204:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001206:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <MX_CRC_Init+0x3c>)
 8001208:	2200      	movs	r2, #0
 800120a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800120c:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <MX_CRC_Init+0x3c>)
 800120e:	2200      	movs	r2, #0
 8001210:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <MX_CRC_Init+0x3c>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001218:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <MX_CRC_Init+0x3c>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <MX_CRC_Init+0x3c>)
 8001220:	2201      	movs	r2, #1
 8001222:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001224:	4804      	ldr	r0, [pc, #16]	@ (8001238 <MX_CRC_Init+0x3c>)
 8001226:	f001 fc45 	bl	8002ab4 <HAL_CRC_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001230:	f000 fc60 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000a88 	.word	0x20000a88
 800123c:	40023000 	.word	0x40023000

08001240 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001244:	4b18      	ldr	r3, [pc, #96]	@ (80012a8 <MX_DFSDM1_Init+0x68>)
 8001246:	4a19      	ldr	r2, [pc, #100]	@ (80012ac <MX_DFSDM1_Init+0x6c>)
 8001248:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800124a:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <MX_DFSDM1_Init+0x68>)
 800124c:	2201      	movs	r2, #1
 800124e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001250:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <MX_DFSDM1_Init+0x68>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001256:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <MX_DFSDM1_Init+0x68>)
 8001258:	2202      	movs	r2, #2
 800125a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800125c:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <MX_DFSDM1_Init+0x68>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001262:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <MX_DFSDM1_Init+0x68>)
 8001264:	2200      	movs	r2, #0
 8001266:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <MX_DFSDM1_Init+0x68>)
 800126a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800126e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001270:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <MX_DFSDM1_Init+0x68>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <MX_DFSDM1_Init+0x68>)
 8001278:	2204      	movs	r2, #4
 800127a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800127c:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <MX_DFSDM1_Init+0x68>)
 800127e:	2200      	movs	r2, #0
 8001280:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <MX_DFSDM1_Init+0x68>)
 8001284:	2201      	movs	r2, #1
 8001286:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001288:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <MX_DFSDM1_Init+0x68>)
 800128a:	2200      	movs	r2, #0
 800128c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <MX_DFSDM1_Init+0x68>)
 8001290:	2200      	movs	r2, #0
 8001292:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	@ (80012a8 <MX_DFSDM1_Init+0x68>)
 8001296:	f001 fcff 	bl	8002c98 <HAL_DFSDM_ChannelInit>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80012a0:	f000 fc28 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000aac 	.word	0x20000aac
 80012ac:	40016020 	.word	0x40016020

080012b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <MX_I2C2_Init+0x74>)
 80012b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001328 <MX_I2C2_Init+0x78>)
 80012b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <MX_I2C2_Init+0x74>)
 80012bc:	f640 6214 	movw	r2, #3604	@ 0xe14
 80012c0:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012c2:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <MX_I2C2_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c8:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <MX_I2C2_Init+0x74>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ce:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <MX_I2C2_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012d4:	4b13      	ldr	r3, [pc, #76]	@ (8001324 <MX_I2C2_Init+0x74>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012da:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <MX_I2C2_Init+0x74>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e0:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <MX_I2C2_Init+0x74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <MX_I2C2_Init+0x74>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012ec:	480d      	ldr	r0, [pc, #52]	@ (8001324 <MX_I2C2_Init+0x74>)
 80012ee:	f002 f8b8 	bl	8003462 <HAL_I2C_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012f8:	f000 fbfc 	bl	8001af4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012fc:	2100      	movs	r1, #0
 80012fe:	4809      	ldr	r0, [pc, #36]	@ (8001324 <MX_I2C2_Init+0x74>)
 8001300:	f002 fe6a 	bl	8003fd8 <HAL_I2CEx_ConfigAnalogFilter>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800130a:	f000 fbf3 	bl	8001af4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800130e:	2100      	movs	r1, #0
 8001310:	4804      	ldr	r0, [pc, #16]	@ (8001324 <MX_I2C2_Init+0x74>)
 8001312:	f002 feac 	bl	800406e <HAL_I2CEx_ConfigDigitalFilter>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800131c:	f000 fbea 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000ae4 	.word	0x20000ae4
 8001328:	40005800 	.word	0x40005800

0800132c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <MX_QUADSPI_Init+0x44>)
 8001332:	4a10      	ldr	r2, [pc, #64]	@ (8001374 <MX_QUADSPI_Init+0x48>)
 8001334:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <MX_QUADSPI_Init+0x44>)
 8001338:	2202      	movs	r2, #2
 800133a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <MX_QUADSPI_Init+0x44>)
 800133e:	2204      	movs	r2, #4
 8001340:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <MX_QUADSPI_Init+0x44>)
 8001344:	2210      	movs	r2, #16
 8001346:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001348:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <MX_QUADSPI_Init+0x44>)
 800134a:	2217      	movs	r2, #23
 800134c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800134e:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <MX_QUADSPI_Init+0x44>)
 8001350:	2200      	movs	r2, #0
 8001352:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <MX_QUADSPI_Init+0x44>)
 8001356:	2200      	movs	r2, #0
 8001358:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	@ (8001370 <MX_QUADSPI_Init+0x44>)
 800135c:	f003 f88a 	bl	8004474 <HAL_QSPI_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001366:	f000 fbc5 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000b38 	.word	0x20000b38
 8001374:	a0001000 	.word	0xa0001000

08001378 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800137c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <MX_SPI3_Init+0x74>)
 800137e:	4a1c      	ldr	r2, [pc, #112]	@ (80013f0 <MX_SPI3_Init+0x78>)
 8001380:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001382:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <MX_SPI3_Init+0x74>)
 8001384:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001388:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800138a:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <MX_SPI3_Init+0x74>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001390:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <MX_SPI3_Init+0x74>)
 8001392:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001396:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <MX_SPI3_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800139e:	4b13      	ldr	r3, [pc, #76]	@ (80013ec <MX_SPI3_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013a4:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <MX_SPI3_Init+0x74>)
 80013a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013aa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <MX_SPI3_Init+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <MX_SPI3_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_SPI3_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <MX_SPI3_Init+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80013c4:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_SPI3_Init+0x74>)
 80013c6:	2207      	movs	r2, #7
 80013c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <MX_SPI3_Init+0x74>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <MX_SPI3_Init+0x74>)
 80013d2:	2208      	movs	r2, #8
 80013d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	@ (80013ec <MX_SPI3_Init+0x74>)
 80013d8:	f004 fbd4 	bl	8005b84 <HAL_SPI_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80013e2:	f000 fb87 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000b7c 	.word	0x20000b7c
 80013f0:	40003c00 	.word	0x40003c00

080013f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013f8:	4b14      	ldr	r3, [pc, #80]	@ (800144c <MX_USART1_UART_Init+0x58>)
 80013fa:	4a15      	ldr	r2, [pc, #84]	@ (8001450 <MX_USART1_UART_Init+0x5c>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013fe:	4b13      	ldr	r3, [pc, #76]	@ (800144c <MX_USART1_UART_Init+0x58>)
 8001400:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001404:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b11      	ldr	r3, [pc, #68]	@ (800144c <MX_USART1_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <MX_USART1_UART_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001412:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <MX_USART1_UART_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <MX_USART1_UART_Init+0x58>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <MX_USART1_UART_Init+0x58>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b09      	ldr	r3, [pc, #36]	@ (800144c <MX_USART1_UART_Init+0x58>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800142a:	4b08      	ldr	r3, [pc, #32]	@ (800144c <MX_USART1_UART_Init+0x58>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <MX_USART1_UART_Init+0x58>)
 8001432:	2200      	movs	r2, #0
 8001434:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	@ (800144c <MX_USART1_UART_Init+0x58>)
 8001438:	f004 fc47 	bl	8005cca <HAL_UART_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001442:	f000 fb57 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000be0 	.word	0x20000be0
 8001450:	40013800 	.word	0x40013800

08001454 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001458:	4b14      	ldr	r3, [pc, #80]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800145a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800145e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001462:	2206      	movs	r2, #6
 8001464:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001466:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001468:	2202      	movs	r2, #2
 800146a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800146e:	2202      	movs	r2, #2
 8001470:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001484:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001486:	2200      	movs	r2, #0
 8001488:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800148a:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800148c:	2200      	movs	r2, #0
 800148e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001492:	2200      	movs	r2, #0
 8001494:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001498:	f002 fe35 	bl	8004106 <HAL_PCD_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80014a2:	f000 fb27 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000c68 	.word	0x20000c68

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	@ 0x28
 80014b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014c6:	4bbd      	ldr	r3, [pc, #756]	@ (80017bc <MX_GPIO_Init+0x30c>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ca:	4abc      	ldr	r2, [pc, #752]	@ (80017bc <MX_GPIO_Init+0x30c>)
 80014cc:	f043 0310 	orr.w	r3, r3, #16
 80014d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014d2:	4bba      	ldr	r3, [pc, #744]	@ (80017bc <MX_GPIO_Init+0x30c>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	4bb7      	ldr	r3, [pc, #732]	@ (80017bc <MX_GPIO_Init+0x30c>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	4ab6      	ldr	r2, [pc, #728]	@ (80017bc <MX_GPIO_Init+0x30c>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ea:	4bb4      	ldr	r3, [pc, #720]	@ (80017bc <MX_GPIO_Init+0x30c>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4bb1      	ldr	r3, [pc, #708]	@ (80017bc <MX_GPIO_Init+0x30c>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	4ab0      	ldr	r2, [pc, #704]	@ (80017bc <MX_GPIO_Init+0x30c>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001502:	4bae      	ldr	r3, [pc, #696]	@ (80017bc <MX_GPIO_Init+0x30c>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4bab      	ldr	r3, [pc, #684]	@ (80017bc <MX_GPIO_Init+0x30c>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	4aaa      	ldr	r2, [pc, #680]	@ (80017bc <MX_GPIO_Init+0x30c>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800151a:	4ba8      	ldr	r3, [pc, #672]	@ (80017bc <MX_GPIO_Init+0x30c>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001526:	4ba5      	ldr	r3, [pc, #660]	@ (80017bc <MX_GPIO_Init+0x30c>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	4aa4      	ldr	r2, [pc, #656]	@ (80017bc <MX_GPIO_Init+0x30c>)
 800152c:	f043 0308 	orr.w	r3, r3, #8
 8001530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001532:	4ba2      	ldr	r3, [pc, #648]	@ (80017bc <MX_GPIO_Init+0x30c>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001544:	489e      	ldr	r0, [pc, #632]	@ (80017c0 <MX_GPIO_Init+0x310>)
 8001546:	f001 ff51 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	f248 1104 	movw	r1, #33028	@ 0x8104
 8001550:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001554:	f001 ff4a 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001558:	2200      	movs	r2, #0
 800155a:	f24f 0114 	movw	r1, #61460	@ 0xf014
 800155e:	4899      	ldr	r0, [pc, #612]	@ (80017c4 <MX_GPIO_Init+0x314>)
 8001560:	f001 ff44 	bl	80033ec <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	f241 0181 	movw	r1, #4225	@ 0x1081
 800156a:	4897      	ldr	r0, [pc, #604]	@ (80017c8 <MX_GPIO_Init+0x318>)
 800156c:	f001 ff3e 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001570:	2201      	movs	r2, #1
 8001572:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001576:	4894      	ldr	r0, [pc, #592]	@ (80017c8 <MX_GPIO_Init+0x318>)
 8001578:	f001 ff38 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001582:	4892      	ldr	r0, [pc, #584]	@ (80017cc <MX_GPIO_Init+0x31c>)
 8001584:	f001 ff32 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	2120      	movs	r1, #32
 800158c:	488d      	ldr	r0, [pc, #564]	@ (80017c4 <MX_GPIO_Init+0x314>)
 800158e:	f001 ff2d 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	2101      	movs	r1, #1
 8001596:	488a      	ldr	r0, [pc, #552]	@ (80017c0 <MX_GPIO_Init+0x310>)
 8001598:	f001 ff28 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800159c:	f240 1315 	movw	r3, #277	@ 0x115
 80015a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4882      	ldr	r0, [pc, #520]	@ (80017c0 <MX_GPIO_Init+0x310>)
 80015b6:	f001 fc7b 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80015ba:	236a      	movs	r3, #106	@ 0x6a
 80015bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	487c      	ldr	r0, [pc, #496]	@ (80017c0 <MX_GPIO_Init+0x310>)
 80015d0:	f001 fc6e 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80015d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	4878      	ldr	r0, [pc, #480]	@ (80017cc <MX_GPIO_Init+0x31c>)
 80015ec:	f001 fc60 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80015f0:	233f      	movs	r3, #63	@ 0x3f
 80015f2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015f4:	230b      	movs	r3, #11
 80015f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	4872      	ldr	r0, [pc, #456]	@ (80017cc <MX_GPIO_Init+0x31c>)
 8001604:	f001 fc54 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001608:	2303      	movs	r3, #3
 800160a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001618:	2308      	movs	r3, #8
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001626:	f001 fc43 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800162a:	f248 1304 	movw	r3, #33028	@ 0x8104
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
 8001632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001646:	f001 fc33 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800164a:	2308      	movs	r3, #8
 800164c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800165a:	2301      	movs	r3, #1
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001668:	f001 fc22 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800166c:	2310      	movs	r3, #16
 800166e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001670:	230b      	movs	r3, #11
 8001672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001682:	f001 fc15 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001686:	23e0      	movs	r3, #224	@ 0xe0
 8001688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001696:	2305      	movs	r3, #5
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a4:	f001 fc04 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80016a8:	2301      	movs	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	4841      	ldr	r0, [pc, #260]	@ (80017c4 <MX_GPIO_Init+0x314>)
 80016be:	f001 fbf7 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80016c2:	2302      	movs	r3, #2
 80016c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016c6:	230b      	movs	r3, #11
 80016c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	483b      	ldr	r0, [pc, #236]	@ (80017c4 <MX_GPIO_Init+0x314>)
 80016d6:	f001 fbeb 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80016da:	f24f 0334 	movw	r3, #61492	@ 0xf034
 80016de:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	4834      	ldr	r0, [pc, #208]	@ (80017c4 <MX_GPIO_Init+0x314>)
 80016f4:	f001 fbdc 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80016f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800170a:	2307      	movs	r3, #7
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	482c      	ldr	r0, [pc, #176]	@ (80017c8 <MX_GPIO_Init+0x318>)
 8001716:	f001 fbcb 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800171a:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 800171e:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001720:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4825      	ldr	r0, [pc, #148]	@ (80017c8 <MX_GPIO_Init+0x318>)
 8001732:	f001 fbbd 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001736:	f243 0381 	movw	r3, #12417	@ 0x3081
 800173a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4619      	mov	r1, r3
 800174e:	481e      	ldr	r0, [pc, #120]	@ (80017c8 <MX_GPIO_Init+0x318>)
 8001750:	f001 fbae 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001754:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	4817      	ldr	r0, [pc, #92]	@ (80017cc <MX_GPIO_Init+0x31c>)
 800176e:	f001 fb9f 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001772:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001778:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800177c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	4810      	ldr	r0, [pc, #64]	@ (80017cc <MX_GPIO_Init+0x31c>)
 800178a:	f001 fb91 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800178e:	2302      	movs	r3, #2
 8001790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179a:	2303      	movs	r3, #3
 800179c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800179e:	2305      	movs	r3, #5
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	4807      	ldr	r0, [pc, #28]	@ (80017c8 <MX_GPIO_Init+0x318>)
 80017aa:	f001 fb81 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80017ae:	2378      	movs	r3, #120	@ 0x78
 80017b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	e00a      	b.n	80017d0 <MX_GPIO_Init+0x320>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	48001000 	.word	0x48001000
 80017c4:	48000400 	.word	0x48000400
 80017c8:	48000c00 	.word	0x48000c00
 80017cc:	48000800 	.word	0x48000800
 80017d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d2:	2303      	movs	r3, #3
 80017d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017d6:	2307      	movs	r3, #7
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	4813      	ldr	r0, [pc, #76]	@ (8001830 <MX_GPIO_Init+0x380>)
 80017e2:	f001 fb65 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80017e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ec:	2312      	movs	r3, #18
 80017ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f4:	2303      	movs	r3, #3
 80017f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017f8:	2304      	movs	r3, #4
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4619      	mov	r1, r3
 8001802:	480c      	ldr	r0, [pc, #48]	@ (8001834 <MX_GPIO_Init+0x384>)
 8001804:	f001 fb54 	bl	8002eb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2105      	movs	r1, #5
 800180c:	2017      	movs	r0, #23
 800180e:	f001 f91a 	bl	8002a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001812:	2017      	movs	r0, #23
 8001814:	f001 f933 	bl	8002a7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	2105      	movs	r1, #5
 800181c:	2028      	movs	r0, #40	@ 0x28
 800181e:	f001 f912 	bl	8002a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001822:	2028      	movs	r0, #40	@ 0x28
 8001824:	f001 f92b 	bl	8002a7e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	@ 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	48000c00 	.word	0x48000c00
 8001834:	48000400 	.word	0x48000400

08001838 <AI_Init>:

/* USER CODE BEGIN 4 */
static void AI_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create a local array with the addresses of the activations buffers */
  const ai_handle act_addr[] = { activations };
 800183e:	4b17      	ldr	r3, [pc, #92]	@ (800189c <AI_Init+0x64>)
 8001840:	603b      	str	r3, [r7, #0]
  /* Create an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8001842:	463b      	mov	r3, r7
 8001844:	2200      	movs	r2, #0
 8001846:	4619      	mov	r1, r3
 8001848:	4815      	ldr	r0, [pc, #84]	@ (80018a0 <AI_Init+0x68>)
 800184a:	f008 fa45 	bl	8009cd8 <ai_network_create_and_init>
 800184e:	4603      	mov	r3, r0
 8001850:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {
 8001852:	793b      	ldrb	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00a      	beq.n	800186e <AI_Init+0x36>
    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 8001858:	793b      	ldrb	r3, [r7, #4]
 800185a:	4619      	mov	r1, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001862:	461a      	mov	r2, r3
 8001864:	480f      	ldr	r0, [pc, #60]	@ (80018a4 <AI_Init+0x6c>)
 8001866:	f00c f9ed 	bl	800dc44 <iprintf>
    Error_Handler();
 800186a:	f000 f943 	bl	8001af4 <Error_Handler>
  }
  ai_input = ai_network_inputs_get(network, NULL);
 800186e:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <AI_Init+0x68>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f008 faa3 	bl	8009dc0 <ai_network_inputs_get>
 800187a:	4603      	mov	r3, r0
 800187c:	4a0a      	ldr	r2, [pc, #40]	@ (80018a8 <AI_Init+0x70>)
 800187e:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8001880:	4b07      	ldr	r3, [pc, #28]	@ (80018a0 <AI_Init+0x68>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f008 fab4 	bl	8009df4 <ai_network_outputs_get>
 800188c:	4603      	mov	r3, r0
 800188e:	4a07      	ldr	r2, [pc, #28]	@ (80018ac <AI_Init+0x74>)
 8001890:	6013      	str	r3, [r2, #0]
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200012a4 	.word	0x200012a4
 80018a0:	2000115c 	.word	0x2000115c
 80018a4:	080117b0 	.word	0x080117b0
 80018a8:	20001950 	.word	0x20001950
 80018ac:	20001954 	.word	0x20001954

080018b0 <AI_Run>:

static void AI_Run(float *pIn, float *pOut)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  ai_i32 batch;
  ai_error err;

  /* Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <AI_Run+0x60>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 80018c2:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <AI_Run+0x64>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	605a      	str	r2, [r3, #4]

  batch = ai_network_run(network, ai_input, ai_output);
 80018ca:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <AI_Run+0x68>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a10      	ldr	r2, [pc, #64]	@ (8001910 <AI_Run+0x60>)
 80018d0:	6811      	ldr	r1, [r2, #0]
 80018d2:	4a10      	ldr	r2, [pc, #64]	@ (8001914 <AI_Run+0x64>)
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f008 fae2 	bl	8009ea0 <ai_network_run>
 80018dc:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d011      	beq.n	8001908 <AI_Run+0x58>
    err = ai_network_get_error(network);
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <AI_Run+0x68>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f008 f9d3 	bl	8009c94 <ai_network_get_error>
 80018ee:	4603      	mov	r3, r0
 80018f0:	60bb      	str	r3, [r7, #8]
    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 80018f2:	7a3b      	ldrb	r3, [r7, #8]
 80018f4:	4619      	mov	r1, r3
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80018fc:	461a      	mov	r2, r3
 80018fe:	4807      	ldr	r0, [pc, #28]	@ (800191c <AI_Run+0x6c>)
 8001900:	f00c f9a0 	bl	800dc44 <iprintf>
    Error_Handler();
 8001904:	f000 f8f6 	bl	8001af4 <Error_Handler>
  }
}
 8001908:	bf00      	nop
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20001950 	.word	0x20001950
 8001914:	20001954 	.word	0x20001954
 8001918:	2000115c 	.word	0x2000115c
 800191c:	080117dc 	.word	0x080117dc

08001920 <argmax>:

static uint32_t argmax(const float * values, uint32_t len)
{
 8001920:	b480      	push	{r7}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  float max_value = values[0];
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	617b      	str	r3, [r7, #20]
  uint32_t max_index = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 8001934:	2301      	movs	r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	e017      	b.n	800196a <argmax+0x4a>
    if (values[i] > max_value) {
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	ed97 7a05 	vldr	s14, [r7, #20]
 800194a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800194e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001952:	d507      	bpl.n	8001964 <argmax+0x44>
      max_value = values[i];
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	4413      	add	r3, r2
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	617b      	str	r3, [r7, #20]
      max_index = i;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3301      	adds	r3, #1
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d3e3      	bcc.n	800193a <argmax+0x1a>
    }
  }
  return max_index;
 8001972:	693b      	ldr	r3, [r7, #16]
}
 8001974:	4618      	mov	r0, r3
 8001976:	371c      	adds	r7, #28
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	@ 0x28
 8001984:	af02      	add	r7, sp, #8
 8001986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	BSP_ACCELERO_AccGetXYZ(acc_value);
 8001988:	483c      	ldr	r0, [pc, #240]	@ (8001a7c <StartDefaultTask+0xfc>)
 800198a:	f000 fdbb 	bl	8002504 <BSP_ACCELERO_AccGetXYZ>
	//uint8_t conf[]="Made it";
	//HAL_UART_Transmit(&huart1,conf,sizeof(conf),1000);
	aiInData[write_index + 0] = (float) acc_value[0] / 4000.0f;
 800198e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a7c <StartDefaultTask+0xfc>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800199a:	4b39      	ldr	r3, [pc, #228]	@ (8001a80 <StartDefaultTask+0x100>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8001a84 <StartDefaultTask+0x104>
 80019a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019a6:	4a38      	ldr	r2, [pc, #224]	@ (8001a88 <StartDefaultTask+0x108>)
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	edc3 7a00 	vstr	s15, [r3]
	aiInData[write_index + 1] = (float) acc_value[1] / 4000.0f;
 80019b0:	4b32      	ldr	r3, [pc, #200]	@ (8001a7c <StartDefaultTask+0xfc>)
 80019b2:	885b      	ldrh	r3, [r3, #2]
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019bc:	4b30      	ldr	r3, [pc, #192]	@ (8001a80 <StartDefaultTask+0x100>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8001a84 <StartDefaultTask+0x104>
 80019c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001a88 <StartDefaultTask+0x108>)
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	edc3 7a00 	vstr	s15, [r3]
	aiInData[write_index + 2] = (float) acc_value[2] / 4000.0f;
 80019d4:	4b29      	ldr	r3, [pc, #164]	@ (8001a7c <StartDefaultTask+0xfc>)
 80019d6:	889b      	ldrh	r3, [r3, #4]
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019e0:	4b27      	ldr	r3, [pc, #156]	@ (8001a80 <StartDefaultTask+0x100>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	3302      	adds	r3, #2
 80019e6:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8001a84 <StartDefaultTask+0x104>
 80019ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ee:	4a26      	ldr	r2, [pc, #152]	@ (8001a88 <StartDefaultTask+0x108>)
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	edc3 7a00 	vstr	s15, [r3]
	write_index += 3;
 80019f8:	4b21      	ldr	r3, [pc, #132]	@ (8001a80 <StartDefaultTask+0x100>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	3303      	adds	r3, #3
 80019fe:	4a20      	ldr	r2, [pc, #128]	@ (8001a80 <StartDefaultTask+0x100>)
 8001a00:	6013      	str	r3, [r2, #0]
//	uint8_t ind[50];
//    snprintf(ind, sizeof(ind), "%d \r\n\0", write_index);
//    HAL_UART_Transmit(&huart1,ind,sizeof(ind),1000);

	      if (write_index == AI_NETWORK_IN_1_SIZE) {
 8001a02:	4b1f      	ldr	r3, [pc, #124]	@ (8001a80 <StartDefaultTask+0x100>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b4e      	cmp	r3, #78	@ 0x4e
 8001a08:	d133      	bne.n	8001a72 <StartDefaultTask+0xf2>
	        write_index = 0;
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a80 <StartDefaultTask+0x100>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

//	    	uint8_t conf[]="Made it";
//	    	HAL_UART_Transmit(&huart1,conf,sizeof(conf),1000);
	        printf("Running inference\r\n");
 8001a10:	481e      	ldr	r0, [pc, #120]	@ (8001a8c <StartDefaultTask+0x10c>)
 8001a12:	f00c f97f 	bl	800dd14 <puts>
	        AI_Run(aiInData, aiOutData);
 8001a16:	491e      	ldr	r1, [pc, #120]	@ (8001a90 <StartDefaultTask+0x110>)
 8001a18:	481b      	ldr	r0, [pc, #108]	@ (8001a88 <StartDefaultTask+0x108>)
 8001a1a:	f7ff ff49 	bl	80018b0 <AI_Run>

	        /* Output results */
	        for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
 8001a22:	e01c      	b.n	8001a5e <StartDefaultTask+0xde>
	          uint8_t msg[20];
	          snprintf(msg, sizeof(msg), "%8.6f ", aiOutData[i]);
 8001a24:	4a1a      	ldr	r2, [pc, #104]	@ (8001a90 <StartDefaultTask+0x110>)
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fd8a 	bl	8000548 <__aeabi_f2d>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	f107 0008 	add.w	r0, r7, #8
 8001a3c:	e9cd 2300 	strd	r2, r3, [sp]
 8001a40:	4a14      	ldr	r2, [pc, #80]	@ (8001a94 <StartDefaultTask+0x114>)
 8001a42:	2114      	movs	r1, #20
 8001a44:	f00c f96e 	bl	800dd24 <sniprintf>
	          HAL_UART_Transmit(&huart1,msg,sizeof(msg),1000);
 8001a48:	f107 0108 	add.w	r1, r7, #8
 8001a4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a50:	2214      	movs	r2, #20
 8001a52:	4811      	ldr	r0, [pc, #68]	@ (8001a98 <StartDefaultTask+0x118>)
 8001a54:	f004 f987 	bl	8005d66 <HAL_UART_Transmit>
	        for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d9df      	bls.n	8001a24 <StartDefaultTask+0xa4>
	        }
	        class = argmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 8001a64:	2103      	movs	r1, #3
 8001a66:	480a      	ldr	r0, [pc, #40]	@ (8001a90 <StartDefaultTask+0x110>)
 8001a68:	f7ff ff5a 	bl	8001920 <argmax>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a9c <StartDefaultTask+0x11c>)
 8001a70:	6013      	str	r3, [r2, #0]
//	        uint8_t msg1[50];
//	        snprintf(msg1, sizeof(msg1), ": %d - %s\r\n", (int) class, activities[class]);
//	        HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
	      }
	      osDelay(1);
 8001a72:	2001      	movs	r0, #1
 8001a74:	f005 fa90 	bl	8006f98 <osDelay>
	BSP_ACCELERO_AccGetXYZ(acc_value);
 8001a78:	e786      	b.n	8001988 <StartDefaultTask+0x8>
 8001a7a:	bf00      	nop
 8001a7c:	20001958 	.word	0x20001958
 8001a80:	20001960 	.word	0x20001960
 8001a84:	457a0000 	.word	0x457a0000
 8001a88:	20001160 	.word	0x20001160
 8001a8c:	08011808 	.word	0x08011808
 8001a90:	20001298 	.word	0x20001298
 8001a94:	0801181c 	.word	0x0801181c
 8001a98:	20000be0 	.word	0x20000be0
 8001a9c:	20001964 	.word	0x20001964

08001aa0 <printData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_printData */
void printData(void *argument)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b092      	sub	sp, #72	@ 0x48
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN printData */
  /* Infinite loop */
  for(;;)
  {
      uint8_t msg1[50];
      snprintf(msg1, sizeof(msg1), ": %d - %s\r\n", (int) class, activities[class]);
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <printData+0x44>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <printData+0x44>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae8 <printData+0x48>)
 8001ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab8:	f107 000c 	add.w	r0, r7, #12
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <printData+0x4c>)
 8001ac2:	2132      	movs	r1, #50	@ 0x32
 8001ac4:	f00c f92e 	bl	800dd24 <sniprintf>
      HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 8001ac8:	f107 010c 	add.w	r1, r7, #12
 8001acc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ad0:	2232      	movs	r2, #50	@ 0x32
 8001ad2:	4807      	ldr	r0, [pc, #28]	@ (8001af0 <printData+0x50>)
 8001ad4:	f004 f947 	bl	8005d66 <HAL_UART_Transmit>
    osDelay(1);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f005 fa5d 	bl	8006f98 <osDelay>
  {
 8001ade:	bf00      	nop
 8001ae0:	e7e2      	b.n	8001aa8 <printData+0x8>
 8001ae2:	bf00      	nop
 8001ae4:	20001964 	.word	0x20001964
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	08011824 	.word	0x08011824
 8001af0:	20000be0 	.word	0x20000be0

08001af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af8:	b672      	cpsid	i
}
 8001afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <Error_Handler+0x8>

08001b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <HAL_MspInit+0x4c>)
 8001b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b0a:	4a10      	ldr	r2, [pc, #64]	@ (8001b4c <HAL_MspInit+0x4c>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b12:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <HAL_MspInit+0x4c>)
 8001b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <HAL_MspInit+0x4c>)
 8001b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b22:	4a0a      	ldr	r2, [pc, #40]	@ (8001b4c <HAL_MspInit+0x4c>)
 8001b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b28:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b2a:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <HAL_MspInit+0x4c>)
 8001b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	210f      	movs	r1, #15
 8001b3a:	f06f 0001 	mvn.w	r0, #1
 8001b3e:	f000 ff82 	bl	8002a46 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000

08001b50 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b88 <HAL_CRC_MspInit+0x38>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d10b      	bne.n	8001b7a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b62:	4b0a      	ldr	r3, [pc, #40]	@ (8001b8c <HAL_CRC_MspInit+0x3c>)
 8001b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b66:	4a09      	ldr	r2, [pc, #36]	@ (8001b8c <HAL_CRC_MspInit+0x3c>)
 8001b68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b6e:	4b07      	ldr	r3, [pc, #28]	@ (8001b8c <HAL_CRC_MspInit+0x3c>)
 8001b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40023000 	.word	0x40023000
 8001b8c:	40021000 	.word	0x40021000

08001b90 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b0ac      	sub	sp, #176	@ 0xb0
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	2288      	movs	r2, #136	@ 0x88
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f00c f9e3 	bl	800df7c <memset>
  if(DFSDM1_Init == 0)
 8001bb6:	4b25      	ldr	r3, [pc, #148]	@ (8001c4c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d142      	bne.n	8001c44 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001bbe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bc2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 fb0c 	bl	80051ec <HAL_RCCEx_PeriphCLKConfig>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001bda:	f7ff ff8b 	bl	8001af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001bde:	4b1c      	ldr	r3, [pc, #112]	@ (8001c50 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be2:	4a1b      	ldr	r2, [pc, #108]	@ (8001c50 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001be4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001be8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bea:	4b19      	ldr	r3, [pc, #100]	@ (8001c50 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bf6:	4b16      	ldr	r3, [pc, #88]	@ (8001c50 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfa:	4a15      	ldr	r2, [pc, #84]	@ (8001c50 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bfc:	f043 0310 	orr.w	r3, r3, #16
 8001c00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c02:	4b13      	ldr	r3, [pc, #76]	@ (8001c50 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001c0e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001c12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001c28:	2306      	movs	r3, #6
 8001c2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c2e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c32:	4619      	mov	r1, r3
 8001c34:	4807      	ldr	r0, [pc, #28]	@ (8001c54 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001c36:	f001 f93b 	bl	8002eb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001c3a:	4b04      	ldr	r3, [pc, #16]	@ (8001c4c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	4a02      	ldr	r2, [pc, #8]	@ (8001c4c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001c42:	6013      	str	r3, [r2, #0]
  }

}
 8001c44:	bf00      	nop
 8001c46:	37b0      	adds	r7, #176	@ 0xb0
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20001968 	.word	0x20001968
 8001c50:	40021000 	.word	0x40021000
 8001c54:	48001000 	.word	0x48001000

08001c58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b0ac      	sub	sp, #176	@ 0xb0
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	2288      	movs	r2, #136	@ 0x88
 8001c76:	2100      	movs	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f00c f97f 	bl	800df7c <memset>
  if(hi2c->Instance==I2C2)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a21      	ldr	r2, [pc, #132]	@ (8001d08 <HAL_I2C_MspInit+0xb0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d13b      	bne.n	8001d00 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c88:	2380      	movs	r3, #128	@ 0x80
 8001c8a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	4618      	mov	r0, r3
 8001c96:	f003 faa9 	bl	80051ec <HAL_RCCEx_PeriphCLKConfig>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ca0:	f7ff ff28 	bl	8001af4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca4:	4b19      	ldr	r3, [pc, #100]	@ (8001d0c <HAL_I2C_MspInit+0xb4>)
 8001ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca8:	4a18      	ldr	r2, [pc, #96]	@ (8001d0c <HAL_I2C_MspInit+0xb4>)
 8001caa:	f043 0302 	orr.w	r3, r3, #2
 8001cae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cb0:	4b16      	ldr	r3, [pc, #88]	@ (8001d0c <HAL_I2C_MspInit+0xb4>)
 8001cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001cbc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001cc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc4:	2312      	movs	r3, #18
 8001cc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cdc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480b      	ldr	r0, [pc, #44]	@ (8001d10 <HAL_I2C_MspInit+0xb8>)
 8001ce4:	f001 f8e4 	bl	8002eb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ce8:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <HAL_I2C_MspInit+0xb4>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cec:	4a07      	ldr	r2, [pc, #28]	@ (8001d0c <HAL_I2C_MspInit+0xb4>)
 8001cee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cf4:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <HAL_I2C_MspInit+0xb4>)
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001d00:	bf00      	nop
 8001d02:	37b0      	adds	r7, #176	@ 0xb0
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40005800 	.word	0x40005800
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	48000400 	.word	0x48000400

08001d14 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0b      	ldr	r2, [pc, #44]	@ (8001d50 <HAL_I2C_MspDeInit+0x3c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d10f      	bne.n	8001d46 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001d26:	4b0b      	ldr	r3, [pc, #44]	@ (8001d54 <HAL_I2C_MspDeInit+0x40>)
 8001d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d54 <HAL_I2C_MspDeInit+0x40>)
 8001d2c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001d30:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001d32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d36:	4808      	ldr	r0, [pc, #32]	@ (8001d58 <HAL_I2C_MspDeInit+0x44>)
 8001d38:	f001 fa64 	bl	8003204 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001d3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d40:	4805      	ldr	r0, [pc, #20]	@ (8001d58 <HAL_I2C_MspDeInit+0x44>)
 8001d42:	f001 fa5f 	bl	8003204 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40005800 	.word	0x40005800
 8001d54:	40021000 	.word	0x40021000
 8001d58:	48000400 	.word	0x48000400

08001d5c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	@ 0x28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a17      	ldr	r2, [pc, #92]	@ (8001dd8 <HAL_QSPI_MspInit+0x7c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d128      	bne.n	8001dd0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001d7e:	4b17      	ldr	r3, [pc, #92]	@ (8001ddc <HAL_QSPI_MspInit+0x80>)
 8001d80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d82:	4a16      	ldr	r2, [pc, #88]	@ (8001ddc <HAL_QSPI_MspInit+0x80>)
 8001d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d88:	6513      	str	r3, [r2, #80]	@ 0x50
 8001d8a:	4b14      	ldr	r3, [pc, #80]	@ (8001ddc <HAL_QSPI_MspInit+0x80>)
 8001d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d96:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <HAL_QSPI_MspInit+0x80>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9a:	4a10      	ldr	r2, [pc, #64]	@ (8001ddc <HAL_QSPI_MspInit+0x80>)
 8001d9c:	f043 0310 	orr.w	r3, r3, #16
 8001da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001da2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ddc <HAL_QSPI_MspInit+0x80>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001dae:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001db2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001dc0:	230a      	movs	r3, #10
 8001dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <HAL_QSPI_MspInit+0x84>)
 8001dcc:	f001 f870 	bl	8002eb0 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001dd0:	bf00      	nop
 8001dd2:	3728      	adds	r7, #40	@ 0x28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	a0001000 	.word	0xa0001000
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	48001000 	.word	0x48001000

08001de4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	@ 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a17      	ldr	r2, [pc, #92]	@ (8001e60 <HAL_SPI_MspInit+0x7c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d128      	bne.n	8001e58 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e06:	4b17      	ldr	r3, [pc, #92]	@ (8001e64 <HAL_SPI_MspInit+0x80>)
 8001e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0a:	4a16      	ldr	r2, [pc, #88]	@ (8001e64 <HAL_SPI_MspInit+0x80>)
 8001e0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e10:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e12:	4b14      	ldr	r3, [pc, #80]	@ (8001e64 <HAL_SPI_MspInit+0x80>)
 8001e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1e:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <HAL_SPI_MspInit+0x80>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e22:	4a10      	ldr	r2, [pc, #64]	@ (8001e64 <HAL_SPI_MspInit+0x80>)
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <HAL_SPI_MspInit+0x80>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001e36:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e48:	2306      	movs	r3, #6
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	4805      	ldr	r0, [pc, #20]	@ (8001e68 <HAL_SPI_MspInit+0x84>)
 8001e54:	f001 f82c 	bl	8002eb0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001e58:	bf00      	nop
 8001e5a:	3728      	adds	r7, #40	@ 0x28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40003c00 	.word	0x40003c00
 8001e64:	40021000 	.word	0x40021000
 8001e68:	48000800 	.word	0x48000800

08001e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b0ac      	sub	sp, #176	@ 0xb0
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2288      	movs	r2, #136	@ 0x88
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f00c f875 	bl	800df7c <memset>
  if(huart->Instance==USART1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a21      	ldr	r2, [pc, #132]	@ (8001f1c <HAL_UART_MspInit+0xb0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d13a      	bne.n	8001f12 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f003 f99f 	bl	80051ec <HAL_RCCEx_PeriphCLKConfig>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001eb4:	f7ff fe1e 	bl	8001af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eb8:	4b19      	ldr	r3, [pc, #100]	@ (8001f20 <HAL_UART_MspInit+0xb4>)
 8001eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ebc:	4a18      	ldr	r2, [pc, #96]	@ (8001f20 <HAL_UART_MspInit+0xb4>)
 8001ebe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ec2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ec4:	4b16      	ldr	r3, [pc, #88]	@ (8001f20 <HAL_UART_MspInit+0xb4>)
 8001ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed0:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <HAL_UART_MspInit+0xb4>)
 8001ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed4:	4a12      	ldr	r2, [pc, #72]	@ (8001f20 <HAL_UART_MspInit+0xb4>)
 8001ed6:	f043 0302 	orr.w	r3, r3, #2
 8001eda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001edc:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <HAL_UART_MspInit+0xb4>)
 8001ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001ee8:	23c0      	movs	r3, #192	@ 0xc0
 8001eea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efa:	2303      	movs	r3, #3
 8001efc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f00:	2307      	movs	r3, #7
 8001f02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f06:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4805      	ldr	r0, [pc, #20]	@ (8001f24 <HAL_UART_MspInit+0xb8>)
 8001f0e:	f000 ffcf 	bl	8002eb0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001f12:	bf00      	nop
 8001f14:	37b0      	adds	r7, #176	@ 0xb0
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40013800 	.word	0x40013800
 8001f20:	40021000 	.word	0x40021000
 8001f24:	48000400 	.word	0x48000400

08001f28 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b0ac      	sub	sp, #176	@ 0xb0
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	2288      	movs	r2, #136	@ 0x88
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f00c f817 	bl	800df7c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f56:	d17c      	bne.n	8002052 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f5c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001f5e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001f62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001f66:	2301      	movs	r3, #1
 8001f68:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001f6e:	2318      	movs	r3, #24
 8001f70:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001f72:	2307      	movs	r3, #7
 8001f74:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001f76:	2302      	movs	r3, #2
 8001f78:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001f7e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001f82:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f003 f92f 	bl	80051ec <HAL_RCCEx_PeriphCLKConfig>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001f94:	f7ff fdae 	bl	8001af4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f98:	4b30      	ldr	r3, [pc, #192]	@ (800205c <HAL_PCD_MspInit+0x134>)
 8001f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9c:	4a2f      	ldr	r2, [pc, #188]	@ (800205c <HAL_PCD_MspInit+0x134>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa4:	4b2d      	ldr	r3, [pc, #180]	@ (800205c <HAL_PCD_MspInit+0x134>)
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001fb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001fc4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fce:	f000 ff6f 	bl	8002eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001fd2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001fd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001fec:	230a      	movs	r3, #10
 8001fee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ffc:	f000 ff58 	bl	8002eb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002000:	4b16      	ldr	r3, [pc, #88]	@ (800205c <HAL_PCD_MspInit+0x134>)
 8002002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002004:	4a15      	ldr	r2, [pc, #84]	@ (800205c <HAL_PCD_MspInit+0x134>)
 8002006:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800200a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800200c:	4b13      	ldr	r3, [pc, #76]	@ (800205c <HAL_PCD_MspInit+0x134>)
 800200e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002010:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002018:	4b10      	ldr	r3, [pc, #64]	@ (800205c <HAL_PCD_MspInit+0x134>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d114      	bne.n	800204e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002024:	4b0d      	ldr	r3, [pc, #52]	@ (800205c <HAL_PCD_MspInit+0x134>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002028:	4a0c      	ldr	r2, [pc, #48]	@ (800205c <HAL_PCD_MspInit+0x134>)
 800202a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800202e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002030:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <HAL_PCD_MspInit+0x134>)
 8002032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002034:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800203c:	f002 fa0a 	bl	8004454 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002040:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_PCD_MspInit+0x134>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002044:	4a05      	ldr	r2, [pc, #20]	@ (800205c <HAL_PCD_MspInit+0x134>)
 8002046:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800204a:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800204c:	e001      	b.n	8002052 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800204e:	f002 fa01 	bl	8004454 <HAL_PWREx_EnableVddUSB>
}
 8002052:	bf00      	nop
 8002054:	37b0      	adds	r7, #176	@ 0xb0
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000

08002060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002064:	bf00      	nop
 8002066:	e7fd      	b.n	8002064 <NMI_Handler+0x4>

08002068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <HardFault_Handler+0x4>

08002070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <MemManage_Handler+0x4>

08002078 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <BusFault_Handler+0x4>

08002080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <UsageFault_Handler+0x4>

08002088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800209a:	f000 fbb5 	bl	8002808 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800209e:	f006 fc51 	bl	8008944 <xTaskGetSchedulerState>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d001      	beq.n	80020ac <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80020a8:	f007 fa46 	bl	8009538 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80020b4:	2020      	movs	r0, #32
 80020b6:	f001 f9b1 	bl	800341c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80020ba:	2040      	movs	r0, #64	@ 0x40
 80020bc:	f001 f9ae 	bl	800341c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80020c0:	2080      	movs	r0, #128	@ 0x80
 80020c2:	f001 f9ab 	bl	800341c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80020c6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80020ca:	f001 f9a7 	bl	800341c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80020d6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80020da:	f001 f99f 	bl	800341c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80020de:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80020e2:	f001 f99b 	bl	800341c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80020e6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020ea:	f001 f997 	bl	800341c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80020ee:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80020f2:	f001 f993 	bl	800341c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80020f6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80020fa:	f001 f98f 	bl	800341c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800210c:	4a14      	ldr	r2, [pc, #80]	@ (8002160 <_sbrk+0x5c>)
 800210e:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <_sbrk+0x60>)
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002118:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <_sbrk+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002120:	4b11      	ldr	r3, [pc, #68]	@ (8002168 <_sbrk+0x64>)
 8002122:	4a12      	ldr	r2, [pc, #72]	@ (800216c <_sbrk+0x68>)
 8002124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002126:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	429a      	cmp	r2, r3
 8002132:	d207      	bcs.n	8002144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002134:	f00b ff84 	bl	800e040 <__errno>
 8002138:	4603      	mov	r3, r0
 800213a:	220c      	movs	r2, #12
 800213c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
 8002142:	e009      	b.n	8002158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002144:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <_sbrk+0x64>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214a:	4b07      	ldr	r3, [pc, #28]	@ (8002168 <_sbrk+0x64>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	4a05      	ldr	r2, [pc, #20]	@ (8002168 <_sbrk+0x64>)
 8002154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002156:	68fb      	ldr	r3, [r7, #12]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20018000 	.word	0x20018000
 8002164:	00000800 	.word	0x00000800
 8002168:	2000196c 	.word	0x2000196c
 800216c:	200034f8 	.word	0x200034f8

08002170 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002174:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <SystemInit+0x20>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217a:	4a05      	ldr	r2, [pc, #20]	@ (8002190 <SystemInit+0x20>)
 800217c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002180:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002194:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002198:	f7ff ffea 	bl	8002170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800219c:	480c      	ldr	r0, [pc, #48]	@ (80021d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800219e:	490d      	ldr	r1, [pc, #52]	@ (80021d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021a0:	4a0d      	ldr	r2, [pc, #52]	@ (80021d8 <LoopForever+0xe>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a4:	e002      	b.n	80021ac <LoopCopyDataInit>

080021a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021aa:	3304      	adds	r3, #4

080021ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b0:	d3f9      	bcc.n	80021a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b2:	4a0a      	ldr	r2, [pc, #40]	@ (80021dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80021b4:	4c0a      	ldr	r4, [pc, #40]	@ (80021e0 <LoopForever+0x16>)
  movs r3, #0
 80021b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b8:	e001      	b.n	80021be <LoopFillZerobss>

080021ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021bc:	3204      	adds	r2, #4

080021be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c0:	d3fb      	bcc.n	80021ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021c2:	f00b ff43 	bl	800e04c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021c6:	f7fe ff51 	bl	800106c <main>

080021ca <LoopForever>:

LoopForever:
    b LoopForever
 80021ca:	e7fe      	b.n	80021ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d4:	20000a6c 	.word	0x20000a6c
  ldr r2, =_sidata
 80021d8:	0801da68 	.word	0x0801da68
  ldr r2, =_sbss
 80021dc:	20000a6c 	.word	0x20000a6c
  ldr r4, =_ebss
 80021e0:	200034f4 	.word	0x200034f4

080021e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021e4:	e7fe      	b.n	80021e4 <ADC1_2_IRQHandler>
	...

080021e8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	@ 0x28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80021f0:	4b27      	ldr	r3, [pc, #156]	@ (8002290 <I2Cx_MspInit+0xa8>)
 80021f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f4:	4a26      	ldr	r2, [pc, #152]	@ (8002290 <I2Cx_MspInit+0xa8>)
 80021f6:	f043 0302 	orr.w	r3, r3, #2
 80021fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021fc:	4b24      	ldr	r3, [pc, #144]	@ (8002290 <I2Cx_MspInit+0xa8>)
 80021fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002208:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800220c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800220e:	2312      	movs	r3, #18
 8002210:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002212:	2301      	movs	r3, #1
 8002214:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002216:	2303      	movs	r3, #3
 8002218:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800221a:	2304      	movs	r3, #4
 800221c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800221e:	f107 0314 	add.w	r3, r7, #20
 8002222:	4619      	mov	r1, r3
 8002224:	481b      	ldr	r0, [pc, #108]	@ (8002294 <I2Cx_MspInit+0xac>)
 8002226:	f000 fe43 	bl	8002eb0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	4619      	mov	r1, r3
 8002230:	4818      	ldr	r0, [pc, #96]	@ (8002294 <I2Cx_MspInit+0xac>)
 8002232:	f000 fe3d 	bl	8002eb0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002236:	4b16      	ldr	r3, [pc, #88]	@ (8002290 <I2Cx_MspInit+0xa8>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223a:	4a15      	ldr	r2, [pc, #84]	@ (8002290 <I2Cx_MspInit+0xa8>)
 800223c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002240:	6593      	str	r3, [r2, #88]	@ 0x58
 8002242:	4b13      	ldr	r3, [pc, #76]	@ (8002290 <I2Cx_MspInit+0xa8>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800224e:	4b10      	ldr	r3, [pc, #64]	@ (8002290 <I2Cx_MspInit+0xa8>)
 8002250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002252:	4a0f      	ldr	r2, [pc, #60]	@ (8002290 <I2Cx_MspInit+0xa8>)
 8002254:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002258:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800225a:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <I2Cx_MspInit+0xa8>)
 800225c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800225e:	4a0c      	ldr	r2, [pc, #48]	@ (8002290 <I2Cx_MspInit+0xa8>)
 8002260:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002264:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	210f      	movs	r1, #15
 800226a:	2021      	movs	r0, #33	@ 0x21
 800226c:	f000 fbeb 	bl	8002a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002270:	2021      	movs	r0, #33	@ 0x21
 8002272:	f000 fc04 	bl	8002a7e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	210f      	movs	r1, #15
 800227a:	2022      	movs	r0, #34	@ 0x22
 800227c:	f000 fbe3 	bl	8002a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002280:	2022      	movs	r0, #34	@ 0x22
 8002282:	f000 fbfc 	bl	8002a7e <HAL_NVIC_EnableIRQ>
}
 8002286:	bf00      	nop
 8002288:	3728      	adds	r7, #40	@ 0x28
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
 8002294:	48000400 	.word	0x48000400

08002298 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a12      	ldr	r2, [pc, #72]	@ (80022ec <I2Cx_Init+0x54>)
 80022a4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a11      	ldr	r2, [pc, #68]	@ (80022f0 <I2Cx_Init+0x58>)
 80022aa:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ff89 	bl	80021e8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f001 f8c3 	bl	8003462 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80022dc:	2100      	movs	r1, #0
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f001 fe7a 	bl	8003fd8 <HAL_I2CEx_ConfigAnalogFilter>
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40005800 	.word	0x40005800
 80022f0:	00702681 	.word	0x00702681

080022f4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	@ 0x28
 80022f8:	af04      	add	r7, sp, #16
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	4608      	mov	r0, r1
 80022fe:	4611      	mov	r1, r2
 8002300:	461a      	mov	r2, r3
 8002302:	4603      	mov	r3, r0
 8002304:	72fb      	strb	r3, [r7, #11]
 8002306:	460b      	mov	r3, r1
 8002308:	813b      	strh	r3, [r7, #8]
 800230a:	4613      	mov	r3, r2
 800230c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002312:	7afb      	ldrb	r3, [r7, #11]
 8002314:	b299      	uxth	r1, r3
 8002316:	88f8      	ldrh	r0, [r7, #6]
 8002318:	893a      	ldrh	r2, [r7, #8]
 800231a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800231e:	9302      	str	r3, [sp, #8]
 8002320:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	4603      	mov	r3, r0
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f001 fa78 	bl	8003820 <HAL_I2C_Mem_Read>
 8002330:	4603      	mov	r3, r0
 8002332:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002334:	7dfb      	ldrb	r3, [r7, #23]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d004      	beq.n	8002344 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800233a:	7afb      	ldrb	r3, [r7, #11]
 800233c:	4619      	mov	r1, r3
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f832 	bl	80023a8 <I2Cx_Error>
  }
  return status;
 8002344:	7dfb      	ldrb	r3, [r7, #23]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b08a      	sub	sp, #40	@ 0x28
 8002352:	af04      	add	r7, sp, #16
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	4608      	mov	r0, r1
 8002358:	4611      	mov	r1, r2
 800235a:	461a      	mov	r2, r3
 800235c:	4603      	mov	r3, r0
 800235e:	72fb      	strb	r3, [r7, #11]
 8002360:	460b      	mov	r3, r1
 8002362:	813b      	strh	r3, [r7, #8]
 8002364:	4613      	mov	r3, r2
 8002366:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800236c:	7afb      	ldrb	r3, [r7, #11]
 800236e:	b299      	uxth	r1, r3
 8002370:	88f8      	ldrh	r0, [r7, #6]
 8002372:	893a      	ldrh	r2, [r7, #8]
 8002374:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002378:	9302      	str	r3, [sp, #8]
 800237a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800237c:	9301      	str	r3, [sp, #4]
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	4603      	mov	r3, r0
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f001 f937 	bl	80035f8 <HAL_I2C_Mem_Write>
 800238a:	4603      	mov	r3, r0
 800238c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800238e:	7dfb      	ldrb	r3, [r7, #23]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002394:	7afb      	ldrb	r3, [r7, #11]
 8002396:	4619      	mov	r1, r3
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f805 	bl	80023a8 <I2Cx_Error>
  }
  return status;
 800239e:	7dfb      	ldrb	r3, [r7, #23]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f001 f8ef 	bl	8003598 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ff6c 	bl	8002298 <I2Cx_Init>
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80023cc:	4802      	ldr	r0, [pc, #8]	@ (80023d8 <SENSOR_IO_Init+0x10>)
 80023ce:	f7ff ff63 	bl	8002298 <I2Cx_Init>
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20001970 	.word	0x20001970

080023dc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
 80023e6:	460b      	mov	r3, r1
 80023e8:	71bb      	strb	r3, [r7, #6]
 80023ea:	4613      	mov	r3, r2
 80023ec:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80023ee:	79bb      	ldrb	r3, [r7, #6]
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	79f9      	ldrb	r1, [r7, #7]
 80023f4:	2301      	movs	r3, #1
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	1d7b      	adds	r3, r7, #5
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2301      	movs	r3, #1
 80023fe:	4803      	ldr	r0, [pc, #12]	@ (800240c <SENSOR_IO_Write+0x30>)
 8002400:	f7ff ffa5 	bl	800234e <I2Cx_WriteMultiple>
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20001970 	.word	0x20001970

08002410 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af02      	add	r7, sp, #8
 8002416:	4603      	mov	r3, r0
 8002418:	460a      	mov	r2, r1
 800241a:	71fb      	strb	r3, [r7, #7]
 800241c:	4613      	mov	r3, r2
 800241e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002424:	79bb      	ldrb	r3, [r7, #6]
 8002426:	b29a      	uxth	r2, r3
 8002428:	79f9      	ldrb	r1, [r7, #7]
 800242a:	2301      	movs	r3, #1
 800242c:	9301      	str	r3, [sp, #4]
 800242e:	f107 030f 	add.w	r3, r7, #15
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	2301      	movs	r3, #1
 8002436:	4804      	ldr	r0, [pc, #16]	@ (8002448 <SENSOR_IO_Read+0x38>)
 8002438:	f7ff ff5c 	bl	80022f4 <I2Cx_ReadMultiple>

  return read_value;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20001970 	.word	0x20001970

0800244c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af02      	add	r7, sp, #8
 8002452:	603a      	str	r2, [r7, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
 800245a:	460b      	mov	r3, r1
 800245c:	71bb      	strb	r3, [r7, #6]
 800245e:	4613      	mov	r3, r2
 8002460:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002462:	79bb      	ldrb	r3, [r7, #6]
 8002464:	b29a      	uxth	r2, r3
 8002466:	79f9      	ldrb	r1, [r7, #7]
 8002468:	88bb      	ldrh	r3, [r7, #4]
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2301      	movs	r3, #1
 8002472:	4804      	ldr	r0, [pc, #16]	@ (8002484 <SENSOR_IO_ReadMultiple+0x38>)
 8002474:	f7ff ff3e 	bl	80022f4 <I2Cx_ReadMultiple>
 8002478:	4603      	mov	r3, r0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20001970 	.word	0x20001970

08002488 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002492:	2300      	movs	r3, #0
 8002494:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002496:	4b19      	ldr	r3, [pc, #100]	@ (80024fc <BSP_ACCELERO_Init+0x74>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	4798      	blx	r3
 800249c:	4603      	mov	r3, r0
 800249e:	2b6a      	cmp	r3, #106	@ 0x6a
 80024a0:	d002      	beq.n	80024a8 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
 80024a6:	e024      	b.n	80024f2 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80024a8:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <BSP_ACCELERO_Init+0x78>)
 80024aa:	4a14      	ldr	r2, [pc, #80]	@ (80024fc <BSP_ACCELERO_Init+0x74>)
 80024ac:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80024ae:	2330      	movs	r3, #48	@ 0x30
 80024b0:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80024b6:	2300      	movs	r3, #0
 80024b8:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80024ba:	2340      	movs	r3, #64	@ 0x40
 80024bc:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80024c6:	797a      	ldrb	r2, [r7, #5]
 80024c8:	7abb      	ldrb	r3, [r7, #10]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80024d0:	7a3b      	ldrb	r3, [r7, #8]
 80024d2:	f043 0304 	orr.w	r3, r3, #4
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	021b      	lsls	r3, r3, #8
 80024da:	b21a      	sxth	r2, r3
 80024dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	b21b      	sxth	r3, r3
 80024e4:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80024e6:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <BSP_ACCELERO_Init+0x78>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	89ba      	ldrh	r2, [r7, #12]
 80024ee:	4610      	mov	r0, r2
 80024f0:	4798      	blx	r3
  }  

  return ret;
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20000010 	.word	0x20000010
 8002500:	200019c4 	.word	0x200019c4

08002504 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 800250c:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d009      	beq.n	8002528 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002514:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	2b00      	cmp	r3, #0
 800251c:	d004      	beq.n	8002528 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800251e:	4b04      	ldr	r3, [pc, #16]	@ (8002530 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	4798      	blx	r3
    }
  }
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	200019c4 	.word	0x200019c4

08002534 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002542:	2110      	movs	r1, #16
 8002544:	20d4      	movs	r0, #212	@ 0xd4
 8002546:	f7ff ff63 	bl	8002410 <SENSOR_IO_Read>
 800254a:	4603      	mov	r3, r0
 800254c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002552:	7bbb      	ldrb	r3, [r7, #14]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800255a:	7bba      	ldrb	r2, [r7, #14]
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	4313      	orrs	r3, r2
 8002560:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002562:	7bbb      	ldrb	r3, [r7, #14]
 8002564:	461a      	mov	r2, r3
 8002566:	2110      	movs	r1, #16
 8002568:	20d4      	movs	r0, #212	@ 0xd4
 800256a:	f7ff ff37 	bl	80023dc <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800256e:	2112      	movs	r1, #18
 8002570:	20d4      	movs	r0, #212	@ 0xd4
 8002572:	f7ff ff4d 	bl	8002410 <SENSOR_IO_Read>
 8002576:	4603      	mov	r3, r0
 8002578:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800257a:	88fb      	ldrh	r3, [r7, #6]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	b29b      	uxth	r3, r3
 8002580:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002582:	7bbb      	ldrb	r3, [r7, #14]
 8002584:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8002588:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800258a:	7bba      	ldrb	r2, [r7, #14]
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	4313      	orrs	r3, r2
 8002590:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002592:	7bbb      	ldrb	r3, [r7, #14]
 8002594:	461a      	mov	r2, r3
 8002596:	2112      	movs	r1, #18
 8002598:	20d4      	movs	r0, #212	@ 0xd4
 800259a:	f7ff ff1f 	bl	80023dc <SENSOR_IO_Write>
}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80025ac:	2300      	movs	r3, #0
 80025ae:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80025b0:	2110      	movs	r1, #16
 80025b2:	20d4      	movs	r0, #212	@ 0xd4
 80025b4:	f7ff ff2c 	bl	8002410 <SENSOR_IO_Read>
 80025b8:	4603      	mov	r3, r0
 80025ba:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	461a      	mov	r2, r3
 80025c8:	2110      	movs	r1, #16
 80025ca:	20d4      	movs	r0, #212	@ 0xd4
 80025cc:	f7ff ff06 	bl	80023dc <SENSOR_IO_Write>
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80025dc:	f7ff fef4 	bl	80023c8 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80025e0:	210f      	movs	r1, #15
 80025e2:	20d4      	movs	r0, #212	@ 0xd4
 80025e4:	f7ff ff14 	bl	8002410 <SENSOR_IO_Read>
 80025e8:	4603      	mov	r3, r0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	bd80      	pop	{r7, pc}

080025ee <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	4603      	mov	r3, r0
 80025f6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80025f8:	2300      	movs	r3, #0
 80025fa:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80025fc:	2115      	movs	r1, #21
 80025fe:	20d4      	movs	r0, #212	@ 0xd4
 8002600:	f7ff ff06 	bl	8002410 <SENSOR_IO_Read>
 8002604:	4603      	mov	r3, r0
 8002606:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	f023 0310 	bic.w	r3, r3, #16
 800260e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002610:	88fb      	ldrh	r3, [r7, #6]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	f043 0310 	orr.w	r3, r3, #16
 800261c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	461a      	mov	r2, r3
 8002622:	2115      	movs	r1, #21
 8002624:	20d4      	movs	r0, #212	@ 0xd4
 8002626:	f7ff fed9 	bl	80023dc <SENSOR_IO_Write>
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800263c:	2300      	movs	r3, #0
 800263e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002640:	2300      	movs	r3, #0
 8002642:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800264a:	2110      	movs	r1, #16
 800264c:	20d4      	movs	r0, #212	@ 0xd4
 800264e:	f7ff fedf 	bl	8002410 <SENSOR_IO_Read>
 8002652:	4603      	mov	r3, r0
 8002654:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002656:	f107 0208 	add.w	r2, r7, #8
 800265a:	2306      	movs	r3, #6
 800265c:	2128      	movs	r1, #40	@ 0x28
 800265e:	20d4      	movs	r0, #212	@ 0xd4
 8002660:	f7ff fef4 	bl	800244c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002664:	2300      	movs	r3, #0
 8002666:	77fb      	strb	r3, [r7, #31]
 8002668:	e01a      	b.n	80026a0 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800266a:	7ffb      	ldrb	r3, [r7, #31]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	3301      	adds	r3, #1
 8002670:	3320      	adds	r3, #32
 8002672:	443b      	add	r3, r7
 8002674:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	b29b      	uxth	r3, r3
 800267c:	7ffa      	ldrb	r2, [r7, #31]
 800267e:	0052      	lsls	r2, r2, #1
 8002680:	3220      	adds	r2, #32
 8002682:	443a      	add	r2, r7
 8002684:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002688:	4413      	add	r3, r2
 800268a:	b29a      	uxth	r2, r3
 800268c:	7ffb      	ldrb	r3, [r7, #31]
 800268e:	b212      	sxth	r2, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	3320      	adds	r3, #32
 8002694:	443b      	add	r3, r7
 8002696:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800269a:	7ffb      	ldrb	r3, [r7, #31]
 800269c:	3301      	adds	r3, #1
 800269e:	77fb      	strb	r3, [r7, #31]
 80026a0:	7ffb      	ldrb	r3, [r7, #31]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d9e1      	bls.n	800266a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80026a6:	7dfb      	ldrb	r3, [r7, #23]
 80026a8:	f003 030c 	and.w	r3, r3, #12
 80026ac:	2b0c      	cmp	r3, #12
 80026ae:	d829      	bhi.n	8002704 <LSM6DSL_AccReadXYZ+0xd0>
 80026b0:	a201      	add	r2, pc, #4	@ (adr r2, 80026b8 <LSM6DSL_AccReadXYZ+0x84>)
 80026b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b6:	bf00      	nop
 80026b8:	080026ed 	.word	0x080026ed
 80026bc:	08002705 	.word	0x08002705
 80026c0:	08002705 	.word	0x08002705
 80026c4:	08002705 	.word	0x08002705
 80026c8:	080026ff 	.word	0x080026ff
 80026cc:	08002705 	.word	0x08002705
 80026d0:	08002705 	.word	0x08002705
 80026d4:	08002705 	.word	0x08002705
 80026d8:	080026f3 	.word	0x080026f3
 80026dc:	08002705 	.word	0x08002705
 80026e0:	08002705 	.word	0x08002705
 80026e4:	08002705 	.word	0x08002705
 80026e8:	080026f9 	.word	0x080026f9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80026ec:	4b18      	ldr	r3, [pc, #96]	@ (8002750 <LSM6DSL_AccReadXYZ+0x11c>)
 80026ee:	61bb      	str	r3, [r7, #24]
    break;
 80026f0:	e008      	b.n	8002704 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80026f2:	4b18      	ldr	r3, [pc, #96]	@ (8002754 <LSM6DSL_AccReadXYZ+0x120>)
 80026f4:	61bb      	str	r3, [r7, #24]
    break;
 80026f6:	e005      	b.n	8002704 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80026f8:	4b17      	ldr	r3, [pc, #92]	@ (8002758 <LSM6DSL_AccReadXYZ+0x124>)
 80026fa:	61bb      	str	r3, [r7, #24]
    break;
 80026fc:	e002      	b.n	8002704 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80026fe:	4b17      	ldr	r3, [pc, #92]	@ (800275c <LSM6DSL_AccReadXYZ+0x128>)
 8002700:	61bb      	str	r3, [r7, #24]
    break;    
 8002702:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002704:	2300      	movs	r3, #0
 8002706:	77fb      	strb	r3, [r7, #31]
 8002708:	e01a      	b.n	8002740 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800270a:	7ffb      	ldrb	r3, [r7, #31]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	3320      	adds	r3, #32
 8002710:	443b      	add	r3, r7
 8002712:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800271e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002726:	7ffb      	ldrb	r3, [r7, #31]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002732:	ee17 2a90 	vmov	r2, s15
 8002736:	b212      	sxth	r2, r2
 8002738:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800273a:	7ffb      	ldrb	r3, [r7, #31]
 800273c:	3301      	adds	r3, #1
 800273e:	77fb      	strb	r3, [r7, #31]
 8002740:	7ffb      	ldrb	r3, [r7, #31]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d9e1      	bls.n	800270a <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8002746:	bf00      	nop
 8002748:	bf00      	nop
 800274a:	3720      	adds	r7, #32
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	3d79db23 	.word	0x3d79db23
 8002754:	3df9db23 	.word	0x3df9db23
 8002758:	3e79db23 	.word	0x3e79db23
 800275c:	3ef9db23 	.word	0x3ef9db23

08002760 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800276a:	2003      	movs	r0, #3
 800276c:	f000 f960 	bl	8002a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002770:	200f      	movs	r0, #15
 8002772:	f000 f80d 	bl	8002790 <HAL_InitTick>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	71fb      	strb	r3, [r7, #7]
 8002780:	e001      	b.n	8002786 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002782:	f7ff f9bd 	bl	8001b00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002786:	79fb      	ldrb	r3, [r7, #7]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800279c:	4b17      	ldr	r3, [pc, #92]	@ (80027fc <HAL_InitTick+0x6c>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d023      	beq.n	80027ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027a4:	4b16      	ldr	r3, [pc, #88]	@ (8002800 <HAL_InitTick+0x70>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b14      	ldr	r3, [pc, #80]	@ (80027fc <HAL_InitTick+0x6c>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	4619      	mov	r1, r3
 80027ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f96d 	bl	8002a9a <HAL_SYSTICK_Config>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10f      	bne.n	80027e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b0f      	cmp	r3, #15
 80027ca:	d809      	bhi.n	80027e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027cc:	2200      	movs	r2, #0
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295
 80027d4:	f000 f937 	bl	8002a46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002804 <HAL_InitTick+0x74>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	e007      	b.n	80027f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
 80027e4:	e004      	b.n	80027f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	73fb      	strb	r3, [r7, #15]
 80027ea:	e001      	b.n	80027f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000048 	.word	0x20000048
 8002800:	2000000c 	.word	0x2000000c
 8002804:	20000044 	.word	0x20000044

08002808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800280c:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <HAL_IncTick+0x20>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	4b06      	ldr	r3, [pc, #24]	@ (800282c <HAL_IncTick+0x24>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4413      	add	r3, r2
 8002818:	4a04      	ldr	r2, [pc, #16]	@ (800282c <HAL_IncTick+0x24>)
 800281a:	6013      	str	r3, [r2, #0]
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	20000048 	.word	0x20000048
 800282c:	200019c8 	.word	0x200019c8

08002830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return uwTick;
 8002834:	4b03      	ldr	r3, [pc, #12]	@ (8002844 <HAL_GetTick+0x14>)
 8002836:	681b      	ldr	r3, [r3, #0]
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	200019c8 	.word	0x200019c8

08002848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002850:	f7ff ffee 	bl	8002830 <HAL_GetTick>
 8002854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d005      	beq.n	800286e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002862:	4b0a      	ldr	r3, [pc, #40]	@ (800288c <HAL_Delay+0x44>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4413      	add	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800286e:	bf00      	nop
 8002870:	f7ff ffde 	bl	8002830 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	429a      	cmp	r2, r3
 800287e:	d8f7      	bhi.n	8002870 <HAL_Delay+0x28>
  {
  }
}
 8002880:	bf00      	nop
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000048 	.word	0x20000048

08002890 <__NVIC_SetPriorityGrouping>:
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a0:	4b0c      	ldr	r3, [pc, #48]	@ (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028ac:	4013      	ands	r3, r2
 80028ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c2:	4a04      	ldr	r2, [pc, #16]	@ (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	60d3      	str	r3, [r2, #12]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_GetPriorityGrouping>:
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028dc:	4b04      	ldr	r3, [pc, #16]	@ (80028f0 <__NVIC_GetPriorityGrouping+0x18>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	f003 0307 	and.w	r3, r3, #7
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_EnableIRQ>:
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	2b00      	cmp	r3, #0
 8002904:	db0b      	blt.n	800291e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	f003 021f 	and.w	r2, r3, #31
 800290c:	4907      	ldr	r1, [pc, #28]	@ (800292c <__NVIC_EnableIRQ+0x38>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2001      	movs	r0, #1
 8002916:	fa00 f202 	lsl.w	r2, r0, r2
 800291a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	e000e100 	.word	0xe000e100

08002930 <__NVIC_SetPriority>:
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002940:	2b00      	cmp	r3, #0
 8002942:	db0a      	blt.n	800295a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	b2da      	uxtb	r2, r3
 8002948:	490c      	ldr	r1, [pc, #48]	@ (800297c <__NVIC_SetPriority+0x4c>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	0112      	lsls	r2, r2, #4
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	440b      	add	r3, r1
 8002954:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002958:	e00a      	b.n	8002970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4908      	ldr	r1, [pc, #32]	@ (8002980 <__NVIC_SetPriority+0x50>)
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	3b04      	subs	r3, #4
 8002968:	0112      	lsls	r2, r2, #4
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	440b      	add	r3, r1
 800296e:	761a      	strb	r2, [r3, #24]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000e100 	.word	0xe000e100
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <NVIC_EncodePriority>:
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	@ 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f1c3 0307 	rsb	r3, r3, #7
 800299e:	2b04      	cmp	r3, #4
 80029a0:	bf28      	it	cs
 80029a2:	2304      	movcs	r3, #4
 80029a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3304      	adds	r3, #4
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d902      	bls.n	80029b4 <NVIC_EncodePriority+0x30>
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3b03      	subs	r3, #3
 80029b2:	e000      	b.n	80029b6 <NVIC_EncodePriority+0x32>
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	f04f 32ff 	mov.w	r2, #4294967295
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43da      	mvns	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	401a      	ands	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029cc:	f04f 31ff 	mov.w	r1, #4294967295
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	43d9      	mvns	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029dc:	4313      	orrs	r3, r2
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3724      	adds	r7, #36	@ 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <SysTick_Config>:
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029fc:	d301      	bcc.n	8002a02 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80029fe:	2301      	movs	r3, #1
 8002a00:	e00f      	b.n	8002a22 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a02:	4a0a      	ldr	r2, [pc, #40]	@ (8002a2c <SysTick_Config+0x40>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a0a:	210f      	movs	r1, #15
 8002a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a10:	f7ff ff8e 	bl	8002930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a14:	4b05      	ldr	r3, [pc, #20]	@ (8002a2c <SysTick_Config+0x40>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a1a:	4b04      	ldr	r3, [pc, #16]	@ (8002a2c <SysTick_Config+0x40>)
 8002a1c:	2207      	movs	r2, #7
 8002a1e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	e000e010 	.word	0xe000e010

08002a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff ff29 	bl	8002890 <__NVIC_SetPriorityGrouping>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b086      	sub	sp, #24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a58:	f7ff ff3e 	bl	80028d8 <__NVIC_GetPriorityGrouping>
 8002a5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	6978      	ldr	r0, [r7, #20]
 8002a64:	f7ff ff8e 	bl	8002984 <NVIC_EncodePriority>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff5d 	bl	8002930 <__NVIC_SetPriority>
}
 8002a76:	bf00      	nop
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff31 	bl	80028f4 <__NVIC_EnableIRQ>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff ffa2 	bl	80029ec <SysTick_Config>
 8002aa8:	4603      	mov	r3, r0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e054      	b.n	8002b70 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	7f5b      	ldrb	r3, [r3, #29]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d105      	bne.n	8002adc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff f83a 	bl	8001b50 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	791b      	ldrb	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10c      	bne.n	8002b04 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a22      	ldr	r2, [pc, #136]	@ (8002b78 <HAL_CRC_Init+0xc4>)
 8002af0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0218 	bic.w	r2, r2, #24
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	e00c      	b.n	8002b1e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6899      	ldr	r1, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f834 	bl	8002b7c <HAL_CRCEx_Polynomial_Set>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e028      	b.n	8002b70 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	795b      	ldrb	r3, [r3, #5]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d105      	bne.n	8002b32 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2e:	611a      	str	r2, [r3, #16]
 8002b30:	e004      	b.n	8002b3c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6912      	ldr	r2, [r2, #16]
 8002b3a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699a      	ldr	r2, [r3, #24]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	04c11db7 	.word	0x04c11db7

08002b7c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002b8c:	231f      	movs	r3, #31
 8002b8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d102      	bne.n	8002ba0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	75fb      	strb	r3, [r7, #23]
 8002b9e:	e063      	b.n	8002c68 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002ba0:	bf00      	nop
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1e5a      	subs	r2, r3, #1
 8002ba6:	613a      	str	r2, [r7, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d009      	beq.n	8002bc0 <HAL_CRCEx_Polynomial_Set+0x44>
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0f0      	beq.n	8002ba2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b18      	cmp	r3, #24
 8002bc4:	d846      	bhi.n	8002c54 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8002bcc <HAL_CRCEx_Polynomial_Set+0x50>)
 8002bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bcc:	08002c5b 	.word	0x08002c5b
 8002bd0:	08002c55 	.word	0x08002c55
 8002bd4:	08002c55 	.word	0x08002c55
 8002bd8:	08002c55 	.word	0x08002c55
 8002bdc:	08002c55 	.word	0x08002c55
 8002be0:	08002c55 	.word	0x08002c55
 8002be4:	08002c55 	.word	0x08002c55
 8002be8:	08002c55 	.word	0x08002c55
 8002bec:	08002c49 	.word	0x08002c49
 8002bf0:	08002c55 	.word	0x08002c55
 8002bf4:	08002c55 	.word	0x08002c55
 8002bf8:	08002c55 	.word	0x08002c55
 8002bfc:	08002c55 	.word	0x08002c55
 8002c00:	08002c55 	.word	0x08002c55
 8002c04:	08002c55 	.word	0x08002c55
 8002c08:	08002c55 	.word	0x08002c55
 8002c0c:	08002c3d 	.word	0x08002c3d
 8002c10:	08002c55 	.word	0x08002c55
 8002c14:	08002c55 	.word	0x08002c55
 8002c18:	08002c55 	.word	0x08002c55
 8002c1c:	08002c55 	.word	0x08002c55
 8002c20:	08002c55 	.word	0x08002c55
 8002c24:	08002c55 	.word	0x08002c55
 8002c28:	08002c55 	.word	0x08002c55
 8002c2c:	08002c31 	.word	0x08002c31
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	2b06      	cmp	r3, #6
 8002c34:	d913      	bls.n	8002c5e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002c3a:	e010      	b.n	8002c5e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	2b07      	cmp	r3, #7
 8002c40:	d90f      	bls.n	8002c62 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002c46:	e00c      	b.n	8002c62 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2b0f      	cmp	r3, #15
 8002c4c:	d90b      	bls.n	8002c66 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002c52:	e008      	b.n	8002c66 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	75fb      	strb	r3, [r7, #23]
        break;
 8002c58:	e006      	b.n	8002c68 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002c5a:	bf00      	nop
 8002c5c:	e004      	b.n	8002c68 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002c5e:	bf00      	nop
 8002c60:	e002      	b.n	8002c68 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002c62:	bf00      	nop
 8002c64:	e000      	b.n	8002c68 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002c66:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002c68:	7dfb      	ldrb	r3, [r7, #23]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10d      	bne.n	8002c8a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f023 0118 	bic.w	r1, r3, #24
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e0ac      	b.n	8002e04 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 f8b2 	bl	8002e18 <DFSDM_GetChannelFromInstance>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4a55      	ldr	r2, [pc, #340]	@ (8002e0c <HAL_DFSDM_ChannelInit+0x174>)
 8002cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e09f      	b.n	8002e04 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7fe ff63 	bl	8001b90 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002cca:	4b51      	ldr	r3, [pc, #324]	@ (8002e10 <HAL_DFSDM_ChannelInit+0x178>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	4a4f      	ldr	r2, [pc, #316]	@ (8002e10 <HAL_DFSDM_ChannelInit+0x178>)
 8002cd2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002cd4:	4b4e      	ldr	r3, [pc, #312]	@ (8002e10 <HAL_DFSDM_ChannelInit+0x178>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d125      	bne.n	8002d28 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8002e14 <HAL_DFSDM_ChannelInit+0x17c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a4c      	ldr	r2, [pc, #304]	@ (8002e14 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ce2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ce6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002ce8:	4b4a      	ldr	r3, [pc, #296]	@ (8002e14 <HAL_DFSDM_ChannelInit+0x17c>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	4948      	ldr	r1, [pc, #288]	@ (8002e14 <HAL_DFSDM_ChannelInit+0x17c>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002cf6:	4b47      	ldr	r3, [pc, #284]	@ (8002e14 <HAL_DFSDM_ChannelInit+0x17c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a46      	ldr	r2, [pc, #280]	@ (8002e14 <HAL_DFSDM_ChannelInit+0x17c>)
 8002cfc:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8002d00:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	791b      	ldrb	r3, [r3, #4]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d108      	bne.n	8002d1c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002d0a:	4b42      	ldr	r3, [pc, #264]	@ (8002e14 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	041b      	lsls	r3, r3, #16
 8002d16:	493f      	ldr	r1, [pc, #252]	@ (8002e14 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002d1c:	4b3d      	ldr	r3, [pc, #244]	@ (8002e14 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a3c      	ldr	r2, [pc, #240]	@ (8002e14 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d26:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8002d36:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6819      	ldr	r1, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002d46:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002d4c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 020f 	bic.w	r2, r2, #15
 8002d64:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6819      	ldr	r1, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8002d8c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6899      	ldr	r1, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f002 0207 	and.w	r2, r2, #7
 8002db8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6859      	ldr	r1, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dca:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002de4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 f810 	bl	8002e18 <DFSDM_GetChannelFromInstance>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4904      	ldr	r1, [pc, #16]	@ (8002e0c <HAL_DFSDM_ChannelInit+0x174>)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	200019d0 	.word	0x200019d0
 8002e10:	200019cc 	.word	0x200019cc
 8002e14:	40016000 	.word	0x40016000

08002e18 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a1c      	ldr	r2, [pc, #112]	@ (8002e94 <DFSDM_GetChannelFromInstance+0x7c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d102      	bne.n	8002e2e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	e02b      	b.n	8002e86 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a19      	ldr	r2, [pc, #100]	@ (8002e98 <DFSDM_GetChannelFromInstance+0x80>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d102      	bne.n	8002e3c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002e36:	2301      	movs	r3, #1
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	e024      	b.n	8002e86 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a17      	ldr	r2, [pc, #92]	@ (8002e9c <DFSDM_GetChannelFromInstance+0x84>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d102      	bne.n	8002e4a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002e44:	2302      	movs	r3, #2
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	e01d      	b.n	8002e86 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a14      	ldr	r2, [pc, #80]	@ (8002ea0 <DFSDM_GetChannelFromInstance+0x88>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d102      	bne.n	8002e58 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002e52:	2304      	movs	r3, #4
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	e016      	b.n	8002e86 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ea4 <DFSDM_GetChannelFromInstance+0x8c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d102      	bne.n	8002e66 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002e60:	2305      	movs	r3, #5
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	e00f      	b.n	8002e86 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a0f      	ldr	r2, [pc, #60]	@ (8002ea8 <DFSDM_GetChannelFromInstance+0x90>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d102      	bne.n	8002e74 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002e6e:	2306      	movs	r3, #6
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	e008      	b.n	8002e86 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a0d      	ldr	r2, [pc, #52]	@ (8002eac <DFSDM_GetChannelFromInstance+0x94>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d102      	bne.n	8002e82 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002e7c:	2307      	movs	r3, #7
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	e001      	b.n	8002e86 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002e82:	2303      	movs	r3, #3
 8002e84:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002e86:	68fb      	ldr	r3, [r7, #12]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	40016000 	.word	0x40016000
 8002e98:	40016020 	.word	0x40016020
 8002e9c:	40016040 	.word	0x40016040
 8002ea0:	40016080 	.word	0x40016080
 8002ea4:	400160a0 	.word	0x400160a0
 8002ea8:	400160c0 	.word	0x400160c0
 8002eac:	400160e0 	.word	0x400160e0

08002eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ebe:	e17f      	b.n	80031c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 8171 	beq.w	80031ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d005      	beq.n	8002ef0 <HAL_GPIO_Init+0x40>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d130      	bne.n	8002f52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	2203      	movs	r2, #3
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f26:	2201      	movs	r2, #1
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4013      	ands	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	091b      	lsrs	r3, r3, #4
 8002f3c:	f003 0201 	and.w	r2, r3, #1
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d118      	bne.n	8002f90 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002f64:	2201      	movs	r2, #1
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4013      	ands	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	08db      	lsrs	r3, r3, #3
 8002f7a:	f003 0201 	and.w	r2, r3, #1
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d017      	beq.n	8002fcc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d123      	bne.n	8003020 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	08da      	lsrs	r2, r3, #3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3208      	adds	r2, #8
 8002fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	220f      	movs	r2, #15
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	08da      	lsrs	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3208      	adds	r2, #8
 800301a:	6939      	ldr	r1, [r7, #16]
 800301c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	2203      	movs	r2, #3
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0203 	and.w	r2, r3, #3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80ac 	beq.w	80031ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003062:	4b5f      	ldr	r3, [pc, #380]	@ (80031e0 <HAL_GPIO_Init+0x330>)
 8003064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003066:	4a5e      	ldr	r2, [pc, #376]	@ (80031e0 <HAL_GPIO_Init+0x330>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6613      	str	r3, [r2, #96]	@ 0x60
 800306e:	4b5c      	ldr	r3, [pc, #368]	@ (80031e0 <HAL_GPIO_Init+0x330>)
 8003070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	60bb      	str	r3, [r7, #8]
 8003078:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800307a:	4a5a      	ldr	r2, [pc, #360]	@ (80031e4 <HAL_GPIO_Init+0x334>)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	089b      	lsrs	r3, r3, #2
 8003080:	3302      	adds	r3, #2
 8003082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003086:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	220f      	movs	r2, #15
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030a4:	d025      	beq.n	80030f2 <HAL_GPIO_Init+0x242>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a4f      	ldr	r2, [pc, #316]	@ (80031e8 <HAL_GPIO_Init+0x338>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01f      	beq.n	80030ee <HAL_GPIO_Init+0x23e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a4e      	ldr	r2, [pc, #312]	@ (80031ec <HAL_GPIO_Init+0x33c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d019      	beq.n	80030ea <HAL_GPIO_Init+0x23a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4d      	ldr	r2, [pc, #308]	@ (80031f0 <HAL_GPIO_Init+0x340>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_GPIO_Init+0x236>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4c      	ldr	r2, [pc, #304]	@ (80031f4 <HAL_GPIO_Init+0x344>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00d      	beq.n	80030e2 <HAL_GPIO_Init+0x232>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4b      	ldr	r2, [pc, #300]	@ (80031f8 <HAL_GPIO_Init+0x348>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <HAL_GPIO_Init+0x22e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4a      	ldr	r2, [pc, #296]	@ (80031fc <HAL_GPIO_Init+0x34c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_GPIO_Init+0x22a>
 80030d6:	2306      	movs	r3, #6
 80030d8:	e00c      	b.n	80030f4 <HAL_GPIO_Init+0x244>
 80030da:	2307      	movs	r3, #7
 80030dc:	e00a      	b.n	80030f4 <HAL_GPIO_Init+0x244>
 80030de:	2305      	movs	r3, #5
 80030e0:	e008      	b.n	80030f4 <HAL_GPIO_Init+0x244>
 80030e2:	2304      	movs	r3, #4
 80030e4:	e006      	b.n	80030f4 <HAL_GPIO_Init+0x244>
 80030e6:	2303      	movs	r3, #3
 80030e8:	e004      	b.n	80030f4 <HAL_GPIO_Init+0x244>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e002      	b.n	80030f4 <HAL_GPIO_Init+0x244>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <HAL_GPIO_Init+0x244>
 80030f2:	2300      	movs	r3, #0
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	f002 0203 	and.w	r2, r2, #3
 80030fa:	0092      	lsls	r2, r2, #2
 80030fc:	4093      	lsls	r3, r2
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003104:	4937      	ldr	r1, [pc, #220]	@ (80031e4 <HAL_GPIO_Init+0x334>)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	089b      	lsrs	r3, r3, #2
 800310a:	3302      	adds	r3, #2
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003112:	4b3b      	ldr	r3, [pc, #236]	@ (8003200 <HAL_GPIO_Init+0x350>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	43db      	mvns	r3, r3
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4013      	ands	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003136:	4a32      	ldr	r2, [pc, #200]	@ (8003200 <HAL_GPIO_Init+0x350>)
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800313c:	4b30      	ldr	r3, [pc, #192]	@ (8003200 <HAL_GPIO_Init+0x350>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	43db      	mvns	r3, r3
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003160:	4a27      	ldr	r2, [pc, #156]	@ (8003200 <HAL_GPIO_Init+0x350>)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003166:	4b26      	ldr	r3, [pc, #152]	@ (8003200 <HAL_GPIO_Init+0x350>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	43db      	mvns	r3, r3
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4013      	ands	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800318a:	4a1d      	ldr	r2, [pc, #116]	@ (8003200 <HAL_GPIO_Init+0x350>)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003190:	4b1b      	ldr	r3, [pc, #108]	@ (8003200 <HAL_GPIO_Init+0x350>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	43db      	mvns	r3, r3
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031b4:	4a12      	ldr	r2, [pc, #72]	@ (8003200 <HAL_GPIO_Init+0x350>)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	3301      	adds	r3, #1
 80031be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f47f ae78 	bne.w	8002ec0 <HAL_GPIO_Init+0x10>
  }
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	371c      	adds	r7, #28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40010000 	.word	0x40010000
 80031e8:	48000400 	.word	0x48000400
 80031ec:	48000800 	.word	0x48000800
 80031f0:	48000c00 	.word	0x48000c00
 80031f4:	48001000 	.word	0x48001000
 80031f8:	48001400 	.word	0x48001400
 80031fc:	48001800 	.word	0x48001800
 8003200:	40010400 	.word	0x40010400

08003204 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003212:	e0cd      	b.n	80033b0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003214:	2201      	movs	r2, #1
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	4013      	ands	r3, r2
 8003220:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80c0 	beq.w	80033aa <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800322a:	4a68      	ldr	r2, [pc, #416]	@ (80033cc <HAL_GPIO_DeInit+0x1c8>)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	089b      	lsrs	r3, r3, #2
 8003230:	3302      	adds	r3, #2
 8003232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003236:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	220f      	movs	r2, #15
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4013      	ands	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003252:	d025      	beq.n	80032a0 <HAL_GPIO_DeInit+0x9c>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a5e      	ldr	r2, [pc, #376]	@ (80033d0 <HAL_GPIO_DeInit+0x1cc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d01f      	beq.n	800329c <HAL_GPIO_DeInit+0x98>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a5d      	ldr	r2, [pc, #372]	@ (80033d4 <HAL_GPIO_DeInit+0x1d0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d019      	beq.n	8003298 <HAL_GPIO_DeInit+0x94>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a5c      	ldr	r2, [pc, #368]	@ (80033d8 <HAL_GPIO_DeInit+0x1d4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d013      	beq.n	8003294 <HAL_GPIO_DeInit+0x90>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a5b      	ldr	r2, [pc, #364]	@ (80033dc <HAL_GPIO_DeInit+0x1d8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00d      	beq.n	8003290 <HAL_GPIO_DeInit+0x8c>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a5a      	ldr	r2, [pc, #360]	@ (80033e0 <HAL_GPIO_DeInit+0x1dc>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d007      	beq.n	800328c <HAL_GPIO_DeInit+0x88>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a59      	ldr	r2, [pc, #356]	@ (80033e4 <HAL_GPIO_DeInit+0x1e0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d101      	bne.n	8003288 <HAL_GPIO_DeInit+0x84>
 8003284:	2306      	movs	r3, #6
 8003286:	e00c      	b.n	80032a2 <HAL_GPIO_DeInit+0x9e>
 8003288:	2307      	movs	r3, #7
 800328a:	e00a      	b.n	80032a2 <HAL_GPIO_DeInit+0x9e>
 800328c:	2305      	movs	r3, #5
 800328e:	e008      	b.n	80032a2 <HAL_GPIO_DeInit+0x9e>
 8003290:	2304      	movs	r3, #4
 8003292:	e006      	b.n	80032a2 <HAL_GPIO_DeInit+0x9e>
 8003294:	2303      	movs	r3, #3
 8003296:	e004      	b.n	80032a2 <HAL_GPIO_DeInit+0x9e>
 8003298:	2302      	movs	r3, #2
 800329a:	e002      	b.n	80032a2 <HAL_GPIO_DeInit+0x9e>
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <HAL_GPIO_DeInit+0x9e>
 80032a0:	2300      	movs	r3, #0
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	f002 0203 	and.w	r2, r2, #3
 80032a8:	0092      	lsls	r2, r2, #2
 80032aa:	4093      	lsls	r3, r2
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d132      	bne.n	8003318 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80032b2:	4b4d      	ldr	r3, [pc, #308]	@ (80033e8 <HAL_GPIO_DeInit+0x1e4>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	43db      	mvns	r3, r3
 80032ba:	494b      	ldr	r1, [pc, #300]	@ (80033e8 <HAL_GPIO_DeInit+0x1e4>)
 80032bc:	4013      	ands	r3, r2
 80032be:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80032c0:	4b49      	ldr	r3, [pc, #292]	@ (80033e8 <HAL_GPIO_DeInit+0x1e4>)
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	43db      	mvns	r3, r3
 80032c8:	4947      	ldr	r1, [pc, #284]	@ (80033e8 <HAL_GPIO_DeInit+0x1e4>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80032ce:	4b46      	ldr	r3, [pc, #280]	@ (80033e8 <HAL_GPIO_DeInit+0x1e4>)
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	4944      	ldr	r1, [pc, #272]	@ (80033e8 <HAL_GPIO_DeInit+0x1e4>)
 80032d8:	4013      	ands	r3, r2
 80032da:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80032dc:	4b42      	ldr	r3, [pc, #264]	@ (80033e8 <HAL_GPIO_DeInit+0x1e4>)
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	43db      	mvns	r3, r3
 80032e4:	4940      	ldr	r1, [pc, #256]	@ (80033e8 <HAL_GPIO_DeInit+0x1e4>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	220f      	movs	r2, #15
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80032fa:	4a34      	ldr	r2, [pc, #208]	@ (80033cc <HAL_GPIO_DeInit+0x1c8>)
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	3302      	adds	r3, #2
 8003302:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	43da      	mvns	r2, r3
 800330a:	4830      	ldr	r0, [pc, #192]	@ (80033cc <HAL_GPIO_DeInit+0x1c8>)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	089b      	lsrs	r3, r3, #2
 8003310:	400a      	ands	r2, r1
 8003312:	3302      	adds	r3, #2
 8003314:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	2103      	movs	r1, #3
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	08da      	lsrs	r2, r3, #3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3208      	adds	r2, #8
 8003334:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	220f      	movs	r2, #15
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	08d2      	lsrs	r2, r2, #3
 800334c:	4019      	ands	r1, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3208      	adds	r2, #8
 8003352:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	2103      	movs	r1, #3
 8003360:	fa01 f303 	lsl.w	r3, r1, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	401a      	ands	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	2101      	movs	r1, #1
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	fa01 f303 	lsl.w	r3, r1, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	401a      	ands	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	2103      	movs	r1, #3
 800338a:	fa01 f303 	lsl.w	r3, r1, r3
 800338e:	43db      	mvns	r3, r3
 8003390:	401a      	ands	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800339a:	2101      	movs	r1, #1
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	fa01 f303 	lsl.w	r3, r1, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	401a      	ands	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	3301      	adds	r3, #1
 80033ae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f47f af2b 	bne.w	8003214 <HAL_GPIO_DeInit+0x10>
  }
}
 80033be:	bf00      	nop
 80033c0:	bf00      	nop
 80033c2:	371c      	adds	r7, #28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	40010000 	.word	0x40010000
 80033d0:	48000400 	.word	0x48000400
 80033d4:	48000800 	.word	0x48000800
 80033d8:	48000c00 	.word	0x48000c00
 80033dc:	48001000 	.word	0x48001000
 80033e0:	48001400 	.word	0x48001400
 80033e4:	48001800 	.word	0x48001800
 80033e8:	40010400 	.word	0x40010400

080033ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	807b      	strh	r3, [r7, #2]
 80033f8:	4613      	mov	r3, r2
 80033fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033fc:	787b      	ldrb	r3, [r7, #1]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003402:	887a      	ldrh	r2, [r7, #2]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003408:	e002      	b.n	8003410 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800340a:	887a      	ldrh	r2, [r7, #2]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003426:	4b08      	ldr	r3, [pc, #32]	@ (8003448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003428:	695a      	ldr	r2, [r3, #20]
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	4013      	ands	r3, r2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d006      	beq.n	8003440 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003432:	4a05      	ldr	r2, [pc, #20]	@ (8003448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 f806 	bl	800344c <HAL_GPIO_EXTI_Callback>
  }
}
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40010400 	.word	0x40010400

0800344c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e08d      	b.n	8003590 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d106      	bne.n	800348e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7fe fbe5 	bl	8001c58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2224      	movs	r2, #36	@ 0x24
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0201 	bic.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034b2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034c2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d107      	bne.n	80034dc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034d8:	609a      	str	r2, [r3, #8]
 80034da:	e006      	b.n	80034ea <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80034e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d108      	bne.n	8003504 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	e007      	b.n	8003514 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003512:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6812      	ldr	r2, [r2, #0]
 800351e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003526:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003536:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69d9      	ldr	r1, [r3, #28]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1a      	ldr	r2, [r3, #32]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e021      	b.n	80035ee <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2224      	movs	r2, #36	@ 0x24
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fe fba6 	bl	8001d14 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	4608      	mov	r0, r1
 8003602:	4611      	mov	r1, r2
 8003604:	461a      	mov	r2, r3
 8003606:	4603      	mov	r3, r0
 8003608:	817b      	strh	r3, [r7, #10]
 800360a:	460b      	mov	r3, r1
 800360c:	813b      	strh	r3, [r7, #8]
 800360e:	4613      	mov	r3, r2
 8003610:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b20      	cmp	r3, #32
 800361c:	f040 80f9 	bne.w	8003812 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <HAL_I2C_Mem_Write+0x34>
 8003626:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003628:	2b00      	cmp	r3, #0
 800362a:	d105      	bne.n	8003638 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003632:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0ed      	b.n	8003814 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800363e:	2b01      	cmp	r3, #1
 8003640:	d101      	bne.n	8003646 <HAL_I2C_Mem_Write+0x4e>
 8003642:	2302      	movs	r3, #2
 8003644:	e0e6      	b.n	8003814 <HAL_I2C_Mem_Write+0x21c>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800364e:	f7ff f8ef 	bl	8002830 <HAL_GetTick>
 8003652:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	2319      	movs	r3, #25
 800365a:	2201      	movs	r2, #1
 800365c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fac3 	bl	8003bec <I2C_WaitOnFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0d1      	b.n	8003814 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2221      	movs	r2, #33	@ 0x21
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2240      	movs	r2, #64	@ 0x40
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a3a      	ldr	r2, [r7, #32]
 800368a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003690:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003698:	88f8      	ldrh	r0, [r7, #6]
 800369a:	893a      	ldrh	r2, [r7, #8]
 800369c:	8979      	ldrh	r1, [r7, #10]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	9301      	str	r3, [sp, #4]
 80036a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	4603      	mov	r3, r0
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 f9d3 	bl	8003a54 <I2C_RequestMemoryWrite>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0a9      	b.n	8003814 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2bff      	cmp	r3, #255	@ 0xff
 80036c8:	d90e      	bls.n	80036e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	22ff      	movs	r2, #255	@ 0xff
 80036ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	8979      	ldrh	r1, [r7, #10]
 80036d8:	2300      	movs	r3, #0
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 fc47 	bl	8003f74 <I2C_TransferConfig>
 80036e6:	e00f      	b.n	8003708 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	8979      	ldrh	r1, [r7, #10]
 80036fa:	2300      	movs	r3, #0
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 fc36 	bl	8003f74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fac6 	bl	8003c9e <I2C_WaitOnTXISFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e07b      	b.n	8003814 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	781a      	ldrb	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d034      	beq.n	80037c0 <HAL_I2C_Mem_Write+0x1c8>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800375a:	2b00      	cmp	r3, #0
 800375c:	d130      	bne.n	80037c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003764:	2200      	movs	r2, #0
 8003766:	2180      	movs	r1, #128	@ 0x80
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 fa3f 	bl	8003bec <I2C_WaitOnFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e04d      	b.n	8003814 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	2bff      	cmp	r3, #255	@ 0xff
 8003780:	d90e      	bls.n	80037a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	22ff      	movs	r2, #255	@ 0xff
 8003786:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378c:	b2da      	uxtb	r2, r3
 800378e:	8979      	ldrh	r1, [r7, #10]
 8003790:	2300      	movs	r3, #0
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 fbeb 	bl	8003f74 <I2C_TransferConfig>
 800379e:	e00f      	b.n	80037c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	8979      	ldrh	r1, [r7, #10]
 80037b2:	2300      	movs	r3, #0
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 fbda 	bl	8003f74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d19e      	bne.n	8003708 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 faac 	bl	8003d2c <I2C_WaitOnSTOPFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e01a      	b.n	8003814 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2220      	movs	r2, #32
 80037e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b0a      	ldr	r3, [pc, #40]	@ (800381c <HAL_I2C_Mem_Write+0x224>)
 80037f2:	400b      	ands	r3, r1
 80037f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	e000      	b.n	8003814 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003812:	2302      	movs	r3, #2
  }
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	fe00e800 	.word	0xfe00e800

08003820 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af02      	add	r7, sp, #8
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	4608      	mov	r0, r1
 800382a:	4611      	mov	r1, r2
 800382c:	461a      	mov	r2, r3
 800382e:	4603      	mov	r3, r0
 8003830:	817b      	strh	r3, [r7, #10]
 8003832:	460b      	mov	r3, r1
 8003834:	813b      	strh	r3, [r7, #8]
 8003836:	4613      	mov	r3, r2
 8003838:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b20      	cmp	r3, #32
 8003844:	f040 80fd 	bne.w	8003a42 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <HAL_I2C_Mem_Read+0x34>
 800384e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003850:	2b00      	cmp	r3, #0
 8003852:	d105      	bne.n	8003860 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800385a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0f1      	b.n	8003a44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_I2C_Mem_Read+0x4e>
 800386a:	2302      	movs	r3, #2
 800386c:	e0ea      	b.n	8003a44 <HAL_I2C_Mem_Read+0x224>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003876:	f7fe ffdb 	bl	8002830 <HAL_GetTick>
 800387a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	2319      	movs	r3, #25
 8003882:	2201      	movs	r2, #1
 8003884:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 f9af 	bl	8003bec <I2C_WaitOnFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0d5      	b.n	8003a44 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2222      	movs	r2, #34	@ 0x22
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2240      	movs	r2, #64	@ 0x40
 80038a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a3a      	ldr	r2, [r7, #32]
 80038b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80038b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038c0:	88f8      	ldrh	r0, [r7, #6]
 80038c2:	893a      	ldrh	r2, [r7, #8]
 80038c4:	8979      	ldrh	r1, [r7, #10]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	9301      	str	r3, [sp, #4]
 80038ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	4603      	mov	r3, r0
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f913 	bl	8003afc <I2C_RequestMemoryRead>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0ad      	b.n	8003a44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2bff      	cmp	r3, #255	@ 0xff
 80038f0:	d90e      	bls.n	8003910 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	8979      	ldrh	r1, [r7, #10]
 8003900:	4b52      	ldr	r3, [pc, #328]	@ (8003a4c <HAL_I2C_Mem_Read+0x22c>)
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 fb33 	bl	8003f74 <I2C_TransferConfig>
 800390e:	e00f      	b.n	8003930 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391e:	b2da      	uxtb	r2, r3
 8003920:	8979      	ldrh	r1, [r7, #10]
 8003922:	4b4a      	ldr	r3, [pc, #296]	@ (8003a4c <HAL_I2C_Mem_Read+0x22c>)
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fb22 	bl	8003f74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003936:	2200      	movs	r2, #0
 8003938:	2104      	movs	r1, #4
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 f956 	bl	8003bec <I2C_WaitOnFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e07c      	b.n	8003a44 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d034      	beq.n	80039f0 <HAL_I2C_Mem_Read+0x1d0>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800398a:	2b00      	cmp	r3, #0
 800398c:	d130      	bne.n	80039f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003994:	2200      	movs	r2, #0
 8003996:	2180      	movs	r1, #128	@ 0x80
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f927 	bl	8003bec <I2C_WaitOnFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e04d      	b.n	8003a44 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2bff      	cmp	r3, #255	@ 0xff
 80039b0:	d90e      	bls.n	80039d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2201      	movs	r2, #1
 80039b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	8979      	ldrh	r1, [r7, #10]
 80039c0:	2300      	movs	r3, #0
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fad3 	bl	8003f74 <I2C_TransferConfig>
 80039ce:	e00f      	b.n	80039f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	8979      	ldrh	r1, [r7, #10]
 80039e2:	2300      	movs	r3, #0
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 fac2 	bl	8003f74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d19a      	bne.n	8003930 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f994 	bl	8003d2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e01a      	b.n	8003a44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2220      	movs	r2, #32
 8003a14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6859      	ldr	r1, [r3, #4]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b0b      	ldr	r3, [pc, #44]	@ (8003a50 <HAL_I2C_Mem_Read+0x230>)
 8003a22:	400b      	ands	r3, r1
 8003a24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	e000      	b.n	8003a44 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003a42:	2302      	movs	r3, #2
  }
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	80002400 	.word	0x80002400
 8003a50:	fe00e800 	.word	0xfe00e800

08003a54 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	4608      	mov	r0, r1
 8003a5e:	4611      	mov	r1, r2
 8003a60:	461a      	mov	r2, r3
 8003a62:	4603      	mov	r3, r0
 8003a64:	817b      	strh	r3, [r7, #10]
 8003a66:	460b      	mov	r3, r1
 8003a68:	813b      	strh	r3, [r7, #8]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	8979      	ldrh	r1, [r7, #10]
 8003a74:	4b20      	ldr	r3, [pc, #128]	@ (8003af8 <I2C_RequestMemoryWrite+0xa4>)
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 fa79 	bl	8003f74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a82:	69fa      	ldr	r2, [r7, #28]
 8003a84:	69b9      	ldr	r1, [r7, #24]
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f909 	bl	8003c9e <I2C_WaitOnTXISFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e02c      	b.n	8003af0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a96:	88fb      	ldrh	r3, [r7, #6]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d105      	bne.n	8003aa8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a9c:	893b      	ldrh	r3, [r7, #8]
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003aa6:	e015      	b.n	8003ad4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003aa8:	893b      	ldrh	r3, [r7, #8]
 8003aaa:	0a1b      	lsrs	r3, r3, #8
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	69b9      	ldr	r1, [r7, #24]
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f8ef 	bl	8003c9e <I2C_WaitOnTXISFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e012      	b.n	8003af0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003aca:	893b      	ldrh	r3, [r7, #8]
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	2200      	movs	r2, #0
 8003adc:	2180      	movs	r1, #128	@ 0x80
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f884 	bl	8003bec <I2C_WaitOnFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	80002000 	.word	0x80002000

08003afc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	4608      	mov	r0, r1
 8003b06:	4611      	mov	r1, r2
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	817b      	strh	r3, [r7, #10]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	813b      	strh	r3, [r7, #8]
 8003b12:	4613      	mov	r3, r2
 8003b14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003b16:	88fb      	ldrh	r3, [r7, #6]
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	8979      	ldrh	r1, [r7, #10]
 8003b1c:	4b20      	ldr	r3, [pc, #128]	@ (8003ba0 <I2C_RequestMemoryRead+0xa4>)
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	2300      	movs	r3, #0
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 fa26 	bl	8003f74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	69b9      	ldr	r1, [r7, #24]
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f8b6 	bl	8003c9e <I2C_WaitOnTXISFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e02c      	b.n	8003b96 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b3c:	88fb      	ldrh	r3, [r7, #6]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d105      	bne.n	8003b4e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b42:	893b      	ldrh	r3, [r7, #8]
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b4c:	e015      	b.n	8003b7a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b4e:	893b      	ldrh	r3, [r7, #8]
 8003b50:	0a1b      	lsrs	r3, r3, #8
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b5c:	69fa      	ldr	r2, [r7, #28]
 8003b5e:	69b9      	ldr	r1, [r7, #24]
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 f89c 	bl	8003c9e <I2C_WaitOnTXISFlagUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e012      	b.n	8003b96 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b70:	893b      	ldrh	r3, [r7, #8]
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	2200      	movs	r2, #0
 8003b82:	2140      	movs	r1, #64	@ 0x40
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f831 	bl	8003bec <I2C_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	80002000 	.word	0x80002000

08003ba4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d103      	bne.n	8003bc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d007      	beq.n	8003be0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	619a      	str	r2, [r3, #24]
  }
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bfc:	e03b      	b.n	8003c76 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	6839      	ldr	r1, [r7, #0]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f8d6 	bl	8003db4 <I2C_IsErrorOccurred>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e041      	b.n	8003c96 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c18:	d02d      	beq.n	8003c76 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c1a:	f7fe fe09 	bl	8002830 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d302      	bcc.n	8003c30 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d122      	bne.n	8003c76 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699a      	ldr	r2, [r3, #24]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	bf0c      	ite	eq
 8003c40:	2301      	moveq	r3, #1
 8003c42:	2300      	movne	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	461a      	mov	r2, r3
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d113      	bne.n	8003c76 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c52:	f043 0220 	orr.w	r2, r3, #32
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e00f      	b.n	8003c96 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699a      	ldr	r2, [r3, #24]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	bf0c      	ite	eq
 8003c86:	2301      	moveq	r3, #1
 8003c88:	2300      	movne	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d0b4      	beq.n	8003bfe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b084      	sub	sp, #16
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003caa:	e033      	b.n	8003d14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f87f 	bl	8003db4 <I2C_IsErrorOccurred>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e031      	b.n	8003d24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc6:	d025      	beq.n	8003d14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc8:	f7fe fdb2 	bl	8002830 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d302      	bcc.n	8003cde <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d11a      	bne.n	8003d14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d013      	beq.n	8003d14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf0:	f043 0220 	orr.w	r2, r3, #32
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e007      	b.n	8003d24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d1c4      	bne.n	8003cac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d38:	e02f      	b.n	8003d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f838 	bl	8003db4 <I2C_IsErrorOccurred>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e02d      	b.n	8003daa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4e:	f7fe fd6f 	bl	8002830 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d302      	bcc.n	8003d64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d11a      	bne.n	8003d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f003 0320 	and.w	r3, r3, #32
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	d013      	beq.n	8003d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d76:	f043 0220 	orr.w	r2, r3, #32
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e007      	b.n	8003daa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d1c8      	bne.n	8003d3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08a      	sub	sp, #40	@ 0x28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	f003 0310 	and.w	r3, r3, #16
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d068      	beq.n	8003eb2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2210      	movs	r2, #16
 8003de6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003de8:	e049      	b.n	8003e7e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df0:	d045      	beq.n	8003e7e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003df2:	f7fe fd1d 	bl	8002830 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d302      	bcc.n	8003e08 <I2C_IsErrorOccurred+0x54>
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d13a      	bne.n	8003e7e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e1a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e2a:	d121      	bne.n	8003e70 <I2C_IsErrorOccurred+0xbc>
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e32:	d01d      	beq.n	8003e70 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003e34:	7cfb      	ldrb	r3, [r7, #19]
 8003e36:	2b20      	cmp	r3, #32
 8003e38:	d01a      	beq.n	8003e70 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e48:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003e4a:	f7fe fcf1 	bl	8002830 <HAL_GetTick>
 8003e4e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e50:	e00e      	b.n	8003e70 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e52:	f7fe fced 	bl	8002830 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b19      	cmp	r3, #25
 8003e5e:	d907      	bls.n	8003e70 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	f043 0320 	orr.w	r3, r3, #32
 8003e66:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003e6e:	e006      	b.n	8003e7e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b20      	cmp	r3, #32
 8003e7c:	d1e9      	bne.n	8003e52 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	f003 0320 	and.w	r3, r3, #32
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	d003      	beq.n	8003e94 <I2C_IsErrorOccurred+0xe0>
 8003e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0aa      	beq.n	8003dea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d103      	bne.n	8003ea4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	f043 0304 	orr.w	r3, r3, #4
 8003eaa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00b      	beq.n	8003edc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ed4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00b      	beq.n	8003efe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	f043 0308 	orr.w	r3, r3, #8
 8003eec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ef6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00b      	beq.n	8003f20 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	f043 0302 	orr.w	r3, r3, #2
 8003f0e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003f20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01c      	beq.n	8003f62 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f7ff fe3b 	bl	8003ba4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6859      	ldr	r1, [r3, #4]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	4b0d      	ldr	r3, [pc, #52]	@ (8003f70 <I2C_IsErrorOccurred+0x1bc>)
 8003f3a:	400b      	ands	r3, r1
 8003f3c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	431a      	orrs	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003f62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3728      	adds	r7, #40	@ 0x28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	fe00e800 	.word	0xfe00e800

08003f74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	607b      	str	r3, [r7, #4]
 8003f7e:	460b      	mov	r3, r1
 8003f80:	817b      	strh	r3, [r7, #10]
 8003f82:	4613      	mov	r3, r2
 8003f84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f86:	897b      	ldrh	r3, [r7, #10]
 8003f88:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f8c:	7a7b      	ldrb	r3, [r7, #9]
 8003f8e:	041b      	lsls	r3, r3, #16
 8003f90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f94:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003fa2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	0d5b      	lsrs	r3, r3, #21
 8003fae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003fb2:	4b08      	ldr	r3, [pc, #32]	@ (8003fd4 <I2C_TransferConfig+0x60>)
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	ea02 0103 	and.w	r1, r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	03ff63ff 	.word	0x03ff63ff

08003fd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	d138      	bne.n	8004060 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e032      	b.n	8004062 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2224      	movs	r2, #36	@ 0x24
 8004008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0201 	bic.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800402a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6819      	ldr	r1, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	e000      	b.n	8004062 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004060:	2302      	movs	r3, #2
  }
}
 8004062:	4618      	mov	r0, r3
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800406e:	b480      	push	{r7}
 8004070:	b085      	sub	sp, #20
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b20      	cmp	r3, #32
 8004082:	d139      	bne.n	80040f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800408e:	2302      	movs	r3, #2
 8004090:	e033      	b.n	80040fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2224      	movs	r2, #36	@ 0x24
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0201 	bic.w	r2, r2, #1
 80040b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80040c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	021b      	lsls	r3, r3, #8
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0201 	orr.w	r2, r2, #1
 80040e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	e000      	b.n	80040fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040f8:	2302      	movs	r3, #2
  }
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b086      	sub	sp, #24
 800410a:	af02      	add	r7, sp, #8
 800410c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e101      	b.n	800431c <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d106      	bne.n	8004132 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7fd fefb 	bl	8001f28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2203      	movs	r2, #3
 8004136:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f002 fb97 	bl	8006878 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	7c1a      	ldrb	r2, [r3, #16]
 8004152:	f88d 2000 	strb.w	r2, [sp]
 8004156:	3304      	adds	r3, #4
 8004158:	cb0e      	ldmia	r3, {r1, r2, r3}
 800415a:	f002 fb60 	bl	800681e <USB_CoreInit>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e0d5      	b.n	800431c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2100      	movs	r1, #0
 8004176:	4618      	mov	r0, r3
 8004178:	f002 fb8f 	bl	800689a <USB_SetCurrentMode>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d005      	beq.n	800418e <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2202      	movs	r2, #2
 8004186:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e0c6      	b.n	800431c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800418e:	2300      	movs	r3, #0
 8004190:	73fb      	strb	r3, [r7, #15]
 8004192:	e04a      	b.n	800422a <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004194:	7bfa      	ldrb	r2, [r7, #15]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	3315      	adds	r3, #21
 80041a4:	2201      	movs	r2, #1
 80041a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80041a8:	7bfa      	ldrb	r2, [r7, #15]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	3314      	adds	r3, #20
 80041b8:	7bfa      	ldrb	r2, [r7, #15]
 80041ba:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80041bc:	7bfa      	ldrb	r2, [r7, #15]
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	b298      	uxth	r0, r3
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	4413      	add	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	332e      	adds	r3, #46	@ 0x2e
 80041d0:	4602      	mov	r2, r0
 80041d2:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041d4:	7bfa      	ldrb	r2, [r7, #15]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	3318      	adds	r3, #24
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041e8:	7bfa      	ldrb	r2, [r7, #15]
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	331c      	adds	r3, #28
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041fc:	7bfa      	ldrb	r2, [r7, #15]
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	3320      	adds	r3, #32
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004210:	7bfa      	ldrb	r2, [r7, #15]
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	3324      	adds	r3, #36	@ 0x24
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	3301      	adds	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	791b      	ldrb	r3, [r3, #4]
 800422e:	7bfa      	ldrb	r2, [r7, #15]
 8004230:	429a      	cmp	r2, r3
 8004232:	d3af      	bcc.n	8004194 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004234:	2300      	movs	r3, #0
 8004236:	73fb      	strb	r3, [r7, #15]
 8004238:	e044      	b.n	80042c4 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800423a:	7bfa      	ldrb	r2, [r7, #15]
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	4413      	add	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	440b      	add	r3, r1
 8004248:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004250:	7bfa      	ldrb	r2, [r7, #15]
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004262:	7bfa      	ldrb	r2, [r7, #15]
 8004264:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004266:	7bfa      	ldrb	r2, [r7, #15]
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	4613      	mov	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004278:	2200      	movs	r2, #0
 800427a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800427c:	7bfa      	ldrb	r2, [r7, #15]
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	4613      	mov	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004292:	7bfa      	ldrb	r2, [r7, #15]
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	4613      	mov	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80042a8:	7bfa      	ldrb	r2, [r7, #15]
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4413      	add	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	3301      	adds	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	791b      	ldrb	r3, [r3, #4]
 80042c8:	7bfa      	ldrb	r2, [r7, #15]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d3b5      	bcc.n	800423a <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	7c1a      	ldrb	r2, [r3, #16]
 80042d6:	f88d 2000 	strb.w	r2, [sp]
 80042da:	3304      	adds	r3, #4
 80042dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042de:	f002 fb29 	bl	8006934 <USB_DevInit>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e013      	b.n	800431c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	7b1b      	ldrb	r3, [r3, #12]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d102      	bne.n	8004310 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f80a 	bl	8004324 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f002 fcce 	bl	8006cb6 <USB_DevDisconnect>

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004356:	f043 0303 	orr.w	r3, r3, #3
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004370:	4b05      	ldr	r3, [pc, #20]	@ (8004388 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a04      	ldr	r2, [pc, #16]	@ (8004388 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004376:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800437a:	6013      	str	r3, [r2, #0]
}
 800437c:	bf00      	nop
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40007000 	.word	0x40007000

0800438c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004390:	4b04      	ldr	r3, [pc, #16]	@ (80043a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004398:	4618      	mov	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40007000 	.word	0x40007000

080043a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043b6:	d130      	bne.n	800441a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043b8:	4b23      	ldr	r3, [pc, #140]	@ (8004448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043c4:	d038      	beq.n	8004438 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043c6:	4b20      	ldr	r3, [pc, #128]	@ (8004448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043d6:	4b1d      	ldr	r3, [pc, #116]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2232      	movs	r2, #50	@ 0x32
 80043dc:	fb02 f303 	mul.w	r3, r2, r3
 80043e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004450 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80043e2:	fba2 2303 	umull	r2, r3, r2, r3
 80043e6:	0c9b      	lsrs	r3, r3, #18
 80043e8:	3301      	adds	r3, #1
 80043ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043ec:	e002      	b.n	80043f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3b01      	subs	r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043f4:	4b14      	ldr	r3, [pc, #80]	@ (8004448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004400:	d102      	bne.n	8004408 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1f2      	bne.n	80043ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004408:	4b0f      	ldr	r3, [pc, #60]	@ (8004448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004410:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004414:	d110      	bne.n	8004438 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e00f      	b.n	800443a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800441a:	4b0b      	ldr	r3, [pc, #44]	@ (8004448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004426:	d007      	beq.n	8004438 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004428:	4b07      	ldr	r3, [pc, #28]	@ (8004448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004430:	4a05      	ldr	r2, [pc, #20]	@ (8004448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004432:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004436:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40007000 	.word	0x40007000
 800444c:	2000000c 	.word	0x2000000c
 8004450:	431bde83 	.word	0x431bde83

08004454 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004458:	4b05      	ldr	r3, [pc, #20]	@ (8004470 <HAL_PWREx_EnableVddUSB+0x1c>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	4a04      	ldr	r2, [pc, #16]	@ (8004470 <HAL_PWREx_EnableVddUSB+0x1c>)
 800445e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004462:	6053      	str	r3, [r2, #4]
}
 8004464:	bf00      	nop
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	40007000 	.word	0x40007000

08004474 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af02      	add	r7, sp, #8
 800447a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800447c:	f7fe f9d8 	bl	8002830 <HAL_GetTick>
 8004480:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e063      	b.n	8004554 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10b      	bne.n	80044b0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7fd fc5b 	bl	8001d5c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80044a6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f858 	bl	8004560 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	3b01      	subs	r3, #1
 80044c0:	021a      	lsls	r2, r3, #8
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	2120      	movs	r1, #32
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f850 	bl	800457c <QSPI_WaitFlagStateUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80044e0:	7afb      	ldrb	r3, [r7, #11]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d131      	bne.n	800454a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044f0:	f023 0310 	bic.w	r3, r3, #16
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6852      	ldr	r2, [r2, #4]
 80044f8:	0611      	lsls	r1, r2, #24
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	68d2      	ldr	r2, [r2, #12]
 80044fe:	4311      	orrs	r1, r2
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	430b      	orrs	r3, r1
 8004506:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	4b13      	ldr	r3, [pc, #76]	@ (800455c <HAL_QSPI_Init+0xe8>)
 8004510:	4013      	ands	r3, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6912      	ldr	r2, [r2, #16]
 8004516:	0411      	lsls	r1, r2, #16
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6952      	ldr	r2, [r2, #20]
 800451c:	4311      	orrs	r1, r2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6992      	ldr	r2, [r2, #24]
 8004522:	4311      	orrs	r1, r2
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	430b      	orrs	r3, r1
 800452a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0201 	orr.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8004552:	7afb      	ldrb	r3, [r7, #11]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	ffe0f8fe 	.word	0xffe0f8fe

08004560 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	4613      	mov	r3, r2
 800458a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800458c:	e01a      	b.n	80045c4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004594:	d016      	beq.n	80045c4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004596:	f7fe f94b 	bl	8002830 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d302      	bcc.n	80045ac <QSPI_WaitFlagStateUntilTimeout+0x30>
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10b      	bne.n	80045c4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2204      	movs	r2, #4
 80045b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b8:	f043 0201 	orr.w	r2, r3, #1
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e00e      	b.n	80045e2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	bf14      	ite	ne
 80045d2:	2301      	movne	r3, #1
 80045d4:	2300      	moveq	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	79fb      	ldrb	r3, [r7, #7]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d1d6      	bne.n	800458e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e3ca      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045fe:	4b97      	ldr	r3, [pc, #604]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 030c 	and.w	r3, r3, #12
 8004606:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004608:	4b94      	ldr	r3, [pc, #592]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 0303 	and.w	r3, r3, #3
 8004610:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0310 	and.w	r3, r3, #16
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 80e4 	beq.w	80047e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d007      	beq.n	8004636 <HAL_RCC_OscConfig+0x4a>
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	2b0c      	cmp	r3, #12
 800462a:	f040 808b 	bne.w	8004744 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b01      	cmp	r3, #1
 8004632:	f040 8087 	bne.w	8004744 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004636:	4b89      	ldr	r3, [pc, #548]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d005      	beq.n	800464e <HAL_RCC_OscConfig+0x62>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e3a2      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1a      	ldr	r2, [r3, #32]
 8004652:	4b82      	ldr	r3, [pc, #520]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d004      	beq.n	8004668 <HAL_RCC_OscConfig+0x7c>
 800465e:	4b7f      	ldr	r3, [pc, #508]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004666:	e005      	b.n	8004674 <HAL_RCC_OscConfig+0x88>
 8004668:	4b7c      	ldr	r3, [pc, #496]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 800466a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800466e:	091b      	lsrs	r3, r3, #4
 8004670:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004674:	4293      	cmp	r3, r2
 8004676:	d223      	bcs.n	80046c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	4618      	mov	r0, r3
 800467e:	f000 fd55 	bl	800512c <RCC_SetFlashLatencyFromMSIRange>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e383      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800468c:	4b73      	ldr	r3, [pc, #460]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a72      	ldr	r2, [pc, #456]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004692:	f043 0308 	orr.w	r3, r3, #8
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	4b70      	ldr	r3, [pc, #448]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	496d      	ldr	r1, [pc, #436]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046aa:	4b6c      	ldr	r3, [pc, #432]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	4968      	ldr	r1, [pc, #416]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	604b      	str	r3, [r1, #4]
 80046be:	e025      	b.n	800470c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046c0:	4b66      	ldr	r3, [pc, #408]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a65      	ldr	r2, [pc, #404]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80046c6:	f043 0308 	orr.w	r3, r3, #8
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	4b63      	ldr	r3, [pc, #396]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	4960      	ldr	r1, [pc, #384]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046de:	4b5f      	ldr	r3, [pc, #380]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	495b      	ldr	r1, [pc, #364]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d109      	bne.n	800470c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fd15 	bl	800512c <RCC_SetFlashLatencyFromMSIRange>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e343      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800470c:	f000 fc4a 	bl	8004fa4 <HAL_RCC_GetSysClockFreq>
 8004710:	4602      	mov	r2, r0
 8004712:	4b52      	ldr	r3, [pc, #328]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	091b      	lsrs	r3, r3, #4
 8004718:	f003 030f 	and.w	r3, r3, #15
 800471c:	4950      	ldr	r1, [pc, #320]	@ (8004860 <HAL_RCC_OscConfig+0x274>)
 800471e:	5ccb      	ldrb	r3, [r1, r3]
 8004720:	f003 031f 	and.w	r3, r3, #31
 8004724:	fa22 f303 	lsr.w	r3, r2, r3
 8004728:	4a4e      	ldr	r2, [pc, #312]	@ (8004864 <HAL_RCC_OscConfig+0x278>)
 800472a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800472c:	4b4e      	ldr	r3, [pc, #312]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4618      	mov	r0, r3
 8004732:	f7fe f82d 	bl	8002790 <HAL_InitTick>
 8004736:	4603      	mov	r3, r0
 8004738:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800473a:	7bfb      	ldrb	r3, [r7, #15]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d052      	beq.n	80047e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	e327      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d032      	beq.n	80047b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800474c:	4b43      	ldr	r3, [pc, #268]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a42      	ldr	r2, [pc, #264]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004752:	f043 0301 	orr.w	r3, r3, #1
 8004756:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004758:	f7fe f86a 	bl	8002830 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004760:	f7fe f866 	bl	8002830 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e310      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004772:	4b3a      	ldr	r3, [pc, #232]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800477e:	4b37      	ldr	r3, [pc, #220]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a36      	ldr	r2, [pc, #216]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004784:	f043 0308 	orr.w	r3, r3, #8
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	4b34      	ldr	r3, [pc, #208]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	4931      	ldr	r1, [pc, #196]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004798:	4313      	orrs	r3, r2
 800479a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800479c:	4b2f      	ldr	r3, [pc, #188]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	021b      	lsls	r3, r3, #8
 80047aa:	492c      	ldr	r1, [pc, #176]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	604b      	str	r3, [r1, #4]
 80047b0:	e01a      	b.n	80047e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047b2:	4b2a      	ldr	r3, [pc, #168]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a29      	ldr	r2, [pc, #164]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80047b8:	f023 0301 	bic.w	r3, r3, #1
 80047bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047be:	f7fe f837 	bl	8002830 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047c6:	f7fe f833 	bl	8002830 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e2dd      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047d8:	4b20      	ldr	r3, [pc, #128]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1f0      	bne.n	80047c6 <HAL_RCC_OscConfig+0x1da>
 80047e4:	e000      	b.n	80047e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d074      	beq.n	80048de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d005      	beq.n	8004806 <HAL_RCC_OscConfig+0x21a>
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b0c      	cmp	r3, #12
 80047fe:	d10e      	bne.n	800481e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2b03      	cmp	r3, #3
 8004804:	d10b      	bne.n	800481e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004806:	4b15      	ldr	r3, [pc, #84]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d064      	beq.n	80048dc <HAL_RCC_OscConfig+0x2f0>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d160      	bne.n	80048dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e2ba      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004826:	d106      	bne.n	8004836 <HAL_RCC_OscConfig+0x24a>
 8004828:	4b0c      	ldr	r3, [pc, #48]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a0b      	ldr	r2, [pc, #44]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 800482e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	e026      	b.n	8004884 <HAL_RCC_OscConfig+0x298>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800483e:	d115      	bne.n	800486c <HAL_RCC_OscConfig+0x280>
 8004840:	4b06      	ldr	r3, [pc, #24]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a05      	ldr	r2, [pc, #20]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004846:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	4b03      	ldr	r3, [pc, #12]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a02      	ldr	r2, [pc, #8]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004852:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	e014      	b.n	8004884 <HAL_RCC_OscConfig+0x298>
 800485a:	bf00      	nop
 800485c:	40021000 	.word	0x40021000
 8004860:	080118d8 	.word	0x080118d8
 8004864:	2000000c 	.word	0x2000000c
 8004868:	20000044 	.word	0x20000044
 800486c:	4ba0      	ldr	r3, [pc, #640]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a9f      	ldr	r2, [pc, #636]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	4b9d      	ldr	r3, [pc, #628]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a9c      	ldr	r2, [pc, #624]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 800487e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d013      	beq.n	80048b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488c:	f7fd ffd0 	bl	8002830 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004894:	f7fd ffcc 	bl	8002830 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b64      	cmp	r3, #100	@ 0x64
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e276      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048a6:	4b92      	ldr	r3, [pc, #584]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0x2a8>
 80048b2:	e014      	b.n	80048de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fd ffbc 	bl	8002830 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048bc:	f7fd ffb8 	bl	8002830 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b64      	cmp	r3, #100	@ 0x64
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e262      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ce:	4b88      	ldr	r3, [pc, #544]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f0      	bne.n	80048bc <HAL_RCC_OscConfig+0x2d0>
 80048da:	e000      	b.n	80048de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d060      	beq.n	80049ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d005      	beq.n	80048fc <HAL_RCC_OscConfig+0x310>
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b0c      	cmp	r3, #12
 80048f4:	d119      	bne.n	800492a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d116      	bne.n	800492a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048fc:	4b7c      	ldr	r3, [pc, #496]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_RCC_OscConfig+0x328>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e23f      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004914:	4b76      	ldr	r3, [pc, #472]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	061b      	lsls	r3, r3, #24
 8004922:	4973      	ldr	r1, [pc, #460]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004924:	4313      	orrs	r3, r2
 8004926:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004928:	e040      	b.n	80049ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d023      	beq.n	800497a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004932:	4b6f      	ldr	r3, [pc, #444]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a6e      	ldr	r2, [pc, #440]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800493c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493e:	f7fd ff77 	bl	8002830 <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004946:	f7fd ff73 	bl	8002830 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e21d      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004958:	4b65      	ldr	r3, [pc, #404]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0f0      	beq.n	8004946 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004964:	4b62      	ldr	r3, [pc, #392]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	061b      	lsls	r3, r3, #24
 8004972:	495f      	ldr	r1, [pc, #380]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004974:	4313      	orrs	r3, r2
 8004976:	604b      	str	r3, [r1, #4]
 8004978:	e018      	b.n	80049ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800497a:	4b5d      	ldr	r3, [pc, #372]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a5c      	ldr	r2, [pc, #368]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004986:	f7fd ff53 	bl	8002830 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800498e:	f7fd ff4f 	bl	8002830 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e1f9      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049a0:	4b53      	ldr	r3, [pc, #332]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1f0      	bne.n	800498e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0308 	and.w	r3, r3, #8
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d03c      	beq.n	8004a32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01c      	beq.n	80049fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049c0:	4b4b      	ldr	r3, [pc, #300]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 80049c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049c6:	4a4a      	ldr	r2, [pc, #296]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 80049c8:	f043 0301 	orr.w	r3, r3, #1
 80049cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d0:	f7fd ff2e 	bl	8002830 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049d8:	f7fd ff2a 	bl	8002830 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e1d4      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049ea:	4b41      	ldr	r3, [pc, #260]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 80049ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0ef      	beq.n	80049d8 <HAL_RCC_OscConfig+0x3ec>
 80049f8:	e01b      	b.n	8004a32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049fa:	4b3d      	ldr	r3, [pc, #244]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 80049fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a00:	4a3b      	ldr	r2, [pc, #236]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004a02:	f023 0301 	bic.w	r3, r3, #1
 8004a06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0a:	f7fd ff11 	bl	8002830 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a12:	f7fd ff0d 	bl	8002830 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e1b7      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a24:	4b32      	ldr	r3, [pc, #200]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1ef      	bne.n	8004a12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 80a6 	beq.w	8004b8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a40:	2300      	movs	r3, #0
 8004a42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a44:	4b2a      	ldr	r3, [pc, #168]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10d      	bne.n	8004a6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a50:	4b27      	ldr	r3, [pc, #156]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a54:	4a26      	ldr	r2, [pc, #152]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a5c:	4b24      	ldr	r3, [pc, #144]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a64:	60bb      	str	r3, [r7, #8]
 8004a66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a6c:	4b21      	ldr	r3, [pc, #132]	@ (8004af4 <HAL_RCC_OscConfig+0x508>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d118      	bne.n	8004aaa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a78:	4b1e      	ldr	r3, [pc, #120]	@ (8004af4 <HAL_RCC_OscConfig+0x508>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004af4 <HAL_RCC_OscConfig+0x508>)
 8004a7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a84:	f7fd fed4 	bl	8002830 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a8c:	f7fd fed0 	bl	8002830 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e17a      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a9e:	4b15      	ldr	r3, [pc, #84]	@ (8004af4 <HAL_RCC_OscConfig+0x508>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0f0      	beq.n	8004a8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d108      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x4d8>
 8004ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004aba:	f043 0301 	orr.w	r3, r3, #1
 8004abe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ac2:	e029      	b.n	8004b18 <HAL_RCC_OscConfig+0x52c>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	2b05      	cmp	r3, #5
 8004aca:	d115      	bne.n	8004af8 <HAL_RCC_OscConfig+0x50c>
 8004acc:	4b08      	ldr	r3, [pc, #32]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad2:	4a07      	ldr	r2, [pc, #28]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004ad4:	f043 0304 	orr.w	r3, r3, #4
 8004ad8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004adc:	4b04      	ldr	r3, [pc, #16]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae2:	4a03      	ldr	r2, [pc, #12]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004ae4:	f043 0301 	orr.w	r3, r3, #1
 8004ae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004aec:	e014      	b.n	8004b18 <HAL_RCC_OscConfig+0x52c>
 8004aee:	bf00      	nop
 8004af0:	40021000 	.word	0x40021000
 8004af4:	40007000 	.word	0x40007000
 8004af8:	4b9c      	ldr	r3, [pc, #624]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004afe:	4a9b      	ldr	r2, [pc, #620]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004b00:	f023 0301 	bic.w	r3, r3, #1
 8004b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b08:	4b98      	ldr	r3, [pc, #608]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b0e:	4a97      	ldr	r2, [pc, #604]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004b10:	f023 0304 	bic.w	r3, r3, #4
 8004b14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d016      	beq.n	8004b4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b20:	f7fd fe86 	bl	8002830 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b26:	e00a      	b.n	8004b3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b28:	f7fd fe82 	bl	8002830 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e12a      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b3e:	4b8b      	ldr	r3, [pc, #556]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0ed      	beq.n	8004b28 <HAL_RCC_OscConfig+0x53c>
 8004b4c:	e015      	b.n	8004b7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4e:	f7fd fe6f 	bl	8002830 <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b54:	e00a      	b.n	8004b6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b56:	f7fd fe6b 	bl	8002830 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e113      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b6c:	4b7f      	ldr	r3, [pc, #508]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1ed      	bne.n	8004b56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b7a:	7ffb      	ldrb	r3, [r7, #31]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d105      	bne.n	8004b8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b80:	4b7a      	ldr	r3, [pc, #488]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b84:	4a79      	ldr	r2, [pc, #484]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004b86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b8a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80fe 	beq.w	8004d92 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	f040 80d0 	bne.w	8004d40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ba0:	4b72      	ldr	r3, [pc, #456]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f003 0203 	and.w	r2, r3, #3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d130      	bne.n	8004c16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d127      	bne.n	8004c16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d11f      	bne.n	8004c16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004be0:	2a07      	cmp	r2, #7
 8004be2:	bf14      	ite	ne
 8004be4:	2201      	movne	r2, #1
 8004be6:	2200      	moveq	r2, #0
 8004be8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d113      	bne.n	8004c16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf8:	085b      	lsrs	r3, r3, #1
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d109      	bne.n	8004c16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0c:	085b      	lsrs	r3, r3, #1
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d06e      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	2b0c      	cmp	r3, #12
 8004c1a:	d069      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c1c:	4b53      	ldr	r3, [pc, #332]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d105      	bne.n	8004c34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004c28:	4b50      	ldr	r3, [pc, #320]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e0ad      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c38:	4b4c      	ldr	r3, [pc, #304]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a4b      	ldr	r2, [pc, #300]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004c3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c44:	f7fd fdf4 	bl	8002830 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c4c:	f7fd fdf0 	bl	8002830 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e09a      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c5e:	4b43      	ldr	r3, [pc, #268]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c6a:	4b40      	ldr	r3, [pc, #256]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	4b40      	ldr	r3, [pc, #256]	@ (8004d70 <HAL_RCC_OscConfig+0x784>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004c7a:	3a01      	subs	r2, #1
 8004c7c:	0112      	lsls	r2, r2, #4
 8004c7e:	4311      	orrs	r1, r2
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c84:	0212      	lsls	r2, r2, #8
 8004c86:	4311      	orrs	r1, r2
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c8c:	0852      	lsrs	r2, r2, #1
 8004c8e:	3a01      	subs	r2, #1
 8004c90:	0552      	lsls	r2, r2, #21
 8004c92:	4311      	orrs	r1, r2
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004c98:	0852      	lsrs	r2, r2, #1
 8004c9a:	3a01      	subs	r2, #1
 8004c9c:	0652      	lsls	r2, r2, #25
 8004c9e:	4311      	orrs	r1, r2
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ca4:	0912      	lsrs	r2, r2, #4
 8004ca6:	0452      	lsls	r2, r2, #17
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	4930      	ldr	r1, [pc, #192]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004cb0:	4b2e      	ldr	r3, [pc, #184]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a2d      	ldr	r2, [pc, #180]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004cb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	4a2a      	ldr	r2, [pc, #168]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004cc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cc8:	f7fd fdb2 	bl	8002830 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd0:	f7fd fdae 	bl	8002830 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e058      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ce2:	4b22      	ldr	r3, [pc, #136]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0f0      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cee:	e050      	b.n	8004d92 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e04f      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d148      	bne.n	8004d92 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d00:	4b1a      	ldr	r3, [pc, #104]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a19      	ldr	r2, [pc, #100]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004d06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d0c:	4b17      	ldr	r3, [pc, #92]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	4a16      	ldr	r2, [pc, #88]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d18:	f7fd fd8a 	bl	8002830 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d20:	f7fd fd86 	bl	8002830 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e030      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d32:	4b0e      	ldr	r3, [pc, #56]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0f0      	beq.n	8004d20 <HAL_RCC_OscConfig+0x734>
 8004d3e:	e028      	b.n	8004d92 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	2b0c      	cmp	r3, #12
 8004d44:	d023      	beq.n	8004d8e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d46:	4b09      	ldr	r3, [pc, #36]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a08      	ldr	r2, [pc, #32]	@ (8004d6c <HAL_RCC_OscConfig+0x780>)
 8004d4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d52:	f7fd fd6d 	bl	8002830 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d58:	e00c      	b.n	8004d74 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d5a:	f7fd fd69 	bl	8002830 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d905      	bls.n	8004d74 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e013      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d74:	4b09      	ldr	r3, [pc, #36]	@ (8004d9c <HAL_RCC_OscConfig+0x7b0>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1ec      	bne.n	8004d5a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004d80:	4b06      	ldr	r3, [pc, #24]	@ (8004d9c <HAL_RCC_OscConfig+0x7b0>)
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	4905      	ldr	r1, [pc, #20]	@ (8004d9c <HAL_RCC_OscConfig+0x7b0>)
 8004d86:	4b06      	ldr	r3, [pc, #24]	@ (8004da0 <HAL_RCC_OscConfig+0x7b4>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	60cb      	str	r3, [r1, #12]
 8004d8c:	e001      	b.n	8004d92 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e000      	b.n	8004d94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3720      	adds	r7, #32
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	feeefffc 	.word	0xfeeefffc

08004da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0e7      	b.n	8004f88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004db8:	4b75      	ldr	r3, [pc, #468]	@ (8004f90 <HAL_RCC_ClockConfig+0x1ec>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d910      	bls.n	8004de8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc6:	4b72      	ldr	r3, [pc, #456]	@ (8004f90 <HAL_RCC_ClockConfig+0x1ec>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f023 0207 	bic.w	r2, r3, #7
 8004dce:	4970      	ldr	r1, [pc, #448]	@ (8004f90 <HAL_RCC_ClockConfig+0x1ec>)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd6:	4b6e      	ldr	r3, [pc, #440]	@ (8004f90 <HAL_RCC_ClockConfig+0x1ec>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d001      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0cf      	b.n	8004f88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d010      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	4b66      	ldr	r3, [pc, #408]	@ (8004f94 <HAL_RCC_ClockConfig+0x1f0>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d908      	bls.n	8004e16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e04:	4b63      	ldr	r3, [pc, #396]	@ (8004f94 <HAL_RCC_ClockConfig+0x1f0>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	4960      	ldr	r1, [pc, #384]	@ (8004f94 <HAL_RCC_ClockConfig+0x1f0>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d04c      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d107      	bne.n	8004e3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e2a:	4b5a      	ldr	r3, [pc, #360]	@ (8004f94 <HAL_RCC_ClockConfig+0x1f0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d121      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e0a6      	b.n	8004f88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d107      	bne.n	8004e52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e42:	4b54      	ldr	r3, [pc, #336]	@ (8004f94 <HAL_RCC_ClockConfig+0x1f0>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d115      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e09a      	b.n	8004f88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d107      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e5a:	4b4e      	ldr	r3, [pc, #312]	@ (8004f94 <HAL_RCC_ClockConfig+0x1f0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d109      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e08e      	b.n	8004f88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8004f94 <HAL_RCC_ClockConfig+0x1f0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e086      	b.n	8004f88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e7a:	4b46      	ldr	r3, [pc, #280]	@ (8004f94 <HAL_RCC_ClockConfig+0x1f0>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f023 0203 	bic.w	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	4943      	ldr	r1, [pc, #268]	@ (8004f94 <HAL_RCC_ClockConfig+0x1f0>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8c:	f7fd fcd0 	bl	8002830 <HAL_GetTick>
 8004e90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e92:	e00a      	b.n	8004eaa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e94:	f7fd fccc 	bl	8002830 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e06e      	b.n	8004f88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eaa:	4b3a      	ldr	r3, [pc, #232]	@ (8004f94 <HAL_RCC_ClockConfig+0x1f0>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 020c 	and.w	r2, r3, #12
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d1eb      	bne.n	8004e94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d010      	beq.n	8004eea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	4b31      	ldr	r3, [pc, #196]	@ (8004f94 <HAL_RCC_ClockConfig+0x1f0>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d208      	bcs.n	8004eea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed8:	4b2e      	ldr	r3, [pc, #184]	@ (8004f94 <HAL_RCC_ClockConfig+0x1f0>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	492b      	ldr	r1, [pc, #172]	@ (8004f94 <HAL_RCC_ClockConfig+0x1f0>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eea:	4b29      	ldr	r3, [pc, #164]	@ (8004f90 <HAL_RCC_ClockConfig+0x1ec>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d210      	bcs.n	8004f1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef8:	4b25      	ldr	r3, [pc, #148]	@ (8004f90 <HAL_RCC_ClockConfig+0x1ec>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f023 0207 	bic.w	r2, r3, #7
 8004f00:	4923      	ldr	r1, [pc, #140]	@ (8004f90 <HAL_RCC_ClockConfig+0x1ec>)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f08:	4b21      	ldr	r3, [pc, #132]	@ (8004f90 <HAL_RCC_ClockConfig+0x1ec>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d001      	beq.n	8004f1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e036      	b.n	8004f88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d008      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f26:	4b1b      	ldr	r3, [pc, #108]	@ (8004f94 <HAL_RCC_ClockConfig+0x1f0>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	4918      	ldr	r1, [pc, #96]	@ (8004f94 <HAL_RCC_ClockConfig+0x1f0>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d009      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f44:	4b13      	ldr	r3, [pc, #76]	@ (8004f94 <HAL_RCC_ClockConfig+0x1f0>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	4910      	ldr	r1, [pc, #64]	@ (8004f94 <HAL_RCC_ClockConfig+0x1f0>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f58:	f000 f824 	bl	8004fa4 <HAL_RCC_GetSysClockFreq>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f94 <HAL_RCC_ClockConfig+0x1f0>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	091b      	lsrs	r3, r3, #4
 8004f64:	f003 030f 	and.w	r3, r3, #15
 8004f68:	490b      	ldr	r1, [pc, #44]	@ (8004f98 <HAL_RCC_ClockConfig+0x1f4>)
 8004f6a:	5ccb      	ldrb	r3, [r1, r3]
 8004f6c:	f003 031f 	and.w	r3, r3, #31
 8004f70:	fa22 f303 	lsr.w	r3, r2, r3
 8004f74:	4a09      	ldr	r2, [pc, #36]	@ (8004f9c <HAL_RCC_ClockConfig+0x1f8>)
 8004f76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f78:	4b09      	ldr	r3, [pc, #36]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1fc>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fd fc07 	bl	8002790 <HAL_InitTick>
 8004f82:	4603      	mov	r3, r0
 8004f84:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f86:	7afb      	ldrb	r3, [r7, #11]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40022000 	.word	0x40022000
 8004f94:	40021000 	.word	0x40021000
 8004f98:	080118d8 	.word	0x080118d8
 8004f9c:	2000000c 	.word	0x2000000c
 8004fa0:	20000044 	.word	0x20000044

08004fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b089      	sub	sp, #36	@ 0x24
 8004fa8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fb2:	4b3e      	ldr	r3, [pc, #248]	@ (80050ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
 8004fba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80050ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f003 0303 	and.w	r3, r3, #3
 8004fc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x34>
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b0c      	cmp	r3, #12
 8004fd0:	d121      	bne.n	8005016 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d11e      	bne.n	8005016 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fd8:	4b34      	ldr	r3, [pc, #208]	@ (80050ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0308 	and.w	r3, r3, #8
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d107      	bne.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fe4:	4b31      	ldr	r3, [pc, #196]	@ (80050ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fea:	0a1b      	lsrs	r3, r3, #8
 8004fec:	f003 030f 	and.w	r3, r3, #15
 8004ff0:	61fb      	str	r3, [r7, #28]
 8004ff2:	e005      	b.n	8005000 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ff4:	4b2d      	ldr	r3, [pc, #180]	@ (80050ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	091b      	lsrs	r3, r3, #4
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005000:	4a2b      	ldr	r2, [pc, #172]	@ (80050b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005008:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10d      	bne.n	800502c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005014:	e00a      	b.n	800502c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	2b04      	cmp	r3, #4
 800501a:	d102      	bne.n	8005022 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800501c:	4b25      	ldr	r3, [pc, #148]	@ (80050b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800501e:	61bb      	str	r3, [r7, #24]
 8005020:	e004      	b.n	800502c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	2b08      	cmp	r3, #8
 8005026:	d101      	bne.n	800502c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005028:	4b23      	ldr	r3, [pc, #140]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800502a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	2b0c      	cmp	r3, #12
 8005030:	d134      	bne.n	800509c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005032:	4b1e      	ldr	r3, [pc, #120]	@ (80050ac <HAL_RCC_GetSysClockFreq+0x108>)
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d003      	beq.n	800504a <HAL_RCC_GetSysClockFreq+0xa6>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b03      	cmp	r3, #3
 8005046:	d003      	beq.n	8005050 <HAL_RCC_GetSysClockFreq+0xac>
 8005048:	e005      	b.n	8005056 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800504a:	4b1a      	ldr	r3, [pc, #104]	@ (80050b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800504c:	617b      	str	r3, [r7, #20]
      break;
 800504e:	e005      	b.n	800505c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005050:	4b19      	ldr	r3, [pc, #100]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005052:	617b      	str	r3, [r7, #20]
      break;
 8005054:	e002      	b.n	800505c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	617b      	str	r3, [r7, #20]
      break;
 800505a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800505c:	4b13      	ldr	r3, [pc, #76]	@ (80050ac <HAL_RCC_GetSysClockFreq+0x108>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	091b      	lsrs	r3, r3, #4
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	3301      	adds	r3, #1
 8005068:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800506a:	4b10      	ldr	r3, [pc, #64]	@ (80050ac <HAL_RCC_GetSysClockFreq+0x108>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	0a1b      	lsrs	r3, r3, #8
 8005070:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	fb03 f202 	mul.w	r2, r3, r2
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005080:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005082:	4b0a      	ldr	r3, [pc, #40]	@ (80050ac <HAL_RCC_GetSysClockFreq+0x108>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	0e5b      	lsrs	r3, r3, #25
 8005088:	f003 0303 	and.w	r3, r3, #3
 800508c:	3301      	adds	r3, #1
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	fbb2 f3f3 	udiv	r3, r2, r3
 800509a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800509c:	69bb      	ldr	r3, [r7, #24]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3724      	adds	r7, #36	@ 0x24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40021000 	.word	0x40021000
 80050b0:	080118f0 	.word	0x080118f0
 80050b4:	00f42400 	.word	0x00f42400
 80050b8:	007a1200 	.word	0x007a1200

080050bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050c0:	4b03      	ldr	r3, [pc, #12]	@ (80050d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80050c2:	681b      	ldr	r3, [r3, #0]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	2000000c 	.word	0x2000000c

080050d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80050d8:	f7ff fff0 	bl	80050bc <HAL_RCC_GetHCLKFreq>
 80050dc:	4602      	mov	r2, r0
 80050de:	4b06      	ldr	r3, [pc, #24]	@ (80050f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	0a1b      	lsrs	r3, r3, #8
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	4904      	ldr	r1, [pc, #16]	@ (80050fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80050ea:	5ccb      	ldrb	r3, [r1, r3]
 80050ec:	f003 031f 	and.w	r3, r3, #31
 80050f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	40021000 	.word	0x40021000
 80050fc:	080118e8 	.word	0x080118e8

08005100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005104:	f7ff ffda 	bl	80050bc <HAL_RCC_GetHCLKFreq>
 8005108:	4602      	mov	r2, r0
 800510a:	4b06      	ldr	r3, [pc, #24]	@ (8005124 <HAL_RCC_GetPCLK2Freq+0x24>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	0adb      	lsrs	r3, r3, #11
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	4904      	ldr	r1, [pc, #16]	@ (8005128 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005116:	5ccb      	ldrb	r3, [r1, r3]
 8005118:	f003 031f 	and.w	r3, r3, #31
 800511c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005120:	4618      	mov	r0, r3
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40021000 	.word	0x40021000
 8005128:	080118e8 	.word	0x080118e8

0800512c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005134:	2300      	movs	r3, #0
 8005136:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005138:	4b2a      	ldr	r3, [pc, #168]	@ (80051e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800513a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800513c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005144:	f7ff f922 	bl	800438c <HAL_PWREx_GetVoltageRange>
 8005148:	6178      	str	r0, [r7, #20]
 800514a:	e014      	b.n	8005176 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800514c:	4b25      	ldr	r3, [pc, #148]	@ (80051e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800514e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005150:	4a24      	ldr	r2, [pc, #144]	@ (80051e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005156:	6593      	str	r3, [r2, #88]	@ 0x58
 8005158:	4b22      	ldr	r3, [pc, #136]	@ (80051e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800515a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005164:	f7ff f912 	bl	800438c <HAL_PWREx_GetVoltageRange>
 8005168:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800516a:	4b1e      	ldr	r3, [pc, #120]	@ (80051e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800516c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800516e:	4a1d      	ldr	r2, [pc, #116]	@ (80051e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005170:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005174:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800517c:	d10b      	bne.n	8005196 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b80      	cmp	r3, #128	@ 0x80
 8005182:	d919      	bls.n	80051b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2ba0      	cmp	r3, #160	@ 0xa0
 8005188:	d902      	bls.n	8005190 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800518a:	2302      	movs	r3, #2
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	e013      	b.n	80051b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005190:	2301      	movs	r3, #1
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	e010      	b.n	80051b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b80      	cmp	r3, #128	@ 0x80
 800519a:	d902      	bls.n	80051a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800519c:	2303      	movs	r3, #3
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	e00a      	b.n	80051b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b80      	cmp	r3, #128	@ 0x80
 80051a6:	d102      	bne.n	80051ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051a8:	2302      	movs	r3, #2
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	e004      	b.n	80051b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b70      	cmp	r3, #112	@ 0x70
 80051b2:	d101      	bne.n	80051b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051b4:	2301      	movs	r3, #1
 80051b6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80051b8:	4b0b      	ldr	r3, [pc, #44]	@ (80051e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f023 0207 	bic.w	r2, r3, #7
 80051c0:	4909      	ldr	r1, [pc, #36]	@ (80051e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80051c8:	4b07      	ldr	r3, [pc, #28]	@ (80051e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d001      	beq.n	80051da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	40021000 	.word	0x40021000
 80051e8:	40022000 	.word	0x40022000

080051ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051f4:	2300      	movs	r3, #0
 80051f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051f8:	2300      	movs	r3, #0
 80051fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005204:	2b00      	cmp	r3, #0
 8005206:	d041      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800520c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005210:	d02a      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005212:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005216:	d824      	bhi.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005218:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800521c:	d008      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800521e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005222:	d81e      	bhi.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005228:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800522c:	d010      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800522e:	e018      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005230:	4b86      	ldr	r3, [pc, #536]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	4a85      	ldr	r2, [pc, #532]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800523a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800523c:	e015      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	3304      	adds	r3, #4
 8005242:	2100      	movs	r1, #0
 8005244:	4618      	mov	r0, r3
 8005246:	f000 facb 	bl	80057e0 <RCCEx_PLLSAI1_Config>
 800524a:	4603      	mov	r3, r0
 800524c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800524e:	e00c      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3320      	adds	r3, #32
 8005254:	2100      	movs	r1, #0
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fbb6 	bl	80059c8 <RCCEx_PLLSAI2_Config>
 800525c:	4603      	mov	r3, r0
 800525e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005260:	e003      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	74fb      	strb	r3, [r7, #19]
      break;
 8005266:	e000      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800526a:	7cfb      	ldrb	r3, [r7, #19]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10b      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005270:	4b76      	ldr	r3, [pc, #472]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005276:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800527e:	4973      	ldr	r1, [pc, #460]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005280:	4313      	orrs	r3, r2
 8005282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005286:	e001      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005288:	7cfb      	ldrb	r3, [r7, #19]
 800528a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d041      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800529c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052a0:	d02a      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80052a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052a6:	d824      	bhi.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80052a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052ac:	d008      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80052ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052b2:	d81e      	bhi.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00a      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80052b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052bc:	d010      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80052be:	e018      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052c0:	4b62      	ldr	r3, [pc, #392]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	4a61      	ldr	r2, [pc, #388]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052cc:	e015      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3304      	adds	r3, #4
 80052d2:	2100      	movs	r1, #0
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 fa83 	bl	80057e0 <RCCEx_PLLSAI1_Config>
 80052da:	4603      	mov	r3, r0
 80052dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052de:	e00c      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3320      	adds	r3, #32
 80052e4:	2100      	movs	r1, #0
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fb6e 	bl	80059c8 <RCCEx_PLLSAI2_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052f0:	e003      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	74fb      	strb	r3, [r7, #19]
      break;
 80052f6:	e000      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80052f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052fa:	7cfb      	ldrb	r3, [r7, #19]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10b      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005300:	4b52      	ldr	r3, [pc, #328]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005306:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800530e:	494f      	ldr	r1, [pc, #316]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005310:	4313      	orrs	r3, r2
 8005312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005316:	e001      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005318:	7cfb      	ldrb	r3, [r7, #19]
 800531a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 80a0 	beq.w	800546a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800532a:	2300      	movs	r3, #0
 800532c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800532e:	4b47      	ldr	r3, [pc, #284]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800533e:	2300      	movs	r3, #0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00d      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005344:	4b41      	ldr	r3, [pc, #260]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005348:	4a40      	ldr	r2, [pc, #256]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800534a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800534e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005350:	4b3e      	ldr	r3, [pc, #248]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800535c:	2301      	movs	r3, #1
 800535e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005360:	4b3b      	ldr	r3, [pc, #236]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a3a      	ldr	r2, [pc, #232]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005366:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800536a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800536c:	f7fd fa60 	bl	8002830 <HAL_GetTick>
 8005370:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005372:	e009      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005374:	f7fd fa5c 	bl	8002830 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d902      	bls.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	74fb      	strb	r3, [r7, #19]
        break;
 8005386:	e005      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005388:	4b31      	ldr	r3, [pc, #196]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0ef      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005394:	7cfb      	ldrb	r3, [r7, #19]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d15c      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800539a:	4b2c      	ldr	r3, [pc, #176]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800539c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01f      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d019      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053b8:	4b24      	ldr	r3, [pc, #144]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053c4:	4b21      	ldr	r3, [pc, #132]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ca:	4a20      	ldr	r2, [pc, #128]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053d4:	4b1d      	ldr	r3, [pc, #116]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053da:	4a1c      	ldr	r2, [pc, #112]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053e4:	4a19      	ldr	r2, [pc, #100]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d016      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f6:	f7fd fa1b 	bl	8002830 <HAL_GetTick>
 80053fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053fc:	e00b      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fe:	f7fd fa17 	bl	8002830 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800540c:	4293      	cmp	r3, r2
 800540e:	d902      	bls.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	74fb      	strb	r3, [r7, #19]
            break;
 8005414:	e006      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005416:	4b0d      	ldr	r3, [pc, #52]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0ec      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005424:	7cfb      	ldrb	r3, [r7, #19]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10c      	bne.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800542a:	4b08      	ldr	r3, [pc, #32]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800542c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005430:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800543a:	4904      	ldr	r1, [pc, #16]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800543c:	4313      	orrs	r3, r2
 800543e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005442:	e009      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005444:	7cfb      	ldrb	r3, [r7, #19]
 8005446:	74bb      	strb	r3, [r7, #18]
 8005448:	e006      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800544a:	bf00      	nop
 800544c:	40021000 	.word	0x40021000
 8005450:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005454:	7cfb      	ldrb	r3, [r7, #19]
 8005456:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005458:	7c7b      	ldrb	r3, [r7, #17]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d105      	bne.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800545e:	4b9e      	ldr	r3, [pc, #632]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005462:	4a9d      	ldr	r2, [pc, #628]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005464:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005468:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005476:	4b98      	ldr	r3, [pc, #608]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547c:	f023 0203 	bic.w	r2, r3, #3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005484:	4994      	ldr	r1, [pc, #592]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00a      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005498:	4b8f      	ldr	r3, [pc, #572]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800549a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549e:	f023 020c 	bic.w	r2, r3, #12
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a6:	498c      	ldr	r1, [pc, #560]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0304 	and.w	r3, r3, #4
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00a      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054ba:	4b87      	ldr	r3, [pc, #540]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c8:	4983      	ldr	r1, [pc, #524]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00a      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054dc:	4b7e      	ldr	r3, [pc, #504]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ea:	497b      	ldr	r1, [pc, #492]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0310 	and.w	r3, r3, #16
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054fe:	4b76      	ldr	r3, [pc, #472]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005504:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800550c:	4972      	ldr	r1, [pc, #456]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0320 	and.w	r3, r3, #32
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00a      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005520:	4b6d      	ldr	r3, [pc, #436]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005526:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800552e:	496a      	ldr	r1, [pc, #424]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005542:	4b65      	ldr	r3, [pc, #404]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005548:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005550:	4961      	ldr	r1, [pc, #388]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005564:	4b5c      	ldr	r3, [pc, #368]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005572:	4959      	ldr	r1, [pc, #356]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005586:	4b54      	ldr	r3, [pc, #336]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005594:	4950      	ldr	r1, [pc, #320]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055a8:	4b4b      	ldr	r3, [pc, #300]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b6:	4948      	ldr	r1, [pc, #288]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055ca:	4b43      	ldr	r3, [pc, #268]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d8:	493f      	ldr	r1, [pc, #252]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d028      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055ec:	4b3a      	ldr	r3, [pc, #232]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055fa:	4937      	ldr	r1, [pc, #220]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005606:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800560a:	d106      	bne.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800560c:	4b32      	ldr	r3, [pc, #200]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	4a31      	ldr	r2, [pc, #196]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005612:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005616:	60d3      	str	r3, [r2, #12]
 8005618:	e011      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800561e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005622:	d10c      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3304      	adds	r3, #4
 8005628:	2101      	movs	r1, #1
 800562a:	4618      	mov	r0, r3
 800562c:	f000 f8d8 	bl	80057e0 <RCCEx_PLLSAI1_Config>
 8005630:	4603      	mov	r3, r0
 8005632:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005634:	7cfb      	ldrb	r3, [r7, #19]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800563a:	7cfb      	ldrb	r3, [r7, #19]
 800563c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d028      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800564a:	4b23      	ldr	r3, [pc, #140]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800564c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005650:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005658:	491f      	ldr	r1, [pc, #124]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005664:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005668:	d106      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800566a:	4b1b      	ldr	r3, [pc, #108]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	4a1a      	ldr	r2, [pc, #104]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005670:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005674:	60d3      	str	r3, [r2, #12]
 8005676:	e011      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800567c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005680:	d10c      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	3304      	adds	r3, #4
 8005686:	2101      	movs	r1, #1
 8005688:	4618      	mov	r0, r3
 800568a:	f000 f8a9 	bl	80057e0 <RCCEx_PLLSAI1_Config>
 800568e:	4603      	mov	r3, r0
 8005690:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005692:	7cfb      	ldrb	r3, [r7, #19]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005698:	7cfb      	ldrb	r3, [r7, #19]
 800569a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d02b      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056a8:	4b0b      	ldr	r3, [pc, #44]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056b6:	4908      	ldr	r1, [pc, #32]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056c6:	d109      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056c8:	4b03      	ldr	r3, [pc, #12]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	4a02      	ldr	r2, [pc, #8]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056d2:	60d3      	str	r3, [r2, #12]
 80056d4:	e014      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80056d6:	bf00      	nop
 80056d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056e4:	d10c      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	3304      	adds	r3, #4
 80056ea:	2101      	movs	r1, #1
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 f877 	bl	80057e0 <RCCEx_PLLSAI1_Config>
 80056f2:	4603      	mov	r3, r0
 80056f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056f6:	7cfb      	ldrb	r3, [r7, #19]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80056fc:	7cfb      	ldrb	r3, [r7, #19]
 80056fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d02f      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800570c:	4b2b      	ldr	r3, [pc, #172]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800570e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005712:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800571a:	4928      	ldr	r1, [pc, #160]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800571c:	4313      	orrs	r3, r2
 800571e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005726:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800572a:	d10d      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	2102      	movs	r1, #2
 8005732:	4618      	mov	r0, r3
 8005734:	f000 f854 	bl	80057e0 <RCCEx_PLLSAI1_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800573c:	7cfb      	ldrb	r3, [r7, #19]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d014      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005742:	7cfb      	ldrb	r3, [r7, #19]
 8005744:	74bb      	strb	r3, [r7, #18]
 8005746:	e011      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800574c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005750:	d10c      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	3320      	adds	r3, #32
 8005756:	2102      	movs	r1, #2
 8005758:	4618      	mov	r0, r3
 800575a:	f000 f935 	bl	80059c8 <RCCEx_PLLSAI2_Config>
 800575e:	4603      	mov	r3, r0
 8005760:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005762:	7cfb      	ldrb	r3, [r7, #19]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005768:	7cfb      	ldrb	r3, [r7, #19]
 800576a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005778:	4b10      	ldr	r3, [pc, #64]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800577a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800577e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005786:	490d      	ldr	r1, [pc, #52]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005788:	4313      	orrs	r3, r2
 800578a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00b      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800579a:	4b08      	ldr	r3, [pc, #32]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800579c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057aa:	4904      	ldr	r1, [pc, #16]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80057b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40021000 	.word	0x40021000

080057c0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80057c4:	4b05      	ldr	r3, [pc, #20]	@ (80057dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a04      	ldr	r2, [pc, #16]	@ (80057dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80057ca:	f043 0304 	orr.w	r3, r3, #4
 80057ce:	6013      	str	r3, [r2, #0]
}
 80057d0:	bf00      	nop
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	40021000 	.word	0x40021000

080057e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057ee:	4b75      	ldr	r3, [pc, #468]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f003 0303 	and.w	r3, r3, #3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d018      	beq.n	800582c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80057fa:	4b72      	ldr	r3, [pc, #456]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f003 0203 	and.w	r2, r3, #3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d10d      	bne.n	8005826 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
       ||
 800580e:	2b00      	cmp	r3, #0
 8005810:	d009      	beq.n	8005826 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005812:	4b6c      	ldr	r3, [pc, #432]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	091b      	lsrs	r3, r3, #4
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
       ||
 8005822:	429a      	cmp	r2, r3
 8005824:	d047      	beq.n	80058b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	73fb      	strb	r3, [r7, #15]
 800582a:	e044      	b.n	80058b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b03      	cmp	r3, #3
 8005832:	d018      	beq.n	8005866 <RCCEx_PLLSAI1_Config+0x86>
 8005834:	2b03      	cmp	r3, #3
 8005836:	d825      	bhi.n	8005884 <RCCEx_PLLSAI1_Config+0xa4>
 8005838:	2b01      	cmp	r3, #1
 800583a:	d002      	beq.n	8005842 <RCCEx_PLLSAI1_Config+0x62>
 800583c:	2b02      	cmp	r3, #2
 800583e:	d009      	beq.n	8005854 <RCCEx_PLLSAI1_Config+0x74>
 8005840:	e020      	b.n	8005884 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005842:	4b60      	ldr	r3, [pc, #384]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d11d      	bne.n	800588a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005852:	e01a      	b.n	800588a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005854:	4b5b      	ldr	r3, [pc, #364]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800585c:	2b00      	cmp	r3, #0
 800585e:	d116      	bne.n	800588e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005864:	e013      	b.n	800588e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005866:	4b57      	ldr	r3, [pc, #348]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10f      	bne.n	8005892 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005872:	4b54      	ldr	r3, [pc, #336]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d109      	bne.n	8005892 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005882:	e006      	b.n	8005892 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	73fb      	strb	r3, [r7, #15]
      break;
 8005888:	e004      	b.n	8005894 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800588a:	bf00      	nop
 800588c:	e002      	b.n	8005894 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800588e:	bf00      	nop
 8005890:	e000      	b.n	8005894 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005892:	bf00      	nop
    }

    if(status == HAL_OK)
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10d      	bne.n	80058b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800589a:	4b4a      	ldr	r3, [pc, #296]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6819      	ldr	r1, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	430b      	orrs	r3, r1
 80058b0:	4944      	ldr	r1, [pc, #272]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d17d      	bne.n	80059b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80058bc:	4b41      	ldr	r3, [pc, #260]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a40      	ldr	r2, [pc, #256]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80058c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c8:	f7fc ffb2 	bl	8002830 <HAL_GetTick>
 80058cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058ce:	e009      	b.n	80058e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058d0:	f7fc ffae 	bl	8002830 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d902      	bls.n	80058e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	73fb      	strb	r3, [r7, #15]
        break;
 80058e2:	e005      	b.n	80058f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058e4:	4b37      	ldr	r3, [pc, #220]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1ef      	bne.n	80058d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d160      	bne.n	80059b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d111      	bne.n	8005920 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058fc:	4b31      	ldr	r3, [pc, #196]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005904:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6892      	ldr	r2, [r2, #8]
 800590c:	0211      	lsls	r1, r2, #8
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	68d2      	ldr	r2, [r2, #12]
 8005912:	0912      	lsrs	r2, r2, #4
 8005914:	0452      	lsls	r2, r2, #17
 8005916:	430a      	orrs	r2, r1
 8005918:	492a      	ldr	r1, [pc, #168]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800591a:	4313      	orrs	r3, r2
 800591c:	610b      	str	r3, [r1, #16]
 800591e:	e027      	b.n	8005970 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d112      	bne.n	800594c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005926:	4b27      	ldr	r3, [pc, #156]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800592e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6892      	ldr	r2, [r2, #8]
 8005936:	0211      	lsls	r1, r2, #8
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6912      	ldr	r2, [r2, #16]
 800593c:	0852      	lsrs	r2, r2, #1
 800593e:	3a01      	subs	r2, #1
 8005940:	0552      	lsls	r2, r2, #21
 8005942:	430a      	orrs	r2, r1
 8005944:	491f      	ldr	r1, [pc, #124]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005946:	4313      	orrs	r3, r2
 8005948:	610b      	str	r3, [r1, #16]
 800594a:	e011      	b.n	8005970 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800594c:	4b1d      	ldr	r3, [pc, #116]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005954:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6892      	ldr	r2, [r2, #8]
 800595c:	0211      	lsls	r1, r2, #8
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6952      	ldr	r2, [r2, #20]
 8005962:	0852      	lsrs	r2, r2, #1
 8005964:	3a01      	subs	r2, #1
 8005966:	0652      	lsls	r2, r2, #25
 8005968:	430a      	orrs	r2, r1
 800596a:	4916      	ldr	r1, [pc, #88]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800596c:	4313      	orrs	r3, r2
 800596e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005970:	4b14      	ldr	r3, [pc, #80]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a13      	ldr	r2, [pc, #76]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005976:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800597a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597c:	f7fc ff58 	bl	8002830 <HAL_GetTick>
 8005980:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005982:	e009      	b.n	8005998 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005984:	f7fc ff54 	bl	8002830 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d902      	bls.n	8005998 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	73fb      	strb	r3, [r7, #15]
          break;
 8005996:	e005      	b.n	80059a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005998:	4b0a      	ldr	r3, [pc, #40]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d0ef      	beq.n	8005984 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d106      	bne.n	80059b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80059aa:	4b06      	ldr	r3, [pc, #24]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ac:	691a      	ldr	r2, [r3, #16]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	4904      	ldr	r1, [pc, #16]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	40021000 	.word	0x40021000

080059c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d018      	beq.n	8005a14 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80059e2:	4b67      	ldr	r3, [pc, #412]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f003 0203 	and.w	r2, r3, #3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d10d      	bne.n	8005a0e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
       ||
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d009      	beq.n	8005a0e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80059fa:	4b61      	ldr	r3, [pc, #388]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	091b      	lsrs	r3, r3, #4
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
       ||
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d047      	beq.n	8005a9e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	73fb      	strb	r3, [r7, #15]
 8005a12:	e044      	b.n	8005a9e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d018      	beq.n	8005a4e <RCCEx_PLLSAI2_Config+0x86>
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d825      	bhi.n	8005a6c <RCCEx_PLLSAI2_Config+0xa4>
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d002      	beq.n	8005a2a <RCCEx_PLLSAI2_Config+0x62>
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d009      	beq.n	8005a3c <RCCEx_PLLSAI2_Config+0x74>
 8005a28:	e020      	b.n	8005a6c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a2a:	4b55      	ldr	r3, [pc, #340]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d11d      	bne.n	8005a72 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a3a:	e01a      	b.n	8005a72 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a3c:	4b50      	ldr	r3, [pc, #320]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d116      	bne.n	8005a76 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a4c:	e013      	b.n	8005a76 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a4e:	4b4c      	ldr	r3, [pc, #304]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10f      	bne.n	8005a7a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a5a:	4b49      	ldr	r3, [pc, #292]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d109      	bne.n	8005a7a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a6a:	e006      	b.n	8005a7a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a70:	e004      	b.n	8005a7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a72:	bf00      	nop
 8005a74:	e002      	b.n	8005a7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a76:	bf00      	nop
 8005a78:	e000      	b.n	8005a7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10d      	bne.n	8005a9e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a82:	4b3f      	ldr	r3, [pc, #252]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6819      	ldr	r1, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	430b      	orrs	r3, r1
 8005a98:	4939      	ldr	r1, [pc, #228]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d167      	bne.n	8005b74 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005aa4:	4b36      	ldr	r3, [pc, #216]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a35      	ldr	r2, [pc, #212]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab0:	f7fc febe 	bl	8002830 <HAL_GetTick>
 8005ab4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ab6:	e009      	b.n	8005acc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ab8:	f7fc feba 	bl	8002830 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d902      	bls.n	8005acc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	73fb      	strb	r3, [r7, #15]
        break;
 8005aca:	e005      	b.n	8005ad8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005acc:	4b2c      	ldr	r3, [pc, #176]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1ef      	bne.n	8005ab8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d14a      	bne.n	8005b74 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d111      	bne.n	8005b08 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ae4:	4b26      	ldr	r3, [pc, #152]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005aec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	6892      	ldr	r2, [r2, #8]
 8005af4:	0211      	lsls	r1, r2, #8
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	68d2      	ldr	r2, [r2, #12]
 8005afa:	0912      	lsrs	r2, r2, #4
 8005afc:	0452      	lsls	r2, r2, #17
 8005afe:	430a      	orrs	r2, r1
 8005b00:	491f      	ldr	r1, [pc, #124]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	614b      	str	r3, [r1, #20]
 8005b06:	e011      	b.n	8005b2c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b08:	4b1d      	ldr	r3, [pc, #116]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005b10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6892      	ldr	r2, [r2, #8]
 8005b18:	0211      	lsls	r1, r2, #8
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	6912      	ldr	r2, [r2, #16]
 8005b1e:	0852      	lsrs	r2, r2, #1
 8005b20:	3a01      	subs	r2, #1
 8005b22:	0652      	lsls	r2, r2, #25
 8005b24:	430a      	orrs	r2, r1
 8005b26:	4916      	ldr	r1, [pc, #88]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005b2c:	4b14      	ldr	r3, [pc, #80]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a13      	ldr	r2, [pc, #76]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b38:	f7fc fe7a 	bl	8002830 <HAL_GetTick>
 8005b3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b3e:	e009      	b.n	8005b54 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b40:	f7fc fe76 	bl	8002830 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d902      	bls.n	8005b54 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	73fb      	strb	r3, [r7, #15]
          break;
 8005b52:	e005      	b.n	8005b60 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b54:	4b0a      	ldr	r3, [pc, #40]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0ef      	beq.n	8005b40 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d106      	bne.n	8005b74 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005b66:	4b06      	ldr	r3, [pc, #24]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b68:	695a      	ldr	r2, [r3, #20]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	4904      	ldr	r1, [pc, #16]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	40021000 	.word	0x40021000

08005b84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e095      	b.n	8005cc2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d108      	bne.n	8005bb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ba6:	d009      	beq.n	8005bbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	61da      	str	r2, [r3, #28]
 8005bae:	e005      	b.n	8005bbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fc f904 	bl	8001de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bf2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005bfc:	d902      	bls.n	8005c04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	e002      	b.n	8005c0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005c12:	d007      	beq.n	8005c24 <HAL_SPI_Init+0xa0>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c1c:	d002      	beq.n	8005c24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c34:	431a      	orrs	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c66:	ea42 0103 	orr.w	r1, r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	0c1b      	lsrs	r3, r3, #16
 8005c80:	f003 0204 	and.w	r2, r3, #4
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c88:	f003 0310 	and.w	r3, r3, #16
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c92:	f003 0308 	and.w	r3, r3, #8
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005ca0:	ea42 0103 	orr.w	r1, r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b082      	sub	sp, #8
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e040      	b.n	8005d5e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d106      	bne.n	8005cf2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7fc f8bd 	bl	8001e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2224      	movs	r2, #36	@ 0x24
 8005cf6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0201 	bic.w	r2, r2, #1
 8005d06:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fb69 	bl	80063e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f8ae 	bl	8005e78 <UART_SetConfig>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e01b      	b.n	8005d5e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d34:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d44:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f042 0201 	orr.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fbe8 	bl	800652c <UART_CheckIdleState>
 8005d5c:	4603      	mov	r3, r0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b08a      	sub	sp, #40	@ 0x28
 8005d6a:	af02      	add	r7, sp, #8
 8005d6c:	60f8      	str	r0, [r7, #12]
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	603b      	str	r3, [r7, #0]
 8005d72:	4613      	mov	r3, r2
 8005d74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d7a:	2b20      	cmp	r3, #32
 8005d7c:	d177      	bne.n	8005e6e <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <HAL_UART_Transmit+0x24>
 8005d84:	88fb      	ldrh	r3, [r7, #6]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e070      	b.n	8005e70 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2221      	movs	r2, #33	@ 0x21
 8005d9a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d9c:	f7fc fd48 	bl	8002830 <HAL_GetTick>
 8005da0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	88fa      	ldrh	r2, [r7, #6]
 8005da6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	88fa      	ldrh	r2, [r7, #6]
 8005dae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dba:	d108      	bne.n	8005dce <HAL_UART_Transmit+0x68>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d104      	bne.n	8005dce <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	61bb      	str	r3, [r7, #24]
 8005dcc:	e003      	b.n	8005dd6 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005dd6:	e02f      	b.n	8005e38 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2200      	movs	r2, #0
 8005de0:	2180      	movs	r1, #128	@ 0x80
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 fc4a 	bl	800667c <UART_WaitOnFlagUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d004      	beq.n	8005df8 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2220      	movs	r2, #32
 8005df2:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e03b      	b.n	8005e70 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10b      	bne.n	8005e16 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	881a      	ldrh	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e0a:	b292      	uxth	r2, r2
 8005e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	3302      	adds	r3, #2
 8005e12:	61bb      	str	r3, [r7, #24]
 8005e14:	e007      	b.n	8005e26 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	781a      	ldrb	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	3301      	adds	r3, #1
 8005e24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1c9      	bne.n	8005dd8 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2140      	movs	r1, #64	@ 0x40
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f000 fc14 	bl	800667c <UART_WaitOnFlagUntilTimeout>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d004      	beq.n	8005e64 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e005      	b.n	8005e70 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2220      	movs	r2, #32
 8005e68:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	e000      	b.n	8005e70 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005e6e:	2302      	movs	r3, #2
  }
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3720      	adds	r7, #32
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e7c:	b08a      	sub	sp, #40	@ 0x28
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	431a      	orrs	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	431a      	orrs	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	4ba4      	ldr	r3, [pc, #656]	@ (8006138 <UART_SetConfig+0x2c0>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	6812      	ldr	r2, [r2, #0]
 8005eae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005eb0:	430b      	orrs	r3, r1
 8005eb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	68da      	ldr	r2, [r3, #12]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a99      	ldr	r2, [pc, #612]	@ (800613c <UART_SetConfig+0x2c4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d004      	beq.n	8005ee4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a90      	ldr	r2, [pc, #576]	@ (8006140 <UART_SetConfig+0x2c8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d126      	bne.n	8005f50 <UART_SetConfig+0xd8>
 8005f02:	4b90      	ldr	r3, [pc, #576]	@ (8006144 <UART_SetConfig+0x2cc>)
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f08:	f003 0303 	and.w	r3, r3, #3
 8005f0c:	2b03      	cmp	r3, #3
 8005f0e:	d81b      	bhi.n	8005f48 <UART_SetConfig+0xd0>
 8005f10:	a201      	add	r2, pc, #4	@ (adr r2, 8005f18 <UART_SetConfig+0xa0>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005f29 	.word	0x08005f29
 8005f1c:	08005f39 	.word	0x08005f39
 8005f20:	08005f31 	.word	0x08005f31
 8005f24:	08005f41 	.word	0x08005f41
 8005f28:	2301      	movs	r3, #1
 8005f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f2e:	e116      	b.n	800615e <UART_SetConfig+0x2e6>
 8005f30:	2302      	movs	r3, #2
 8005f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f36:	e112      	b.n	800615e <UART_SetConfig+0x2e6>
 8005f38:	2304      	movs	r3, #4
 8005f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f3e:	e10e      	b.n	800615e <UART_SetConfig+0x2e6>
 8005f40:	2308      	movs	r3, #8
 8005f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f46:	e10a      	b.n	800615e <UART_SetConfig+0x2e6>
 8005f48:	2310      	movs	r3, #16
 8005f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f4e:	e106      	b.n	800615e <UART_SetConfig+0x2e6>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a7c      	ldr	r2, [pc, #496]	@ (8006148 <UART_SetConfig+0x2d0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d138      	bne.n	8005fcc <UART_SetConfig+0x154>
 8005f5a:	4b7a      	ldr	r3, [pc, #488]	@ (8006144 <UART_SetConfig+0x2cc>)
 8005f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f60:	f003 030c 	and.w	r3, r3, #12
 8005f64:	2b0c      	cmp	r3, #12
 8005f66:	d82d      	bhi.n	8005fc4 <UART_SetConfig+0x14c>
 8005f68:	a201      	add	r2, pc, #4	@ (adr r2, 8005f70 <UART_SetConfig+0xf8>)
 8005f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6e:	bf00      	nop
 8005f70:	08005fa5 	.word	0x08005fa5
 8005f74:	08005fc5 	.word	0x08005fc5
 8005f78:	08005fc5 	.word	0x08005fc5
 8005f7c:	08005fc5 	.word	0x08005fc5
 8005f80:	08005fb5 	.word	0x08005fb5
 8005f84:	08005fc5 	.word	0x08005fc5
 8005f88:	08005fc5 	.word	0x08005fc5
 8005f8c:	08005fc5 	.word	0x08005fc5
 8005f90:	08005fad 	.word	0x08005fad
 8005f94:	08005fc5 	.word	0x08005fc5
 8005f98:	08005fc5 	.word	0x08005fc5
 8005f9c:	08005fc5 	.word	0x08005fc5
 8005fa0:	08005fbd 	.word	0x08005fbd
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005faa:	e0d8      	b.n	800615e <UART_SetConfig+0x2e6>
 8005fac:	2302      	movs	r3, #2
 8005fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fb2:	e0d4      	b.n	800615e <UART_SetConfig+0x2e6>
 8005fb4:	2304      	movs	r3, #4
 8005fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fba:	e0d0      	b.n	800615e <UART_SetConfig+0x2e6>
 8005fbc:	2308      	movs	r3, #8
 8005fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fc2:	e0cc      	b.n	800615e <UART_SetConfig+0x2e6>
 8005fc4:	2310      	movs	r3, #16
 8005fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fca:	e0c8      	b.n	800615e <UART_SetConfig+0x2e6>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a5e      	ldr	r2, [pc, #376]	@ (800614c <UART_SetConfig+0x2d4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d125      	bne.n	8006022 <UART_SetConfig+0x1aa>
 8005fd6:	4b5b      	ldr	r3, [pc, #364]	@ (8006144 <UART_SetConfig+0x2cc>)
 8005fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fdc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005fe0:	2b30      	cmp	r3, #48	@ 0x30
 8005fe2:	d016      	beq.n	8006012 <UART_SetConfig+0x19a>
 8005fe4:	2b30      	cmp	r3, #48	@ 0x30
 8005fe6:	d818      	bhi.n	800601a <UART_SetConfig+0x1a2>
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	d00a      	beq.n	8006002 <UART_SetConfig+0x18a>
 8005fec:	2b20      	cmp	r3, #32
 8005fee:	d814      	bhi.n	800601a <UART_SetConfig+0x1a2>
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <UART_SetConfig+0x182>
 8005ff4:	2b10      	cmp	r3, #16
 8005ff6:	d008      	beq.n	800600a <UART_SetConfig+0x192>
 8005ff8:	e00f      	b.n	800601a <UART_SetConfig+0x1a2>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006000:	e0ad      	b.n	800615e <UART_SetConfig+0x2e6>
 8006002:	2302      	movs	r3, #2
 8006004:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006008:	e0a9      	b.n	800615e <UART_SetConfig+0x2e6>
 800600a:	2304      	movs	r3, #4
 800600c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006010:	e0a5      	b.n	800615e <UART_SetConfig+0x2e6>
 8006012:	2308      	movs	r3, #8
 8006014:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006018:	e0a1      	b.n	800615e <UART_SetConfig+0x2e6>
 800601a:	2310      	movs	r3, #16
 800601c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006020:	e09d      	b.n	800615e <UART_SetConfig+0x2e6>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a4a      	ldr	r2, [pc, #296]	@ (8006150 <UART_SetConfig+0x2d8>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d125      	bne.n	8006078 <UART_SetConfig+0x200>
 800602c:	4b45      	ldr	r3, [pc, #276]	@ (8006144 <UART_SetConfig+0x2cc>)
 800602e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006032:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006036:	2bc0      	cmp	r3, #192	@ 0xc0
 8006038:	d016      	beq.n	8006068 <UART_SetConfig+0x1f0>
 800603a:	2bc0      	cmp	r3, #192	@ 0xc0
 800603c:	d818      	bhi.n	8006070 <UART_SetConfig+0x1f8>
 800603e:	2b80      	cmp	r3, #128	@ 0x80
 8006040:	d00a      	beq.n	8006058 <UART_SetConfig+0x1e0>
 8006042:	2b80      	cmp	r3, #128	@ 0x80
 8006044:	d814      	bhi.n	8006070 <UART_SetConfig+0x1f8>
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <UART_SetConfig+0x1d8>
 800604a:	2b40      	cmp	r3, #64	@ 0x40
 800604c:	d008      	beq.n	8006060 <UART_SetConfig+0x1e8>
 800604e:	e00f      	b.n	8006070 <UART_SetConfig+0x1f8>
 8006050:	2300      	movs	r3, #0
 8006052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006056:	e082      	b.n	800615e <UART_SetConfig+0x2e6>
 8006058:	2302      	movs	r3, #2
 800605a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800605e:	e07e      	b.n	800615e <UART_SetConfig+0x2e6>
 8006060:	2304      	movs	r3, #4
 8006062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006066:	e07a      	b.n	800615e <UART_SetConfig+0x2e6>
 8006068:	2308      	movs	r3, #8
 800606a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800606e:	e076      	b.n	800615e <UART_SetConfig+0x2e6>
 8006070:	2310      	movs	r3, #16
 8006072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006076:	e072      	b.n	800615e <UART_SetConfig+0x2e6>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a35      	ldr	r2, [pc, #212]	@ (8006154 <UART_SetConfig+0x2dc>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d12a      	bne.n	80060d8 <UART_SetConfig+0x260>
 8006082:	4b30      	ldr	r3, [pc, #192]	@ (8006144 <UART_SetConfig+0x2cc>)
 8006084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006088:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800608c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006090:	d01a      	beq.n	80060c8 <UART_SetConfig+0x250>
 8006092:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006096:	d81b      	bhi.n	80060d0 <UART_SetConfig+0x258>
 8006098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800609c:	d00c      	beq.n	80060b8 <UART_SetConfig+0x240>
 800609e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060a2:	d815      	bhi.n	80060d0 <UART_SetConfig+0x258>
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <UART_SetConfig+0x238>
 80060a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060ac:	d008      	beq.n	80060c0 <UART_SetConfig+0x248>
 80060ae:	e00f      	b.n	80060d0 <UART_SetConfig+0x258>
 80060b0:	2300      	movs	r3, #0
 80060b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060b6:	e052      	b.n	800615e <UART_SetConfig+0x2e6>
 80060b8:	2302      	movs	r3, #2
 80060ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060be:	e04e      	b.n	800615e <UART_SetConfig+0x2e6>
 80060c0:	2304      	movs	r3, #4
 80060c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060c6:	e04a      	b.n	800615e <UART_SetConfig+0x2e6>
 80060c8:	2308      	movs	r3, #8
 80060ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ce:	e046      	b.n	800615e <UART_SetConfig+0x2e6>
 80060d0:	2310      	movs	r3, #16
 80060d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060d6:	e042      	b.n	800615e <UART_SetConfig+0x2e6>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a17      	ldr	r2, [pc, #92]	@ (800613c <UART_SetConfig+0x2c4>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d13a      	bne.n	8006158 <UART_SetConfig+0x2e0>
 80060e2:	4b18      	ldr	r3, [pc, #96]	@ (8006144 <UART_SetConfig+0x2cc>)
 80060e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80060ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060f0:	d01a      	beq.n	8006128 <UART_SetConfig+0x2b0>
 80060f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060f6:	d81b      	bhi.n	8006130 <UART_SetConfig+0x2b8>
 80060f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060fc:	d00c      	beq.n	8006118 <UART_SetConfig+0x2a0>
 80060fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006102:	d815      	bhi.n	8006130 <UART_SetConfig+0x2b8>
 8006104:	2b00      	cmp	r3, #0
 8006106:	d003      	beq.n	8006110 <UART_SetConfig+0x298>
 8006108:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800610c:	d008      	beq.n	8006120 <UART_SetConfig+0x2a8>
 800610e:	e00f      	b.n	8006130 <UART_SetConfig+0x2b8>
 8006110:	2300      	movs	r3, #0
 8006112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006116:	e022      	b.n	800615e <UART_SetConfig+0x2e6>
 8006118:	2302      	movs	r3, #2
 800611a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800611e:	e01e      	b.n	800615e <UART_SetConfig+0x2e6>
 8006120:	2304      	movs	r3, #4
 8006122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006126:	e01a      	b.n	800615e <UART_SetConfig+0x2e6>
 8006128:	2308      	movs	r3, #8
 800612a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800612e:	e016      	b.n	800615e <UART_SetConfig+0x2e6>
 8006130:	2310      	movs	r3, #16
 8006132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006136:	e012      	b.n	800615e <UART_SetConfig+0x2e6>
 8006138:	efff69f3 	.word	0xefff69f3
 800613c:	40008000 	.word	0x40008000
 8006140:	40013800 	.word	0x40013800
 8006144:	40021000 	.word	0x40021000
 8006148:	40004400 	.word	0x40004400
 800614c:	40004800 	.word	0x40004800
 8006150:	40004c00 	.word	0x40004c00
 8006154:	40005000 	.word	0x40005000
 8006158:	2310      	movs	r3, #16
 800615a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a9f      	ldr	r2, [pc, #636]	@ (80063e0 <UART_SetConfig+0x568>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d17a      	bne.n	800625e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006168:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800616c:	2b08      	cmp	r3, #8
 800616e:	d824      	bhi.n	80061ba <UART_SetConfig+0x342>
 8006170:	a201      	add	r2, pc, #4	@ (adr r2, 8006178 <UART_SetConfig+0x300>)
 8006172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006176:	bf00      	nop
 8006178:	0800619d 	.word	0x0800619d
 800617c:	080061bb 	.word	0x080061bb
 8006180:	080061a5 	.word	0x080061a5
 8006184:	080061bb 	.word	0x080061bb
 8006188:	080061ab 	.word	0x080061ab
 800618c:	080061bb 	.word	0x080061bb
 8006190:	080061bb 	.word	0x080061bb
 8006194:	080061bb 	.word	0x080061bb
 8006198:	080061b3 	.word	0x080061b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800619c:	f7fe ff9a 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 80061a0:	61f8      	str	r0, [r7, #28]
        break;
 80061a2:	e010      	b.n	80061c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061a4:	4b8f      	ldr	r3, [pc, #572]	@ (80063e4 <UART_SetConfig+0x56c>)
 80061a6:	61fb      	str	r3, [r7, #28]
        break;
 80061a8:	e00d      	b.n	80061c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061aa:	f7fe fefb 	bl	8004fa4 <HAL_RCC_GetSysClockFreq>
 80061ae:	61f8      	str	r0, [r7, #28]
        break;
 80061b0:	e009      	b.n	80061c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061b6:	61fb      	str	r3, [r7, #28]
        break;
 80061b8:	e005      	b.n	80061c6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80061c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 80fb 	beq.w	80063c4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	4613      	mov	r3, r2
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	4413      	add	r3, r2
 80061d8:	69fa      	ldr	r2, [r7, #28]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d305      	bcc.n	80061ea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061e4:	69fa      	ldr	r2, [r7, #28]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d903      	bls.n	80061f2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80061f0:	e0e8      	b.n	80063c4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	2200      	movs	r2, #0
 80061f6:	461c      	mov	r4, r3
 80061f8:	4615      	mov	r5, r2
 80061fa:	f04f 0200 	mov.w	r2, #0
 80061fe:	f04f 0300 	mov.w	r3, #0
 8006202:	022b      	lsls	r3, r5, #8
 8006204:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006208:	0222      	lsls	r2, r4, #8
 800620a:	68f9      	ldr	r1, [r7, #12]
 800620c:	6849      	ldr	r1, [r1, #4]
 800620e:	0849      	lsrs	r1, r1, #1
 8006210:	2000      	movs	r0, #0
 8006212:	4688      	mov	r8, r1
 8006214:	4681      	mov	r9, r0
 8006216:	eb12 0a08 	adds.w	sl, r2, r8
 800621a:	eb43 0b09 	adc.w	fp, r3, r9
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	603b      	str	r3, [r7, #0]
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800622c:	4650      	mov	r0, sl
 800622e:	4659      	mov	r1, fp
 8006230:	f7fa fd2a 	bl	8000c88 <__aeabi_uldivmod>
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	4613      	mov	r3, r2
 800623a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006242:	d308      	bcc.n	8006256 <UART_SetConfig+0x3de>
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800624a:	d204      	bcs.n	8006256 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	60da      	str	r2, [r3, #12]
 8006254:	e0b6      	b.n	80063c4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800625c:	e0b2      	b.n	80063c4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006266:	d15e      	bne.n	8006326 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006268:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800626c:	2b08      	cmp	r3, #8
 800626e:	d828      	bhi.n	80062c2 <UART_SetConfig+0x44a>
 8006270:	a201      	add	r2, pc, #4	@ (adr r2, 8006278 <UART_SetConfig+0x400>)
 8006272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006276:	bf00      	nop
 8006278:	0800629d 	.word	0x0800629d
 800627c:	080062a5 	.word	0x080062a5
 8006280:	080062ad 	.word	0x080062ad
 8006284:	080062c3 	.word	0x080062c3
 8006288:	080062b3 	.word	0x080062b3
 800628c:	080062c3 	.word	0x080062c3
 8006290:	080062c3 	.word	0x080062c3
 8006294:	080062c3 	.word	0x080062c3
 8006298:	080062bb 	.word	0x080062bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800629c:	f7fe ff1a 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 80062a0:	61f8      	str	r0, [r7, #28]
        break;
 80062a2:	e014      	b.n	80062ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062a4:	f7fe ff2c 	bl	8005100 <HAL_RCC_GetPCLK2Freq>
 80062a8:	61f8      	str	r0, [r7, #28]
        break;
 80062aa:	e010      	b.n	80062ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062ac:	4b4d      	ldr	r3, [pc, #308]	@ (80063e4 <UART_SetConfig+0x56c>)
 80062ae:	61fb      	str	r3, [r7, #28]
        break;
 80062b0:	e00d      	b.n	80062ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062b2:	f7fe fe77 	bl	8004fa4 <HAL_RCC_GetSysClockFreq>
 80062b6:	61f8      	str	r0, [r7, #28]
        break;
 80062b8:	e009      	b.n	80062ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062be:	61fb      	str	r3, [r7, #28]
        break;
 80062c0:	e005      	b.n	80062ce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80062cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d077      	beq.n	80063c4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	005a      	lsls	r2, r3, #1
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	085b      	lsrs	r3, r3, #1
 80062de:	441a      	add	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	2b0f      	cmp	r3, #15
 80062ee:	d916      	bls.n	800631e <UART_SetConfig+0x4a6>
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062f6:	d212      	bcs.n	800631e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	f023 030f 	bic.w	r3, r3, #15
 8006300:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	085b      	lsrs	r3, r3, #1
 8006306:	b29b      	uxth	r3, r3
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	b29a      	uxth	r2, r3
 800630e:	8afb      	ldrh	r3, [r7, #22]
 8006310:	4313      	orrs	r3, r2
 8006312:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	8afa      	ldrh	r2, [r7, #22]
 800631a:	60da      	str	r2, [r3, #12]
 800631c:	e052      	b.n	80063c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006324:	e04e      	b.n	80063c4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006326:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800632a:	2b08      	cmp	r3, #8
 800632c:	d827      	bhi.n	800637e <UART_SetConfig+0x506>
 800632e:	a201      	add	r2, pc, #4	@ (adr r2, 8006334 <UART_SetConfig+0x4bc>)
 8006330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006334:	08006359 	.word	0x08006359
 8006338:	08006361 	.word	0x08006361
 800633c:	08006369 	.word	0x08006369
 8006340:	0800637f 	.word	0x0800637f
 8006344:	0800636f 	.word	0x0800636f
 8006348:	0800637f 	.word	0x0800637f
 800634c:	0800637f 	.word	0x0800637f
 8006350:	0800637f 	.word	0x0800637f
 8006354:	08006377 	.word	0x08006377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006358:	f7fe febc 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 800635c:	61f8      	str	r0, [r7, #28]
        break;
 800635e:	e014      	b.n	800638a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006360:	f7fe fece 	bl	8005100 <HAL_RCC_GetPCLK2Freq>
 8006364:	61f8      	str	r0, [r7, #28]
        break;
 8006366:	e010      	b.n	800638a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006368:	4b1e      	ldr	r3, [pc, #120]	@ (80063e4 <UART_SetConfig+0x56c>)
 800636a:	61fb      	str	r3, [r7, #28]
        break;
 800636c:	e00d      	b.n	800638a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800636e:	f7fe fe19 	bl	8004fa4 <HAL_RCC_GetSysClockFreq>
 8006372:	61f8      	str	r0, [r7, #28]
        break;
 8006374:	e009      	b.n	800638a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800637a:	61fb      	str	r3, [r7, #28]
        break;
 800637c:	e005      	b.n	800638a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800637e:	2300      	movs	r3, #0
 8006380:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006388:	bf00      	nop
    }

    if (pclk != 0U)
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d019      	beq.n	80063c4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	085a      	lsrs	r2, r3, #1
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	441a      	add	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	2b0f      	cmp	r3, #15
 80063a8:	d909      	bls.n	80063be <UART_SetConfig+0x546>
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063b0:	d205      	bcs.n	80063be <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	60da      	str	r2, [r3, #12]
 80063bc:	e002      	b.n	80063c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80063d0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3728      	adds	r7, #40	@ 0x28
 80063d8:	46bd      	mov	sp, r7
 80063da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063de:	bf00      	nop
 80063e0:	40008000 	.word	0x40008000
 80063e4:	00f42400 	.word	0x00f42400

080063e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f4:	f003 0308 	and.w	r3, r3, #8
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647c:	f003 0310 	and.w	r3, r3, #16
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649e:	f003 0320 	and.w	r3, r3, #32
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01a      	beq.n	80064fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064e6:	d10a      	bne.n	80064fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	605a      	str	r2, [r3, #4]
  }
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b098      	sub	sp, #96	@ 0x60
 8006530:	af02      	add	r7, sp, #8
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800653c:	f7fc f978 	bl	8002830 <HAL_GetTick>
 8006540:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0308 	and.w	r3, r3, #8
 800654c:	2b08      	cmp	r3, #8
 800654e:	d12e      	bne.n	80065ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006550:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006558:	2200      	movs	r2, #0
 800655a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f88c 	bl	800667c <UART_WaitOnFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d021      	beq.n	80065ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006572:	e853 3f00 	ldrex	r3, [r3]
 8006576:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800657a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800657e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006588:	647b      	str	r3, [r7, #68]	@ 0x44
 800658a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800658e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006590:	e841 2300 	strex	r3, r2, [r1]
 8006594:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1e6      	bne.n	800656a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2220      	movs	r2, #32
 80065a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e062      	b.n	8006674 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b04      	cmp	r3, #4
 80065ba:	d149      	bne.n	8006650 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065c4:	2200      	movs	r2, #0
 80065c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f856 	bl	800667c <UART_WaitOnFlagUntilTimeout>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d03c      	beq.n	8006650 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065de:	e853 3f00 	ldrex	r3, [r3]
 80065e2:	623b      	str	r3, [r7, #32]
   return(result);
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
 80065f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80065f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065fc:	e841 2300 	strex	r3, r2, [r1]
 8006600:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1e6      	bne.n	80065d6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3308      	adds	r3, #8
 800660e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	e853 3f00 	ldrex	r3, [r3]
 8006616:	60fb      	str	r3, [r7, #12]
   return(result);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0301 	bic.w	r3, r3, #1
 800661e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3308      	adds	r3, #8
 8006626:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006628:	61fa      	str	r2, [r7, #28]
 800662a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662c:	69b9      	ldr	r1, [r7, #24]
 800662e:	69fa      	ldr	r2, [r7, #28]
 8006630:	e841 2300 	strex	r3, r2, [r1]
 8006634:	617b      	str	r3, [r7, #20]
   return(result);
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e5      	bne.n	8006608 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2220      	movs	r2, #32
 8006640:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e011      	b.n	8006674 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2220      	movs	r2, #32
 8006654:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2220      	movs	r2, #32
 800665a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3758      	adds	r7, #88	@ 0x58
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	4613      	mov	r3, r2
 800668a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800668c:	e04f      	b.n	800672e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006694:	d04b      	beq.n	800672e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006696:	f7fc f8cb 	bl	8002830 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d302      	bcc.n	80066ac <UART_WaitOnFlagUntilTimeout+0x30>
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e04e      	b.n	800674e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0304 	and.w	r3, r3, #4
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d037      	beq.n	800672e <UART_WaitOnFlagUntilTimeout+0xb2>
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b80      	cmp	r3, #128	@ 0x80
 80066c2:	d034      	beq.n	800672e <UART_WaitOnFlagUntilTimeout+0xb2>
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2b40      	cmp	r3, #64	@ 0x40
 80066c8:	d031      	beq.n	800672e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	f003 0308 	and.w	r3, r3, #8
 80066d4:	2b08      	cmp	r3, #8
 80066d6:	d110      	bne.n	80066fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2208      	movs	r2, #8
 80066de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 f838 	bl	8006756 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2208      	movs	r2, #8
 80066ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e029      	b.n	800674e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006704:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006708:	d111      	bne.n	800672e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006712:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 f81e 	bl	8006756 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2220      	movs	r2, #32
 800671e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e00f      	b.n	800674e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	69da      	ldr	r2, [r3, #28]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	4013      	ands	r3, r2
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	429a      	cmp	r2, r3
 800673c:	bf0c      	ite	eq
 800673e:	2301      	moveq	r3, #1
 8006740:	2300      	movne	r3, #0
 8006742:	b2db      	uxtb	r3, r3
 8006744:	461a      	mov	r2, r3
 8006746:	79fb      	ldrb	r3, [r7, #7]
 8006748:	429a      	cmp	r2, r3
 800674a:	d0a0      	beq.n	800668e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006756:	b480      	push	{r7}
 8006758:	b095      	sub	sp, #84	@ 0x54
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006766:	e853 3f00 	ldrex	r3, [r3]
 800676a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800676c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006772:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	461a      	mov	r2, r3
 800677a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800677c:	643b      	str	r3, [r7, #64]	@ 0x40
 800677e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006780:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006782:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006784:	e841 2300 	strex	r3, r2, [r1]
 8006788:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800678a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1e6      	bne.n	800675e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3308      	adds	r3, #8
 8006796:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	6a3b      	ldr	r3, [r7, #32]
 800679a:	e853 3f00 	ldrex	r3, [r3]
 800679e:	61fb      	str	r3, [r7, #28]
   return(result);
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	f023 0301 	bic.w	r3, r3, #1
 80067a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3308      	adds	r3, #8
 80067ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067b8:	e841 2300 	strex	r3, r2, [r1]
 80067bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1e5      	bne.n	8006790 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d118      	bne.n	80067fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	e853 3f00 	ldrex	r3, [r3]
 80067d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f023 0310 	bic.w	r3, r3, #16
 80067e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067ea:	61bb      	str	r3, [r7, #24]
 80067ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ee:	6979      	ldr	r1, [r7, #20]
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	e841 2300 	strex	r3, r2, [r1]
 80067f6:	613b      	str	r3, [r7, #16]
   return(result);
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1e6      	bne.n	80067cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006812:	bf00      	nop
 8006814:	3754      	adds	r7, #84	@ 0x54
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800681e:	b084      	sub	sp, #16
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	f107 001c 	add.w	r0, r7, #28
 800682c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fa69 	bl	8006d14 <USB_CoreReset>
 8006842:	4603      	mov	r3, r0
 8006844:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006846:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800684a:	2b00      	cmp	r3, #0
 800684c:	d106      	bne.n	800685c <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006852:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	639a      	str	r2, [r3, #56]	@ 0x38
 800685a:	e005      	b.n	8006868 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006860:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006868:	7bfb      	ldrb	r3, [r7, #15]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006874:	b004      	add	sp, #16
 8006876:	4770      	bx	lr

08006878 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f023 0201 	bic.w	r2, r3, #1
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	460b      	mov	r3, r1
 80068a4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068b6:	78fb      	ldrb	r3, [r7, #3]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d115      	bne.n	80068e8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80068c8:	200a      	movs	r0, #10
 80068ca:	f7fb ffbd 	bl	8002848 <HAL_Delay>
      ms += 10U;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	330a      	adds	r3, #10
 80068d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fa0f 	bl	8006cf8 <USB_GetMode>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d01e      	beq.n	800691e <USB_SetCurrentMode+0x84>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80068e4:	d9f0      	bls.n	80068c8 <USB_SetCurrentMode+0x2e>
 80068e6:	e01a      	b.n	800691e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80068e8:	78fb      	ldrb	r3, [r7, #3]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d115      	bne.n	800691a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80068fa:	200a      	movs	r0, #10
 80068fc:	f7fb ffa4 	bl	8002848 <HAL_Delay>
      ms += 10U;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	330a      	adds	r3, #10
 8006904:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f9f6 	bl	8006cf8 <USB_GetMode>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d005      	beq.n	800691e <USB_SetCurrentMode+0x84>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2bc7      	cmp	r3, #199	@ 0xc7
 8006916:	d9f0      	bls.n	80068fa <USB_SetCurrentMode+0x60>
 8006918:	e001      	b.n	800691e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e005      	b.n	800692a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2bc8      	cmp	r3, #200	@ 0xc8
 8006922:	d101      	bne.n	8006928 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006934:	b084      	sub	sp, #16
 8006936:	b580      	push	{r7, lr}
 8006938:	b086      	sub	sp, #24
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006942:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800694e:	2300      	movs	r3, #0
 8006950:	613b      	str	r3, [r7, #16]
 8006952:	e009      	b.n	8006968 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	3340      	adds	r3, #64	@ 0x40
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	2200      	movs	r2, #0
 8006960:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	3301      	adds	r3, #1
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	2b0e      	cmp	r3, #14
 800696c:	d9f2      	bls.n	8006954 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800696e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006972:	2b00      	cmp	r3, #0
 8006974:	d11c      	bne.n	80069b0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006984:	f043 0302 	orr.w	r3, r3, #2
 8006988:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800698e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	e005      	b.n	80069bc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80069c2:	461a      	mov	r2, r3
 80069c4:	2300      	movs	r3, #0
 80069c6:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80069c8:	2103      	movs	r1, #3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f95a 	bl	8006c84 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069d0:	2110      	movs	r1, #16
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f8f6 	bl	8006bc4 <USB_FlushTxFifo>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f920 	bl	8006c28 <USB_FlushRxFifo>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069f8:	461a      	mov	r2, r3
 80069fa:	2300      	movs	r3, #0
 80069fc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a04:	461a      	mov	r2, r3
 8006a06:	2300      	movs	r3, #0
 8006a08:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a10:	461a      	mov	r2, r3
 8006a12:	2300      	movs	r3, #0
 8006a14:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a16:	2300      	movs	r3, #0
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	e043      	b.n	8006aa4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a32:	d118      	bne.n	8006a66 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10a      	bne.n	8006a50 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a46:	461a      	mov	r2, r3
 8006a48:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	e013      	b.n	8006a78 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006a62:	6013      	str	r3, [r2, #0]
 8006a64:	e008      	b.n	8006a78 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a72:	461a      	mov	r2, r3
 8006a74:	2300      	movs	r3, #0
 8006a76:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a84:	461a      	mov	r2, r3
 8006a86:	2300      	movs	r3, #0
 8006a88:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a96:	461a      	mov	r2, r3
 8006a98:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	613b      	str	r3, [r7, #16]
 8006aa4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d3b5      	bcc.n	8006a1c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	613b      	str	r3, [r7, #16]
 8006ab4:	e043      	b.n	8006b3e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006acc:	d118      	bne.n	8006b00 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10a      	bne.n	8006aea <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	e013      	b.n	8006b12 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af6:	461a      	mov	r2, r3
 8006af8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	e008      	b.n	8006b12 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	2300      	movs	r3, #0
 8006b10:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b1e:	461a      	mov	r2, r3
 8006b20:	2300      	movs	r3, #0
 8006b22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b30:	461a      	mov	r2, r3
 8006b32:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006b36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	613b      	str	r3, [r7, #16]
 8006b3e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006b42:	461a      	mov	r2, r3
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d3b5      	bcc.n	8006ab6 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b5c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006b6a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	f043 0210 	orr.w	r2, r3, #16
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	699a      	ldr	r2, [r3, #24]
 8006b7c:	4b10      	ldr	r3, [pc, #64]	@ (8006bc0 <USB_DevInit+0x28c>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b84:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	f043 0208 	orr.w	r2, r3, #8
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b98:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d107      	bne.n	8006bb0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ba8:	f043 0304 	orr.w	r3, r3, #4
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bbc:	b004      	add	sp, #16
 8006bbe:	4770      	bx	lr
 8006bc0:	803c3800 	.word	0x803c3800

08006bc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bde:	d901      	bls.n	8006be4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e01b      	b.n	8006c1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	daf2      	bge.n	8006bd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	019b      	lsls	r3, r3, #6
 8006bf4:	f043 0220 	orr.w	r2, r3, #32
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c08:	d901      	bls.n	8006c0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e006      	b.n	8006c1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b20      	cmp	r3, #32
 8006c18:	d0f0      	beq.n	8006bfc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	3301      	adds	r3, #1
 8006c38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c40:	d901      	bls.n	8006c46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e018      	b.n	8006c78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	daf2      	bge.n	8006c34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2210      	movs	r2, #16
 8006c56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c64:	d901      	bls.n	8006c6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e006      	b.n	8006c78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	f003 0310 	and.w	r3, r3, #16
 8006c72:	2b10      	cmp	r3, #16
 8006c74:	d0f0      	beq.n	8006c58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	78fb      	ldrb	r3, [r7, #3]
 8006c9e:	68f9      	ldr	r1, [r7, #12]
 8006ca0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b085      	sub	sp, #20
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006cd0:	f023 0303 	bic.w	r3, r3, #3
 8006cd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ce4:	f043 0302 	orr.w	r3, r3, #2
 8006ce8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	f003 0301 	and.w	r3, r3, #1
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3301      	adds	r3, #1
 8006d24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d2c:	d901      	bls.n	8006d32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e01b      	b.n	8006d6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	daf2      	bge.n	8006d20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	f043 0201 	orr.w	r2, r3, #1
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d56:	d901      	bls.n	8006d5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e006      	b.n	8006d6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d0f0      	beq.n	8006d4a <USB_CoreReset+0x36>

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
	...

08006d78 <__NVIC_SetPriority>:
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	6039      	str	r1, [r7, #0]
 8006d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	db0a      	blt.n	8006da2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	b2da      	uxtb	r2, r3
 8006d90:	490c      	ldr	r1, [pc, #48]	@ (8006dc4 <__NVIC_SetPriority+0x4c>)
 8006d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d96:	0112      	lsls	r2, r2, #4
 8006d98:	b2d2      	uxtb	r2, r2
 8006d9a:	440b      	add	r3, r1
 8006d9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006da0:	e00a      	b.n	8006db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	4908      	ldr	r1, [pc, #32]	@ (8006dc8 <__NVIC_SetPriority+0x50>)
 8006da8:	79fb      	ldrb	r3, [r7, #7]
 8006daa:	f003 030f 	and.w	r3, r3, #15
 8006dae:	3b04      	subs	r3, #4
 8006db0:	0112      	lsls	r2, r2, #4
 8006db2:	b2d2      	uxtb	r2, r2
 8006db4:	440b      	add	r3, r1
 8006db6:	761a      	strb	r2, [r3, #24]
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	e000e100 	.word	0xe000e100
 8006dc8:	e000ed00 	.word	0xe000ed00

08006dcc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	f06f 0004 	mvn.w	r0, #4
 8006dd6:	f7ff ffcf 	bl	8006d78 <__NVIC_SetPriority>
#endif
}
 8006dda:	bf00      	nop
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006de6:	f3ef 8305 	mrs	r3, IPSR
 8006dea:	603b      	str	r3, [r7, #0]
  return(result);
 8006dec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006df2:	f06f 0305 	mvn.w	r3, #5
 8006df6:	607b      	str	r3, [r7, #4]
 8006df8:	e00c      	b.n	8006e14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8006e24 <osKernelInitialize+0x44>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d105      	bne.n	8006e0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e02:	4b08      	ldr	r3, [pc, #32]	@ (8006e24 <osKernelInitialize+0x44>)
 8006e04:	2201      	movs	r2, #1
 8006e06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	607b      	str	r3, [r7, #4]
 8006e0c:	e002      	b.n	8006e14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e14:	687b      	ldr	r3, [r7, #4]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	200019f0 	.word	0x200019f0

08006e28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e2e:	f3ef 8305 	mrs	r3, IPSR
 8006e32:	603b      	str	r3, [r7, #0]
  return(result);
 8006e34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006e3a:	f06f 0305 	mvn.w	r3, #5
 8006e3e:	607b      	str	r3, [r7, #4]
 8006e40:	e010      	b.n	8006e64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006e42:	4b0b      	ldr	r3, [pc, #44]	@ (8006e70 <osKernelStart+0x48>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d109      	bne.n	8006e5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006e4a:	f7ff ffbf 	bl	8006dcc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006e4e:	4b08      	ldr	r3, [pc, #32]	@ (8006e70 <osKernelStart+0x48>)
 8006e50:	2202      	movs	r2, #2
 8006e52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006e54:	f001 f928 	bl	80080a8 <vTaskStartScheduler>
      stat = osOK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	607b      	str	r3, [r7, #4]
 8006e5c:	e002      	b.n	8006e64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e64:	687b      	ldr	r3, [r7, #4]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	200019f0 	.word	0x200019f0

08006e74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08e      	sub	sp, #56	@ 0x38
 8006e78:	af04      	add	r7, sp, #16
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006e80:	2300      	movs	r3, #0
 8006e82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e84:	f3ef 8305 	mrs	r3, IPSR
 8006e88:	617b      	str	r3, [r7, #20]
  return(result);
 8006e8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d17e      	bne.n	8006f8e <osThreadNew+0x11a>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d07b      	beq.n	8006f8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006e96:	2380      	movs	r3, #128	@ 0x80
 8006e98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006e9a:	2318      	movs	r3, #24
 8006e9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d045      	beq.n	8006f3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d002      	beq.n	8006ebc <osThreadNew+0x48>
        name = attr->name;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d008      	beq.n	8006ee2 <osThreadNew+0x6e>
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	2b38      	cmp	r3, #56	@ 0x38
 8006ed4:	d805      	bhi.n	8006ee2 <osThreadNew+0x6e>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <osThreadNew+0x72>
        return (NULL);
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	e054      	b.n	8006f90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	089b      	lsrs	r3, r3, #2
 8006ef4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00e      	beq.n	8006f1c <osThreadNew+0xa8>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	2b5b      	cmp	r3, #91	@ 0x5b
 8006f04:	d90a      	bls.n	8006f1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d006      	beq.n	8006f1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d002      	beq.n	8006f1c <osThreadNew+0xa8>
        mem = 1;
 8006f16:	2301      	movs	r3, #1
 8006f18:	61bb      	str	r3, [r7, #24]
 8006f1a:	e010      	b.n	8006f3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10c      	bne.n	8006f3e <osThreadNew+0xca>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d108      	bne.n	8006f3e <osThreadNew+0xca>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d104      	bne.n	8006f3e <osThreadNew+0xca>
          mem = 0;
 8006f34:	2300      	movs	r3, #0
 8006f36:	61bb      	str	r3, [r7, #24]
 8006f38:	e001      	b.n	8006f3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d110      	bne.n	8006f66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f4c:	9202      	str	r2, [sp, #8]
 8006f4e:	9301      	str	r3, [sp, #4]
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	6a3a      	ldr	r2, [r7, #32]
 8006f58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 fec8 	bl	8007cf0 <xTaskCreateStatic>
 8006f60:	4603      	mov	r3, r0
 8006f62:	613b      	str	r3, [r7, #16]
 8006f64:	e013      	b.n	8006f8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d110      	bne.n	8006f8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	f107 0310 	add.w	r3, r7, #16
 8006f74:	9301      	str	r3, [sp, #4]
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f000 ff16 	bl	8007db0 <xTaskCreate>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d001      	beq.n	8006f8e <osThreadNew+0x11a>
            hTask = NULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006f8e:	693b      	ldr	r3, [r7, #16]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3728      	adds	r7, #40	@ 0x28
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fa0:	f3ef 8305 	mrs	r3, IPSR
 8006fa4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fa6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <osDelay+0x1c>
    stat = osErrorISR;
 8006fac:	f06f 0305 	mvn.w	r3, #5
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	e007      	b.n	8006fc4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f001 f83c 	bl	800803c <vTaskDelay>
    }
  }

  return (stat);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b08a      	sub	sp, #40	@ 0x28
 8006fd2:	af02      	add	r7, sp, #8
 8006fd4:	60f8      	str	r0, [r7, #12]
 8006fd6:	60b9      	str	r1, [r7, #8]
 8006fd8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fde:	f3ef 8305 	mrs	r3, IPSR
 8006fe2:	613b      	str	r3, [r7, #16]
  return(result);
 8006fe4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d15f      	bne.n	80070aa <osMessageQueueNew+0xdc>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d05c      	beq.n	80070aa <osMessageQueueNew+0xdc>
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d059      	beq.n	80070aa <osMessageQueueNew+0xdc>
    mem = -1;
 8006ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8006ffa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d029      	beq.n	8007056 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d012      	beq.n	8007030 <osMessageQueueNew+0x62>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	2b4f      	cmp	r3, #79	@ 0x4f
 8007010:	d90e      	bls.n	8007030 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	695a      	ldr	r2, [r3, #20]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	68b9      	ldr	r1, [r7, #8]
 8007022:	fb01 f303 	mul.w	r3, r1, r3
 8007026:	429a      	cmp	r2, r3
 8007028:	d302      	bcc.n	8007030 <osMessageQueueNew+0x62>
        mem = 1;
 800702a:	2301      	movs	r3, #1
 800702c:	61bb      	str	r3, [r7, #24]
 800702e:	e014      	b.n	800705a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d110      	bne.n	800705a <osMessageQueueNew+0x8c>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10c      	bne.n	800705a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007044:	2b00      	cmp	r3, #0
 8007046:	d108      	bne.n	800705a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d104      	bne.n	800705a <osMessageQueueNew+0x8c>
          mem = 0;
 8007050:	2300      	movs	r3, #0
 8007052:	61bb      	str	r3, [r7, #24]
 8007054:	e001      	b.n	800705a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007056:	2300      	movs	r3, #0
 8007058:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d10b      	bne.n	8007078 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691a      	ldr	r2, [r3, #16]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	2100      	movs	r1, #0
 800706a:	9100      	str	r1, [sp, #0]
 800706c:	68b9      	ldr	r1, [r7, #8]
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 f972 	bl	8007358 <xQueueGenericCreateStatic>
 8007074:	61f8      	str	r0, [r7, #28]
 8007076:	e008      	b.n	800708a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d105      	bne.n	800708a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800707e:	2200      	movs	r2, #0
 8007080:	68b9      	ldr	r1, [r7, #8]
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 f9e5 	bl	8007452 <xQueueGenericCreate>
 8007088:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00c      	beq.n	80070aa <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d003      	beq.n	800709e <osMessageQueueNew+0xd0>
        name = attr->name;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	e001      	b.n	80070a2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800709e:	2300      	movs	r3, #0
 80070a0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80070a2:	6979      	ldr	r1, [r7, #20]
 80070a4:	69f8      	ldr	r0, [r7, #28]
 80070a6:	f000 fdc5 	bl	8007c34 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80070aa:	69fb      	ldr	r3, [r7, #28]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3720      	adds	r7, #32
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4a07      	ldr	r2, [pc, #28]	@ (80070e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80070c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	4a06      	ldr	r2, [pc, #24]	@ (80070e4 <vApplicationGetIdleTaskMemory+0x30>)
 80070ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2280      	movs	r2, #128	@ 0x80
 80070d0:	601a      	str	r2, [r3, #0]
}
 80070d2:	bf00      	nop
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	200019f4 	.word	0x200019f4
 80070e4:	20001a50 	.word	0x20001a50

080070e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4a07      	ldr	r2, [pc, #28]	@ (8007114 <vApplicationGetTimerTaskMemory+0x2c>)
 80070f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	4a06      	ldr	r2, [pc, #24]	@ (8007118 <vApplicationGetTimerTaskMemory+0x30>)
 80070fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007106:	601a      	str	r2, [r3, #0]
}
 8007108:	bf00      	nop
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	20001c50 	.word	0x20001c50
 8007118:	20001cac 	.word	0x20001cac

0800711c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f103 0208 	add.w	r2, r3, #8
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f04f 32ff 	mov.w	r2, #4294967295
 8007134:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f103 0208 	add.w	r2, r3, #8
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f103 0208 	add.w	r2, r3, #8
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007176:	b480      	push	{r7}
 8007178:	b085      	sub	sp, #20
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	601a      	str	r2, [r3, #0]
}
 80071b2:	bf00      	nop
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071be:	b480      	push	{r7}
 80071c0:	b085      	sub	sp, #20
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d4:	d103      	bne.n	80071de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	e00c      	b.n	80071f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	3308      	adds	r3, #8
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	e002      	b.n	80071ec <vListInsert+0x2e>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d2f6      	bcs.n	80071e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	1c5a      	adds	r2, r3, #1
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	601a      	str	r2, [r3, #0]
}
 8007224:	bf00      	nop
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	6892      	ldr	r2, [r2, #8]
 8007246:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	6852      	ldr	r2, [r2, #4]
 8007250:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	429a      	cmp	r2, r3
 800725a:	d103      	bne.n	8007264 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689a      	ldr	r2, [r3, #8]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	1e5a      	subs	r2, r3, #1
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
}
 8007278:	4618      	mov	r0, r3
 800727a:	3714      	adds	r7, #20
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10b      	bne.n	80072b0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800729c:	f383 8811 	msr	BASEPRI, r3
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80072aa:	bf00      	nop
 80072ac:	bf00      	nop
 80072ae:	e7fd      	b.n	80072ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80072b0:	f002 f8b2 	bl	8009418 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072bc:	68f9      	ldr	r1, [r7, #12]
 80072be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80072c0:	fb01 f303 	mul.w	r3, r1, r3
 80072c4:	441a      	add	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072e0:	3b01      	subs	r3, #1
 80072e2:	68f9      	ldr	r1, [r7, #12]
 80072e4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80072e6:	fb01 f303 	mul.w	r3, r1, r3
 80072ea:	441a      	add	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	22ff      	movs	r2, #255	@ 0xff
 80072f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	22ff      	movs	r2, #255	@ 0xff
 80072fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d114      	bne.n	8007330 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d01a      	beq.n	8007344 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3310      	adds	r3, #16
 8007312:	4618      	mov	r0, r3
 8007314:	f001 f956 	bl	80085c4 <xTaskRemoveFromEventList>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d012      	beq.n	8007344 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800731e:	4b0d      	ldr	r3, [pc, #52]	@ (8007354 <xQueueGenericReset+0xd0>)
 8007320:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	e009      	b.n	8007344 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	3310      	adds	r3, #16
 8007334:	4618      	mov	r0, r3
 8007336:	f7ff fef1 	bl	800711c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	3324      	adds	r3, #36	@ 0x24
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff feec 	bl	800711c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007344:	f002 f89a 	bl	800947c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007348:	2301      	movs	r3, #1
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	e000ed04 	.word	0xe000ed04

08007358 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08e      	sub	sp, #56	@ 0x38
 800735c:	af02      	add	r7, sp, #8
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10b      	bne.n	8007384 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800737e:	bf00      	nop
 8007380:	bf00      	nop
 8007382:	e7fd      	b.n	8007380 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10b      	bne.n	80073a2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800738a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800739c:	bf00      	nop
 800739e:	bf00      	nop
 80073a0:	e7fd      	b.n	800739e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <xQueueGenericCreateStatic+0x56>
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d001      	beq.n	80073b2 <xQueueGenericCreateStatic+0x5a>
 80073ae:	2301      	movs	r3, #1
 80073b0:	e000      	b.n	80073b4 <xQueueGenericCreateStatic+0x5c>
 80073b2:	2300      	movs	r3, #0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10b      	bne.n	80073d0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80073b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	623b      	str	r3, [r7, #32]
}
 80073ca:	bf00      	nop
 80073cc:	bf00      	nop
 80073ce:	e7fd      	b.n	80073cc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d102      	bne.n	80073dc <xQueueGenericCreateStatic+0x84>
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d101      	bne.n	80073e0 <xQueueGenericCreateStatic+0x88>
 80073dc:	2301      	movs	r3, #1
 80073de:	e000      	b.n	80073e2 <xQueueGenericCreateStatic+0x8a>
 80073e0:	2300      	movs	r3, #0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10b      	bne.n	80073fe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80073e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ea:	f383 8811 	msr	BASEPRI, r3
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	61fb      	str	r3, [r7, #28]
}
 80073f8:	bf00      	nop
 80073fa:	bf00      	nop
 80073fc:	e7fd      	b.n	80073fa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80073fe:	2350      	movs	r3, #80	@ 0x50
 8007400:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2b50      	cmp	r3, #80	@ 0x50
 8007406:	d00b      	beq.n	8007420 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740c:	f383 8811 	msr	BASEPRI, r3
 8007410:	f3bf 8f6f 	isb	sy
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	61bb      	str	r3, [r7, #24]
}
 800741a:	bf00      	nop
 800741c:	bf00      	nop
 800741e:	e7fd      	b.n	800741c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007420:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00d      	beq.n	8007448 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800742c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007434:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	4613      	mov	r3, r2
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	68b9      	ldr	r1, [r7, #8]
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f000 f840 	bl	80074c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800744a:	4618      	mov	r0, r3
 800744c:	3730      	adds	r7, #48	@ 0x30
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007452:	b580      	push	{r7, lr}
 8007454:	b08a      	sub	sp, #40	@ 0x28
 8007456:	af02      	add	r7, sp, #8
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	4613      	mov	r3, r2
 800745e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10b      	bne.n	800747e <xQueueGenericCreate+0x2c>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	613b      	str	r3, [r7, #16]
}
 8007478:	bf00      	nop
 800747a:	bf00      	nop
 800747c:	e7fd      	b.n	800747a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	fb02 f303 	mul.w	r3, r2, r3
 8007486:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	3350      	adds	r3, #80	@ 0x50
 800748c:	4618      	mov	r0, r3
 800748e:	f002 f8e5 	bl	800965c <pvPortMalloc>
 8007492:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d011      	beq.n	80074be <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	3350      	adds	r3, #80	@ 0x50
 80074a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074ac:	79fa      	ldrb	r2, [r7, #7]
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	4613      	mov	r3, r2
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	68b9      	ldr	r1, [r7, #8]
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 f805 	bl	80074c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074be:	69bb      	ldr	r3, [r7, #24]
	}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3720      	adds	r7, #32
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
 80074d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d103      	bne.n	80074e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	69ba      	ldr	r2, [r7, #24]
 80074e0:	601a      	str	r2, [r3, #0]
 80074e2:	e002      	b.n	80074ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80074f6:	2101      	movs	r1, #1
 80074f8:	69b8      	ldr	r0, [r7, #24]
 80074fa:	f7ff fec3 	bl	8007284 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	78fa      	ldrb	r2, [r7, #3]
 8007502:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007506:	bf00      	nop
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
	...

08007510 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b08e      	sub	sp, #56	@ 0x38
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800751e:	2300      	movs	r3, #0
 8007520:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10b      	bne.n	8007544 <xQueueGenericSend+0x34>
	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800753e:	bf00      	nop
 8007540:	bf00      	nop
 8007542:	e7fd      	b.n	8007540 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d103      	bne.n	8007552 <xQueueGenericSend+0x42>
 800754a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <xQueueGenericSend+0x46>
 8007552:	2301      	movs	r3, #1
 8007554:	e000      	b.n	8007558 <xQueueGenericSend+0x48>
 8007556:	2300      	movs	r3, #0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10b      	bne.n	8007574 <xQueueGenericSend+0x64>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800756e:	bf00      	nop
 8007570:	bf00      	nop
 8007572:	e7fd      	b.n	8007570 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b02      	cmp	r3, #2
 8007578:	d103      	bne.n	8007582 <xQueueGenericSend+0x72>
 800757a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800757e:	2b01      	cmp	r3, #1
 8007580:	d101      	bne.n	8007586 <xQueueGenericSend+0x76>
 8007582:	2301      	movs	r3, #1
 8007584:	e000      	b.n	8007588 <xQueueGenericSend+0x78>
 8007586:	2300      	movs	r3, #0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10b      	bne.n	80075a4 <xQueueGenericSend+0x94>
	__asm volatile
 800758c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	623b      	str	r3, [r7, #32]
}
 800759e:	bf00      	nop
 80075a0:	bf00      	nop
 80075a2:	e7fd      	b.n	80075a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075a4:	f001 f9ce 	bl	8008944 <xTaskGetSchedulerState>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d102      	bne.n	80075b4 <xQueueGenericSend+0xa4>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <xQueueGenericSend+0xa8>
 80075b4:	2301      	movs	r3, #1
 80075b6:	e000      	b.n	80075ba <xQueueGenericSend+0xaa>
 80075b8:	2300      	movs	r3, #0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10b      	bne.n	80075d6 <xQueueGenericSend+0xc6>
	__asm volatile
 80075be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	61fb      	str	r3, [r7, #28]
}
 80075d0:	bf00      	nop
 80075d2:	bf00      	nop
 80075d4:	e7fd      	b.n	80075d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075d6:	f001 ff1f 	bl	8009418 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d302      	bcc.n	80075ec <xQueueGenericSend+0xdc>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d129      	bne.n	8007640 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	68b9      	ldr	r1, [r7, #8]
 80075f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075f2:	f000 fa0f 	bl	8007a14 <prvCopyDataToQueue>
 80075f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d010      	beq.n	8007622 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007602:	3324      	adds	r3, #36	@ 0x24
 8007604:	4618      	mov	r0, r3
 8007606:	f000 ffdd 	bl	80085c4 <xTaskRemoveFromEventList>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d013      	beq.n	8007638 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007610:	4b3f      	ldr	r3, [pc, #252]	@ (8007710 <xQueueGenericSend+0x200>)
 8007612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	e00a      	b.n	8007638 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007624:	2b00      	cmp	r3, #0
 8007626:	d007      	beq.n	8007638 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007628:	4b39      	ldr	r3, [pc, #228]	@ (8007710 <xQueueGenericSend+0x200>)
 800762a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007638:	f001 ff20 	bl	800947c <vPortExitCritical>
				return pdPASS;
 800763c:	2301      	movs	r3, #1
 800763e:	e063      	b.n	8007708 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d103      	bne.n	800764e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007646:	f001 ff19 	bl	800947c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800764a:	2300      	movs	r3, #0
 800764c:	e05c      	b.n	8007708 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800764e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007650:	2b00      	cmp	r3, #0
 8007652:	d106      	bne.n	8007662 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007654:	f107 0314 	add.w	r3, r7, #20
 8007658:	4618      	mov	r0, r3
 800765a:	f001 f817 	bl	800868c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800765e:	2301      	movs	r3, #1
 8007660:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007662:	f001 ff0b 	bl	800947c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007666:	f000 fd87 	bl	8008178 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800766a:	f001 fed5 	bl	8009418 <vPortEnterCritical>
 800766e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007670:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007674:	b25b      	sxtb	r3, r3
 8007676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767a:	d103      	bne.n	8007684 <xQueueGenericSend+0x174>
 800767c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007686:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800768a:	b25b      	sxtb	r3, r3
 800768c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007690:	d103      	bne.n	800769a <xQueueGenericSend+0x18a>
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	2200      	movs	r2, #0
 8007696:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800769a:	f001 feef 	bl	800947c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800769e:	1d3a      	adds	r2, r7, #4
 80076a0:	f107 0314 	add.w	r3, r7, #20
 80076a4:	4611      	mov	r1, r2
 80076a6:	4618      	mov	r0, r3
 80076a8:	f001 f806 	bl	80086b8 <xTaskCheckForTimeOut>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d124      	bne.n	80076fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80076b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076b4:	f000 faa6 	bl	8007c04 <prvIsQueueFull>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d018      	beq.n	80076f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80076be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c0:	3310      	adds	r3, #16
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	4611      	mov	r1, r2
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 ff2a 	bl	8008520 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80076cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076ce:	f000 fa31 	bl	8007b34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80076d2:	f000 fd5f 	bl	8008194 <xTaskResumeAll>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f47f af7c 	bne.w	80075d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80076de:	4b0c      	ldr	r3, [pc, #48]	@ (8007710 <xQueueGenericSend+0x200>)
 80076e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	e772      	b.n	80075d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80076f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076f2:	f000 fa1f 	bl	8007b34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076f6:	f000 fd4d 	bl	8008194 <xTaskResumeAll>
 80076fa:	e76c      	b.n	80075d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80076fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076fe:	f000 fa19 	bl	8007b34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007702:	f000 fd47 	bl	8008194 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007706:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007708:	4618      	mov	r0, r3
 800770a:	3738      	adds	r7, #56	@ 0x38
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	e000ed04 	.word	0xe000ed04

08007714 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b090      	sub	sp, #64	@ 0x40
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
 8007720:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10b      	bne.n	8007744 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800773e:	bf00      	nop
 8007740:	bf00      	nop
 8007742:	e7fd      	b.n	8007740 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d103      	bne.n	8007752 <xQueueGenericSendFromISR+0x3e>
 800774a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <xQueueGenericSendFromISR+0x42>
 8007752:	2301      	movs	r3, #1
 8007754:	e000      	b.n	8007758 <xQueueGenericSendFromISR+0x44>
 8007756:	2300      	movs	r3, #0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10b      	bne.n	8007774 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800775c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800776e:	bf00      	nop
 8007770:	bf00      	nop
 8007772:	e7fd      	b.n	8007770 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	2b02      	cmp	r3, #2
 8007778:	d103      	bne.n	8007782 <xQueueGenericSendFromISR+0x6e>
 800777a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800777e:	2b01      	cmp	r3, #1
 8007780:	d101      	bne.n	8007786 <xQueueGenericSendFromISR+0x72>
 8007782:	2301      	movs	r3, #1
 8007784:	e000      	b.n	8007788 <xQueueGenericSendFromISR+0x74>
 8007786:	2300      	movs	r3, #0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10b      	bne.n	80077a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	623b      	str	r3, [r7, #32]
}
 800779e:	bf00      	nop
 80077a0:	bf00      	nop
 80077a2:	e7fd      	b.n	80077a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077a4:	f001 ff18 	bl	80095d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80077a8:	f3ef 8211 	mrs	r2, BASEPRI
 80077ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	61fa      	str	r2, [r7, #28]
 80077be:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80077c0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077c2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d302      	bcc.n	80077d6 <xQueueGenericSendFromISR+0xc2>
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d12f      	bne.n	8007836 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80077d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	68b9      	ldr	r1, [r7, #8]
 80077ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80077ec:	f000 f912 	bl	8007a14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80077f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80077f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f8:	d112      	bne.n	8007820 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d016      	beq.n	8007830 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007804:	3324      	adds	r3, #36	@ 0x24
 8007806:	4618      	mov	r0, r3
 8007808:	f000 fedc 	bl	80085c4 <xTaskRemoveFromEventList>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00e      	beq.n	8007830 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00b      	beq.n	8007830 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	601a      	str	r2, [r3, #0]
 800781e:	e007      	b.n	8007830 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007820:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007824:	3301      	adds	r3, #1
 8007826:	b2db      	uxtb	r3, r3
 8007828:	b25a      	sxtb	r2, r3
 800782a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800782c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007830:	2301      	movs	r3, #1
 8007832:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007834:	e001      	b.n	800783a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007836:	2300      	movs	r3, #0
 8007838:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800783a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800783c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007844:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007848:	4618      	mov	r0, r3
 800784a:	3740      	adds	r7, #64	@ 0x40
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b08c      	sub	sp, #48	@ 0x30
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800785c:	2300      	movs	r3, #0
 800785e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10b      	bne.n	8007882 <xQueueReceive+0x32>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	623b      	str	r3, [r7, #32]
}
 800787c:	bf00      	nop
 800787e:	bf00      	nop
 8007880:	e7fd      	b.n	800787e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d103      	bne.n	8007890 <xQueueReceive+0x40>
 8007888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800788a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <xQueueReceive+0x44>
 8007890:	2301      	movs	r3, #1
 8007892:	e000      	b.n	8007896 <xQueueReceive+0x46>
 8007894:	2300      	movs	r3, #0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10b      	bne.n	80078b2 <xQueueReceive+0x62>
	__asm volatile
 800789a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	61fb      	str	r3, [r7, #28]
}
 80078ac:	bf00      	nop
 80078ae:	bf00      	nop
 80078b0:	e7fd      	b.n	80078ae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078b2:	f001 f847 	bl	8008944 <xTaskGetSchedulerState>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d102      	bne.n	80078c2 <xQueueReceive+0x72>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <xQueueReceive+0x76>
 80078c2:	2301      	movs	r3, #1
 80078c4:	e000      	b.n	80078c8 <xQueueReceive+0x78>
 80078c6:	2300      	movs	r3, #0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10b      	bne.n	80078e4 <xQueueReceive+0x94>
	__asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d0:	f383 8811 	msr	BASEPRI, r3
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	61bb      	str	r3, [r7, #24]
}
 80078de:	bf00      	nop
 80078e0:	bf00      	nop
 80078e2:	e7fd      	b.n	80078e0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078e4:	f001 fd98 	bl	8009418 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d01f      	beq.n	8007934 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80078f4:	68b9      	ldr	r1, [r7, #8]
 80078f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078f8:	f000 f8f6 	bl	8007ae8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80078fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fe:	1e5a      	subs	r2, r3, #1
 8007900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007902:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00f      	beq.n	800792c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800790c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790e:	3310      	adds	r3, #16
 8007910:	4618      	mov	r0, r3
 8007912:	f000 fe57 	bl	80085c4 <xTaskRemoveFromEventList>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d007      	beq.n	800792c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800791c:	4b3c      	ldr	r3, [pc, #240]	@ (8007a10 <xQueueReceive+0x1c0>)
 800791e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800792c:	f001 fda6 	bl	800947c <vPortExitCritical>
				return pdPASS;
 8007930:	2301      	movs	r3, #1
 8007932:	e069      	b.n	8007a08 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d103      	bne.n	8007942 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800793a:	f001 fd9f 	bl	800947c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800793e:	2300      	movs	r3, #0
 8007940:	e062      	b.n	8007a08 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007944:	2b00      	cmp	r3, #0
 8007946:	d106      	bne.n	8007956 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007948:	f107 0310 	add.w	r3, r7, #16
 800794c:	4618      	mov	r0, r3
 800794e:	f000 fe9d 	bl	800868c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007952:	2301      	movs	r3, #1
 8007954:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007956:	f001 fd91 	bl	800947c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800795a:	f000 fc0d 	bl	8008178 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800795e:	f001 fd5b 	bl	8009418 <vPortEnterCritical>
 8007962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007964:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007968:	b25b      	sxtb	r3, r3
 800796a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796e:	d103      	bne.n	8007978 <xQueueReceive+0x128>
 8007970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800797e:	b25b      	sxtb	r3, r3
 8007980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007984:	d103      	bne.n	800798e <xQueueReceive+0x13e>
 8007986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800798e:	f001 fd75 	bl	800947c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007992:	1d3a      	adds	r2, r7, #4
 8007994:	f107 0310 	add.w	r3, r7, #16
 8007998:	4611      	mov	r1, r2
 800799a:	4618      	mov	r0, r3
 800799c:	f000 fe8c 	bl	80086b8 <xTaskCheckForTimeOut>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d123      	bne.n	80079ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079a8:	f000 f916 	bl	8007bd8 <prvIsQueueEmpty>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d017      	beq.n	80079e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b4:	3324      	adds	r3, #36	@ 0x24
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	4611      	mov	r1, r2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 fdb0 	bl	8008520 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80079c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079c2:	f000 f8b7 	bl	8007b34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80079c6:	f000 fbe5 	bl	8008194 <xTaskResumeAll>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d189      	bne.n	80078e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80079d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007a10 <xQueueReceive+0x1c0>)
 80079d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	e780      	b.n	80078e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80079e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079e4:	f000 f8a6 	bl	8007b34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079e8:	f000 fbd4 	bl	8008194 <xTaskResumeAll>
 80079ec:	e77a      	b.n	80078e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80079ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079f0:	f000 f8a0 	bl	8007b34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079f4:	f000 fbce 	bl	8008194 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079fa:	f000 f8ed 	bl	8007bd8 <prvIsQueueEmpty>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f43f af6f 	beq.w	80078e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3730      	adds	r7, #48	@ 0x30
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	e000ed04 	.word	0xe000ed04

08007a14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007a20:	2300      	movs	r3, #0
 8007a22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10d      	bne.n	8007a4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d14d      	bne.n	8007ad6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 ff9e 	bl	8008980 <xTaskPriorityDisinherit>
 8007a44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	609a      	str	r2, [r3, #8]
 8007a4c:	e043      	b.n	8007ad6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d119      	bne.n	8007a88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6858      	ldr	r0, [r3, #4]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	68b9      	ldr	r1, [r7, #8]
 8007a60:	f006 fb1b 	bl	800e09a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a6c:	441a      	add	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d32b      	bcc.n	8007ad6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	605a      	str	r2, [r3, #4]
 8007a86:	e026      	b.n	8007ad6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	68d8      	ldr	r0, [r3, #12]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a90:	461a      	mov	r2, r3
 8007a92:	68b9      	ldr	r1, [r7, #8]
 8007a94:	f006 fb01 	bl	800e09a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	68da      	ldr	r2, [r3, #12]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa0:	425b      	negs	r3, r3
 8007aa2:	441a      	add	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	68da      	ldr	r2, [r3, #12]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d207      	bcs.n	8007ac4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	689a      	ldr	r2, [r3, #8]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007abc:	425b      	negs	r3, r3
 8007abe:	441a      	add	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d105      	bne.n	8007ad6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	1c5a      	adds	r2, r3, #1
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007ade:	697b      	ldr	r3, [r7, #20]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3718      	adds	r7, #24
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d018      	beq.n	8007b2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b02:	441a      	add	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68da      	ldr	r2, [r3, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d303      	bcc.n	8007b1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68d9      	ldr	r1, [r3, #12]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b24:	461a      	mov	r2, r3
 8007b26:	6838      	ldr	r0, [r7, #0]
 8007b28:	f006 fab7 	bl	800e09a <memcpy>
	}
}
 8007b2c:	bf00      	nop
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b3c:	f001 fc6c 	bl	8009418 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b48:	e011      	b.n	8007b6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d012      	beq.n	8007b78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3324      	adds	r3, #36	@ 0x24
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 fd34 	bl	80085c4 <xTaskRemoveFromEventList>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b62:	f000 fe0d 	bl	8008780 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	dce9      	bgt.n	8007b4a <prvUnlockQueue+0x16>
 8007b76:	e000      	b.n	8007b7a <prvUnlockQueue+0x46>
					break;
 8007b78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	22ff      	movs	r2, #255	@ 0xff
 8007b7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007b82:	f001 fc7b 	bl	800947c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b86:	f001 fc47 	bl	8009418 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b92:	e011      	b.n	8007bb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d012      	beq.n	8007bc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3310      	adds	r3, #16
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f000 fd0f 	bl	80085c4 <xTaskRemoveFromEventList>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007bac:	f000 fde8 	bl	8008780 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	dce9      	bgt.n	8007b94 <prvUnlockQueue+0x60>
 8007bc0:	e000      	b.n	8007bc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007bc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	22ff      	movs	r2, #255	@ 0xff
 8007bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007bcc:	f001 fc56 	bl	800947c <vPortExitCritical>
}
 8007bd0:	bf00      	nop
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007be0:	f001 fc1a 	bl	8009418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d102      	bne.n	8007bf2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007bec:	2301      	movs	r3, #1
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	e001      	b.n	8007bf6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bf6:	f001 fc41 	bl	800947c <vPortExitCritical>

	return xReturn;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c0c:	f001 fc04 	bl	8009418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d102      	bne.n	8007c22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	60fb      	str	r3, [r7, #12]
 8007c20:	e001      	b.n	8007c26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007c22:	2300      	movs	r3, #0
 8007c24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c26:	f001 fc29 	bl	800947c <vPortExitCritical>

	return xReturn;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c3e:	2300      	movs	r3, #0
 8007c40:	60fb      	str	r3, [r7, #12]
 8007c42:	e014      	b.n	8007c6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007c44:	4a0f      	ldr	r2, [pc, #60]	@ (8007c84 <vQueueAddToRegistry+0x50>)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10b      	bne.n	8007c68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007c50:	490c      	ldr	r1, [pc, #48]	@ (8007c84 <vQueueAddToRegistry+0x50>)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8007c84 <vQueueAddToRegistry+0x50>)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	4413      	add	r3, r2
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007c66:	e006      	b.n	8007c76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	60fb      	str	r3, [r7, #12]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b07      	cmp	r3, #7
 8007c72:	d9e7      	bls.n	8007c44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	200020ac 	.word	0x200020ac

08007c88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c98:	f001 fbbe 	bl	8009418 <vPortEnterCritical>
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ca2:	b25b      	sxtb	r3, r3
 8007ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca8:	d103      	bne.n	8007cb2 <vQueueWaitForMessageRestricted+0x2a>
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cb8:	b25b      	sxtb	r3, r3
 8007cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cbe:	d103      	bne.n	8007cc8 <vQueueWaitForMessageRestricted+0x40>
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cc8:	f001 fbd8 	bl	800947c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d106      	bne.n	8007ce2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	3324      	adds	r3, #36	@ 0x24
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	68b9      	ldr	r1, [r7, #8]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f000 fc45 	bl	800856c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ce2:	6978      	ldr	r0, [r7, #20]
 8007ce4:	f7ff ff26 	bl	8007b34 <prvUnlockQueue>
	}
 8007ce8:	bf00      	nop
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08e      	sub	sp, #56	@ 0x38
 8007cf4:	af04      	add	r7, sp, #16
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
 8007cfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10b      	bne.n	8007d1c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	623b      	str	r3, [r7, #32]
}
 8007d16:	bf00      	nop
 8007d18:	bf00      	nop
 8007d1a:	e7fd      	b.n	8007d18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10b      	bne.n	8007d3a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	61fb      	str	r3, [r7, #28]
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop
 8007d38:	e7fd      	b.n	8007d36 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007d3a:	235c      	movs	r3, #92	@ 0x5c
 8007d3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	2b5c      	cmp	r3, #92	@ 0x5c
 8007d42:	d00b      	beq.n	8007d5c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	61bb      	str	r3, [r7, #24]
}
 8007d56:	bf00      	nop
 8007d58:	bf00      	nop
 8007d5a:	e7fd      	b.n	8007d58 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d5c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d01e      	beq.n	8007da2 <xTaskCreateStatic+0xb2>
 8007d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d01b      	beq.n	8007da2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d72:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d76:	2202      	movs	r2, #2
 8007d78:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	9303      	str	r3, [sp, #12]
 8007d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d82:	9302      	str	r3, [sp, #8]
 8007d84:	f107 0314 	add.w	r3, r7, #20
 8007d88:	9301      	str	r3, [sp, #4]
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	68b9      	ldr	r1, [r7, #8]
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f000 f850 	bl	8007e3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007d9c:	f000 f8de 	bl	8007f5c <prvAddNewTaskToReadyList>
 8007da0:	e001      	b.n	8007da6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007da2:	2300      	movs	r3, #0
 8007da4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007da6:	697b      	ldr	r3, [r7, #20]
	}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3728      	adds	r7, #40	@ 0x28
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b08c      	sub	sp, #48	@ 0x30
 8007db4:	af04      	add	r7, sp, #16
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	603b      	str	r3, [r7, #0]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007dc0:	88fb      	ldrh	r3, [r7, #6]
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f001 fc49 	bl	800965c <pvPortMalloc>
 8007dca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00e      	beq.n	8007df0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007dd2:	205c      	movs	r0, #92	@ 0x5c
 8007dd4:	f001 fc42 	bl	800965c <pvPortMalloc>
 8007dd8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d003      	beq.n	8007de8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	631a      	str	r2, [r3, #48]	@ 0x30
 8007de6:	e005      	b.n	8007df4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007de8:	6978      	ldr	r0, [r7, #20]
 8007dea:	f001 fd05 	bl	80097f8 <vPortFree>
 8007dee:	e001      	b.n	8007df4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007df0:	2300      	movs	r3, #0
 8007df2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d017      	beq.n	8007e2a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e02:	88fa      	ldrh	r2, [r7, #6]
 8007e04:	2300      	movs	r3, #0
 8007e06:	9303      	str	r3, [sp, #12]
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	9302      	str	r3, [sp, #8]
 8007e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0e:	9301      	str	r3, [sp, #4]
 8007e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	68b9      	ldr	r1, [r7, #8]
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 f80e 	bl	8007e3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e1e:	69f8      	ldr	r0, [r7, #28]
 8007e20:	f000 f89c 	bl	8007f5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e24:	2301      	movs	r3, #1
 8007e26:	61bb      	str	r3, [r7, #24]
 8007e28:	e002      	b.n	8007e30 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e30:	69bb      	ldr	r3, [r7, #24]
	}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3720      	adds	r7, #32
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b088      	sub	sp, #32
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	607a      	str	r2, [r7, #4]
 8007e46:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	461a      	mov	r2, r3
 8007e52:	21a5      	movs	r1, #165	@ 0xa5
 8007e54:	f006 f892 	bl	800df7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007e62:	3b01      	subs	r3, #1
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	f023 0307 	bic.w	r3, r3, #7
 8007e70:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	f003 0307 	and.w	r3, r3, #7
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00b      	beq.n	8007e94 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	617b      	str	r3, [r7, #20]
}
 8007e8e:	bf00      	nop
 8007e90:	bf00      	nop
 8007e92:	e7fd      	b.n	8007e90 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d01f      	beq.n	8007eda <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	61fb      	str	r3, [r7, #28]
 8007e9e:	e012      	b.n	8007ec6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	7819      	ldrb	r1, [r3, #0]
 8007ea8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	4413      	add	r3, r2
 8007eae:	3334      	adds	r3, #52	@ 0x34
 8007eb0:	460a      	mov	r2, r1
 8007eb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	4413      	add	r3, r2
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d006      	beq.n	8007ece <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	61fb      	str	r3, [r7, #28]
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	2b0f      	cmp	r3, #15
 8007eca:	d9e9      	bls.n	8007ea0 <prvInitialiseNewTask+0x66>
 8007ecc:	e000      	b.n	8007ed0 <prvInitialiseNewTask+0x96>
			{
				break;
 8007ece:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ed8:	e003      	b.n	8007ee2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee4:	2b37      	cmp	r3, #55	@ 0x37
 8007ee6:	d901      	bls.n	8007eec <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ee8:	2337      	movs	r3, #55	@ 0x37
 8007eea:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ef0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ef6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efa:	2200      	movs	r2, #0
 8007efc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f00:	3304      	adds	r3, #4
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7ff f92a 	bl	800715c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0a:	3318      	adds	r3, #24
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7ff f925 	bl	800715c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f26:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	68f9      	ldr	r1, [r7, #12]
 8007f3a:	69b8      	ldr	r0, [r7, #24]
 8007f3c:	f001 f93e 	bl	80091bc <pxPortInitialiseStack>
 8007f40:	4602      	mov	r2, r0
 8007f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d002      	beq.n	8007f52 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f52:	bf00      	nop
 8007f54:	3720      	adds	r7, #32
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
	...

08007f5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f64:	f001 fa58 	bl	8009418 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f68:	4b2d      	ldr	r3, [pc, #180]	@ (8008020 <prvAddNewTaskToReadyList+0xc4>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	4a2c      	ldr	r2, [pc, #176]	@ (8008020 <prvAddNewTaskToReadyList+0xc4>)
 8007f70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f72:	4b2c      	ldr	r3, [pc, #176]	@ (8008024 <prvAddNewTaskToReadyList+0xc8>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d109      	bne.n	8007f8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f7a:	4a2a      	ldr	r2, [pc, #168]	@ (8008024 <prvAddNewTaskToReadyList+0xc8>)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f80:	4b27      	ldr	r3, [pc, #156]	@ (8008020 <prvAddNewTaskToReadyList+0xc4>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d110      	bne.n	8007faa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f88:	f000 fc1e 	bl	80087c8 <prvInitialiseTaskLists>
 8007f8c:	e00d      	b.n	8007faa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f8e:	4b26      	ldr	r3, [pc, #152]	@ (8008028 <prvAddNewTaskToReadyList+0xcc>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d109      	bne.n	8007faa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f96:	4b23      	ldr	r3, [pc, #140]	@ (8008024 <prvAddNewTaskToReadyList+0xc8>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d802      	bhi.n	8007faa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8008024 <prvAddNewTaskToReadyList+0xc8>)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007faa:	4b20      	ldr	r3, [pc, #128]	@ (800802c <prvAddNewTaskToReadyList+0xd0>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	4a1e      	ldr	r2, [pc, #120]	@ (800802c <prvAddNewTaskToReadyList+0xd0>)
 8007fb2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800802c <prvAddNewTaskToReadyList+0xd0>)
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8008030 <prvAddNewTaskToReadyList+0xd4>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d903      	bls.n	8007fd0 <prvAddNewTaskToReadyList+0x74>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fcc:	4a18      	ldr	r2, [pc, #96]	@ (8008030 <prvAddNewTaskToReadyList+0xd4>)
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4413      	add	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4a15      	ldr	r2, [pc, #84]	@ (8008034 <prvAddNewTaskToReadyList+0xd8>)
 8007fde:	441a      	add	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	f7ff f8c5 	bl	8007176 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007fec:	f001 fa46 	bl	800947c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8008028 <prvAddNewTaskToReadyList+0xcc>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00e      	beq.n	8008016 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8008024 <prvAddNewTaskToReadyList+0xc8>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008002:	429a      	cmp	r2, r3
 8008004:	d207      	bcs.n	8008016 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008006:	4b0c      	ldr	r3, [pc, #48]	@ (8008038 <prvAddNewTaskToReadyList+0xdc>)
 8008008:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800800c:	601a      	str	r2, [r3, #0]
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008016:	bf00      	nop
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	200025c0 	.word	0x200025c0
 8008024:	200020ec 	.word	0x200020ec
 8008028:	200025cc 	.word	0x200025cc
 800802c:	200025dc 	.word	0x200025dc
 8008030:	200025c8 	.word	0x200025c8
 8008034:	200020f0 	.word	0x200020f0
 8008038:	e000ed04 	.word	0xe000ed04

0800803c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008044:	2300      	movs	r3, #0
 8008046:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d018      	beq.n	8008080 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800804e:	4b14      	ldr	r3, [pc, #80]	@ (80080a0 <vTaskDelay+0x64>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00b      	beq.n	800806e <vTaskDelay+0x32>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	60bb      	str	r3, [r7, #8]
}
 8008068:	bf00      	nop
 800806a:	bf00      	nop
 800806c:	e7fd      	b.n	800806a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800806e:	f000 f883 	bl	8008178 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008072:	2100      	movs	r1, #0
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fcf3 	bl	8008a60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800807a:	f000 f88b 	bl	8008194 <xTaskResumeAll>
 800807e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d107      	bne.n	8008096 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008086:	4b07      	ldr	r3, [pc, #28]	@ (80080a4 <vTaskDelay+0x68>)
 8008088:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008096:	bf00      	nop
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	200025e8 	.word	0x200025e8
 80080a4:	e000ed04 	.word	0xe000ed04

080080a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b08a      	sub	sp, #40	@ 0x28
 80080ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80080b2:	2300      	movs	r3, #0
 80080b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80080b6:	463a      	mov	r2, r7
 80080b8:	1d39      	adds	r1, r7, #4
 80080ba:	f107 0308 	add.w	r3, r7, #8
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fe fff8 	bl	80070b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	9202      	str	r2, [sp, #8]
 80080cc:	9301      	str	r3, [sp, #4]
 80080ce:	2300      	movs	r3, #0
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	2300      	movs	r3, #0
 80080d4:	460a      	mov	r2, r1
 80080d6:	4922      	ldr	r1, [pc, #136]	@ (8008160 <vTaskStartScheduler+0xb8>)
 80080d8:	4822      	ldr	r0, [pc, #136]	@ (8008164 <vTaskStartScheduler+0xbc>)
 80080da:	f7ff fe09 	bl	8007cf0 <xTaskCreateStatic>
 80080de:	4603      	mov	r3, r0
 80080e0:	4a21      	ldr	r2, [pc, #132]	@ (8008168 <vTaskStartScheduler+0xc0>)
 80080e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80080e4:	4b20      	ldr	r3, [pc, #128]	@ (8008168 <vTaskStartScheduler+0xc0>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d002      	beq.n	80080f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80080ec:	2301      	movs	r3, #1
 80080ee:	617b      	str	r3, [r7, #20]
 80080f0:	e001      	b.n	80080f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80080f2:	2300      	movs	r3, #0
 80080f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d102      	bne.n	8008102 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80080fc:	f000 fd04 	bl	8008b08 <xTimerCreateTimerTask>
 8008100:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d116      	bne.n	8008136 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	613b      	str	r3, [r7, #16]
}
 800811a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800811c:	4b13      	ldr	r3, [pc, #76]	@ (800816c <vTaskStartScheduler+0xc4>)
 800811e:	f04f 32ff 	mov.w	r2, #4294967295
 8008122:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008124:	4b12      	ldr	r3, [pc, #72]	@ (8008170 <vTaskStartScheduler+0xc8>)
 8008126:	2201      	movs	r2, #1
 8008128:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800812a:	4b12      	ldr	r3, [pc, #72]	@ (8008174 <vTaskStartScheduler+0xcc>)
 800812c:	2200      	movs	r2, #0
 800812e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008130:	f001 f8ce 	bl	80092d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008134:	e00f      	b.n	8008156 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813c:	d10b      	bne.n	8008156 <vTaskStartScheduler+0xae>
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	60fb      	str	r3, [r7, #12]
}
 8008150:	bf00      	nop
 8008152:	bf00      	nop
 8008154:	e7fd      	b.n	8008152 <vTaskStartScheduler+0xaa>
}
 8008156:	bf00      	nop
 8008158:	3718      	adds	r7, #24
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	08011830 	.word	0x08011830
 8008164:	08008799 	.word	0x08008799
 8008168:	200025e4 	.word	0x200025e4
 800816c:	200025e0 	.word	0x200025e0
 8008170:	200025cc 	.word	0x200025cc
 8008174:	200025c4 	.word	0x200025c4

08008178 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008178:	b480      	push	{r7}
 800817a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800817c:	4b04      	ldr	r3, [pc, #16]	@ (8008190 <vTaskSuspendAll+0x18>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3301      	adds	r3, #1
 8008182:	4a03      	ldr	r2, [pc, #12]	@ (8008190 <vTaskSuspendAll+0x18>)
 8008184:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008186:	bf00      	nop
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	200025e8 	.word	0x200025e8

08008194 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800819e:	2300      	movs	r3, #0
 80081a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80081a2:	4b42      	ldr	r3, [pc, #264]	@ (80082ac <xTaskResumeAll+0x118>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10b      	bne.n	80081c2 <xTaskResumeAll+0x2e>
	__asm volatile
 80081aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	603b      	str	r3, [r7, #0]
}
 80081bc:	bf00      	nop
 80081be:	bf00      	nop
 80081c0:	e7fd      	b.n	80081be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80081c2:	f001 f929 	bl	8009418 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80081c6:	4b39      	ldr	r3, [pc, #228]	@ (80082ac <xTaskResumeAll+0x118>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	4a37      	ldr	r2, [pc, #220]	@ (80082ac <xTaskResumeAll+0x118>)
 80081ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081d0:	4b36      	ldr	r3, [pc, #216]	@ (80082ac <xTaskResumeAll+0x118>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d162      	bne.n	800829e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80081d8:	4b35      	ldr	r3, [pc, #212]	@ (80082b0 <xTaskResumeAll+0x11c>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d05e      	beq.n	800829e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081e0:	e02f      	b.n	8008242 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081e2:	4b34      	ldr	r3, [pc, #208]	@ (80082b4 <xTaskResumeAll+0x120>)
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	3318      	adds	r3, #24
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7ff f81e 	bl	8007230 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	3304      	adds	r3, #4
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7ff f819 	bl	8007230 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008202:	4b2d      	ldr	r3, [pc, #180]	@ (80082b8 <xTaskResumeAll+0x124>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	429a      	cmp	r2, r3
 8008208:	d903      	bls.n	8008212 <xTaskResumeAll+0x7e>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820e:	4a2a      	ldr	r2, [pc, #168]	@ (80082b8 <xTaskResumeAll+0x124>)
 8008210:	6013      	str	r3, [r2, #0]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008216:	4613      	mov	r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4413      	add	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4a27      	ldr	r2, [pc, #156]	@ (80082bc <xTaskResumeAll+0x128>)
 8008220:	441a      	add	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	3304      	adds	r3, #4
 8008226:	4619      	mov	r1, r3
 8008228:	4610      	mov	r0, r2
 800822a:	f7fe ffa4 	bl	8007176 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008232:	4b23      	ldr	r3, [pc, #140]	@ (80082c0 <xTaskResumeAll+0x12c>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008238:	429a      	cmp	r2, r3
 800823a:	d302      	bcc.n	8008242 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800823c:	4b21      	ldr	r3, [pc, #132]	@ (80082c4 <xTaskResumeAll+0x130>)
 800823e:	2201      	movs	r2, #1
 8008240:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008242:	4b1c      	ldr	r3, [pc, #112]	@ (80082b4 <xTaskResumeAll+0x120>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1cb      	bne.n	80081e2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008250:	f000 fb58 	bl	8008904 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008254:	4b1c      	ldr	r3, [pc, #112]	@ (80082c8 <xTaskResumeAll+0x134>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d010      	beq.n	8008282 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008260:	f000 f846 	bl	80082f0 <xTaskIncrementTick>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d002      	beq.n	8008270 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800826a:	4b16      	ldr	r3, [pc, #88]	@ (80082c4 <xTaskResumeAll+0x130>)
 800826c:	2201      	movs	r2, #1
 800826e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	3b01      	subs	r3, #1
 8008274:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1f1      	bne.n	8008260 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800827c:	4b12      	ldr	r3, [pc, #72]	@ (80082c8 <xTaskResumeAll+0x134>)
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008282:	4b10      	ldr	r3, [pc, #64]	@ (80082c4 <xTaskResumeAll+0x130>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d009      	beq.n	800829e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800828a:	2301      	movs	r3, #1
 800828c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800828e:	4b0f      	ldr	r3, [pc, #60]	@ (80082cc <xTaskResumeAll+0x138>)
 8008290:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008294:	601a      	str	r2, [r3, #0]
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800829e:	f001 f8ed 	bl	800947c <vPortExitCritical>

	return xAlreadyYielded;
 80082a2:	68bb      	ldr	r3, [r7, #8]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	200025e8 	.word	0x200025e8
 80082b0:	200025c0 	.word	0x200025c0
 80082b4:	20002580 	.word	0x20002580
 80082b8:	200025c8 	.word	0x200025c8
 80082bc:	200020f0 	.word	0x200020f0
 80082c0:	200020ec 	.word	0x200020ec
 80082c4:	200025d4 	.word	0x200025d4
 80082c8:	200025d0 	.word	0x200025d0
 80082cc:	e000ed04 	.word	0xe000ed04

080082d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80082d6:	4b05      	ldr	r3, [pc, #20]	@ (80082ec <xTaskGetTickCount+0x1c>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80082dc:	687b      	ldr	r3, [r7, #4]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	370c      	adds	r7, #12
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	200025c4 	.word	0x200025c4

080082f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80082f6:	2300      	movs	r3, #0
 80082f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082fa:	4b4f      	ldr	r3, [pc, #316]	@ (8008438 <xTaskIncrementTick+0x148>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f040 8090 	bne.w	8008424 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008304:	4b4d      	ldr	r3, [pc, #308]	@ (800843c <xTaskIncrementTick+0x14c>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3301      	adds	r3, #1
 800830a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800830c:	4a4b      	ldr	r2, [pc, #300]	@ (800843c <xTaskIncrementTick+0x14c>)
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d121      	bne.n	800835c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008318:	4b49      	ldr	r3, [pc, #292]	@ (8008440 <xTaskIncrementTick+0x150>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00b      	beq.n	800833a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008326:	f383 8811 	msr	BASEPRI, r3
 800832a:	f3bf 8f6f 	isb	sy
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	603b      	str	r3, [r7, #0]
}
 8008334:	bf00      	nop
 8008336:	bf00      	nop
 8008338:	e7fd      	b.n	8008336 <xTaskIncrementTick+0x46>
 800833a:	4b41      	ldr	r3, [pc, #260]	@ (8008440 <xTaskIncrementTick+0x150>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	60fb      	str	r3, [r7, #12]
 8008340:	4b40      	ldr	r3, [pc, #256]	@ (8008444 <xTaskIncrementTick+0x154>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a3e      	ldr	r2, [pc, #248]	@ (8008440 <xTaskIncrementTick+0x150>)
 8008346:	6013      	str	r3, [r2, #0]
 8008348:	4a3e      	ldr	r2, [pc, #248]	@ (8008444 <xTaskIncrementTick+0x154>)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6013      	str	r3, [r2, #0]
 800834e:	4b3e      	ldr	r3, [pc, #248]	@ (8008448 <xTaskIncrementTick+0x158>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	3301      	adds	r3, #1
 8008354:	4a3c      	ldr	r2, [pc, #240]	@ (8008448 <xTaskIncrementTick+0x158>)
 8008356:	6013      	str	r3, [r2, #0]
 8008358:	f000 fad4 	bl	8008904 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800835c:	4b3b      	ldr	r3, [pc, #236]	@ (800844c <xTaskIncrementTick+0x15c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	429a      	cmp	r2, r3
 8008364:	d349      	bcc.n	80083fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008366:	4b36      	ldr	r3, [pc, #216]	@ (8008440 <xTaskIncrementTick+0x150>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d104      	bne.n	800837a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008370:	4b36      	ldr	r3, [pc, #216]	@ (800844c <xTaskIncrementTick+0x15c>)
 8008372:	f04f 32ff 	mov.w	r2, #4294967295
 8008376:	601a      	str	r2, [r3, #0]
					break;
 8008378:	e03f      	b.n	80083fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800837a:	4b31      	ldr	r3, [pc, #196]	@ (8008440 <xTaskIncrementTick+0x150>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	429a      	cmp	r2, r3
 8008390:	d203      	bcs.n	800839a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008392:	4a2e      	ldr	r2, [pc, #184]	@ (800844c <xTaskIncrementTick+0x15c>)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008398:	e02f      	b.n	80083fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	3304      	adds	r3, #4
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fe ff46 	bl	8007230 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d004      	beq.n	80083b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	3318      	adds	r3, #24
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7fe ff3d 	bl	8007230 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ba:	4b25      	ldr	r3, [pc, #148]	@ (8008450 <xTaskIncrementTick+0x160>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d903      	bls.n	80083ca <xTaskIncrementTick+0xda>
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c6:	4a22      	ldr	r2, [pc, #136]	@ (8008450 <xTaskIncrementTick+0x160>)
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ce:	4613      	mov	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4a1f      	ldr	r2, [pc, #124]	@ (8008454 <xTaskIncrementTick+0x164>)
 80083d8:	441a      	add	r2, r3
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	3304      	adds	r3, #4
 80083de:	4619      	mov	r1, r3
 80083e0:	4610      	mov	r0, r2
 80083e2:	f7fe fec8 	bl	8007176 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ea:	4b1b      	ldr	r3, [pc, #108]	@ (8008458 <xTaskIncrementTick+0x168>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d3b8      	bcc.n	8008366 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80083f4:	2301      	movs	r3, #1
 80083f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083f8:	e7b5      	b.n	8008366 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80083fa:	4b17      	ldr	r3, [pc, #92]	@ (8008458 <xTaskIncrementTick+0x168>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008400:	4914      	ldr	r1, [pc, #80]	@ (8008454 <xTaskIncrementTick+0x164>)
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	440b      	add	r3, r1
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d901      	bls.n	8008416 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008412:	2301      	movs	r3, #1
 8008414:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008416:	4b11      	ldr	r3, [pc, #68]	@ (800845c <xTaskIncrementTick+0x16c>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d007      	beq.n	800842e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800841e:	2301      	movs	r3, #1
 8008420:	617b      	str	r3, [r7, #20]
 8008422:	e004      	b.n	800842e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008424:	4b0e      	ldr	r3, [pc, #56]	@ (8008460 <xTaskIncrementTick+0x170>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3301      	adds	r3, #1
 800842a:	4a0d      	ldr	r2, [pc, #52]	@ (8008460 <xTaskIncrementTick+0x170>)
 800842c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800842e:	697b      	ldr	r3, [r7, #20]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3718      	adds	r7, #24
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	200025e8 	.word	0x200025e8
 800843c:	200025c4 	.word	0x200025c4
 8008440:	20002578 	.word	0x20002578
 8008444:	2000257c 	.word	0x2000257c
 8008448:	200025d8 	.word	0x200025d8
 800844c:	200025e0 	.word	0x200025e0
 8008450:	200025c8 	.word	0x200025c8
 8008454:	200020f0 	.word	0x200020f0
 8008458:	200020ec 	.word	0x200020ec
 800845c:	200025d4 	.word	0x200025d4
 8008460:	200025d0 	.word	0x200025d0

08008464 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800846a:	4b28      	ldr	r3, [pc, #160]	@ (800850c <vTaskSwitchContext+0xa8>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d003      	beq.n	800847a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008472:	4b27      	ldr	r3, [pc, #156]	@ (8008510 <vTaskSwitchContext+0xac>)
 8008474:	2201      	movs	r2, #1
 8008476:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008478:	e042      	b.n	8008500 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800847a:	4b25      	ldr	r3, [pc, #148]	@ (8008510 <vTaskSwitchContext+0xac>)
 800847c:	2200      	movs	r2, #0
 800847e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008480:	4b24      	ldr	r3, [pc, #144]	@ (8008514 <vTaskSwitchContext+0xb0>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	60fb      	str	r3, [r7, #12]
 8008486:	e011      	b.n	80084ac <vTaskSwitchContext+0x48>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10b      	bne.n	80084a6 <vTaskSwitchContext+0x42>
	__asm volatile
 800848e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	607b      	str	r3, [r7, #4]
}
 80084a0:	bf00      	nop
 80084a2:	bf00      	nop
 80084a4:	e7fd      	b.n	80084a2 <vTaskSwitchContext+0x3e>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	3b01      	subs	r3, #1
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	491a      	ldr	r1, [pc, #104]	@ (8008518 <vTaskSwitchContext+0xb4>)
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	4613      	mov	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4413      	add	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	440b      	add	r3, r1
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d0e3      	beq.n	8008488 <vTaskSwitchContext+0x24>
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	4613      	mov	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4a13      	ldr	r2, [pc, #76]	@ (8008518 <vTaskSwitchContext+0xb4>)
 80084cc:	4413      	add	r3, r2
 80084ce:	60bb      	str	r3, [r7, #8]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	605a      	str	r2, [r3, #4]
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	3308      	adds	r3, #8
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d104      	bne.n	80084f0 <vTaskSwitchContext+0x8c>
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	605a      	str	r2, [r3, #4]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	4a09      	ldr	r2, [pc, #36]	@ (800851c <vTaskSwitchContext+0xb8>)
 80084f8:	6013      	str	r3, [r2, #0]
 80084fa:	4a06      	ldr	r2, [pc, #24]	@ (8008514 <vTaskSwitchContext+0xb0>)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6013      	str	r3, [r2, #0]
}
 8008500:	bf00      	nop
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	200025e8 	.word	0x200025e8
 8008510:	200025d4 	.word	0x200025d4
 8008514:	200025c8 	.word	0x200025c8
 8008518:	200020f0 	.word	0x200020f0
 800851c:	200020ec 	.word	0x200020ec

08008520 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10b      	bne.n	8008548 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	60fb      	str	r3, [r7, #12]
}
 8008542:	bf00      	nop
 8008544:	bf00      	nop
 8008546:	e7fd      	b.n	8008544 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008548:	4b07      	ldr	r3, [pc, #28]	@ (8008568 <vTaskPlaceOnEventList+0x48>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3318      	adds	r3, #24
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7fe fe34 	bl	80071be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008556:	2101      	movs	r1, #1
 8008558:	6838      	ldr	r0, [r7, #0]
 800855a:	f000 fa81 	bl	8008a60 <prvAddCurrentTaskToDelayedList>
}
 800855e:	bf00      	nop
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	200020ec 	.word	0x200020ec

0800856c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10b      	bne.n	8008596 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	617b      	str	r3, [r7, #20]
}
 8008590:	bf00      	nop
 8008592:	bf00      	nop
 8008594:	e7fd      	b.n	8008592 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008596:	4b0a      	ldr	r3, [pc, #40]	@ (80085c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3318      	adds	r3, #24
 800859c:	4619      	mov	r1, r3
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f7fe fde9 	bl	8007176 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d002      	beq.n	80085b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80085aa:	f04f 33ff 	mov.w	r3, #4294967295
 80085ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80085b0:	6879      	ldr	r1, [r7, #4]
 80085b2:	68b8      	ldr	r0, [r7, #8]
 80085b4:	f000 fa54 	bl	8008a60 <prvAddCurrentTaskToDelayedList>
	}
 80085b8:	bf00      	nop
 80085ba:	3718      	adds	r7, #24
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	200020ec 	.word	0x200020ec

080085c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10b      	bne.n	80085f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80085da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085de:	f383 8811 	msr	BASEPRI, r3
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	60fb      	str	r3, [r7, #12]
}
 80085ec:	bf00      	nop
 80085ee:	bf00      	nop
 80085f0:	e7fd      	b.n	80085ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	3318      	adds	r3, #24
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fe fe1a 	bl	8007230 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085fc:	4b1d      	ldr	r3, [pc, #116]	@ (8008674 <xTaskRemoveFromEventList+0xb0>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d11d      	bne.n	8008640 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	3304      	adds	r3, #4
 8008608:	4618      	mov	r0, r3
 800860a:	f7fe fe11 	bl	8007230 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008612:	4b19      	ldr	r3, [pc, #100]	@ (8008678 <xTaskRemoveFromEventList+0xb4>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	429a      	cmp	r2, r3
 8008618:	d903      	bls.n	8008622 <xTaskRemoveFromEventList+0x5e>
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861e:	4a16      	ldr	r2, [pc, #88]	@ (8008678 <xTaskRemoveFromEventList+0xb4>)
 8008620:	6013      	str	r3, [r2, #0]
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008626:	4613      	mov	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4413      	add	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4a13      	ldr	r2, [pc, #76]	@ (800867c <xTaskRemoveFromEventList+0xb8>)
 8008630:	441a      	add	r2, r3
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	3304      	adds	r3, #4
 8008636:	4619      	mov	r1, r3
 8008638:	4610      	mov	r0, r2
 800863a:	f7fe fd9c 	bl	8007176 <vListInsertEnd>
 800863e:	e005      	b.n	800864c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	3318      	adds	r3, #24
 8008644:	4619      	mov	r1, r3
 8008646:	480e      	ldr	r0, [pc, #56]	@ (8008680 <xTaskRemoveFromEventList+0xbc>)
 8008648:	f7fe fd95 	bl	8007176 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008650:	4b0c      	ldr	r3, [pc, #48]	@ (8008684 <xTaskRemoveFromEventList+0xc0>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008656:	429a      	cmp	r2, r3
 8008658:	d905      	bls.n	8008666 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800865a:	2301      	movs	r3, #1
 800865c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800865e:	4b0a      	ldr	r3, [pc, #40]	@ (8008688 <xTaskRemoveFromEventList+0xc4>)
 8008660:	2201      	movs	r2, #1
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	e001      	b.n	800866a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008666:	2300      	movs	r3, #0
 8008668:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800866a:	697b      	ldr	r3, [r7, #20]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3718      	adds	r7, #24
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	200025e8 	.word	0x200025e8
 8008678:	200025c8 	.word	0x200025c8
 800867c:	200020f0 	.word	0x200020f0
 8008680:	20002580 	.word	0x20002580
 8008684:	200020ec 	.word	0x200020ec
 8008688:	200025d4 	.word	0x200025d4

0800868c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008694:	4b06      	ldr	r3, [pc, #24]	@ (80086b0 <vTaskInternalSetTimeOutState+0x24>)
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800869c:	4b05      	ldr	r3, [pc, #20]	@ (80086b4 <vTaskInternalSetTimeOutState+0x28>)
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	605a      	str	r2, [r3, #4]
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	200025d8 	.word	0x200025d8
 80086b4:	200025c4 	.word	0x200025c4

080086b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b088      	sub	sp, #32
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10b      	bne.n	80086e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	613b      	str	r3, [r7, #16]
}
 80086da:	bf00      	nop
 80086dc:	bf00      	nop
 80086de:	e7fd      	b.n	80086dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10b      	bne.n	80086fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80086e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	60fb      	str	r3, [r7, #12]
}
 80086f8:	bf00      	nop
 80086fa:	bf00      	nop
 80086fc:	e7fd      	b.n	80086fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80086fe:	f000 fe8b 	bl	8009418 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008702:	4b1d      	ldr	r3, [pc, #116]	@ (8008778 <xTaskCheckForTimeOut+0xc0>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	69ba      	ldr	r2, [r7, #24]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800871a:	d102      	bne.n	8008722 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800871c:	2300      	movs	r3, #0
 800871e:	61fb      	str	r3, [r7, #28]
 8008720:	e023      	b.n	800876a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	4b15      	ldr	r3, [pc, #84]	@ (800877c <xTaskCheckForTimeOut+0xc4>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	429a      	cmp	r2, r3
 800872c:	d007      	beq.n	800873e <xTaskCheckForTimeOut+0x86>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	69ba      	ldr	r2, [r7, #24]
 8008734:	429a      	cmp	r2, r3
 8008736:	d302      	bcc.n	800873e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008738:	2301      	movs	r3, #1
 800873a:	61fb      	str	r3, [r7, #28]
 800873c:	e015      	b.n	800876a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	429a      	cmp	r2, r3
 8008746:	d20b      	bcs.n	8008760 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	1ad2      	subs	r2, r2, r3
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f7ff ff99 	bl	800868c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800875a:	2300      	movs	r3, #0
 800875c:	61fb      	str	r3, [r7, #28]
 800875e:	e004      	b.n	800876a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008766:	2301      	movs	r3, #1
 8008768:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800876a:	f000 fe87 	bl	800947c <vPortExitCritical>

	return xReturn;
 800876e:	69fb      	ldr	r3, [r7, #28]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3720      	adds	r7, #32
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	200025c4 	.word	0x200025c4
 800877c:	200025d8 	.word	0x200025d8

08008780 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008780:	b480      	push	{r7}
 8008782:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008784:	4b03      	ldr	r3, [pc, #12]	@ (8008794 <vTaskMissedYield+0x14>)
 8008786:	2201      	movs	r2, #1
 8008788:	601a      	str	r2, [r3, #0]
}
 800878a:	bf00      	nop
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	200025d4 	.word	0x200025d4

08008798 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80087a0:	f000 f852 	bl	8008848 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80087a4:	4b06      	ldr	r3, [pc, #24]	@ (80087c0 <prvIdleTask+0x28>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d9f9      	bls.n	80087a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80087ac:	4b05      	ldr	r3, [pc, #20]	@ (80087c4 <prvIdleTask+0x2c>)
 80087ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80087bc:	e7f0      	b.n	80087a0 <prvIdleTask+0x8>
 80087be:	bf00      	nop
 80087c0:	200020f0 	.word	0x200020f0
 80087c4:	e000ed04 	.word	0xe000ed04

080087c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087ce:	2300      	movs	r3, #0
 80087d0:	607b      	str	r3, [r7, #4]
 80087d2:	e00c      	b.n	80087ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	4613      	mov	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4413      	add	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4a12      	ldr	r2, [pc, #72]	@ (8008828 <prvInitialiseTaskLists+0x60>)
 80087e0:	4413      	add	r3, r2
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fe fc9a 	bl	800711c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	3301      	adds	r3, #1
 80087ec:	607b      	str	r3, [r7, #4]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2b37      	cmp	r3, #55	@ 0x37
 80087f2:	d9ef      	bls.n	80087d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80087f4:	480d      	ldr	r0, [pc, #52]	@ (800882c <prvInitialiseTaskLists+0x64>)
 80087f6:	f7fe fc91 	bl	800711c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087fa:	480d      	ldr	r0, [pc, #52]	@ (8008830 <prvInitialiseTaskLists+0x68>)
 80087fc:	f7fe fc8e 	bl	800711c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008800:	480c      	ldr	r0, [pc, #48]	@ (8008834 <prvInitialiseTaskLists+0x6c>)
 8008802:	f7fe fc8b 	bl	800711c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008806:	480c      	ldr	r0, [pc, #48]	@ (8008838 <prvInitialiseTaskLists+0x70>)
 8008808:	f7fe fc88 	bl	800711c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800880c:	480b      	ldr	r0, [pc, #44]	@ (800883c <prvInitialiseTaskLists+0x74>)
 800880e:	f7fe fc85 	bl	800711c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008812:	4b0b      	ldr	r3, [pc, #44]	@ (8008840 <prvInitialiseTaskLists+0x78>)
 8008814:	4a05      	ldr	r2, [pc, #20]	@ (800882c <prvInitialiseTaskLists+0x64>)
 8008816:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008818:	4b0a      	ldr	r3, [pc, #40]	@ (8008844 <prvInitialiseTaskLists+0x7c>)
 800881a:	4a05      	ldr	r2, [pc, #20]	@ (8008830 <prvInitialiseTaskLists+0x68>)
 800881c:	601a      	str	r2, [r3, #0]
}
 800881e:	bf00      	nop
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	200020f0 	.word	0x200020f0
 800882c:	20002550 	.word	0x20002550
 8008830:	20002564 	.word	0x20002564
 8008834:	20002580 	.word	0x20002580
 8008838:	20002594 	.word	0x20002594
 800883c:	200025ac 	.word	0x200025ac
 8008840:	20002578 	.word	0x20002578
 8008844:	2000257c 	.word	0x2000257c

08008848 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800884e:	e019      	b.n	8008884 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008850:	f000 fde2 	bl	8009418 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008854:	4b10      	ldr	r3, [pc, #64]	@ (8008898 <prvCheckTasksWaitingTermination+0x50>)
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	3304      	adds	r3, #4
 8008860:	4618      	mov	r0, r3
 8008862:	f7fe fce5 	bl	8007230 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008866:	4b0d      	ldr	r3, [pc, #52]	@ (800889c <prvCheckTasksWaitingTermination+0x54>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	3b01      	subs	r3, #1
 800886c:	4a0b      	ldr	r2, [pc, #44]	@ (800889c <prvCheckTasksWaitingTermination+0x54>)
 800886e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008870:	4b0b      	ldr	r3, [pc, #44]	@ (80088a0 <prvCheckTasksWaitingTermination+0x58>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	3b01      	subs	r3, #1
 8008876:	4a0a      	ldr	r2, [pc, #40]	@ (80088a0 <prvCheckTasksWaitingTermination+0x58>)
 8008878:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800887a:	f000 fdff 	bl	800947c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f810 	bl	80088a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008884:	4b06      	ldr	r3, [pc, #24]	@ (80088a0 <prvCheckTasksWaitingTermination+0x58>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1e1      	bne.n	8008850 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800888c:	bf00      	nop
 800888e:	bf00      	nop
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20002594 	.word	0x20002594
 800889c:	200025c0 	.word	0x200025c0
 80088a0:	200025a8 	.word	0x200025a8

080088a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d108      	bne.n	80088c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 ff9c 	bl	80097f8 <vPortFree>
				vPortFree( pxTCB );
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 ff99 	bl	80097f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80088c6:	e019      	b.n	80088fc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d103      	bne.n	80088da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 ff90 	bl	80097f8 <vPortFree>
	}
 80088d8:	e010      	b.n	80088fc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d00b      	beq.n	80088fc <prvDeleteTCB+0x58>
	__asm volatile
 80088e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e8:	f383 8811 	msr	BASEPRI, r3
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	60fb      	str	r3, [r7, #12]
}
 80088f6:	bf00      	nop
 80088f8:	bf00      	nop
 80088fa:	e7fd      	b.n	80088f8 <prvDeleteTCB+0x54>
	}
 80088fc:	bf00      	nop
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800890a:	4b0c      	ldr	r3, [pc, #48]	@ (800893c <prvResetNextTaskUnblockTime+0x38>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d104      	bne.n	800891e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008914:	4b0a      	ldr	r3, [pc, #40]	@ (8008940 <prvResetNextTaskUnblockTime+0x3c>)
 8008916:	f04f 32ff 	mov.w	r2, #4294967295
 800891a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800891c:	e008      	b.n	8008930 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800891e:	4b07      	ldr	r3, [pc, #28]	@ (800893c <prvResetNextTaskUnblockTime+0x38>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	4a04      	ldr	r2, [pc, #16]	@ (8008940 <prvResetNextTaskUnblockTime+0x3c>)
 800892e:	6013      	str	r3, [r2, #0]
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	20002578 	.word	0x20002578
 8008940:	200025e0 	.word	0x200025e0

08008944 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800894a:	4b0b      	ldr	r3, [pc, #44]	@ (8008978 <xTaskGetSchedulerState+0x34>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d102      	bne.n	8008958 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008952:	2301      	movs	r3, #1
 8008954:	607b      	str	r3, [r7, #4]
 8008956:	e008      	b.n	800896a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008958:	4b08      	ldr	r3, [pc, #32]	@ (800897c <xTaskGetSchedulerState+0x38>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d102      	bne.n	8008966 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008960:	2302      	movs	r3, #2
 8008962:	607b      	str	r3, [r7, #4]
 8008964:	e001      	b.n	800896a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008966:	2300      	movs	r3, #0
 8008968:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800896a:	687b      	ldr	r3, [r7, #4]
	}
 800896c:	4618      	mov	r0, r3
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	200025cc 	.word	0x200025cc
 800897c:	200025e8 	.word	0x200025e8

08008980 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d058      	beq.n	8008a48 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008996:	4b2f      	ldr	r3, [pc, #188]	@ (8008a54 <xTaskPriorityDisinherit+0xd4>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	429a      	cmp	r2, r3
 800899e:	d00b      	beq.n	80089b8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	60fb      	str	r3, [r7, #12]
}
 80089b2:	bf00      	nop
 80089b4:	bf00      	nop
 80089b6:	e7fd      	b.n	80089b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d10b      	bne.n	80089d8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	60bb      	str	r3, [r7, #8]
}
 80089d2:	bf00      	nop
 80089d4:	bf00      	nop
 80089d6:	e7fd      	b.n	80089d4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089dc:	1e5a      	subs	r2, r3, #1
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d02c      	beq.n	8008a48 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d128      	bne.n	8008a48 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	3304      	adds	r3, #4
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fe fc18 	bl	8007230 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a18:	4b0f      	ldr	r3, [pc, #60]	@ (8008a58 <xTaskPriorityDisinherit+0xd8>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d903      	bls.n	8008a28 <xTaskPriorityDisinherit+0xa8>
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a24:	4a0c      	ldr	r2, [pc, #48]	@ (8008a58 <xTaskPriorityDisinherit+0xd8>)
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4a09      	ldr	r2, [pc, #36]	@ (8008a5c <xTaskPriorityDisinherit+0xdc>)
 8008a36:	441a      	add	r2, r3
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	3304      	adds	r3, #4
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	4610      	mov	r0, r2
 8008a40:	f7fe fb99 	bl	8007176 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a44:	2301      	movs	r3, #1
 8008a46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a48:	697b      	ldr	r3, [r7, #20]
	}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3718      	adds	r7, #24
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	200020ec 	.word	0x200020ec
 8008a58:	200025c8 	.word	0x200025c8
 8008a5c:	200020f0 	.word	0x200020f0

08008a60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a6a:	4b21      	ldr	r3, [pc, #132]	@ (8008af0 <prvAddCurrentTaskToDelayedList+0x90>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a70:	4b20      	ldr	r3, [pc, #128]	@ (8008af4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	3304      	adds	r3, #4
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fe fbda 	bl	8007230 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a82:	d10a      	bne.n	8008a9a <prvAddCurrentTaskToDelayedList+0x3a>
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d007      	beq.n	8008a9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8008af4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	3304      	adds	r3, #4
 8008a90:	4619      	mov	r1, r3
 8008a92:	4819      	ldr	r0, [pc, #100]	@ (8008af8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008a94:	f7fe fb6f 	bl	8007176 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a98:	e026      	b.n	8008ae8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008aa2:	4b14      	ldr	r3, [pc, #80]	@ (8008af4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d209      	bcs.n	8008ac6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ab2:	4b12      	ldr	r3, [pc, #72]	@ (8008afc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8008af4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3304      	adds	r3, #4
 8008abc:	4619      	mov	r1, r3
 8008abe:	4610      	mov	r0, r2
 8008ac0:	f7fe fb7d 	bl	80071be <vListInsert>
}
 8008ac4:	e010      	b.n	8008ae8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8008b00 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	4b0a      	ldr	r3, [pc, #40]	@ (8008af4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3304      	adds	r3, #4
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	4610      	mov	r0, r2
 8008ad4:	f7fe fb73 	bl	80071be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8008b04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d202      	bcs.n	8008ae8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008ae2:	4a08      	ldr	r2, [pc, #32]	@ (8008b04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	6013      	str	r3, [r2, #0]
}
 8008ae8:	bf00      	nop
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	200025c4 	.word	0x200025c4
 8008af4:	200020ec 	.word	0x200020ec
 8008af8:	200025ac 	.word	0x200025ac
 8008afc:	2000257c 	.word	0x2000257c
 8008b00:	20002578 	.word	0x20002578
 8008b04:	200025e0 	.word	0x200025e0

08008b08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b08a      	sub	sp, #40	@ 0x28
 8008b0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008b12:	f000 fb13 	bl	800913c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008b16:	4b1d      	ldr	r3, [pc, #116]	@ (8008b8c <xTimerCreateTimerTask+0x84>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d021      	beq.n	8008b62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b22:	2300      	movs	r3, #0
 8008b24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b26:	1d3a      	adds	r2, r7, #4
 8008b28:	f107 0108 	add.w	r1, r7, #8
 8008b2c:	f107 030c 	add.w	r3, r7, #12
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fe fad9 	bl	80070e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b36:	6879      	ldr	r1, [r7, #4]
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	9202      	str	r2, [sp, #8]
 8008b3e:	9301      	str	r3, [sp, #4]
 8008b40:	2302      	movs	r3, #2
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	2300      	movs	r3, #0
 8008b46:	460a      	mov	r2, r1
 8008b48:	4911      	ldr	r1, [pc, #68]	@ (8008b90 <xTimerCreateTimerTask+0x88>)
 8008b4a:	4812      	ldr	r0, [pc, #72]	@ (8008b94 <xTimerCreateTimerTask+0x8c>)
 8008b4c:	f7ff f8d0 	bl	8007cf0 <xTaskCreateStatic>
 8008b50:	4603      	mov	r3, r0
 8008b52:	4a11      	ldr	r2, [pc, #68]	@ (8008b98 <xTimerCreateTimerTask+0x90>)
 8008b54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008b56:	4b10      	ldr	r3, [pc, #64]	@ (8008b98 <xTimerCreateTimerTask+0x90>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d001      	beq.n	8008b62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10b      	bne.n	8008b80 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6c:	f383 8811 	msr	BASEPRI, r3
 8008b70:	f3bf 8f6f 	isb	sy
 8008b74:	f3bf 8f4f 	dsb	sy
 8008b78:	613b      	str	r3, [r7, #16]
}
 8008b7a:	bf00      	nop
 8008b7c:	bf00      	nop
 8008b7e:	e7fd      	b.n	8008b7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008b80:	697b      	ldr	r3, [r7, #20]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3718      	adds	r7, #24
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	2000261c 	.word	0x2000261c
 8008b90:	08011838 	.word	0x08011838
 8008b94:	08008cd5 	.word	0x08008cd5
 8008b98:	20002620 	.word	0x20002620

08008b9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b08a      	sub	sp, #40	@ 0x28
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
 8008ba8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008baa:	2300      	movs	r3, #0
 8008bac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10b      	bne.n	8008bcc <xTimerGenericCommand+0x30>
	__asm volatile
 8008bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	623b      	str	r3, [r7, #32]
}
 8008bc6:	bf00      	nop
 8008bc8:	bf00      	nop
 8008bca:	e7fd      	b.n	8008bc8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008bcc:	4b19      	ldr	r3, [pc, #100]	@ (8008c34 <xTimerGenericCommand+0x98>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d02a      	beq.n	8008c2a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	2b05      	cmp	r3, #5
 8008be4:	dc18      	bgt.n	8008c18 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008be6:	f7ff fead 	bl	8008944 <xTaskGetSchedulerState>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d109      	bne.n	8008c04 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008bf0:	4b10      	ldr	r3, [pc, #64]	@ (8008c34 <xTimerGenericCommand+0x98>)
 8008bf2:	6818      	ldr	r0, [r3, #0]
 8008bf4:	f107 0110 	add.w	r1, r7, #16
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bfc:	f7fe fc88 	bl	8007510 <xQueueGenericSend>
 8008c00:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c02:	e012      	b.n	8008c2a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008c04:	4b0b      	ldr	r3, [pc, #44]	@ (8008c34 <xTimerGenericCommand+0x98>)
 8008c06:	6818      	ldr	r0, [r3, #0]
 8008c08:	f107 0110 	add.w	r1, r7, #16
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f7fe fc7e 	bl	8007510 <xQueueGenericSend>
 8008c14:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c16:	e008      	b.n	8008c2a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008c18:	4b06      	ldr	r3, [pc, #24]	@ (8008c34 <xTimerGenericCommand+0x98>)
 8008c1a:	6818      	ldr	r0, [r3, #0]
 8008c1c:	f107 0110 	add.w	r1, r7, #16
 8008c20:	2300      	movs	r3, #0
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	f7fe fd76 	bl	8007714 <xQueueGenericSendFromISR>
 8008c28:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3728      	adds	r7, #40	@ 0x28
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	2000261c 	.word	0x2000261c

08008c38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b088      	sub	sp, #32
 8008c3c:	af02      	add	r7, sp, #8
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c42:	4b23      	ldr	r3, [pc, #140]	@ (8008cd0 <prvProcessExpiredTimer+0x98>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	3304      	adds	r3, #4
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7fe faed 	bl	8007230 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c5c:	f003 0304 	and.w	r3, r3, #4
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d023      	beq.n	8008cac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	699a      	ldr	r2, [r3, #24]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	18d1      	adds	r1, r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	6978      	ldr	r0, [r7, #20]
 8008c72:	f000 f8d5 	bl	8008e20 <prvInsertTimerInActiveList>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d020      	beq.n	8008cbe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	2300      	movs	r3, #0
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	2100      	movs	r1, #0
 8008c86:	6978      	ldr	r0, [r7, #20]
 8008c88:	f7ff ff88 	bl	8008b9c <xTimerGenericCommand>
 8008c8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d114      	bne.n	8008cbe <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	60fb      	str	r3, [r7, #12]
}
 8008ca6:	bf00      	nop
 8008ca8:	bf00      	nop
 8008caa:	e7fd      	b.n	8008ca8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cb2:	f023 0301 	bic.w	r3, r3, #1
 8008cb6:	b2da      	uxtb	r2, r3
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	6978      	ldr	r0, [r7, #20]
 8008cc4:	4798      	blx	r3
}
 8008cc6:	bf00      	nop
 8008cc8:	3718      	adds	r7, #24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	20002614 	.word	0x20002614

08008cd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cdc:	f107 0308 	add.w	r3, r7, #8
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f000 f859 	bl	8008d98 <prvGetNextExpireTime>
 8008ce6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	4619      	mov	r1, r3
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f000 f805 	bl	8008cfc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008cf2:	f000 f8d7 	bl	8008ea4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cf6:	bf00      	nop
 8008cf8:	e7f0      	b.n	8008cdc <prvTimerTask+0x8>
	...

08008cfc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008d06:	f7ff fa37 	bl	8008178 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d0a:	f107 0308 	add.w	r3, r7, #8
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 f866 	bl	8008de0 <prvSampleTimeNow>
 8008d14:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d130      	bne.n	8008d7e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10a      	bne.n	8008d38 <prvProcessTimerOrBlockTask+0x3c>
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d806      	bhi.n	8008d38 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d2a:	f7ff fa33 	bl	8008194 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d2e:	68f9      	ldr	r1, [r7, #12]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f7ff ff81 	bl	8008c38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d36:	e024      	b.n	8008d82 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d008      	beq.n	8008d50 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d3e:	4b13      	ldr	r3, [pc, #76]	@ (8008d8c <prvProcessTimerOrBlockTask+0x90>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d101      	bne.n	8008d4c <prvProcessTimerOrBlockTask+0x50>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e000      	b.n	8008d4e <prvProcessTimerOrBlockTask+0x52>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d50:	4b0f      	ldr	r3, [pc, #60]	@ (8008d90 <prvProcessTimerOrBlockTask+0x94>)
 8008d52:	6818      	ldr	r0, [r3, #0]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	683a      	ldr	r2, [r7, #0]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	f7fe ff93 	bl	8007c88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d62:	f7ff fa17 	bl	8008194 <xTaskResumeAll>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10a      	bne.n	8008d82 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008d6c:	4b09      	ldr	r3, [pc, #36]	@ (8008d94 <prvProcessTimerOrBlockTask+0x98>)
 8008d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	f3bf 8f6f 	isb	sy
}
 8008d7c:	e001      	b.n	8008d82 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008d7e:	f7ff fa09 	bl	8008194 <xTaskResumeAll>
}
 8008d82:	bf00      	nop
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20002618 	.word	0x20002618
 8008d90:	2000261c 	.word	0x2000261c
 8008d94:	e000ed04 	.word	0xe000ed04

08008d98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008da0:	4b0e      	ldr	r3, [pc, #56]	@ (8008ddc <prvGetNextExpireTime+0x44>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <prvGetNextExpireTime+0x16>
 8008daa:	2201      	movs	r2, #1
 8008dac:	e000      	b.n	8008db0 <prvGetNextExpireTime+0x18>
 8008dae:	2200      	movs	r2, #0
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d105      	bne.n	8008dc8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008dbc:	4b07      	ldr	r3, [pc, #28]	@ (8008ddc <prvGetNextExpireTime+0x44>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	60fb      	str	r3, [r7, #12]
 8008dc6:	e001      	b.n	8008dcc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3714      	adds	r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	20002614 	.word	0x20002614

08008de0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008de8:	f7ff fa72 	bl	80082d0 <xTaskGetTickCount>
 8008dec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008dee:	4b0b      	ldr	r3, [pc, #44]	@ (8008e1c <prvSampleTimeNow+0x3c>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d205      	bcs.n	8008e04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008df8:	f000 f93a 	bl	8009070 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	601a      	str	r2, [r3, #0]
 8008e02:	e002      	b.n	8008e0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008e0a:	4a04      	ldr	r2, [pc, #16]	@ (8008e1c <prvSampleTimeNow+0x3c>)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008e10:	68fb      	ldr	r3, [r7, #12]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	20002624 	.word	0x20002624

08008e20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
 8008e2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	68ba      	ldr	r2, [r7, #8]
 8008e36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d812      	bhi.n	8008e6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	1ad2      	subs	r2, r2, r3
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d302      	bcc.n	8008e5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008e54:	2301      	movs	r3, #1
 8008e56:	617b      	str	r3, [r7, #20]
 8008e58:	e01b      	b.n	8008e92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e5a:	4b10      	ldr	r3, [pc, #64]	@ (8008e9c <prvInsertTimerInActiveList+0x7c>)
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	3304      	adds	r3, #4
 8008e62:	4619      	mov	r1, r3
 8008e64:	4610      	mov	r0, r2
 8008e66:	f7fe f9aa 	bl	80071be <vListInsert>
 8008e6a:	e012      	b.n	8008e92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d206      	bcs.n	8008e82 <prvInsertTimerInActiveList+0x62>
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d302      	bcc.n	8008e82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	617b      	str	r3, [r7, #20]
 8008e80:	e007      	b.n	8008e92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e82:	4b07      	ldr	r3, [pc, #28]	@ (8008ea0 <prvInsertTimerInActiveList+0x80>)
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	3304      	adds	r3, #4
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	f7fe f996 	bl	80071be <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008e92:	697b      	ldr	r3, [r7, #20]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3718      	adds	r7, #24
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	20002618 	.word	0x20002618
 8008ea0:	20002614 	.word	0x20002614

08008ea4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b08e      	sub	sp, #56	@ 0x38
 8008ea8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008eaa:	e0ce      	b.n	800904a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	da19      	bge.n	8008ee6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008eb2:	1d3b      	adds	r3, r7, #4
 8008eb4:	3304      	adds	r3, #4
 8008eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d10b      	bne.n	8008ed6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	61fb      	str	r3, [r7, #28]
}
 8008ed0:	bf00      	nop
 8008ed2:	bf00      	nop
 8008ed4:	e7fd      	b.n	8008ed2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008edc:	6850      	ldr	r0, [r2, #4]
 8008ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ee0:	6892      	ldr	r2, [r2, #8]
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f2c0 80ae 	blt.w	800904a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d004      	beq.n	8008f04 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008efc:	3304      	adds	r3, #4
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fe f996 	bl	8007230 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f04:	463b      	mov	r3, r7
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7ff ff6a 	bl	8008de0 <prvSampleTimeNow>
 8008f0c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2b09      	cmp	r3, #9
 8008f12:	f200 8097 	bhi.w	8009044 <prvProcessReceivedCommands+0x1a0>
 8008f16:	a201      	add	r2, pc, #4	@ (adr r2, 8008f1c <prvProcessReceivedCommands+0x78>)
 8008f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f1c:	08008f45 	.word	0x08008f45
 8008f20:	08008f45 	.word	0x08008f45
 8008f24:	08008f45 	.word	0x08008f45
 8008f28:	08008fbb 	.word	0x08008fbb
 8008f2c:	08008fcf 	.word	0x08008fcf
 8008f30:	0800901b 	.word	0x0800901b
 8008f34:	08008f45 	.word	0x08008f45
 8008f38:	08008f45 	.word	0x08008f45
 8008f3c:	08008fbb 	.word	0x08008fbb
 8008f40:	08008fcf 	.word	0x08008fcf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f4a:	f043 0301 	orr.w	r3, r3, #1
 8008f4e:	b2da      	uxtb	r2, r3
 8008f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	18d1      	adds	r1, r2, r3
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f64:	f7ff ff5c 	bl	8008e20 <prvInsertTimerInActiveList>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d06c      	beq.n	8009048 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f70:	6a1b      	ldr	r3, [r3, #32]
 8008f72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f7c:	f003 0304 	and.w	r3, r3, #4
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d061      	beq.n	8009048 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	441a      	add	r2, r3
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	2300      	movs	r3, #0
 8008f92:	2100      	movs	r1, #0
 8008f94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f96:	f7ff fe01 	bl	8008b9c <xTimerGenericCommand>
 8008f9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d152      	bne.n	8009048 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	61bb      	str	r3, [r7, #24]
}
 8008fb4:	bf00      	nop
 8008fb6:	bf00      	nop
 8008fb8:	e7fd      	b.n	8008fb6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fc0:	f023 0301 	bic.w	r3, r3, #1
 8008fc4:	b2da      	uxtb	r2, r3
 8008fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008fcc:	e03d      	b.n	800904a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fd4:	f043 0301 	orr.w	r3, r3, #1
 8008fd8:	b2da      	uxtb	r2, r3
 8008fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fdc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe8:	699b      	ldr	r3, [r3, #24]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10b      	bne.n	8009006 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	617b      	str	r3, [r7, #20]
}
 8009000:	bf00      	nop
 8009002:	bf00      	nop
 8009004:	e7fd      	b.n	8009002 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009008:	699a      	ldr	r2, [r3, #24]
 800900a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800900c:	18d1      	adds	r1, r2, r3
 800900e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009012:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009014:	f7ff ff04 	bl	8008e20 <prvInsertTimerInActiveList>
					break;
 8009018:	e017      	b.n	800904a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800901a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009020:	f003 0302 	and.w	r3, r3, #2
 8009024:	2b00      	cmp	r3, #0
 8009026:	d103      	bne.n	8009030 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009028:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800902a:	f000 fbe5 	bl	80097f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800902e:	e00c      	b.n	800904a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009032:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009036:	f023 0301 	bic.w	r3, r3, #1
 800903a:	b2da      	uxtb	r2, r3
 800903c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800903e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009042:	e002      	b.n	800904a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009044:	bf00      	nop
 8009046:	e000      	b.n	800904a <prvProcessReceivedCommands+0x1a6>
					break;
 8009048:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800904a:	4b08      	ldr	r3, [pc, #32]	@ (800906c <prvProcessReceivedCommands+0x1c8>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	1d39      	adds	r1, r7, #4
 8009050:	2200      	movs	r2, #0
 8009052:	4618      	mov	r0, r3
 8009054:	f7fe fbfc 	bl	8007850 <xQueueReceive>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	f47f af26 	bne.w	8008eac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009060:	bf00      	nop
 8009062:	bf00      	nop
 8009064:	3730      	adds	r7, #48	@ 0x30
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	2000261c 	.word	0x2000261c

08009070 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b088      	sub	sp, #32
 8009074:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009076:	e049      	b.n	800910c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009078:	4b2e      	ldr	r3, [pc, #184]	@ (8009134 <prvSwitchTimerLists+0xc4>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009082:	4b2c      	ldr	r3, [pc, #176]	@ (8009134 <prvSwitchTimerLists+0xc4>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	3304      	adds	r3, #4
 8009090:	4618      	mov	r0, r3
 8009092:	f7fe f8cd 	bl	8007230 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6a1b      	ldr	r3, [r3, #32]
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090a4:	f003 0304 	and.w	r3, r3, #4
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d02f      	beq.n	800910c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	4413      	add	r3, r2
 80090b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d90e      	bls.n	80090dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090ca:	4b1a      	ldr	r3, [pc, #104]	@ (8009134 <prvSwitchTimerLists+0xc4>)
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4619      	mov	r1, r3
 80090d4:	4610      	mov	r0, r2
 80090d6:	f7fe f872 	bl	80071be <vListInsert>
 80090da:	e017      	b.n	800910c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090dc:	2300      	movs	r3, #0
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	2300      	movs	r3, #0
 80090e2:	693a      	ldr	r2, [r7, #16]
 80090e4:	2100      	movs	r1, #0
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f7ff fd58 	bl	8008b9c <xTimerGenericCommand>
 80090ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10b      	bne.n	800910c <prvSwitchTimerLists+0x9c>
	__asm volatile
 80090f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	603b      	str	r3, [r7, #0]
}
 8009106:	bf00      	nop
 8009108:	bf00      	nop
 800910a:	e7fd      	b.n	8009108 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800910c:	4b09      	ldr	r3, [pc, #36]	@ (8009134 <prvSwitchTimerLists+0xc4>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1b0      	bne.n	8009078 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009116:	4b07      	ldr	r3, [pc, #28]	@ (8009134 <prvSwitchTimerLists+0xc4>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800911c:	4b06      	ldr	r3, [pc, #24]	@ (8009138 <prvSwitchTimerLists+0xc8>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a04      	ldr	r2, [pc, #16]	@ (8009134 <prvSwitchTimerLists+0xc4>)
 8009122:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009124:	4a04      	ldr	r2, [pc, #16]	@ (8009138 <prvSwitchTimerLists+0xc8>)
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	6013      	str	r3, [r2, #0]
}
 800912a:	bf00      	nop
 800912c:	3718      	adds	r7, #24
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	20002614 	.word	0x20002614
 8009138:	20002618 	.word	0x20002618

0800913c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009142:	f000 f969 	bl	8009418 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009146:	4b15      	ldr	r3, [pc, #84]	@ (800919c <prvCheckForValidListAndQueue+0x60>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d120      	bne.n	8009190 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800914e:	4814      	ldr	r0, [pc, #80]	@ (80091a0 <prvCheckForValidListAndQueue+0x64>)
 8009150:	f7fd ffe4 	bl	800711c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009154:	4813      	ldr	r0, [pc, #76]	@ (80091a4 <prvCheckForValidListAndQueue+0x68>)
 8009156:	f7fd ffe1 	bl	800711c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800915a:	4b13      	ldr	r3, [pc, #76]	@ (80091a8 <prvCheckForValidListAndQueue+0x6c>)
 800915c:	4a10      	ldr	r2, [pc, #64]	@ (80091a0 <prvCheckForValidListAndQueue+0x64>)
 800915e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009160:	4b12      	ldr	r3, [pc, #72]	@ (80091ac <prvCheckForValidListAndQueue+0x70>)
 8009162:	4a10      	ldr	r2, [pc, #64]	@ (80091a4 <prvCheckForValidListAndQueue+0x68>)
 8009164:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009166:	2300      	movs	r3, #0
 8009168:	9300      	str	r3, [sp, #0]
 800916a:	4b11      	ldr	r3, [pc, #68]	@ (80091b0 <prvCheckForValidListAndQueue+0x74>)
 800916c:	4a11      	ldr	r2, [pc, #68]	@ (80091b4 <prvCheckForValidListAndQueue+0x78>)
 800916e:	2110      	movs	r1, #16
 8009170:	200a      	movs	r0, #10
 8009172:	f7fe f8f1 	bl	8007358 <xQueueGenericCreateStatic>
 8009176:	4603      	mov	r3, r0
 8009178:	4a08      	ldr	r2, [pc, #32]	@ (800919c <prvCheckForValidListAndQueue+0x60>)
 800917a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800917c:	4b07      	ldr	r3, [pc, #28]	@ (800919c <prvCheckForValidListAndQueue+0x60>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d005      	beq.n	8009190 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009184:	4b05      	ldr	r3, [pc, #20]	@ (800919c <prvCheckForValidListAndQueue+0x60>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	490b      	ldr	r1, [pc, #44]	@ (80091b8 <prvCheckForValidListAndQueue+0x7c>)
 800918a:	4618      	mov	r0, r3
 800918c:	f7fe fd52 	bl	8007c34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009190:	f000 f974 	bl	800947c <vPortExitCritical>
}
 8009194:	bf00      	nop
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	2000261c 	.word	0x2000261c
 80091a0:	200025ec 	.word	0x200025ec
 80091a4:	20002600 	.word	0x20002600
 80091a8:	20002614 	.word	0x20002614
 80091ac:	20002618 	.word	0x20002618
 80091b0:	200026c8 	.word	0x200026c8
 80091b4:	20002628 	.word	0x20002628
 80091b8:	08011840 	.word	0x08011840

080091bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	3b04      	subs	r3, #4
 80091cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80091d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	3b04      	subs	r3, #4
 80091da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	f023 0201 	bic.w	r2, r3, #1
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	3b04      	subs	r3, #4
 80091ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80091ec:	4a0c      	ldr	r2, [pc, #48]	@ (8009220 <pxPortInitialiseStack+0x64>)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	3b14      	subs	r3, #20
 80091f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	3b04      	subs	r3, #4
 8009202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f06f 0202 	mvn.w	r2, #2
 800920a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	3b20      	subs	r3, #32
 8009210:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009212:	68fb      	ldr	r3, [r7, #12]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3714      	adds	r7, #20
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	08009225 	.word	0x08009225

08009224 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800922a:	2300      	movs	r3, #0
 800922c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800922e:	4b13      	ldr	r3, [pc, #76]	@ (800927c <prvTaskExitError+0x58>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009236:	d00b      	beq.n	8009250 <prvTaskExitError+0x2c>
	__asm volatile
 8009238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800923c:	f383 8811 	msr	BASEPRI, r3
 8009240:	f3bf 8f6f 	isb	sy
 8009244:	f3bf 8f4f 	dsb	sy
 8009248:	60fb      	str	r3, [r7, #12]
}
 800924a:	bf00      	nop
 800924c:	bf00      	nop
 800924e:	e7fd      	b.n	800924c <prvTaskExitError+0x28>
	__asm volatile
 8009250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	60bb      	str	r3, [r7, #8]
}
 8009262:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009264:	bf00      	nop
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d0fc      	beq.n	8009266 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800926c:	bf00      	nop
 800926e:	bf00      	nop
 8009270:	3714      	adds	r7, #20
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	2000004c 	.word	0x2000004c

08009280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009280:	4b07      	ldr	r3, [pc, #28]	@ (80092a0 <pxCurrentTCBConst2>)
 8009282:	6819      	ldr	r1, [r3, #0]
 8009284:	6808      	ldr	r0, [r1, #0]
 8009286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800928a:	f380 8809 	msr	PSP, r0
 800928e:	f3bf 8f6f 	isb	sy
 8009292:	f04f 0000 	mov.w	r0, #0
 8009296:	f380 8811 	msr	BASEPRI, r0
 800929a:	4770      	bx	lr
 800929c:	f3af 8000 	nop.w

080092a0 <pxCurrentTCBConst2>:
 80092a0:	200020ec 	.word	0x200020ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80092a4:	bf00      	nop
 80092a6:	bf00      	nop

080092a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80092a8:	4808      	ldr	r0, [pc, #32]	@ (80092cc <prvPortStartFirstTask+0x24>)
 80092aa:	6800      	ldr	r0, [r0, #0]
 80092ac:	6800      	ldr	r0, [r0, #0]
 80092ae:	f380 8808 	msr	MSP, r0
 80092b2:	f04f 0000 	mov.w	r0, #0
 80092b6:	f380 8814 	msr	CONTROL, r0
 80092ba:	b662      	cpsie	i
 80092bc:	b661      	cpsie	f
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	df00      	svc	0
 80092c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80092ca:	bf00      	nop
 80092cc:	e000ed08 	.word	0xe000ed08

080092d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80092d6:	4b47      	ldr	r3, [pc, #284]	@ (80093f4 <xPortStartScheduler+0x124>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a47      	ldr	r2, [pc, #284]	@ (80093f8 <xPortStartScheduler+0x128>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d10b      	bne.n	80092f8 <xPortStartScheduler+0x28>
	__asm volatile
 80092e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	613b      	str	r3, [r7, #16]
}
 80092f2:	bf00      	nop
 80092f4:	bf00      	nop
 80092f6:	e7fd      	b.n	80092f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80092f8:	4b3e      	ldr	r3, [pc, #248]	@ (80093f4 <xPortStartScheduler+0x124>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a3f      	ldr	r2, [pc, #252]	@ (80093fc <xPortStartScheduler+0x12c>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d10b      	bne.n	800931a <xPortStartScheduler+0x4a>
	__asm volatile
 8009302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009306:	f383 8811 	msr	BASEPRI, r3
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	60fb      	str	r3, [r7, #12]
}
 8009314:	bf00      	nop
 8009316:	bf00      	nop
 8009318:	e7fd      	b.n	8009316 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800931a:	4b39      	ldr	r3, [pc, #228]	@ (8009400 <xPortStartScheduler+0x130>)
 800931c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	b2db      	uxtb	r3, r3
 8009324:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	22ff      	movs	r2, #255	@ 0xff
 800932a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	b2db      	uxtb	r3, r3
 8009332:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009334:	78fb      	ldrb	r3, [r7, #3]
 8009336:	b2db      	uxtb	r3, r3
 8009338:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800933c:	b2da      	uxtb	r2, r3
 800933e:	4b31      	ldr	r3, [pc, #196]	@ (8009404 <xPortStartScheduler+0x134>)
 8009340:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009342:	4b31      	ldr	r3, [pc, #196]	@ (8009408 <xPortStartScheduler+0x138>)
 8009344:	2207      	movs	r2, #7
 8009346:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009348:	e009      	b.n	800935e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800934a:	4b2f      	ldr	r3, [pc, #188]	@ (8009408 <xPortStartScheduler+0x138>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3b01      	subs	r3, #1
 8009350:	4a2d      	ldr	r2, [pc, #180]	@ (8009408 <xPortStartScheduler+0x138>)
 8009352:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009354:	78fb      	ldrb	r3, [r7, #3]
 8009356:	b2db      	uxtb	r3, r3
 8009358:	005b      	lsls	r3, r3, #1
 800935a:	b2db      	uxtb	r3, r3
 800935c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800935e:	78fb      	ldrb	r3, [r7, #3]
 8009360:	b2db      	uxtb	r3, r3
 8009362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009366:	2b80      	cmp	r3, #128	@ 0x80
 8009368:	d0ef      	beq.n	800934a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800936a:	4b27      	ldr	r3, [pc, #156]	@ (8009408 <xPortStartScheduler+0x138>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f1c3 0307 	rsb	r3, r3, #7
 8009372:	2b04      	cmp	r3, #4
 8009374:	d00b      	beq.n	800938e <xPortStartScheduler+0xbe>
	__asm volatile
 8009376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800937a:	f383 8811 	msr	BASEPRI, r3
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	60bb      	str	r3, [r7, #8]
}
 8009388:	bf00      	nop
 800938a:	bf00      	nop
 800938c:	e7fd      	b.n	800938a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800938e:	4b1e      	ldr	r3, [pc, #120]	@ (8009408 <xPortStartScheduler+0x138>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	021b      	lsls	r3, r3, #8
 8009394:	4a1c      	ldr	r2, [pc, #112]	@ (8009408 <xPortStartScheduler+0x138>)
 8009396:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009398:	4b1b      	ldr	r3, [pc, #108]	@ (8009408 <xPortStartScheduler+0x138>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80093a0:	4a19      	ldr	r2, [pc, #100]	@ (8009408 <xPortStartScheduler+0x138>)
 80093a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80093ac:	4b17      	ldr	r3, [pc, #92]	@ (800940c <xPortStartScheduler+0x13c>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a16      	ldr	r2, [pc, #88]	@ (800940c <xPortStartScheduler+0x13c>)
 80093b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80093b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80093b8:	4b14      	ldr	r3, [pc, #80]	@ (800940c <xPortStartScheduler+0x13c>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a13      	ldr	r2, [pc, #76]	@ (800940c <xPortStartScheduler+0x13c>)
 80093be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80093c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80093c4:	f000 f8da 	bl	800957c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80093c8:	4b11      	ldr	r3, [pc, #68]	@ (8009410 <xPortStartScheduler+0x140>)
 80093ca:	2200      	movs	r2, #0
 80093cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80093ce:	f000 f8f9 	bl	80095c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80093d2:	4b10      	ldr	r3, [pc, #64]	@ (8009414 <xPortStartScheduler+0x144>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a0f      	ldr	r2, [pc, #60]	@ (8009414 <xPortStartScheduler+0x144>)
 80093d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80093dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80093de:	f7ff ff63 	bl	80092a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80093e2:	f7ff f83f 	bl	8008464 <vTaskSwitchContext>
	prvTaskExitError();
 80093e6:	f7ff ff1d 	bl	8009224 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3718      	adds	r7, #24
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	e000ed00 	.word	0xe000ed00
 80093f8:	410fc271 	.word	0x410fc271
 80093fc:	410fc270 	.word	0x410fc270
 8009400:	e000e400 	.word	0xe000e400
 8009404:	20002718 	.word	0x20002718
 8009408:	2000271c 	.word	0x2000271c
 800940c:	e000ed20 	.word	0xe000ed20
 8009410:	2000004c 	.word	0x2000004c
 8009414:	e000ef34 	.word	0xe000ef34

08009418 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
	__asm volatile
 800941e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	607b      	str	r3, [r7, #4]
}
 8009430:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009432:	4b10      	ldr	r3, [pc, #64]	@ (8009474 <vPortEnterCritical+0x5c>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	3301      	adds	r3, #1
 8009438:	4a0e      	ldr	r2, [pc, #56]	@ (8009474 <vPortEnterCritical+0x5c>)
 800943a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800943c:	4b0d      	ldr	r3, [pc, #52]	@ (8009474 <vPortEnterCritical+0x5c>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d110      	bne.n	8009466 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009444:	4b0c      	ldr	r3, [pc, #48]	@ (8009478 <vPortEnterCritical+0x60>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00b      	beq.n	8009466 <vPortEnterCritical+0x4e>
	__asm volatile
 800944e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	603b      	str	r3, [r7, #0]
}
 8009460:	bf00      	nop
 8009462:	bf00      	nop
 8009464:	e7fd      	b.n	8009462 <vPortEnterCritical+0x4a>
	}
}
 8009466:	bf00      	nop
 8009468:	370c      	adds	r7, #12
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	2000004c 	.word	0x2000004c
 8009478:	e000ed04 	.word	0xe000ed04

0800947c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009482:	4b12      	ldr	r3, [pc, #72]	@ (80094cc <vPortExitCritical+0x50>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d10b      	bne.n	80094a2 <vPortExitCritical+0x26>
	__asm volatile
 800948a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800948e:	f383 8811 	msr	BASEPRI, r3
 8009492:	f3bf 8f6f 	isb	sy
 8009496:	f3bf 8f4f 	dsb	sy
 800949a:	607b      	str	r3, [r7, #4]
}
 800949c:	bf00      	nop
 800949e:	bf00      	nop
 80094a0:	e7fd      	b.n	800949e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80094a2:	4b0a      	ldr	r3, [pc, #40]	@ (80094cc <vPortExitCritical+0x50>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	3b01      	subs	r3, #1
 80094a8:	4a08      	ldr	r2, [pc, #32]	@ (80094cc <vPortExitCritical+0x50>)
 80094aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80094ac:	4b07      	ldr	r3, [pc, #28]	@ (80094cc <vPortExitCritical+0x50>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d105      	bne.n	80094c0 <vPortExitCritical+0x44>
 80094b4:	2300      	movs	r3, #0
 80094b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	f383 8811 	msr	BASEPRI, r3
}
 80094be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	2000004c 	.word	0x2000004c

080094d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80094d0:	f3ef 8009 	mrs	r0, PSP
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	4b15      	ldr	r3, [pc, #84]	@ (8009530 <pxCurrentTCBConst>)
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	f01e 0f10 	tst.w	lr, #16
 80094e0:	bf08      	it	eq
 80094e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80094e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ea:	6010      	str	r0, [r2, #0]
 80094ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80094f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80094f4:	f380 8811 	msr	BASEPRI, r0
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	f3bf 8f6f 	isb	sy
 8009500:	f7fe ffb0 	bl	8008464 <vTaskSwitchContext>
 8009504:	f04f 0000 	mov.w	r0, #0
 8009508:	f380 8811 	msr	BASEPRI, r0
 800950c:	bc09      	pop	{r0, r3}
 800950e:	6819      	ldr	r1, [r3, #0]
 8009510:	6808      	ldr	r0, [r1, #0]
 8009512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009516:	f01e 0f10 	tst.w	lr, #16
 800951a:	bf08      	it	eq
 800951c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009520:	f380 8809 	msr	PSP, r0
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	f3af 8000 	nop.w

08009530 <pxCurrentTCBConst>:
 8009530:	200020ec 	.word	0x200020ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009534:	bf00      	nop
 8009536:	bf00      	nop

08009538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	607b      	str	r3, [r7, #4]
}
 8009550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009552:	f7fe fecd 	bl	80082f0 <xTaskIncrementTick>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d003      	beq.n	8009564 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800955c:	4b06      	ldr	r3, [pc, #24]	@ (8009578 <xPortSysTickHandler+0x40>)
 800955e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009562:	601a      	str	r2, [r3, #0]
 8009564:	2300      	movs	r3, #0
 8009566:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	f383 8811 	msr	BASEPRI, r3
}
 800956e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009570:	bf00      	nop
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	e000ed04 	.word	0xe000ed04

0800957c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800957c:	b480      	push	{r7}
 800957e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009580:	4b0b      	ldr	r3, [pc, #44]	@ (80095b0 <vPortSetupTimerInterrupt+0x34>)
 8009582:	2200      	movs	r2, #0
 8009584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009586:	4b0b      	ldr	r3, [pc, #44]	@ (80095b4 <vPortSetupTimerInterrupt+0x38>)
 8009588:	2200      	movs	r2, #0
 800958a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800958c:	4b0a      	ldr	r3, [pc, #40]	@ (80095b8 <vPortSetupTimerInterrupt+0x3c>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a0a      	ldr	r2, [pc, #40]	@ (80095bc <vPortSetupTimerInterrupt+0x40>)
 8009592:	fba2 2303 	umull	r2, r3, r2, r3
 8009596:	099b      	lsrs	r3, r3, #6
 8009598:	4a09      	ldr	r2, [pc, #36]	@ (80095c0 <vPortSetupTimerInterrupt+0x44>)
 800959a:	3b01      	subs	r3, #1
 800959c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800959e:	4b04      	ldr	r3, [pc, #16]	@ (80095b0 <vPortSetupTimerInterrupt+0x34>)
 80095a0:	2207      	movs	r2, #7
 80095a2:	601a      	str	r2, [r3, #0]
}
 80095a4:	bf00      	nop
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop
 80095b0:	e000e010 	.word	0xe000e010
 80095b4:	e000e018 	.word	0xe000e018
 80095b8:	2000000c 	.word	0x2000000c
 80095bc:	10624dd3 	.word	0x10624dd3
 80095c0:	e000e014 	.word	0xe000e014

080095c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80095c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80095d4 <vPortEnableVFP+0x10>
 80095c8:	6801      	ldr	r1, [r0, #0]
 80095ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80095ce:	6001      	str	r1, [r0, #0]
 80095d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80095d2:	bf00      	nop
 80095d4:	e000ed88 	.word	0xe000ed88

080095d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80095de:	f3ef 8305 	mrs	r3, IPSR
 80095e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2b0f      	cmp	r3, #15
 80095e8:	d915      	bls.n	8009616 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80095ea:	4a18      	ldr	r2, [pc, #96]	@ (800964c <vPortValidateInterruptPriority+0x74>)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	4413      	add	r3, r2
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80095f4:	4b16      	ldr	r3, [pc, #88]	@ (8009650 <vPortValidateInterruptPriority+0x78>)
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	7afa      	ldrb	r2, [r7, #11]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d20b      	bcs.n	8009616 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	607b      	str	r3, [r7, #4]
}
 8009610:	bf00      	nop
 8009612:	bf00      	nop
 8009614:	e7fd      	b.n	8009612 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009616:	4b0f      	ldr	r3, [pc, #60]	@ (8009654 <vPortValidateInterruptPriority+0x7c>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800961e:	4b0e      	ldr	r3, [pc, #56]	@ (8009658 <vPortValidateInterruptPriority+0x80>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	429a      	cmp	r2, r3
 8009624:	d90b      	bls.n	800963e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800962a:	f383 8811 	msr	BASEPRI, r3
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	603b      	str	r3, [r7, #0]
}
 8009638:	bf00      	nop
 800963a:	bf00      	nop
 800963c:	e7fd      	b.n	800963a <vPortValidateInterruptPriority+0x62>
	}
 800963e:	bf00      	nop
 8009640:	3714      	adds	r7, #20
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	e000e3f0 	.word	0xe000e3f0
 8009650:	20002718 	.word	0x20002718
 8009654:	e000ed0c 	.word	0xe000ed0c
 8009658:	2000271c 	.word	0x2000271c

0800965c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b08a      	sub	sp, #40	@ 0x28
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009664:	2300      	movs	r3, #0
 8009666:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009668:	f7fe fd86 	bl	8008178 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800966c:	4b5c      	ldr	r3, [pc, #368]	@ (80097e0 <pvPortMalloc+0x184>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d101      	bne.n	8009678 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009674:	f000 f924 	bl	80098c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009678:	4b5a      	ldr	r3, [pc, #360]	@ (80097e4 <pvPortMalloc+0x188>)
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4013      	ands	r3, r2
 8009680:	2b00      	cmp	r3, #0
 8009682:	f040 8095 	bne.w	80097b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d01e      	beq.n	80096ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800968c:	2208      	movs	r2, #8
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4413      	add	r3, r2
 8009692:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f003 0307 	and.w	r3, r3, #7
 800969a:	2b00      	cmp	r3, #0
 800969c:	d015      	beq.n	80096ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f023 0307 	bic.w	r3, r3, #7
 80096a4:	3308      	adds	r3, #8
 80096a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f003 0307 	and.w	r3, r3, #7
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00b      	beq.n	80096ca <pvPortMalloc+0x6e>
	__asm volatile
 80096b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b6:	f383 8811 	msr	BASEPRI, r3
 80096ba:	f3bf 8f6f 	isb	sy
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	617b      	str	r3, [r7, #20]
}
 80096c4:	bf00      	nop
 80096c6:	bf00      	nop
 80096c8:	e7fd      	b.n	80096c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d06f      	beq.n	80097b0 <pvPortMalloc+0x154>
 80096d0:	4b45      	ldr	r3, [pc, #276]	@ (80097e8 <pvPortMalloc+0x18c>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d86a      	bhi.n	80097b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80096da:	4b44      	ldr	r3, [pc, #272]	@ (80097ec <pvPortMalloc+0x190>)
 80096dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80096de:	4b43      	ldr	r3, [pc, #268]	@ (80097ec <pvPortMalloc+0x190>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096e4:	e004      	b.n	80096f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80096e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80096ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d903      	bls.n	8009702 <pvPortMalloc+0xa6>
 80096fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1f1      	bne.n	80096e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009702:	4b37      	ldr	r3, [pc, #220]	@ (80097e0 <pvPortMalloc+0x184>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009708:	429a      	cmp	r2, r3
 800970a:	d051      	beq.n	80097b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800970c:	6a3b      	ldr	r3, [r7, #32]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2208      	movs	r2, #8
 8009712:	4413      	add	r3, r2
 8009714:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800971e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009720:	685a      	ldr	r2, [r3, #4]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	1ad2      	subs	r2, r2, r3
 8009726:	2308      	movs	r3, #8
 8009728:	005b      	lsls	r3, r3, #1
 800972a:	429a      	cmp	r2, r3
 800972c:	d920      	bls.n	8009770 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800972e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4413      	add	r3, r2
 8009734:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	f003 0307 	and.w	r3, r3, #7
 800973c:	2b00      	cmp	r3, #0
 800973e:	d00b      	beq.n	8009758 <pvPortMalloc+0xfc>
	__asm volatile
 8009740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	613b      	str	r3, [r7, #16]
}
 8009752:	bf00      	nop
 8009754:	bf00      	nop
 8009756:	e7fd      	b.n	8009754 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975a:	685a      	ldr	r2, [r3, #4]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	1ad2      	subs	r2, r2, r3
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800976a:	69b8      	ldr	r0, [r7, #24]
 800976c:	f000 f90a 	bl	8009984 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009770:	4b1d      	ldr	r3, [pc, #116]	@ (80097e8 <pvPortMalloc+0x18c>)
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	4a1b      	ldr	r2, [pc, #108]	@ (80097e8 <pvPortMalloc+0x18c>)
 800977c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800977e:	4b1a      	ldr	r3, [pc, #104]	@ (80097e8 <pvPortMalloc+0x18c>)
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	4b1b      	ldr	r3, [pc, #108]	@ (80097f0 <pvPortMalloc+0x194>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	429a      	cmp	r2, r3
 8009788:	d203      	bcs.n	8009792 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800978a:	4b17      	ldr	r3, [pc, #92]	@ (80097e8 <pvPortMalloc+0x18c>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a18      	ldr	r2, [pc, #96]	@ (80097f0 <pvPortMalloc+0x194>)
 8009790:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	4b13      	ldr	r3, [pc, #76]	@ (80097e4 <pvPortMalloc+0x188>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	431a      	orrs	r2, r3
 800979c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800979e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80097a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a2:	2200      	movs	r2, #0
 80097a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80097a6:	4b13      	ldr	r3, [pc, #76]	@ (80097f4 <pvPortMalloc+0x198>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3301      	adds	r3, #1
 80097ac:	4a11      	ldr	r2, [pc, #68]	@ (80097f4 <pvPortMalloc+0x198>)
 80097ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80097b0:	f7fe fcf0 	bl	8008194 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	f003 0307 	and.w	r3, r3, #7
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00b      	beq.n	80097d6 <pvPortMalloc+0x17a>
	__asm volatile
 80097be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c2:	f383 8811 	msr	BASEPRI, r3
 80097c6:	f3bf 8f6f 	isb	sy
 80097ca:	f3bf 8f4f 	dsb	sy
 80097ce:	60fb      	str	r3, [r7, #12]
}
 80097d0:	bf00      	nop
 80097d2:	bf00      	nop
 80097d4:	e7fd      	b.n	80097d2 <pvPortMalloc+0x176>
	return pvReturn;
 80097d6:	69fb      	ldr	r3, [r7, #28]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3728      	adds	r7, #40	@ 0x28
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	200032e0 	.word	0x200032e0
 80097e4:	200032f4 	.word	0x200032f4
 80097e8:	200032e4 	.word	0x200032e4
 80097ec:	200032d8 	.word	0x200032d8
 80097f0:	200032e8 	.word	0x200032e8
 80097f4:	200032ec 	.word	0x200032ec

080097f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d04f      	beq.n	80098aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800980a:	2308      	movs	r3, #8
 800980c:	425b      	negs	r3, r3
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	4413      	add	r3, r2
 8009812:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	685a      	ldr	r2, [r3, #4]
 800981c:	4b25      	ldr	r3, [pc, #148]	@ (80098b4 <vPortFree+0xbc>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4013      	ands	r3, r2
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10b      	bne.n	800983e <vPortFree+0x46>
	__asm volatile
 8009826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800982a:	f383 8811 	msr	BASEPRI, r3
 800982e:	f3bf 8f6f 	isb	sy
 8009832:	f3bf 8f4f 	dsb	sy
 8009836:	60fb      	str	r3, [r7, #12]
}
 8009838:	bf00      	nop
 800983a:	bf00      	nop
 800983c:	e7fd      	b.n	800983a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00b      	beq.n	800985e <vPortFree+0x66>
	__asm volatile
 8009846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800984a:	f383 8811 	msr	BASEPRI, r3
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	60bb      	str	r3, [r7, #8]
}
 8009858:	bf00      	nop
 800985a:	bf00      	nop
 800985c:	e7fd      	b.n	800985a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	685a      	ldr	r2, [r3, #4]
 8009862:	4b14      	ldr	r3, [pc, #80]	@ (80098b4 <vPortFree+0xbc>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4013      	ands	r3, r2
 8009868:	2b00      	cmp	r3, #0
 800986a:	d01e      	beq.n	80098aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d11a      	bne.n	80098aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	4b0e      	ldr	r3, [pc, #56]	@ (80098b4 <vPortFree+0xbc>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	43db      	mvns	r3, r3
 800987e:	401a      	ands	r2, r3
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009884:	f7fe fc78 	bl	8008178 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	685a      	ldr	r2, [r3, #4]
 800988c:	4b0a      	ldr	r3, [pc, #40]	@ (80098b8 <vPortFree+0xc0>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4413      	add	r3, r2
 8009892:	4a09      	ldr	r2, [pc, #36]	@ (80098b8 <vPortFree+0xc0>)
 8009894:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009896:	6938      	ldr	r0, [r7, #16]
 8009898:	f000 f874 	bl	8009984 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800989c:	4b07      	ldr	r3, [pc, #28]	@ (80098bc <vPortFree+0xc4>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	3301      	adds	r3, #1
 80098a2:	4a06      	ldr	r2, [pc, #24]	@ (80098bc <vPortFree+0xc4>)
 80098a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80098a6:	f7fe fc75 	bl	8008194 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80098aa:	bf00      	nop
 80098ac:	3718      	adds	r7, #24
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	200032f4 	.word	0x200032f4
 80098b8:	200032e4 	.word	0x200032e4
 80098bc:	200032f0 	.word	0x200032f0

080098c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80098c6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80098ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80098cc:	4b27      	ldr	r3, [pc, #156]	@ (800996c <prvHeapInit+0xac>)
 80098ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f003 0307 	and.w	r3, r3, #7
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00c      	beq.n	80098f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	3307      	adds	r3, #7
 80098de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f023 0307 	bic.w	r3, r3, #7
 80098e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80098e8:	68ba      	ldr	r2, [r7, #8]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	1ad3      	subs	r3, r2, r3
 80098ee:	4a1f      	ldr	r2, [pc, #124]	@ (800996c <prvHeapInit+0xac>)
 80098f0:	4413      	add	r3, r2
 80098f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80098f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009970 <prvHeapInit+0xb0>)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80098fe:	4b1c      	ldr	r3, [pc, #112]	@ (8009970 <prvHeapInit+0xb0>)
 8009900:	2200      	movs	r2, #0
 8009902:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	4413      	add	r3, r2
 800990a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800990c:	2208      	movs	r2, #8
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	1a9b      	subs	r3, r3, r2
 8009912:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f023 0307 	bic.w	r3, r3, #7
 800991a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	4a15      	ldr	r2, [pc, #84]	@ (8009974 <prvHeapInit+0xb4>)
 8009920:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009922:	4b14      	ldr	r3, [pc, #80]	@ (8009974 <prvHeapInit+0xb4>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2200      	movs	r2, #0
 8009928:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800992a:	4b12      	ldr	r3, [pc, #72]	@ (8009974 <prvHeapInit+0xb4>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2200      	movs	r2, #0
 8009930:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	1ad2      	subs	r2, r2, r3
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009940:	4b0c      	ldr	r3, [pc, #48]	@ (8009974 <prvHeapInit+0xb4>)
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	4a0a      	ldr	r2, [pc, #40]	@ (8009978 <prvHeapInit+0xb8>)
 800994e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	4a09      	ldr	r2, [pc, #36]	@ (800997c <prvHeapInit+0xbc>)
 8009956:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009958:	4b09      	ldr	r3, [pc, #36]	@ (8009980 <prvHeapInit+0xc0>)
 800995a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800995e:	601a      	str	r2, [r3, #0]
}
 8009960:	bf00      	nop
 8009962:	3714      	adds	r7, #20
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr
 800996c:	20002720 	.word	0x20002720
 8009970:	200032d8 	.word	0x200032d8
 8009974:	200032e0 	.word	0x200032e0
 8009978:	200032e8 	.word	0x200032e8
 800997c:	200032e4 	.word	0x200032e4
 8009980:	200032f4 	.word	0x200032f4

08009984 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800998c:	4b28      	ldr	r3, [pc, #160]	@ (8009a30 <prvInsertBlockIntoFreeList+0xac>)
 800998e:	60fb      	str	r3, [r7, #12]
 8009990:	e002      	b.n	8009998 <prvInsertBlockIntoFreeList+0x14>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	60fb      	str	r3, [r7, #12]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d8f7      	bhi.n	8009992 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	4413      	add	r3, r2
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d108      	bne.n	80099c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	685a      	ldr	r2, [r3, #4]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	441a      	add	r2, r3
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	441a      	add	r2, r3
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d118      	bne.n	8009a0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	4b15      	ldr	r3, [pc, #84]	@ (8009a34 <prvInsertBlockIntoFreeList+0xb0>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d00d      	beq.n	8009a02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	685a      	ldr	r2, [r3, #4]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	441a      	add	r2, r3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	601a      	str	r2, [r3, #0]
 8009a00:	e008      	b.n	8009a14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a02:	4b0c      	ldr	r3, [pc, #48]	@ (8009a34 <prvInsertBlockIntoFreeList+0xb0>)
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	601a      	str	r2, [r3, #0]
 8009a0a:	e003      	b.n	8009a14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d002      	beq.n	8009a22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a22:	bf00      	nop
 8009a24:	3714      	adds	r7, #20
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	200032d8 	.word	0x200032d8
 8009a34:	200032e0 	.word	0x200032e0

08009a38 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8009a42:	683a      	ldr	r2, [r7, #0]
 8009a44:	2101      	movs	r1, #1
 8009a46:	482c      	ldr	r0, [pc, #176]	@ (8009af8 <network_configure_activations+0xc0>)
 8009a48:	f000 fb08 	bl	800a05c <ai_platform_get_activations_map>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d047      	beq.n	8009ae2 <network_configure_activations+0xaa>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 1396);
 8009a52:	4b29      	ldr	r3, [pc, #164]	@ (8009af8 <network_configure_activations+0xc0>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f203 5374 	addw	r3, r3, #1396	@ 0x574
 8009a5a:	4a28      	ldr	r2, [pc, #160]	@ (8009afc <network_configure_activations+0xc4>)
 8009a5c:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1396);
 8009a5e:	4b26      	ldr	r3, [pc, #152]	@ (8009af8 <network_configure_activations+0xc0>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f203 5374 	addw	r3, r3, #1396	@ 0x574
 8009a66:	4a25      	ldr	r2, [pc, #148]	@ (8009afc <network_configure_activations+0xc4>)
 8009a68:	60d3      	str	r3, [r2, #12]
    
    conv1d_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 32);
 8009a6a:	4b23      	ldr	r3, [pc, #140]	@ (8009af8 <network_configure_activations+0xc0>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3320      	adds	r3, #32
 8009a70:	4a23      	ldr	r2, [pc, #140]	@ (8009b00 <network_configure_activations+0xc8>)
 8009a72:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 32);
 8009a74:	4b20      	ldr	r3, [pc, #128]	@ (8009af8 <network_configure_activations+0xc0>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	3320      	adds	r3, #32
 8009a7a:	4a21      	ldr	r2, [pc, #132]	@ (8009b00 <network_configure_activations+0xc8>)
 8009a7c:	60d3      	str	r3, [r2, #12]
    
    conv1d_1_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8009a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8009af8 <network_configure_activations+0xc0>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a20      	ldr	r2, [pc, #128]	@ (8009b04 <network_configure_activations+0xcc>)
 8009a84:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8009a86:	4b1c      	ldr	r3, [pc, #112]	@ (8009af8 <network_configure_activations+0xc0>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8009b04 <network_configure_activations+0xcc>)
 8009a8c:	60d3      	str	r3, [r2, #12]
    
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 704);
 8009a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8009af8 <network_configure_activations+0xc0>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8009a96:	4a1c      	ldr	r2, [pc, #112]	@ (8009b08 <network_configure_activations+0xd0>)
 8009a98:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 704);
 8009a9a:	4b17      	ldr	r3, [pc, #92]	@ (8009af8 <network_configure_activations+0xc0>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8009aa2:	4a19      	ldr	r2, [pc, #100]	@ (8009b08 <network_configure_activations+0xd0>)
 8009aa4:	60d3      	str	r3, [r2, #12]
    
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8009aa6:	4b14      	ldr	r3, [pc, #80]	@ (8009af8 <network_configure_activations+0xc0>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a18      	ldr	r2, [pc, #96]	@ (8009b0c <network_configure_activations+0xd4>)
 8009aac:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8009aae:	4b12      	ldr	r3, [pc, #72]	@ (8009af8 <network_configure_activations+0xc0>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a16      	ldr	r2, [pc, #88]	@ (8009b0c <network_configure_activations+0xd4>)
 8009ab4:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 8009ab6:	4b10      	ldr	r3, [pc, #64]	@ (8009af8 <network_configure_activations+0xc0>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8009abe:	4a14      	ldr	r2, [pc, #80]	@ (8009b10 <network_configure_activations+0xd8>)
 8009ac0:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 8009ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8009af8 <network_configure_activations+0xc0>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8009aca:	4a11      	ldr	r2, [pc, #68]	@ (8009b10 <network_configure_activations+0xd8>)
 8009acc:	60d3      	str	r3, [r2, #12]
    
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8009ace:	4b0a      	ldr	r3, [pc, #40]	@ (8009af8 <network_configure_activations+0xc0>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a10      	ldr	r2, [pc, #64]	@ (8009b14 <network_configure_activations+0xdc>)
 8009ad4:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8009ad6:	4b08      	ldr	r3, [pc, #32]	@ (8009af8 <network_configure_activations+0xc0>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a0e      	ldr	r2, [pc, #56]	@ (8009b14 <network_configure_activations+0xdc>)
 8009adc:	60d3      	str	r3, [r2, #12]
    
    return true;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e005      	b.n	8009aee <network_configure_activations+0xb6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8009ae2:	2213      	movs	r2, #19
 8009ae4:	2130      	movs	r1, #48	@ 0x30
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fba8 	bl	800a23c <ai_platform_network_set_error>
  return false;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	200032f8 	.word	0x200032f8
 8009afc:	20000050 	.word	0x20000050
 8009b00:	20000060 	.word	0x20000060
 8009b04:	20000070 	.word	0x20000070
 8009b08:	20000080 	.word	0x20000080
 8009b0c:	20000090 	.word	0x20000090
 8009b10:	200000a0 	.word	0x200000a0
 8009b14:	200000b0 	.word	0x200000b0

08009b18 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	2101      	movs	r1, #1
 8009b26:	4852      	ldr	r0, [pc, #328]	@ (8009c70 <network_configure_weights+0x158>)
 8009b28:	f000 fa44 	bl	8009fb4 <ai_platform_get_weights_map>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f000 8094 	beq.w	8009c5c <network_configure_weights+0x144>
    /* Updating weights (byte) offsets */
    
    conv1d_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8009b34:	4b4f      	ldr	r3, [pc, #316]	@ (8009c74 <network_configure_weights+0x15c>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b3c:	4a4d      	ldr	r2, [pc, #308]	@ (8009c74 <network_configure_weights+0x15c>)
 8009b3e:	6013      	str	r3, [r2, #0]
    conv1d_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8009b40:	4b4b      	ldr	r3, [pc, #300]	@ (8009c70 <network_configure_weights+0x158>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a4b      	ldr	r2, [pc, #300]	@ (8009c74 <network_configure_weights+0x15c>)
 8009b46:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8009b48:	4b49      	ldr	r3, [pc, #292]	@ (8009c70 <network_configure_weights+0x158>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a49      	ldr	r2, [pc, #292]	@ (8009c74 <network_configure_weights+0x15c>)
 8009b4e:	60d3      	str	r3, [r2, #12]
    
    conv1d_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8009b50:	4b49      	ldr	r3, [pc, #292]	@ (8009c78 <network_configure_weights+0x160>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b58:	4a47      	ldr	r2, [pc, #284]	@ (8009c78 <network_configure_weights+0x160>)
 8009b5a:	6013      	str	r3, [r2, #0]
    conv1d_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 576);
 8009b5c:	4b44      	ldr	r3, [pc, #272]	@ (8009c70 <network_configure_weights+0x158>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8009b64:	4a44      	ldr	r2, [pc, #272]	@ (8009c78 <network_configure_weights+0x160>)
 8009b66:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 576);
 8009b68:	4b41      	ldr	r3, [pc, #260]	@ (8009c70 <network_configure_weights+0x158>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8009b70:	4a41      	ldr	r2, [pc, #260]	@ (8009c78 <network_configure_weights+0x160>)
 8009b72:	60d3      	str	r3, [r2, #12]
    
    conv1d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8009b74:	4b41      	ldr	r3, [pc, #260]	@ (8009c7c <network_configure_weights+0x164>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b7c:	4a3f      	ldr	r2, [pc, #252]	@ (8009c7c <network_configure_weights+0x164>)
 8009b7e:	6013      	str	r3, [r2, #0]
    conv1d_1_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 640);
 8009b80:	4b3b      	ldr	r3, [pc, #236]	@ (8009c70 <network_configure_weights+0x158>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8009b88:	4a3c      	ldr	r2, [pc, #240]	@ (8009c7c <network_configure_weights+0x164>)
 8009b8a:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 640);
 8009b8c:	4b38      	ldr	r3, [pc, #224]	@ (8009c70 <network_configure_weights+0x158>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8009b94:	4a39      	ldr	r2, [pc, #228]	@ (8009c7c <network_configure_weights+0x164>)
 8009b96:	60d3      	str	r3, [r2, #12]
    
    conv1d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8009b98:	4b39      	ldr	r3, [pc, #228]	@ (8009c80 <network_configure_weights+0x168>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ba0:	4a37      	ldr	r2, [pc, #220]	@ (8009c80 <network_configure_weights+0x168>)
 8009ba2:	6013      	str	r3, [r2, #0]
    conv1d_1_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 2176);
 8009ba4:	4b32      	ldr	r3, [pc, #200]	@ (8009c70 <network_configure_weights+0x158>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f503 6308 	add.w	r3, r3, #2176	@ 0x880
 8009bac:	4a34      	ldr	r2, [pc, #208]	@ (8009c80 <network_configure_weights+0x168>)
 8009bae:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2176);
 8009bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8009c70 <network_configure_weights+0x158>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f503 6308 	add.w	r3, r3, #2176	@ 0x880
 8009bb8:	4a31      	ldr	r2, [pc, #196]	@ (8009c80 <network_configure_weights+0x168>)
 8009bba:	60d3      	str	r3, [r2, #12]
    
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8009bbc:	4b31      	ldr	r3, [pc, #196]	@ (8009c84 <network_configure_weights+0x16c>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009bc4:	4a2f      	ldr	r2, [pc, #188]	@ (8009c84 <network_configure_weights+0x16c>)
 8009bc6:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 2208);
 8009bc8:	4b29      	ldr	r3, [pc, #164]	@ (8009c70 <network_configure_weights+0x158>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8009bd0:	4a2c      	ldr	r2, [pc, #176]	@ (8009c84 <network_configure_weights+0x16c>)
 8009bd2:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2208);
 8009bd4:	4b26      	ldr	r3, [pc, #152]	@ (8009c70 <network_configure_weights+0x158>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8009bdc:	4a29      	ldr	r2, [pc, #164]	@ (8009c84 <network_configure_weights+0x16c>)
 8009bde:	60d3      	str	r3, [r2, #12]
    
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8009be0:	4b29      	ldr	r3, [pc, #164]	@ (8009c88 <network_configure_weights+0x170>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009be8:	4a27      	ldr	r2, [pc, #156]	@ (8009c88 <network_configure_weights+0x170>)
 8009bea:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 47264);
 8009bec:	4b20      	ldr	r3, [pc, #128]	@ (8009c70 <network_configure_weights+0x158>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f503 4338 	add.w	r3, r3, #47104	@ 0xb800
 8009bf4:	33a0      	adds	r3, #160	@ 0xa0
 8009bf6:	4a24      	ldr	r2, [pc, #144]	@ (8009c88 <network_configure_weights+0x170>)
 8009bf8:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 47264);
 8009bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8009c70 <network_configure_weights+0x158>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f503 4338 	add.w	r3, r3, #47104	@ 0xb800
 8009c02:	33a0      	adds	r3, #160	@ 0xa0
 8009c04:	4a20      	ldr	r2, [pc, #128]	@ (8009c88 <network_configure_weights+0x170>)
 8009c06:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8009c08:	4b20      	ldr	r3, [pc, #128]	@ (8009c8c <network_configure_weights+0x174>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c10:	4a1e      	ldr	r2, [pc, #120]	@ (8009c8c <network_configure_weights+0x174>)
 8009c12:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 47520);
 8009c14:	4b16      	ldr	r3, [pc, #88]	@ (8009c70 <network_configure_weights+0x158>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f503 4339 	add.w	r3, r3, #47360	@ 0xb900
 8009c1c:	33a0      	adds	r3, #160	@ 0xa0
 8009c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8009c8c <network_configure_weights+0x174>)
 8009c20:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 47520);
 8009c22:	4b13      	ldr	r3, [pc, #76]	@ (8009c70 <network_configure_weights+0x158>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f503 4339 	add.w	r3, r3, #47360	@ 0xb900
 8009c2a:	33a0      	adds	r3, #160	@ 0xa0
 8009c2c:	4a17      	ldr	r2, [pc, #92]	@ (8009c8c <network_configure_weights+0x174>)
 8009c2e:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8009c30:	4b17      	ldr	r3, [pc, #92]	@ (8009c90 <network_configure_weights+0x178>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c38:	4a15      	ldr	r2, [pc, #84]	@ (8009c90 <network_configure_weights+0x178>)
 8009c3a:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 48288);
 8009c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8009c70 <network_configure_weights+0x158>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f503 433c 	add.w	r3, r3, #48128	@ 0xbc00
 8009c44:	33a0      	adds	r3, #160	@ 0xa0
 8009c46:	4a12      	ldr	r2, [pc, #72]	@ (8009c90 <network_configure_weights+0x178>)
 8009c48:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 48288);
 8009c4a:	4b09      	ldr	r3, [pc, #36]	@ (8009c70 <network_configure_weights+0x158>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f503 433c 	add.w	r3, r3, #48128	@ 0xbc00
 8009c52:	33a0      	adds	r3, #160	@ 0xa0
 8009c54:	4a0e      	ldr	r2, [pc, #56]	@ (8009c90 <network_configure_weights+0x178>)
 8009c56:	60d3      	str	r3, [r2, #12]
    
    return true;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e005      	b.n	8009c68 <network_configure_weights+0x150>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8009c5c:	2212      	movs	r2, #18
 8009c5e:	2130      	movs	r1, #48	@ 0x30
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 faeb 	bl	800a23c <ai_platform_network_set_error>
  return false;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3708      	adds	r7, #8
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	200032fc 	.word	0x200032fc
 8009c74:	200000c0 	.word	0x200000c0
 8009c78:	200000d0 	.word	0x200000d0
 8009c7c:	200000e0 	.word	0x200000e0
 8009c80:	200000f0 	.word	0x200000f0
 8009c84:	20000100 	.word	0x20000100
 8009c88:	20000110 	.word	0x20000110
 8009c8c:	20000120 	.word	0x20000120
 8009c90:	20000130 	.word	0x20000130

08009c94 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fa53 	bl	800a148 <ai_platform_network_get_error>
 8009ca2:	4603      	mov	r3, r0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3708      	adds	r7, #8
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af02      	add	r7, sp, #8
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	9301      	str	r3, [sp, #4]
 8009cba:	2305      	movs	r3, #5
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	4a04      	ldr	r2, [pc, #16]	@ (8009cd4 <ai_network_create+0x28>)
 8009cc2:	6839      	ldr	r1, [r7, #0]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 fc83 	bl	800a5d0 <ai_platform_network_create>
 8009cca:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	20000800 	.word	0x20000800

08009cd8 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b096      	sub	sp, #88	@ 0x58
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f7ff ffe0 	bl	8009cac <ai_network_create>
 8009cec:	4603      	mov	r3, r0
 8009cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (err.type != AI_ERROR_NONE)
 8009cf0:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d001      	beq.n	8009cfc <ai_network_create_and_init+0x24>
        return err;
 8009cf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cfa:	e05d      	b.n	8009db8 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8009cfc:	f107 0314 	add.w	r3, r7, #20
 8009d00:	4618      	mov	r0, r3
 8009d02:	f000 f8dd 	bl	8009ec0 <ai_network_data_params_get>
 8009d06:	4603      	mov	r3, r0
 8009d08:	f083 0301 	eor.w	r3, r3, #1
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d008      	beq.n	8009d24 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7ff ffbc 	bl	8009c94 <ai_network_get_error>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        return err;
 8009d20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d22:	e049      	b.n	8009db8 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d016      	beq.n	8009d58 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d2e:	e00e      	b.n	8009d4e <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8009d30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	68ba      	ldr	r2, [r7, #8]
 8009d38:	4413      	add	r3, r2
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	f107 0314 	add.w	r3, r7, #20
 8009d40:	330c      	adds	r3, #12
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 f922 	bl	8009f8c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8009d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d4e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009d50:	461a      	mov	r2, r3
 8009d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d54:	4293      	cmp	r3, r2
 8009d56:	dbeb      	blt.n	8009d30 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d016      	beq.n	8009d8c <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8009d5e:	2300      	movs	r3, #0
 8009d60:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d62:	e00e      	b.n	8009d82 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8009d64:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	f107 0314 	add.w	r3, r7, #20
 8009d74:	3304      	adds	r3, #4
 8009d76:	4618      	mov	r0, r3
 8009d78:	f000 f908 	bl	8009f8c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8009d7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d7e:	3301      	adds	r3, #1
 8009d80:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d82:	8b7b      	ldrh	r3, [r7, #26]
 8009d84:	461a      	mov	r2, r3
 8009d86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	dbeb      	blt.n	8009d64 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f107 0214 	add.w	r2, r7, #20
 8009d94:	4611      	mov	r1, r2
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 f846 	bl	8009e28 <ai_network_init>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	f083 0301 	eor.w	r3, r3, #1
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d006      	beq.n	8009db6 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7ff ff71 	bl	8009c94 <ai_network_get_error>
 8009db2:	4603      	mov	r3, r0
 8009db4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    return err;
 8009db6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3758      	adds	r7, #88	@ 0x58
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d104      	bne.n	8009dda <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8009dd0:	4b06      	ldr	r3, [pc, #24]	@ (8009dec <ai_network_inputs_get+0x2c>)
 8009dd2:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a06      	ldr	r2, [pc, #24]	@ (8009df0 <ai_network_inputs_get+0x30>)
 8009dd8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8009dda:	6839      	ldr	r1, [r7, #0]
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 fa33 	bl	800a248 <ai_platform_inputs_get>
 8009de2:	4603      	mov	r3, r0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	20000800 	.word	0x20000800
 8009df0:	a1c00100 	.word	0xa1c00100

08009df4 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d104      	bne.n	8009e0e <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8009e04:	4b06      	ldr	r3, [pc, #24]	@ (8009e20 <ai_network_outputs_get+0x2c>)
 8009e06:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a06      	ldr	r2, [pc, #24]	@ (8009e24 <ai_network_outputs_get+0x30>)
 8009e0c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fafd 	bl	800a410 <ai_platform_outputs_get>
 8009e16:	4603      	mov	r3, r0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	20000800 	.word	0x20000800
 8009e24:	a1c00100 	.word	0xa1c00100

08009e28 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8009e32:	6839      	ldr	r1, [r7, #0]
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 fcad 	bl	800a794 <ai_platform_network_init>
 8009e3a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d101      	bne.n	8009e46 <ai_network_init+0x1e>
 8009e42:	2300      	movs	r3, #0
 8009e44:	e028      	b.n	8009e98 <ai_network_init+0x70>

  ai_bool ok = true;
 8009e46:	2301      	movs	r3, #1
 8009e48:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f7ff fe63 	bl	8009b18 <network_configure_weights>
 8009e52:	4603      	mov	r3, r0
 8009e54:	461a      	mov	r2, r3
 8009e56:	7afb      	ldrb	r3, [r7, #11]
 8009e58:	4013      	ands	r3, r2
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	bf14      	ite	ne
 8009e5e:	2301      	movne	r3, #1
 8009e60:	2300      	moveq	r3, #0
 8009e62:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8009e64:	6839      	ldr	r1, [r7, #0]
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f7ff fde6 	bl	8009a38 <network_configure_activations>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	461a      	mov	r2, r3
 8009e70:	7afb      	ldrb	r3, [r7, #11]
 8009e72:	4013      	ands	r3, r2
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	bf14      	ite	ne
 8009e78:	2301      	movne	r3, #1
 8009e7a:	2300      	moveq	r3, #0
 8009e7c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 fd82 	bl	800a988 <ai_platform_network_post_init>
 8009e84:	4603      	mov	r3, r0
 8009e86:	461a      	mov	r2, r3
 8009e88:	7afb      	ldrb	r3, [r7, #11]
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	bf14      	ite	ne
 8009e90:	2301      	movne	r3, #1
 8009e92:	2300      	moveq	r3, #0
 8009e94:	72fb      	strb	r3, [r7, #11]

  return ok;
 8009e96:	7afb      	ldrb	r3, [r7, #11]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	68b9      	ldr	r1, [r7, #8]
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f000 fdfd 	bl	800aab0 <ai_platform_network_process>
 8009eb6:	4603      	mov	r3, r0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d101      	bne.n	8009ed2 <ai_network_data_params_get+0x12>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	e016      	b.n	8009f00 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8009ed2:	4a0d      	ldr	r2, [pc, #52]	@ (8009f08 <ai_network_data_params_get+0x48>)
 8009ed4:	f107 0310 	add.w	r3, r7, #16
 8009ed8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009edc:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8009ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8009f0c <ai_network_data_params_get+0x4c>)
 8009ee2:	f107 0308 	add.w	r3, r7, #8
 8009ee6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009eea:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8009eee:	f107 0210 	add.w	r2, r7, #16
 8009ef2:	f107 0308 	add.w	r3, r7, #8
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 f903 	bl	800a104 <ai_platform_bind_network_params>
 8009efe:	4603      	mov	r3, r0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3718      	adds	r7, #24
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	08011868 	.word	0x08011868
 8009f0c:	08011870 	.word	0x08011870

08009f10 <ai_buffer_get_size>:
 8009f10:	b378      	cbz	r0, 8009f72 <ai_buffer_get_size+0x62>
 8009f12:	b410      	push	{r4}
 8009f14:	6803      	ldr	r3, [r0, #0]
 8009f16:	4a17      	ldr	r2, [pc, #92]	@ (8009f74 <ai_buffer_get_size+0x64>)
 8009f18:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8009f1c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d01e      	beq.n	8009f62 <ai_buffer_get_size+0x52>
 8009f24:	6984      	ldr	r4, [r0, #24]
 8009f26:	6862      	ldr	r2, [r4, #4]
 8009f28:	7d03      	ldrb	r3, [r0, #20]
 8009f2a:	6941      	ldr	r1, [r0, #20]
 8009f2c:	f1a3 0301 	sub.w	r3, r3, #1
 8009f30:	fab3 f383 	clz	r3, r3
 8009f34:	095b      	lsrs	r3, r3, #5
 8009f36:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8009f3a:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8009f3e:	da0b      	bge.n	8009f58 <ai_buffer_get_size+0x48>
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d102      	bne.n	8009f4a <ai_buffer_get_size+0x3a>
 8009f44:	2802      	cmp	r0, #2
 8009f46:	d007      	beq.n	8009f58 <ai_buffer_get_size+0x48>
 8009f48:	2302      	movs	r3, #2
 8009f4a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	4298      	cmp	r0, r3
 8009f52:	fb01 f202 	mul.w	r2, r1, r2
 8009f56:	d1f3      	bne.n	8009f40 <ai_buffer_get_size+0x30>
 8009f58:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8009f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	2900      	cmp	r1, #0
 8009f64:	d0de      	beq.n	8009f24 <ai_buffer_get_size+0x14>
 8009f66:	6984      	ldr	r4, [r0, #24]
 8009f68:	6863      	ldr	r3, [r4, #4]
 8009f6a:	331f      	adds	r3, #31
 8009f6c:	f023 021f 	bic.w	r2, r3, #31
 8009f70:	e7da      	b.n	8009f28 <ai_buffer_get_size+0x18>
 8009f72:	4770      	bx	lr
 8009f74:	000400c0 	.word	0x000400c0

08009f78 <ai_buffer_array_sane>:
 8009f78:	b138      	cbz	r0, 8009f8a <ai_buffer_array_sane+0x12>
 8009f7a:	6843      	ldr	r3, [r0, #4]
 8009f7c:	b123      	cbz	r3, 8009f88 <ai_buffer_array_sane+0x10>
 8009f7e:	8840      	ldrh	r0, [r0, #2]
 8009f80:	3800      	subs	r0, #0
 8009f82:	bf18      	it	ne
 8009f84:	2001      	movne	r0, #1
 8009f86:	4770      	bx	lr
 8009f88:	4618      	mov	r0, r3
 8009f8a:	4770      	bx	lr

08009f8c <ai_buffer_array_item_set_address>:
 8009f8c:	b150      	cbz	r0, 8009fa4 <ai_buffer_array_item_set_address+0x18>
 8009f8e:	6843      	ldr	r3, [r0, #4]
 8009f90:	b14b      	cbz	r3, 8009fa6 <ai_buffer_array_item_set_address+0x1a>
 8009f92:	8840      	ldrh	r0, [r0, #2]
 8009f94:	b900      	cbnz	r0, 8009f98 <ai_buffer_array_item_set_address+0xc>
 8009f96:	4770      	bx	lr
 8009f98:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8009f9c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8009fa0:	2001      	movs	r0, #1
 8009fa2:	604a      	str	r2, [r1, #4]
 8009fa4:	4770      	bx	lr
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop

08009fac <_ai_platform_acquire_crc>:
 8009fac:	2001      	movs	r0, #1
 8009fae:	4770      	bx	lr

08009fb0 <_ai_platform_release_crc>:
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop

08009fb4 <ai_platform_get_weights_map>:
 8009fb4:	2a00      	cmp	r2, #0
 8009fb6:	d037      	beq.n	800a028 <ai_platform_get_weights_map+0x74>
 8009fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fba:	4604      	mov	r4, r0
 8009fbc:	b1a0      	cbz	r0, 8009fe8 <ai_platform_get_weights_map+0x34>
 8009fbe:	460f      	mov	r7, r1
 8009fc0:	b191      	cbz	r1, 8009fe8 <ai_platform_get_weights_map+0x34>
 8009fc2:	4b25      	ldr	r3, [pc, #148]	@ (800a058 <ai_platform_get_weights_map+0xa4>)
 8009fc4:	6810      	ldr	r0, [r2, #0]
 8009fc6:	4298      	cmp	r0, r3
 8009fc8:	4615      	mov	r5, r2
 8009fca:	d00f      	beq.n	8009fec <ai_platform_get_weights_map+0x38>
 8009fcc:	6855      	ldr	r5, [r2, #4]
 8009fce:	b15d      	cbz	r5, 8009fe8 <ai_platform_get_weights_map+0x34>
 8009fd0:	682e      	ldr	r6, [r5, #0]
 8009fd2:	429e      	cmp	r6, r3
 8009fd4:	d02a      	beq.n	800a02c <ai_platform_get_weights_map+0x78>
 8009fd6:	f1a1 0001 	sub.w	r0, r1, #1
 8009fda:	6025      	str	r5, [r4, #0]
 8009fdc:	fab0 f080 	clz	r0, r0
 8009fe0:	0940      	lsrs	r0, r0, #5
 8009fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fe4:	42a7      	cmp	r7, r4
 8009fe6:	d034      	beq.n	800a052 <ai_platform_get_weights_map+0x9e>
 8009fe8:	2000      	movs	r0, #0
 8009fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fec:	1d10      	adds	r0, r2, #4
 8009fee:	f7ff ffc3 	bl	8009f78 <ai_buffer_array_sane>
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	d0f8      	beq.n	8009fe8 <ai_platform_get_weights_map+0x34>
 8009ff6:	88eb      	ldrh	r3, [r5, #6]
 8009ff8:	429f      	cmp	r7, r3
 8009ffa:	d1f5      	bne.n	8009fe8 <ai_platform_get_weights_map+0x34>
 8009ffc:	f04f 0e00 	mov.w	lr, #0
 800a000:	1f23      	subs	r3, r4, #4
 800a002:	4670      	mov	r0, lr
 800a004:	68aa      	ldr	r2, [r5, #8]
 800a006:	eb02 0c0e 	add.w	ip, r2, lr
 800a00a:	f10e 0e1c 	add.w	lr, lr, #28
 800a00e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800a012:	b124      	cbz	r4, 800a01e <ai_platform_get_weights_map+0x6a>
 800a014:	3001      	adds	r0, #1
 800a016:	4287      	cmp	r7, r0
 800a018:	f843 4f04 	str.w	r4, [r3, #4]!
 800a01c:	d1f2      	bne.n	800a004 <ai_platform_get_weights_map+0x50>
 800a01e:	1a38      	subs	r0, r7, r0
 800a020:	fab0 f080 	clz	r0, r0
 800a024:	0940      	lsrs	r0, r0, #5
 800a026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a028:	2000      	movs	r0, #0
 800a02a:	4770      	bx	lr
 800a02c:	1f23      	subs	r3, r4, #4
 800a02e:	4628      	mov	r0, r5
 800a030:	2400      	movs	r4, #0
 800a032:	e000      	b.n	800a036 <ai_platform_get_weights_map+0x82>
 800a034:	4614      	mov	r4, r2
 800a036:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800a03a:	42b2      	cmp	r2, r6
 800a03c:	d0d2      	beq.n	8009fe4 <ai_platform_get_weights_map+0x30>
 800a03e:	f843 2f04 	str.w	r2, [r3, #4]!
 800a042:	1c62      	adds	r2, r4, #1
 800a044:	4297      	cmp	r7, r2
 800a046:	d1f5      	bne.n	800a034 <ai_platform_get_weights_map+0x80>
 800a048:	3402      	adds	r4, #2
 800a04a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800a04e:	42b3      	cmp	r3, r6
 800a050:	d1ca      	bne.n	8009fe8 <ai_platform_get_weights_map+0x34>
 800a052:	2001      	movs	r0, #1
 800a054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a056:	bf00      	nop
 800a058:	a1facade 	.word	0xa1facade

0800a05c <ai_platform_get_activations_map>:
 800a05c:	2a00      	cmp	r2, #0
 800a05e:	d038      	beq.n	800a0d2 <ai_platform_get_activations_map+0x76>
 800a060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a062:	4604      	mov	r4, r0
 800a064:	b1a0      	cbz	r0, 800a090 <ai_platform_get_activations_map+0x34>
 800a066:	460f      	mov	r7, r1
 800a068:	b191      	cbz	r1, 800a090 <ai_platform_get_activations_map+0x34>
 800a06a:	4b25      	ldr	r3, [pc, #148]	@ (800a100 <ai_platform_get_activations_map+0xa4>)
 800a06c:	6810      	ldr	r0, [r2, #0]
 800a06e:	4298      	cmp	r0, r3
 800a070:	4615      	mov	r5, r2
 800a072:	d00f      	beq.n	800a094 <ai_platform_get_activations_map+0x38>
 800a074:	6a15      	ldr	r5, [r2, #32]
 800a076:	b15d      	cbz	r5, 800a090 <ai_platform_get_activations_map+0x34>
 800a078:	682e      	ldr	r6, [r5, #0]
 800a07a:	429e      	cmp	r6, r3
 800a07c:	d02b      	beq.n	800a0d6 <ai_platform_get_activations_map+0x7a>
 800a07e:	f1a1 0001 	sub.w	r0, r1, #1
 800a082:	6025      	str	r5, [r4, #0]
 800a084:	fab0 f080 	clz	r0, r0
 800a088:	0940      	lsrs	r0, r0, #5
 800a08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a08c:	42a7      	cmp	r7, r4
 800a08e:	d035      	beq.n	800a0fc <ai_platform_get_activations_map+0xa0>
 800a090:	2000      	movs	r0, #0
 800a092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a094:	f102 000c 	add.w	r0, r2, #12
 800a098:	f7ff ff6e 	bl	8009f78 <ai_buffer_array_sane>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d0f7      	beq.n	800a090 <ai_platform_get_activations_map+0x34>
 800a0a0:	89eb      	ldrh	r3, [r5, #14]
 800a0a2:	429f      	cmp	r7, r3
 800a0a4:	d1f4      	bne.n	800a090 <ai_platform_get_activations_map+0x34>
 800a0a6:	f04f 0e00 	mov.w	lr, #0
 800a0aa:	1f23      	subs	r3, r4, #4
 800a0ac:	4670      	mov	r0, lr
 800a0ae:	692a      	ldr	r2, [r5, #16]
 800a0b0:	eb02 0c0e 	add.w	ip, r2, lr
 800a0b4:	f10e 0e1c 	add.w	lr, lr, #28
 800a0b8:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800a0bc:	b124      	cbz	r4, 800a0c8 <ai_platform_get_activations_map+0x6c>
 800a0be:	3001      	adds	r0, #1
 800a0c0:	4287      	cmp	r7, r0
 800a0c2:	f843 4f04 	str.w	r4, [r3, #4]!
 800a0c6:	d1f2      	bne.n	800a0ae <ai_platform_get_activations_map+0x52>
 800a0c8:	1a38      	subs	r0, r7, r0
 800a0ca:	fab0 f080 	clz	r0, r0
 800a0ce:	0940      	lsrs	r0, r0, #5
 800a0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	4770      	bx	lr
 800a0d6:	1f23      	subs	r3, r4, #4
 800a0d8:	4628      	mov	r0, r5
 800a0da:	2400      	movs	r4, #0
 800a0dc:	e000      	b.n	800a0e0 <ai_platform_get_activations_map+0x84>
 800a0de:	4614      	mov	r4, r2
 800a0e0:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800a0e4:	42b2      	cmp	r2, r6
 800a0e6:	d0d1      	beq.n	800a08c <ai_platform_get_activations_map+0x30>
 800a0e8:	f843 2f04 	str.w	r2, [r3, #4]!
 800a0ec:	1c62      	adds	r2, r4, #1
 800a0ee:	4297      	cmp	r7, r2
 800a0f0:	d1f5      	bne.n	800a0de <ai_platform_get_activations_map+0x82>
 800a0f2:	3402      	adds	r4, #2
 800a0f4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800a0f8:	42b3      	cmp	r3, r6
 800a0fa:	d1c9      	bne.n	800a090 <ai_platform_get_activations_map+0x34>
 800a0fc:	2001      	movs	r0, #1
 800a0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a100:	a1facade 	.word	0xa1facade

0800a104 <ai_platform_bind_network_params>:
 800a104:	b1a0      	cbz	r0, 800a130 <ai_platform_bind_network_params+0x2c>
 800a106:	b1b1      	cbz	r1, 800a136 <ai_platform_bind_network_params+0x32>
 800a108:	b1c2      	cbz	r2, 800a13c <ai_platform_bind_network_params+0x38>
 800a10a:	b410      	push	{r4}
 800a10c:	4603      	mov	r3, r0
 800a10e:	4c0d      	ldr	r4, [pc, #52]	@ (800a144 <ai_platform_bind_network_params+0x40>)
 800a110:	f843 4b04 	str.w	r4, [r3], #4
 800a114:	f100 0c0c 	add.w	ip, r0, #12
 800a118:	c903      	ldmia	r1, {r0, r1}
 800a11a:	e883 0003 	stmia.w	r3, {r0, r1}
 800a11e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a122:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a126:	2301      	movs	r3, #1
 800a128:	4618      	mov	r0, r3
 800a12a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	4603      	mov	r3, r0
 800a132:	4618      	mov	r0, r3
 800a134:	4770      	bx	lr
 800a136:	460b      	mov	r3, r1
 800a138:	4618      	mov	r0, r3
 800a13a:	4770      	bx	lr
 800a13c:	4613      	mov	r3, r2
 800a13e:	4618      	mov	r0, r3
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop
 800a144:	a1facade 	.word	0xa1facade

0800a148 <ai_platform_network_get_error>:
 800a148:	b510      	push	{r4, lr}
 800a14a:	b318      	cbz	r0, 800a194 <ai_platform_network_get_error+0x4c>
 800a14c:	4b34      	ldr	r3, [pc, #208]	@ (800a220 <ai_platform_network_get_error+0xd8>)
 800a14e:	6802      	ldr	r2, [r0, #0]
 800a150:	429a      	cmp	r2, r3
 800a152:	4604      	mov	r4, r0
 800a154:	d11e      	bne.n	800a194 <ai_platform_network_get_error+0x4c>
 800a156:	4a33      	ldr	r2, [pc, #204]	@ (800a224 <ai_platform_network_get_error+0xdc>)
 800a158:	6813      	ldr	r3, [r2, #0]
 800a15a:	f023 0301 	bic.w	r3, r3, #1
 800a15e:	6013      	str	r3, [r2, #0]
 800a160:	f7ff ff24 	bl	8009fac <_ai_platform_acquire_crc>
 800a164:	4b30      	ldr	r3, [pc, #192]	@ (800a228 <ai_platform_network_get_error+0xe0>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a16c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a170:	d041      	beq.n	800a1f6 <ai_platform_network_get_error+0xae>
 800a172:	4a2e      	ldr	r2, [pc, #184]	@ (800a22c <ai_platform_network_get_error+0xe4>)
 800a174:	2301      	movs	r3, #1
 800a176:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800a17a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1fb      	bne.n	800a17a <ai_platform_network_get_error+0x32>
 800a182:	4b2b      	ldr	r3, [pc, #172]	@ (800a230 <ai_platform_network_get_error+0xe8>)
 800a184:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800a188:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800a18c:	4b29      	ldr	r3, [pc, #164]	@ (800a234 <ai_platform_network_get_error+0xec>)
 800a18e:	429a      	cmp	r2, r3
 800a190:	d03d      	beq.n	800a20e <ai_platform_network_get_error+0xc6>
 800a192:	e7fe      	b.n	800a192 <ai_platform_network_get_error+0x4a>
 800a194:	4a23      	ldr	r2, [pc, #140]	@ (800a224 <ai_platform_network_get_error+0xdc>)
 800a196:	6813      	ldr	r3, [r2, #0]
 800a198:	f023 0301 	bic.w	r3, r3, #1
 800a19c:	6013      	str	r3, [r2, #0]
 800a19e:	f7ff ff05 	bl	8009fac <_ai_platform_acquire_crc>
 800a1a2:	4b21      	ldr	r3, [pc, #132]	@ (800a228 <ai_platform_network_get_error+0xe0>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a1aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1ae:	d010      	beq.n	800a1d2 <ai_platform_network_get_error+0x8a>
 800a1b0:	4a1e      	ldr	r2, [pc, #120]	@ (800a22c <ai_platform_network_get_error+0xe4>)
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800a1b8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1fb      	bne.n	800a1b8 <ai_platform_network_get_error+0x70>
 800a1c0:	4b1b      	ldr	r3, [pc, #108]	@ (800a230 <ai_platform_network_get_error+0xe8>)
 800a1c2:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800a1c6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800a1ca:	4b1a      	ldr	r3, [pc, #104]	@ (800a234 <ai_platform_network_get_error+0xec>)
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d00d      	beq.n	800a1ec <ai_platform_network_get_error+0xa4>
 800a1d0:	e7fe      	b.n	800a1d0 <ai_platform_network_get_error+0x88>
 800a1d2:	4a19      	ldr	r2, [pc, #100]	@ (800a238 <ai_platform_network_get_error+0xf0>)
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	6093      	str	r3, [r2, #8]
 800a1d8:	6893      	ldr	r3, [r2, #8]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d1fc      	bne.n	800a1d8 <ai_platform_network_get_error+0x90>
 800a1de:	4b14      	ldr	r3, [pc, #80]	@ (800a230 <ai_platform_network_get_error+0xe8>)
 800a1e0:	6013      	str	r3, [r2, #0]
 800a1e2:	6812      	ldr	r2, [r2, #0]
 800a1e4:	4b13      	ldr	r3, [pc, #76]	@ (800a234 <ai_platform_network_get_error+0xec>)
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d000      	beq.n	800a1ec <ai_platform_network_get_error+0xa4>
 800a1ea:	e7fe      	b.n	800a1ea <ai_platform_network_get_error+0xa2>
 800a1ec:	f7ff fee0 	bl	8009fb0 <_ai_platform_release_crc>
 800a1f0:	f241 0010 	movw	r0, #4112	@ 0x1010
 800a1f4:	bd10      	pop	{r4, pc}
 800a1f6:	4a10      	ldr	r2, [pc, #64]	@ (800a238 <ai_platform_network_get_error+0xf0>)
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	6093      	str	r3, [r2, #8]
 800a1fc:	6893      	ldr	r3, [r2, #8]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1fc      	bne.n	800a1fc <ai_platform_network_get_error+0xb4>
 800a202:	4b0b      	ldr	r3, [pc, #44]	@ (800a230 <ai_platform_network_get_error+0xe8>)
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	6812      	ldr	r2, [r2, #0]
 800a208:	4b0a      	ldr	r3, [pc, #40]	@ (800a234 <ai_platform_network_get_error+0xec>)
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d107      	bne.n	800a21e <ai_platform_network_get_error+0xd6>
 800a20e:	f7ff fecf 	bl	8009fb0 <_ai_platform_release_crc>
 800a212:	f104 0010 	add.w	r0, r4, #16
 800a216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a21a:	f000 bed7 	b.w	800afcc <core_get_error>
 800a21e:	e7fe      	b.n	800a21e <ai_platform_network_get_error+0xd6>
 800a220:	a1c00100 	.word	0xa1c00100
 800a224:	e0002000 	.word	0xe0002000
 800a228:	e0042000 	.word	0xe0042000
 800a22c:	58024000 	.word	0x58024000
 800a230:	f407a5c2 	.word	0xf407a5c2
 800a234:	b5e8b5cd 	.word	0xb5e8b5cd
 800a238:	40023000 	.word	0x40023000

0800a23c <ai_platform_network_set_error>:
 800a23c:	b110      	cbz	r0, 800a244 <ai_platform_network_set_error+0x8>
 800a23e:	3010      	adds	r0, #16
 800a240:	f000 beca 	b.w	800afd8 <core_set_error>
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop

0800a248 <ai_platform_inputs_get>:
 800a248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a24c:	b085      	sub	sp, #20
 800a24e:	9102      	str	r1, [sp, #8]
 800a250:	b318      	cbz	r0, 800a29a <ai_platform_inputs_get+0x52>
 800a252:	4b68      	ldr	r3, [pc, #416]	@ (800a3f4 <ai_platform_inputs_get+0x1ac>)
 800a254:	6802      	ldr	r2, [r0, #0]
 800a256:	429a      	cmp	r2, r3
 800a258:	4607      	mov	r7, r0
 800a25a:	d11e      	bne.n	800a29a <ai_platform_inputs_get+0x52>
 800a25c:	4a66      	ldr	r2, [pc, #408]	@ (800a3f8 <ai_platform_inputs_get+0x1b0>)
 800a25e:	6813      	ldr	r3, [r2, #0]
 800a260:	f023 0301 	bic.w	r3, r3, #1
 800a264:	6013      	str	r3, [r2, #0]
 800a266:	f7ff fea1 	bl	8009fac <_ai_platform_acquire_crc>
 800a26a:	4b64      	ldr	r3, [pc, #400]	@ (800a3fc <ai_platform_inputs_get+0x1b4>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a276:	d042      	beq.n	800a2fe <ai_platform_inputs_get+0xb6>
 800a278:	4a61      	ldr	r2, [pc, #388]	@ (800a400 <ai_platform_inputs_get+0x1b8>)
 800a27a:	2301      	movs	r3, #1
 800a27c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800a280:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800a284:	2b00      	cmp	r3, #0
 800a286:	d1fb      	bne.n	800a280 <ai_platform_inputs_get+0x38>
 800a288:	4b5e      	ldr	r3, [pc, #376]	@ (800a404 <ai_platform_inputs_get+0x1bc>)
 800a28a:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800a28e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800a292:	4b5d      	ldr	r3, [pc, #372]	@ (800a408 <ai_platform_inputs_get+0x1c0>)
 800a294:	429a      	cmp	r2, r3
 800a296:	d03e      	beq.n	800a316 <ai_platform_inputs_get+0xce>
 800a298:	e7fe      	b.n	800a298 <ai_platform_inputs_get+0x50>
 800a29a:	4a57      	ldr	r2, [pc, #348]	@ (800a3f8 <ai_platform_inputs_get+0x1b0>)
 800a29c:	6813      	ldr	r3, [r2, #0]
 800a29e:	f023 0301 	bic.w	r3, r3, #1
 800a2a2:	6013      	str	r3, [r2, #0]
 800a2a4:	f7ff fe82 	bl	8009fac <_ai_platform_acquire_crc>
 800a2a8:	4b54      	ldr	r3, [pc, #336]	@ (800a3fc <ai_platform_inputs_get+0x1b4>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a2b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2b4:	d010      	beq.n	800a2d8 <ai_platform_inputs_get+0x90>
 800a2b6:	4a52      	ldr	r2, [pc, #328]	@ (800a400 <ai_platform_inputs_get+0x1b8>)
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800a2be:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1fb      	bne.n	800a2be <ai_platform_inputs_get+0x76>
 800a2c6:	4b4f      	ldr	r3, [pc, #316]	@ (800a404 <ai_platform_inputs_get+0x1bc>)
 800a2c8:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800a2cc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800a2d0:	4b4d      	ldr	r3, [pc, #308]	@ (800a408 <ai_platform_inputs_get+0x1c0>)
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d00d      	beq.n	800a2f2 <ai_platform_inputs_get+0xaa>
 800a2d6:	e7fe      	b.n	800a2d6 <ai_platform_inputs_get+0x8e>
 800a2d8:	4a4c      	ldr	r2, [pc, #304]	@ (800a40c <ai_platform_inputs_get+0x1c4>)
 800a2da:	2301      	movs	r3, #1
 800a2dc:	6093      	str	r3, [r2, #8]
 800a2de:	6893      	ldr	r3, [r2, #8]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1fc      	bne.n	800a2de <ai_platform_inputs_get+0x96>
 800a2e4:	4b47      	ldr	r3, [pc, #284]	@ (800a404 <ai_platform_inputs_get+0x1bc>)
 800a2e6:	6013      	str	r3, [r2, #0]
 800a2e8:	6812      	ldr	r2, [r2, #0]
 800a2ea:	4b47      	ldr	r3, [pc, #284]	@ (800a408 <ai_platform_inputs_get+0x1c0>)
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d000      	beq.n	800a2f2 <ai_platform_inputs_get+0xaa>
 800a2f0:	e7fe      	b.n	800a2f0 <ai_platform_inputs_get+0xa8>
 800a2f2:	f7ff fe5d 	bl	8009fb0 <_ai_platform_release_crc>
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	b005      	add	sp, #20
 800a2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fe:	4a43      	ldr	r2, [pc, #268]	@ (800a40c <ai_platform_inputs_get+0x1c4>)
 800a300:	2301      	movs	r3, #1
 800a302:	6093      	str	r3, [r2, #8]
 800a304:	6893      	ldr	r3, [r2, #8]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1fc      	bne.n	800a304 <ai_platform_inputs_get+0xbc>
 800a30a:	4b3e      	ldr	r3, [pc, #248]	@ (800a404 <ai_platform_inputs_get+0x1bc>)
 800a30c:	6013      	str	r3, [r2, #0]
 800a30e:	6812      	ldr	r2, [r2, #0]
 800a310:	4b3d      	ldr	r3, [pc, #244]	@ (800a408 <ai_platform_inputs_get+0x1c0>)
 800a312:	429a      	cmp	r2, r3
 800a314:	d157      	bne.n	800a3c6 <ai_platform_inputs_get+0x17e>
 800a316:	f7ff fe4b 	bl	8009fb0 <_ai_platform_release_crc>
 800a31a:	9a02      	ldr	r2, [sp, #8]
 800a31c:	b10a      	cbz	r2, 800a322 <ai_platform_inputs_get+0xda>
 800a31e:	2300      	movs	r3, #0
 800a320:	8013      	strh	r3, [r2, #0]
 800a322:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a324:	2b00      	cmp	r3, #0
 800a326:	d04f      	beq.n	800a3c8 <ai_platform_inputs_get+0x180>
 800a328:	f8d7 a030 	ldr.w	sl, [r7, #48]	@ 0x30
 800a32c:	f1ba 0f00 	cmp.w	sl, #0
 800a330:	d04a      	beq.n	800a3c8 <ai_platform_inputs_get+0x180>
 800a332:	f04f 0b00 	mov.w	fp, #0
 800a336:	465d      	mov	r5, fp
 800a338:	9703      	str	r7, [sp, #12]
 800a33a:	e016      	b.n	800a36a <ai_platform_inputs_get+0x122>
 800a33c:	9901      	ldr	r1, [sp, #4]
 800a33e:	2301      	movs	r3, #1
 800a340:	507b      	str	r3, [r7, r1]
 800a342:	69b1      	ldr	r1, [r6, #24]
 800a344:	6849      	ldr	r1, [r1, #4]
 800a346:	6121      	str	r1, [r4, #16]
 800a348:	f04f 0301 	mov.w	r3, #1
 800a34c:	7523      	strb	r3, [r4, #20]
 800a34e:	e9c4 c200 	strd	ip, r2, [r4]
 800a352:	6962      	ldr	r2, [r4, #20]
 800a354:	60a0      	str	r0, [r4, #8]
 800a356:	2300      	movs	r3, #0
 800a358:	f369 221f 	bfi	r2, r9, #8, #24
 800a35c:	f8c4 8018 	str.w	r8, [r4, #24]
 800a360:	60e3      	str	r3, [r4, #12]
 800a362:	3501      	adds	r5, #1
 800a364:	f10b 0b1c 	add.w	fp, fp, #28
 800a368:	6162      	str	r2, [r4, #20]
 800a36a:	f8ba 3000 	ldrh.w	r3, [sl]
 800a36e:	42ab      	cmp	r3, r5
 800a370:	b2aa      	uxth	r2, r5
 800a372:	d931      	bls.n	800a3d8 <ai_platform_inputs_get+0x190>
 800a374:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a378:	00e9      	lsls	r1, r5, #3
 800a37a:	9101      	str	r1, [sp, #4]
 800a37c:	b363      	cbz	r3, 800a3d8 <ai_platform_inputs_get+0x190>
 800a37e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800a382:	b34e      	cbz	r6, 800a3d8 <ai_platform_inputs_get+0x190>
 800a384:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a388:	69b2      	ldr	r2, [r6, #24]
 800a38a:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800a38e:	6810      	ldr	r0, [r2, #0]
 800a390:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800a394:	68b3      	ldr	r3, [r6, #8]
 800a396:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800a39a:	f002 fb9b 	bl	800cad4 <ai_array_to_buffer_fmt>
 800a39e:	69b1      	ldr	r1, [r6, #24]
 800a3a0:	4684      	mov	ip, r0
 800a3a2:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800a3a6:	688a      	ldr	r2, [r1, #8]
 800a3a8:	445c      	add	r4, fp
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	d0ca      	beq.n	800a344 <ai_platform_inputs_get+0xfc>
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800a3b4:	6831      	ldr	r1, [r6, #0]
 800a3b6:	6041      	str	r1, [r0, #4]
 800a3b8:	b111      	cbz	r1, 800a3c0 <ai_platform_inputs_get+0x178>
 800a3ba:	8849      	ldrh	r1, [r1, #2]
 800a3bc:	2900      	cmp	r1, #0
 800a3be:	d1bd      	bne.n	800a33c <ai_platform_inputs_get+0xf4>
 800a3c0:	69b1      	ldr	r1, [r6, #24]
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	e7be      	b.n	800a344 <ai_platform_inputs_get+0xfc>
 800a3c6:	e7fe      	b.n	800a3c6 <ai_platform_inputs_get+0x17e>
 800a3c8:	2218      	movs	r2, #24
 800a3ca:	2111      	movs	r1, #17
 800a3cc:	f107 0010 	add.w	r0, r7, #16
 800a3d0:	f000 fe02 	bl	800afd8 <core_set_error>
 800a3d4:	2000      	movs	r0, #0
 800a3d6:	e78f      	b.n	800a2f8 <ai_platform_inputs_get+0xb0>
 800a3d8:	9f03      	ldr	r7, [sp, #12]
 800a3da:	2a00      	cmp	r2, #0
 800a3dc:	d0f4      	beq.n	800a3c8 <ai_platform_inputs_get+0x180>
 800a3de:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a3e2:	6858      	ldr	r0, [r3, #4]
 800a3e4:	9b02      	ldr	r3, [sp, #8]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d086      	beq.n	800a2f8 <ai_platform_inputs_get+0xb0>
 800a3ea:	801a      	strh	r2, [r3, #0]
 800a3ec:	b005      	add	sp, #20
 800a3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f2:	bf00      	nop
 800a3f4:	a1c00100 	.word	0xa1c00100
 800a3f8:	e0002000 	.word	0xe0002000
 800a3fc:	e0042000 	.word	0xe0042000
 800a400:	58024000 	.word	0x58024000
 800a404:	f407a5c2 	.word	0xf407a5c2
 800a408:	b5e8b5cd 	.word	0xb5e8b5cd
 800a40c:	40023000 	.word	0x40023000

0800a410 <ai_platform_outputs_get>:
 800a410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a414:	b085      	sub	sp, #20
 800a416:	9102      	str	r1, [sp, #8]
 800a418:	b318      	cbz	r0, 800a462 <ai_platform_outputs_get+0x52>
 800a41a:	4b66      	ldr	r3, [pc, #408]	@ (800a5b4 <ai_platform_outputs_get+0x1a4>)
 800a41c:	6802      	ldr	r2, [r0, #0]
 800a41e:	429a      	cmp	r2, r3
 800a420:	4607      	mov	r7, r0
 800a422:	d11e      	bne.n	800a462 <ai_platform_outputs_get+0x52>
 800a424:	4a64      	ldr	r2, [pc, #400]	@ (800a5b8 <ai_platform_outputs_get+0x1a8>)
 800a426:	6813      	ldr	r3, [r2, #0]
 800a428:	f023 0301 	bic.w	r3, r3, #1
 800a42c:	6013      	str	r3, [r2, #0]
 800a42e:	f7ff fdbd 	bl	8009fac <_ai_platform_acquire_crc>
 800a432:	4b62      	ldr	r3, [pc, #392]	@ (800a5bc <ai_platform_outputs_get+0x1ac>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a43a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a43e:	d042      	beq.n	800a4c6 <ai_platform_outputs_get+0xb6>
 800a440:	4a5f      	ldr	r2, [pc, #380]	@ (800a5c0 <ai_platform_outputs_get+0x1b0>)
 800a442:	2301      	movs	r3, #1
 800a444:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800a448:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1fb      	bne.n	800a448 <ai_platform_outputs_get+0x38>
 800a450:	4b5c      	ldr	r3, [pc, #368]	@ (800a5c4 <ai_platform_outputs_get+0x1b4>)
 800a452:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800a456:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800a45a:	4b5b      	ldr	r3, [pc, #364]	@ (800a5c8 <ai_platform_outputs_get+0x1b8>)
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d03e      	beq.n	800a4de <ai_platform_outputs_get+0xce>
 800a460:	e7fe      	b.n	800a460 <ai_platform_outputs_get+0x50>
 800a462:	4a55      	ldr	r2, [pc, #340]	@ (800a5b8 <ai_platform_outputs_get+0x1a8>)
 800a464:	6813      	ldr	r3, [r2, #0]
 800a466:	f023 0301 	bic.w	r3, r3, #1
 800a46a:	6013      	str	r3, [r2, #0]
 800a46c:	f7ff fd9e 	bl	8009fac <_ai_platform_acquire_crc>
 800a470:	4b52      	ldr	r3, [pc, #328]	@ (800a5bc <ai_platform_outputs_get+0x1ac>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a47c:	d010      	beq.n	800a4a0 <ai_platform_outputs_get+0x90>
 800a47e:	4a50      	ldr	r2, [pc, #320]	@ (800a5c0 <ai_platform_outputs_get+0x1b0>)
 800a480:	2301      	movs	r3, #1
 800a482:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800a486:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d1fb      	bne.n	800a486 <ai_platform_outputs_get+0x76>
 800a48e:	4b4d      	ldr	r3, [pc, #308]	@ (800a5c4 <ai_platform_outputs_get+0x1b4>)
 800a490:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800a494:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800a498:	4b4b      	ldr	r3, [pc, #300]	@ (800a5c8 <ai_platform_outputs_get+0x1b8>)
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d00d      	beq.n	800a4ba <ai_platform_outputs_get+0xaa>
 800a49e:	e7fe      	b.n	800a49e <ai_platform_outputs_get+0x8e>
 800a4a0:	4a4a      	ldr	r2, [pc, #296]	@ (800a5cc <ai_platform_outputs_get+0x1bc>)
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	6093      	str	r3, [r2, #8]
 800a4a6:	6893      	ldr	r3, [r2, #8]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1fc      	bne.n	800a4a6 <ai_platform_outputs_get+0x96>
 800a4ac:	4b45      	ldr	r3, [pc, #276]	@ (800a5c4 <ai_platform_outputs_get+0x1b4>)
 800a4ae:	6013      	str	r3, [r2, #0]
 800a4b0:	6812      	ldr	r2, [r2, #0]
 800a4b2:	4b45      	ldr	r3, [pc, #276]	@ (800a5c8 <ai_platform_outputs_get+0x1b8>)
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d000      	beq.n	800a4ba <ai_platform_outputs_get+0xaa>
 800a4b8:	e7fe      	b.n	800a4b8 <ai_platform_outputs_get+0xa8>
 800a4ba:	f7ff fd79 	bl	8009fb0 <_ai_platform_release_crc>
 800a4be:	2000      	movs	r0, #0
 800a4c0:	b005      	add	sp, #20
 800a4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c6:	4a41      	ldr	r2, [pc, #260]	@ (800a5cc <ai_platform_outputs_get+0x1bc>)
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	6093      	str	r3, [r2, #8]
 800a4cc:	6893      	ldr	r3, [r2, #8]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d1fc      	bne.n	800a4cc <ai_platform_outputs_get+0xbc>
 800a4d2:	4b3c      	ldr	r3, [pc, #240]	@ (800a5c4 <ai_platform_outputs_get+0x1b4>)
 800a4d4:	6013      	str	r3, [r2, #0]
 800a4d6:	6812      	ldr	r2, [r2, #0]
 800a4d8:	4b3b      	ldr	r3, [pc, #236]	@ (800a5c8 <ai_platform_outputs_get+0x1b8>)
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d154      	bne.n	800a588 <ai_platform_outputs_get+0x178>
 800a4de:	f7ff fd67 	bl	8009fb0 <_ai_platform_release_crc>
 800a4e2:	9a02      	ldr	r2, [sp, #8]
 800a4e4:	b10a      	cbz	r2, 800a4ea <ai_platform_outputs_get+0xda>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	8013      	strh	r3, [r2, #0]
 800a4ea:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d958      	bls.n	800a5a2 <ai_platform_outputs_get+0x192>
 800a4f0:	f04f 0b00 	mov.w	fp, #0
 800a4f4:	f8d7 a030 	ldr.w	sl, [r7, #48]	@ 0x30
 800a4f8:	9703      	str	r7, [sp, #12]
 800a4fa:	465d      	mov	r5, fp
 800a4fc:	e016      	b.n	800a52c <ai_platform_outputs_get+0x11c>
 800a4fe:	9901      	ldr	r1, [sp, #4]
 800a500:	2301      	movs	r3, #1
 800a502:	507b      	str	r3, [r7, r1]
 800a504:	69b1      	ldr	r1, [r6, #24]
 800a506:	6849      	ldr	r1, [r1, #4]
 800a508:	6121      	str	r1, [r4, #16]
 800a50a:	f04f 0301 	mov.w	r3, #1
 800a50e:	7523      	strb	r3, [r4, #20]
 800a510:	e9c4 c200 	strd	ip, r2, [r4]
 800a514:	6962      	ldr	r2, [r4, #20]
 800a516:	60a0      	str	r0, [r4, #8]
 800a518:	2300      	movs	r3, #0
 800a51a:	f369 221f 	bfi	r2, r9, #8, #24
 800a51e:	f8c4 8018 	str.w	r8, [r4, #24]
 800a522:	60e3      	str	r3, [r4, #12]
 800a524:	3501      	adds	r5, #1
 800a526:	f10b 0b1c 	add.w	fp, fp, #28
 800a52a:	6162      	str	r2, [r4, #20]
 800a52c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800a530:	42ab      	cmp	r3, r5
 800a532:	b2aa      	uxth	r2, r5
 800a534:	d929      	bls.n	800a58a <ai_platform_outputs_get+0x17a>
 800a536:	f8da 3010 	ldr.w	r3, [sl, #16]
 800a53a:	00e9      	lsls	r1, r5, #3
 800a53c:	9101      	str	r1, [sp, #4]
 800a53e:	b323      	cbz	r3, 800a58a <ai_platform_outputs_get+0x17a>
 800a540:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800a544:	b30e      	cbz	r6, 800a58a <ai_platform_outputs_get+0x17a>
 800a546:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a54a:	69b2      	ldr	r2, [r6, #24]
 800a54c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800a550:	6810      	ldr	r0, [r2, #0]
 800a552:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800a556:	68b3      	ldr	r3, [r6, #8]
 800a558:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800a55c:	f002 faba 	bl	800cad4 <ai_array_to_buffer_fmt>
 800a560:	69b1      	ldr	r1, [r6, #24]
 800a562:	4684      	mov	ip, r0
 800a564:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800a568:	688a      	ldr	r2, [r1, #8]
 800a56a:	445c      	add	r4, fp
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d0ca      	beq.n	800a506 <ai_platform_outputs_get+0xf6>
 800a570:	2100      	movs	r1, #0
 800a572:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800a576:	6831      	ldr	r1, [r6, #0]
 800a578:	6041      	str	r1, [r0, #4]
 800a57a:	b111      	cbz	r1, 800a582 <ai_platform_outputs_get+0x172>
 800a57c:	8849      	ldrh	r1, [r1, #2]
 800a57e:	2900      	cmp	r1, #0
 800a580:	d1bd      	bne.n	800a4fe <ai_platform_outputs_get+0xee>
 800a582:	69b1      	ldr	r1, [r6, #24]
 800a584:	2000      	movs	r0, #0
 800a586:	e7be      	b.n	800a506 <ai_platform_outputs_get+0xf6>
 800a588:	e7fe      	b.n	800a588 <ai_platform_outputs_get+0x178>
 800a58a:	9f03      	ldr	r7, [sp, #12]
 800a58c:	b14a      	cbz	r2, 800a5a2 <ai_platform_outputs_get+0x192>
 800a58e:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a592:	6858      	ldr	r0, [r3, #4]
 800a594:	9b02      	ldr	r3, [sp, #8]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d092      	beq.n	800a4c0 <ai_platform_outputs_get+0xb0>
 800a59a:	801a      	strh	r2, [r3, #0]
 800a59c:	b005      	add	sp, #20
 800a59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a2:	2218      	movs	r2, #24
 800a5a4:	2111      	movs	r1, #17
 800a5a6:	f107 0010 	add.w	r0, r7, #16
 800a5aa:	f000 fd15 	bl	800afd8 <core_set_error>
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	e786      	b.n	800a4c0 <ai_platform_outputs_get+0xb0>
 800a5b2:	bf00      	nop
 800a5b4:	a1c00100 	.word	0xa1c00100
 800a5b8:	e0002000 	.word	0xe0002000
 800a5bc:	e0042000 	.word	0xe0042000
 800a5c0:	58024000 	.word	0x58024000
 800a5c4:	f407a5c2 	.word	0xf407a5c2
 800a5c8:	b5e8b5cd 	.word	0xb5e8b5cd
 800a5cc:	40023000 	.word	0x40023000

0800a5d0 <ai_platform_network_create>:
 800a5d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5d4:	b083      	sub	sp, #12
 800a5d6:	4606      	mov	r6, r0
 800a5d8:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800a5dc:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800a5e0:	4615      	mov	r5, r2
 800a5e2:	461f      	mov	r7, r3
 800a5e4:	f7ff fce2 	bl	8009fac <_ai_platform_acquire_crc>
 800a5e8:	b188      	cbz	r0, 800a60e <ai_platform_network_create+0x3e>
 800a5ea:	4a62      	ldr	r2, [pc, #392]	@ (800a774 <ai_platform_network_create+0x1a4>)
 800a5ec:	6812      	ldr	r2, [r2, #0]
 800a5ee:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800a5f2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	d00e      	beq.n	800a618 <ai_platform_network_create+0x48>
 800a5fa:	4a5f      	ldr	r2, [pc, #380]	@ (800a778 <ai_platform_network_create+0x1a8>)
 800a5fc:	2118      	movs	r1, #24
 800a5fe:	f8c2 1c08 	str.w	r1, [r2, #3080]	@ 0xc08
 800a602:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	@ 0xc08
 800a606:	2918      	cmp	r1, #24
 800a608:	d018      	beq.n	800a63c <ai_platform_network_create+0x6c>
 800a60a:	f7ff fcd1 	bl	8009fb0 <_ai_platform_release_crc>
 800a60e:	f244 1033 	movw	r0, #16691	@ 0x4133
 800a612:	b003      	add	sp, #12
 800a614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a618:	4a58      	ldr	r2, [pc, #352]	@ (800a77c <ai_platform_network_create+0x1ac>)
 800a61a:	2101      	movs	r1, #1
 800a61c:	6091      	str	r1, [r2, #8]
 800a61e:	2114      	movs	r1, #20
 800a620:	e001      	b.n	800a626 <ai_platform_network_create+0x56>
 800a622:	3901      	subs	r1, #1
 800a624:	d002      	beq.n	800a62c <ai_platform_network_create+0x5c>
 800a626:	6894      	ldr	r4, [r2, #8]
 800a628:	2c00      	cmp	r4, #0
 800a62a:	d1fa      	bne.n	800a622 <ai_platform_network_create+0x52>
 800a62c:	4a53      	ldr	r2, [pc, #332]	@ (800a77c <ai_platform_network_create+0x1ac>)
 800a62e:	6891      	ldr	r1, [r2, #8]
 800a630:	b911      	cbnz	r1, 800a638 <ai_platform_network_create+0x68>
 800a632:	6812      	ldr	r2, [r2, #0]
 800a634:	3201      	adds	r2, #1
 800a636:	d008      	beq.n	800a64a <ai_platform_network_create+0x7a>
 800a638:	4618      	mov	r0, r3
 800a63a:	e7e6      	b.n	800a60a <ai_platform_network_create+0x3a>
 800a63c:	2101      	movs	r1, #1
 800a63e:	f8c2 1c08 	str.w	r1, [r2, #3080]	@ 0xc08
 800a642:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	@ 0xc08
 800a646:	2900      	cmp	r1, #0
 800a648:	d1fb      	bne.n	800a642 <ai_platform_network_create+0x72>
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7ff fcb0 	bl	8009fb0 <_ai_platform_release_crc>
 800a650:	4a4b      	ldr	r2, [pc, #300]	@ (800a780 <ai_platform_network_create+0x1b0>)
 800a652:	6813      	ldr	r3, [r2, #0]
 800a654:	f023 0301 	bic.w	r3, r3, #1
 800a658:	6013      	str	r3, [r2, #0]
 800a65a:	f7ff fca7 	bl	8009fac <_ai_platform_acquire_crc>
 800a65e:	4b45      	ldr	r3, [pc, #276]	@ (800a774 <ai_platform_network_create+0x1a4>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a666:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a66a:	d010      	beq.n	800a68e <ai_platform_network_create+0xbe>
 800a66c:	4b42      	ldr	r3, [pc, #264]	@ (800a778 <ai_platform_network_create+0x1a8>)
 800a66e:	2201      	movs	r2, #1
 800a670:	f8c3 2c08 	str.w	r2, [r3, #3080]	@ 0xc08
 800a674:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	@ 0xc08
 800a678:	2900      	cmp	r1, #0
 800a67a:	d1fb      	bne.n	800a674 <ai_platform_network_create+0xa4>
 800a67c:	4a41      	ldr	r2, [pc, #260]	@ (800a784 <ai_platform_network_create+0x1b4>)
 800a67e:	f8c3 2c00 	str.w	r2, [r3, #3072]	@ 0xc00
 800a682:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	@ 0xc00
 800a686:	4b40      	ldr	r3, [pc, #256]	@ (800a788 <ai_platform_network_create+0x1b8>)
 800a688:	429a      	cmp	r2, r3
 800a68a:	d00c      	beq.n	800a6a6 <ai_platform_network_create+0xd6>
 800a68c:	e7fe      	b.n	800a68c <ai_platform_network_create+0xbc>
 800a68e:	4a3b      	ldr	r2, [pc, #236]	@ (800a77c <ai_platform_network_create+0x1ac>)
 800a690:	2301      	movs	r3, #1
 800a692:	6093      	str	r3, [r2, #8]
 800a694:	6893      	ldr	r3, [r2, #8]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1fc      	bne.n	800a694 <ai_platform_network_create+0xc4>
 800a69a:	4b3a      	ldr	r3, [pc, #232]	@ (800a784 <ai_platform_network_create+0x1b4>)
 800a69c:	6013      	str	r3, [r2, #0]
 800a69e:	6812      	ldr	r2, [r2, #0]
 800a6a0:	4b39      	ldr	r3, [pc, #228]	@ (800a788 <ai_platform_network_create+0x1b8>)
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d128      	bne.n	800a6f8 <ai_platform_network_create+0x128>
 800a6a6:	f7ff fc83 	bl	8009fb0 <_ai_platform_release_crc>
 800a6aa:	2e00      	cmp	r6, #0
 800a6ac:	d036      	beq.n	800a71c <ai_platform_network_create+0x14c>
 800a6ae:	4b37      	ldr	r3, [pc, #220]	@ (800a78c <ai_platform_network_create+0x1bc>)
 800a6b0:	602b      	str	r3, [r5, #0]
 800a6b2:	6035      	str	r5, [r6, #0]
 800a6b4:	f000 fc88 	bl	800afc8 <core_init>
 800a6b8:	b1f8      	cbz	r0, 800a6fa <ai_platform_network_create+0x12a>
 800a6ba:	4a31      	ldr	r2, [pc, #196]	@ (800a780 <ai_platform_network_create+0x1b0>)
 800a6bc:	6813      	ldr	r3, [r2, #0]
 800a6be:	f023 0301 	bic.w	r3, r3, #1
 800a6c2:	6013      	str	r3, [r2, #0]
 800a6c4:	f7ff fc72 	bl	8009fac <_ai_platform_acquire_crc>
 800a6c8:	4b2a      	ldr	r3, [pc, #168]	@ (800a774 <ai_platform_network_create+0x1a4>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a6d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6d4:	d025      	beq.n	800a722 <ai_platform_network_create+0x152>
 800a6d6:	4a28      	ldr	r2, [pc, #160]	@ (800a778 <ai_platform_network_create+0x1a8>)
 800a6d8:	2301      	movs	r3, #1
 800a6da:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800a6de:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1fb      	bne.n	800a6de <ai_platform_network_create+0x10e>
 800a6e6:	4b27      	ldr	r3, [pc, #156]	@ (800a784 <ai_platform_network_create+0x1b4>)
 800a6e8:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800a6ec:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800a6f0:	4b25      	ldr	r3, [pc, #148]	@ (800a788 <ai_platform_network_create+0x1b8>)
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d022      	beq.n	800a73c <ai_platform_network_create+0x16c>
 800a6f6:	e7fe      	b.n	800a6f6 <ai_platform_network_create+0x126>
 800a6f8:	e7fe      	b.n	800a6f8 <ai_platform_network_create+0x128>
 800a6fa:	2430      	movs	r4, #48	@ 0x30
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	6033      	str	r3, [r6, #0]
 800a700:	2610      	movs	r6, #16
 800a702:	464a      	mov	r2, r9
 800a704:	4641      	mov	r1, r8
 800a706:	4638      	mov	r0, r7
 800a708:	f002 f9c6 	bl	800ca98 <ai_version_get>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2000      	movs	r0, #0
 800a710:	f364 0007 	bfi	r0, r4, #0, #8
 800a714:	64ab      	str	r3, [r5, #72]	@ 0x48
 800a716:	f366 201f 	bfi	r0, r6, #8, #24
 800a71a:	e77a      	b.n	800a612 <ai_platform_network_create+0x42>
 800a71c:	f241 0010 	movw	r0, #4112	@ 0x1010
 800a720:	e777      	b.n	800a612 <ai_platform_network_create+0x42>
 800a722:	4a16      	ldr	r2, [pc, #88]	@ (800a77c <ai_platform_network_create+0x1ac>)
 800a724:	2301      	movs	r3, #1
 800a726:	6093      	str	r3, [r2, #8]
 800a728:	6893      	ldr	r3, [r2, #8]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d1fc      	bne.n	800a728 <ai_platform_network_create+0x158>
 800a72e:	4b15      	ldr	r3, [pc, #84]	@ (800a784 <ai_platform_network_create+0x1b4>)
 800a730:	6013      	str	r3, [r2, #0]
 800a732:	6812      	ldr	r2, [r2, #0]
 800a734:	4b14      	ldr	r3, [pc, #80]	@ (800a788 <ai_platform_network_create+0x1b8>)
 800a736:	429a      	cmp	r2, r3
 800a738:	d000      	beq.n	800a73c <ai_platform_network_create+0x16c>
 800a73a:	e7fe      	b.n	800a73a <ai_platform_network_create+0x16a>
 800a73c:	f7ff fc38 	bl	8009fb0 <_ai_platform_release_crc>
 800a740:	2200      	movs	r2, #0
 800a742:	4641      	mov	r1, r8
 800a744:	4638      	mov	r0, r7
 800a746:	f002 f9a7 	bl	800ca98 <ai_version_get>
 800a74a:	2200      	movs	r2, #0
 800a74c:	4604      	mov	r4, r0
 800a74e:	2105      	movs	r1, #5
 800a750:	2001      	movs	r0, #1
 800a752:	f002 f9a1 	bl	800ca98 <ai_version_get>
 800a756:	4284      	cmp	r4, r0
 800a758:	d001      	beq.n	800a75e <ai_platform_network_create+0x18e>
 800a75a:	2401      	movs	r4, #1
 800a75c:	e7ce      	b.n	800a6fc <ai_platform_network_create+0x12c>
 800a75e:	4b0c      	ldr	r3, [pc, #48]	@ (800a790 <ai_platform_network_create+0x1c0>)
 800a760:	9301      	str	r3, [sp, #4]
 800a762:	a801      	add	r0, sp, #4
 800a764:	f002 f900 	bl	800c968 <ai_check_custom_types>
 800a768:	b110      	cbz	r0, 800a770 <ai_platform_network_create+0x1a0>
 800a76a:	2600      	movs	r6, #0
 800a76c:	4634      	mov	r4, r6
 800a76e:	e7c8      	b.n	800a702 <ai_platform_network_create+0x132>
 800a770:	2402      	movs	r4, #2
 800a772:	e7c3      	b.n	800a6fc <ai_platform_network_create+0x12c>
 800a774:	e0042000 	.word	0xe0042000
 800a778:	58024000 	.word	0x58024000
 800a77c:	40023000 	.word	0x40023000
 800a780:	e0002000 	.word	0xe0002000
 800a784:	f407a5c2 	.word	0xf407a5c2
 800a788:	b5e8b5cd 	.word	0xb5e8b5cd
 800a78c:	a1c00100 	.word	0xa1c00100
 800a790:	84048403 	.word	0x84048403

0800a794 <ai_platform_network_init>:
 800a794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a798:	b320      	cbz	r0, 800a7e4 <ai_platform_network_init+0x50>
 800a79a:	4b73      	ldr	r3, [pc, #460]	@ (800a968 <ai_platform_network_init+0x1d4>)
 800a79c:	6802      	ldr	r2, [r0, #0]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	4604      	mov	r4, r0
 800a7a2:	d11f      	bne.n	800a7e4 <ai_platform_network_init+0x50>
 800a7a4:	4a71      	ldr	r2, [pc, #452]	@ (800a96c <ai_platform_network_init+0x1d8>)
 800a7a6:	6813      	ldr	r3, [r2, #0]
 800a7a8:	f023 0301 	bic.w	r3, r3, #1
 800a7ac:	6013      	str	r3, [r2, #0]
 800a7ae:	460e      	mov	r6, r1
 800a7b0:	f7ff fbfc 	bl	8009fac <_ai_platform_acquire_crc>
 800a7b4:	4b6e      	ldr	r3, [pc, #440]	@ (800a970 <ai_platform_network_init+0x1dc>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a7bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7c0:	d042      	beq.n	800a848 <ai_platform_network_init+0xb4>
 800a7c2:	4a6c      	ldr	r2, [pc, #432]	@ (800a974 <ai_platform_network_init+0x1e0>)
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800a7ca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1fb      	bne.n	800a7ca <ai_platform_network_init+0x36>
 800a7d2:	4b69      	ldr	r3, [pc, #420]	@ (800a978 <ai_platform_network_init+0x1e4>)
 800a7d4:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800a7d8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800a7dc:	4b67      	ldr	r3, [pc, #412]	@ (800a97c <ai_platform_network_init+0x1e8>)
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d03e      	beq.n	800a860 <ai_platform_network_init+0xcc>
 800a7e2:	e7fe      	b.n	800a7e2 <ai_platform_network_init+0x4e>
 800a7e4:	4a61      	ldr	r2, [pc, #388]	@ (800a96c <ai_platform_network_init+0x1d8>)
 800a7e6:	6813      	ldr	r3, [r2, #0]
 800a7e8:	f023 0301 	bic.w	r3, r3, #1
 800a7ec:	6013      	str	r3, [r2, #0]
 800a7ee:	f7ff fbdd 	bl	8009fac <_ai_platform_acquire_crc>
 800a7f2:	4b5f      	ldr	r3, [pc, #380]	@ (800a970 <ai_platform_network_init+0x1dc>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a7fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7fe:	d010      	beq.n	800a822 <ai_platform_network_init+0x8e>
 800a800:	4a5c      	ldr	r2, [pc, #368]	@ (800a974 <ai_platform_network_init+0x1e0>)
 800a802:	2301      	movs	r3, #1
 800a804:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800a808:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d1fb      	bne.n	800a808 <ai_platform_network_init+0x74>
 800a810:	4b59      	ldr	r3, [pc, #356]	@ (800a978 <ai_platform_network_init+0x1e4>)
 800a812:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800a816:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800a81a:	4b58      	ldr	r3, [pc, #352]	@ (800a97c <ai_platform_network_init+0x1e8>)
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d00d      	beq.n	800a83c <ai_platform_network_init+0xa8>
 800a820:	e7fe      	b.n	800a820 <ai_platform_network_init+0x8c>
 800a822:	4a57      	ldr	r2, [pc, #348]	@ (800a980 <ai_platform_network_init+0x1ec>)
 800a824:	2301      	movs	r3, #1
 800a826:	6093      	str	r3, [r2, #8]
 800a828:	6893      	ldr	r3, [r2, #8]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1fc      	bne.n	800a828 <ai_platform_network_init+0x94>
 800a82e:	4b52      	ldr	r3, [pc, #328]	@ (800a978 <ai_platform_network_init+0x1e4>)
 800a830:	6013      	str	r3, [r2, #0]
 800a832:	6812      	ldr	r2, [r2, #0]
 800a834:	4b51      	ldr	r3, [pc, #324]	@ (800a97c <ai_platform_network_init+0x1e8>)
 800a836:	429a      	cmp	r2, r3
 800a838:	d000      	beq.n	800a83c <ai_platform_network_init+0xa8>
 800a83a:	e7fe      	b.n	800a83a <ai_platform_network_init+0xa6>
 800a83c:	f7ff fbb8 	bl	8009fb0 <_ai_platform_release_crc>
 800a840:	2600      	movs	r6, #0
 800a842:	4630      	mov	r0, r6
 800a844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a848:	4a4d      	ldr	r2, [pc, #308]	@ (800a980 <ai_platform_network_init+0x1ec>)
 800a84a:	2301      	movs	r3, #1
 800a84c:	6093      	str	r3, [r2, #8]
 800a84e:	6893      	ldr	r3, [r2, #8]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d1fc      	bne.n	800a84e <ai_platform_network_init+0xba>
 800a854:	4b48      	ldr	r3, [pc, #288]	@ (800a978 <ai_platform_network_init+0x1e4>)
 800a856:	6013      	str	r3, [r2, #0]
 800a858:	6812      	ldr	r2, [r2, #0]
 800a85a:	4b48      	ldr	r3, [pc, #288]	@ (800a97c <ai_platform_network_init+0x1e8>)
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d11c      	bne.n	800a89a <ai_platform_network_init+0x106>
 800a860:	f7ff fba6 	bl	8009fb0 <_ai_platform_release_crc>
 800a864:	2e00      	cmp	r6, #0
 800a866:	d06f      	beq.n	800a948 <ai_platform_network_init+0x1b4>
 800a868:	4b46      	ldr	r3, [pc, #280]	@ (800a984 <ai_platform_network_init+0x1f0>)
 800a86a:	6832      	ldr	r2, [r6, #0]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d115      	bne.n	800a89c <ai_platform_network_init+0x108>
 800a870:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800a874:	6933      	ldr	r3, [r6, #16]
 800a876:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 800a87a:	89f7      	ldrh	r7, [r6, #14]
 800a87c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a87e:	e9c4 2107 	strd	r2, r1, [r4, #28]
 800a882:	2303      	movs	r3, #3
 800a884:	84e7      	strh	r7, [r4, #38]	@ 0x26
 800a886:	f8a4 e024 	strh.w	lr, [r4, #36]	@ 0x24
 800a88a:	60e3      	str	r3, [r4, #12]
 800a88c:	4620      	mov	r0, r4
 800a88e:	4626      	mov	r6, r4
 800a890:	f002 f894 	bl	800c9bc <ai_layers_init_all>
 800a894:	4630      	mov	r0, r6
 800a896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a89a:	e7fe      	b.n	800a89a <ai_platform_network_init+0x106>
 800a89c:	2101      	movs	r1, #1
 800a89e:	4630      	mov	r0, r6
 800a8a0:	4635      	mov	r5, r6
 800a8a2:	6876      	ldr	r6, [r6, #4]
 800a8a4:	f7ff fb34 	bl	8009f10 <ai_buffer_get_size>
 800a8a8:	f105 081c 	add.w	r8, r5, #28
 800a8ac:	4681      	mov	r9, r0
 800a8ae:	2101      	movs	r1, #1
 800a8b0:	4640      	mov	r0, r8
 800a8b2:	6a2f      	ldr	r7, [r5, #32]
 800a8b4:	f7ff fb2c 	bl	8009f10 <ai_buffer_get_size>
 800a8b8:	f1b9 0f00 	cmp.w	r9, #0
 800a8bc:	d025      	beq.n	800a90a <ai_platform_network_init+0x176>
 800a8be:	2201      	movs	r2, #1
 800a8c0:	4696      	mov	lr, r2
 800a8c2:	bb30      	cbnz	r0, 800a912 <ai_platform_network_init+0x17e>
 800a8c4:	4680      	mov	r8, r0
 800a8c6:	4607      	mov	r7, r0
 800a8c8:	b376      	cbz	r6, 800a928 <ai_platform_network_init+0x194>
 800a8ca:	8be3      	ldrh	r3, [r4, #30]
 800a8cc:	4573      	cmp	r3, lr
 800a8ce:	d323      	bcc.n	800a918 <ai_platform_network_init+0x184>
 800a8d0:	b142      	cbz	r2, 800a8e4 <ai_platform_network_init+0x150>
 800a8d2:	46ac      	mov	ip, r5
 800a8d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a8d8:	6a25      	ldr	r5, [r4, #32]
 800a8da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a8dc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800a8e0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a8e4:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800a8e6:	f8a4 e01e 	strh.w	lr, [r4, #30]
 800a8ea:	2600      	movs	r6, #0
 800a8ec:	42bb      	cmp	r3, r7
 800a8ee:	83a6      	strh	r6, [r4, #28]
 800a8f0:	d323      	bcc.n	800a93a <ai_platform_network_init+0x1a6>
 800a8f2:	b37f      	cbz	r7, 800a954 <ai_platform_network_init+0x1c0>
 800a8f4:	46c4      	mov	ip, r8
 800a8f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a8fa:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 800a8fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a8fe:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800a902:	46b6      	mov	lr, r6
 800a904:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a908:	e7bb      	b.n	800a882 <ai_platform_network_init+0xee>
 800a90a:	464a      	mov	r2, r9
 800a90c:	46ce      	mov	lr, r9
 800a90e:	464d      	mov	r5, r9
 800a910:	e7d7      	b.n	800a8c2 <ai_platform_network_init+0x12e>
 800a912:	b30f      	cbz	r7, 800a958 <ai_platform_network_init+0x1c4>
 800a914:	2701      	movs	r7, #1
 800a916:	e7d7      	b.n	800a8c8 <ai_platform_network_init+0x134>
 800a918:	2212      	movs	r2, #18
 800a91a:	2116      	movs	r1, #22
 800a91c:	f104 0010 	add.w	r0, r4, #16
 800a920:	f000 fb5a 	bl	800afd8 <core_set_error>
 800a924:	2600      	movs	r6, #0
 800a926:	e78c      	b.n	800a842 <ai_platform_network_init+0xae>
 800a928:	f1b9 0f00 	cmp.w	r9, #0
 800a92c:	d0cd      	beq.n	800a8ca <ai_platform_network_init+0x136>
 800a92e:	2110      	movs	r1, #16
 800a930:	2212      	movs	r2, #18
 800a932:	1860      	adds	r0, r4, r1
 800a934:	f000 fb50 	bl	800afd8 <core_set_error>
 800a938:	e783      	b.n	800a842 <ai_platform_network_init+0xae>
 800a93a:	2213      	movs	r2, #19
 800a93c:	2116      	movs	r1, #22
 800a93e:	f104 0010 	add.w	r0, r4, #16
 800a942:	f000 fb49 	bl	800afd8 <core_set_error>
 800a946:	e77c      	b.n	800a842 <ai_platform_network_init+0xae>
 800a948:	2110      	movs	r1, #16
 800a94a:	2211      	movs	r2, #17
 800a94c:	1860      	adds	r0, r4, r1
 800a94e:	f000 fb43 	bl	800afd8 <core_set_error>
 800a952:	e776      	b.n	800a842 <ai_platform_network_init+0xae>
 800a954:	46be      	mov	lr, r7
 800a956:	e794      	b.n	800a882 <ai_platform_network_init+0xee>
 800a958:	2110      	movs	r1, #16
 800a95a:	2213      	movs	r2, #19
 800a95c:	1860      	adds	r0, r4, r1
 800a95e:	f000 fb3b 	bl	800afd8 <core_set_error>
 800a962:	463e      	mov	r6, r7
 800a964:	e76d      	b.n	800a842 <ai_platform_network_init+0xae>
 800a966:	bf00      	nop
 800a968:	a1c00100 	.word	0xa1c00100
 800a96c:	e0002000 	.word	0xe0002000
 800a970:	e0042000 	.word	0xe0042000
 800a974:	58024000 	.word	0x58024000
 800a978:	f407a5c2 	.word	0xf407a5c2
 800a97c:	b5e8b5cd 	.word	0xb5e8b5cd
 800a980:	40023000 	.word	0x40023000
 800a984:	a1facade 	.word	0xa1facade

0800a988 <ai_platform_network_post_init>:
 800a988:	b538      	push	{r3, r4, r5, lr}
 800a98a:	b318      	cbz	r0, 800a9d4 <ai_platform_network_post_init+0x4c>
 800a98c:	4b41      	ldr	r3, [pc, #260]	@ (800aa94 <ai_platform_network_post_init+0x10c>)
 800a98e:	6802      	ldr	r2, [r0, #0]
 800a990:	429a      	cmp	r2, r3
 800a992:	4604      	mov	r4, r0
 800a994:	d11e      	bne.n	800a9d4 <ai_platform_network_post_init+0x4c>
 800a996:	4a40      	ldr	r2, [pc, #256]	@ (800aa98 <ai_platform_network_post_init+0x110>)
 800a998:	6813      	ldr	r3, [r2, #0]
 800a99a:	f023 0301 	bic.w	r3, r3, #1
 800a99e:	6013      	str	r3, [r2, #0]
 800a9a0:	f7ff fb04 	bl	8009fac <_ai_platform_acquire_crc>
 800a9a4:	4b3d      	ldr	r3, [pc, #244]	@ (800aa9c <ai_platform_network_post_init+0x114>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a9ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9b0:	d040      	beq.n	800aa34 <ai_platform_network_post_init+0xac>
 800a9b2:	4a3b      	ldr	r2, [pc, #236]	@ (800aaa0 <ai_platform_network_post_init+0x118>)
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800a9ba:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d1fb      	bne.n	800a9ba <ai_platform_network_post_init+0x32>
 800a9c2:	4b38      	ldr	r3, [pc, #224]	@ (800aaa4 <ai_platform_network_post_init+0x11c>)
 800a9c4:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800a9c8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800a9cc:	4b36      	ldr	r3, [pc, #216]	@ (800aaa8 <ai_platform_network_post_init+0x120>)
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d03c      	beq.n	800aa4c <ai_platform_network_post_init+0xc4>
 800a9d2:	e7fe      	b.n	800a9d2 <ai_platform_network_post_init+0x4a>
 800a9d4:	4a30      	ldr	r2, [pc, #192]	@ (800aa98 <ai_platform_network_post_init+0x110>)
 800a9d6:	6813      	ldr	r3, [r2, #0]
 800a9d8:	f023 0301 	bic.w	r3, r3, #1
 800a9dc:	6013      	str	r3, [r2, #0]
 800a9de:	f7ff fae5 	bl	8009fac <_ai_platform_acquire_crc>
 800a9e2:	4b2e      	ldr	r3, [pc, #184]	@ (800aa9c <ai_platform_network_post_init+0x114>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a9ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9ee:	d010      	beq.n	800aa12 <ai_platform_network_post_init+0x8a>
 800a9f0:	4a2b      	ldr	r2, [pc, #172]	@ (800aaa0 <ai_platform_network_post_init+0x118>)
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800a9f8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1fb      	bne.n	800a9f8 <ai_platform_network_post_init+0x70>
 800aa00:	4b28      	ldr	r3, [pc, #160]	@ (800aaa4 <ai_platform_network_post_init+0x11c>)
 800aa02:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800aa06:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800aa0a:	4b27      	ldr	r3, [pc, #156]	@ (800aaa8 <ai_platform_network_post_init+0x120>)
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d00d      	beq.n	800aa2c <ai_platform_network_post_init+0xa4>
 800aa10:	e7fe      	b.n	800aa10 <ai_platform_network_post_init+0x88>
 800aa12:	4a26      	ldr	r2, [pc, #152]	@ (800aaac <ai_platform_network_post_init+0x124>)
 800aa14:	2301      	movs	r3, #1
 800aa16:	6093      	str	r3, [r2, #8]
 800aa18:	6893      	ldr	r3, [r2, #8]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1fc      	bne.n	800aa18 <ai_platform_network_post_init+0x90>
 800aa1e:	4b21      	ldr	r3, [pc, #132]	@ (800aaa4 <ai_platform_network_post_init+0x11c>)
 800aa20:	6013      	str	r3, [r2, #0]
 800aa22:	6812      	ldr	r2, [r2, #0]
 800aa24:	4b20      	ldr	r3, [pc, #128]	@ (800aaa8 <ai_platform_network_post_init+0x120>)
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d000      	beq.n	800aa2c <ai_platform_network_post_init+0xa4>
 800aa2a:	e7fe      	b.n	800aa2a <ai_platform_network_post_init+0xa2>
 800aa2c:	f7ff fac0 	bl	8009fb0 <_ai_platform_release_crc>
 800aa30:	2000      	movs	r0, #0
 800aa32:	bd38      	pop	{r3, r4, r5, pc}
 800aa34:	4a1d      	ldr	r2, [pc, #116]	@ (800aaac <ai_platform_network_post_init+0x124>)
 800aa36:	2301      	movs	r3, #1
 800aa38:	6093      	str	r3, [r2, #8]
 800aa3a:	6893      	ldr	r3, [r2, #8]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1fc      	bne.n	800aa3a <ai_platform_network_post_init+0xb2>
 800aa40:	4b18      	ldr	r3, [pc, #96]	@ (800aaa4 <ai_platform_network_post_init+0x11c>)
 800aa42:	6013      	str	r3, [r2, #0]
 800aa44:	6812      	ldr	r2, [r2, #0]
 800aa46:	4b18      	ldr	r3, [pc, #96]	@ (800aaa8 <ai_platform_network_post_init+0x120>)
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d11a      	bne.n	800aa82 <ai_platform_network_post_init+0xfa>
 800aa4c:	f7ff fab0 	bl	8009fb0 <_ai_platform_release_crc>
 800aa50:	68e3      	ldr	r3, [r4, #12]
 800aa52:	f013 0502 	ands.w	r5, r3, #2
 800aa56:	d015      	beq.n	800aa84 <ai_platform_network_post_init+0xfc>
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f001 ffbd 	bl	800c9d8 <ai_layers_post_init_all>
 800aa5e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800aa60:	b16b      	cbz	r3, 800aa7e <ai_platform_network_post_init+0xf6>
 800aa62:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 800aa64:	e007      	b.n	800aa76 <ai_platform_network_post_init+0xee>
 800aa66:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	@ 0x3c
 800aa6a:	4798      	blx	r3
 800aa6c:	692b      	ldr	r3, [r5, #16]
 800aa6e:	42ab      	cmp	r3, r5
 800aa70:	d005      	beq.n	800aa7e <ai_platform_network_post_init+0xf6>
 800aa72:	b123      	cbz	r3, 800aa7e <ai_platform_network_post_init+0xf6>
 800aa74:	461d      	mov	r5, r3
 800aa76:	4629      	mov	r1, r5
 800aa78:	2000      	movs	r0, #0
 800aa7a:	2d00      	cmp	r5, #0
 800aa7c:	d1f3      	bne.n	800aa66 <ai_platform_network_post_init+0xde>
 800aa7e:	2001      	movs	r0, #1
 800aa80:	bd38      	pop	{r3, r4, r5, pc}
 800aa82:	e7fe      	b.n	800aa82 <ai_platform_network_post_init+0xfa>
 800aa84:	2210      	movs	r2, #16
 800aa86:	2111      	movs	r1, #17
 800aa88:	18a0      	adds	r0, r4, r2
 800aa8a:	f000 faa5 	bl	800afd8 <core_set_error>
 800aa8e:	4628      	mov	r0, r5
 800aa90:	bd38      	pop	{r3, r4, r5, pc}
 800aa92:	bf00      	nop
 800aa94:	a1c00100 	.word	0xa1c00100
 800aa98:	e0002000 	.word	0xe0002000
 800aa9c:	e0042000 	.word	0xe0042000
 800aaa0:	58024000 	.word	0x58024000
 800aaa4:	f407a5c2 	.word	0xf407a5c2
 800aaa8:	b5e8b5cd 	.word	0xb5e8b5cd
 800aaac:	40023000 	.word	0x40023000

0800aab0 <ai_platform_network_process>:
 800aab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab4:	460e      	mov	r6, r1
 800aab6:	b085      	sub	sp, #20
 800aab8:	4693      	mov	fp, r2
 800aaba:	4605      	mov	r5, r0
 800aabc:	b120      	cbz	r0, 800aac8 <ai_platform_network_process+0x18>
 800aabe:	4bb7      	ldr	r3, [pc, #732]	@ (800ad9c <ai_platform_network_process+0x2ec>)
 800aac0:	6802      	ldr	r2, [r0, #0]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	bf18      	it	ne
 800aac6:	2500      	movne	r5, #0
 800aac8:	4ab5      	ldr	r2, [pc, #724]	@ (800ada0 <ai_platform_network_process+0x2f0>)
 800aaca:	6813      	ldr	r3, [r2, #0]
 800aacc:	f023 0301 	bic.w	r3, r3, #1
 800aad0:	6013      	str	r3, [r2, #0]
 800aad2:	f7ff fa6b 	bl	8009fac <_ai_platform_acquire_crc>
 800aad6:	4bb3      	ldr	r3, [pc, #716]	@ (800ada4 <ai_platform_network_process+0x2f4>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aade:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aae2:	d010      	beq.n	800ab06 <ai_platform_network_process+0x56>
 800aae4:	4ab0      	ldr	r2, [pc, #704]	@ (800ada8 <ai_platform_network_process+0x2f8>)
 800aae6:	2301      	movs	r3, #1
 800aae8:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800aaec:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d1fb      	bne.n	800aaec <ai_platform_network_process+0x3c>
 800aaf4:	4bad      	ldr	r3, [pc, #692]	@ (800adac <ai_platform_network_process+0x2fc>)
 800aaf6:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800aafa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800aafe:	4bac      	ldr	r3, [pc, #688]	@ (800adb0 <ai_platform_network_process+0x300>)
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d00d      	beq.n	800ab20 <ai_platform_network_process+0x70>
 800ab04:	e7fe      	b.n	800ab04 <ai_platform_network_process+0x54>
 800ab06:	4aab      	ldr	r2, [pc, #684]	@ (800adb4 <ai_platform_network_process+0x304>)
 800ab08:	2301      	movs	r3, #1
 800ab0a:	6093      	str	r3, [r2, #8]
 800ab0c:	6893      	ldr	r3, [r2, #8]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1fc      	bne.n	800ab0c <ai_platform_network_process+0x5c>
 800ab12:	4ba6      	ldr	r3, [pc, #664]	@ (800adac <ai_platform_network_process+0x2fc>)
 800ab14:	6013      	str	r3, [r2, #0]
 800ab16:	6812      	ldr	r2, [r2, #0]
 800ab18:	4ba5      	ldr	r3, [pc, #660]	@ (800adb0 <ai_platform_network_process+0x300>)
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	f040 812c 	bne.w	800ad78 <ai_platform_network_process+0x2c8>
 800ab20:	f7ff fa46 	bl	8009fb0 <_ai_platform_release_crc>
 800ab24:	2d00      	cmp	r5, #0
 800ab26:	f000 8155 	beq.w	800add4 <ai_platform_network_process+0x324>
 800ab2a:	8dab      	ldrh	r3, [r5, #44]	@ 0x2c
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f000 8124 	beq.w	800ad7a <ai_platform_network_process+0x2ca>
 800ab32:	68eb      	ldr	r3, [r5, #12]
 800ab34:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 800ab38:	f003 0303 	and.w	r3, r3, #3
 800ab3c:	2700      	movs	r7, #0
 800ab3e:	2b03      	cmp	r3, #3
 800ab40:	616f      	str	r7, [r5, #20]
 800ab42:	f040 813f 	bne.w	800adc4 <ai_platform_network_process+0x314>
 800ab46:	2e00      	cmp	r6, #0
 800ab48:	f000 811d 	beq.w	800ad86 <ai_platform_network_process+0x2d6>
 800ab4c:	f1ba 0f00 	cmp.w	sl, #0
 800ab50:	f000 8119 	beq.w	800ad86 <ai_platform_network_process+0x2d6>
 800ab54:	f8ba 3000 	ldrh.w	r3, [sl]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f000 8114 	beq.w	800ad86 <ai_platform_network_process+0x2d6>
 800ab5e:	69b3      	ldr	r3, [r6, #24]
 800ab60:	f8cd b00c 	str.w	fp, [sp, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	e9cd 3501 	strd	r3, r5, [sp, #4]
 800ab6a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d072      	beq.n	800ac58 <ai_platform_network_process+0x1a8>
 800ab72:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800ab76:	2c00      	cmp	r4, #0
 800ab78:	d06e      	beq.n	800ac58 <ai_platform_network_process+0x1a8>
 800ab7a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800ab7e:	f8d3 9000 	ldr.w	r9, [r3]
 800ab82:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 800ab86:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800ab8a:	f000 81e1 	beq.w	800af50 <ai_platform_network_process+0x4a0>
 800ab8e:	69a3      	ldr	r3, [r4, #24]
 800ab90:	2101      	movs	r1, #1
 800ab92:	4630      	mov	r0, r6
 800ab94:	685d      	ldr	r5, [r3, #4]
 800ab96:	f7ff f9bb 	bl	8009f10 <ai_buffer_get_size>
 800ab9a:	4285      	cmp	r5, r0
 800ab9c:	f0c0 811c 	bcc.w	800add8 <ai_platform_network_process+0x328>
 800aba0:	68e0      	ldr	r0, [r4, #12]
 800aba2:	69b1      	ldr	r1, [r6, #24]
 800aba4:	68c2      	ldr	r2, [r0, #12]
 800aba6:	68cb      	ldr	r3, [r1, #12]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	f040 8115 	bne.w	800add8 <ai_platform_network_process+0x328>
 800abae:	6882      	ldr	r2, [r0, #8]
 800abb0:	688b      	ldr	r3, [r1, #8]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	f040 8110 	bne.w	800add8 <ai_platform_network_process+0x328>
 800abb8:	6842      	ldr	r2, [r0, #4]
 800abba:	684b      	ldr	r3, [r1, #4]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	f040 810b 	bne.w	800add8 <ai_platform_network_process+0x328>
 800abc2:	69a3      	ldr	r3, [r4, #24]
 800abc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800abc8:	f002 f818 	bl	800cbfc <ai_array_get_data_byte_size>
 800abcc:	4605      	mov	r5, r0
 800abce:	4620      	mov	r0, r4
 800abd0:	f001 ff68 	bl	800caa4 <get_tensor_byte_size>
 800abd4:	4285      	cmp	r5, r0
 800abd6:	f0c0 80ff 	bcc.w	800add8 <ai_platform_network_process+0x328>
 800abda:	69a3      	ldr	r3, [r4, #24]
 800abdc:	6818      	ldr	r0, [r3, #0]
 800abde:	f001 ff79 	bl	800cad4 <ai_array_to_buffer_fmt>
 800abe2:	6833      	ldr	r3, [r6, #0]
 800abe4:	4058      	eors	r0, r3
 800abe6:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800abea:	f040 81bc 	bne.w	800af66 <ai_platform_network_process+0x4b6>
 800abee:	6873      	ldr	r3, [r6, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f000 81af 	beq.w	800af54 <ai_platform_network_process+0x4a4>
 800abf6:	69b3      	ldr	r3, [r6, #24]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f000 819f 	beq.w	800af3e <ai_platform_network_process+0x48e>
 800ac00:	9a01      	ldr	r2, [sp, #4]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	bf38      	it	cc
 800ac06:	461a      	movcc	r2, r3
 800ac08:	4620      	mov	r0, r4
 800ac0a:	9201      	str	r2, [sp, #4]
 800ac0c:	f001 ff4a 	bl	800caa4 <get_tensor_byte_size>
 800ac10:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac14:	69b3      	ldr	r3, [r6, #24]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	fb00 f303 	mul.w	r3, r0, r3
 800ac1c:	f8c8 300c 	str.w	r3, [r8, #12]
 800ac20:	6871      	ldr	r1, [r6, #4]
 800ac22:	f8c8 1004 	str.w	r1, [r8, #4]
 800ac26:	440b      	add	r3, r1
 800ac28:	f849 300b 	str.w	r3, [r9, fp]
 800ac2c:	69a0      	ldr	r0, [r4, #24]
 800ac2e:	6803      	ldr	r3, [r0, #0]
 800ac30:	009a      	lsls	r2, r3, #2
 800ac32:	f107 0701 	add.w	r7, r7, #1
 800ac36:	f106 061c 	add.w	r6, r6, #28
 800ac3a:	f100 80bd 	bmi.w	800adb8 <ai_platform_network_process+0x308>
 800ac3e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800ac42:	1a9b      	subs	r3, r3, r2
 800ac44:	4419      	add	r1, r3
 800ac46:	6081      	str	r1, [r0, #8]
 800ac48:	69a3      	ldr	r3, [r4, #24]
 800ac4a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800ac4e:	60da      	str	r2, [r3, #12]
 800ac50:	f8ba 3000 	ldrh.w	r3, [sl]
 800ac54:	42bb      	cmp	r3, r7
 800ac56:	d888      	bhi.n	800ab6a <ai_platform_network_process+0xba>
 800ac58:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 800ac5c:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 800ac5e:	f1bb 0f00 	cmp.w	fp, #0
 800ac62:	f000 8189 	beq.w	800af78 <ai_platform_network_process+0x4c8>
 800ac66:	2a01      	cmp	r2, #1
 800ac68:	f240 8161 	bls.w	800af2e <ai_platform_network_process+0x47e>
 800ac6c:	f8d5 9030 	ldr.w	r9, [r5, #48]	@ 0x30
 800ac70:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f000 815a 	beq.w	800af2e <ai_platform_network_process+0x47e>
 800ac7a:	465e      	mov	r6, fp
 800ac7c:	2700      	movs	r7, #0
 800ac7e:	462c      	mov	r4, r5
 800ac80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f000 80b5 	beq.w	800adf4 <ai_platform_network_process+0x344>
 800ac8a:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 800ac8e:	2d00      	cmp	r5, #0
 800ac90:	f000 80b0 	beq.w	800adf4 <ai_platform_network_process+0x344>
 800ac94:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ac98:	f8d3 8000 	ldr.w	r8, [r3]
 800ac9c:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800aca0:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800aca4:	f000 8174 	beq.w	800af90 <ai_platform_network_process+0x4e0>
 800aca8:	69ab      	ldr	r3, [r5, #24]
 800acaa:	2101      	movs	r1, #1
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	9302      	str	r3, [sp, #8]
 800acb0:	4630      	mov	r0, r6
 800acb2:	f7ff f92d 	bl	8009f10 <ai_buffer_get_size>
 800acb6:	9b02      	ldr	r3, [sp, #8]
 800acb8:	4283      	cmp	r3, r0
 800acba:	f0c0 8137 	bcc.w	800af2c <ai_platform_network_process+0x47c>
 800acbe:	68e8      	ldr	r0, [r5, #12]
 800acc0:	69b1      	ldr	r1, [r6, #24]
 800acc2:	68c2      	ldr	r2, [r0, #12]
 800acc4:	68cb      	ldr	r3, [r1, #12]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	f040 8130 	bne.w	800af2c <ai_platform_network_process+0x47c>
 800accc:	6882      	ldr	r2, [r0, #8]
 800acce:	688b      	ldr	r3, [r1, #8]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	f040 812b 	bne.w	800af2c <ai_platform_network_process+0x47c>
 800acd6:	6842      	ldr	r2, [r0, #4]
 800acd8:	684b      	ldr	r3, [r1, #4]
 800acda:	429a      	cmp	r2, r3
 800acdc:	f040 8126 	bne.w	800af2c <ai_platform_network_process+0x47c>
 800ace0:	69ab      	ldr	r3, [r5, #24]
 800ace2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ace6:	f001 ff89 	bl	800cbfc <ai_array_get_data_byte_size>
 800acea:	9002      	str	r0, [sp, #8]
 800acec:	4628      	mov	r0, r5
 800acee:	f001 fed9 	bl	800caa4 <get_tensor_byte_size>
 800acf2:	9b02      	ldr	r3, [sp, #8]
 800acf4:	4283      	cmp	r3, r0
 800acf6:	f0c0 8119 	bcc.w	800af2c <ai_platform_network_process+0x47c>
 800acfa:	69ab      	ldr	r3, [r5, #24]
 800acfc:	6818      	ldr	r0, [r3, #0]
 800acfe:	f001 fee9 	bl	800cad4 <ai_array_to_buffer_fmt>
 800ad02:	6833      	ldr	r3, [r6, #0]
 800ad04:	4058      	eors	r0, r3
 800ad06:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800ad0a:	f040 8139 	bne.w	800af80 <ai_platform_network_process+0x4d0>
 800ad0e:	6873      	ldr	r3, [r6, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f000 8150 	beq.w	800afb6 <ai_platform_network_process+0x506>
 800ad16:	69b3      	ldr	r3, [r6, #24]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f000 8142 	beq.w	800afa4 <ai_platform_network_process+0x4f4>
 800ad20:	9a01      	ldr	r2, [sp, #4]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	bf38      	it	cc
 800ad26:	461a      	movcc	r2, r3
 800ad28:	4628      	mov	r0, r5
 800ad2a:	9201      	str	r2, [sp, #4]
 800ad2c:	f001 feba 	bl	800caa4 <get_tensor_byte_size>
 800ad30:	f8ca 0008 	str.w	r0, [sl, #8]
 800ad34:	69b3      	ldr	r3, [r6, #24]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	fb00 f303 	mul.w	r3, r0, r3
 800ad3c:	f8ca 300c 	str.w	r3, [sl, #12]
 800ad40:	6871      	ldr	r1, [r6, #4]
 800ad42:	f8ca 1004 	str.w	r1, [sl, #4]
 800ad46:	440b      	add	r3, r1
 800ad48:	f848 300b 	str.w	r3, [r8, fp]
 800ad4c:	69a8      	ldr	r0, [r5, #24]
 800ad4e:	6803      	ldr	r3, [r0, #0]
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	f107 0701 	add.w	r7, r7, #1
 800ad56:	f106 061c 	add.w	r6, r6, #28
 800ad5a:	d446      	bmi.n	800adea <ai_platform_network_process+0x33a>
 800ad5c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800ad60:	1a9b      	subs	r3, r3, r2
 800ad62:	4419      	add	r1, r3
 800ad64:	6081      	str	r1, [r0, #8]
 800ad66:	69ab      	ldr	r3, [r5, #24]
 800ad68:	f8da 2004 	ldr.w	r2, [sl, #4]
 800ad6c:	60da      	str	r2, [r3, #12]
 800ad6e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800ad72:	429f      	cmp	r7, r3
 800ad74:	d384      	bcc.n	800ac80 <ai_platform_network_process+0x1d0>
 800ad76:	e03d      	b.n	800adf4 <ai_platform_network_process+0x344>
 800ad78:	e7fe      	b.n	800ad78 <ai_platform_network_process+0x2c8>
 800ad7a:	68ea      	ldr	r2, [r5, #12]
 800ad7c:	616b      	str	r3, [r5, #20]
 800ad7e:	f002 0203 	and.w	r2, r2, #3
 800ad82:	2a03      	cmp	r2, #3
 800ad84:	d11e      	bne.n	800adc4 <ai_platform_network_process+0x314>
 800ad86:	2217      	movs	r2, #23
 800ad88:	2112      	movs	r1, #18
 800ad8a:	f105 0010 	add.w	r0, r5, #16
 800ad8e:	f000 f923 	bl	800afd8 <core_set_error>
 800ad92:	2400      	movs	r4, #0
 800ad94:	4620      	mov	r0, r4
 800ad96:	b005      	add	sp, #20
 800ad98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad9c:	a1c00100 	.word	0xa1c00100
 800ada0:	e0002000 	.word	0xe0002000
 800ada4:	e0042000 	.word	0xe0042000
 800ada8:	58024000 	.word	0x58024000
 800adac:	f407a5c2 	.word	0xf407a5c2
 800adb0:	b5e8b5cd 	.word	0xb5e8b5cd
 800adb4:	40023000 	.word	0x40023000
 800adb8:	f8ba 3000 	ldrh.w	r3, [sl]
 800adbc:	429f      	cmp	r7, r3
 800adbe:	f4ff aed4 	bcc.w	800ab6a <ai_platform_network_process+0xba>
 800adc2:	e749      	b.n	800ac58 <ai_platform_network_process+0x1a8>
 800adc4:	2230      	movs	r2, #48	@ 0x30
 800adc6:	2111      	movs	r1, #17
 800adc8:	f105 0010 	add.w	r0, r5, #16
 800adcc:	f000 f904 	bl	800afd8 <core_set_error>
 800add0:	2400      	movs	r4, #0
 800add2:	e7df      	b.n	800ad94 <ai_platform_network_process+0x2e4>
 800add4:	462c      	mov	r4, r5
 800add6:	e7dd      	b.n	800ad94 <ai_platform_network_process+0x2e4>
 800add8:	9d02      	ldr	r5, [sp, #8]
 800adda:	2218      	movs	r2, #24
 800addc:	2112      	movs	r1, #18
 800adde:	f105 0010 	add.w	r0, r5, #16
 800ade2:	f000 f8f9 	bl	800afd8 <core_set_error>
 800ade6:	2400      	movs	r4, #0
 800ade8:	e7d4      	b.n	800ad94 <ai_platform_network_process+0x2e4>
 800adea:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800adee:	429f      	cmp	r7, r3
 800adf0:	f4ff af46 	bcc.w	800ac80 <ai_platform_network_process+0x1d0>
 800adf4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800adf8:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800adfa:	82a3      	strh	r3, [r4, #20]
 800adfc:	4625      	mov	r5, r4
 800adfe:	2a00      	cmp	r2, #0
 800ae00:	f040 808e 	bne.w	800af20 <ai_platform_network_process+0x470>
 800ae04:	4616      	mov	r6, r2
 800ae06:	4617      	mov	r7, r2
 800ae08:	8aec      	ldrh	r4, [r5, #22]
 800ae0a:	429c      	cmp	r4, r3
 800ae0c:	bf38      	it	cc
 800ae0e:	46ab      	movcc	fp, r5
 800ae10:	d2c0      	bcs.n	800ad94 <ai_platform_network_process+0x2e4>
 800ae12:	2e00      	cmp	r6, #0
 800ae14:	d030      	beq.n	800ae78 <ai_platform_network_process+0x3c8>
 800ae16:	f04f 0800 	mov.w	r8, #0
 800ae1a:	e014      	b.n	800ae46 <ai_platform_network_process+0x396>
 800ae1c:	6882      	ldr	r2, [r0, #8]
 800ae1e:	68c5      	ldr	r5, [r0, #12]
 800ae20:	6863      	ldr	r3, [r4, #4]
 800ae22:	1b52      	subs	r2, r2, r5
 800ae24:	4413      	add	r3, r2
 800ae26:	6083      	str	r3, [r0, #8]
 800ae28:	698b      	ldr	r3, [r1, #24]
 800ae2a:	6862      	ldr	r2, [r4, #4]
 800ae2c:	60da      	str	r2, [r3, #12]
 800ae2e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800ae32:	f859 200a 	ldr.w	r2, [r9, sl]
 800ae36:	440b      	add	r3, r1
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	bf24      	itt	cs
 800ae3c:	68e3      	ldrcs	r3, [r4, #12]
 800ae3e:	1ad3      	subcs	r3, r2, r3
 800ae40:	6063      	str	r3, [r4, #4]
 800ae42:	f108 0801 	add.w	r8, r8, #1
 800ae46:	8833      	ldrh	r3, [r6, #0]
 800ae48:	4543      	cmp	r3, r8
 800ae4a:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800ae4e:	d913      	bls.n	800ae78 <ai_platform_network_process+0x3c8>
 800ae50:	6873      	ldr	r3, [r6, #4]
 800ae52:	b18b      	cbz	r3, 800ae78 <ai_platform_network_process+0x3c8>
 800ae54:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800ae58:	b171      	cbz	r1, 800ae78 <ai_platform_network_process+0x3c8>
 800ae5a:	6988      	ldr	r0, [r1, #24]
 800ae5c:	68b2      	ldr	r2, [r6, #8]
 800ae5e:	6803      	ldr	r3, [r0, #0]
 800ae60:	f8d2 9000 	ldr.w	r9, [r2]
 800ae64:	009d      	lsls	r5, r3, #2
 800ae66:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800ae6a:	d5d7      	bpl.n	800ae1c <ai_platform_network_process+0x36c>
 800ae6c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800ae70:	6880      	ldr	r0, [r0, #8]
 800ae72:	f003 f912 	bl	800e09a <memcpy>
 800ae76:	e7da      	b.n	800ae2e <ai_platform_network_process+0x37e>
 800ae78:	4658      	mov	r0, fp
 800ae7a:	f001 fdc1 	bl	800ca00 <ai_layers_forward_all>
 800ae7e:	2f00      	cmp	r7, #0
 800ae80:	d03f      	beq.n	800af02 <ai_platform_network_process+0x452>
 800ae82:	2400      	movs	r4, #0
 800ae84:	e016      	b.n	800aeb4 <ai_platform_network_process+0x404>
 800ae86:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800ae8a:	f859 100a 	ldr.w	r1, [r9, sl]
 800ae8e:	4413      	add	r3, r2
 800ae90:	428b      	cmp	r3, r1
 800ae92:	bf24      	itt	cs
 800ae94:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800ae98:	1acb      	subcs	r3, r1, r3
 800ae9a:	f8c8 3004 	str.w	r3, [r8, #4]
 800ae9e:	6981      	ldr	r1, [r0, #24]
 800aea0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800aea4:	1b52      	subs	r2, r2, r5
 800aea6:	4413      	add	r3, r2
 800aea8:	608b      	str	r3, [r1, #8]
 800aeaa:	6983      	ldr	r3, [r0, #24]
 800aeac:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800aeb0:	60da      	str	r2, [r3, #12]
 800aeb2:	3401      	adds	r4, #1
 800aeb4:	883b      	ldrh	r3, [r7, #0]
 800aeb6:	42a3      	cmp	r3, r4
 800aeb8:	d923      	bls.n	800af02 <ai_platform_network_process+0x452>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	b30b      	cbz	r3, 800af02 <ai_platform_network_process+0x452>
 800aebe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800aec2:	b1f0      	cbz	r0, 800af02 <ai_platform_network_process+0x452>
 800aec4:	68ba      	ldr	r2, [r7, #8]
 800aec6:	6983      	ldr	r3, [r0, #24]
 800aec8:	f8d2 9000 	ldr.w	r9, [r2]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	0092      	lsls	r2, r2, #2
 800aed0:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800aed4:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800aed8:	d5d5      	bpl.n	800ae86 <ai_platform_network_process+0x3d6>
 800aeda:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800aede:	6899      	ldr	r1, [r3, #8]
 800aee0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aee4:	f003 f8d9 	bl	800e09a <memcpy>
 800aee8:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800aeec:	f859 200a 	ldr.w	r2, [r9, sl]
 800aef0:	440b      	add	r3, r1
 800aef2:	4293      	cmp	r3, r2
 800aef4:	bf24      	itt	cs
 800aef6:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800aefa:	1ad3      	subcs	r3, r2, r3
 800aefc:	f8c8 3004 	str.w	r3, [r8, #4]
 800af00:	e7d7      	b.n	800aeb2 <ai_platform_network_process+0x402>
 800af02:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800af06:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800af0a:	3401      	adds	r4, #1
 800af0c:	b2a4      	uxth	r4, r4
 800af0e:	42a3      	cmp	r3, r4
 800af10:	f8ab 4016 	strh.w	r4, [fp, #22]
 800af14:	f63f af7d 	bhi.w	800ae12 <ai_platform_network_process+0x362>
 800af18:	4620      	mov	r0, r4
 800af1a:	b005      	add	sp, #20
 800af1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af20:	2a01      	cmp	r2, #1
 800af22:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
 800af24:	d03c      	beq.n	800afa0 <ai_platform_network_process+0x4f0>
 800af26:	f106 070c 	add.w	r7, r6, #12
 800af2a:	e76d      	b.n	800ae08 <ai_platform_network_process+0x358>
 800af2c:	4625      	mov	r5, r4
 800af2e:	2218      	movs	r2, #24
 800af30:	2113      	movs	r1, #19
 800af32:	f105 0010 	add.w	r0, r5, #16
 800af36:	f000 f84f 	bl	800afd8 <core_set_error>
 800af3a:	2400      	movs	r4, #0
 800af3c:	e72a      	b.n	800ad94 <ai_platform_network_process+0x2e4>
 800af3e:	9d02      	ldr	r5, [sp, #8]
 800af40:	4604      	mov	r4, r0
 800af42:	2221      	movs	r2, #33	@ 0x21
 800af44:	2112      	movs	r1, #18
 800af46:	f105 0010 	add.w	r0, r5, #16
 800af4a:	f000 f845 	bl	800afd8 <core_set_error>
 800af4e:	e721      	b.n	800ad94 <ai_platform_network_process+0x2e4>
 800af50:	9d02      	ldr	r5, [sp, #8]
 800af52:	e718      	b.n	800ad86 <ai_platform_network_process+0x2d6>
 800af54:	9d02      	ldr	r5, [sp, #8]
 800af56:	4604      	mov	r4, r0
 800af58:	2217      	movs	r2, #23
 800af5a:	2112      	movs	r1, #18
 800af5c:	f105 0010 	add.w	r0, r5, #16
 800af60:	f000 f83a 	bl	800afd8 <core_set_error>
 800af64:	e716      	b.n	800ad94 <ai_platform_network_process+0x2e4>
 800af66:	9d02      	ldr	r5, [sp, #8]
 800af68:	2219      	movs	r2, #25
 800af6a:	2112      	movs	r1, #18
 800af6c:	f105 0010 	add.w	r0, r5, #16
 800af70:	f000 f832 	bl	800afd8 <core_set_error>
 800af74:	2400      	movs	r4, #0
 800af76:	e70d      	b.n	800ad94 <ai_platform_network_process+0x2e4>
 800af78:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800af7c:	82ab      	strh	r3, [r5, #20]
 800af7e:	e73e      	b.n	800adfe <ai_platform_network_process+0x34e>
 800af80:	f104 0010 	add.w	r0, r4, #16
 800af84:	2219      	movs	r2, #25
 800af86:	2113      	movs	r1, #19
 800af88:	f000 f826 	bl	800afd8 <core_set_error>
 800af8c:	2400      	movs	r4, #0
 800af8e:	e701      	b.n	800ad94 <ai_platform_network_process+0x2e4>
 800af90:	f104 0010 	add.w	r0, r4, #16
 800af94:	2217      	movs	r2, #23
 800af96:	2113      	movs	r1, #19
 800af98:	f000 f81e 	bl	800afd8 <core_set_error>
 800af9c:	4654      	mov	r4, sl
 800af9e:	e6f9      	b.n	800ad94 <ai_platform_network_process+0x2e4>
 800afa0:	2700      	movs	r7, #0
 800afa2:	e731      	b.n	800ae08 <ai_platform_network_process+0x358>
 800afa4:	4625      	mov	r5, r4
 800afa6:	2221      	movs	r2, #33	@ 0x21
 800afa8:	4604      	mov	r4, r0
 800afaa:	2113      	movs	r1, #19
 800afac:	f105 0010 	add.w	r0, r5, #16
 800afb0:	f000 f812 	bl	800afd8 <core_set_error>
 800afb4:	e6ee      	b.n	800ad94 <ai_platform_network_process+0x2e4>
 800afb6:	4625      	mov	r5, r4
 800afb8:	2217      	movs	r2, #23
 800afba:	4604      	mov	r4, r0
 800afbc:	2113      	movs	r1, #19
 800afbe:	f105 0010 	add.w	r0, r5, #16
 800afc2:	f000 f809 	bl	800afd8 <core_set_error>
 800afc6:	e6e5      	b.n	800ad94 <ai_platform_network_process+0x2e4>

0800afc8 <core_init>:
 800afc8:	2001      	movs	r0, #1
 800afca:	4770      	bx	lr

0800afcc <core_get_error>:
 800afcc:	4603      	mov	r3, r0
 800afce:	2200      	movs	r2, #0
 800afd0:	6800      	ldr	r0, [r0, #0]
 800afd2:	601a      	str	r2, [r3, #0]
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop

0800afd8 <core_set_error>:
 800afd8:	4603      	mov	r3, r0
 800afda:	7800      	ldrb	r0, [r0, #0]
 800afdc:	b108      	cbz	r0, 800afe2 <core_set_error+0xa>
 800afde:	2000      	movs	r0, #0
 800afe0:	4770      	bx	lr
 800afe2:	7019      	strb	r1, [r3, #0]
 800afe4:	6819      	ldr	r1, [r3, #0]
 800afe6:	f362 211f 	bfi	r1, r2, #8, #24
 800afea:	2001      	movs	r0, #1
 800afec:	6019      	str	r1, [r3, #0]
 800afee:	4770      	bx	lr

0800aff0 <func_dummy>:
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop

0800aff4 <ai_conv2d_stripe_f32.constprop.0>:
 800aff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff8:	ed2d 8b02 	vpush	{d8}
 800affc:	b09d      	sub	sp, #116	@ 0x74
 800affe:	af00      	add	r7, sp, #0
 800b000:	e9c7 3219 	strd	r3, r2, [r7, #100]	@ 0x64
 800b004:	f8d7 a0bc 	ldr.w	sl, [r7, #188]	@ 0xbc
 800b008:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 800b00c:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800b00e:	f1ba 0f01 	cmp.w	sl, #1
 800b012:	663b      	str	r3, [r7, #96]	@ 0x60
 800b014:	f8d7 60a0 	ldr.w	r6, [r7, #160]	@ 0xa0
 800b018:	f8d7 50b4 	ldr.w	r5, [r7, #180]	@ 0xb4
 800b01c:	f8d7 c0cc 	ldr.w	ip, [r7, #204]	@ 0xcc
 800b020:	f9b7 e0d4 	ldrsh.w	lr, [r7, #212]	@ 0xd4
 800b024:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	@ 0xd8
 800b028:	6579      	str	r1, [r7, #84]	@ 0x54
 800b02a:	e9d7 3030 	ldrd	r3, r0, [r7, #192]	@ 0xc0
 800b02e:	f000 812f 	beq.w	800b290 <ai_conv2d_stripe_f32.constprop.0+0x29c>
 800b032:	45b2      	cmp	sl, r6
 800b034:	f000 827a 	beq.w	800b52c <ai_conv2d_stripe_f32.constprop.0+0x538>
 800b038:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800b03c:	2900      	cmp	r1, #0
 800b03e:	f000 8115 	beq.w	800b26c <ai_conv2d_stripe_f32.constprop.0+0x278>
 800b042:	fb93 f4f2 	sdiv	r4, r3, r2
 800b046:	fb02 3414 	mls	r4, r2, r4, r3
 800b04a:	1b14      	subs	r4, r2, r4
 800b04c:	1ac1      	subs	r1, r0, r3
 800b04e:	fb94 f0f2 	sdiv	r0, r4, r2
 800b052:	fb02 4010 	mls	r0, r2, r0, r4
 800b056:	1a09      	subs	r1, r1, r0
 800b058:	4411      	add	r1, r2
 800b05a:	3901      	subs	r1, #1
 800b05c:	4418      	add	r0, r3
 800b05e:	fb91 f9f2 	sdiv	r9, r1, r2
 800b062:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800b066:	eddf 6a89 	vldr	s13, [pc, #548]	@ 800b28c <ai_conv2d_stripe_f32.constprop.0+0x298>
 800b06a:	4460      	add	r0, ip
 800b06c:	fb01 f100 	mul.w	r1, r1, r0
 800b070:	6239      	str	r1, [r7, #32]
 800b072:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800b076:	4413      	add	r3, r2
 800b078:	3b01      	subs	r3, #1
 800b07a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b07e:	fb01 f202 	mul.w	r2, r1, r2
 800b082:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b084:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b088:	fb02 f303 	mul.w	r3, r2, r3
 800b08c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b08e:	fb0e f306 	mul.w	r3, lr, r6
 800b092:	fbb6 f2fa 	udiv	r2, r6, sl
 800b096:	1a9b      	subs	r3, r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b09c:	00b3      	lsls	r3, r6, #2
 800b09e:	61fb      	str	r3, [r7, #28]
 800b0a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b0a4:	eba5 0509 	sub.w	r5, r5, r9
 800b0a8:	fb02 f303 	mul.w	r3, r2, r3
 800b0ac:	fb05 f303 	mul.w	r3, r5, r3
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800b0bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b0c0:	f1c3 0800 	rsb	r8, r3, #0
 800b0c4:	ebae 0303 	sub.w	r3, lr, r3
 800b0c8:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800b0cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0d2:	46cc      	mov	ip, r9
 800b0d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b0d8:	f8c7 b014 	str.w	fp, [r7, #20]
 800b0dc:	fbb3 f3fa 	udiv	r3, r3, sl
 800b0e0:	46d1      	mov	r9, sl
 800b0e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	f2c0 80c5 	blt.w	800b278 <ai_conv2d_stripe_f32.constprop.0+0x284>
 800b0ee:	2400      	movs	r4, #0
 800b0f0:	4673      	mov	r3, lr
 800b0f2:	4671      	mov	r1, lr
 800b0f4:	4622      	mov	r2, r4
 800b0f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b0f8:	f8d7 50d0 	ldr.w	r5, [r7, #208]	@ 0xd0
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	fb93 f3fe 	sdiv	r3, r3, lr
 800b102:	4403      	add	r3, r0
 800b104:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800b106:	fb0b 0303 	mla	r3, fp, r3, r0
 800b10a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800b10e:	4440      	add	r0, r8
 800b110:	42a8      	cmp	r0, r5
 800b112:	bf94      	ite	ls
 800b114:	ebc2 0200 	rsbls	r2, r2, r0
 800b118:	ebc2 0205 	rsbhi	r2, r2, r5
 800b11c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 800b120:	6a3d      	ldr	r5, [r7, #32]
 800b122:	4428      	add	r0, r5
 800b124:	4420      	add	r0, r4
 800b126:	fb91 f4fe 	sdiv	r4, r1, lr
 800b12a:	fb0e 1114 	mls	r1, lr, r4, r1
 800b12e:	1a52      	subs	r2, r2, r1
 800b130:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 800b132:	4401      	add	r1, r0
 800b134:	69f8      	ldr	r0, [r7, #28]
 800b136:	fb00 4101 	mla	r1, r0, r1, r4
 800b13a:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800b13c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b13e:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 800b140:	4472      	add	r2, lr
 800b142:	3a01      	subs	r2, #1
 800b144:	fb92 f6fe 	sdiv	r6, r2, lr
 800b148:	460a      	mov	r2, r1
 800b14a:	2900      	cmp	r1, #0
 800b14c:	bf08      	it	eq
 800b14e:	4622      	moveq	r2, r4
 800b150:	42a2      	cmp	r2, r4
 800b152:	637a      	str	r2, [r7, #52]	@ 0x34
 800b154:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b156:	fb0e 2116 	mls	r1, lr, r6, r2
 800b15a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b15e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b162:	bf08      	it	eq
 800b164:	eeb0 7a66 	vmoveq.f32	s14, s13
 800b168:	1b92      	subs	r2, r2, r6
 800b16a:	f1b9 0f00 	cmp.w	r9, #0
 800b16e:	d066      	beq.n	800b23e <ai_conv2d_stripe_f32.constprop.0+0x24a>
 800b170:	fb0b f202 	mul.w	r2, fp, r2
 800b174:	643a      	str	r2, [r7, #64]	@ 0x40
 800b176:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800b17a:	fb00 f101 	mul.w	r1, r0, r1
 800b17e:	4591      	cmp	r9, r2
 800b180:	6479      	str	r1, [r7, #68]	@ 0x44
 800b182:	d85c      	bhi.n	800b23e <ai_conv2d_stripe_f32.constprop.0+0x24a>
 800b184:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b186:	e9c7 e803 	strd	lr, r8, [r7, #12]
 800b18a:	2500      	movs	r5, #0
 800b18c:	3a01      	subs	r2, #1
 800b18e:	46aa      	mov	sl, r5
 800b190:	61ba      	str	r2, [r7, #24]
 800b192:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b194:	f8c7 a008 	str.w	sl, [r7, #8]
 800b198:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800b19c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b19e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b1a0:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800b1a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b1a6:	f04f 0800 	mov.w	r8, #0
 800b1aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b1ac:	ecf2 7a01 	vldmia	r2!, {s15}
 800b1b0:	f1bc 0f00 	cmp.w	ip, #0
 800b1b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b1b8:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b1ba:	dd22      	ble.n	800b202 <ai_conv2d_stripe_f32.constprop.0+0x20e>
 800b1bc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b1be:	2100      	movs	r1, #0
 800b1c0:	2e00      	cmp	r6, #0
 800b1c2:	bfc8      	it	gt
 800b1c4:	2000      	movgt	r0, #0
 800b1c6:	dd15      	ble.n	800b1f4 <ai_conv2d_stripe_f32.constprop.0+0x200>
 800b1c8:	eb02 040b 	add.w	r4, r2, fp
 800b1cc:	4294      	cmp	r4, r2
 800b1ce:	d90c      	bls.n	800b1ea <ai_conv2d_stripe_f32.constprop.0+0x1f6>
 800b1d0:	4696      	mov	lr, r2
 800b1d2:	469a      	mov	sl, r3
 800b1d4:	ecbe 6a01 	vldmia	lr!, {s12}
 800b1d8:	ecfa 5a01 	vldmia	sl!, {s11}
 800b1dc:	4574      	cmp	r4, lr
 800b1de:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b1e2:	d8f7      	bhi.n	800b1d4 <ai_conv2d_stripe_f32.constprop.0+0x1e0>
 800b1e4:	697c      	ldr	r4, [r7, #20]
 800b1e6:	4423      	add	r3, r4
 800b1e8:	4422      	add	r2, r4
 800b1ea:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	4286      	cmp	r6, r0
 800b1f0:	4422      	add	r2, r4
 800b1f2:	d1e9      	bne.n	800b1c8 <ai_conv2d_stripe_f32.constprop.0+0x1d4>
 800b1f4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b1f6:	3101      	adds	r1, #1
 800b1f8:	4402      	add	r2, r0
 800b1fa:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800b1fc:	458c      	cmp	ip, r1
 800b1fe:	4403      	add	r3, r0
 800b200:	d1de      	bne.n	800b1c0 <ai_conv2d_stripe_f32.constprop.0+0x1cc>
 800b202:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b204:	ece2 7a01 	vstmia	r2!, {s15}
 800b208:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b20a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b20c:	4413      	add	r3, r2
 800b20e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b210:	f108 0801 	add.w	r8, r8, #1
 800b214:	4542      	cmp	r2, r8
 800b216:	d8c8      	bhi.n	800b1aa <ai_conv2d_stripe_f32.constprop.0+0x1b6>
 800b218:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b21a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800b21e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b222:	445a      	add	r2, fp
 800b224:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800b226:	69ba      	ldr	r2, [r7, #24]
 800b228:	f10a 0a01 	add.w	sl, sl, #1
 800b22c:	4589      	cmp	r9, r1
 800b22e:	bf88      	it	hi
 800b230:	2200      	movhi	r2, #0
 800b232:	3201      	adds	r2, #1
 800b234:	45d1      	cmp	r9, sl
 800b236:	4415      	add	r5, r2
 800b238:	d1ab      	bne.n	800b192 <ai_conv2d_stripe_f32.constprop.0+0x19e>
 800b23a:	e9d7 e803 	ldrd	lr, r8, [r7, #12]
 800b23e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b240:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b242:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b244:	440a      	add	r2, r1
 800b246:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b248:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 800b24c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b24e:	4411      	add	r1, r2
 800b250:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 800b254:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b256:	eba8 0802 	sub.w	r8, r8, r2
 800b25a:	1a8a      	subs	r2, r1, r2
 800b25c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b25e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b262:	3301      	adds	r3, #1
 800b264:	429a      	cmp	r2, r3
 800b266:	653b      	str	r3, [r7, #80]	@ 0x50
 800b268:	f47f af3c 	bne.w	800b0e4 <ai_conv2d_stripe_f32.constprop.0+0xf0>
 800b26c:	3774      	adds	r7, #116	@ 0x74
 800b26e:	46bd      	mov	sp, r7
 800b270:	ecbd 8b02 	vpop	{d8}
 800b274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b278:	fb98 f1fe 	sdiv	r1, r8, lr
 800b27c:	fb0e 8111 	mls	r1, lr, r1, r8
 800b280:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b282:	ebae 0101 	sub.w	r1, lr, r1
 800b286:	4642      	mov	r2, r8
 800b288:	4644      	mov	r4, r8
 800b28a:	e734      	b.n	800b0f6 <ai_conv2d_stripe_f32.constprop.0+0x102>
 800b28c:	00000000 	.word	0x00000000
 800b290:	fb0e f102 	mul.w	r1, lr, r2
 800b294:	2901      	cmp	r1, #1
 800b296:	f47f aecf 	bne.w	800b038 <ai_conv2d_stripe_f32.constprop.0+0x44>
 800b29a:	1ac1      	subs	r1, r0, r3
 800b29c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800b2a0:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800b2a2:	00b1      	lsls	r1, r6, #2
 800b2a4:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b2a6:	fb01 f100 	mul.w	r1, r1, r0
 800b2aa:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800b2ac:	eb0c 0203 	add.w	r2, ip, r3
 800b2b0:	fb01 0102 	mla	r1, r1, r2, r0
 800b2b4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b2b6:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b2b8:	f102 4278 	add.w	r2, r2, #4160749568	@ 0xf8000000
 800b2bc:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800b2c0:	f080 8269 	bcs.w	800b796 <ai_conv2d_stripe_f32.constprop.0+0x7a2>
 800b2c4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800b2c8:	2a00      	cmp	r2, #0
 800b2ca:	d0cf      	beq.n	800b26c <ai_conv2d_stripe_f32.constprop.0+0x278>
 800b2cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b2d0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800b2d4:	ed1f 6a13 	vldr	s12, [pc, #-76]	@ 800b28c <ai_conv2d_stripe_f32.constprop.0+0x298>
 800b2d8:	fb05 f202 	mul.w	r2, r5, r2
 800b2dc:	fb00 f303 	mul.w	r3, r0, r3
 800b2e0:	fb06 f202 	mul.w	r2, r6, r2
 800b2e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2e6:	0093      	lsls	r3, r2, #2
 800b2e8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b2ec:	fb03 f306 	mul.w	r3, r3, r6
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b2f8:	fb03 f306 	mul.w	r3, r3, r6
 800b2fc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b300:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b302:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b30a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b30c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b30e:	2300      	movs	r3, #0
 800b310:	653b      	str	r3, [r7, #80]	@ 0x50
 800b312:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b314:	2b00      	cmp	r3, #0
 800b316:	f000 8106 	beq.w	800b526 <ai_conv2d_stripe_f32.constprop.0+0x532>
 800b31a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b31c:	ecf3 6a01 	vldmia	r3!, {s13}
 800b320:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b326:	2b00      	cmp	r3, #0
 800b328:	f000 80ea 	beq.w	800b500 <ai_conv2d_stripe_f32.constprop.0+0x50c>
 800b32c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b330:	f8d7 90c8 	ldr.w	r9, [r7, #200]	@ 0xc8
 800b334:	425d      	negs	r5, r3
 800b336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b338:	657b      	str	r3, [r7, #84]	@ 0x54
 800b33a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b33c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b33e:	f04f 0b00 	mov.w	fp, #0
 800b342:	f1b9 0f00 	cmp.w	r9, #0
 800b346:	f2c0 8221 	blt.w	800b78c <ai_conv2d_stripe_f32.constprop.0+0x798>
 800b34a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b34c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b34e:	2300      	movs	r3, #0
 800b350:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800b352:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 800b354:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 800b358:	fb02 0c06 	mla	ip, r2, r6, r0
 800b35c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800b360:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800b364:	4428      	add	r0, r5
 800b366:	42a0      	cmp	r0, r4
 800b368:	bf94      	ite	ls
 800b36a:	ebc3 0300 	rsbls	r3, r3, r0
 800b36e:	ebc3 0304 	rsbhi	r3, r3, r4
 800b372:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800b376:	1ac4      	subs	r4, r0, r3
 800b378:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800b37c:	1ac0      	subs	r0, r0, r3
 800b37e:	fb02 f303 	mul.w	r3, r2, r3
 800b382:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b384:	2a00      	cmp	r2, #0
 800b386:	eeb0 7a66 	vmov.f32	s14, s13
 800b38a:	f340 80a5 	ble.w	800b4d8 <ai_conv2d_stripe_f32.constprop.0+0x4e4>
 800b38e:	fb06 f204 	mul.w	r2, r6, r4
 800b392:	637a      	str	r2, [r7, #52]	@ 0x34
 800b394:	fb06 f200 	mul.w	r2, r6, r0
 800b398:	f023 060f 	bic.w	r6, r3, #15
 800b39c:	1e70      	subs	r0, r6, #1
 800b39e:	0900      	lsrs	r0, r0, #4
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	633a      	str	r2, [r7, #48]	@ 0x30
 800b3a4:	0102      	lsls	r2, r0, #4
 800b3a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b3a8:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800b3ac:	2400      	movs	r4, #0
 800b3ae:	4662      	mov	r2, ip
 800b3b0:	2e00      	cmp	r6, #0
 800b3b2:	bfd8      	it	le
 800b3b4:	2000      	movle	r0, #0
 800b3b6:	dd72      	ble.n	800b49e <ai_conv2d_stripe_f32.constprop.0+0x4aa>
 800b3b8:	f101 0c40 	add.w	ip, r1, #64	@ 0x40
 800b3bc:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 800b3c0:	f04f 0800 	mov.w	r8, #0
 800b3c4:	ed50 4a0f 	vldr	s9, [r0, #-60]	@ 0xffffffc4
 800b3c8:	ed5c 7a0f 	vldr	s15, [ip, #-60]	@ 0xffffffc4
 800b3cc:	ed1c 5a10 	vldr	s10, [ip, #-64]	@ 0xffffffc0
 800b3d0:	ed50 5a10 	vldr	s11, [r0, #-64]	@ 0xffffffc0
 800b3d4:	ed5c 3a0d 	vldr	s7, [ip, #-52]	@ 0xffffffcc
 800b3d8:	ed1c 4a0c 	vldr	s8, [ip, #-48]	@ 0xffffffd0
 800b3dc:	ed1c 2a0a 	vldr	s4, [ip, #-40]	@ 0xffffffd8
 800b3e0:	ed50 2a0a 	vldr	s5, [r0, #-40]	@ 0xffffffd8
 800b3e4:	ed1c 3a09 	vldr	s6, [ip, #-36]	@ 0xffffffdc
 800b3e8:	ed1c 0a06 	vldr	s0, [ip, #-24]	@ 0xffffffe8
 800b3ec:	ed50 0a06 	vldr	s1, [r0, #-24]	@ 0xffffffe8
 800b3f0:	ed1c 1a05 	vldr	s2, [ip, #-20]	@ 0xffffffec
 800b3f4:	ed50 1a05 	vldr	s3, [r0, #-20]	@ 0xffffffec
 800b3f8:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800b3fc:	ed5c 4a0e 	vldr	s9, [ip, #-56]	@ 0xffffffc8
 800b400:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b404:	f108 0810 	add.w	r8, r8, #16
 800b408:	45b0      	cmp	r8, r6
 800b40a:	ed10 5a0e 	vldr	s10, [r0, #-56]	@ 0xffffffc8
 800b40e:	ed50 5a0d 	vldr	s11, [r0, #-52]	@ 0xffffffcc
 800b412:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b416:	f10c 0c40 	add.w	ip, ip, #64	@ 0x40
 800b41a:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800b41e:	ed50 4a1c 	vldr	s9, [r0, #-112]	@ 0xffffff90
 800b422:	ed1c 5a1b 	vldr	s10, [ip, #-108]	@ 0xffffff94
 800b426:	eee3 7aa5 	vfma.f32	s15, s7, s11
 800b42a:	ed50 5a1b 	vldr	s11, [r0, #-108]	@ 0xffffff94
 800b42e:	ed50 3a19 	vldr	s7, [r0, #-100]	@ 0xffffff9c
 800b432:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b436:	ed1c 4a18 	vldr	s8, [ip, #-96]	@ 0xffffffa0
 800b43a:	ed50 4a18 	vldr	s9, [r0, #-96]	@ 0xffffffa0
 800b43e:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b442:	ed1c 5a17 	vldr	s10, [ip, #-92]	@ 0xffffffa4
 800b446:	ed50 5a17 	vldr	s11, [r0, #-92]	@ 0xffffffa4
 800b44a:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b44e:	ed1c 2a14 	vldr	s4, [ip, #-80]	@ 0xffffffb0
 800b452:	ed50 2a14 	vldr	s5, [r0, #-80]	@ 0xffffffb0
 800b456:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b45a:	ed1c 3a13 	vldr	s6, [ip, #-76]	@ 0xffffffb4
 800b45e:	ed50 3a13 	vldr	s7, [r0, #-76]	@ 0xffffffb4
 800b462:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b466:	ed1c 4a12 	vldr	s8, [ip, #-72]	@ 0xffffffb8
 800b46a:	ed50 4a12 	vldr	s9, [r0, #-72]	@ 0xffffffb8
 800b46e:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b472:	ed1c 5a11 	vldr	s10, [ip, #-68]	@ 0xffffffbc
 800b476:	ed50 5a11 	vldr	s11, [r0, #-68]	@ 0xffffffbc
 800b47a:	eee0 7a20 	vfma.f32	s15, s0, s1
 800b47e:	eee1 7a21 	vfma.f32	s15, s2, s3
 800b482:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b486:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b48a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b48e:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b492:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b496:	db95      	blt.n	800b3c4 <ai_conv2d_stripe_f32.constprop.0+0x3d0>
 800b498:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b49a:	4471      	add	r1, lr
 800b49c:	4472      	add	r2, lr
 800b49e:	4283      	cmp	r3, r0
 800b4a0:	dd11      	ble.n	800b4c6 <ai_conv2d_stripe_f32.constprop.0+0x4d2>
 800b4a2:	4684      	mov	ip, r0
 800b4a4:	468a      	mov	sl, r1
 800b4a6:	4690      	mov	r8, r2
 800b4a8:	ecf8 5a01 	vldmia	r8!, {s11}
 800b4ac:	ecfa 7a01 	vldmia	sl!, {s15}
 800b4b0:	f10c 0c01 	add.w	ip, ip, #1
 800b4b4:	4563      	cmp	r3, ip
 800b4b6:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b4ba:	d1f5      	bne.n	800b4a8 <ai_conv2d_stripe_f32.constprop.0+0x4b4>
 800b4bc:	1a18      	subs	r0, r3, r0
 800b4be:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800b4c2:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800b4c6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b4c8:	4401      	add	r1, r0
 800b4ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b4cc:	4402      	add	r2, r0
 800b4ce:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800b4d0:	3401      	adds	r4, #1
 800b4d2:	42a0      	cmp	r0, r4
 800b4d4:	f47f af6c 	bne.w	800b3b0 <ai_conv2d_stripe_f32.constprop.0+0x3bc>
 800b4d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b4de:	ed83 7a00 	vstr	s14, [r3]
 800b4e2:	440b      	add	r3, r1
 800b4e4:	4491      	add	r9, r2
 800b4e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4e8:	1aad      	subs	r5, r5, r2
 800b4ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4ee:	4413      	add	r3, r2
 800b4f0:	657b      	str	r3, [r7, #84]	@ 0x54
 800b4f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b4f6:	f10b 0b01 	add.w	fp, fp, #1
 800b4fa:	455b      	cmp	r3, fp
 800b4fc:	f47f af21 	bne.w	800b342 <ai_conv2d_stripe_f32.constprop.0+0x34e>
 800b500:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b502:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b504:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b506:	440a      	add	r2, r1
 800b508:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b50a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b50c:	3204      	adds	r2, #4
 800b50e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b510:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800b514:	3301      	adds	r3, #1
 800b516:	429a      	cmp	r2, r3
 800b518:	653b      	str	r3, [r7, #80]	@ 0x50
 800b51a:	f43f aea7 	beq.w	800b26c <ai_conv2d_stripe_f32.constprop.0+0x278>
 800b51e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b520:	2b00      	cmp	r3, #0
 800b522:	f47f aefa 	bne.w	800b31a <ai_conv2d_stripe_f32.constprop.0+0x326>
 800b526:	eef0 6a46 	vmov.f32	s13, s12
 800b52a:	e6fa      	b.n	800b322 <ai_conv2d_stripe_f32.constprop.0+0x32e>
 800b52c:	fb0e f102 	mul.w	r1, lr, r2
 800b530:	2901      	cmp	r1, #1
 800b532:	f47f ad81 	bne.w	800b038 <ai_conv2d_stripe_f32.constprop.0+0x44>
 800b536:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b53a:	2a00      	cmp	r2, #0
 800b53c:	f43f ae96 	beq.w	800b26c <ai_conv2d_stripe_f32.constprop.0+0x278>
 800b540:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800b544:	ed5f 3aaf 	vldr	s7, [pc, #-700]	@ 800b28c <ai_conv2d_stripe_f32.constprop.0+0x298>
 800b548:	f8c7 60a0 	str.w	r6, [r7, #160]	@ 0xa0
 800b54c:	eb0c 0203 	add.w	r2, ip, r3
 800b550:	fb01 f202 	mul.w	r2, r1, r2
 800b554:	61fa      	str	r2, [r7, #28]
 800b556:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800b55a:	1a1a      	subs	r2, r3, r0
 800b55c:	442a      	add	r2, r5
 800b55e:	fb01 f202 	mul.w	r2, r1, r2
 800b562:	1ac1      	subs	r1, r0, r3
 800b564:	64f9      	str	r1, [r7, #76]	@ 0x4c
 800b566:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800b56a:	fb03 f301 	mul.w	r3, r3, r1
 800b56e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b570:	0093      	lsls	r3, r2, #2
 800b572:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b574:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b57c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b580:	f1c3 0b00 	rsb	fp, r3, #0
 800b584:	00f3      	lsls	r3, r6, #3
 800b586:	623b      	str	r3, [r7, #32]
 800b588:	2300      	movs	r3, #0
 800b58a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b58c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b590:	fbb3 f3f6 	udiv	r3, r3, r6
 800b594:	61bb      	str	r3, [r7, #24]
 800b596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 800b5a0:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800b5a4:	ea4f 1a06 	mov.w	sl, r6, lsl #4
 800b5a8:	f2c0 80ea 	blt.w	800b780 <ai_conv2d_stripe_f32.constprop.0+0x78c>
 800b5ac:	2500      	movs	r5, #0
 800b5ae:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b5b0:	462b      	mov	r3, r5
 800b5b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b5b6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 800b5ba:	69fc      	ldr	r4, [r7, #28]
 800b5bc:	6e7e      	ldr	r6, [r7, #100]	@ 0x64
 800b5be:	445a      	add	r2, fp
 800b5c0:	4282      	cmp	r2, r0
 800b5c2:	bf28      	it	cs
 800b5c4:	4602      	movcs	r2, r0
 800b5c6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 800b5ca:	1ad2      	subs	r2, r2, r3
 800b5cc:	1904      	adds	r4, r0, r4
 800b5ce:	2e00      	cmp	r6, #0
 800b5d0:	f000 822b 	beq.w	800ba2a <ai_conv2d_stripe_f32.constprop.0+0xa36>
 800b5d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5d6:	647e      	str	r6, [r7, #68]	@ 0x44
 800b5d8:	429e      	cmp	r6, r3
 800b5da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b5dc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b5e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b5e4:	eba3 0002 	sub.w	r0, r3, r2
 800b5e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b5ec:	fb03 f000 	mul.w	r0, r3, r0
 800b5f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b5f4:	bf14      	ite	ne
 800b5f6:	eeb0 3a62 	vmovne.f32	s6, s5
 800b5fa:	eeb0 3a63 	vmoveq.f32	s6, s7
 800b5fe:	1a9b      	subs	r3, r3, r2
 800b600:	442c      	add	r4, r5
 800b602:	6d7d      	ldr	r5, [r7, #84]	@ 0x54
 800b604:	fb08 5e04 	mla	lr, r8, r4, r5
 800b608:	eb0e 0408 	add.w	r4, lr, r8
 800b60c:	45a6      	cmp	lr, r4
 800b60e:	62bc      	str	r4, [r7, #40]	@ 0x28
 800b610:	f080 809d 	bcs.w	800b74e <ai_conv2d_stripe_f32.constprop.0+0x75a>
 800b614:	0080      	lsls	r0, r0, #2
 800b616:	6378      	str	r0, [r7, #52]	@ 0x34
 800b618:	e9d7 0428 	ldrd	r0, r4, [r7, #160]	@ 0xa0
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b620:	42a0      	cmp	r0, r4
 800b622:	f022 0303 	bic.w	r3, r2, #3
 800b626:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b628:	f200 8091 	bhi.w	800b74e <ai_conv2d_stripe_f32.constprop.0+0x75a>
 800b62c:	1e58      	subs	r0, r3, #1
 800b62e:	0880      	lsrs	r0, r0, #2
 800b630:	1c43      	adds	r3, r0, #1
 800b632:	fb00 a00a 	mla	r0, r0, sl, sl
 800b636:	6138      	str	r0, [r7, #16]
 800b638:	f04f 0900 	mov.w	r9, #0
 800b63c:	0118      	lsls	r0, r3, #4
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	6178      	str	r0, [r7, #20]
 800b642:	60fb      	str	r3, [r7, #12]
 800b644:	f8c7 903c 	str.w	r9, [r7, #60]	@ 0x3c
 800b648:	f8c7 b008 	str.w	fp, [r7, #8]
 800b64c:	69bb      	ldr	r3, [r7, #24]
 800b64e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b650:	4499      	add	r9, r3
 800b652:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b654:	181c      	adds	r4, r3, r0
 800b656:	65bc      	str	r4, [r7, #88]	@ 0x58
 800b658:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 800b65a:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800b65e:	1820      	adds	r0, r4, r0
 800b660:	627b      	str	r3, [r7, #36]	@ 0x24
 800b662:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800b666:	6438      	str	r0, [r7, #64]	@ 0x40
 800b668:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b66a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b66c:	ecb3 7a01 	vldmia	r3!, {s14}
 800b670:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b672:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b674:	2b00      	cmp	r3, #0
 800b676:	ee27 7a03 	vmul.f32	s14, s14, s6
 800b67a:	dd57      	ble.n	800b72c <ai_conv2d_stripe_f32.constprop.0+0x738>
 800b67c:	4675      	mov	r5, lr
 800b67e:	f04f 0b00 	mov.w	fp, #0
 800b682:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b684:	2b00      	cmp	r3, #0
 800b686:	bfd8      	it	le
 800b688:	2400      	movle	r4, #0
 800b68a:	dd32      	ble.n	800b6f2 <ai_conv2d_stripe_f32.constprop.0+0x6fe>
 800b68c:	6a38      	ldr	r0, [r7, #32]
 800b68e:	607a      	str	r2, [r7, #4]
 800b690:	182c      	adds	r4, r5, r0
 800b692:	f101 0310 	add.w	r3, r1, #16
 800b696:	4628      	mov	r0, r5
 800b698:	2600      	movs	r6, #0
 800b69a:	eb00 0c08 	add.w	ip, r0, r8
 800b69e:	ed13 4a03 	vldr	s8, [r3, #-12]
 800b6a2:	eddc 7a00 	vldr	s15, [ip]
 800b6a6:	ed53 4a04 	vldr	s9, [r3, #-16]
 800b6aa:	ed90 5a00 	vldr	s10, [r0]
 800b6ae:	edd4 6a00 	vldr	s13, [r4]
 800b6b2:	ed53 5a02 	vldr	s11, [r3, #-8]
 800b6b6:	ed13 6a01 	vldr	s12, [r3, #-4]
 800b6ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b6bc:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b6c0:	eb04 0c08 	add.w	ip, r4, r8
 800b6c4:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b6c8:	3604      	adds	r6, #4
 800b6ca:	4296      	cmp	r6, r2
 800b6cc:	f103 0310 	add.w	r3, r3, #16
 800b6d0:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800b6d4:	4450      	add	r0, sl
 800b6d6:	4454      	add	r4, sl
 800b6d8:	eddc 6a00 	vldr	s13, [ip]
 800b6dc:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b6e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b6e4:	dbd9      	blt.n	800b69a <ai_conv2d_stripe_f32.constprop.0+0x6a6>
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	68fc      	ldr	r4, [r7, #12]
 800b6ec:	441d      	add	r5, r3
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	4419      	add	r1, r3
 800b6f2:	42a2      	cmp	r2, r4
 800b6f4:	dd11      	ble.n	800b71a <ai_conv2d_stripe_f32.constprop.0+0x726>
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	462b      	mov	r3, r5
 800b6fa:	460e      	mov	r6, r1
 800b6fc:	edd3 7a00 	vldr	s15, [r3]
 800b700:	ecf6 6a01 	vldmia	r6!, {s13}
 800b704:	3001      	adds	r0, #1
 800b706:	4290      	cmp	r0, r2
 800b708:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b70c:	4443      	add	r3, r8
 800b70e:	d1f5      	bne.n	800b6fc <ai_conv2d_stripe_f32.constprop.0+0x708>
 800b710:	1b14      	subs	r4, r2, r4
 800b712:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b716:	fb04 5508 	mla	r5, r4, r8, r5
 800b71a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b71c:	441d      	add	r5, r3
 800b71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b720:	4419      	add	r1, r3
 800b722:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b724:	f10b 0b01 	add.w	fp, fp, #1
 800b728:	459b      	cmp	fp, r3
 800b72a:	d1aa      	bne.n	800b682 <ai_conv2d_stripe_f32.constprop.0+0x68e>
 800b72c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b72e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b730:	eca3 7a01 	vstmia	r3!, {s14}
 800b734:	643b      	str	r3, [r7, #64]	@ 0x40
 800b736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b738:	4419      	add	r1, r3
 800b73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b73c:	4283      	cmp	r3, r0
 800b73e:	d194      	bne.n	800b66a <ai_conv2d_stripe_f32.constprop.0+0x676>
 800b740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b742:	f10e 0e04 	add.w	lr, lr, #4
 800b746:	459e      	cmp	lr, r3
 800b748:	d380      	bcc.n	800b64c <ai_conv2d_stripe_f32.constprop.0+0x658>
 800b74a:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800b74e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b750:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b752:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b754:	440a      	add	r2, r1
 800b756:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b758:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800b75a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b75e:	440a      	add	r2, r1
 800b760:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800b764:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b768:	3301      	adds	r3, #1
 800b76a:	429a      	cmp	r2, r3
 800b76c:	653b      	str	r3, [r7, #80]	@ 0x50
 800b76e:	ebab 0b01 	sub.w	fp, fp, r1
 800b772:	f43f ad7b 	beq.w	800b26c <ai_conv2d_stripe_f32.constprop.0+0x278>
 800b776:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	f6bf af16 	bge.w	800b5ac <ai_conv2d_stripe_f32.constprop.0+0x5b8>
 800b780:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b782:	465b      	mov	r3, fp
 800b784:	eb02 010b 	add.w	r1, r2, fp
 800b788:	465d      	mov	r5, fp
 800b78a:	e712      	b.n	800b5b2 <ai_conv2d_stripe_f32.constprop.0+0x5be>
 800b78c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b78e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b790:	462b      	mov	r3, r5
 800b792:	442a      	add	r2, r5
 800b794:	e5dc      	b.n	800b350 <ai_conv2d_stripe_f32.constprop.0+0x35c>
 800b796:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b79a:	fb02 f505 	mul.w	r5, r2, r5
 800b79e:	fb06 f205 	mul.w	r2, r6, r5
 800b7a2:	0095      	lsls	r5, r2, #2
 800b7a4:	637a      	str	r2, [r7, #52]	@ 0x34
 800b7a6:	1dea      	adds	r2, r5, #7
 800b7a8:	f022 0207 	bic.w	r2, r2, #7
 800b7ac:	4669      	mov	r1, sp
 800b7ae:	ebad 0d02 	sub.w	sp, sp, r2
 800b7b2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800b7b6:	ee08 1a90 	vmov	s17, r1
 800b7ba:	46e9      	mov	r9, sp
 800b7bc:	2a00      	cmp	r2, #0
 800b7be:	f000 8130 	beq.w	800ba22 <ai_conv2d_stripe_f32.constprop.0+0xa2e>
 800b7c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b7c6:	ed9f 8aa6 	vldr	s16, [pc, #664]	@ 800ba60 <ai_conv2d_stripe_f32.constprop.0+0xa6c>
 800b7ca:	f8c7 60a0 	str.w	r6, [r7, #160]	@ 0xa0
 800b7ce:	fb02 f303 	mul.w	r3, r2, r3
 800b7d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b7d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b7d8:	fb03 f306 	mul.w	r3, r3, r6
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	623b      	str	r3, [r7, #32]
 800b7e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b7e4:	fb03 f306 	mul.w	r3, r3, r6
 800b7e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b7f2:	009b      	lsls	r3, r3, #2
 800b7f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b7f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b7f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	46ca      	mov	sl, r9
 800b7fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b800:	46a9      	mov	r9, r5
 800b802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b804:	b123      	cbz	r3, 800b810 <ai_conv2d_stripe_f32.constprop.0+0x81c>
 800b806:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b808:	464a      	mov	r2, r9
 800b80a:	4650      	mov	r0, sl
 800b80c:	f002 fc45 	bl	800e09a <memcpy>
 800b810:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b812:	2b00      	cmp	r3, #0
 800b814:	f000 8120 	beq.w	800ba58 <ai_conv2d_stripe_f32.constprop.0+0xa64>
 800b818:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b81a:	ecf3 6a01 	vldmia	r3!, {s13}
 800b81e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b820:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b824:	2b00      	cmp	r3, #0
 800b826:	f000 80ee 	beq.w	800ba06 <ai_conv2d_stripe_f32.constprop.0+0xa12>
 800b82a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b82e:	f8c7 901c 	str.w	r9, [r7, #28]
 800b832:	425d      	negs	r5, r3
 800b834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b836:	653b      	str	r3, [r7, #80]	@ 0x50
 800b838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b83a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b83c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b840:	657b      	str	r3, [r7, #84]	@ 0x54
 800b842:	2300      	movs	r3, #0
 800b844:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b848:	2b00      	cmp	r3, #0
 800b84a:	f2c0 8100 	blt.w	800ba4e <ai_conv2d_stripe_f32.constprop.0+0xa5a>
 800b84e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b850:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b852:	2300      	movs	r3, #0
 800b854:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800b858:	f8d7 60b0 	ldr.w	r6, [r7, #176]	@ 0xb0
 800b85c:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 800b85e:	4428      	add	r0, r5
 800b860:	42b0      	cmp	r0, r6
 800b862:	bf94      	ite	ls
 800b864:	ebc3 0300 	rsbls	r3, r3, r0
 800b868:	ebc3 0306 	rsbhi	r3, r3, r6
 800b86c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800b870:	eba0 0c03 	sub.w	ip, r0, r3
 800b874:	1af0      	subs	r0, r6, r3
 800b876:	f8d7 60a0 	ldr.w	r6, [r7, #160]	@ 0xa0
 800b87a:	fb06 f303 	mul.w	r3, r6, r3
 800b87e:	6dfe      	ldr	r6, [r7, #92]	@ 0x5c
 800b880:	2e00      	cmp	r6, #0
 800b882:	fb02 a204 	mla	r2, r2, r4, sl
 800b886:	eeb0 7a66 	vmov.f32	s14, s13
 800b88a:	f340 80a2 	ble.w	800b9d2 <ai_conv2d_stripe_f32.constprop.0+0x9de>
 800b88e:	fb04 f000 	mul.w	r0, r4, r0
 800b892:	f023 060f 	bic.w	r6, r3, #15
 800b896:	6338      	str	r0, [r7, #48]	@ 0x30
 800b898:	1e70      	subs	r0, r6, #1
 800b89a:	0900      	lsrs	r0, r0, #4
 800b89c:	3001      	adds	r0, #1
 800b89e:	ea4f 1880 	mov.w	r8, r0, lsl #6
 800b8a2:	0100      	lsls	r0, r0, #4
 800b8a4:	fb04 fc0c 	mul.w	ip, r4, ip
 800b8a8:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b8aa:	2400      	movs	r4, #0
 800b8ac:	2e00      	cmp	r6, #0
 800b8ae:	bfd8      	it	le
 800b8b0:	2000      	movle	r0, #0
 800b8b2:	dd72      	ble.n	800b99a <ai_conv2d_stripe_f32.constprop.0+0x9a6>
 800b8b4:	f101 0e40 	add.w	lr, r1, #64	@ 0x40
 800b8b8:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 800b8bc:	f04f 0900 	mov.w	r9, #0
 800b8c0:	ed10 5a0f 	vldr	s10, [r0, #-60]	@ 0xffffffc4
 800b8c4:	ed5e 7a0f 	vldr	s15, [lr, #-60]	@ 0xffffffc4
 800b8c8:	ed5e 5a10 	vldr	s11, [lr, #-64]	@ 0xffffffc0
 800b8cc:	ed10 6a10 	vldr	s12, [r0, #-64]	@ 0xffffffc0
 800b8d0:	ed1e 4a0d 	vldr	s8, [lr, #-52]	@ 0xffffffcc
 800b8d4:	ed5e 4a0c 	vldr	s9, [lr, #-48]	@ 0xffffffd0
 800b8d8:	ed5e 2a0a 	vldr	s5, [lr, #-40]	@ 0xffffffd8
 800b8dc:	ed10 3a0a 	vldr	s6, [r0, #-40]	@ 0xffffffd8
 800b8e0:	ed5e 3a09 	vldr	s7, [lr, #-36]	@ 0xffffffdc
 800b8e4:	ed5e 0a06 	vldr	s1, [lr, #-24]	@ 0xffffffe8
 800b8e8:	ed10 1a06 	vldr	s2, [r0, #-24]	@ 0xffffffe8
 800b8ec:	ed5e 1a05 	vldr	s3, [lr, #-20]	@ 0xffffffec
 800b8f0:	ed10 2a05 	vldr	s4, [r0, #-20]	@ 0xffffffec
 800b8f4:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b8f8:	ed1e 5a0e 	vldr	s10, [lr, #-56]	@ 0xffffffc8
 800b8fc:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b900:	f109 0910 	add.w	r9, r9, #16
 800b904:	45b1      	cmp	r9, r6
 800b906:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 800b90a:	ed10 6a0d 	vldr	s12, [r0, #-52]	@ 0xffffffcc
 800b90e:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b912:	f10e 0e40 	add.w	lr, lr, #64	@ 0x40
 800b916:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800b91a:	ed10 5a1c 	vldr	s10, [r0, #-112]	@ 0xffffff90
 800b91e:	ed5e 5a1b 	vldr	s11, [lr, #-108]	@ 0xffffff94
 800b922:	eee4 7a06 	vfma.f32	s15, s8, s12
 800b926:	ed10 6a1b 	vldr	s12, [r0, #-108]	@ 0xffffff94
 800b92a:	ed10 4a19 	vldr	s8, [r0, #-100]	@ 0xffffff9c
 800b92e:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b932:	ed5e 4a18 	vldr	s9, [lr, #-96]	@ 0xffffffa0
 800b936:	ed10 5a18 	vldr	s10, [r0, #-96]	@ 0xffffffa0
 800b93a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b93e:	ed5e 5a17 	vldr	s11, [lr, #-92]	@ 0xffffffa4
 800b942:	ed10 6a17 	vldr	s12, [r0, #-92]	@ 0xffffffa4
 800b946:	eee2 7a83 	vfma.f32	s15, s5, s6
 800b94a:	ed5e 2a14 	vldr	s5, [lr, #-80]	@ 0xffffffb0
 800b94e:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 800b952:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b956:	ed5e 3a13 	vldr	s7, [lr, #-76]	@ 0xffffffb4
 800b95a:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 800b95e:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b962:	ed5e 4a12 	vldr	s9, [lr, #-72]	@ 0xffffffb8
 800b966:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 800b96a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b96e:	ed5e 5a11 	vldr	s11, [lr, #-68]	@ 0xffffffbc
 800b972:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 800b976:	eee0 7a81 	vfma.f32	s15, s1, s2
 800b97a:	eee1 7a82 	vfma.f32	s15, s3, s4
 800b97e:	eee2 7a83 	vfma.f32	s15, s5, s6
 800b982:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b986:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b98a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b98e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b992:	db95      	blt.n	800b8c0 <ai_conv2d_stripe_f32.constprop.0+0x8cc>
 800b994:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b996:	4441      	add	r1, r8
 800b998:	4442      	add	r2, r8
 800b99a:	4283      	cmp	r3, r0
 800b99c:	dd11      	ble.n	800b9c2 <ai_conv2d_stripe_f32.constprop.0+0x9ce>
 800b99e:	4686      	mov	lr, r0
 800b9a0:	468b      	mov	fp, r1
 800b9a2:	4691      	mov	r9, r2
 800b9a4:	ecb9 6a01 	vldmia	r9!, {s12}
 800b9a8:	ecfb 7a01 	vldmia	fp!, {s15}
 800b9ac:	f10e 0e01 	add.w	lr, lr, #1
 800b9b0:	4573      	cmp	r3, lr
 800b9b2:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b9b6:	d1f5      	bne.n	800b9a4 <ai_conv2d_stripe_f32.constprop.0+0x9b0>
 800b9b8:	1a18      	subs	r0, r3, r0
 800b9ba:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800b9be:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800b9c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b9c4:	4402      	add	r2, r0
 800b9c6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800b9c8:	3401      	adds	r4, #1
 800b9ca:	42a0      	cmp	r0, r4
 800b9cc:	4461      	add	r1, ip
 800b9ce:	f47f af6d 	bne.w	800b8ac <ai_conv2d_stripe_f32.constprop.0+0x8b8>
 800b9d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b9d4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800b9d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9da:	ed82 7a00 	vstr	s14, [r2]
 800b9de:	4401      	add	r1, r0
 800b9e0:	6579      	str	r1, [r7, #84]	@ 0x54
 800b9e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9e4:	440a      	add	r2, r1
 800b9e6:	643a      	str	r2, [r7, #64]	@ 0x40
 800b9e8:	6a39      	ldr	r1, [r7, #32]
 800b9ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b9ec:	440a      	add	r2, r1
 800b9ee:	653a      	str	r2, [r7, #80]	@ 0x50
 800b9f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9fa:	eba5 0500 	sub.w	r5, r5, r0
 800b9fe:	f47f af22 	bne.w	800b846 <ai_conv2d_stripe_f32.constprop.0+0x852>
 800ba02:	f8d7 901c 	ldr.w	r9, [r7, #28]
 800ba06:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ba08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba0a:	444a      	add	r2, r9
 800ba0c:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ba0e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ba10:	3204      	adds	r2, #4
 800ba12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ba14:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800ba18:	3301      	adds	r3, #1
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba1e:	f47f aef0 	bne.w	800b802 <ai_conv2d_stripe_f32.constprop.0+0x80e>
 800ba22:	ee18 3a90 	vmov	r3, s17
 800ba26:	469d      	mov	sp, r3
 800ba28:	e420      	b.n	800b26c <ai_conv2d_stripe_f32.constprop.0+0x278>
 800ba2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba2c:	6efe      	ldr	r6, [r7, #108]	@ 0x6c
 800ba2e:	647e      	str	r6, [r7, #68]	@ 0x44
 800ba30:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800ba34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ba38:	1a98      	subs	r0, r3, r2
 800ba3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ba3e:	fb03 f000 	mul.w	r0, r3, r0
 800ba42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ba46:	eeb0 3a63 	vmov.f32	s6, s7
 800ba4a:	1a9b      	subs	r3, r3, r2
 800ba4c:	e5d8      	b.n	800b600 <ai_conv2d_stripe_f32.constprop.0+0x60c>
 800ba4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba50:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ba52:	462b      	mov	r3, r5
 800ba54:	442a      	add	r2, r5
 800ba56:	e6fd      	b.n	800b854 <ai_conv2d_stripe_f32.constprop.0+0x860>
 800ba58:	eef0 6a48 	vmov.f32	s13, s16
 800ba5c:	e6e0      	b.n	800b820 <ai_conv2d_stripe_f32.constprop.0+0x82c>
 800ba5e:	bf00      	nop
 800ba60:	00000000 	.word	0x00000000

0800ba64 <ai_dict_decompress_f32>:
 800ba64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba68:	9d08      	ldr	r5, [sp, #32]
 800ba6a:	2b04      	cmp	r3, #4
 800ba6c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800ba70:	d00e      	beq.n	800ba90 <ai_dict_decompress_f32+0x2c>
 800ba72:	2b08      	cmp	r3, #8
 800ba74:	d10a      	bne.n	800ba8c <ai_dict_decompress_f32+0x28>
 800ba76:	42a8      	cmp	r0, r5
 800ba78:	d208      	bcs.n	800ba8c <ai_dict_decompress_f32+0x28>
 800ba7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f840 3b04 	str.w	r3, [r0], #4
 800ba88:	4285      	cmp	r5, r0
 800ba8a:	d8f6      	bhi.n	800ba7a <ai_dict_decompress_f32+0x16>
 800ba8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba90:	9b07      	ldr	r3, [sp, #28]
 800ba92:	085e      	lsrs	r6, r3, #1
 800ba94:	f003 0701 	and.w	r7, r3, #1
 800ba98:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800ba9c:	f106 38ff 	add.w	r8, r6, #4294967295
 800baa0:	42a8      	cmp	r0, r5
 800baa2:	d2f3      	bcs.n	800ba8c <ai_dict_decompress_f32+0x28>
 800baa4:	b33e      	cbz	r6, 800baf6 <ai_dict_decompress_f32+0x92>
 800baa6:	f100 0e08 	add.w	lr, r0, #8
 800baaa:	f101 3cff 	add.w	ip, r1, #4294967295
 800baae:	eb01 0408 	add.w	r4, r1, r8
 800bab2:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800bab6:	091b      	lsrs	r3, r3, #4
 800bab8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800babc:	f10e 0e08 	add.w	lr, lr, #8
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f84e 3c10 	str.w	r3, [lr, #-16]
 800bac6:	f89c 3000 	ldrb.w	r3, [ip]
 800baca:	f003 030f 	and.w	r3, r3, #15
 800bace:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bad2:	4564      	cmp	r4, ip
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800bada:	d1ea      	bne.n	800bab2 <ai_dict_decompress_f32+0x4e>
 800badc:	4431      	add	r1, r6
 800bade:	4448      	add	r0, r9
 800bae0:	2f00      	cmp	r7, #0
 800bae2:	d0dd      	beq.n	800baa0 <ai_dict_decompress_f32+0x3c>
 800bae4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bae8:	091b      	lsrs	r3, r3, #4
 800baea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f840 3b04 	str.w	r3, [r0], #4
 800baf4:	e7d4      	b.n	800baa0 <ai_dict_decompress_f32+0x3c>
 800baf6:	2f00      	cmp	r7, #0
 800baf8:	d1f4      	bne.n	800bae4 <ai_dict_decompress_f32+0x80>
 800bafa:	42a8      	cmp	r0, r5
 800bafc:	d3fd      	bcc.n	800bafa <ai_dict_decompress_f32+0x96>
 800bafe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb02:	bf00      	nop

0800bb04 <forward_conv2d>:
 800bb04:	6982      	ldr	r2, [r0, #24]
 800bb06:	8813      	ldrh	r3, [r2, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	f000 8110 	beq.w	800bd2e <forward_conv2d+0x22a>
 800bb0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb12:	ed2d 8b04 	vpush	{d8-d9}
 800bb16:	6852      	ldr	r2, [r2, #4]
 800bb18:	6851      	ldr	r1, [r2, #4]
 800bb1a:	b0a9      	sub	sp, #164	@ 0xa4
 800bb1c:	4604      	mov	r4, r0
 800bb1e:	b101      	cbz	r1, 800bb22 <forward_conv2d+0x1e>
 800bb20:	6809      	ldr	r1, [r1, #0]
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	f000 8151 	beq.w	800bdca <forward_conv2d+0x2c6>
 800bb28:	6915      	ldr	r5, [r2, #16]
 800bb2a:	b105      	cbz	r5, 800bb2e <forward_conv2d+0x2a>
 800bb2c:	682d      	ldr	r5, [r5, #0]
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	f000 80ff 	beq.w	800bd32 <forward_conv2d+0x22e>
 800bb34:	69d3      	ldr	r3, [r2, #28]
 800bb36:	8b12      	ldrh	r2, [r2, #24]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	f000 8137 	beq.w	800bdac <forward_conv2d+0x2a8>
 800bb3e:	2a01      	cmp	r2, #1
 800bb40:	681e      	ldr	r6, [r3, #0]
 800bb42:	f240 8139 	bls.w	800bdb8 <forward_conv2d+0x2b4>
 800bb46:	685a      	ldr	r2, [r3, #4]
 800bb48:	ee08 2a10 	vmov	s16, r2
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	68ca      	ldr	r2, [r1, #12]
 800bb50:	6989      	ldr	r1, [r1, #24]
 800bb52:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800bb56:	6889      	ldr	r1, [r1, #8]
 800bb58:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800bb5a:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 800bb5e:	69b7      	ldr	r7, [r6, #24]
 800bb60:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800bb64:	f8dc b008 	ldr.w	fp, [ip, #8]
 800bb68:	f8d4 a034 	ldr.w	sl, [r4, #52]	@ 0x34
 800bb6c:	ee09 1a10 	vmov	s18, r1
 800bb70:	6851      	ldr	r1, [r2, #4]
 800bb72:	911b      	str	r1, [sp, #108]	@ 0x6c
 800bb74:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800bb78:	9118      	str	r1, [sp, #96]	@ 0x60
 800bb7a:	68d1      	ldr	r1, [r2, #12]
 800bb7c:	6892      	ldr	r2, [r2, #8]
 800bb7e:	9223      	str	r2, [sp, #140]	@ 0x8c
 800bb80:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800bb82:	9224      	str	r2, [sp, #144]	@ 0x90
 800bb84:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800bb86:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bb88:	6802      	ldr	r2, [r0, #0]
 800bb8a:	9211      	str	r2, [sp, #68]	@ 0x44
 800bb8c:	6842      	ldr	r2, [r0, #4]
 800bb8e:	921e      	str	r2, [sp, #120]	@ 0x78
 800bb90:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800bb92:	9210      	str	r2, [sp, #64]	@ 0x40
 800bb94:	f8de 2008 	ldr.w	r2, [lr, #8]
 800bb98:	9219      	str	r2, [sp, #100]	@ 0x64
 800bb9a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800bb9e:	9122      	str	r1, [sp, #136]	@ 0x88
 800bba0:	921a      	str	r2, [sp, #104]	@ 0x68
 800bba2:	69e2      	ldr	r2, [r4, #28]
 800bba4:	9225      	str	r2, [sp, #148]	@ 0x94
 800bba6:	68ba      	ldr	r2, [r7, #8]
 800bba8:	ee08 2a90 	vmov	s17, r2
 800bbac:	ee18 2a10 	vmov	r2, s16
 800bbb0:	b11a      	cbz	r2, 800bbba <forward_conv2d+0xb6>
 800bbb2:	6992      	ldr	r2, [r2, #24]
 800bbb4:	6892      	ldr	r2, [r2, #8]
 800bbb6:	ee08 2a10 	vmov	s16, r2
 800bbba:	69aa      	ldr	r2, [r5, #24]
 800bbbc:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800bbc0:	6892      	ldr	r2, [r2, #8]
 800bbc2:	9216      	str	r2, [sp, #88]	@ 0x58
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f000 80de 	beq.w	800bd86 <forward_conv2d+0x282>
 800bbca:	699a      	ldr	r2, [r3, #24]
 800bbcc:	2a00      	cmp	r2, #0
 800bbce:	f000 80e3 	beq.w	800bd98 <forward_conv2d+0x294>
 800bbd2:	695b      	ldr	r3, [r3, #20]
 800bbd4:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800bbd8:	689b      	ldr	r3, [r3, #8]
 800bbda:	9327      	str	r3, [sp, #156]	@ 0x9c
 800bbdc:	e9d2 0100 	ldrd	r0, r1, [r2]
 800bbe0:	f000 ffe4 	bl	800cbac <ai_array_get_byte_size>
 800bbe4:	69b7      	ldr	r7, [r6, #24]
 800bbe6:	9013      	str	r0, [sp, #76]	@ 0x4c
 800bbe8:	4a7b      	ldr	r2, [pc, #492]	@ (800bdd8 <forward_conv2d+0x2d4>)
 800bbea:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800bbec:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	2900      	cmp	r1, #0
 800bbf2:	bf08      	it	eq
 800bbf4:	4611      	moveq	r1, r2
 800bbf6:	9112      	str	r1, [sp, #72]	@ 0x48
 800bbf8:	fa1f f18a 	uxth.w	r1, sl
 800bbfc:	1e70      	subs	r0, r6, #1
 800bbfe:	3901      	subs	r1, #1
 800bc00:	fb00 6101 	mla	r1, r0, r1, r6
 800bc04:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800bc08:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800bc0a:	911c      	str	r1, [sp, #112]	@ 0x70
 800bc0c:	3a01      	subs	r2, #1
 800bc0e:	1e41      	subs	r1, r0, #1
 800bc10:	fb01 0202 	mla	r2, r1, r2, r0
 800bc14:	921d      	str	r2, [sp, #116]	@ 0x74
 800bc16:	f3c3 4243 	ubfx	r2, r3, #17, #4
 800bc1a:	2a04      	cmp	r2, #4
 800bc1c:	f000 808c 	beq.w	800bd38 <forward_conv2d+0x234>
 800bc20:	2a08      	cmp	r2, #8
 800bc22:	f000 8089 	beq.w	800bd38 <forward_conv2d+0x234>
 800bc26:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800bc2a:	9315      	str	r3, [sp, #84]	@ 0x54
 800bc2c:	425b      	negs	r3, r3
 800bc2e:	9314      	str	r3, [sp, #80]	@ 0x50
 800bc30:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d076      	beq.n	800bd24 <forward_conv2d+0x220>
 800bc36:	f8bd 3078 	ldrh.w	r3, [sp, #120]	@ 0x78
 800bc3a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 800bc3e:	921e      	str	r2, [sp, #120]	@ 0x78
 800bc40:	425b      	negs	r3, r3
 800bc42:	fa0f f28a 	sxth.w	r2, sl
 800bc46:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800bc4a:	9321      	str	r3, [sp, #132]	@ 0x84
 800bc4c:	fb0b f30a 	mul.w	r3, fp, sl
 800bc50:	921f      	str	r2, [sp, #124]	@ 0x7c
 800bc52:	9326      	str	r3, [sp, #152]	@ 0x98
 800bc54:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 800bc58:	9220      	str	r2, [sp, #128]	@ 0x80
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	4644      	mov	r4, r8
 800bc5e:	9317      	str	r3, [sp, #92]	@ 0x5c
 800bc60:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800bc62:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc64:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800bc66:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bc68:	920d      	str	r2, [sp, #52]	@ 0x34
 800bc6a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bc6c:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800bc74:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bc76:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc78:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800bc7a:	9307      	str	r3, [sp, #28]
 800bc7c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bc7e:	9306      	str	r3, [sp, #24]
 800bc80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc82:	9305      	str	r3, [sp, #20]
 800bc84:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800bc86:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800bc88:	e9cd b303 	strd	fp, r3, [sp, #12]
 800bc8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc8e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800bc92:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800bc94:	9300      	str	r3, [sp, #0]
 800bc96:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bc98:	4413      	add	r3, r2
 800bc9a:	bfa8      	it	ge
 800bc9c:	2200      	movge	r2, #0
 800bc9e:	9208      	str	r2, [sp, #32]
 800bca0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bca2:	4293      	cmp	r3, r2
 800bca4:	bf28      	it	cs
 800bca6:	4613      	movcs	r3, r2
 800bca8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcaa:	ee18 2a90 	vmov	r2, s17
 800bcae:	ee18 3a10 	vmov	r3, s16
 800bcb2:	ee19 1a10 	vmov	r1, s18
 800bcb6:	4638      	mov	r0, r7
 800bcb8:	f7ff f99c 	bl	800aff4 <ai_conv2d_stripe_f32.constprop.0>
 800bcbc:	f1bb 0f00 	cmp.w	fp, #0
 800bcc0:	d020      	beq.n	800bd04 <forward_conv2d+0x200>
 800bcc2:	2600      	movs	r6, #0
 800bcc4:	464a      	mov	r2, r9
 800bcc6:	f8dd 909c 	ldr.w	r9, [sp, #156]	@ 0x9c
 800bcca:	9610      	str	r6, [sp, #64]	@ 0x40
 800bccc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bcce:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 800bcd0:	9211      	str	r2, [sp, #68]	@ 0x44
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	9310      	str	r3, [sp, #64]	@ 0x40
 800bcd6:	69ab      	ldr	r3, [r5, #24]
 800bcd8:	4629      	mov	r1, r5
 800bcda:	609f      	str	r7, [r3, #8]
 800bcdc:	4628      	mov	r0, r5
 800bcde:	4623      	mov	r3, r4
 800bce0:	47b0      	blx	r6
 800bce2:	444c      	add	r4, r9
 800bce4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bce6:	eba4 0308 	sub.w	r3, r4, r8
 800bcea:	4293      	cmp	r3, r2
 800bcec:	bfa8      	it	ge
 800bcee:	4644      	movge	r4, r8
 800bcf0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bcf2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bcf4:	459b      	cmp	fp, r3
 800bcf6:	4457      	add	r7, sl
 800bcf8:	d1e8      	bne.n	800bccc <forward_conv2d+0x1c8>
 800bcfa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bcfc:	4691      	mov	r9, r2
 800bcfe:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800bd00:	4413      	add	r3, r2
 800bd02:	9316      	str	r3, [sp, #88]	@ 0x58
 800bd04:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bd06:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bd08:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800bd0a:	4413      	add	r3, r2
 800bd0c:	9314      	str	r3, [sp, #80]	@ 0x50
 800bd0e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bd10:	1a9b      	subs	r3, r3, r2
 800bd12:	9315      	str	r3, [sp, #84]	@ 0x54
 800bd14:	69ab      	ldr	r3, [r5, #24]
 800bd16:	68da      	ldr	r2, [r3, #12]
 800bd18:	609a      	str	r2, [r3, #8]
 800bd1a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800bd1c:	3101      	adds	r1, #1
 800bd1e:	428b      	cmp	r3, r1
 800bd20:	9117      	str	r1, [sp, #92]	@ 0x5c
 800bd22:	d19d      	bne.n	800bc60 <forward_conv2d+0x15c>
 800bd24:	b029      	add	sp, #164	@ 0xa4
 800bd26:	ecbd 8b04 	vpop	{d8-d9}
 800bd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	deff      	udf	#255	@ 0xff
 800bd32:	2300      	movs	r3, #0
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	deff      	udf	#255	@ 0xff
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	2a00      	cmp	r2, #0
 800bd3c:	f43f af73 	beq.w	800bc26 <forward_conv2d+0x122>
 800bd40:	69a1      	ldr	r1, [r4, #24]
 800bd42:	8808      	ldrh	r0, [r1, #0]
 800bd44:	2803      	cmp	r0, #3
 800bd46:	d943      	bls.n	800bdd0 <forward_conv2d+0x2cc>
 800bd48:	6849      	ldr	r1, [r1, #4]
 800bd4a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bd4c:	2900      	cmp	r1, #0
 800bd4e:	d037      	beq.n	800bdc0 <forward_conv2d+0x2bc>
 800bd50:	6809      	ldr	r1, [r1, #0]
 800bd52:	2900      	cmp	r1, #0
 800bd54:	d034      	beq.n	800bdc0 <forward_conv2d+0x2bc>
 800bd56:	698c      	ldr	r4, [r1, #24]
 800bd58:	68b9      	ldr	r1, [r7, #8]
 800bd5a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800bd5e:	9401      	str	r4, [sp, #4]
 800bd60:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 800bd62:	9400      	str	r4, [sp, #0]
 800bd64:	ee18 4a90 	vmov	r4, s17
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	bf18      	it	ne
 800bd6c:	4604      	movne	r4, r0
 800bd6e:	ee08 4a90 	vmov	s17, r4
 800bd72:	f3c3 14c6 	ubfx	r4, r3, #7, #7
 800bd76:	f3c3 5341 	ubfx	r3, r3, #21, #2
 800bd7a:	fa44 f303 	asr.w	r3, r4, r3
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	f7ff fe70 	bl	800ba64 <ai_dict_decompress_f32>
 800bd84:	e74f      	b.n	800bc26 <forward_conv2d+0x122>
 800bd86:	f1b8 0f00 	cmp.w	r8, #0
 800bd8a:	d00b      	beq.n	800bda4 <forward_conv2d+0x2a0>
 800bd8c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800bd8e:	2301      	movs	r3, #1
 800bd90:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800bd94:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd96:	e727      	b.n	800bbe8 <forward_conv2d+0xe4>
 800bd98:	f1b8 0f00 	cmp.w	r8, #0
 800bd9c:	d001      	beq.n	800bda2 <forward_conv2d+0x29e>
 800bd9e:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800bda2:	2300      	movs	r3, #0
 800bda4:	9327      	str	r3, [sp, #156]	@ 0x9c
 800bda6:	2301      	movs	r3, #1
 800bda8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bdaa:	e71d      	b.n	800bbe8 <forward_conv2d+0xe4>
 800bdac:	2a01      	cmp	r2, #1
 800bdae:	d90a      	bls.n	800bdc6 <forward_conv2d+0x2c2>
 800bdb0:	ee08 3a10 	vmov	s16, r3
 800bdb4:	461e      	mov	r6, r3
 800bdb6:	e6ca      	b.n	800bb4e <forward_conv2d+0x4a>
 800bdb8:	2200      	movs	r2, #0
 800bdba:	ee08 2a10 	vmov	s16, r2
 800bdbe:	e6c5      	b.n	800bb4c <forward_conv2d+0x48>
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	699b      	ldr	r3, [r3, #24]
 800bdc4:	deff      	udf	#255	@ 0xff
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	deff      	udf	#255	@ 0xff
 800bdca:	2300      	movs	r3, #0
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	deff      	udf	#255	@ 0xff
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	deff      	udf	#255	@ 0xff
 800bdd6:	bf00      	nop
 800bdd8:	0800aff1 	.word	0x0800aff1

0800bddc <forward_dense>:
 800bddc:	6983      	ldr	r3, [r0, #24]
 800bdde:	881a      	ldrh	r2, [r3, #0]
 800bde0:	2a00      	cmp	r2, #0
 800bde2:	f000 818b 	beq.w	800c0fc <forward_dense+0x320>
 800bde6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdea:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800bdee:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800bdf2:	b097      	sub	sp, #92	@ 0x5c
 800bdf4:	b105      	cbz	r5, 800bdf8 <forward_dense+0x1c>
 800bdf6:	682d      	ldr	r5, [r5, #0]
 800bdf8:	2a01      	cmp	r2, #1
 800bdfa:	f000 83a7 	beq.w	800c54c <forward_dense+0x770>
 800bdfe:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800be02:	b106      	cbz	r6, 800be06 <forward_dense+0x2a>
 800be04:	6836      	ldr	r6, [r6, #0]
 800be06:	2a02      	cmp	r2, #2
 800be08:	f000 817a 	beq.w	800c100 <forward_dense+0x324>
 800be0c:	f8dc 301c 	ldr.w	r3, [ip, #28]
 800be10:	930a      	str	r3, [sp, #40]	@ 0x28
 800be12:	2b00      	cmp	r3, #0
 800be14:	f000 838c 	beq.w	800c530 <forward_dense+0x754>
 800be18:	4619      	mov	r1, r3
 800be1a:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 800be1e:	6809      	ldr	r1, [r1, #0]
 800be20:	910b      	str	r1, [sp, #44]	@ 0x2c
 800be22:	2b01      	cmp	r3, #1
 800be24:	f240 8386 	bls.w	800c534 <forward_dense+0x758>
 800be28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	930a      	str	r3, [sp, #40]	@ 0x28
 800be2e:	460b      	mov	r3, r1
 800be30:	68e8      	ldr	r0, [r5, #12]
 800be32:	68f4      	ldr	r4, [r6, #12]
 800be34:	6840      	ldr	r0, [r0, #4]
 800be36:	6999      	ldr	r1, [r3, #24]
 800be38:	9013      	str	r0, [sp, #76]	@ 0x4c
 800be3a:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
 800be3e:	680b      	ldr	r3, [r1, #0]
 800be40:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800be44:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800be48:	fb00 f407 	mul.w	r4, r0, r7
 800be4c:	f3c3 5041 	ubfx	r0, r3, #21, #2
 800be50:	fa4e f000 	asr.w	r0, lr, r0
 800be54:	2a03      	cmp	r2, #3
 800be56:	900f      	str	r0, [sp, #60]	@ 0x3c
 800be58:	f000 8375 	beq.w	800c546 <forward_dense+0x76a>
 800be5c:	f8dc 2028 	ldr.w	r2, [ip, #40]	@ 0x28
 800be60:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800be64:	2a00      	cmp	r2, #0
 800be66:	f000 835e 	beq.w	800c526 <forward_dense+0x74a>
 800be6a:	6812      	ldr	r2, [r2, #0]
 800be6c:	2a00      	cmp	r2, #0
 800be6e:	f000 835a 	beq.w	800c526 <forward_dense+0x74a>
 800be72:	2b04      	cmp	r3, #4
 800be74:	f8d2 a018 	ldr.w	sl, [r2, #24]
 800be78:	f000 8344 	beq.w	800c504 <forward_dense+0x728>
 800be7c:	2b08      	cmp	r3, #8
 800be7e:	f000 8341 	beq.w	800c504 <forward_dense+0x728>
 800be82:	f04f 0b00 	mov.w	fp, #0
 800be86:	69b2      	ldr	r2, [r6, #24]
 800be88:	69ab      	ldr	r3, [r5, #24]
 800be8a:	6891      	ldr	r1, [r2, #8]
 800be8c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	6952      	ldr	r2, [r2, #20]
 800be92:	9105      	str	r1, [sp, #20]
 800be94:	fb04 f408 	mul.w	r4, r4, r8
 800be98:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800be9c:	f8d2 a004 	ldr.w	sl, [r2, #4]
 800bea0:	900e      	str	r0, [sp, #56]	@ 0x38
 800bea2:	00ba      	lsls	r2, r7, #2
 800bea4:	4281      	cmp	r1, r0
 800bea6:	920c      	str	r2, [sp, #48]	@ 0x30
 800bea8:	eb01 0887 	add.w	r8, r1, r7, lsl #2
 800beac:	f080 8123 	bcs.w	800c0f6 <forward_dense+0x31a>
 800beb0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800beb2:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800c11c <forward_dense+0x340>
 800beb6:	f1a1 0210 	sub.w	r2, r1, #16
 800beba:	0912      	lsrs	r2, r2, #4
 800bebc:	3201      	adds	r2, #1
 800bebe:	0192      	lsls	r2, r2, #6
 800bec0:	9214      	str	r2, [sp, #80]	@ 0x50
 800bec2:	f021 0201 	bic.w	r2, r1, #1
 800bec6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800beca:	08c8      	lsrs	r0, r1, #3
 800becc:	f001 0907 	and.w	r9, r1, #7
 800bed0:	9203      	str	r2, [sp, #12]
 800bed2:	460a      	mov	r2, r1
 800bed4:	f001 0101 	and.w	r1, r1, #1
 800bed8:	9107      	str	r1, [sp, #28]
 800beda:	0091      	lsls	r1, r2, #2
 800bedc:	1c44      	adds	r4, r0, #1
 800bede:	910d      	str	r1, [sp, #52]	@ 0x34
 800bee0:	eb03 1140 	add.w	r1, r3, r0, lsl #5
 800bee4:	3320      	adds	r3, #32
 800bee6:	9301      	str	r3, [sp, #4]
 800bee8:	00a3      	lsls	r3, r4, #2
 800beea:	9312      	str	r3, [sp, #72]	@ 0x48
 800beec:	f002 030f 	and.w	r3, r2, #15
 800bef0:	9315      	str	r3, [sp, #84]	@ 0x54
 800bef2:	9006      	str	r0, [sp, #24]
 800bef4:	465b      	mov	r3, fp
 800bef6:	9411      	str	r4, [sp, #68]	@ 0x44
 800bef8:	46d3      	mov	fp, sl
 800befa:	9104      	str	r1, [sp, #16]
 800befc:	46c2      	mov	sl, r8
 800befe:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 800bf02:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf04:	6992      	ldr	r2, [r2, #24]
 800bf06:	6897      	ldr	r7, [r2, #8]
 800bf08:	9a01      	ldr	r2, [sp, #4]
 800bf0a:	3a20      	subs	r2, #32
 800bf0c:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf10:	2a00      	cmp	r2, #0
 800bf12:	f000 8105 	beq.w	800c120 <forward_dense+0x344>
 800bf16:	6992      	ldr	r2, [r2, #24]
 800bf18:	6895      	ldr	r5, [r2, #8]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f000 8104 	beq.w	800c128 <forward_dense+0x34c>
 800bf20:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bf22:	2a04      	cmp	r2, #4
 800bf24:	9a05      	ldr	r2, [sp, #20]
 800bf26:	f000 820b 	beq.w	800c340 <forward_dense+0x564>
 800bf2a:	4592      	cmp	sl, r2
 800bf2c:	f240 80d2 	bls.w	800c0d4 <forward_dense+0x2f8>
 800bf30:	4616      	mov	r6, r2
 800bf32:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf34:	f8dd e018 	ldr.w	lr, [sp, #24]
 800bf38:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bf3c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800bf40:	46b4      	mov	ip, r6
 800bf42:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800bf44:	eb07 04c2 	add.w	r4, r7, r2, lsl #3
 800bf48:	2d00      	cmp	r5, #0
 800bf4a:	f000 80dc 	beq.w	800c106 <forward_dense+0x32a>
 800bf4e:	ecb5 2a01 	vldmia	r5!, {s4}
 800bf52:	eddf 6a72 	vldr	s13, [pc, #456]	@ 800c11c <forward_dense+0x340>
 800bf56:	f1be 0f00 	cmp.w	lr, #0
 800bf5a:	f000 80dc 	beq.w	800c116 <forward_dense+0x33a>
 800bf5e:	f107 0208 	add.w	r2, r7, #8
 800bf62:	4641      	mov	r1, r8
 800bf64:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 800bf68:	ed51 2a07 	vldr	s5, [r1, #-28]	@ 0xffffffe4
 800bf6c:	ed11 3a08 	vldr	s6, [r1, #-32]	@ 0xffffffe0
 800bf70:	ed51 3a06 	vldr	s7, [r1, #-24]	@ 0xffffffe8
 800bf74:	ed11 4a05 	vldr	s8, [r1, #-20]	@ 0xffffffec
 800bf78:	ed51 4a04 	vldr	s9, [r1, #-16]
 800bf7c:	ed11 5a03 	vldr	s10, [r1, #-12]
 800bf80:	ed51 5a02 	vldr	s11, [r1, #-8]
 800bf84:	ed11 6a01 	vldr	s12, [r1, #-4]
 800bf88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bf8c:	edd0 7a00 	vldr	s15, [r0]
 800bf90:	f812 0c08 	ldrb.w	r0, [r2, #-8]
 800bf94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bf98:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800bf9c:	edd0 2a00 	vldr	s5, [r0]
 800bfa0:	f812 0c06 	ldrb.w	r0, [r2, #-6]
 800bfa4:	eee2 7a83 	vfma.f32	s15, s5, s6
 800bfa8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bfac:	3208      	adds	r2, #8
 800bfae:	ed90 3a00 	vldr	s6, [r0]
 800bfb2:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 800bfb6:	eee3 7a23 	vfma.f32	s15, s6, s7
 800bfba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bfbe:	3120      	adds	r1, #32
 800bfc0:	edd0 3a00 	vldr	s7, [r0]
 800bfc4:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 800bfc8:	eee3 7a84 	vfma.f32	s15, s7, s8
 800bfcc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bfd0:	ed90 4a00 	vldr	s8, [r0]
 800bfd4:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 800bfd8:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bfdc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bfe0:	edd0 4a00 	vldr	s9, [r0]
 800bfe4:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 800bfe8:	eee4 7a85 	vfma.f32	s15, s9, s10
 800bfec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bff0:	ed90 5a00 	vldr	s10, [r0]
 800bff4:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 800bff8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bffc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c000:	4294      	cmp	r4, r2
 800c002:	edd0 5a00 	vldr	s11, [r0]
 800c006:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c00a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c00e:	d1a9      	bne.n	800bf64 <forward_dense+0x188>
 800c010:	f1a4 0208 	sub.w	r2, r4, #8
 800c014:	4649      	mov	r1, r9
 800c016:	2e00      	cmp	r6, #0
 800c018:	d04a      	beq.n	800c0b0 <forward_dense+0x2d4>
 800c01a:	7810      	ldrb	r0, [r2, #0]
 800c01c:	ed91 6a00 	vldr	s12, [r1]
 800c020:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c024:	edd0 7a00 	vldr	s15, [r0]
 800c028:	2e01      	cmp	r6, #1
 800c02a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c02e:	d03f      	beq.n	800c0b0 <forward_dense+0x2d4>
 800c030:	7850      	ldrb	r0, [r2, #1]
 800c032:	ed91 6a01 	vldr	s12, [r1, #4]
 800c036:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c03a:	edd0 7a00 	vldr	s15, [r0]
 800c03e:	2e02      	cmp	r6, #2
 800c040:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c044:	d034      	beq.n	800c0b0 <forward_dense+0x2d4>
 800c046:	7890      	ldrb	r0, [r2, #2]
 800c048:	ed91 6a02 	vldr	s12, [r1, #8]
 800c04c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c050:	edd0 7a00 	vldr	s15, [r0]
 800c054:	2e03      	cmp	r6, #3
 800c056:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c05a:	d029      	beq.n	800c0b0 <forward_dense+0x2d4>
 800c05c:	78d0      	ldrb	r0, [r2, #3]
 800c05e:	ed91 6a03 	vldr	s12, [r1, #12]
 800c062:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c066:	edd0 7a00 	vldr	s15, [r0]
 800c06a:	2e04      	cmp	r6, #4
 800c06c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c070:	d01e      	beq.n	800c0b0 <forward_dense+0x2d4>
 800c072:	7910      	ldrb	r0, [r2, #4]
 800c074:	ed91 6a04 	vldr	s12, [r1, #16]
 800c078:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c07c:	edd0 7a00 	vldr	s15, [r0]
 800c080:	2e05      	cmp	r6, #5
 800c082:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c086:	d013      	beq.n	800c0b0 <forward_dense+0x2d4>
 800c088:	7950      	ldrb	r0, [r2, #5]
 800c08a:	ed91 6a05 	vldr	s12, [r1, #20]
 800c08e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c092:	edd0 7a00 	vldr	s15, [r0]
 800c096:	2e06      	cmp	r6, #6
 800c098:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c09c:	d008      	beq.n	800c0b0 <forward_dense+0x2d4>
 800c09e:	7992      	ldrb	r2, [r2, #6]
 800c0a0:	edd1 7a06 	vldr	s15, [r1, #24]
 800c0a4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c0a8:	ed92 6a00 	vldr	s12, [r2]
 800c0ac:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c0b0:	445f      	add	r7, fp
 800c0b2:	445c      	add	r4, fp
 800c0b4:	ee72 6a26 	vadd.f32	s13, s4, s13
 800c0b8:	ecec 6a01 	vstmia	ip!, {s13}
 800c0bc:	45d4      	cmp	ip, sl
 800c0be:	f4ff af43 	bcc.w	800bf48 <forward_dense+0x16c>
 800c0c2:	9905      	ldr	r1, [sp, #20]
 800c0c4:	ebaa 0201 	sub.w	r2, sl, r1
 800c0c8:	3a01      	subs	r2, #1
 800c0ca:	f022 0203 	bic.w	r2, r2, #3
 800c0ce:	3204      	adds	r2, #4
 800c0d0:	188a      	adds	r2, r1, r2
 800c0d2:	9205      	str	r2, [sp, #20]
 800c0d4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c0d6:	9904      	ldr	r1, [sp, #16]
 800c0d8:	4492      	add	sl, r2
 800c0da:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c0dc:	4411      	add	r1, r2
 800c0de:	9104      	str	r1, [sp, #16]
 800c0e0:	9903      	ldr	r1, [sp, #12]
 800c0e2:	4411      	add	r1, r2
 800c0e4:	9103      	str	r1, [sp, #12]
 800c0e6:	9901      	ldr	r1, [sp, #4]
 800c0e8:	4411      	add	r1, r2
 800c0ea:	9101      	str	r1, [sp, #4]
 800c0ec:	9a05      	ldr	r2, [sp, #20]
 800c0ee:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c0f0:	428a      	cmp	r2, r1
 800c0f2:	f4ff af06 	bcc.w	800bf02 <forward_dense+0x126>
 800c0f6:	b017      	add	sp, #92	@ 0x5c
 800c0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fc:	6853      	ldr	r3, [r2, #4]
 800c0fe:	deff      	udf	#255	@ 0xff
 800c100:	2300      	movs	r3, #0
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	deff      	udf	#255	@ 0xff
 800c106:	eddf 6a05 	vldr	s13, [pc, #20]	@ 800c11c <forward_dense+0x340>
 800c10a:	eeb0 2a47 	vmov.f32	s4, s14
 800c10e:	f1be 0f00 	cmp.w	lr, #0
 800c112:	f47f af24 	bne.w	800bf5e <forward_dense+0x182>
 800c116:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c118:	463a      	mov	r2, r7
 800c11a:	e77c      	b.n	800c016 <forward_dense+0x23a>
 800c11c:	00000000 	.word	0x00000000
 800c120:	4615      	mov	r5, r2
 800c122:	2b00      	cmp	r3, #0
 800c124:	f47f aefc 	bne.w	800bf20 <forward_dense+0x144>
 800c128:	9a05      	ldr	r2, [sp, #20]
 800c12a:	4592      	cmp	sl, r2
 800c12c:	d9d2      	bls.n	800c0d4 <forward_dense+0x2f8>
 800c12e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c130:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800c132:	f8dd c004 	ldr.w	ip, [sp, #4]
 800c136:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
 800c13a:	9302      	str	r3, [sp, #8]
 800c13c:	4614      	mov	r4, r2
 800c13e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c140:	188e      	adds	r6, r1, r2
 800c142:	4696      	mov	lr, r2
 800c144:	2d00      	cmp	r5, #0
 800c146:	f000 81d2 	beq.w	800c4ee <forward_dense+0x712>
 800c14a:	280f      	cmp	r0, #15
 800c14c:	ecb5 0a01 	vldmia	r5!, {s0}
 800c150:	ed5f 6a0e 	vldr	s13, [pc, #-56]	@ 800c11c <forward_dense+0x340>
 800c154:	f240 81d2 	bls.w	800c4fc <forward_dense+0x720>
 800c158:	f10c 0220 	add.w	r2, ip, #32
 800c15c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c160:	4601      	mov	r1, r0
 800c162:	ed13 5a0f 	vldr	s10, [r3, #-60]	@ 0xffffffc4
 800c166:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 800c16a:	ed52 5a10 	vldr	s11, [r2, #-64]	@ 0xffffffc0
 800c16e:	ed13 6a10 	vldr	s12, [r3, #-64]	@ 0xffffffc0
 800c172:	ed12 4a0d 	vldr	s8, [r2, #-52]	@ 0xffffffcc
 800c176:	ed52 4a0c 	vldr	s9, [r2, #-48]	@ 0xffffffd0
 800c17a:	ed52 2a0a 	vldr	s5, [r2, #-40]	@ 0xffffffd8
 800c17e:	ed13 3a0a 	vldr	s6, [r3, #-40]	@ 0xffffffd8
 800c182:	ed52 3a09 	vldr	s7, [r2, #-36]	@ 0xffffffdc
 800c186:	ed52 0a06 	vldr	s1, [r2, #-24]	@ 0xffffffe8
 800c18a:	ed13 1a06 	vldr	s2, [r3, #-24]	@ 0xffffffe8
 800c18e:	ed52 1a05 	vldr	s3, [r2, #-20]	@ 0xffffffec
 800c192:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 800c196:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c19a:	ed12 5a0e 	vldr	s10, [r2, #-56]	@ 0xffffffc8
 800c19e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c1a2:	3910      	subs	r1, #16
 800c1a4:	290f      	cmp	r1, #15
 800c1a6:	ed53 5a0e 	vldr	s11, [r3, #-56]	@ 0xffffffc8
 800c1aa:	ed13 6a0d 	vldr	s12, [r3, #-52]	@ 0xffffffcc
 800c1ae:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c1b2:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 800c1b6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c1ba:	ed13 5a1c 	vldr	s10, [r3, #-112]	@ 0xffffff90
 800c1be:	ed52 5a1b 	vldr	s11, [r2, #-108]	@ 0xffffff94
 800c1c2:	eee4 7a06 	vfma.f32	s15, s8, s12
 800c1c6:	ed13 6a1b 	vldr	s12, [r3, #-108]	@ 0xffffff94
 800c1ca:	ed13 4a19 	vldr	s8, [r3, #-100]	@ 0xffffff9c
 800c1ce:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c1d2:	ed52 4a18 	vldr	s9, [r2, #-96]	@ 0xffffffa0
 800c1d6:	ed13 5a18 	vldr	s10, [r3, #-96]	@ 0xffffffa0
 800c1da:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c1de:	ed52 5a17 	vldr	s11, [r2, #-92]	@ 0xffffffa4
 800c1e2:	ed13 6a17 	vldr	s12, [r3, #-92]	@ 0xffffffa4
 800c1e6:	eee2 7a83 	vfma.f32	s15, s5, s6
 800c1ea:	ed52 2a14 	vldr	s5, [r2, #-80]	@ 0xffffffb0
 800c1ee:	ed13 3a14 	vldr	s6, [r3, #-80]	@ 0xffffffb0
 800c1f2:	eee3 7a84 	vfma.f32	s15, s7, s8
 800c1f6:	ed52 3a13 	vldr	s7, [r2, #-76]	@ 0xffffffb4
 800c1fa:	ed13 4a13 	vldr	s8, [r3, #-76]	@ 0xffffffb4
 800c1fe:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c202:	ed52 4a12 	vldr	s9, [r2, #-72]	@ 0xffffffb8
 800c206:	ed13 5a12 	vldr	s10, [r3, #-72]	@ 0xffffffb8
 800c20a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c20e:	ed52 5a11 	vldr	s11, [r2, #-68]	@ 0xffffffbc
 800c212:	ed13 6a11 	vldr	s12, [r3, #-68]	@ 0xffffffbc
 800c216:	eee0 7a81 	vfma.f32	s15, s1, s2
 800c21a:	eee1 7a82 	vfma.f32	s15, s3, s4
 800c21e:	eee2 7a83 	vfma.f32	s15, s5, s6
 800c222:	eee3 7a84 	vfma.f32	s15, s7, s8
 800c226:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c22a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c22e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c232:	d896      	bhi.n	800c162 <forward_dense+0x386>
 800c234:	eb07 010e 	add.w	r1, r7, lr
 800c238:	4643      	mov	r3, r8
 800c23a:	4632      	mov	r2, r6
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d075      	beq.n	800c32c <forward_dense+0x550>
 800c240:	ed92 6a00 	vldr	s12, [r2]
 800c244:	edd1 7a00 	vldr	s15, [r1]
 800c248:	2b01      	cmp	r3, #1
 800c24a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c24e:	d06d      	beq.n	800c32c <forward_dense+0x550>
 800c250:	ed92 6a01 	vldr	s12, [r2, #4]
 800c254:	edd1 7a01 	vldr	s15, [r1, #4]
 800c258:	2b02      	cmp	r3, #2
 800c25a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c25e:	d065      	beq.n	800c32c <forward_dense+0x550>
 800c260:	ed92 6a02 	vldr	s12, [r2, #8]
 800c264:	edd1 7a02 	vldr	s15, [r1, #8]
 800c268:	2b03      	cmp	r3, #3
 800c26a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c26e:	d05d      	beq.n	800c32c <forward_dense+0x550>
 800c270:	ed92 6a03 	vldr	s12, [r2, #12]
 800c274:	edd1 7a03 	vldr	s15, [r1, #12]
 800c278:	2b04      	cmp	r3, #4
 800c27a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c27e:	d055      	beq.n	800c32c <forward_dense+0x550>
 800c280:	ed92 6a04 	vldr	s12, [r2, #16]
 800c284:	edd1 7a04 	vldr	s15, [r1, #16]
 800c288:	2b05      	cmp	r3, #5
 800c28a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c28e:	d04d      	beq.n	800c32c <forward_dense+0x550>
 800c290:	ed92 6a05 	vldr	s12, [r2, #20]
 800c294:	edd1 7a05 	vldr	s15, [r1, #20]
 800c298:	2b06      	cmp	r3, #6
 800c29a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c29e:	d045      	beq.n	800c32c <forward_dense+0x550>
 800c2a0:	ed92 6a06 	vldr	s12, [r2, #24]
 800c2a4:	edd1 7a06 	vldr	s15, [r1, #24]
 800c2a8:	2b07      	cmp	r3, #7
 800c2aa:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c2ae:	d03d      	beq.n	800c32c <forward_dense+0x550>
 800c2b0:	ed92 6a07 	vldr	s12, [r2, #28]
 800c2b4:	edd1 7a07 	vldr	s15, [r1, #28]
 800c2b8:	2b08      	cmp	r3, #8
 800c2ba:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c2be:	d035      	beq.n	800c32c <forward_dense+0x550>
 800c2c0:	ed92 6a08 	vldr	s12, [r2, #32]
 800c2c4:	edd1 7a08 	vldr	s15, [r1, #32]
 800c2c8:	2b09      	cmp	r3, #9
 800c2ca:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c2ce:	d02d      	beq.n	800c32c <forward_dense+0x550>
 800c2d0:	ed92 6a09 	vldr	s12, [r2, #36]	@ 0x24
 800c2d4:	edd1 7a09 	vldr	s15, [r1, #36]	@ 0x24
 800c2d8:	2b0a      	cmp	r3, #10
 800c2da:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c2de:	d025      	beq.n	800c32c <forward_dense+0x550>
 800c2e0:	ed92 6a0a 	vldr	s12, [r2, #40]	@ 0x28
 800c2e4:	edd1 7a0a 	vldr	s15, [r1, #40]	@ 0x28
 800c2e8:	2b0b      	cmp	r3, #11
 800c2ea:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c2ee:	d01d      	beq.n	800c32c <forward_dense+0x550>
 800c2f0:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 800c2f4:	edd1 7a0b 	vldr	s15, [r1, #44]	@ 0x2c
 800c2f8:	2b0c      	cmp	r3, #12
 800c2fa:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c2fe:	d015      	beq.n	800c32c <forward_dense+0x550>
 800c300:	ed92 6a0c 	vldr	s12, [r2, #48]	@ 0x30
 800c304:	edd1 7a0c 	vldr	s15, [r1, #48]	@ 0x30
 800c308:	3b0d      	subs	r3, #13
 800c30a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c30e:	d00d      	beq.n	800c32c <forward_dense+0x550>
 800c310:	ed92 6a0d 	vldr	s12, [r2, #52]	@ 0x34
 800c314:	edd1 7a0d 	vldr	s15, [r1, #52]	@ 0x34
 800c318:	2b01      	cmp	r3, #1
 800c31a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c31e:	d005      	beq.n	800c32c <forward_dense+0x550>
 800c320:	ed91 6a0e 	vldr	s12, [r1, #56]	@ 0x38
 800c324:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 800c328:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c32c:	445f      	add	r7, fp
 800c32e:	ee70 6a26 	vadd.f32	s13, s0, s13
 800c332:	ece4 6a01 	vstmia	r4!, {s13}
 800c336:	4554      	cmp	r4, sl
 800c338:	f4ff af04 	bcc.w	800c144 <forward_dense+0x368>
 800c33c:	9b02      	ldr	r3, [sp, #8]
 800c33e:	e6c0      	b.n	800c0c2 <forward_dense+0x2e6>
 800c340:	4592      	cmp	sl, r2
 800c342:	f67f aec7 	bls.w	800c0d4 <forward_dense+0x2f8>
 800c346:	9202      	str	r2, [sp, #8]
 800c348:	9a03      	ldr	r2, [sp, #12]
 800c34a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c34c:	3a01      	subs	r2, #1
 800c34e:	eb07 0c01 	add.w	ip, r7, r1
 800c352:	9208      	str	r2, [sp, #32]
 800c354:	2d00      	cmp	r5, #0
 800c356:	f000 80b2 	beq.w	800c4be <forward_dense+0x6e2>
 800c35a:	9a06      	ldr	r2, [sp, #24]
 800c35c:	ecb5 2a01 	vldmia	r5!, {s4}
 800c360:	ed5f 6a92 	vldr	s13, [pc, #-584]	@ 800c11c <forward_dense+0x340>
 800c364:	2a00      	cmp	r2, #0
 800c366:	f000 80b2 	beq.w	800c4ce <forward_dense+0x6f2>
 800c36a:	9a01      	ldr	r2, [sp, #4]
 800c36c:	1d39      	adds	r1, r7, #4
 800c36e:	f811 4c04 	ldrb.w	r4, [r1, #-4]
 800c372:	ed52 1a07 	vldr	s3, [r2, #-28]	@ 0xffffffe4
 800c376:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 800c37a:	ed12 3a08 	vldr	s6, [r2, #-32]	@ 0xffffffe0
 800c37e:	ed52 3a06 	vldr	s7, [r2, #-24]	@ 0xffffffe8
 800c382:	ed12 4a05 	vldr	s8, [r2, #-20]	@ 0xffffffec
 800c386:	ed52 4a04 	vldr	s9, [r2, #-16]
 800c38a:	ed12 5a03 	vldr	s10, [r2, #-12]
 800c38e:	ed52 5a02 	vldr	s11, [r2, #-8]
 800c392:	ed12 6a01 	vldr	s12, [r2, #-4]
 800c396:	f004 060f 	and.w	r6, r4, #15
 800c39a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800c39e:	edd6 7a00 	vldr	s15, [r6]
 800c3a2:	0924      	lsrs	r4, r4, #4
 800c3a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c3a8:	edd4 2a00 	vldr	s5, [r4]
 800c3ac:	ee67 7aa1 	vmul.f32	s15, s15, s3
 800c3b0:	0904      	lsrs	r4, r0, #4
 800c3b2:	eee2 7a83 	vfma.f32	s15, s5, s6
 800c3b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c3ba:	f000 000f 	and.w	r0, r0, #15
 800c3be:	ed94 3a00 	vldr	s6, [r4]
 800c3c2:	f811 4c02 	ldrb.w	r4, [r1, #-2]
 800c3c6:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c3ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c3ce:	0926      	lsrs	r6, r4, #4
 800c3d0:	edd0 3a00 	vldr	s7, [r0]
 800c3d4:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 800c3d8:	eee3 7a84 	vfma.f32	s15, s7, s8
 800c3dc:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800c3e0:	f004 040f 	and.w	r4, r4, #15
 800c3e4:	ed96 4a00 	vldr	s8, [r6]
 800c3e8:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c3ec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c3f0:	3104      	adds	r1, #4
 800c3f2:	edd4 4a00 	vldr	s9, [r4]
 800c3f6:	0904      	lsrs	r4, r0, #4
 800c3f8:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c3fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c400:	f000 000f 	and.w	r0, r0, #15
 800c404:	ed94 5a00 	vldr	s10, [r4]
 800c408:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c40c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c410:	458c      	cmp	ip, r1
 800c412:	edd0 5a00 	vldr	s11, [r0]
 800c416:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c41a:	f102 0220 	add.w	r2, r2, #32
 800c41e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c422:	d1a4      	bne.n	800c36e <forward_dense+0x592>
 800c424:	f8dd e010 	ldr.w	lr, [sp, #16]
 800c428:	f1ac 0804 	sub.w	r8, ip, #4
 800c42c:	9a03      	ldr	r2, [sp, #12]
 800c42e:	4596      	cmp	lr, r2
 800c430:	d22a      	bcs.n	800c488 <forward_dense+0x6ac>
 800c432:	9a08      	ldr	r2, [sp, #32]
 800c434:	eba2 060e 	sub.w	r6, r2, lr
 800c438:	ea4f 09d6 	mov.w	r9, r6, lsr #3
 800c43c:	f10e 0108 	add.w	r1, lr, #8
 800c440:	f108 34ff 	add.w	r4, r8, #4294967295
 800c444:	eb08 06d6 	add.w	r6, r8, r6, lsr #3
 800c448:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800c44c:	ed11 5a01 	vldr	s10, [r1, #-4]
 800c450:	ed11 6a02 	vldr	s12, [r1, #-8]
 800c454:	f002 000f 	and.w	r0, r2, #15
 800c458:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c45c:	edd0 7a00 	vldr	s15, [r0]
 800c460:	0912      	lsrs	r2, r2, #4
 800c462:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c466:	edd2 5a00 	vldr	s11, [r2]
 800c46a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c46e:	42a6      	cmp	r6, r4
 800c470:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c474:	f101 0108 	add.w	r1, r1, #8
 800c478:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c47c:	d1e4      	bne.n	800c448 <forward_dense+0x66c>
 800c47e:	f109 0901 	add.w	r9, r9, #1
 800c482:	44c8      	add	r8, r9
 800c484:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 800c488:	9a07      	ldr	r2, [sp, #28]
 800c48a:	b322      	cbz	r2, 800c4d6 <forward_dense+0x6fa>
 800c48c:	f898 2000 	ldrb.w	r2, [r8]
 800c490:	edde 7a00 	vldr	s15, [lr]
 800c494:	0912      	lsrs	r2, r2, #4
 800c496:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c49a:	ed92 6a00 	vldr	s12, [r2]
 800c49e:	9a02      	ldr	r2, [sp, #8]
 800c4a0:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c4a4:	445f      	add	r7, fp
 800c4a6:	44dc      	add	ip, fp
 800c4a8:	ee32 2a26 	vadd.f32	s4, s4, s13
 800c4ac:	eca2 2a01 	vstmia	r2!, {s4}
 800c4b0:	4592      	cmp	sl, r2
 800c4b2:	9202      	str	r2, [sp, #8]
 800c4b4:	f67f ae05 	bls.w	800c0c2 <forward_dense+0x2e6>
 800c4b8:	2d00      	cmp	r5, #0
 800c4ba:	f47f af4e 	bne.w	800c35a <forward_dense+0x57e>
 800c4be:	9a06      	ldr	r2, [sp, #24]
 800c4c0:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800c554 <forward_dense+0x778>
 800c4c4:	eeb0 2a47 	vmov.f32	s4, s14
 800c4c8:	2a00      	cmp	r2, #0
 800c4ca:	f47f af4e 	bne.w	800c36a <forward_dense+0x58e>
 800c4ce:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 800c4d2:	46b8      	mov	r8, r7
 800c4d4:	e7aa      	b.n	800c42c <forward_dense+0x650>
 800c4d6:	9a02      	ldr	r2, [sp, #8]
 800c4d8:	ee72 6a26 	vadd.f32	s13, s4, s13
 800c4dc:	445f      	add	r7, fp
 800c4de:	ece2 6a01 	vstmia	r2!, {s13}
 800c4e2:	4552      	cmp	r2, sl
 800c4e4:	9202      	str	r2, [sp, #8]
 800c4e6:	44dc      	add	ip, fp
 800c4e8:	f4ff af34 	bcc.w	800c354 <forward_dense+0x578>
 800c4ec:	e5e9      	b.n	800c0c2 <forward_dense+0x2e6>
 800c4ee:	280f      	cmp	r0, #15
 800c4f0:	eddf 6a18 	vldr	s13, [pc, #96]	@ 800c554 <forward_dense+0x778>
 800c4f4:	eeb0 0a47 	vmov.f32	s0, s14
 800c4f8:	f63f ae2e 	bhi.w	800c158 <forward_dense+0x37c>
 800c4fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4fe:	4603      	mov	r3, r0
 800c500:	4639      	mov	r1, r7
 800c502:	e69b      	b.n	800c23c <forward_dense+0x460>
 800c504:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800c508:	f1ba 0f00 	cmp.w	sl, #0
 800c50c:	d016      	beq.n	800c53c <forward_dense+0x760>
 800c50e:	e9da 0100 	ldrd	r0, r1, [sl]
 800c512:	f000 fb4b 	bl	800cbac <ai_array_get_byte_size>
 800c516:	f8da b00c 	ldr.w	fp, [sl, #12]
 800c51a:	4602      	mov	r2, r0
 800c51c:	4649      	mov	r1, r9
 800c51e:	4658      	mov	r0, fp
 800c520:	f001 fdbb 	bl	800e09a <memcpy>
 800c524:	e4af      	b.n	800be86 <forward_dense+0xaa>
 800c526:	2b04      	cmp	r3, #4
 800c528:	d00a      	beq.n	800c540 <forward_dense+0x764>
 800c52a:	f04f 0a00 	mov.w	sl, #0
 800c52e:	e4a5      	b.n	800be7c <forward_dense+0xa0>
 800c530:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c532:	e47d      	b.n	800be30 <forward_dense+0x54>
 800c534:	2300      	movs	r3, #0
 800c536:	930a      	str	r3, [sp, #40]	@ 0x28
 800c538:	460b      	mov	r3, r1
 800c53a:	e479      	b.n	800be30 <forward_dense+0x54>
 800c53c:	46cb      	mov	fp, r9
 800c53e:	e4a2      	b.n	800be86 <forward_dense+0xaa>
 800c540:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 800c544:	e49f      	b.n	800be86 <forward_dense+0xaa>
 800c546:	2300      	movs	r3, #0
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	deff      	udf	#255	@ 0xff
 800c54c:	2300      	movs	r3, #0
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	deff      	udf	#255	@ 0xff
 800c552:	bf00      	nop
 800c554:	00000000 	.word	0x00000000

0800c558 <nl_func_relu_array_f32>:
 800c558:	b430      	push	{r4, r5}
 800c55a:	698c      	ldr	r4, [r1, #24]
 800c55c:	6981      	ldr	r1, [r0, #24]
 800c55e:	68a5      	ldr	r5, [r4, #8]
 800c560:	6889      	ldr	r1, [r1, #8]
 800c562:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800c566:	3a01      	subs	r2, #1
 800c568:	0093      	lsls	r3, r2, #2
 800c56a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800c56e:	4295      	cmp	r5, r2
 800c570:	d814      	bhi.n	800c59c <nl_func_relu_array_f32+0x44>
 800c572:	1d18      	adds	r0, r3, #4
 800c574:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800c5a0 <nl_func_relu_array_f32+0x48>
 800c578:	1d13      	adds	r3, r2, #4
 800c57a:	4401      	add	r1, r0
 800c57c:	461a      	mov	r2, r3
 800c57e:	ed73 7a01 	vldmdb	r3!, {s15}
 800c582:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c58a:	bfb8      	it	lt
 800c58c:	eef0 7a47 	vmovlt.f32	s15, s14
 800c590:	ed61 7a01 	vstmdb	r1!, {s15}
 800c594:	68a0      	ldr	r0, [r4, #8]
 800c596:	3a08      	subs	r2, #8
 800c598:	4290      	cmp	r0, r2
 800c59a:	d9ef      	bls.n	800c57c <nl_func_relu_array_f32+0x24>
 800c59c:	bc30      	pop	{r4, r5}
 800c59e:	4770      	bx	lr
 800c5a0:	00000000 	.word	0x00000000

0800c5a4 <nl_func_sm_channel_f32>:
 800c5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5a8:	ed2d 8b02 	vpush	{d8}
 800c5ac:	6989      	ldr	r1, [r1, #24]
 800c5ae:	6983      	ldr	r3, [r0, #24]
 800c5b0:	688d      	ldr	r5, [r1, #8]
 800c5b2:	689e      	ldr	r6, [r3, #8]
 800c5b4:	ed95 8a00 	vldr	s16, [r5]
 800c5b8:	2a01      	cmp	r2, #1
 800c5ba:	4617      	mov	r7, r2
 800c5bc:	d935      	bls.n	800c62a <nl_func_sm_channel_f32+0x86>
 800c5be:	1d2b      	adds	r3, r5, #4
 800c5c0:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800c5c4:	ecf3 7a01 	vldmia	r3!, {s15}
 800c5c8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c5cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5d0:	bfb8      	it	lt
 800c5d2:	eeb0 8a67 	vmovlt.f32	s16, s15
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d1f4      	bne.n	800c5c4 <nl_func_sm_channel_f32+0x20>
 800c5da:	eddf 8a17 	vldr	s17, [pc, #92]	@ 800c638 <nl_func_sm_channel_f32+0x94>
 800c5de:	46b0      	mov	r8, r6
 800c5e0:	2400      	movs	r4, #0
 800c5e2:	ecb5 0a01 	vldmia	r5!, {s0}
 800c5e6:	ee30 0a48 	vsub.f32	s0, s0, s16
 800c5ea:	f004 ff29 	bl	8011440 <expf>
 800c5ee:	3401      	adds	r4, #1
 800c5f0:	42a7      	cmp	r7, r4
 800c5f2:	ee78 8a80 	vadd.f32	s17, s17, s0
 800c5f6:	eca8 0a01 	vstmia	r8!, {s0}
 800c5fa:	d8f2      	bhi.n	800c5e2 <nl_func_sm_channel_f32+0x3e>
 800c5fc:	eef5 8a40 	vcmp.f32	s17, #0.0
 800c600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c604:	d00d      	beq.n	800c622 <nl_func_sm_channel_f32+0x7e>
 800c606:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c60a:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800c60e:	2300      	movs	r3, #0
 800c610:	3301      	adds	r3, #1
 800c612:	429f      	cmp	r7, r3
 800c614:	edd6 7a00 	vldr	s15, [r6]
 800c618:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c61c:	ece6 7a01 	vstmia	r6!, {s15}
 800c620:	d8f6      	bhi.n	800c610 <nl_func_sm_channel_f32+0x6c>
 800c622:	ecbd 8b02 	vpop	{d8}
 800c626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c62a:	2a00      	cmp	r2, #0
 800c62c:	d1d5      	bne.n	800c5da <nl_func_sm_channel_f32+0x36>
 800c62e:	ecbd 8b02 	vpop	{d8}
 800c632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c636:	bf00      	nop
 800c638:	00000000 	.word	0x00000000

0800c63c <nl_func_relu_generic_array_f32>:
 800c63c:	b430      	push	{r4, r5}
 800c63e:	edd3 6a02 	vldr	s13, [r3, #8]
 800c642:	ed93 7a00 	vldr	s14, [r3]
 800c646:	ed93 6a01 	vldr	s12, [r3, #4]
 800c64a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800c64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c652:	d430      	bmi.n	800c6b6 <nl_func_relu_generic_array_f32+0x7a>
 800c654:	698c      	ldr	r4, [r1, #24]
 800c656:	6981      	ldr	r1, [r0, #24]
 800c658:	68a5      	ldr	r5, [r4, #8]
 800c65a:	6889      	ldr	r1, [r1, #8]
 800c65c:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 800c660:	3b01      	subs	r3, #1
 800c662:	009a      	lsls	r2, r3, #2
 800c664:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c668:	429d      	cmp	r5, r3
 800c66a:	d822      	bhi.n	800c6b2 <nl_func_relu_generic_array_f32+0x76>
 800c66c:	3204      	adds	r2, #4
 800c66e:	3304      	adds	r3, #4
 800c670:	4411      	add	r1, r2
 800c672:	e00e      	b.n	800c692 <nl_func_relu_generic_array_f32+0x56>
 800c674:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c67c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800c680:	db01      	blt.n	800c686 <nl_func_relu_generic_array_f32+0x4a>
 800c682:	ee65 7a86 	vmul.f32	s15, s11, s12
 800c686:	ed61 7a01 	vstmdb	r1!, {s15}
 800c68a:	68a0      	ldr	r0, [r4, #8]
 800c68c:	3a08      	subs	r2, #8
 800c68e:	4290      	cmp	r0, r2
 800c690:	d80f      	bhi.n	800c6b2 <nl_func_relu_generic_array_f32+0x76>
 800c692:	461a      	mov	r2, r3
 800c694:	ed73 7a01 	vldmdb	r3!, {s15}
 800c698:	eef4 6ae7 	vcmpe.f32	s13, s15
 800c69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6a0:	dae8      	bge.n	800c674 <nl_func_relu_generic_array_f32+0x38>
 800c6a2:	eef0 7a66 	vmov.f32	s15, s13
 800c6a6:	ed61 7a01 	vstmdb	r1!, {s15}
 800c6aa:	68a0      	ldr	r0, [r4, #8]
 800c6ac:	3a08      	subs	r2, #8
 800c6ae:	4290      	cmp	r0, r2
 800c6b0:	d9ef      	bls.n	800c692 <nl_func_relu_generic_array_f32+0x56>
 800c6b2:	bc30      	pop	{r4, r5}
 800c6b4:	4770      	bx	lr
 800c6b6:	698c      	ldr	r4, [r1, #24]
 800c6b8:	6981      	ldr	r1, [r0, #24]
 800c6ba:	68a5      	ldr	r5, [r4, #8]
 800c6bc:	6889      	ldr	r1, [r1, #8]
 800c6be:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800c6c2:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800c6c6:	3a01      	subs	r2, #1
 800c6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6cc:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800c6d0:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800c6d4:	d01b      	beq.n	800c70e <nl_func_relu_generic_array_f32+0xd2>
 800c6d6:	4295      	cmp	r5, r2
 800c6d8:	d8eb      	bhi.n	800c6b2 <nl_func_relu_generic_array_f32+0x76>
 800c6da:	1d18      	adds	r0, r3, #4
 800c6dc:	1d13      	adds	r3, r2, #4
 800c6de:	180a      	adds	r2, r1, r0
 800c6e0:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c6e4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c6e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c6ec:	f1a3 0008 	sub.w	r0, r3, #8
 800c6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6f4:	f1a3 0104 	sub.w	r1, r3, #4
 800c6f8:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	d81f      	bhi.n	800c740 <nl_func_relu_generic_array_f32+0x104>
 800c700:	ed62 6a01 	vstmdb	r2!, {s13}
 800c704:	68a3      	ldr	r3, [r4, #8]
 800c706:	4283      	cmp	r3, r0
 800c708:	d8d3      	bhi.n	800c6b2 <nl_func_relu_generic_array_f32+0x76>
 800c70a:	460b      	mov	r3, r1
 800c70c:	e7e8      	b.n	800c6e0 <nl_func_relu_generic_array_f32+0xa4>
 800c70e:	4295      	cmp	r5, r2
 800c710:	d8cf      	bhi.n	800c6b2 <nl_func_relu_generic_array_f32+0x76>
 800c712:	1d18      	adds	r0, r3, #4
 800c714:	2500      	movs	r5, #0
 800c716:	1d13      	adds	r3, r2, #4
 800c718:	180a      	adds	r2, r1, r0
 800c71a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c71e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c722:	f1a3 0008 	sub.w	r0, r3, #8
 800c726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c72a:	f1a3 0104 	sub.w	r1, r3, #4
 800c72e:	4603      	mov	r3, r0
 800c730:	dc0d      	bgt.n	800c74e <nl_func_relu_generic_array_f32+0x112>
 800c732:	f842 5d04 	str.w	r5, [r2, #-4]!
 800c736:	68a3      	ldr	r3, [r4, #8]
 800c738:	4283      	cmp	r3, r0
 800c73a:	d8ba      	bhi.n	800c6b2 <nl_func_relu_generic_array_f32+0x76>
 800c73c:	460b      	mov	r3, r1
 800c73e:	e7ec      	b.n	800c71a <nl_func_relu_generic_array_f32+0xde>
 800c740:	ed62 7a01 	vstmdb	r2!, {s15}
 800c744:	68a0      	ldr	r0, [r4, #8]
 800c746:	4298      	cmp	r0, r3
 800c748:	d8b3      	bhi.n	800c6b2 <nl_func_relu_generic_array_f32+0x76>
 800c74a:	460b      	mov	r3, r1
 800c74c:	e7c8      	b.n	800c6e0 <nl_func_relu_generic_array_f32+0xa4>
 800c74e:	ed62 7a01 	vstmdb	r2!, {s15}
 800c752:	68a0      	ldr	r0, [r4, #8]
 800c754:	4298      	cmp	r0, r3
 800c756:	d8ac      	bhi.n	800c6b2 <nl_func_relu_generic_array_f32+0x76>
 800c758:	460b      	mov	r3, r1
 800c75a:	e7de      	b.n	800c71a <nl_func_relu_generic_array_f32+0xde>

0800c75c <forward_relu>:
 800c75c:	6982      	ldr	r2, [r0, #24]
 800c75e:	8813      	ldrh	r3, [r2, #0]
 800c760:	b30b      	cbz	r3, 800c7a6 <forward_relu+0x4a>
 800c762:	6852      	ldr	r2, [r2, #4]
 800c764:	6851      	ldr	r1, [r2, #4]
 800c766:	b101      	cbz	r1, 800c76a <forward_relu+0xe>
 800c768:	6809      	ldr	r1, [r1, #0]
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	f000 8094 	beq.w	800c898 <forward_relu+0x13c>
 800c770:	b470      	push	{r4, r5, r6}
 800c772:	6916      	ldr	r6, [r2, #16]
 800c774:	b106      	cbz	r6, 800c778 <forward_relu+0x1c>
 800c776:	6836      	ldr	r6, [r6, #0]
 800c778:	69c0      	ldr	r0, [r0, #28]
 800c77a:	b1b0      	cbz	r0, 800c7aa <forward_relu+0x4e>
 800c77c:	6843      	ldr	r3, [r0, #4]
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d043      	beq.n	800c80a <forward_relu+0xae>
 800c782:	688b      	ldr	r3, [r1, #8]
 800c784:	0a1b      	lsrs	r3, r3, #8
 800c786:	d078      	beq.n	800c87a <forward_relu+0x11e>
 800c788:	68cd      	ldr	r5, [r1, #12]
 800c78a:	2201      	movs	r2, #1
 800c78c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c790:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800c794:	42ab      	cmp	r3, r5
 800c796:	fb04 f202 	mul.w	r2, r4, r2
 800c79a:	d1f9      	bne.n	800c790 <forward_relu+0x34>
 800c79c:	6883      	ldr	r3, [r0, #8]
 800c79e:	4630      	mov	r0, r6
 800c7a0:	bc70      	pop	{r4, r5, r6}
 800c7a2:	f7ff bf4b 	b.w	800c63c <nl_func_relu_generic_array_f32>
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	deff      	udf	#255	@ 0xff
 800c7aa:	688b      	ldr	r3, [r1, #8]
 800c7ac:	0a1b      	lsrs	r3, r3, #8
 800c7ae:	d066      	beq.n	800c87e <forward_relu+0x122>
 800c7b0:	68cc      	ldr	r4, [r1, #12]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c7b8:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800c7bc:	429c      	cmp	r4, r3
 800c7be:	fb00 f202 	mul.w	r2, r0, r2
 800c7c2:	d1f9      	bne.n	800c7b8 <forward_relu+0x5c>
 800c7c4:	698c      	ldr	r4, [r1, #24]
 800c7c6:	69b1      	ldr	r1, [r6, #24]
 800c7c8:	68a0      	ldr	r0, [r4, #8]
 800c7ca:	6889      	ldr	r1, [r1, #8]
 800c7cc:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800c7d6:	4290      	cmp	r0, r2
 800c7d8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800c7dc:	d813      	bhi.n	800c806 <forward_relu+0xaa>
 800c7de:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800c8a0 <forward_relu+0x144>
 800c7e2:	3204      	adds	r2, #4
 800c7e4:	3104      	adds	r1, #4
 800c7e6:	4613      	mov	r3, r2
 800c7e8:	ed72 7a01 	vldmdb	r2!, {s15}
 800c7ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7f4:	bfb8      	it	lt
 800c7f6:	eef0 7a47 	vmovlt.f32	s15, s14
 800c7fa:	ed61 7a01 	vstmdb	r1!, {s15}
 800c7fe:	68a0      	ldr	r0, [r4, #8]
 800c800:	3b08      	subs	r3, #8
 800c802:	4298      	cmp	r0, r3
 800c804:	d9ef      	bls.n	800c7e6 <forward_relu+0x8a>
 800c806:	bc70      	pop	{r4, r5, r6}
 800c808:	4770      	bx	lr
 800c80a:	688a      	ldr	r2, [r1, #8]
 800c80c:	0a12      	lsrs	r2, r2, #8
 800c80e:	d03b      	beq.n	800c888 <forward_relu+0x12c>
 800c810:	68cd      	ldr	r5, [r1, #12]
 800c812:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800c816:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 800c81a:	4295      	cmp	r5, r2
 800c81c:	fb04 f303 	mul.w	r3, r4, r3
 800c820:	d1f9      	bne.n	800c816 <forward_relu+0xba>
 800c822:	698c      	ldr	r4, [r1, #24]
 800c824:	69b2      	ldr	r2, [r6, #24]
 800c826:	68a1      	ldr	r1, [r4, #8]
 800c828:	6892      	ldr	r2, [r2, #8]
 800c82a:	6880      	ldr	r0, [r0, #8]
 800c82c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c830:	3b01      	subs	r3, #1
 800c832:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c836:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c83a:	4299      	cmp	r1, r3
 800c83c:	ed90 7a00 	vldr	s14, [r0]
 800c840:	d8e1      	bhi.n	800c806 <forward_relu+0xaa>
 800c842:	2500      	movs	r5, #0
 800c844:	3304      	adds	r3, #4
 800c846:	3204      	adds	r2, #4
 800c848:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c84c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c854:	f1a3 0104 	sub.w	r1, r3, #4
 800c858:	d507      	bpl.n	800c86a <forward_relu+0x10e>
 800c85a:	ed62 7a01 	vstmdb	r2!, {s15}
 800c85e:	68a0      	ldr	r0, [r4, #8]
 800c860:	3b08      	subs	r3, #8
 800c862:	4298      	cmp	r0, r3
 800c864:	d8cf      	bhi.n	800c806 <forward_relu+0xaa>
 800c866:	460b      	mov	r3, r1
 800c868:	e7ee      	b.n	800c848 <forward_relu+0xec>
 800c86a:	f842 5d04 	str.w	r5, [r2, #-4]!
 800c86e:	68a0      	ldr	r0, [r4, #8]
 800c870:	3b08      	subs	r3, #8
 800c872:	4298      	cmp	r0, r3
 800c874:	d8c7      	bhi.n	800c806 <forward_relu+0xaa>
 800c876:	460b      	mov	r3, r1
 800c878:	e7e6      	b.n	800c848 <forward_relu+0xec>
 800c87a:	2201      	movs	r2, #1
 800c87c:	e78e      	b.n	800c79c <forward_relu+0x40>
 800c87e:	698c      	ldr	r4, [r1, #24]
 800c880:	69b3      	ldr	r3, [r6, #24]
 800c882:	68a2      	ldr	r2, [r4, #8]
 800c884:	6899      	ldr	r1, [r3, #8]
 800c886:	e7aa      	b.n	800c7de <forward_relu+0x82>
 800c888:	6883      	ldr	r3, [r0, #8]
 800c88a:	698c      	ldr	r4, [r1, #24]
 800c88c:	69b2      	ldr	r2, [r6, #24]
 800c88e:	ed93 7a00 	vldr	s14, [r3]
 800c892:	6892      	ldr	r2, [r2, #8]
 800c894:	68a3      	ldr	r3, [r4, #8]
 800c896:	e7d4      	b.n	800c842 <forward_relu+0xe6>
 800c898:	2300      	movs	r3, #0
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	deff      	udf	#255	@ 0xff
 800c89e:	bf00      	nop
 800c8a0:	00000000 	.word	0x00000000

0800c8a4 <forward_sm>:
 800c8a4:	6982      	ldr	r2, [r0, #24]
 800c8a6:	8813      	ldrh	r3, [r2, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d054      	beq.n	800c956 <forward_sm+0xb2>
 800c8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b0:	6852      	ldr	r2, [r2, #4]
 800c8b2:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	f1b8 0f00 	cmp.w	r8, #0
 800c8bc:	d001      	beq.n	800c8c2 <forward_sm+0x1e>
 800c8be:	f8d8 8000 	ldr.w	r8, [r8]
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d04b      	beq.n	800c95e <forward_sm+0xba>
 800c8c6:	6913      	ldr	r3, [r2, #16]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d04b      	beq.n	800c964 <forward_sm+0xc0>
 800c8cc:	6818      	ldr	r0, [r3, #0]
 800c8ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c8d2:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800c8d6:	68c2      	ldr	r2, [r0, #12]
 800c8d8:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800c8dc:	6857      	ldr	r7, [r2, #4]
 800c8de:	0a1b      	lsrs	r3, r3, #8
 800c8e0:	d03b      	beq.n	800c95a <forward_sm+0xb6>
 800c8e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c8ec:	429c      	cmp	r4, r3
 800c8ee:	fb01 f202 	mul.w	r2, r1, r2
 800c8f2:	d1f9      	bne.n	800c8e8 <forward_sm+0x44>
 800c8f4:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800c8f8:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800c8fc:	68b4      	ldr	r4, [r6, #8]
 800c8fe:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800c902:	eba2 030a 	sub.w	r3, r2, sl
 800c906:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800c90a:	68f3      	ldr	r3, [r6, #12]
 800c90c:	1bd2      	subs	r2, r2, r7
 800c90e:	429c      	cmp	r4, r3
 800c910:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800c914:	d317      	bcc.n	800c946 <forward_sm+0xa2>
 800c916:	00bf      	lsls	r7, r7, #2
 800c918:	427f      	negs	r7, r7
 800c91a:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
 800c91e:	4652      	mov	r2, sl
 800c920:	f1cb 0b00 	rsb	fp, fp, #0
 800c924:	46ba      	mov	sl, r7
 800c926:	4607      	mov	r7, r0
 800c928:	60b4      	str	r4, [r6, #8]
 800c92a:	2300      	movs	r3, #0
 800c92c:	f8c9 5008 	str.w	r5, [r9, #8]
 800c930:	4641      	mov	r1, r8
 800c932:	4638      	mov	r0, r7
 800c934:	9201      	str	r2, [sp, #4]
 800c936:	f7ff fe35 	bl	800c5a4 <nl_func_sm_channel_f32>
 800c93a:	68f3      	ldr	r3, [r6, #12]
 800c93c:	9a01      	ldr	r2, [sp, #4]
 800c93e:	445c      	add	r4, fp
 800c940:	429c      	cmp	r4, r3
 800c942:	4455      	add	r5, sl
 800c944:	d2f0      	bcs.n	800c928 <forward_sm+0x84>
 800c946:	60b3      	str	r3, [r6, #8]
 800c948:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c94c:	f8c9 3008 	str.w	r3, [r9, #8]
 800c950:	b003      	add	sp, #12
 800c952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	deff      	udf	#255	@ 0xff
 800c95a:	2201      	movs	r2, #1
 800c95c:	e7ca      	b.n	800c8f4 <forward_sm+0x50>
 800c95e:	2300      	movs	r3, #0
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	deff      	udf	#255	@ 0xff
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	deff      	udf	#255	@ 0xff

0800c968 <ai_check_custom_types>:
 800c968:	b082      	sub	sp, #8
 800c96a:	4b13      	ldr	r3, [pc, #76]	@ (800c9b8 <ai_check_custom_types+0x50>)
 800c96c:	9301      	str	r3, [sp, #4]
 800c96e:	b118      	cbz	r0, 800c978 <ai_check_custom_types+0x10>
 800c970:	7803      	ldrb	r3, [r0, #0]
 800c972:	2b03      	cmp	r3, #3
 800c974:	d002      	beq.n	800c97c <ai_check_custom_types+0x14>
 800c976:	2000      	movs	r0, #0
 800c978:	b002      	add	sp, #8
 800c97a:	4770      	bx	lr
 800c97c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c980:	4293      	cmp	r3, r2
 800c982:	d004      	beq.n	800c98e <ai_check_custom_types+0x26>
 800c984:	2001      	movs	r0, #1
 800c986:	f080 0001 	eor.w	r0, r0, #1
 800c98a:	b002      	add	sp, #8
 800c98c:	4770      	bx	lr
 800c98e:	7842      	ldrb	r2, [r0, #1]
 800c990:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c994:	429a      	cmp	r2, r3
 800c996:	f100 0001 	add.w	r0, r0, #1
 800c99a:	d1f3      	bne.n	800c984 <ai_check_custom_types+0x1c>
 800c99c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800c9a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d1ed      	bne.n	800c984 <ai_check_custom_types+0x1c>
 800c9a8:	7842      	ldrb	r2, [r0, #1]
 800c9aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d1e8      	bne.n	800c984 <ai_check_custom_types+0x1c>
 800c9b2:	2000      	movs	r0, #0
 800c9b4:	e7e7      	b.n	800c986 <ai_check_custom_types+0x1e>
 800c9b6:	bf00      	nop
 800c9b8:	84048403 	.word	0x84048403

0800c9bc <ai_layers_init_all>:
 800c9bc:	4601      	mov	r1, r0
 800c9be:	2000      	movs	r0, #0
 800c9c0:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800c9c2:	b143      	cbz	r3, 800c9d6 <ai_layers_init_all+0x1a>
 800c9c4:	691a      	ldr	r2, [r3, #16]
 800c9c6:	60d9      	str	r1, [r3, #12]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	f100 0001 	add.w	r0, r0, #1
 800c9ce:	d002      	beq.n	800c9d6 <ai_layers_init_all+0x1a>
 800c9d0:	b10a      	cbz	r2, 800c9d6 <ai_layers_init_all+0x1a>
 800c9d2:	4613      	mov	r3, r2
 800c9d4:	e7f5      	b.n	800c9c2 <ai_layers_init_all+0x6>
 800c9d6:	4770      	bx	lr

0800c9d8 <ai_layers_post_init_all>:
 800c9d8:	b538      	push	{r3, r4, r5, lr}
 800c9da:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800c9dc:	2500      	movs	r5, #0
 800c9de:	b16c      	cbz	r4, 800c9fc <ai_layers_post_init_all+0x24>
 800c9e0:	6863      	ldr	r3, [r4, #4]
 800c9e2:	07db      	lsls	r3, r3, #31
 800c9e4:	d504      	bpl.n	800c9f0 <ai_layers_post_init_all+0x18>
 800c9e6:	6a23      	ldr	r3, [r4, #32]
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	b10b      	cbz	r3, 800c9f0 <ai_layers_post_init_all+0x18>
 800c9ec:	4798      	blx	r3
 800c9ee:	3501      	adds	r5, #1
 800c9f0:	6923      	ldr	r3, [r4, #16]
 800c9f2:	42a3      	cmp	r3, r4
 800c9f4:	d002      	beq.n	800c9fc <ai_layers_post_init_all+0x24>
 800c9f6:	b10b      	cbz	r3, 800c9fc <ai_layers_post_init_all+0x24>
 800c9f8:	461c      	mov	r4, r3
 800c9fa:	e7f0      	b.n	800c9de <ai_layers_post_init_all+0x6>
 800c9fc:	4628      	mov	r0, r5
 800c9fe:	bd38      	pop	{r3, r4, r5, pc}

0800ca00 <ai_layers_forward_all>:
 800ca00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca04:	6bc7      	ldr	r7, [r0, #60]	@ 0x3c
 800ca06:	4604      	mov	r4, r0
 800ca08:	2f00      	cmp	r7, #0
 800ca0a:	d02d      	beq.n	800ca68 <ai_layers_forward_all+0x68>
 800ca0c:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800ca0e:	b1e9      	cbz	r1, 800ca4c <ai_layers_forward_all+0x4c>
 800ca10:	6381      	str	r1, [r0, #56]	@ 0x38
 800ca12:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800ca14:	2001      	movs	r0, #1
 800ca16:	47b8      	blx	r7
 800ca18:	2600      	movs	r6, #0
 800ca1a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ca1c:	46b0      	mov	r8, r6
 800ca1e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800ca20:	2002      	movs	r0, #2
 800ca22:	47b8      	blx	r7
 800ca24:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800ca26:	696b      	ldr	r3, [r5, #20]
 800ca28:	4628      	mov	r0, r5
 800ca2a:	4798      	blx	r3
 800ca2c:	692b      	ldr	r3, [r5, #16]
 800ca2e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800ca30:	429d      	cmp	r5, r3
 800ca32:	f04f 0003 	mov.w	r0, #3
 800ca36:	4619      	mov	r1, r3
 800ca38:	d00c      	beq.n	800ca54 <ai_layers_forward_all+0x54>
 800ca3a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ca3c:	47b8      	blx	r7
 800ca3e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ca40:	3601      	adds	r6, #1
 800ca42:	2900      	cmp	r1, #0
 800ca44:	d1eb      	bne.n	800ca1e <ai_layers_forward_all+0x1e>
 800ca46:	4630      	mov	r0, r6
 800ca48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca4c:	460e      	mov	r6, r1
 800ca4e:	4630      	mov	r0, r6
 800ca50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca54:	2100      	movs	r1, #0
 800ca56:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
 800ca5a:	2003      	movs	r0, #3
 800ca5c:	47b8      	blx	r7
 800ca5e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ca60:	3601      	adds	r6, #1
 800ca62:	2900      	cmp	r1, #0
 800ca64:	d1db      	bne.n	800ca1e <ai_layers_forward_all+0x1e>
 800ca66:	e7ee      	b.n	800ca46 <ai_layers_forward_all+0x46>
 800ca68:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 800ca6a:	b19d      	cbz	r5, 800ca94 <ai_layers_forward_all+0x94>
 800ca6c:	6385      	str	r5, [r0, #56]	@ 0x38
 800ca6e:	463e      	mov	r6, r7
 800ca70:	e003      	b.n	800ca7a <ai_layers_forward_all+0x7a>
 800ca72:	63a5      	str	r5, [r4, #56]	@ 0x38
 800ca74:	3601      	adds	r6, #1
 800ca76:	2d00      	cmp	r5, #0
 800ca78:	d0e5      	beq.n	800ca46 <ai_layers_forward_all+0x46>
 800ca7a:	696b      	ldr	r3, [r5, #20]
 800ca7c:	4628      	mov	r0, r5
 800ca7e:	4798      	blx	r3
 800ca80:	462b      	mov	r3, r5
 800ca82:	692d      	ldr	r5, [r5, #16]
 800ca84:	429d      	cmp	r5, r3
 800ca86:	d1f4      	bne.n	800ca72 <ai_layers_forward_all+0x72>
 800ca88:	2300      	movs	r3, #0
 800ca8a:	3601      	adds	r6, #1
 800ca8c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ca8e:	4630      	mov	r0, r6
 800ca90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca94:	462e      	mov	r6, r5
 800ca96:	e7d6      	b.n	800ca46 <ai_layers_forward_all+0x46>

0800ca98 <ai_version_get>:
 800ca98:	0212      	lsls	r2, r2, #8
 800ca9a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ca9e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800caa2:	4770      	bx	lr

0800caa4 <get_tensor_byte_size>:
 800caa4:	b410      	push	{r4}
 800caa6:	6983      	ldr	r3, [r0, #24]
 800caa8:	68c4      	ldr	r4, [r0, #12]
 800caaa:	6941      	ldr	r1, [r0, #20]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	68e0      	ldr	r0, [r4, #12]
 800cab0:	4a07      	ldr	r2, [pc, #28]	@ (800cad0 <get_tensor_byte_size+0x2c>)
 800cab2:	68c9      	ldr	r1, [r1, #12]
 800cab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cab8:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800cabc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800cac0:	fb01 f000 	mul.w	r0, r1, r0
 800cac4:	4293      	cmp	r3, r2
 800cac6:	bf04      	itt	eq
 800cac8:	3007      	addeq	r0, #7
 800caca:	08c0      	lsreq	r0, r0, #3
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop
 800cad0:	000400c0 	.word	0x000400c0

0800cad4 <ai_array_to_buffer_fmt>:
 800cad4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800cad8:	2b02      	cmp	r3, #2
 800cada:	d050      	beq.n	800cb7e <ai_array_to_buffer_fmt+0xaa>
 800cadc:	4b2a      	ldr	r3, [pc, #168]	@ (800cb88 <ai_array_to_buffer_fmt+0xb4>)
 800cade:	f020 427e 	bic.w	r2, r0, #4261412864	@ 0xfe000000
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d00b      	beq.n	800cafe <ai_array_to_buffer_fmt+0x2a>
 800cae6:	dc1c      	bgt.n	800cb22 <ai_array_to_buffer_fmt+0x4e>
 800cae8:	4b28      	ldr	r3, [pc, #160]	@ (800cb8c <ai_array_to_buffer_fmt+0xb8>)
 800caea:	429a      	cmp	r2, r3
 800caec:	d007      	beq.n	800cafe <ai_array_to_buffer_fmt+0x2a>
 800caee:	dd0b      	ble.n	800cb08 <ai_array_to_buffer_fmt+0x34>
 800caf0:	4b27      	ldr	r3, [pc, #156]	@ (800cb90 <ai_array_to_buffer_fmt+0xbc>)
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d003      	beq.n	800cafe <ai_array_to_buffer_fmt+0x2a>
 800caf6:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d131      	bne.n	800cb62 <ai_array_to_buffer_fmt+0x8e>
 800cafe:	4613      	mov	r3, r2
 800cb00:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800cb04:	4318      	orrs	r0, r3
 800cb06:	4770      	bx	lr
 800cb08:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d0f6      	beq.n	800cafe <ai_array_to_buffer_fmt+0x2a>
 800cb10:	dd2c      	ble.n	800cb6c <ai_array_to_buffer_fmt+0x98>
 800cb12:	4b20      	ldr	r3, [pc, #128]	@ (800cb94 <ai_array_to_buffer_fmt+0xc0>)
 800cb14:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	bf18      	it	ne
 800cb1c:	2340      	movne	r3, #64	@ 0x40
 800cb1e:	4318      	orrs	r0, r3
 800cb20:	4770      	bx	lr
 800cb22:	4b1d      	ldr	r3, [pc, #116]	@ (800cb98 <ai_array_to_buffer_fmt+0xc4>)
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d0ea      	beq.n	800cafe <ai_array_to_buffer_fmt+0x2a>
 800cb28:	dd0e      	ble.n	800cb48 <ai_array_to_buffer_fmt+0x74>
 800cb2a:	4b1c      	ldr	r3, [pc, #112]	@ (800cb9c <ai_array_to_buffer_fmt+0xc8>)
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d0e6      	beq.n	800cafe <ai_array_to_buffer_fmt+0x2a>
 800cb30:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d0e2      	beq.n	800cafe <ai_array_to_buffer_fmt+0x2a>
 800cb38:	4b19      	ldr	r3, [pc, #100]	@ (800cba0 <ai_array_to_buffer_fmt+0xcc>)
 800cb3a:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	bf18      	it	ne
 800cb42:	2340      	movne	r3, #64	@ 0x40
 800cb44:	4318      	orrs	r0, r3
 800cb46:	4770      	bx	lr
 800cb48:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d0d6      	beq.n	800cafe <ai_array_to_buffer_fmt+0x2a>
 800cb50:	3307      	adds	r3, #7
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d0d3      	beq.n	800cafe <ai_array_to_buffer_fmt+0x2a>
 800cb56:	f2a3 3387 	subw	r3, r3, #903	@ 0x387
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	bf18      	it	ne
 800cb5e:	2340      	movne	r3, #64	@ 0x40
 800cb60:	e7ce      	b.n	800cb00 <ai_array_to_buffer_fmt+0x2c>
 800cb62:	4b10      	ldr	r3, [pc, #64]	@ (800cba4 <ai_array_to_buffer_fmt+0xd0>)
 800cb64:	429a      	cmp	r2, r3
 800cb66:	bf18      	it	ne
 800cb68:	2340      	movne	r3, #64	@ 0x40
 800cb6a:	e7c9      	b.n	800cb00 <ai_array_to_buffer_fmt+0x2c>
 800cb6c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d0c4      	beq.n	800cafe <ai_array_to_buffer_fmt+0x2a>
 800cb74:	3380      	adds	r3, #128	@ 0x80
 800cb76:	429a      	cmp	r2, r3
 800cb78:	bf18      	it	ne
 800cb7a:	2340      	movne	r3, #64	@ 0x40
 800cb7c:	e7c0      	b.n	800cb00 <ai_array_to_buffer_fmt+0x2c>
 800cb7e:	4b0a      	ldr	r3, [pc, #40]	@ (800cba8 <ai_array_to_buffer_fmt+0xd4>)
 800cb80:	4003      	ands	r3, r0
 800cb82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cb86:	e7bb      	b.n	800cb00 <ai_array_to_buffer_fmt+0x2c>
 800cb88:	00840040 	.word	0x00840040
 800cb8c:	00040840 	.word	0x00040840
 800cb90:	00041040 	.word	0x00041040
 800cb94:	00040447 	.word	0x00040447
 800cb98:	00840840 	.word	0x00840840
 800cb9c:	00841040 	.word	0x00841040
 800cba0:	0084084f 	.word	0x0084084f
 800cba4:	0004084f 	.word	0x0004084f
 800cba8:	00803fff 	.word	0x00803fff

0800cbac <ai_array_get_byte_size>:
 800cbac:	b319      	cbz	r1, 800cbf6 <ai_array_get_byte_size+0x4a>
 800cbae:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800cbb2:	fb03 f101 	mul.w	r1, r3, r1
 800cbb6:	3107      	adds	r1, #7
 800cbb8:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800cbbc:	f021 0307 	bic.w	r3, r1, #7
 800cbc0:	2a04      	cmp	r2, #4
 800cbc2:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800cbc6:	fa23 f101 	lsr.w	r1, r3, r1
 800cbca:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800cbce:	d00b      	beq.n	800cbe8 <ai_array_get_byte_size+0x3c>
 800cbd0:	2a08      	cmp	r2, #8
 800cbd2:	d002      	beq.n	800cbda <ai_array_get_byte_size+0x2e>
 800cbd4:	3107      	adds	r1, #7
 800cbd6:	08c8      	lsrs	r0, r1, #3
 800cbd8:	4770      	bx	lr
 800cbda:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800cbde:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800cbe2:	3107      	adds	r1, #7
 800cbe4:	08c8      	lsrs	r0, r1, #3
 800cbe6:	4770      	bx	lr
 800cbe8:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800cbec:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800cbf0:	3107      	adds	r1, #7
 800cbf2:	08c8      	lsrs	r0, r1, #3
 800cbf4:	4770      	bx	lr
 800cbf6:	4608      	mov	r0, r1
 800cbf8:	4770      	bx	lr
 800cbfa:	bf00      	nop

0800cbfc <ai_array_get_data_byte_size>:
 800cbfc:	b169      	cbz	r1, 800cc1a <ai_array_get_data_byte_size+0x1e>
 800cbfe:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800cc02:	fb02 f101 	mul.w	r1, r2, r1
 800cc06:	1dcb      	adds	r3, r1, #7
 800cc08:	f023 0307 	bic.w	r3, r3, #7
 800cc0c:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800cc10:	fa23 f000 	lsr.w	r0, r3, r0
 800cc14:	3007      	adds	r0, #7
 800cc16:	08c0      	lsrs	r0, r0, #3
 800cc18:	4770      	bx	lr
 800cc1a:	4608      	mov	r0, r1
 800cc1c:	4770      	bx	lr
 800cc1e:	bf00      	nop

0800cc20 <malloc>:
 800cc20:	4b02      	ldr	r3, [pc, #8]	@ (800cc2c <malloc+0xc>)
 800cc22:	4601      	mov	r1, r0
 800cc24:	6818      	ldr	r0, [r3, #0]
 800cc26:	f000 b825 	b.w	800cc74 <_malloc_r>
 800cc2a:	bf00      	nop
 800cc2c:	200008b0 	.word	0x200008b0

0800cc30 <sbrk_aligned>:
 800cc30:	b570      	push	{r4, r5, r6, lr}
 800cc32:	4e0f      	ldr	r6, [pc, #60]	@ (800cc70 <sbrk_aligned+0x40>)
 800cc34:	460c      	mov	r4, r1
 800cc36:	6831      	ldr	r1, [r6, #0]
 800cc38:	4605      	mov	r5, r0
 800cc3a:	b911      	cbnz	r1, 800cc42 <sbrk_aligned+0x12>
 800cc3c:	f001 f9de 	bl	800dffc <_sbrk_r>
 800cc40:	6030      	str	r0, [r6, #0]
 800cc42:	4621      	mov	r1, r4
 800cc44:	4628      	mov	r0, r5
 800cc46:	f001 f9d9 	bl	800dffc <_sbrk_r>
 800cc4a:	1c43      	adds	r3, r0, #1
 800cc4c:	d103      	bne.n	800cc56 <sbrk_aligned+0x26>
 800cc4e:	f04f 34ff 	mov.w	r4, #4294967295
 800cc52:	4620      	mov	r0, r4
 800cc54:	bd70      	pop	{r4, r5, r6, pc}
 800cc56:	1cc4      	adds	r4, r0, #3
 800cc58:	f024 0403 	bic.w	r4, r4, #3
 800cc5c:	42a0      	cmp	r0, r4
 800cc5e:	d0f8      	beq.n	800cc52 <sbrk_aligned+0x22>
 800cc60:	1a21      	subs	r1, r4, r0
 800cc62:	4628      	mov	r0, r5
 800cc64:	f001 f9ca 	bl	800dffc <_sbrk_r>
 800cc68:	3001      	adds	r0, #1
 800cc6a:	d1f2      	bne.n	800cc52 <sbrk_aligned+0x22>
 800cc6c:	e7ef      	b.n	800cc4e <sbrk_aligned+0x1e>
 800cc6e:	bf00      	nop
 800cc70:	200033a8 	.word	0x200033a8

0800cc74 <_malloc_r>:
 800cc74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc78:	1ccd      	adds	r5, r1, #3
 800cc7a:	f025 0503 	bic.w	r5, r5, #3
 800cc7e:	3508      	adds	r5, #8
 800cc80:	2d0c      	cmp	r5, #12
 800cc82:	bf38      	it	cc
 800cc84:	250c      	movcc	r5, #12
 800cc86:	2d00      	cmp	r5, #0
 800cc88:	4606      	mov	r6, r0
 800cc8a:	db01      	blt.n	800cc90 <_malloc_r+0x1c>
 800cc8c:	42a9      	cmp	r1, r5
 800cc8e:	d904      	bls.n	800cc9a <_malloc_r+0x26>
 800cc90:	230c      	movs	r3, #12
 800cc92:	6033      	str	r3, [r6, #0]
 800cc94:	2000      	movs	r0, #0
 800cc96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cd70 <_malloc_r+0xfc>
 800cc9e:	f000 f869 	bl	800cd74 <__malloc_lock>
 800cca2:	f8d8 3000 	ldr.w	r3, [r8]
 800cca6:	461c      	mov	r4, r3
 800cca8:	bb44      	cbnz	r4, 800ccfc <_malloc_r+0x88>
 800ccaa:	4629      	mov	r1, r5
 800ccac:	4630      	mov	r0, r6
 800ccae:	f7ff ffbf 	bl	800cc30 <sbrk_aligned>
 800ccb2:	1c43      	adds	r3, r0, #1
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	d158      	bne.n	800cd6a <_malloc_r+0xf6>
 800ccb8:	f8d8 4000 	ldr.w	r4, [r8]
 800ccbc:	4627      	mov	r7, r4
 800ccbe:	2f00      	cmp	r7, #0
 800ccc0:	d143      	bne.n	800cd4a <_malloc_r+0xd6>
 800ccc2:	2c00      	cmp	r4, #0
 800ccc4:	d04b      	beq.n	800cd5e <_malloc_r+0xea>
 800ccc6:	6823      	ldr	r3, [r4, #0]
 800ccc8:	4639      	mov	r1, r7
 800ccca:	4630      	mov	r0, r6
 800cccc:	eb04 0903 	add.w	r9, r4, r3
 800ccd0:	f001 f994 	bl	800dffc <_sbrk_r>
 800ccd4:	4581      	cmp	r9, r0
 800ccd6:	d142      	bne.n	800cd5e <_malloc_r+0xea>
 800ccd8:	6821      	ldr	r1, [r4, #0]
 800ccda:	1a6d      	subs	r5, r5, r1
 800ccdc:	4629      	mov	r1, r5
 800ccde:	4630      	mov	r0, r6
 800cce0:	f7ff ffa6 	bl	800cc30 <sbrk_aligned>
 800cce4:	3001      	adds	r0, #1
 800cce6:	d03a      	beq.n	800cd5e <_malloc_r+0xea>
 800cce8:	6823      	ldr	r3, [r4, #0]
 800ccea:	442b      	add	r3, r5
 800ccec:	6023      	str	r3, [r4, #0]
 800ccee:	f8d8 3000 	ldr.w	r3, [r8]
 800ccf2:	685a      	ldr	r2, [r3, #4]
 800ccf4:	bb62      	cbnz	r2, 800cd50 <_malloc_r+0xdc>
 800ccf6:	f8c8 7000 	str.w	r7, [r8]
 800ccfa:	e00f      	b.n	800cd1c <_malloc_r+0xa8>
 800ccfc:	6822      	ldr	r2, [r4, #0]
 800ccfe:	1b52      	subs	r2, r2, r5
 800cd00:	d420      	bmi.n	800cd44 <_malloc_r+0xd0>
 800cd02:	2a0b      	cmp	r2, #11
 800cd04:	d917      	bls.n	800cd36 <_malloc_r+0xc2>
 800cd06:	1961      	adds	r1, r4, r5
 800cd08:	42a3      	cmp	r3, r4
 800cd0a:	6025      	str	r5, [r4, #0]
 800cd0c:	bf18      	it	ne
 800cd0e:	6059      	strne	r1, [r3, #4]
 800cd10:	6863      	ldr	r3, [r4, #4]
 800cd12:	bf08      	it	eq
 800cd14:	f8c8 1000 	streq.w	r1, [r8]
 800cd18:	5162      	str	r2, [r4, r5]
 800cd1a:	604b      	str	r3, [r1, #4]
 800cd1c:	4630      	mov	r0, r6
 800cd1e:	f000 f82f 	bl	800cd80 <__malloc_unlock>
 800cd22:	f104 000b 	add.w	r0, r4, #11
 800cd26:	1d23      	adds	r3, r4, #4
 800cd28:	f020 0007 	bic.w	r0, r0, #7
 800cd2c:	1ac2      	subs	r2, r0, r3
 800cd2e:	bf1c      	itt	ne
 800cd30:	1a1b      	subne	r3, r3, r0
 800cd32:	50a3      	strne	r3, [r4, r2]
 800cd34:	e7af      	b.n	800cc96 <_malloc_r+0x22>
 800cd36:	6862      	ldr	r2, [r4, #4]
 800cd38:	42a3      	cmp	r3, r4
 800cd3a:	bf0c      	ite	eq
 800cd3c:	f8c8 2000 	streq.w	r2, [r8]
 800cd40:	605a      	strne	r2, [r3, #4]
 800cd42:	e7eb      	b.n	800cd1c <_malloc_r+0xa8>
 800cd44:	4623      	mov	r3, r4
 800cd46:	6864      	ldr	r4, [r4, #4]
 800cd48:	e7ae      	b.n	800cca8 <_malloc_r+0x34>
 800cd4a:	463c      	mov	r4, r7
 800cd4c:	687f      	ldr	r7, [r7, #4]
 800cd4e:	e7b6      	b.n	800ccbe <_malloc_r+0x4a>
 800cd50:	461a      	mov	r2, r3
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	42a3      	cmp	r3, r4
 800cd56:	d1fb      	bne.n	800cd50 <_malloc_r+0xdc>
 800cd58:	2300      	movs	r3, #0
 800cd5a:	6053      	str	r3, [r2, #4]
 800cd5c:	e7de      	b.n	800cd1c <_malloc_r+0xa8>
 800cd5e:	230c      	movs	r3, #12
 800cd60:	6033      	str	r3, [r6, #0]
 800cd62:	4630      	mov	r0, r6
 800cd64:	f000 f80c 	bl	800cd80 <__malloc_unlock>
 800cd68:	e794      	b.n	800cc94 <_malloc_r+0x20>
 800cd6a:	6005      	str	r5, [r0, #0]
 800cd6c:	e7d6      	b.n	800cd1c <_malloc_r+0xa8>
 800cd6e:	bf00      	nop
 800cd70:	200033ac 	.word	0x200033ac

0800cd74 <__malloc_lock>:
 800cd74:	4801      	ldr	r0, [pc, #4]	@ (800cd7c <__malloc_lock+0x8>)
 800cd76:	f001 b98e 	b.w	800e096 <__retarget_lock_acquire_recursive>
 800cd7a:	bf00      	nop
 800cd7c:	200034f0 	.word	0x200034f0

0800cd80 <__malloc_unlock>:
 800cd80:	4801      	ldr	r0, [pc, #4]	@ (800cd88 <__malloc_unlock+0x8>)
 800cd82:	f001 b989 	b.w	800e098 <__retarget_lock_release_recursive>
 800cd86:	bf00      	nop
 800cd88:	200034f0 	.word	0x200034f0

0800cd8c <_realloc_r>:
 800cd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd90:	4680      	mov	r8, r0
 800cd92:	4615      	mov	r5, r2
 800cd94:	460c      	mov	r4, r1
 800cd96:	b921      	cbnz	r1, 800cda2 <_realloc_r+0x16>
 800cd98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd9c:	4611      	mov	r1, r2
 800cd9e:	f7ff bf69 	b.w	800cc74 <_malloc_r>
 800cda2:	b92a      	cbnz	r2, 800cdb0 <_realloc_r+0x24>
 800cda4:	f001 ffdc 	bl	800ed60 <_free_r>
 800cda8:	2400      	movs	r4, #0
 800cdaa:	4620      	mov	r0, r4
 800cdac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdb0:	f002 fcd2 	bl	800f758 <_malloc_usable_size_r>
 800cdb4:	4285      	cmp	r5, r0
 800cdb6:	4606      	mov	r6, r0
 800cdb8:	d802      	bhi.n	800cdc0 <_realloc_r+0x34>
 800cdba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cdbe:	d8f4      	bhi.n	800cdaa <_realloc_r+0x1e>
 800cdc0:	4629      	mov	r1, r5
 800cdc2:	4640      	mov	r0, r8
 800cdc4:	f7ff ff56 	bl	800cc74 <_malloc_r>
 800cdc8:	4607      	mov	r7, r0
 800cdca:	2800      	cmp	r0, #0
 800cdcc:	d0ec      	beq.n	800cda8 <_realloc_r+0x1c>
 800cdce:	42b5      	cmp	r5, r6
 800cdd0:	462a      	mov	r2, r5
 800cdd2:	4621      	mov	r1, r4
 800cdd4:	bf28      	it	cs
 800cdd6:	4632      	movcs	r2, r6
 800cdd8:	f001 f95f 	bl	800e09a <memcpy>
 800cddc:	4621      	mov	r1, r4
 800cdde:	4640      	mov	r0, r8
 800cde0:	f001 ffbe 	bl	800ed60 <_free_r>
 800cde4:	463c      	mov	r4, r7
 800cde6:	e7e0      	b.n	800cdaa <_realloc_r+0x1e>

0800cde8 <__cvt>:
 800cde8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdec:	ec57 6b10 	vmov	r6, r7, d0
 800cdf0:	2f00      	cmp	r7, #0
 800cdf2:	460c      	mov	r4, r1
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	463b      	mov	r3, r7
 800cdf8:	bfbb      	ittet	lt
 800cdfa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cdfe:	461f      	movlt	r7, r3
 800ce00:	2300      	movge	r3, #0
 800ce02:	232d      	movlt	r3, #45	@ 0x2d
 800ce04:	700b      	strb	r3, [r1, #0]
 800ce06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce08:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ce0c:	4691      	mov	r9, r2
 800ce0e:	f023 0820 	bic.w	r8, r3, #32
 800ce12:	bfbc      	itt	lt
 800ce14:	4632      	movlt	r2, r6
 800ce16:	4616      	movlt	r6, r2
 800ce18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ce1c:	d005      	beq.n	800ce2a <__cvt+0x42>
 800ce1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ce22:	d100      	bne.n	800ce26 <__cvt+0x3e>
 800ce24:	3401      	adds	r4, #1
 800ce26:	2102      	movs	r1, #2
 800ce28:	e000      	b.n	800ce2c <__cvt+0x44>
 800ce2a:	2103      	movs	r1, #3
 800ce2c:	ab03      	add	r3, sp, #12
 800ce2e:	9301      	str	r3, [sp, #4]
 800ce30:	ab02      	add	r3, sp, #8
 800ce32:	9300      	str	r3, [sp, #0]
 800ce34:	ec47 6b10 	vmov	d0, r6, r7
 800ce38:	4653      	mov	r3, sl
 800ce3a:	4622      	mov	r2, r4
 800ce3c:	f001 f9cc 	bl	800e1d8 <_dtoa_r>
 800ce40:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ce44:	4605      	mov	r5, r0
 800ce46:	d119      	bne.n	800ce7c <__cvt+0x94>
 800ce48:	f019 0f01 	tst.w	r9, #1
 800ce4c:	d00e      	beq.n	800ce6c <__cvt+0x84>
 800ce4e:	eb00 0904 	add.w	r9, r0, r4
 800ce52:	2200      	movs	r2, #0
 800ce54:	2300      	movs	r3, #0
 800ce56:	4630      	mov	r0, r6
 800ce58:	4639      	mov	r1, r7
 800ce5a:	f7f3 fe35 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce5e:	b108      	cbz	r0, 800ce64 <__cvt+0x7c>
 800ce60:	f8cd 900c 	str.w	r9, [sp, #12]
 800ce64:	2230      	movs	r2, #48	@ 0x30
 800ce66:	9b03      	ldr	r3, [sp, #12]
 800ce68:	454b      	cmp	r3, r9
 800ce6a:	d31e      	bcc.n	800ceaa <__cvt+0xc2>
 800ce6c:	9b03      	ldr	r3, [sp, #12]
 800ce6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce70:	1b5b      	subs	r3, r3, r5
 800ce72:	4628      	mov	r0, r5
 800ce74:	6013      	str	r3, [r2, #0]
 800ce76:	b004      	add	sp, #16
 800ce78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ce80:	eb00 0904 	add.w	r9, r0, r4
 800ce84:	d1e5      	bne.n	800ce52 <__cvt+0x6a>
 800ce86:	7803      	ldrb	r3, [r0, #0]
 800ce88:	2b30      	cmp	r3, #48	@ 0x30
 800ce8a:	d10a      	bne.n	800cea2 <__cvt+0xba>
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	2300      	movs	r3, #0
 800ce90:	4630      	mov	r0, r6
 800ce92:	4639      	mov	r1, r7
 800ce94:	f7f3 fe18 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce98:	b918      	cbnz	r0, 800cea2 <__cvt+0xba>
 800ce9a:	f1c4 0401 	rsb	r4, r4, #1
 800ce9e:	f8ca 4000 	str.w	r4, [sl]
 800cea2:	f8da 3000 	ldr.w	r3, [sl]
 800cea6:	4499      	add	r9, r3
 800cea8:	e7d3      	b.n	800ce52 <__cvt+0x6a>
 800ceaa:	1c59      	adds	r1, r3, #1
 800ceac:	9103      	str	r1, [sp, #12]
 800ceae:	701a      	strb	r2, [r3, #0]
 800ceb0:	e7d9      	b.n	800ce66 <__cvt+0x7e>

0800ceb2 <__exponent>:
 800ceb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ceb4:	2900      	cmp	r1, #0
 800ceb6:	bfba      	itte	lt
 800ceb8:	4249      	neglt	r1, r1
 800ceba:	232d      	movlt	r3, #45	@ 0x2d
 800cebc:	232b      	movge	r3, #43	@ 0x2b
 800cebe:	2909      	cmp	r1, #9
 800cec0:	7002      	strb	r2, [r0, #0]
 800cec2:	7043      	strb	r3, [r0, #1]
 800cec4:	dd29      	ble.n	800cf1a <__exponent+0x68>
 800cec6:	f10d 0307 	add.w	r3, sp, #7
 800ceca:	461d      	mov	r5, r3
 800cecc:	270a      	movs	r7, #10
 800cece:	461a      	mov	r2, r3
 800ced0:	fbb1 f6f7 	udiv	r6, r1, r7
 800ced4:	fb07 1416 	mls	r4, r7, r6, r1
 800ced8:	3430      	adds	r4, #48	@ 0x30
 800ceda:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cede:	460c      	mov	r4, r1
 800cee0:	2c63      	cmp	r4, #99	@ 0x63
 800cee2:	f103 33ff 	add.w	r3, r3, #4294967295
 800cee6:	4631      	mov	r1, r6
 800cee8:	dcf1      	bgt.n	800cece <__exponent+0x1c>
 800ceea:	3130      	adds	r1, #48	@ 0x30
 800ceec:	1e94      	subs	r4, r2, #2
 800ceee:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cef2:	1c41      	adds	r1, r0, #1
 800cef4:	4623      	mov	r3, r4
 800cef6:	42ab      	cmp	r3, r5
 800cef8:	d30a      	bcc.n	800cf10 <__exponent+0x5e>
 800cefa:	f10d 0309 	add.w	r3, sp, #9
 800cefe:	1a9b      	subs	r3, r3, r2
 800cf00:	42ac      	cmp	r4, r5
 800cf02:	bf88      	it	hi
 800cf04:	2300      	movhi	r3, #0
 800cf06:	3302      	adds	r3, #2
 800cf08:	4403      	add	r3, r0
 800cf0a:	1a18      	subs	r0, r3, r0
 800cf0c:	b003      	add	sp, #12
 800cf0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf10:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cf14:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cf18:	e7ed      	b.n	800cef6 <__exponent+0x44>
 800cf1a:	2330      	movs	r3, #48	@ 0x30
 800cf1c:	3130      	adds	r1, #48	@ 0x30
 800cf1e:	7083      	strb	r3, [r0, #2]
 800cf20:	70c1      	strb	r1, [r0, #3]
 800cf22:	1d03      	adds	r3, r0, #4
 800cf24:	e7f1      	b.n	800cf0a <__exponent+0x58>
	...

0800cf28 <_printf_float>:
 800cf28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf2c:	b08d      	sub	sp, #52	@ 0x34
 800cf2e:	460c      	mov	r4, r1
 800cf30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cf34:	4616      	mov	r6, r2
 800cf36:	461f      	mov	r7, r3
 800cf38:	4605      	mov	r5, r0
 800cf3a:	f001 f827 	bl	800df8c <_localeconv_r>
 800cf3e:	6803      	ldr	r3, [r0, #0]
 800cf40:	9304      	str	r3, [sp, #16]
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7f3 f994 	bl	8000270 <strlen>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf4c:	f8d8 3000 	ldr.w	r3, [r8]
 800cf50:	9005      	str	r0, [sp, #20]
 800cf52:	3307      	adds	r3, #7
 800cf54:	f023 0307 	bic.w	r3, r3, #7
 800cf58:	f103 0208 	add.w	r2, r3, #8
 800cf5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cf60:	f8d4 b000 	ldr.w	fp, [r4]
 800cf64:	f8c8 2000 	str.w	r2, [r8]
 800cf68:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cf70:	9307      	str	r3, [sp, #28]
 800cf72:	f8cd 8018 	str.w	r8, [sp, #24]
 800cf76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cf7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf7e:	4b9c      	ldr	r3, [pc, #624]	@ (800d1f0 <_printf_float+0x2c8>)
 800cf80:	f04f 32ff 	mov.w	r2, #4294967295
 800cf84:	f7f3 fdd2 	bl	8000b2c <__aeabi_dcmpun>
 800cf88:	bb70      	cbnz	r0, 800cfe8 <_printf_float+0xc0>
 800cf8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf8e:	4b98      	ldr	r3, [pc, #608]	@ (800d1f0 <_printf_float+0x2c8>)
 800cf90:	f04f 32ff 	mov.w	r2, #4294967295
 800cf94:	f7f3 fdac 	bl	8000af0 <__aeabi_dcmple>
 800cf98:	bb30      	cbnz	r0, 800cfe8 <_printf_float+0xc0>
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	4640      	mov	r0, r8
 800cfa0:	4649      	mov	r1, r9
 800cfa2:	f7f3 fd9b 	bl	8000adc <__aeabi_dcmplt>
 800cfa6:	b110      	cbz	r0, 800cfae <_printf_float+0x86>
 800cfa8:	232d      	movs	r3, #45	@ 0x2d
 800cfaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cfae:	4a91      	ldr	r2, [pc, #580]	@ (800d1f4 <_printf_float+0x2cc>)
 800cfb0:	4b91      	ldr	r3, [pc, #580]	@ (800d1f8 <_printf_float+0x2d0>)
 800cfb2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cfb6:	bf94      	ite	ls
 800cfb8:	4690      	movls	r8, r2
 800cfba:	4698      	movhi	r8, r3
 800cfbc:	2303      	movs	r3, #3
 800cfbe:	6123      	str	r3, [r4, #16]
 800cfc0:	f02b 0304 	bic.w	r3, fp, #4
 800cfc4:	6023      	str	r3, [r4, #0]
 800cfc6:	f04f 0900 	mov.w	r9, #0
 800cfca:	9700      	str	r7, [sp, #0]
 800cfcc:	4633      	mov	r3, r6
 800cfce:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cfd0:	4621      	mov	r1, r4
 800cfd2:	4628      	mov	r0, r5
 800cfd4:	f000 f9d2 	bl	800d37c <_printf_common>
 800cfd8:	3001      	adds	r0, #1
 800cfda:	f040 808d 	bne.w	800d0f8 <_printf_float+0x1d0>
 800cfde:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe2:	b00d      	add	sp, #52	@ 0x34
 800cfe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfe8:	4642      	mov	r2, r8
 800cfea:	464b      	mov	r3, r9
 800cfec:	4640      	mov	r0, r8
 800cfee:	4649      	mov	r1, r9
 800cff0:	f7f3 fd9c 	bl	8000b2c <__aeabi_dcmpun>
 800cff4:	b140      	cbz	r0, 800d008 <_printf_float+0xe0>
 800cff6:	464b      	mov	r3, r9
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	bfbc      	itt	lt
 800cffc:	232d      	movlt	r3, #45	@ 0x2d
 800cffe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d002:	4a7e      	ldr	r2, [pc, #504]	@ (800d1fc <_printf_float+0x2d4>)
 800d004:	4b7e      	ldr	r3, [pc, #504]	@ (800d200 <_printf_float+0x2d8>)
 800d006:	e7d4      	b.n	800cfb2 <_printf_float+0x8a>
 800d008:	6863      	ldr	r3, [r4, #4]
 800d00a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d00e:	9206      	str	r2, [sp, #24]
 800d010:	1c5a      	adds	r2, r3, #1
 800d012:	d13b      	bne.n	800d08c <_printf_float+0x164>
 800d014:	2306      	movs	r3, #6
 800d016:	6063      	str	r3, [r4, #4]
 800d018:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d01c:	2300      	movs	r3, #0
 800d01e:	6022      	str	r2, [r4, #0]
 800d020:	9303      	str	r3, [sp, #12]
 800d022:	ab0a      	add	r3, sp, #40	@ 0x28
 800d024:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d028:	ab09      	add	r3, sp, #36	@ 0x24
 800d02a:	9300      	str	r3, [sp, #0]
 800d02c:	6861      	ldr	r1, [r4, #4]
 800d02e:	ec49 8b10 	vmov	d0, r8, r9
 800d032:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d036:	4628      	mov	r0, r5
 800d038:	f7ff fed6 	bl	800cde8 <__cvt>
 800d03c:	9b06      	ldr	r3, [sp, #24]
 800d03e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d040:	2b47      	cmp	r3, #71	@ 0x47
 800d042:	4680      	mov	r8, r0
 800d044:	d129      	bne.n	800d09a <_printf_float+0x172>
 800d046:	1cc8      	adds	r0, r1, #3
 800d048:	db02      	blt.n	800d050 <_printf_float+0x128>
 800d04a:	6863      	ldr	r3, [r4, #4]
 800d04c:	4299      	cmp	r1, r3
 800d04e:	dd41      	ble.n	800d0d4 <_printf_float+0x1ac>
 800d050:	f1aa 0a02 	sub.w	sl, sl, #2
 800d054:	fa5f fa8a 	uxtb.w	sl, sl
 800d058:	3901      	subs	r1, #1
 800d05a:	4652      	mov	r2, sl
 800d05c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d060:	9109      	str	r1, [sp, #36]	@ 0x24
 800d062:	f7ff ff26 	bl	800ceb2 <__exponent>
 800d066:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d068:	1813      	adds	r3, r2, r0
 800d06a:	2a01      	cmp	r2, #1
 800d06c:	4681      	mov	r9, r0
 800d06e:	6123      	str	r3, [r4, #16]
 800d070:	dc02      	bgt.n	800d078 <_printf_float+0x150>
 800d072:	6822      	ldr	r2, [r4, #0]
 800d074:	07d2      	lsls	r2, r2, #31
 800d076:	d501      	bpl.n	800d07c <_printf_float+0x154>
 800d078:	3301      	adds	r3, #1
 800d07a:	6123      	str	r3, [r4, #16]
 800d07c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d080:	2b00      	cmp	r3, #0
 800d082:	d0a2      	beq.n	800cfca <_printf_float+0xa2>
 800d084:	232d      	movs	r3, #45	@ 0x2d
 800d086:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d08a:	e79e      	b.n	800cfca <_printf_float+0xa2>
 800d08c:	9a06      	ldr	r2, [sp, #24]
 800d08e:	2a47      	cmp	r2, #71	@ 0x47
 800d090:	d1c2      	bne.n	800d018 <_printf_float+0xf0>
 800d092:	2b00      	cmp	r3, #0
 800d094:	d1c0      	bne.n	800d018 <_printf_float+0xf0>
 800d096:	2301      	movs	r3, #1
 800d098:	e7bd      	b.n	800d016 <_printf_float+0xee>
 800d09a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d09e:	d9db      	bls.n	800d058 <_printf_float+0x130>
 800d0a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d0a4:	d118      	bne.n	800d0d8 <_printf_float+0x1b0>
 800d0a6:	2900      	cmp	r1, #0
 800d0a8:	6863      	ldr	r3, [r4, #4]
 800d0aa:	dd0b      	ble.n	800d0c4 <_printf_float+0x19c>
 800d0ac:	6121      	str	r1, [r4, #16]
 800d0ae:	b913      	cbnz	r3, 800d0b6 <_printf_float+0x18e>
 800d0b0:	6822      	ldr	r2, [r4, #0]
 800d0b2:	07d0      	lsls	r0, r2, #31
 800d0b4:	d502      	bpl.n	800d0bc <_printf_float+0x194>
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	440b      	add	r3, r1
 800d0ba:	6123      	str	r3, [r4, #16]
 800d0bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d0be:	f04f 0900 	mov.w	r9, #0
 800d0c2:	e7db      	b.n	800d07c <_printf_float+0x154>
 800d0c4:	b913      	cbnz	r3, 800d0cc <_printf_float+0x1a4>
 800d0c6:	6822      	ldr	r2, [r4, #0]
 800d0c8:	07d2      	lsls	r2, r2, #31
 800d0ca:	d501      	bpl.n	800d0d0 <_printf_float+0x1a8>
 800d0cc:	3302      	adds	r3, #2
 800d0ce:	e7f4      	b.n	800d0ba <_printf_float+0x192>
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	e7f2      	b.n	800d0ba <_printf_float+0x192>
 800d0d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d0d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0da:	4299      	cmp	r1, r3
 800d0dc:	db05      	blt.n	800d0ea <_printf_float+0x1c2>
 800d0de:	6823      	ldr	r3, [r4, #0]
 800d0e0:	6121      	str	r1, [r4, #16]
 800d0e2:	07d8      	lsls	r0, r3, #31
 800d0e4:	d5ea      	bpl.n	800d0bc <_printf_float+0x194>
 800d0e6:	1c4b      	adds	r3, r1, #1
 800d0e8:	e7e7      	b.n	800d0ba <_printf_float+0x192>
 800d0ea:	2900      	cmp	r1, #0
 800d0ec:	bfd4      	ite	le
 800d0ee:	f1c1 0202 	rsble	r2, r1, #2
 800d0f2:	2201      	movgt	r2, #1
 800d0f4:	4413      	add	r3, r2
 800d0f6:	e7e0      	b.n	800d0ba <_printf_float+0x192>
 800d0f8:	6823      	ldr	r3, [r4, #0]
 800d0fa:	055a      	lsls	r2, r3, #21
 800d0fc:	d407      	bmi.n	800d10e <_printf_float+0x1e6>
 800d0fe:	6923      	ldr	r3, [r4, #16]
 800d100:	4642      	mov	r2, r8
 800d102:	4631      	mov	r1, r6
 800d104:	4628      	mov	r0, r5
 800d106:	47b8      	blx	r7
 800d108:	3001      	adds	r0, #1
 800d10a:	d12b      	bne.n	800d164 <_printf_float+0x23c>
 800d10c:	e767      	b.n	800cfde <_printf_float+0xb6>
 800d10e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d112:	f240 80dd 	bls.w	800d2d0 <_printf_float+0x3a8>
 800d116:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d11a:	2200      	movs	r2, #0
 800d11c:	2300      	movs	r3, #0
 800d11e:	f7f3 fcd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800d122:	2800      	cmp	r0, #0
 800d124:	d033      	beq.n	800d18e <_printf_float+0x266>
 800d126:	4a37      	ldr	r2, [pc, #220]	@ (800d204 <_printf_float+0x2dc>)
 800d128:	2301      	movs	r3, #1
 800d12a:	4631      	mov	r1, r6
 800d12c:	4628      	mov	r0, r5
 800d12e:	47b8      	blx	r7
 800d130:	3001      	adds	r0, #1
 800d132:	f43f af54 	beq.w	800cfde <_printf_float+0xb6>
 800d136:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d13a:	4543      	cmp	r3, r8
 800d13c:	db02      	blt.n	800d144 <_printf_float+0x21c>
 800d13e:	6823      	ldr	r3, [r4, #0]
 800d140:	07d8      	lsls	r0, r3, #31
 800d142:	d50f      	bpl.n	800d164 <_printf_float+0x23c>
 800d144:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d148:	4631      	mov	r1, r6
 800d14a:	4628      	mov	r0, r5
 800d14c:	47b8      	blx	r7
 800d14e:	3001      	adds	r0, #1
 800d150:	f43f af45 	beq.w	800cfde <_printf_float+0xb6>
 800d154:	f04f 0900 	mov.w	r9, #0
 800d158:	f108 38ff 	add.w	r8, r8, #4294967295
 800d15c:	f104 0a1a 	add.w	sl, r4, #26
 800d160:	45c8      	cmp	r8, r9
 800d162:	dc09      	bgt.n	800d178 <_printf_float+0x250>
 800d164:	6823      	ldr	r3, [r4, #0]
 800d166:	079b      	lsls	r3, r3, #30
 800d168:	f100 8103 	bmi.w	800d372 <_printf_float+0x44a>
 800d16c:	68e0      	ldr	r0, [r4, #12]
 800d16e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d170:	4298      	cmp	r0, r3
 800d172:	bfb8      	it	lt
 800d174:	4618      	movlt	r0, r3
 800d176:	e734      	b.n	800cfe2 <_printf_float+0xba>
 800d178:	2301      	movs	r3, #1
 800d17a:	4652      	mov	r2, sl
 800d17c:	4631      	mov	r1, r6
 800d17e:	4628      	mov	r0, r5
 800d180:	47b8      	blx	r7
 800d182:	3001      	adds	r0, #1
 800d184:	f43f af2b 	beq.w	800cfde <_printf_float+0xb6>
 800d188:	f109 0901 	add.w	r9, r9, #1
 800d18c:	e7e8      	b.n	800d160 <_printf_float+0x238>
 800d18e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d190:	2b00      	cmp	r3, #0
 800d192:	dc39      	bgt.n	800d208 <_printf_float+0x2e0>
 800d194:	4a1b      	ldr	r2, [pc, #108]	@ (800d204 <_printf_float+0x2dc>)
 800d196:	2301      	movs	r3, #1
 800d198:	4631      	mov	r1, r6
 800d19a:	4628      	mov	r0, r5
 800d19c:	47b8      	blx	r7
 800d19e:	3001      	adds	r0, #1
 800d1a0:	f43f af1d 	beq.w	800cfde <_printf_float+0xb6>
 800d1a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d1a8:	ea59 0303 	orrs.w	r3, r9, r3
 800d1ac:	d102      	bne.n	800d1b4 <_printf_float+0x28c>
 800d1ae:	6823      	ldr	r3, [r4, #0]
 800d1b0:	07d9      	lsls	r1, r3, #31
 800d1b2:	d5d7      	bpl.n	800d164 <_printf_float+0x23c>
 800d1b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1b8:	4631      	mov	r1, r6
 800d1ba:	4628      	mov	r0, r5
 800d1bc:	47b8      	blx	r7
 800d1be:	3001      	adds	r0, #1
 800d1c0:	f43f af0d 	beq.w	800cfde <_printf_float+0xb6>
 800d1c4:	f04f 0a00 	mov.w	sl, #0
 800d1c8:	f104 0b1a 	add.w	fp, r4, #26
 800d1cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1ce:	425b      	negs	r3, r3
 800d1d0:	4553      	cmp	r3, sl
 800d1d2:	dc01      	bgt.n	800d1d8 <_printf_float+0x2b0>
 800d1d4:	464b      	mov	r3, r9
 800d1d6:	e793      	b.n	800d100 <_printf_float+0x1d8>
 800d1d8:	2301      	movs	r3, #1
 800d1da:	465a      	mov	r2, fp
 800d1dc:	4631      	mov	r1, r6
 800d1de:	4628      	mov	r0, r5
 800d1e0:	47b8      	blx	r7
 800d1e2:	3001      	adds	r0, #1
 800d1e4:	f43f aefb 	beq.w	800cfde <_printf_float+0xb6>
 800d1e8:	f10a 0a01 	add.w	sl, sl, #1
 800d1ec:	e7ee      	b.n	800d1cc <_printf_float+0x2a4>
 800d1ee:	bf00      	nop
 800d1f0:	7fefffff 	.word	0x7fefffff
 800d1f4:	0801d610 	.word	0x0801d610
 800d1f8:	0801d614 	.word	0x0801d614
 800d1fc:	0801d618 	.word	0x0801d618
 800d200:	0801d61c 	.word	0x0801d61c
 800d204:	0801d620 	.word	0x0801d620
 800d208:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d20a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d20e:	4553      	cmp	r3, sl
 800d210:	bfa8      	it	ge
 800d212:	4653      	movge	r3, sl
 800d214:	2b00      	cmp	r3, #0
 800d216:	4699      	mov	r9, r3
 800d218:	dc36      	bgt.n	800d288 <_printf_float+0x360>
 800d21a:	f04f 0b00 	mov.w	fp, #0
 800d21e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d222:	f104 021a 	add.w	r2, r4, #26
 800d226:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d228:	9306      	str	r3, [sp, #24]
 800d22a:	eba3 0309 	sub.w	r3, r3, r9
 800d22e:	455b      	cmp	r3, fp
 800d230:	dc31      	bgt.n	800d296 <_printf_float+0x36e>
 800d232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d234:	459a      	cmp	sl, r3
 800d236:	dc3a      	bgt.n	800d2ae <_printf_float+0x386>
 800d238:	6823      	ldr	r3, [r4, #0]
 800d23a:	07da      	lsls	r2, r3, #31
 800d23c:	d437      	bmi.n	800d2ae <_printf_float+0x386>
 800d23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d240:	ebaa 0903 	sub.w	r9, sl, r3
 800d244:	9b06      	ldr	r3, [sp, #24]
 800d246:	ebaa 0303 	sub.w	r3, sl, r3
 800d24a:	4599      	cmp	r9, r3
 800d24c:	bfa8      	it	ge
 800d24e:	4699      	movge	r9, r3
 800d250:	f1b9 0f00 	cmp.w	r9, #0
 800d254:	dc33      	bgt.n	800d2be <_printf_float+0x396>
 800d256:	f04f 0800 	mov.w	r8, #0
 800d25a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d25e:	f104 0b1a 	add.w	fp, r4, #26
 800d262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d264:	ebaa 0303 	sub.w	r3, sl, r3
 800d268:	eba3 0309 	sub.w	r3, r3, r9
 800d26c:	4543      	cmp	r3, r8
 800d26e:	f77f af79 	ble.w	800d164 <_printf_float+0x23c>
 800d272:	2301      	movs	r3, #1
 800d274:	465a      	mov	r2, fp
 800d276:	4631      	mov	r1, r6
 800d278:	4628      	mov	r0, r5
 800d27a:	47b8      	blx	r7
 800d27c:	3001      	adds	r0, #1
 800d27e:	f43f aeae 	beq.w	800cfde <_printf_float+0xb6>
 800d282:	f108 0801 	add.w	r8, r8, #1
 800d286:	e7ec      	b.n	800d262 <_printf_float+0x33a>
 800d288:	4642      	mov	r2, r8
 800d28a:	4631      	mov	r1, r6
 800d28c:	4628      	mov	r0, r5
 800d28e:	47b8      	blx	r7
 800d290:	3001      	adds	r0, #1
 800d292:	d1c2      	bne.n	800d21a <_printf_float+0x2f2>
 800d294:	e6a3      	b.n	800cfde <_printf_float+0xb6>
 800d296:	2301      	movs	r3, #1
 800d298:	4631      	mov	r1, r6
 800d29a:	4628      	mov	r0, r5
 800d29c:	9206      	str	r2, [sp, #24]
 800d29e:	47b8      	blx	r7
 800d2a0:	3001      	adds	r0, #1
 800d2a2:	f43f ae9c 	beq.w	800cfde <_printf_float+0xb6>
 800d2a6:	9a06      	ldr	r2, [sp, #24]
 800d2a8:	f10b 0b01 	add.w	fp, fp, #1
 800d2ac:	e7bb      	b.n	800d226 <_printf_float+0x2fe>
 800d2ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2b2:	4631      	mov	r1, r6
 800d2b4:	4628      	mov	r0, r5
 800d2b6:	47b8      	blx	r7
 800d2b8:	3001      	adds	r0, #1
 800d2ba:	d1c0      	bne.n	800d23e <_printf_float+0x316>
 800d2bc:	e68f      	b.n	800cfde <_printf_float+0xb6>
 800d2be:	9a06      	ldr	r2, [sp, #24]
 800d2c0:	464b      	mov	r3, r9
 800d2c2:	4442      	add	r2, r8
 800d2c4:	4631      	mov	r1, r6
 800d2c6:	4628      	mov	r0, r5
 800d2c8:	47b8      	blx	r7
 800d2ca:	3001      	adds	r0, #1
 800d2cc:	d1c3      	bne.n	800d256 <_printf_float+0x32e>
 800d2ce:	e686      	b.n	800cfde <_printf_float+0xb6>
 800d2d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d2d4:	f1ba 0f01 	cmp.w	sl, #1
 800d2d8:	dc01      	bgt.n	800d2de <_printf_float+0x3b6>
 800d2da:	07db      	lsls	r3, r3, #31
 800d2dc:	d536      	bpl.n	800d34c <_printf_float+0x424>
 800d2de:	2301      	movs	r3, #1
 800d2e0:	4642      	mov	r2, r8
 800d2e2:	4631      	mov	r1, r6
 800d2e4:	4628      	mov	r0, r5
 800d2e6:	47b8      	blx	r7
 800d2e8:	3001      	adds	r0, #1
 800d2ea:	f43f ae78 	beq.w	800cfde <_printf_float+0xb6>
 800d2ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2f2:	4631      	mov	r1, r6
 800d2f4:	4628      	mov	r0, r5
 800d2f6:	47b8      	blx	r7
 800d2f8:	3001      	adds	r0, #1
 800d2fa:	f43f ae70 	beq.w	800cfde <_printf_float+0xb6>
 800d2fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d302:	2200      	movs	r2, #0
 800d304:	2300      	movs	r3, #0
 800d306:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d30a:	f7f3 fbdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800d30e:	b9c0      	cbnz	r0, 800d342 <_printf_float+0x41a>
 800d310:	4653      	mov	r3, sl
 800d312:	f108 0201 	add.w	r2, r8, #1
 800d316:	4631      	mov	r1, r6
 800d318:	4628      	mov	r0, r5
 800d31a:	47b8      	blx	r7
 800d31c:	3001      	adds	r0, #1
 800d31e:	d10c      	bne.n	800d33a <_printf_float+0x412>
 800d320:	e65d      	b.n	800cfde <_printf_float+0xb6>
 800d322:	2301      	movs	r3, #1
 800d324:	465a      	mov	r2, fp
 800d326:	4631      	mov	r1, r6
 800d328:	4628      	mov	r0, r5
 800d32a:	47b8      	blx	r7
 800d32c:	3001      	adds	r0, #1
 800d32e:	f43f ae56 	beq.w	800cfde <_printf_float+0xb6>
 800d332:	f108 0801 	add.w	r8, r8, #1
 800d336:	45d0      	cmp	r8, sl
 800d338:	dbf3      	blt.n	800d322 <_printf_float+0x3fa>
 800d33a:	464b      	mov	r3, r9
 800d33c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d340:	e6df      	b.n	800d102 <_printf_float+0x1da>
 800d342:	f04f 0800 	mov.w	r8, #0
 800d346:	f104 0b1a 	add.w	fp, r4, #26
 800d34a:	e7f4      	b.n	800d336 <_printf_float+0x40e>
 800d34c:	2301      	movs	r3, #1
 800d34e:	4642      	mov	r2, r8
 800d350:	e7e1      	b.n	800d316 <_printf_float+0x3ee>
 800d352:	2301      	movs	r3, #1
 800d354:	464a      	mov	r2, r9
 800d356:	4631      	mov	r1, r6
 800d358:	4628      	mov	r0, r5
 800d35a:	47b8      	blx	r7
 800d35c:	3001      	adds	r0, #1
 800d35e:	f43f ae3e 	beq.w	800cfde <_printf_float+0xb6>
 800d362:	f108 0801 	add.w	r8, r8, #1
 800d366:	68e3      	ldr	r3, [r4, #12]
 800d368:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d36a:	1a5b      	subs	r3, r3, r1
 800d36c:	4543      	cmp	r3, r8
 800d36e:	dcf0      	bgt.n	800d352 <_printf_float+0x42a>
 800d370:	e6fc      	b.n	800d16c <_printf_float+0x244>
 800d372:	f04f 0800 	mov.w	r8, #0
 800d376:	f104 0919 	add.w	r9, r4, #25
 800d37a:	e7f4      	b.n	800d366 <_printf_float+0x43e>

0800d37c <_printf_common>:
 800d37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d380:	4616      	mov	r6, r2
 800d382:	4698      	mov	r8, r3
 800d384:	688a      	ldr	r2, [r1, #8]
 800d386:	690b      	ldr	r3, [r1, #16]
 800d388:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d38c:	4293      	cmp	r3, r2
 800d38e:	bfb8      	it	lt
 800d390:	4613      	movlt	r3, r2
 800d392:	6033      	str	r3, [r6, #0]
 800d394:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d398:	4607      	mov	r7, r0
 800d39a:	460c      	mov	r4, r1
 800d39c:	b10a      	cbz	r2, 800d3a2 <_printf_common+0x26>
 800d39e:	3301      	adds	r3, #1
 800d3a0:	6033      	str	r3, [r6, #0]
 800d3a2:	6823      	ldr	r3, [r4, #0]
 800d3a4:	0699      	lsls	r1, r3, #26
 800d3a6:	bf42      	ittt	mi
 800d3a8:	6833      	ldrmi	r3, [r6, #0]
 800d3aa:	3302      	addmi	r3, #2
 800d3ac:	6033      	strmi	r3, [r6, #0]
 800d3ae:	6825      	ldr	r5, [r4, #0]
 800d3b0:	f015 0506 	ands.w	r5, r5, #6
 800d3b4:	d106      	bne.n	800d3c4 <_printf_common+0x48>
 800d3b6:	f104 0a19 	add.w	sl, r4, #25
 800d3ba:	68e3      	ldr	r3, [r4, #12]
 800d3bc:	6832      	ldr	r2, [r6, #0]
 800d3be:	1a9b      	subs	r3, r3, r2
 800d3c0:	42ab      	cmp	r3, r5
 800d3c2:	dc26      	bgt.n	800d412 <_printf_common+0x96>
 800d3c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d3c8:	6822      	ldr	r2, [r4, #0]
 800d3ca:	3b00      	subs	r3, #0
 800d3cc:	bf18      	it	ne
 800d3ce:	2301      	movne	r3, #1
 800d3d0:	0692      	lsls	r2, r2, #26
 800d3d2:	d42b      	bmi.n	800d42c <_printf_common+0xb0>
 800d3d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d3d8:	4641      	mov	r1, r8
 800d3da:	4638      	mov	r0, r7
 800d3dc:	47c8      	blx	r9
 800d3de:	3001      	adds	r0, #1
 800d3e0:	d01e      	beq.n	800d420 <_printf_common+0xa4>
 800d3e2:	6823      	ldr	r3, [r4, #0]
 800d3e4:	6922      	ldr	r2, [r4, #16]
 800d3e6:	f003 0306 	and.w	r3, r3, #6
 800d3ea:	2b04      	cmp	r3, #4
 800d3ec:	bf02      	ittt	eq
 800d3ee:	68e5      	ldreq	r5, [r4, #12]
 800d3f0:	6833      	ldreq	r3, [r6, #0]
 800d3f2:	1aed      	subeq	r5, r5, r3
 800d3f4:	68a3      	ldr	r3, [r4, #8]
 800d3f6:	bf0c      	ite	eq
 800d3f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d3fc:	2500      	movne	r5, #0
 800d3fe:	4293      	cmp	r3, r2
 800d400:	bfc4      	itt	gt
 800d402:	1a9b      	subgt	r3, r3, r2
 800d404:	18ed      	addgt	r5, r5, r3
 800d406:	2600      	movs	r6, #0
 800d408:	341a      	adds	r4, #26
 800d40a:	42b5      	cmp	r5, r6
 800d40c:	d11a      	bne.n	800d444 <_printf_common+0xc8>
 800d40e:	2000      	movs	r0, #0
 800d410:	e008      	b.n	800d424 <_printf_common+0xa8>
 800d412:	2301      	movs	r3, #1
 800d414:	4652      	mov	r2, sl
 800d416:	4641      	mov	r1, r8
 800d418:	4638      	mov	r0, r7
 800d41a:	47c8      	blx	r9
 800d41c:	3001      	adds	r0, #1
 800d41e:	d103      	bne.n	800d428 <_printf_common+0xac>
 800d420:	f04f 30ff 	mov.w	r0, #4294967295
 800d424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d428:	3501      	adds	r5, #1
 800d42a:	e7c6      	b.n	800d3ba <_printf_common+0x3e>
 800d42c:	18e1      	adds	r1, r4, r3
 800d42e:	1c5a      	adds	r2, r3, #1
 800d430:	2030      	movs	r0, #48	@ 0x30
 800d432:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d436:	4422      	add	r2, r4
 800d438:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d43c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d440:	3302      	adds	r3, #2
 800d442:	e7c7      	b.n	800d3d4 <_printf_common+0x58>
 800d444:	2301      	movs	r3, #1
 800d446:	4622      	mov	r2, r4
 800d448:	4641      	mov	r1, r8
 800d44a:	4638      	mov	r0, r7
 800d44c:	47c8      	blx	r9
 800d44e:	3001      	adds	r0, #1
 800d450:	d0e6      	beq.n	800d420 <_printf_common+0xa4>
 800d452:	3601      	adds	r6, #1
 800d454:	e7d9      	b.n	800d40a <_printf_common+0x8e>
	...

0800d458 <_printf_i>:
 800d458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d45c:	7e0f      	ldrb	r7, [r1, #24]
 800d45e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d460:	2f78      	cmp	r7, #120	@ 0x78
 800d462:	4691      	mov	r9, r2
 800d464:	4680      	mov	r8, r0
 800d466:	460c      	mov	r4, r1
 800d468:	469a      	mov	sl, r3
 800d46a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d46e:	d807      	bhi.n	800d480 <_printf_i+0x28>
 800d470:	2f62      	cmp	r7, #98	@ 0x62
 800d472:	d80a      	bhi.n	800d48a <_printf_i+0x32>
 800d474:	2f00      	cmp	r7, #0
 800d476:	f000 80d2 	beq.w	800d61e <_printf_i+0x1c6>
 800d47a:	2f58      	cmp	r7, #88	@ 0x58
 800d47c:	f000 80b9 	beq.w	800d5f2 <_printf_i+0x19a>
 800d480:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d484:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d488:	e03a      	b.n	800d500 <_printf_i+0xa8>
 800d48a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d48e:	2b15      	cmp	r3, #21
 800d490:	d8f6      	bhi.n	800d480 <_printf_i+0x28>
 800d492:	a101      	add	r1, pc, #4	@ (adr r1, 800d498 <_printf_i+0x40>)
 800d494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d498:	0800d4f1 	.word	0x0800d4f1
 800d49c:	0800d505 	.word	0x0800d505
 800d4a0:	0800d481 	.word	0x0800d481
 800d4a4:	0800d481 	.word	0x0800d481
 800d4a8:	0800d481 	.word	0x0800d481
 800d4ac:	0800d481 	.word	0x0800d481
 800d4b0:	0800d505 	.word	0x0800d505
 800d4b4:	0800d481 	.word	0x0800d481
 800d4b8:	0800d481 	.word	0x0800d481
 800d4bc:	0800d481 	.word	0x0800d481
 800d4c0:	0800d481 	.word	0x0800d481
 800d4c4:	0800d605 	.word	0x0800d605
 800d4c8:	0800d52f 	.word	0x0800d52f
 800d4cc:	0800d5bf 	.word	0x0800d5bf
 800d4d0:	0800d481 	.word	0x0800d481
 800d4d4:	0800d481 	.word	0x0800d481
 800d4d8:	0800d627 	.word	0x0800d627
 800d4dc:	0800d481 	.word	0x0800d481
 800d4e0:	0800d52f 	.word	0x0800d52f
 800d4e4:	0800d481 	.word	0x0800d481
 800d4e8:	0800d481 	.word	0x0800d481
 800d4ec:	0800d5c7 	.word	0x0800d5c7
 800d4f0:	6833      	ldr	r3, [r6, #0]
 800d4f2:	1d1a      	adds	r2, r3, #4
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	6032      	str	r2, [r6, #0]
 800d4f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d4fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d500:	2301      	movs	r3, #1
 800d502:	e09d      	b.n	800d640 <_printf_i+0x1e8>
 800d504:	6833      	ldr	r3, [r6, #0]
 800d506:	6820      	ldr	r0, [r4, #0]
 800d508:	1d19      	adds	r1, r3, #4
 800d50a:	6031      	str	r1, [r6, #0]
 800d50c:	0606      	lsls	r6, r0, #24
 800d50e:	d501      	bpl.n	800d514 <_printf_i+0xbc>
 800d510:	681d      	ldr	r5, [r3, #0]
 800d512:	e003      	b.n	800d51c <_printf_i+0xc4>
 800d514:	0645      	lsls	r5, r0, #25
 800d516:	d5fb      	bpl.n	800d510 <_printf_i+0xb8>
 800d518:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d51c:	2d00      	cmp	r5, #0
 800d51e:	da03      	bge.n	800d528 <_printf_i+0xd0>
 800d520:	232d      	movs	r3, #45	@ 0x2d
 800d522:	426d      	negs	r5, r5
 800d524:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d528:	4859      	ldr	r0, [pc, #356]	@ (800d690 <_printf_i+0x238>)
 800d52a:	230a      	movs	r3, #10
 800d52c:	e011      	b.n	800d552 <_printf_i+0xfa>
 800d52e:	6821      	ldr	r1, [r4, #0]
 800d530:	6833      	ldr	r3, [r6, #0]
 800d532:	0608      	lsls	r0, r1, #24
 800d534:	f853 5b04 	ldr.w	r5, [r3], #4
 800d538:	d402      	bmi.n	800d540 <_printf_i+0xe8>
 800d53a:	0649      	lsls	r1, r1, #25
 800d53c:	bf48      	it	mi
 800d53e:	b2ad      	uxthmi	r5, r5
 800d540:	2f6f      	cmp	r7, #111	@ 0x6f
 800d542:	4853      	ldr	r0, [pc, #332]	@ (800d690 <_printf_i+0x238>)
 800d544:	6033      	str	r3, [r6, #0]
 800d546:	bf14      	ite	ne
 800d548:	230a      	movne	r3, #10
 800d54a:	2308      	moveq	r3, #8
 800d54c:	2100      	movs	r1, #0
 800d54e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d552:	6866      	ldr	r6, [r4, #4]
 800d554:	60a6      	str	r6, [r4, #8]
 800d556:	2e00      	cmp	r6, #0
 800d558:	bfa2      	ittt	ge
 800d55a:	6821      	ldrge	r1, [r4, #0]
 800d55c:	f021 0104 	bicge.w	r1, r1, #4
 800d560:	6021      	strge	r1, [r4, #0]
 800d562:	b90d      	cbnz	r5, 800d568 <_printf_i+0x110>
 800d564:	2e00      	cmp	r6, #0
 800d566:	d04b      	beq.n	800d600 <_printf_i+0x1a8>
 800d568:	4616      	mov	r6, r2
 800d56a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d56e:	fb03 5711 	mls	r7, r3, r1, r5
 800d572:	5dc7      	ldrb	r7, [r0, r7]
 800d574:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d578:	462f      	mov	r7, r5
 800d57a:	42bb      	cmp	r3, r7
 800d57c:	460d      	mov	r5, r1
 800d57e:	d9f4      	bls.n	800d56a <_printf_i+0x112>
 800d580:	2b08      	cmp	r3, #8
 800d582:	d10b      	bne.n	800d59c <_printf_i+0x144>
 800d584:	6823      	ldr	r3, [r4, #0]
 800d586:	07df      	lsls	r7, r3, #31
 800d588:	d508      	bpl.n	800d59c <_printf_i+0x144>
 800d58a:	6923      	ldr	r3, [r4, #16]
 800d58c:	6861      	ldr	r1, [r4, #4]
 800d58e:	4299      	cmp	r1, r3
 800d590:	bfde      	ittt	le
 800d592:	2330      	movle	r3, #48	@ 0x30
 800d594:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d598:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d59c:	1b92      	subs	r2, r2, r6
 800d59e:	6122      	str	r2, [r4, #16]
 800d5a0:	f8cd a000 	str.w	sl, [sp]
 800d5a4:	464b      	mov	r3, r9
 800d5a6:	aa03      	add	r2, sp, #12
 800d5a8:	4621      	mov	r1, r4
 800d5aa:	4640      	mov	r0, r8
 800d5ac:	f7ff fee6 	bl	800d37c <_printf_common>
 800d5b0:	3001      	adds	r0, #1
 800d5b2:	d14a      	bne.n	800d64a <_printf_i+0x1f2>
 800d5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b8:	b004      	add	sp, #16
 800d5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5be:	6823      	ldr	r3, [r4, #0]
 800d5c0:	f043 0320 	orr.w	r3, r3, #32
 800d5c4:	6023      	str	r3, [r4, #0]
 800d5c6:	4833      	ldr	r0, [pc, #204]	@ (800d694 <_printf_i+0x23c>)
 800d5c8:	2778      	movs	r7, #120	@ 0x78
 800d5ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d5ce:	6823      	ldr	r3, [r4, #0]
 800d5d0:	6831      	ldr	r1, [r6, #0]
 800d5d2:	061f      	lsls	r7, r3, #24
 800d5d4:	f851 5b04 	ldr.w	r5, [r1], #4
 800d5d8:	d402      	bmi.n	800d5e0 <_printf_i+0x188>
 800d5da:	065f      	lsls	r7, r3, #25
 800d5dc:	bf48      	it	mi
 800d5de:	b2ad      	uxthmi	r5, r5
 800d5e0:	6031      	str	r1, [r6, #0]
 800d5e2:	07d9      	lsls	r1, r3, #31
 800d5e4:	bf44      	itt	mi
 800d5e6:	f043 0320 	orrmi.w	r3, r3, #32
 800d5ea:	6023      	strmi	r3, [r4, #0]
 800d5ec:	b11d      	cbz	r5, 800d5f6 <_printf_i+0x19e>
 800d5ee:	2310      	movs	r3, #16
 800d5f0:	e7ac      	b.n	800d54c <_printf_i+0xf4>
 800d5f2:	4827      	ldr	r0, [pc, #156]	@ (800d690 <_printf_i+0x238>)
 800d5f4:	e7e9      	b.n	800d5ca <_printf_i+0x172>
 800d5f6:	6823      	ldr	r3, [r4, #0]
 800d5f8:	f023 0320 	bic.w	r3, r3, #32
 800d5fc:	6023      	str	r3, [r4, #0]
 800d5fe:	e7f6      	b.n	800d5ee <_printf_i+0x196>
 800d600:	4616      	mov	r6, r2
 800d602:	e7bd      	b.n	800d580 <_printf_i+0x128>
 800d604:	6833      	ldr	r3, [r6, #0]
 800d606:	6825      	ldr	r5, [r4, #0]
 800d608:	6961      	ldr	r1, [r4, #20]
 800d60a:	1d18      	adds	r0, r3, #4
 800d60c:	6030      	str	r0, [r6, #0]
 800d60e:	062e      	lsls	r6, r5, #24
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	d501      	bpl.n	800d618 <_printf_i+0x1c0>
 800d614:	6019      	str	r1, [r3, #0]
 800d616:	e002      	b.n	800d61e <_printf_i+0x1c6>
 800d618:	0668      	lsls	r0, r5, #25
 800d61a:	d5fb      	bpl.n	800d614 <_printf_i+0x1bc>
 800d61c:	8019      	strh	r1, [r3, #0]
 800d61e:	2300      	movs	r3, #0
 800d620:	6123      	str	r3, [r4, #16]
 800d622:	4616      	mov	r6, r2
 800d624:	e7bc      	b.n	800d5a0 <_printf_i+0x148>
 800d626:	6833      	ldr	r3, [r6, #0]
 800d628:	1d1a      	adds	r2, r3, #4
 800d62a:	6032      	str	r2, [r6, #0]
 800d62c:	681e      	ldr	r6, [r3, #0]
 800d62e:	6862      	ldr	r2, [r4, #4]
 800d630:	2100      	movs	r1, #0
 800d632:	4630      	mov	r0, r6
 800d634:	f7f2 fdcc 	bl	80001d0 <memchr>
 800d638:	b108      	cbz	r0, 800d63e <_printf_i+0x1e6>
 800d63a:	1b80      	subs	r0, r0, r6
 800d63c:	6060      	str	r0, [r4, #4]
 800d63e:	6863      	ldr	r3, [r4, #4]
 800d640:	6123      	str	r3, [r4, #16]
 800d642:	2300      	movs	r3, #0
 800d644:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d648:	e7aa      	b.n	800d5a0 <_printf_i+0x148>
 800d64a:	6923      	ldr	r3, [r4, #16]
 800d64c:	4632      	mov	r2, r6
 800d64e:	4649      	mov	r1, r9
 800d650:	4640      	mov	r0, r8
 800d652:	47d0      	blx	sl
 800d654:	3001      	adds	r0, #1
 800d656:	d0ad      	beq.n	800d5b4 <_printf_i+0x15c>
 800d658:	6823      	ldr	r3, [r4, #0]
 800d65a:	079b      	lsls	r3, r3, #30
 800d65c:	d413      	bmi.n	800d686 <_printf_i+0x22e>
 800d65e:	68e0      	ldr	r0, [r4, #12]
 800d660:	9b03      	ldr	r3, [sp, #12]
 800d662:	4298      	cmp	r0, r3
 800d664:	bfb8      	it	lt
 800d666:	4618      	movlt	r0, r3
 800d668:	e7a6      	b.n	800d5b8 <_printf_i+0x160>
 800d66a:	2301      	movs	r3, #1
 800d66c:	4632      	mov	r2, r6
 800d66e:	4649      	mov	r1, r9
 800d670:	4640      	mov	r0, r8
 800d672:	47d0      	blx	sl
 800d674:	3001      	adds	r0, #1
 800d676:	d09d      	beq.n	800d5b4 <_printf_i+0x15c>
 800d678:	3501      	adds	r5, #1
 800d67a:	68e3      	ldr	r3, [r4, #12]
 800d67c:	9903      	ldr	r1, [sp, #12]
 800d67e:	1a5b      	subs	r3, r3, r1
 800d680:	42ab      	cmp	r3, r5
 800d682:	dcf2      	bgt.n	800d66a <_printf_i+0x212>
 800d684:	e7eb      	b.n	800d65e <_printf_i+0x206>
 800d686:	2500      	movs	r5, #0
 800d688:	f104 0619 	add.w	r6, r4, #25
 800d68c:	e7f5      	b.n	800d67a <_printf_i+0x222>
 800d68e:	bf00      	nop
 800d690:	0801d622 	.word	0x0801d622
 800d694:	0801d633 	.word	0x0801d633

0800d698 <_scanf_float>:
 800d698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d69c:	b087      	sub	sp, #28
 800d69e:	4617      	mov	r7, r2
 800d6a0:	9303      	str	r3, [sp, #12]
 800d6a2:	688b      	ldr	r3, [r1, #8]
 800d6a4:	1e5a      	subs	r2, r3, #1
 800d6a6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d6aa:	bf81      	itttt	hi
 800d6ac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d6b0:	eb03 0b05 	addhi.w	fp, r3, r5
 800d6b4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d6b8:	608b      	strhi	r3, [r1, #8]
 800d6ba:	680b      	ldr	r3, [r1, #0]
 800d6bc:	460a      	mov	r2, r1
 800d6be:	f04f 0500 	mov.w	r5, #0
 800d6c2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d6c6:	f842 3b1c 	str.w	r3, [r2], #28
 800d6ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d6ce:	4680      	mov	r8, r0
 800d6d0:	460c      	mov	r4, r1
 800d6d2:	bf98      	it	ls
 800d6d4:	f04f 0b00 	movls.w	fp, #0
 800d6d8:	9201      	str	r2, [sp, #4]
 800d6da:	4616      	mov	r6, r2
 800d6dc:	46aa      	mov	sl, r5
 800d6de:	46a9      	mov	r9, r5
 800d6e0:	9502      	str	r5, [sp, #8]
 800d6e2:	68a2      	ldr	r2, [r4, #8]
 800d6e4:	b152      	cbz	r2, 800d6fc <_scanf_float+0x64>
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	2b4e      	cmp	r3, #78	@ 0x4e
 800d6ec:	d864      	bhi.n	800d7b8 <_scanf_float+0x120>
 800d6ee:	2b40      	cmp	r3, #64	@ 0x40
 800d6f0:	d83c      	bhi.n	800d76c <_scanf_float+0xd4>
 800d6f2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d6f6:	b2c8      	uxtb	r0, r1
 800d6f8:	280e      	cmp	r0, #14
 800d6fa:	d93a      	bls.n	800d772 <_scanf_float+0xda>
 800d6fc:	f1b9 0f00 	cmp.w	r9, #0
 800d700:	d003      	beq.n	800d70a <_scanf_float+0x72>
 800d702:	6823      	ldr	r3, [r4, #0]
 800d704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d708:	6023      	str	r3, [r4, #0]
 800d70a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d70e:	f1ba 0f01 	cmp.w	sl, #1
 800d712:	f200 8117 	bhi.w	800d944 <_scanf_float+0x2ac>
 800d716:	9b01      	ldr	r3, [sp, #4]
 800d718:	429e      	cmp	r6, r3
 800d71a:	f200 8108 	bhi.w	800d92e <_scanf_float+0x296>
 800d71e:	2001      	movs	r0, #1
 800d720:	b007      	add	sp, #28
 800d722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d726:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d72a:	2a0d      	cmp	r2, #13
 800d72c:	d8e6      	bhi.n	800d6fc <_scanf_float+0x64>
 800d72e:	a101      	add	r1, pc, #4	@ (adr r1, 800d734 <_scanf_float+0x9c>)
 800d730:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d734:	0800d87b 	.word	0x0800d87b
 800d738:	0800d6fd 	.word	0x0800d6fd
 800d73c:	0800d6fd 	.word	0x0800d6fd
 800d740:	0800d6fd 	.word	0x0800d6fd
 800d744:	0800d8db 	.word	0x0800d8db
 800d748:	0800d8b3 	.word	0x0800d8b3
 800d74c:	0800d6fd 	.word	0x0800d6fd
 800d750:	0800d6fd 	.word	0x0800d6fd
 800d754:	0800d889 	.word	0x0800d889
 800d758:	0800d6fd 	.word	0x0800d6fd
 800d75c:	0800d6fd 	.word	0x0800d6fd
 800d760:	0800d6fd 	.word	0x0800d6fd
 800d764:	0800d6fd 	.word	0x0800d6fd
 800d768:	0800d841 	.word	0x0800d841
 800d76c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d770:	e7db      	b.n	800d72a <_scanf_float+0x92>
 800d772:	290e      	cmp	r1, #14
 800d774:	d8c2      	bhi.n	800d6fc <_scanf_float+0x64>
 800d776:	a001      	add	r0, pc, #4	@ (adr r0, 800d77c <_scanf_float+0xe4>)
 800d778:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d77c:	0800d831 	.word	0x0800d831
 800d780:	0800d6fd 	.word	0x0800d6fd
 800d784:	0800d831 	.word	0x0800d831
 800d788:	0800d8c7 	.word	0x0800d8c7
 800d78c:	0800d6fd 	.word	0x0800d6fd
 800d790:	0800d7d9 	.word	0x0800d7d9
 800d794:	0800d817 	.word	0x0800d817
 800d798:	0800d817 	.word	0x0800d817
 800d79c:	0800d817 	.word	0x0800d817
 800d7a0:	0800d817 	.word	0x0800d817
 800d7a4:	0800d817 	.word	0x0800d817
 800d7a8:	0800d817 	.word	0x0800d817
 800d7ac:	0800d817 	.word	0x0800d817
 800d7b0:	0800d817 	.word	0x0800d817
 800d7b4:	0800d817 	.word	0x0800d817
 800d7b8:	2b6e      	cmp	r3, #110	@ 0x6e
 800d7ba:	d809      	bhi.n	800d7d0 <_scanf_float+0x138>
 800d7bc:	2b60      	cmp	r3, #96	@ 0x60
 800d7be:	d8b2      	bhi.n	800d726 <_scanf_float+0x8e>
 800d7c0:	2b54      	cmp	r3, #84	@ 0x54
 800d7c2:	d07b      	beq.n	800d8bc <_scanf_float+0x224>
 800d7c4:	2b59      	cmp	r3, #89	@ 0x59
 800d7c6:	d199      	bne.n	800d6fc <_scanf_float+0x64>
 800d7c8:	2d07      	cmp	r5, #7
 800d7ca:	d197      	bne.n	800d6fc <_scanf_float+0x64>
 800d7cc:	2508      	movs	r5, #8
 800d7ce:	e02c      	b.n	800d82a <_scanf_float+0x192>
 800d7d0:	2b74      	cmp	r3, #116	@ 0x74
 800d7d2:	d073      	beq.n	800d8bc <_scanf_float+0x224>
 800d7d4:	2b79      	cmp	r3, #121	@ 0x79
 800d7d6:	e7f6      	b.n	800d7c6 <_scanf_float+0x12e>
 800d7d8:	6821      	ldr	r1, [r4, #0]
 800d7da:	05c8      	lsls	r0, r1, #23
 800d7dc:	d51b      	bpl.n	800d816 <_scanf_float+0x17e>
 800d7de:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d7e2:	6021      	str	r1, [r4, #0]
 800d7e4:	f109 0901 	add.w	r9, r9, #1
 800d7e8:	f1bb 0f00 	cmp.w	fp, #0
 800d7ec:	d003      	beq.n	800d7f6 <_scanf_float+0x15e>
 800d7ee:	3201      	adds	r2, #1
 800d7f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d7f4:	60a2      	str	r2, [r4, #8]
 800d7f6:	68a3      	ldr	r3, [r4, #8]
 800d7f8:	3b01      	subs	r3, #1
 800d7fa:	60a3      	str	r3, [r4, #8]
 800d7fc:	6923      	ldr	r3, [r4, #16]
 800d7fe:	3301      	adds	r3, #1
 800d800:	6123      	str	r3, [r4, #16]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	3b01      	subs	r3, #1
 800d806:	2b00      	cmp	r3, #0
 800d808:	607b      	str	r3, [r7, #4]
 800d80a:	f340 8087 	ble.w	800d91c <_scanf_float+0x284>
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	3301      	adds	r3, #1
 800d812:	603b      	str	r3, [r7, #0]
 800d814:	e765      	b.n	800d6e2 <_scanf_float+0x4a>
 800d816:	eb1a 0105 	adds.w	r1, sl, r5
 800d81a:	f47f af6f 	bne.w	800d6fc <_scanf_float+0x64>
 800d81e:	6822      	ldr	r2, [r4, #0]
 800d820:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d824:	6022      	str	r2, [r4, #0]
 800d826:	460d      	mov	r5, r1
 800d828:	468a      	mov	sl, r1
 800d82a:	f806 3b01 	strb.w	r3, [r6], #1
 800d82e:	e7e2      	b.n	800d7f6 <_scanf_float+0x15e>
 800d830:	6822      	ldr	r2, [r4, #0]
 800d832:	0610      	lsls	r0, r2, #24
 800d834:	f57f af62 	bpl.w	800d6fc <_scanf_float+0x64>
 800d838:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d83c:	6022      	str	r2, [r4, #0]
 800d83e:	e7f4      	b.n	800d82a <_scanf_float+0x192>
 800d840:	f1ba 0f00 	cmp.w	sl, #0
 800d844:	d10e      	bne.n	800d864 <_scanf_float+0x1cc>
 800d846:	f1b9 0f00 	cmp.w	r9, #0
 800d84a:	d10e      	bne.n	800d86a <_scanf_float+0x1d2>
 800d84c:	6822      	ldr	r2, [r4, #0]
 800d84e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d852:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d856:	d108      	bne.n	800d86a <_scanf_float+0x1d2>
 800d858:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d85c:	6022      	str	r2, [r4, #0]
 800d85e:	f04f 0a01 	mov.w	sl, #1
 800d862:	e7e2      	b.n	800d82a <_scanf_float+0x192>
 800d864:	f1ba 0f02 	cmp.w	sl, #2
 800d868:	d055      	beq.n	800d916 <_scanf_float+0x27e>
 800d86a:	2d01      	cmp	r5, #1
 800d86c:	d002      	beq.n	800d874 <_scanf_float+0x1dc>
 800d86e:	2d04      	cmp	r5, #4
 800d870:	f47f af44 	bne.w	800d6fc <_scanf_float+0x64>
 800d874:	3501      	adds	r5, #1
 800d876:	b2ed      	uxtb	r5, r5
 800d878:	e7d7      	b.n	800d82a <_scanf_float+0x192>
 800d87a:	f1ba 0f01 	cmp.w	sl, #1
 800d87e:	f47f af3d 	bne.w	800d6fc <_scanf_float+0x64>
 800d882:	f04f 0a02 	mov.w	sl, #2
 800d886:	e7d0      	b.n	800d82a <_scanf_float+0x192>
 800d888:	b97d      	cbnz	r5, 800d8aa <_scanf_float+0x212>
 800d88a:	f1b9 0f00 	cmp.w	r9, #0
 800d88e:	f47f af38 	bne.w	800d702 <_scanf_float+0x6a>
 800d892:	6822      	ldr	r2, [r4, #0]
 800d894:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d898:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d89c:	f040 8108 	bne.w	800dab0 <_scanf_float+0x418>
 800d8a0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d8a4:	6022      	str	r2, [r4, #0]
 800d8a6:	2501      	movs	r5, #1
 800d8a8:	e7bf      	b.n	800d82a <_scanf_float+0x192>
 800d8aa:	2d03      	cmp	r5, #3
 800d8ac:	d0e2      	beq.n	800d874 <_scanf_float+0x1dc>
 800d8ae:	2d05      	cmp	r5, #5
 800d8b0:	e7de      	b.n	800d870 <_scanf_float+0x1d8>
 800d8b2:	2d02      	cmp	r5, #2
 800d8b4:	f47f af22 	bne.w	800d6fc <_scanf_float+0x64>
 800d8b8:	2503      	movs	r5, #3
 800d8ba:	e7b6      	b.n	800d82a <_scanf_float+0x192>
 800d8bc:	2d06      	cmp	r5, #6
 800d8be:	f47f af1d 	bne.w	800d6fc <_scanf_float+0x64>
 800d8c2:	2507      	movs	r5, #7
 800d8c4:	e7b1      	b.n	800d82a <_scanf_float+0x192>
 800d8c6:	6822      	ldr	r2, [r4, #0]
 800d8c8:	0591      	lsls	r1, r2, #22
 800d8ca:	f57f af17 	bpl.w	800d6fc <_scanf_float+0x64>
 800d8ce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d8d2:	6022      	str	r2, [r4, #0]
 800d8d4:	f8cd 9008 	str.w	r9, [sp, #8]
 800d8d8:	e7a7      	b.n	800d82a <_scanf_float+0x192>
 800d8da:	6822      	ldr	r2, [r4, #0]
 800d8dc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d8e0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d8e4:	d006      	beq.n	800d8f4 <_scanf_float+0x25c>
 800d8e6:	0550      	lsls	r0, r2, #21
 800d8e8:	f57f af08 	bpl.w	800d6fc <_scanf_float+0x64>
 800d8ec:	f1b9 0f00 	cmp.w	r9, #0
 800d8f0:	f000 80de 	beq.w	800dab0 <_scanf_float+0x418>
 800d8f4:	0591      	lsls	r1, r2, #22
 800d8f6:	bf58      	it	pl
 800d8f8:	9902      	ldrpl	r1, [sp, #8]
 800d8fa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d8fe:	bf58      	it	pl
 800d900:	eba9 0101 	subpl.w	r1, r9, r1
 800d904:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d908:	bf58      	it	pl
 800d90a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d90e:	6022      	str	r2, [r4, #0]
 800d910:	f04f 0900 	mov.w	r9, #0
 800d914:	e789      	b.n	800d82a <_scanf_float+0x192>
 800d916:	f04f 0a03 	mov.w	sl, #3
 800d91a:	e786      	b.n	800d82a <_scanf_float+0x192>
 800d91c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d920:	4639      	mov	r1, r7
 800d922:	4640      	mov	r0, r8
 800d924:	4798      	blx	r3
 800d926:	2800      	cmp	r0, #0
 800d928:	f43f aedb 	beq.w	800d6e2 <_scanf_float+0x4a>
 800d92c:	e6e6      	b.n	800d6fc <_scanf_float+0x64>
 800d92e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d932:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d936:	463a      	mov	r2, r7
 800d938:	4640      	mov	r0, r8
 800d93a:	4798      	blx	r3
 800d93c:	6923      	ldr	r3, [r4, #16]
 800d93e:	3b01      	subs	r3, #1
 800d940:	6123      	str	r3, [r4, #16]
 800d942:	e6e8      	b.n	800d716 <_scanf_float+0x7e>
 800d944:	1e6b      	subs	r3, r5, #1
 800d946:	2b06      	cmp	r3, #6
 800d948:	d824      	bhi.n	800d994 <_scanf_float+0x2fc>
 800d94a:	2d02      	cmp	r5, #2
 800d94c:	d836      	bhi.n	800d9bc <_scanf_float+0x324>
 800d94e:	9b01      	ldr	r3, [sp, #4]
 800d950:	429e      	cmp	r6, r3
 800d952:	f67f aee4 	bls.w	800d71e <_scanf_float+0x86>
 800d956:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d95a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d95e:	463a      	mov	r2, r7
 800d960:	4640      	mov	r0, r8
 800d962:	4798      	blx	r3
 800d964:	6923      	ldr	r3, [r4, #16]
 800d966:	3b01      	subs	r3, #1
 800d968:	6123      	str	r3, [r4, #16]
 800d96a:	e7f0      	b.n	800d94e <_scanf_float+0x2b6>
 800d96c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d970:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d974:	463a      	mov	r2, r7
 800d976:	4640      	mov	r0, r8
 800d978:	4798      	blx	r3
 800d97a:	6923      	ldr	r3, [r4, #16]
 800d97c:	3b01      	subs	r3, #1
 800d97e:	6123      	str	r3, [r4, #16]
 800d980:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d984:	fa5f fa8a 	uxtb.w	sl, sl
 800d988:	f1ba 0f02 	cmp.w	sl, #2
 800d98c:	d1ee      	bne.n	800d96c <_scanf_float+0x2d4>
 800d98e:	3d03      	subs	r5, #3
 800d990:	b2ed      	uxtb	r5, r5
 800d992:	1b76      	subs	r6, r6, r5
 800d994:	6823      	ldr	r3, [r4, #0]
 800d996:	05da      	lsls	r2, r3, #23
 800d998:	d530      	bpl.n	800d9fc <_scanf_float+0x364>
 800d99a:	055b      	lsls	r3, r3, #21
 800d99c:	d511      	bpl.n	800d9c2 <_scanf_float+0x32a>
 800d99e:	9b01      	ldr	r3, [sp, #4]
 800d9a0:	429e      	cmp	r6, r3
 800d9a2:	f67f aebc 	bls.w	800d71e <_scanf_float+0x86>
 800d9a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d9aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d9ae:	463a      	mov	r2, r7
 800d9b0:	4640      	mov	r0, r8
 800d9b2:	4798      	blx	r3
 800d9b4:	6923      	ldr	r3, [r4, #16]
 800d9b6:	3b01      	subs	r3, #1
 800d9b8:	6123      	str	r3, [r4, #16]
 800d9ba:	e7f0      	b.n	800d99e <_scanf_float+0x306>
 800d9bc:	46aa      	mov	sl, r5
 800d9be:	46b3      	mov	fp, r6
 800d9c0:	e7de      	b.n	800d980 <_scanf_float+0x2e8>
 800d9c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d9c6:	6923      	ldr	r3, [r4, #16]
 800d9c8:	2965      	cmp	r1, #101	@ 0x65
 800d9ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800d9ce:	f106 35ff 	add.w	r5, r6, #4294967295
 800d9d2:	6123      	str	r3, [r4, #16]
 800d9d4:	d00c      	beq.n	800d9f0 <_scanf_float+0x358>
 800d9d6:	2945      	cmp	r1, #69	@ 0x45
 800d9d8:	d00a      	beq.n	800d9f0 <_scanf_float+0x358>
 800d9da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d9de:	463a      	mov	r2, r7
 800d9e0:	4640      	mov	r0, r8
 800d9e2:	4798      	blx	r3
 800d9e4:	6923      	ldr	r3, [r4, #16]
 800d9e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d9ea:	3b01      	subs	r3, #1
 800d9ec:	1eb5      	subs	r5, r6, #2
 800d9ee:	6123      	str	r3, [r4, #16]
 800d9f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d9f4:	463a      	mov	r2, r7
 800d9f6:	4640      	mov	r0, r8
 800d9f8:	4798      	blx	r3
 800d9fa:	462e      	mov	r6, r5
 800d9fc:	6822      	ldr	r2, [r4, #0]
 800d9fe:	f012 0210 	ands.w	r2, r2, #16
 800da02:	d001      	beq.n	800da08 <_scanf_float+0x370>
 800da04:	2000      	movs	r0, #0
 800da06:	e68b      	b.n	800d720 <_scanf_float+0x88>
 800da08:	7032      	strb	r2, [r6, #0]
 800da0a:	6823      	ldr	r3, [r4, #0]
 800da0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800da10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800da14:	d11c      	bne.n	800da50 <_scanf_float+0x3b8>
 800da16:	9b02      	ldr	r3, [sp, #8]
 800da18:	454b      	cmp	r3, r9
 800da1a:	eba3 0209 	sub.w	r2, r3, r9
 800da1e:	d123      	bne.n	800da68 <_scanf_float+0x3d0>
 800da20:	9901      	ldr	r1, [sp, #4]
 800da22:	2200      	movs	r2, #0
 800da24:	4640      	mov	r0, r8
 800da26:	f002 fca3 	bl	8010370 <_strtod_r>
 800da2a:	9b03      	ldr	r3, [sp, #12]
 800da2c:	6821      	ldr	r1, [r4, #0]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f011 0f02 	tst.w	r1, #2
 800da34:	ec57 6b10 	vmov	r6, r7, d0
 800da38:	f103 0204 	add.w	r2, r3, #4
 800da3c:	d01f      	beq.n	800da7e <_scanf_float+0x3e6>
 800da3e:	9903      	ldr	r1, [sp, #12]
 800da40:	600a      	str	r2, [r1, #0]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	e9c3 6700 	strd	r6, r7, [r3]
 800da48:	68e3      	ldr	r3, [r4, #12]
 800da4a:	3301      	adds	r3, #1
 800da4c:	60e3      	str	r3, [r4, #12]
 800da4e:	e7d9      	b.n	800da04 <_scanf_float+0x36c>
 800da50:	9b04      	ldr	r3, [sp, #16]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d0e4      	beq.n	800da20 <_scanf_float+0x388>
 800da56:	9905      	ldr	r1, [sp, #20]
 800da58:	230a      	movs	r3, #10
 800da5a:	3101      	adds	r1, #1
 800da5c:	4640      	mov	r0, r8
 800da5e:	f002 fd07 	bl	8010470 <_strtol_r>
 800da62:	9b04      	ldr	r3, [sp, #16]
 800da64:	9e05      	ldr	r6, [sp, #20]
 800da66:	1ac2      	subs	r2, r0, r3
 800da68:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800da6c:	429e      	cmp	r6, r3
 800da6e:	bf28      	it	cs
 800da70:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800da74:	4910      	ldr	r1, [pc, #64]	@ (800dab8 <_scanf_float+0x420>)
 800da76:	4630      	mov	r0, r6
 800da78:	f000 f988 	bl	800dd8c <siprintf>
 800da7c:	e7d0      	b.n	800da20 <_scanf_float+0x388>
 800da7e:	f011 0f04 	tst.w	r1, #4
 800da82:	9903      	ldr	r1, [sp, #12]
 800da84:	600a      	str	r2, [r1, #0]
 800da86:	d1dc      	bne.n	800da42 <_scanf_float+0x3aa>
 800da88:	681d      	ldr	r5, [r3, #0]
 800da8a:	4632      	mov	r2, r6
 800da8c:	463b      	mov	r3, r7
 800da8e:	4630      	mov	r0, r6
 800da90:	4639      	mov	r1, r7
 800da92:	f7f3 f84b 	bl	8000b2c <__aeabi_dcmpun>
 800da96:	b128      	cbz	r0, 800daa4 <_scanf_float+0x40c>
 800da98:	4808      	ldr	r0, [pc, #32]	@ (800dabc <_scanf_float+0x424>)
 800da9a:	f000 fb0d 	bl	800e0b8 <nanf>
 800da9e:	ed85 0a00 	vstr	s0, [r5]
 800daa2:	e7d1      	b.n	800da48 <_scanf_float+0x3b0>
 800daa4:	4630      	mov	r0, r6
 800daa6:	4639      	mov	r1, r7
 800daa8:	f7f3 f89e 	bl	8000be8 <__aeabi_d2f>
 800daac:	6028      	str	r0, [r5, #0]
 800daae:	e7cb      	b.n	800da48 <_scanf_float+0x3b0>
 800dab0:	f04f 0900 	mov.w	r9, #0
 800dab4:	e629      	b.n	800d70a <_scanf_float+0x72>
 800dab6:	bf00      	nop
 800dab8:	0801d644 	.word	0x0801d644
 800dabc:	0801d9dd 	.word	0x0801d9dd

0800dac0 <std>:
 800dac0:	2300      	movs	r3, #0
 800dac2:	b510      	push	{r4, lr}
 800dac4:	4604      	mov	r4, r0
 800dac6:	e9c0 3300 	strd	r3, r3, [r0]
 800daca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dace:	6083      	str	r3, [r0, #8]
 800dad0:	8181      	strh	r1, [r0, #12]
 800dad2:	6643      	str	r3, [r0, #100]	@ 0x64
 800dad4:	81c2      	strh	r2, [r0, #14]
 800dad6:	6183      	str	r3, [r0, #24]
 800dad8:	4619      	mov	r1, r3
 800dada:	2208      	movs	r2, #8
 800dadc:	305c      	adds	r0, #92	@ 0x5c
 800dade:	f000 fa4d 	bl	800df7c <memset>
 800dae2:	4b0d      	ldr	r3, [pc, #52]	@ (800db18 <std+0x58>)
 800dae4:	6263      	str	r3, [r4, #36]	@ 0x24
 800dae6:	4b0d      	ldr	r3, [pc, #52]	@ (800db1c <std+0x5c>)
 800dae8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800daea:	4b0d      	ldr	r3, [pc, #52]	@ (800db20 <std+0x60>)
 800daec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800daee:	4b0d      	ldr	r3, [pc, #52]	@ (800db24 <std+0x64>)
 800daf0:	6323      	str	r3, [r4, #48]	@ 0x30
 800daf2:	4b0d      	ldr	r3, [pc, #52]	@ (800db28 <std+0x68>)
 800daf4:	6224      	str	r4, [r4, #32]
 800daf6:	429c      	cmp	r4, r3
 800daf8:	d006      	beq.n	800db08 <std+0x48>
 800dafa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dafe:	4294      	cmp	r4, r2
 800db00:	d002      	beq.n	800db08 <std+0x48>
 800db02:	33d0      	adds	r3, #208	@ 0xd0
 800db04:	429c      	cmp	r4, r3
 800db06:	d105      	bne.n	800db14 <std+0x54>
 800db08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800db0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db10:	f000 bac0 	b.w	800e094 <__retarget_lock_init_recursive>
 800db14:	bd10      	pop	{r4, pc}
 800db16:	bf00      	nop
 800db18:	0800ddcd 	.word	0x0800ddcd
 800db1c:	0800ddef 	.word	0x0800ddef
 800db20:	0800de27 	.word	0x0800de27
 800db24:	0800de4b 	.word	0x0800de4b
 800db28:	200033b0 	.word	0x200033b0

0800db2c <stdio_exit_handler>:
 800db2c:	4a02      	ldr	r2, [pc, #8]	@ (800db38 <stdio_exit_handler+0xc>)
 800db2e:	4903      	ldr	r1, [pc, #12]	@ (800db3c <stdio_exit_handler+0x10>)
 800db30:	4803      	ldr	r0, [pc, #12]	@ (800db40 <stdio_exit_handler+0x14>)
 800db32:	f000 b869 	b.w	800dc08 <_fwalk_sglue>
 800db36:	bf00      	nop
 800db38:	200008a4 	.word	0x200008a4
 800db3c:	08010ab1 	.word	0x08010ab1
 800db40:	200008b4 	.word	0x200008b4

0800db44 <cleanup_stdio>:
 800db44:	6841      	ldr	r1, [r0, #4]
 800db46:	4b0c      	ldr	r3, [pc, #48]	@ (800db78 <cleanup_stdio+0x34>)
 800db48:	4299      	cmp	r1, r3
 800db4a:	b510      	push	{r4, lr}
 800db4c:	4604      	mov	r4, r0
 800db4e:	d001      	beq.n	800db54 <cleanup_stdio+0x10>
 800db50:	f002 ffae 	bl	8010ab0 <_fflush_r>
 800db54:	68a1      	ldr	r1, [r4, #8]
 800db56:	4b09      	ldr	r3, [pc, #36]	@ (800db7c <cleanup_stdio+0x38>)
 800db58:	4299      	cmp	r1, r3
 800db5a:	d002      	beq.n	800db62 <cleanup_stdio+0x1e>
 800db5c:	4620      	mov	r0, r4
 800db5e:	f002 ffa7 	bl	8010ab0 <_fflush_r>
 800db62:	68e1      	ldr	r1, [r4, #12]
 800db64:	4b06      	ldr	r3, [pc, #24]	@ (800db80 <cleanup_stdio+0x3c>)
 800db66:	4299      	cmp	r1, r3
 800db68:	d004      	beq.n	800db74 <cleanup_stdio+0x30>
 800db6a:	4620      	mov	r0, r4
 800db6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db70:	f002 bf9e 	b.w	8010ab0 <_fflush_r>
 800db74:	bd10      	pop	{r4, pc}
 800db76:	bf00      	nop
 800db78:	200033b0 	.word	0x200033b0
 800db7c:	20003418 	.word	0x20003418
 800db80:	20003480 	.word	0x20003480

0800db84 <global_stdio_init.part.0>:
 800db84:	b510      	push	{r4, lr}
 800db86:	4b0b      	ldr	r3, [pc, #44]	@ (800dbb4 <global_stdio_init.part.0+0x30>)
 800db88:	4c0b      	ldr	r4, [pc, #44]	@ (800dbb8 <global_stdio_init.part.0+0x34>)
 800db8a:	4a0c      	ldr	r2, [pc, #48]	@ (800dbbc <global_stdio_init.part.0+0x38>)
 800db8c:	601a      	str	r2, [r3, #0]
 800db8e:	4620      	mov	r0, r4
 800db90:	2200      	movs	r2, #0
 800db92:	2104      	movs	r1, #4
 800db94:	f7ff ff94 	bl	800dac0 <std>
 800db98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800db9c:	2201      	movs	r2, #1
 800db9e:	2109      	movs	r1, #9
 800dba0:	f7ff ff8e 	bl	800dac0 <std>
 800dba4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dba8:	2202      	movs	r2, #2
 800dbaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbae:	2112      	movs	r1, #18
 800dbb0:	f7ff bf86 	b.w	800dac0 <std>
 800dbb4:	200034e8 	.word	0x200034e8
 800dbb8:	200033b0 	.word	0x200033b0
 800dbbc:	0800db2d 	.word	0x0800db2d

0800dbc0 <__sfp_lock_acquire>:
 800dbc0:	4801      	ldr	r0, [pc, #4]	@ (800dbc8 <__sfp_lock_acquire+0x8>)
 800dbc2:	f000 ba68 	b.w	800e096 <__retarget_lock_acquire_recursive>
 800dbc6:	bf00      	nop
 800dbc8:	200034f1 	.word	0x200034f1

0800dbcc <__sfp_lock_release>:
 800dbcc:	4801      	ldr	r0, [pc, #4]	@ (800dbd4 <__sfp_lock_release+0x8>)
 800dbce:	f000 ba63 	b.w	800e098 <__retarget_lock_release_recursive>
 800dbd2:	bf00      	nop
 800dbd4:	200034f1 	.word	0x200034f1

0800dbd8 <__sinit>:
 800dbd8:	b510      	push	{r4, lr}
 800dbda:	4604      	mov	r4, r0
 800dbdc:	f7ff fff0 	bl	800dbc0 <__sfp_lock_acquire>
 800dbe0:	6a23      	ldr	r3, [r4, #32]
 800dbe2:	b11b      	cbz	r3, 800dbec <__sinit+0x14>
 800dbe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbe8:	f7ff bff0 	b.w	800dbcc <__sfp_lock_release>
 800dbec:	4b04      	ldr	r3, [pc, #16]	@ (800dc00 <__sinit+0x28>)
 800dbee:	6223      	str	r3, [r4, #32]
 800dbf0:	4b04      	ldr	r3, [pc, #16]	@ (800dc04 <__sinit+0x2c>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d1f5      	bne.n	800dbe4 <__sinit+0xc>
 800dbf8:	f7ff ffc4 	bl	800db84 <global_stdio_init.part.0>
 800dbfc:	e7f2      	b.n	800dbe4 <__sinit+0xc>
 800dbfe:	bf00      	nop
 800dc00:	0800db45 	.word	0x0800db45
 800dc04:	200034e8 	.word	0x200034e8

0800dc08 <_fwalk_sglue>:
 800dc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc0c:	4607      	mov	r7, r0
 800dc0e:	4688      	mov	r8, r1
 800dc10:	4614      	mov	r4, r2
 800dc12:	2600      	movs	r6, #0
 800dc14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc18:	f1b9 0901 	subs.w	r9, r9, #1
 800dc1c:	d505      	bpl.n	800dc2a <_fwalk_sglue+0x22>
 800dc1e:	6824      	ldr	r4, [r4, #0]
 800dc20:	2c00      	cmp	r4, #0
 800dc22:	d1f7      	bne.n	800dc14 <_fwalk_sglue+0xc>
 800dc24:	4630      	mov	r0, r6
 800dc26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc2a:	89ab      	ldrh	r3, [r5, #12]
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	d907      	bls.n	800dc40 <_fwalk_sglue+0x38>
 800dc30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dc34:	3301      	adds	r3, #1
 800dc36:	d003      	beq.n	800dc40 <_fwalk_sglue+0x38>
 800dc38:	4629      	mov	r1, r5
 800dc3a:	4638      	mov	r0, r7
 800dc3c:	47c0      	blx	r8
 800dc3e:	4306      	orrs	r6, r0
 800dc40:	3568      	adds	r5, #104	@ 0x68
 800dc42:	e7e9      	b.n	800dc18 <_fwalk_sglue+0x10>

0800dc44 <iprintf>:
 800dc44:	b40f      	push	{r0, r1, r2, r3}
 800dc46:	b507      	push	{r0, r1, r2, lr}
 800dc48:	4906      	ldr	r1, [pc, #24]	@ (800dc64 <iprintf+0x20>)
 800dc4a:	ab04      	add	r3, sp, #16
 800dc4c:	6808      	ldr	r0, [r1, #0]
 800dc4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc52:	6881      	ldr	r1, [r0, #8]
 800dc54:	9301      	str	r3, [sp, #4]
 800dc56:	f002 fd8f 	bl	8010778 <_vfiprintf_r>
 800dc5a:	b003      	add	sp, #12
 800dc5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc60:	b004      	add	sp, #16
 800dc62:	4770      	bx	lr
 800dc64:	200008b0 	.word	0x200008b0

0800dc68 <_puts_r>:
 800dc68:	6a03      	ldr	r3, [r0, #32]
 800dc6a:	b570      	push	{r4, r5, r6, lr}
 800dc6c:	6884      	ldr	r4, [r0, #8]
 800dc6e:	4605      	mov	r5, r0
 800dc70:	460e      	mov	r6, r1
 800dc72:	b90b      	cbnz	r3, 800dc78 <_puts_r+0x10>
 800dc74:	f7ff ffb0 	bl	800dbd8 <__sinit>
 800dc78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc7a:	07db      	lsls	r3, r3, #31
 800dc7c:	d405      	bmi.n	800dc8a <_puts_r+0x22>
 800dc7e:	89a3      	ldrh	r3, [r4, #12]
 800dc80:	0598      	lsls	r0, r3, #22
 800dc82:	d402      	bmi.n	800dc8a <_puts_r+0x22>
 800dc84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc86:	f000 fa06 	bl	800e096 <__retarget_lock_acquire_recursive>
 800dc8a:	89a3      	ldrh	r3, [r4, #12]
 800dc8c:	0719      	lsls	r1, r3, #28
 800dc8e:	d502      	bpl.n	800dc96 <_puts_r+0x2e>
 800dc90:	6923      	ldr	r3, [r4, #16]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d135      	bne.n	800dd02 <_puts_r+0x9a>
 800dc96:	4621      	mov	r1, r4
 800dc98:	4628      	mov	r0, r5
 800dc9a:	f000 f919 	bl	800ded0 <__swsetup_r>
 800dc9e:	b380      	cbz	r0, 800dd02 <_puts_r+0x9a>
 800dca0:	f04f 35ff 	mov.w	r5, #4294967295
 800dca4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dca6:	07da      	lsls	r2, r3, #31
 800dca8:	d405      	bmi.n	800dcb6 <_puts_r+0x4e>
 800dcaa:	89a3      	ldrh	r3, [r4, #12]
 800dcac:	059b      	lsls	r3, r3, #22
 800dcae:	d402      	bmi.n	800dcb6 <_puts_r+0x4e>
 800dcb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dcb2:	f000 f9f1 	bl	800e098 <__retarget_lock_release_recursive>
 800dcb6:	4628      	mov	r0, r5
 800dcb8:	bd70      	pop	{r4, r5, r6, pc}
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	da04      	bge.n	800dcc8 <_puts_r+0x60>
 800dcbe:	69a2      	ldr	r2, [r4, #24]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	dc17      	bgt.n	800dcf4 <_puts_r+0x8c>
 800dcc4:	290a      	cmp	r1, #10
 800dcc6:	d015      	beq.n	800dcf4 <_puts_r+0x8c>
 800dcc8:	6823      	ldr	r3, [r4, #0]
 800dcca:	1c5a      	adds	r2, r3, #1
 800dccc:	6022      	str	r2, [r4, #0]
 800dcce:	7019      	strb	r1, [r3, #0]
 800dcd0:	68a3      	ldr	r3, [r4, #8]
 800dcd2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dcd6:	3b01      	subs	r3, #1
 800dcd8:	60a3      	str	r3, [r4, #8]
 800dcda:	2900      	cmp	r1, #0
 800dcdc:	d1ed      	bne.n	800dcba <_puts_r+0x52>
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	da11      	bge.n	800dd06 <_puts_r+0x9e>
 800dce2:	4622      	mov	r2, r4
 800dce4:	210a      	movs	r1, #10
 800dce6:	4628      	mov	r0, r5
 800dce8:	f000 f8b3 	bl	800de52 <__swbuf_r>
 800dcec:	3001      	adds	r0, #1
 800dcee:	d0d7      	beq.n	800dca0 <_puts_r+0x38>
 800dcf0:	250a      	movs	r5, #10
 800dcf2:	e7d7      	b.n	800dca4 <_puts_r+0x3c>
 800dcf4:	4622      	mov	r2, r4
 800dcf6:	4628      	mov	r0, r5
 800dcf8:	f000 f8ab 	bl	800de52 <__swbuf_r>
 800dcfc:	3001      	adds	r0, #1
 800dcfe:	d1e7      	bne.n	800dcd0 <_puts_r+0x68>
 800dd00:	e7ce      	b.n	800dca0 <_puts_r+0x38>
 800dd02:	3e01      	subs	r6, #1
 800dd04:	e7e4      	b.n	800dcd0 <_puts_r+0x68>
 800dd06:	6823      	ldr	r3, [r4, #0]
 800dd08:	1c5a      	adds	r2, r3, #1
 800dd0a:	6022      	str	r2, [r4, #0]
 800dd0c:	220a      	movs	r2, #10
 800dd0e:	701a      	strb	r2, [r3, #0]
 800dd10:	e7ee      	b.n	800dcf0 <_puts_r+0x88>
	...

0800dd14 <puts>:
 800dd14:	4b02      	ldr	r3, [pc, #8]	@ (800dd20 <puts+0xc>)
 800dd16:	4601      	mov	r1, r0
 800dd18:	6818      	ldr	r0, [r3, #0]
 800dd1a:	f7ff bfa5 	b.w	800dc68 <_puts_r>
 800dd1e:	bf00      	nop
 800dd20:	200008b0 	.word	0x200008b0

0800dd24 <sniprintf>:
 800dd24:	b40c      	push	{r2, r3}
 800dd26:	b530      	push	{r4, r5, lr}
 800dd28:	4b17      	ldr	r3, [pc, #92]	@ (800dd88 <sniprintf+0x64>)
 800dd2a:	1e0c      	subs	r4, r1, #0
 800dd2c:	681d      	ldr	r5, [r3, #0]
 800dd2e:	b09d      	sub	sp, #116	@ 0x74
 800dd30:	da08      	bge.n	800dd44 <sniprintf+0x20>
 800dd32:	238b      	movs	r3, #139	@ 0x8b
 800dd34:	602b      	str	r3, [r5, #0]
 800dd36:	f04f 30ff 	mov.w	r0, #4294967295
 800dd3a:	b01d      	add	sp, #116	@ 0x74
 800dd3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd40:	b002      	add	sp, #8
 800dd42:	4770      	bx	lr
 800dd44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800dd48:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dd4c:	bf14      	ite	ne
 800dd4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dd52:	4623      	moveq	r3, r4
 800dd54:	9304      	str	r3, [sp, #16]
 800dd56:	9307      	str	r3, [sp, #28]
 800dd58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd5c:	9002      	str	r0, [sp, #8]
 800dd5e:	9006      	str	r0, [sp, #24]
 800dd60:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dd64:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dd66:	ab21      	add	r3, sp, #132	@ 0x84
 800dd68:	a902      	add	r1, sp, #8
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	9301      	str	r3, [sp, #4]
 800dd6e:	f002 fbdd 	bl	801052c <_svfiprintf_r>
 800dd72:	1c43      	adds	r3, r0, #1
 800dd74:	bfbc      	itt	lt
 800dd76:	238b      	movlt	r3, #139	@ 0x8b
 800dd78:	602b      	strlt	r3, [r5, #0]
 800dd7a:	2c00      	cmp	r4, #0
 800dd7c:	d0dd      	beq.n	800dd3a <sniprintf+0x16>
 800dd7e:	9b02      	ldr	r3, [sp, #8]
 800dd80:	2200      	movs	r2, #0
 800dd82:	701a      	strb	r2, [r3, #0]
 800dd84:	e7d9      	b.n	800dd3a <sniprintf+0x16>
 800dd86:	bf00      	nop
 800dd88:	200008b0 	.word	0x200008b0

0800dd8c <siprintf>:
 800dd8c:	b40e      	push	{r1, r2, r3}
 800dd8e:	b500      	push	{lr}
 800dd90:	b09c      	sub	sp, #112	@ 0x70
 800dd92:	ab1d      	add	r3, sp, #116	@ 0x74
 800dd94:	9002      	str	r0, [sp, #8]
 800dd96:	9006      	str	r0, [sp, #24]
 800dd98:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dd9c:	4809      	ldr	r0, [pc, #36]	@ (800ddc4 <siprintf+0x38>)
 800dd9e:	9107      	str	r1, [sp, #28]
 800dda0:	9104      	str	r1, [sp, #16]
 800dda2:	4909      	ldr	r1, [pc, #36]	@ (800ddc8 <siprintf+0x3c>)
 800dda4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dda8:	9105      	str	r1, [sp, #20]
 800ddaa:	6800      	ldr	r0, [r0, #0]
 800ddac:	9301      	str	r3, [sp, #4]
 800ddae:	a902      	add	r1, sp, #8
 800ddb0:	f002 fbbc 	bl	801052c <_svfiprintf_r>
 800ddb4:	9b02      	ldr	r3, [sp, #8]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	701a      	strb	r2, [r3, #0]
 800ddba:	b01c      	add	sp, #112	@ 0x70
 800ddbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddc0:	b003      	add	sp, #12
 800ddc2:	4770      	bx	lr
 800ddc4:	200008b0 	.word	0x200008b0
 800ddc8:	ffff0208 	.word	0xffff0208

0800ddcc <__sread>:
 800ddcc:	b510      	push	{r4, lr}
 800ddce:	460c      	mov	r4, r1
 800ddd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddd4:	f000 f900 	bl	800dfd8 <_read_r>
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	bfab      	itete	ge
 800dddc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ddde:	89a3      	ldrhlt	r3, [r4, #12]
 800dde0:	181b      	addge	r3, r3, r0
 800dde2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dde6:	bfac      	ite	ge
 800dde8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ddea:	81a3      	strhlt	r3, [r4, #12]
 800ddec:	bd10      	pop	{r4, pc}

0800ddee <__swrite>:
 800ddee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddf2:	461f      	mov	r7, r3
 800ddf4:	898b      	ldrh	r3, [r1, #12]
 800ddf6:	05db      	lsls	r3, r3, #23
 800ddf8:	4605      	mov	r5, r0
 800ddfa:	460c      	mov	r4, r1
 800ddfc:	4616      	mov	r6, r2
 800ddfe:	d505      	bpl.n	800de0c <__swrite+0x1e>
 800de00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de04:	2302      	movs	r3, #2
 800de06:	2200      	movs	r2, #0
 800de08:	f000 f8d4 	bl	800dfb4 <_lseek_r>
 800de0c:	89a3      	ldrh	r3, [r4, #12]
 800de0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800de16:	81a3      	strh	r3, [r4, #12]
 800de18:	4632      	mov	r2, r6
 800de1a:	463b      	mov	r3, r7
 800de1c:	4628      	mov	r0, r5
 800de1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de22:	f000 b8fb 	b.w	800e01c <_write_r>

0800de26 <__sseek>:
 800de26:	b510      	push	{r4, lr}
 800de28:	460c      	mov	r4, r1
 800de2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de2e:	f000 f8c1 	bl	800dfb4 <_lseek_r>
 800de32:	1c43      	adds	r3, r0, #1
 800de34:	89a3      	ldrh	r3, [r4, #12]
 800de36:	bf15      	itete	ne
 800de38:	6560      	strne	r0, [r4, #84]	@ 0x54
 800de3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800de3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800de42:	81a3      	strheq	r3, [r4, #12]
 800de44:	bf18      	it	ne
 800de46:	81a3      	strhne	r3, [r4, #12]
 800de48:	bd10      	pop	{r4, pc}

0800de4a <__sclose>:
 800de4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de4e:	f000 b8a1 	b.w	800df94 <_close_r>

0800de52 <__swbuf_r>:
 800de52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de54:	460e      	mov	r6, r1
 800de56:	4614      	mov	r4, r2
 800de58:	4605      	mov	r5, r0
 800de5a:	b118      	cbz	r0, 800de64 <__swbuf_r+0x12>
 800de5c:	6a03      	ldr	r3, [r0, #32]
 800de5e:	b90b      	cbnz	r3, 800de64 <__swbuf_r+0x12>
 800de60:	f7ff feba 	bl	800dbd8 <__sinit>
 800de64:	69a3      	ldr	r3, [r4, #24]
 800de66:	60a3      	str	r3, [r4, #8]
 800de68:	89a3      	ldrh	r3, [r4, #12]
 800de6a:	071a      	lsls	r2, r3, #28
 800de6c:	d501      	bpl.n	800de72 <__swbuf_r+0x20>
 800de6e:	6923      	ldr	r3, [r4, #16]
 800de70:	b943      	cbnz	r3, 800de84 <__swbuf_r+0x32>
 800de72:	4621      	mov	r1, r4
 800de74:	4628      	mov	r0, r5
 800de76:	f000 f82b 	bl	800ded0 <__swsetup_r>
 800de7a:	b118      	cbz	r0, 800de84 <__swbuf_r+0x32>
 800de7c:	f04f 37ff 	mov.w	r7, #4294967295
 800de80:	4638      	mov	r0, r7
 800de82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de84:	6823      	ldr	r3, [r4, #0]
 800de86:	6922      	ldr	r2, [r4, #16]
 800de88:	1a98      	subs	r0, r3, r2
 800de8a:	6963      	ldr	r3, [r4, #20]
 800de8c:	b2f6      	uxtb	r6, r6
 800de8e:	4283      	cmp	r3, r0
 800de90:	4637      	mov	r7, r6
 800de92:	dc05      	bgt.n	800dea0 <__swbuf_r+0x4e>
 800de94:	4621      	mov	r1, r4
 800de96:	4628      	mov	r0, r5
 800de98:	f002 fe0a 	bl	8010ab0 <_fflush_r>
 800de9c:	2800      	cmp	r0, #0
 800de9e:	d1ed      	bne.n	800de7c <__swbuf_r+0x2a>
 800dea0:	68a3      	ldr	r3, [r4, #8]
 800dea2:	3b01      	subs	r3, #1
 800dea4:	60a3      	str	r3, [r4, #8]
 800dea6:	6823      	ldr	r3, [r4, #0]
 800dea8:	1c5a      	adds	r2, r3, #1
 800deaa:	6022      	str	r2, [r4, #0]
 800deac:	701e      	strb	r6, [r3, #0]
 800deae:	6962      	ldr	r2, [r4, #20]
 800deb0:	1c43      	adds	r3, r0, #1
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d004      	beq.n	800dec0 <__swbuf_r+0x6e>
 800deb6:	89a3      	ldrh	r3, [r4, #12]
 800deb8:	07db      	lsls	r3, r3, #31
 800deba:	d5e1      	bpl.n	800de80 <__swbuf_r+0x2e>
 800debc:	2e0a      	cmp	r6, #10
 800debe:	d1df      	bne.n	800de80 <__swbuf_r+0x2e>
 800dec0:	4621      	mov	r1, r4
 800dec2:	4628      	mov	r0, r5
 800dec4:	f002 fdf4 	bl	8010ab0 <_fflush_r>
 800dec8:	2800      	cmp	r0, #0
 800deca:	d0d9      	beq.n	800de80 <__swbuf_r+0x2e>
 800decc:	e7d6      	b.n	800de7c <__swbuf_r+0x2a>
	...

0800ded0 <__swsetup_r>:
 800ded0:	b538      	push	{r3, r4, r5, lr}
 800ded2:	4b29      	ldr	r3, [pc, #164]	@ (800df78 <__swsetup_r+0xa8>)
 800ded4:	4605      	mov	r5, r0
 800ded6:	6818      	ldr	r0, [r3, #0]
 800ded8:	460c      	mov	r4, r1
 800deda:	b118      	cbz	r0, 800dee4 <__swsetup_r+0x14>
 800dedc:	6a03      	ldr	r3, [r0, #32]
 800dede:	b90b      	cbnz	r3, 800dee4 <__swsetup_r+0x14>
 800dee0:	f7ff fe7a 	bl	800dbd8 <__sinit>
 800dee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dee8:	0719      	lsls	r1, r3, #28
 800deea:	d422      	bmi.n	800df32 <__swsetup_r+0x62>
 800deec:	06da      	lsls	r2, r3, #27
 800deee:	d407      	bmi.n	800df00 <__swsetup_r+0x30>
 800def0:	2209      	movs	r2, #9
 800def2:	602a      	str	r2, [r5, #0]
 800def4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800def8:	81a3      	strh	r3, [r4, #12]
 800defa:	f04f 30ff 	mov.w	r0, #4294967295
 800defe:	e033      	b.n	800df68 <__swsetup_r+0x98>
 800df00:	0758      	lsls	r0, r3, #29
 800df02:	d512      	bpl.n	800df2a <__swsetup_r+0x5a>
 800df04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df06:	b141      	cbz	r1, 800df1a <__swsetup_r+0x4a>
 800df08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df0c:	4299      	cmp	r1, r3
 800df0e:	d002      	beq.n	800df16 <__swsetup_r+0x46>
 800df10:	4628      	mov	r0, r5
 800df12:	f000 ff25 	bl	800ed60 <_free_r>
 800df16:	2300      	movs	r3, #0
 800df18:	6363      	str	r3, [r4, #52]	@ 0x34
 800df1a:	89a3      	ldrh	r3, [r4, #12]
 800df1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800df20:	81a3      	strh	r3, [r4, #12]
 800df22:	2300      	movs	r3, #0
 800df24:	6063      	str	r3, [r4, #4]
 800df26:	6923      	ldr	r3, [r4, #16]
 800df28:	6023      	str	r3, [r4, #0]
 800df2a:	89a3      	ldrh	r3, [r4, #12]
 800df2c:	f043 0308 	orr.w	r3, r3, #8
 800df30:	81a3      	strh	r3, [r4, #12]
 800df32:	6923      	ldr	r3, [r4, #16]
 800df34:	b94b      	cbnz	r3, 800df4a <__swsetup_r+0x7a>
 800df36:	89a3      	ldrh	r3, [r4, #12]
 800df38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800df3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df40:	d003      	beq.n	800df4a <__swsetup_r+0x7a>
 800df42:	4621      	mov	r1, r4
 800df44:	4628      	mov	r0, r5
 800df46:	f002 fe01 	bl	8010b4c <__smakebuf_r>
 800df4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df4e:	f013 0201 	ands.w	r2, r3, #1
 800df52:	d00a      	beq.n	800df6a <__swsetup_r+0x9a>
 800df54:	2200      	movs	r2, #0
 800df56:	60a2      	str	r2, [r4, #8]
 800df58:	6962      	ldr	r2, [r4, #20]
 800df5a:	4252      	negs	r2, r2
 800df5c:	61a2      	str	r2, [r4, #24]
 800df5e:	6922      	ldr	r2, [r4, #16]
 800df60:	b942      	cbnz	r2, 800df74 <__swsetup_r+0xa4>
 800df62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800df66:	d1c5      	bne.n	800def4 <__swsetup_r+0x24>
 800df68:	bd38      	pop	{r3, r4, r5, pc}
 800df6a:	0799      	lsls	r1, r3, #30
 800df6c:	bf58      	it	pl
 800df6e:	6962      	ldrpl	r2, [r4, #20]
 800df70:	60a2      	str	r2, [r4, #8]
 800df72:	e7f4      	b.n	800df5e <__swsetup_r+0x8e>
 800df74:	2000      	movs	r0, #0
 800df76:	e7f7      	b.n	800df68 <__swsetup_r+0x98>
 800df78:	200008b0 	.word	0x200008b0

0800df7c <memset>:
 800df7c:	4402      	add	r2, r0
 800df7e:	4603      	mov	r3, r0
 800df80:	4293      	cmp	r3, r2
 800df82:	d100      	bne.n	800df86 <memset+0xa>
 800df84:	4770      	bx	lr
 800df86:	f803 1b01 	strb.w	r1, [r3], #1
 800df8a:	e7f9      	b.n	800df80 <memset+0x4>

0800df8c <_localeconv_r>:
 800df8c:	4800      	ldr	r0, [pc, #0]	@ (800df90 <_localeconv_r+0x4>)
 800df8e:	4770      	bx	lr
 800df90:	200009f0 	.word	0x200009f0

0800df94 <_close_r>:
 800df94:	b538      	push	{r3, r4, r5, lr}
 800df96:	4d06      	ldr	r5, [pc, #24]	@ (800dfb0 <_close_r+0x1c>)
 800df98:	2300      	movs	r3, #0
 800df9a:	4604      	mov	r4, r0
 800df9c:	4608      	mov	r0, r1
 800df9e:	602b      	str	r3, [r5, #0]
 800dfa0:	f003 fb82 	bl	80116a8 <_close>
 800dfa4:	1c43      	adds	r3, r0, #1
 800dfa6:	d102      	bne.n	800dfae <_close_r+0x1a>
 800dfa8:	682b      	ldr	r3, [r5, #0]
 800dfaa:	b103      	cbz	r3, 800dfae <_close_r+0x1a>
 800dfac:	6023      	str	r3, [r4, #0]
 800dfae:	bd38      	pop	{r3, r4, r5, pc}
 800dfb0:	200034ec 	.word	0x200034ec

0800dfb4 <_lseek_r>:
 800dfb4:	b538      	push	{r3, r4, r5, lr}
 800dfb6:	4d07      	ldr	r5, [pc, #28]	@ (800dfd4 <_lseek_r+0x20>)
 800dfb8:	4604      	mov	r4, r0
 800dfba:	4608      	mov	r0, r1
 800dfbc:	4611      	mov	r1, r2
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	602a      	str	r2, [r5, #0]
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	f003 fb98 	bl	80116f8 <_lseek>
 800dfc8:	1c43      	adds	r3, r0, #1
 800dfca:	d102      	bne.n	800dfd2 <_lseek_r+0x1e>
 800dfcc:	682b      	ldr	r3, [r5, #0]
 800dfce:	b103      	cbz	r3, 800dfd2 <_lseek_r+0x1e>
 800dfd0:	6023      	str	r3, [r4, #0]
 800dfd2:	bd38      	pop	{r3, r4, r5, pc}
 800dfd4:	200034ec 	.word	0x200034ec

0800dfd8 <_read_r>:
 800dfd8:	b538      	push	{r3, r4, r5, lr}
 800dfda:	4d07      	ldr	r5, [pc, #28]	@ (800dff8 <_read_r+0x20>)
 800dfdc:	4604      	mov	r4, r0
 800dfde:	4608      	mov	r0, r1
 800dfe0:	4611      	mov	r1, r2
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	602a      	str	r2, [r5, #0]
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	f003 fb8e 	bl	8011708 <_read>
 800dfec:	1c43      	adds	r3, r0, #1
 800dfee:	d102      	bne.n	800dff6 <_read_r+0x1e>
 800dff0:	682b      	ldr	r3, [r5, #0]
 800dff2:	b103      	cbz	r3, 800dff6 <_read_r+0x1e>
 800dff4:	6023      	str	r3, [r4, #0]
 800dff6:	bd38      	pop	{r3, r4, r5, pc}
 800dff8:	200034ec 	.word	0x200034ec

0800dffc <_sbrk_r>:
 800dffc:	b538      	push	{r3, r4, r5, lr}
 800dffe:	4d06      	ldr	r5, [pc, #24]	@ (800e018 <_sbrk_r+0x1c>)
 800e000:	2300      	movs	r3, #0
 800e002:	4604      	mov	r4, r0
 800e004:	4608      	mov	r0, r1
 800e006:	602b      	str	r3, [r5, #0]
 800e008:	f7f4 f87c 	bl	8002104 <_sbrk>
 800e00c:	1c43      	adds	r3, r0, #1
 800e00e:	d102      	bne.n	800e016 <_sbrk_r+0x1a>
 800e010:	682b      	ldr	r3, [r5, #0]
 800e012:	b103      	cbz	r3, 800e016 <_sbrk_r+0x1a>
 800e014:	6023      	str	r3, [r4, #0]
 800e016:	bd38      	pop	{r3, r4, r5, pc}
 800e018:	200034ec 	.word	0x200034ec

0800e01c <_write_r>:
 800e01c:	b538      	push	{r3, r4, r5, lr}
 800e01e:	4d07      	ldr	r5, [pc, #28]	@ (800e03c <_write_r+0x20>)
 800e020:	4604      	mov	r4, r0
 800e022:	4608      	mov	r0, r1
 800e024:	4611      	mov	r1, r2
 800e026:	2200      	movs	r2, #0
 800e028:	602a      	str	r2, [r5, #0]
 800e02a:	461a      	mov	r2, r3
 800e02c:	f7f3 f801 	bl	8001032 <_write>
 800e030:	1c43      	adds	r3, r0, #1
 800e032:	d102      	bne.n	800e03a <_write_r+0x1e>
 800e034:	682b      	ldr	r3, [r5, #0]
 800e036:	b103      	cbz	r3, 800e03a <_write_r+0x1e>
 800e038:	6023      	str	r3, [r4, #0]
 800e03a:	bd38      	pop	{r3, r4, r5, pc}
 800e03c:	200034ec 	.word	0x200034ec

0800e040 <__errno>:
 800e040:	4b01      	ldr	r3, [pc, #4]	@ (800e048 <__errno+0x8>)
 800e042:	6818      	ldr	r0, [r3, #0]
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop
 800e048:	200008b0 	.word	0x200008b0

0800e04c <__libc_init_array>:
 800e04c:	b570      	push	{r4, r5, r6, lr}
 800e04e:	4d0d      	ldr	r5, [pc, #52]	@ (800e084 <__libc_init_array+0x38>)
 800e050:	4c0d      	ldr	r4, [pc, #52]	@ (800e088 <__libc_init_array+0x3c>)
 800e052:	1b64      	subs	r4, r4, r5
 800e054:	10a4      	asrs	r4, r4, #2
 800e056:	2600      	movs	r6, #0
 800e058:	42a6      	cmp	r6, r4
 800e05a:	d109      	bne.n	800e070 <__libc_init_array+0x24>
 800e05c:	4d0b      	ldr	r5, [pc, #44]	@ (800e08c <__libc_init_array+0x40>)
 800e05e:	4c0c      	ldr	r4, [pc, #48]	@ (800e090 <__libc_init_array+0x44>)
 800e060:	f003 fb5c 	bl	801171c <_init>
 800e064:	1b64      	subs	r4, r4, r5
 800e066:	10a4      	asrs	r4, r4, #2
 800e068:	2600      	movs	r6, #0
 800e06a:	42a6      	cmp	r6, r4
 800e06c:	d105      	bne.n	800e07a <__libc_init_array+0x2e>
 800e06e:	bd70      	pop	{r4, r5, r6, pc}
 800e070:	f855 3b04 	ldr.w	r3, [r5], #4
 800e074:	4798      	blx	r3
 800e076:	3601      	adds	r6, #1
 800e078:	e7ee      	b.n	800e058 <__libc_init_array+0xc>
 800e07a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e07e:	4798      	blx	r3
 800e080:	3601      	adds	r6, #1
 800e082:	e7f2      	b.n	800e06a <__libc_init_array+0x1e>
 800e084:	0801da60 	.word	0x0801da60
 800e088:	0801da60 	.word	0x0801da60
 800e08c:	0801da60 	.word	0x0801da60
 800e090:	0801da64 	.word	0x0801da64

0800e094 <__retarget_lock_init_recursive>:
 800e094:	4770      	bx	lr

0800e096 <__retarget_lock_acquire_recursive>:
 800e096:	4770      	bx	lr

0800e098 <__retarget_lock_release_recursive>:
 800e098:	4770      	bx	lr

0800e09a <memcpy>:
 800e09a:	440a      	add	r2, r1
 800e09c:	4291      	cmp	r1, r2
 800e09e:	f100 33ff 	add.w	r3, r0, #4294967295
 800e0a2:	d100      	bne.n	800e0a6 <memcpy+0xc>
 800e0a4:	4770      	bx	lr
 800e0a6:	b510      	push	{r4, lr}
 800e0a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e0b0:	4291      	cmp	r1, r2
 800e0b2:	d1f9      	bne.n	800e0a8 <memcpy+0xe>
 800e0b4:	bd10      	pop	{r4, pc}
	...

0800e0b8 <nanf>:
 800e0b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e0c0 <nanf+0x8>
 800e0bc:	4770      	bx	lr
 800e0be:	bf00      	nop
 800e0c0:	7fc00000 	.word	0x7fc00000

0800e0c4 <quorem>:
 800e0c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0c8:	6903      	ldr	r3, [r0, #16]
 800e0ca:	690c      	ldr	r4, [r1, #16]
 800e0cc:	42a3      	cmp	r3, r4
 800e0ce:	4607      	mov	r7, r0
 800e0d0:	db7e      	blt.n	800e1d0 <quorem+0x10c>
 800e0d2:	3c01      	subs	r4, #1
 800e0d4:	f101 0814 	add.w	r8, r1, #20
 800e0d8:	00a3      	lsls	r3, r4, #2
 800e0da:	f100 0514 	add.w	r5, r0, #20
 800e0de:	9300      	str	r3, [sp, #0]
 800e0e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0e4:	9301      	str	r3, [sp, #4]
 800e0e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e0ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e0f6:	fbb2 f6f3 	udiv	r6, r2, r3
 800e0fa:	d32e      	bcc.n	800e15a <quorem+0x96>
 800e0fc:	f04f 0a00 	mov.w	sl, #0
 800e100:	46c4      	mov	ip, r8
 800e102:	46ae      	mov	lr, r5
 800e104:	46d3      	mov	fp, sl
 800e106:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e10a:	b298      	uxth	r0, r3
 800e10c:	fb06 a000 	mla	r0, r6, r0, sl
 800e110:	0c02      	lsrs	r2, r0, #16
 800e112:	0c1b      	lsrs	r3, r3, #16
 800e114:	fb06 2303 	mla	r3, r6, r3, r2
 800e118:	f8de 2000 	ldr.w	r2, [lr]
 800e11c:	b280      	uxth	r0, r0
 800e11e:	b292      	uxth	r2, r2
 800e120:	1a12      	subs	r2, r2, r0
 800e122:	445a      	add	r2, fp
 800e124:	f8de 0000 	ldr.w	r0, [lr]
 800e128:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e132:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e136:	b292      	uxth	r2, r2
 800e138:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e13c:	45e1      	cmp	r9, ip
 800e13e:	f84e 2b04 	str.w	r2, [lr], #4
 800e142:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e146:	d2de      	bcs.n	800e106 <quorem+0x42>
 800e148:	9b00      	ldr	r3, [sp, #0]
 800e14a:	58eb      	ldr	r3, [r5, r3]
 800e14c:	b92b      	cbnz	r3, 800e15a <quorem+0x96>
 800e14e:	9b01      	ldr	r3, [sp, #4]
 800e150:	3b04      	subs	r3, #4
 800e152:	429d      	cmp	r5, r3
 800e154:	461a      	mov	r2, r3
 800e156:	d32f      	bcc.n	800e1b8 <quorem+0xf4>
 800e158:	613c      	str	r4, [r7, #16]
 800e15a:	4638      	mov	r0, r7
 800e15c:	f001 f90e 	bl	800f37c <__mcmp>
 800e160:	2800      	cmp	r0, #0
 800e162:	db25      	blt.n	800e1b0 <quorem+0xec>
 800e164:	4629      	mov	r1, r5
 800e166:	2000      	movs	r0, #0
 800e168:	f858 2b04 	ldr.w	r2, [r8], #4
 800e16c:	f8d1 c000 	ldr.w	ip, [r1]
 800e170:	fa1f fe82 	uxth.w	lr, r2
 800e174:	fa1f f38c 	uxth.w	r3, ip
 800e178:	eba3 030e 	sub.w	r3, r3, lr
 800e17c:	4403      	add	r3, r0
 800e17e:	0c12      	lsrs	r2, r2, #16
 800e180:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e184:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e188:	b29b      	uxth	r3, r3
 800e18a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e18e:	45c1      	cmp	r9, r8
 800e190:	f841 3b04 	str.w	r3, [r1], #4
 800e194:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e198:	d2e6      	bcs.n	800e168 <quorem+0xa4>
 800e19a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e19e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e1a2:	b922      	cbnz	r2, 800e1ae <quorem+0xea>
 800e1a4:	3b04      	subs	r3, #4
 800e1a6:	429d      	cmp	r5, r3
 800e1a8:	461a      	mov	r2, r3
 800e1aa:	d30b      	bcc.n	800e1c4 <quorem+0x100>
 800e1ac:	613c      	str	r4, [r7, #16]
 800e1ae:	3601      	adds	r6, #1
 800e1b0:	4630      	mov	r0, r6
 800e1b2:	b003      	add	sp, #12
 800e1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1b8:	6812      	ldr	r2, [r2, #0]
 800e1ba:	3b04      	subs	r3, #4
 800e1bc:	2a00      	cmp	r2, #0
 800e1be:	d1cb      	bne.n	800e158 <quorem+0x94>
 800e1c0:	3c01      	subs	r4, #1
 800e1c2:	e7c6      	b.n	800e152 <quorem+0x8e>
 800e1c4:	6812      	ldr	r2, [r2, #0]
 800e1c6:	3b04      	subs	r3, #4
 800e1c8:	2a00      	cmp	r2, #0
 800e1ca:	d1ef      	bne.n	800e1ac <quorem+0xe8>
 800e1cc:	3c01      	subs	r4, #1
 800e1ce:	e7ea      	b.n	800e1a6 <quorem+0xe2>
 800e1d0:	2000      	movs	r0, #0
 800e1d2:	e7ee      	b.n	800e1b2 <quorem+0xee>
 800e1d4:	0000      	movs	r0, r0
	...

0800e1d8 <_dtoa_r>:
 800e1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1dc:	69c7      	ldr	r7, [r0, #28]
 800e1de:	b099      	sub	sp, #100	@ 0x64
 800e1e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e1e4:	ec55 4b10 	vmov	r4, r5, d0
 800e1e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e1ea:	9109      	str	r1, [sp, #36]	@ 0x24
 800e1ec:	4683      	mov	fp, r0
 800e1ee:	920e      	str	r2, [sp, #56]	@ 0x38
 800e1f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e1f2:	b97f      	cbnz	r7, 800e214 <_dtoa_r+0x3c>
 800e1f4:	2010      	movs	r0, #16
 800e1f6:	f7fe fd13 	bl	800cc20 <malloc>
 800e1fa:	4602      	mov	r2, r0
 800e1fc:	f8cb 001c 	str.w	r0, [fp, #28]
 800e200:	b920      	cbnz	r0, 800e20c <_dtoa_r+0x34>
 800e202:	4ba7      	ldr	r3, [pc, #668]	@ (800e4a0 <_dtoa_r+0x2c8>)
 800e204:	21ef      	movs	r1, #239	@ 0xef
 800e206:	48a7      	ldr	r0, [pc, #668]	@ (800e4a4 <_dtoa_r+0x2cc>)
 800e208:	f002 fd32 	bl	8010c70 <__assert_func>
 800e20c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e210:	6007      	str	r7, [r0, #0]
 800e212:	60c7      	str	r7, [r0, #12]
 800e214:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e218:	6819      	ldr	r1, [r3, #0]
 800e21a:	b159      	cbz	r1, 800e234 <_dtoa_r+0x5c>
 800e21c:	685a      	ldr	r2, [r3, #4]
 800e21e:	604a      	str	r2, [r1, #4]
 800e220:	2301      	movs	r3, #1
 800e222:	4093      	lsls	r3, r2
 800e224:	608b      	str	r3, [r1, #8]
 800e226:	4658      	mov	r0, fp
 800e228:	f000 fe24 	bl	800ee74 <_Bfree>
 800e22c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e230:	2200      	movs	r2, #0
 800e232:	601a      	str	r2, [r3, #0]
 800e234:	1e2b      	subs	r3, r5, #0
 800e236:	bfb9      	ittee	lt
 800e238:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e23c:	9303      	strlt	r3, [sp, #12]
 800e23e:	2300      	movge	r3, #0
 800e240:	6033      	strge	r3, [r6, #0]
 800e242:	9f03      	ldr	r7, [sp, #12]
 800e244:	4b98      	ldr	r3, [pc, #608]	@ (800e4a8 <_dtoa_r+0x2d0>)
 800e246:	bfbc      	itt	lt
 800e248:	2201      	movlt	r2, #1
 800e24a:	6032      	strlt	r2, [r6, #0]
 800e24c:	43bb      	bics	r3, r7
 800e24e:	d112      	bne.n	800e276 <_dtoa_r+0x9e>
 800e250:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e252:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e256:	6013      	str	r3, [r2, #0]
 800e258:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e25c:	4323      	orrs	r3, r4
 800e25e:	f000 854d 	beq.w	800ecfc <_dtoa_r+0xb24>
 800e262:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e264:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e4bc <_dtoa_r+0x2e4>
 800e268:	2b00      	cmp	r3, #0
 800e26a:	f000 854f 	beq.w	800ed0c <_dtoa_r+0xb34>
 800e26e:	f10a 0303 	add.w	r3, sl, #3
 800e272:	f000 bd49 	b.w	800ed08 <_dtoa_r+0xb30>
 800e276:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e27a:	2200      	movs	r2, #0
 800e27c:	ec51 0b17 	vmov	r0, r1, d7
 800e280:	2300      	movs	r3, #0
 800e282:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e286:	f7f2 fc1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e28a:	4680      	mov	r8, r0
 800e28c:	b158      	cbz	r0, 800e2a6 <_dtoa_r+0xce>
 800e28e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e290:	2301      	movs	r3, #1
 800e292:	6013      	str	r3, [r2, #0]
 800e294:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e296:	b113      	cbz	r3, 800e29e <_dtoa_r+0xc6>
 800e298:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e29a:	4b84      	ldr	r3, [pc, #528]	@ (800e4ac <_dtoa_r+0x2d4>)
 800e29c:	6013      	str	r3, [r2, #0]
 800e29e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e4c0 <_dtoa_r+0x2e8>
 800e2a2:	f000 bd33 	b.w	800ed0c <_dtoa_r+0xb34>
 800e2a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e2aa:	aa16      	add	r2, sp, #88	@ 0x58
 800e2ac:	a917      	add	r1, sp, #92	@ 0x5c
 800e2ae:	4658      	mov	r0, fp
 800e2b0:	f001 f984 	bl	800f5bc <__d2b>
 800e2b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e2b8:	4681      	mov	r9, r0
 800e2ba:	2e00      	cmp	r6, #0
 800e2bc:	d077      	beq.n	800e3ae <_dtoa_r+0x1d6>
 800e2be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e2c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e2d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e2d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e2d8:	4619      	mov	r1, r3
 800e2da:	2200      	movs	r2, #0
 800e2dc:	4b74      	ldr	r3, [pc, #464]	@ (800e4b0 <_dtoa_r+0x2d8>)
 800e2de:	f7f1 ffd3 	bl	8000288 <__aeabi_dsub>
 800e2e2:	a369      	add	r3, pc, #420	@ (adr r3, 800e488 <_dtoa_r+0x2b0>)
 800e2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e8:	f7f2 f986 	bl	80005f8 <__aeabi_dmul>
 800e2ec:	a368      	add	r3, pc, #416	@ (adr r3, 800e490 <_dtoa_r+0x2b8>)
 800e2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f2:	f7f1 ffcb 	bl	800028c <__adddf3>
 800e2f6:	4604      	mov	r4, r0
 800e2f8:	4630      	mov	r0, r6
 800e2fa:	460d      	mov	r5, r1
 800e2fc:	f7f2 f912 	bl	8000524 <__aeabi_i2d>
 800e300:	a365      	add	r3, pc, #404	@ (adr r3, 800e498 <_dtoa_r+0x2c0>)
 800e302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e306:	f7f2 f977 	bl	80005f8 <__aeabi_dmul>
 800e30a:	4602      	mov	r2, r0
 800e30c:	460b      	mov	r3, r1
 800e30e:	4620      	mov	r0, r4
 800e310:	4629      	mov	r1, r5
 800e312:	f7f1 ffbb 	bl	800028c <__adddf3>
 800e316:	4604      	mov	r4, r0
 800e318:	460d      	mov	r5, r1
 800e31a:	f7f2 fc1d 	bl	8000b58 <__aeabi_d2iz>
 800e31e:	2200      	movs	r2, #0
 800e320:	4607      	mov	r7, r0
 800e322:	2300      	movs	r3, #0
 800e324:	4620      	mov	r0, r4
 800e326:	4629      	mov	r1, r5
 800e328:	f7f2 fbd8 	bl	8000adc <__aeabi_dcmplt>
 800e32c:	b140      	cbz	r0, 800e340 <_dtoa_r+0x168>
 800e32e:	4638      	mov	r0, r7
 800e330:	f7f2 f8f8 	bl	8000524 <__aeabi_i2d>
 800e334:	4622      	mov	r2, r4
 800e336:	462b      	mov	r3, r5
 800e338:	f7f2 fbc6 	bl	8000ac8 <__aeabi_dcmpeq>
 800e33c:	b900      	cbnz	r0, 800e340 <_dtoa_r+0x168>
 800e33e:	3f01      	subs	r7, #1
 800e340:	2f16      	cmp	r7, #22
 800e342:	d851      	bhi.n	800e3e8 <_dtoa_r+0x210>
 800e344:	4b5b      	ldr	r3, [pc, #364]	@ (800e4b4 <_dtoa_r+0x2dc>)
 800e346:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e34e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e352:	f7f2 fbc3 	bl	8000adc <__aeabi_dcmplt>
 800e356:	2800      	cmp	r0, #0
 800e358:	d048      	beq.n	800e3ec <_dtoa_r+0x214>
 800e35a:	3f01      	subs	r7, #1
 800e35c:	2300      	movs	r3, #0
 800e35e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e360:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e362:	1b9b      	subs	r3, r3, r6
 800e364:	1e5a      	subs	r2, r3, #1
 800e366:	bf44      	itt	mi
 800e368:	f1c3 0801 	rsbmi	r8, r3, #1
 800e36c:	2300      	movmi	r3, #0
 800e36e:	9208      	str	r2, [sp, #32]
 800e370:	bf54      	ite	pl
 800e372:	f04f 0800 	movpl.w	r8, #0
 800e376:	9308      	strmi	r3, [sp, #32]
 800e378:	2f00      	cmp	r7, #0
 800e37a:	db39      	blt.n	800e3f0 <_dtoa_r+0x218>
 800e37c:	9b08      	ldr	r3, [sp, #32]
 800e37e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e380:	443b      	add	r3, r7
 800e382:	9308      	str	r3, [sp, #32]
 800e384:	2300      	movs	r3, #0
 800e386:	930a      	str	r3, [sp, #40]	@ 0x28
 800e388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e38a:	2b09      	cmp	r3, #9
 800e38c:	d864      	bhi.n	800e458 <_dtoa_r+0x280>
 800e38e:	2b05      	cmp	r3, #5
 800e390:	bfc4      	itt	gt
 800e392:	3b04      	subgt	r3, #4
 800e394:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e398:	f1a3 0302 	sub.w	r3, r3, #2
 800e39c:	bfcc      	ite	gt
 800e39e:	2400      	movgt	r4, #0
 800e3a0:	2401      	movle	r4, #1
 800e3a2:	2b03      	cmp	r3, #3
 800e3a4:	d863      	bhi.n	800e46e <_dtoa_r+0x296>
 800e3a6:	e8df f003 	tbb	[pc, r3]
 800e3aa:	372a      	.short	0x372a
 800e3ac:	5535      	.short	0x5535
 800e3ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e3b2:	441e      	add	r6, r3
 800e3b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e3b8:	2b20      	cmp	r3, #32
 800e3ba:	bfc1      	itttt	gt
 800e3bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e3c0:	409f      	lslgt	r7, r3
 800e3c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e3c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e3ca:	bfd6      	itet	le
 800e3cc:	f1c3 0320 	rsble	r3, r3, #32
 800e3d0:	ea47 0003 	orrgt.w	r0, r7, r3
 800e3d4:	fa04 f003 	lslle.w	r0, r4, r3
 800e3d8:	f7f2 f894 	bl	8000504 <__aeabi_ui2d>
 800e3dc:	2201      	movs	r2, #1
 800e3de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e3e2:	3e01      	subs	r6, #1
 800e3e4:	9214      	str	r2, [sp, #80]	@ 0x50
 800e3e6:	e777      	b.n	800e2d8 <_dtoa_r+0x100>
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	e7b8      	b.n	800e35e <_dtoa_r+0x186>
 800e3ec:	9012      	str	r0, [sp, #72]	@ 0x48
 800e3ee:	e7b7      	b.n	800e360 <_dtoa_r+0x188>
 800e3f0:	427b      	negs	r3, r7
 800e3f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	eba8 0807 	sub.w	r8, r8, r7
 800e3fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e3fc:	e7c4      	b.n	800e388 <_dtoa_r+0x1b0>
 800e3fe:	2300      	movs	r3, #0
 800e400:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e402:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e404:	2b00      	cmp	r3, #0
 800e406:	dc35      	bgt.n	800e474 <_dtoa_r+0x29c>
 800e408:	2301      	movs	r3, #1
 800e40a:	9300      	str	r3, [sp, #0]
 800e40c:	9307      	str	r3, [sp, #28]
 800e40e:	461a      	mov	r2, r3
 800e410:	920e      	str	r2, [sp, #56]	@ 0x38
 800e412:	e00b      	b.n	800e42c <_dtoa_r+0x254>
 800e414:	2301      	movs	r3, #1
 800e416:	e7f3      	b.n	800e400 <_dtoa_r+0x228>
 800e418:	2300      	movs	r3, #0
 800e41a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e41c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e41e:	18fb      	adds	r3, r7, r3
 800e420:	9300      	str	r3, [sp, #0]
 800e422:	3301      	adds	r3, #1
 800e424:	2b01      	cmp	r3, #1
 800e426:	9307      	str	r3, [sp, #28]
 800e428:	bfb8      	it	lt
 800e42a:	2301      	movlt	r3, #1
 800e42c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e430:	2100      	movs	r1, #0
 800e432:	2204      	movs	r2, #4
 800e434:	f102 0514 	add.w	r5, r2, #20
 800e438:	429d      	cmp	r5, r3
 800e43a:	d91f      	bls.n	800e47c <_dtoa_r+0x2a4>
 800e43c:	6041      	str	r1, [r0, #4]
 800e43e:	4658      	mov	r0, fp
 800e440:	f000 fcd8 	bl	800edf4 <_Balloc>
 800e444:	4682      	mov	sl, r0
 800e446:	2800      	cmp	r0, #0
 800e448:	d13c      	bne.n	800e4c4 <_dtoa_r+0x2ec>
 800e44a:	4b1b      	ldr	r3, [pc, #108]	@ (800e4b8 <_dtoa_r+0x2e0>)
 800e44c:	4602      	mov	r2, r0
 800e44e:	f240 11af 	movw	r1, #431	@ 0x1af
 800e452:	e6d8      	b.n	800e206 <_dtoa_r+0x2e>
 800e454:	2301      	movs	r3, #1
 800e456:	e7e0      	b.n	800e41a <_dtoa_r+0x242>
 800e458:	2401      	movs	r4, #1
 800e45a:	2300      	movs	r3, #0
 800e45c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e45e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e460:	f04f 33ff 	mov.w	r3, #4294967295
 800e464:	9300      	str	r3, [sp, #0]
 800e466:	9307      	str	r3, [sp, #28]
 800e468:	2200      	movs	r2, #0
 800e46a:	2312      	movs	r3, #18
 800e46c:	e7d0      	b.n	800e410 <_dtoa_r+0x238>
 800e46e:	2301      	movs	r3, #1
 800e470:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e472:	e7f5      	b.n	800e460 <_dtoa_r+0x288>
 800e474:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e476:	9300      	str	r3, [sp, #0]
 800e478:	9307      	str	r3, [sp, #28]
 800e47a:	e7d7      	b.n	800e42c <_dtoa_r+0x254>
 800e47c:	3101      	adds	r1, #1
 800e47e:	0052      	lsls	r2, r2, #1
 800e480:	e7d8      	b.n	800e434 <_dtoa_r+0x25c>
 800e482:	bf00      	nop
 800e484:	f3af 8000 	nop.w
 800e488:	636f4361 	.word	0x636f4361
 800e48c:	3fd287a7 	.word	0x3fd287a7
 800e490:	8b60c8b3 	.word	0x8b60c8b3
 800e494:	3fc68a28 	.word	0x3fc68a28
 800e498:	509f79fb 	.word	0x509f79fb
 800e49c:	3fd34413 	.word	0x3fd34413
 800e4a0:	0801d656 	.word	0x0801d656
 800e4a4:	0801d66d 	.word	0x0801d66d
 800e4a8:	7ff00000 	.word	0x7ff00000
 800e4ac:	0801d621 	.word	0x0801d621
 800e4b0:	3ff80000 	.word	0x3ff80000
 800e4b4:	0801d768 	.word	0x0801d768
 800e4b8:	0801d6c5 	.word	0x0801d6c5
 800e4bc:	0801d652 	.word	0x0801d652
 800e4c0:	0801d620 	.word	0x0801d620
 800e4c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e4c8:	6018      	str	r0, [r3, #0]
 800e4ca:	9b07      	ldr	r3, [sp, #28]
 800e4cc:	2b0e      	cmp	r3, #14
 800e4ce:	f200 80a4 	bhi.w	800e61a <_dtoa_r+0x442>
 800e4d2:	2c00      	cmp	r4, #0
 800e4d4:	f000 80a1 	beq.w	800e61a <_dtoa_r+0x442>
 800e4d8:	2f00      	cmp	r7, #0
 800e4da:	dd33      	ble.n	800e544 <_dtoa_r+0x36c>
 800e4dc:	4bad      	ldr	r3, [pc, #692]	@ (800e794 <_dtoa_r+0x5bc>)
 800e4de:	f007 020f 	and.w	r2, r7, #15
 800e4e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4e6:	ed93 7b00 	vldr	d7, [r3]
 800e4ea:	05f8      	lsls	r0, r7, #23
 800e4ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e4f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e4f4:	d516      	bpl.n	800e524 <_dtoa_r+0x34c>
 800e4f6:	4ba8      	ldr	r3, [pc, #672]	@ (800e798 <_dtoa_r+0x5c0>)
 800e4f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e4fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e500:	f7f2 f9a4 	bl	800084c <__aeabi_ddiv>
 800e504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e508:	f004 040f 	and.w	r4, r4, #15
 800e50c:	2603      	movs	r6, #3
 800e50e:	4da2      	ldr	r5, [pc, #648]	@ (800e798 <_dtoa_r+0x5c0>)
 800e510:	b954      	cbnz	r4, 800e528 <_dtoa_r+0x350>
 800e512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e51a:	f7f2 f997 	bl	800084c <__aeabi_ddiv>
 800e51e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e522:	e028      	b.n	800e576 <_dtoa_r+0x39e>
 800e524:	2602      	movs	r6, #2
 800e526:	e7f2      	b.n	800e50e <_dtoa_r+0x336>
 800e528:	07e1      	lsls	r1, r4, #31
 800e52a:	d508      	bpl.n	800e53e <_dtoa_r+0x366>
 800e52c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e530:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e534:	f7f2 f860 	bl	80005f8 <__aeabi_dmul>
 800e538:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e53c:	3601      	adds	r6, #1
 800e53e:	1064      	asrs	r4, r4, #1
 800e540:	3508      	adds	r5, #8
 800e542:	e7e5      	b.n	800e510 <_dtoa_r+0x338>
 800e544:	f000 80d2 	beq.w	800e6ec <_dtoa_r+0x514>
 800e548:	427c      	negs	r4, r7
 800e54a:	4b92      	ldr	r3, [pc, #584]	@ (800e794 <_dtoa_r+0x5bc>)
 800e54c:	4d92      	ldr	r5, [pc, #584]	@ (800e798 <_dtoa_r+0x5c0>)
 800e54e:	f004 020f 	and.w	r2, r4, #15
 800e552:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e55e:	f7f2 f84b 	bl	80005f8 <__aeabi_dmul>
 800e562:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e566:	1124      	asrs	r4, r4, #4
 800e568:	2300      	movs	r3, #0
 800e56a:	2602      	movs	r6, #2
 800e56c:	2c00      	cmp	r4, #0
 800e56e:	f040 80b2 	bne.w	800e6d6 <_dtoa_r+0x4fe>
 800e572:	2b00      	cmp	r3, #0
 800e574:	d1d3      	bne.n	800e51e <_dtoa_r+0x346>
 800e576:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e578:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	f000 80b7 	beq.w	800e6f0 <_dtoa_r+0x518>
 800e582:	4b86      	ldr	r3, [pc, #536]	@ (800e79c <_dtoa_r+0x5c4>)
 800e584:	2200      	movs	r2, #0
 800e586:	4620      	mov	r0, r4
 800e588:	4629      	mov	r1, r5
 800e58a:	f7f2 faa7 	bl	8000adc <__aeabi_dcmplt>
 800e58e:	2800      	cmp	r0, #0
 800e590:	f000 80ae 	beq.w	800e6f0 <_dtoa_r+0x518>
 800e594:	9b07      	ldr	r3, [sp, #28]
 800e596:	2b00      	cmp	r3, #0
 800e598:	f000 80aa 	beq.w	800e6f0 <_dtoa_r+0x518>
 800e59c:	9b00      	ldr	r3, [sp, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	dd37      	ble.n	800e612 <_dtoa_r+0x43a>
 800e5a2:	1e7b      	subs	r3, r7, #1
 800e5a4:	9304      	str	r3, [sp, #16]
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	4b7d      	ldr	r3, [pc, #500]	@ (800e7a0 <_dtoa_r+0x5c8>)
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	4629      	mov	r1, r5
 800e5ae:	f7f2 f823 	bl	80005f8 <__aeabi_dmul>
 800e5b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5b6:	9c00      	ldr	r4, [sp, #0]
 800e5b8:	3601      	adds	r6, #1
 800e5ba:	4630      	mov	r0, r6
 800e5bc:	f7f1 ffb2 	bl	8000524 <__aeabi_i2d>
 800e5c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e5c4:	f7f2 f818 	bl	80005f8 <__aeabi_dmul>
 800e5c8:	4b76      	ldr	r3, [pc, #472]	@ (800e7a4 <_dtoa_r+0x5cc>)
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	f7f1 fe5e 	bl	800028c <__adddf3>
 800e5d0:	4605      	mov	r5, r0
 800e5d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e5d6:	2c00      	cmp	r4, #0
 800e5d8:	f040 808d 	bne.w	800e6f6 <_dtoa_r+0x51e>
 800e5dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5e0:	4b71      	ldr	r3, [pc, #452]	@ (800e7a8 <_dtoa_r+0x5d0>)
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f7f1 fe50 	bl	8000288 <__aeabi_dsub>
 800e5e8:	4602      	mov	r2, r0
 800e5ea:	460b      	mov	r3, r1
 800e5ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e5f0:	462a      	mov	r2, r5
 800e5f2:	4633      	mov	r3, r6
 800e5f4:	f7f2 fa90 	bl	8000b18 <__aeabi_dcmpgt>
 800e5f8:	2800      	cmp	r0, #0
 800e5fa:	f040 828b 	bne.w	800eb14 <_dtoa_r+0x93c>
 800e5fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e602:	462a      	mov	r2, r5
 800e604:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e608:	f7f2 fa68 	bl	8000adc <__aeabi_dcmplt>
 800e60c:	2800      	cmp	r0, #0
 800e60e:	f040 8128 	bne.w	800e862 <_dtoa_r+0x68a>
 800e612:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e616:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e61a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	f2c0 815a 	blt.w	800e8d6 <_dtoa_r+0x6fe>
 800e622:	2f0e      	cmp	r7, #14
 800e624:	f300 8157 	bgt.w	800e8d6 <_dtoa_r+0x6fe>
 800e628:	4b5a      	ldr	r3, [pc, #360]	@ (800e794 <_dtoa_r+0x5bc>)
 800e62a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e62e:	ed93 7b00 	vldr	d7, [r3]
 800e632:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e634:	2b00      	cmp	r3, #0
 800e636:	ed8d 7b00 	vstr	d7, [sp]
 800e63a:	da03      	bge.n	800e644 <_dtoa_r+0x46c>
 800e63c:	9b07      	ldr	r3, [sp, #28]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	f340 8101 	ble.w	800e846 <_dtoa_r+0x66e>
 800e644:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e648:	4656      	mov	r6, sl
 800e64a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e64e:	4620      	mov	r0, r4
 800e650:	4629      	mov	r1, r5
 800e652:	f7f2 f8fb 	bl	800084c <__aeabi_ddiv>
 800e656:	f7f2 fa7f 	bl	8000b58 <__aeabi_d2iz>
 800e65a:	4680      	mov	r8, r0
 800e65c:	f7f1 ff62 	bl	8000524 <__aeabi_i2d>
 800e660:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e664:	f7f1 ffc8 	bl	80005f8 <__aeabi_dmul>
 800e668:	4602      	mov	r2, r0
 800e66a:	460b      	mov	r3, r1
 800e66c:	4620      	mov	r0, r4
 800e66e:	4629      	mov	r1, r5
 800e670:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e674:	f7f1 fe08 	bl	8000288 <__aeabi_dsub>
 800e678:	f806 4b01 	strb.w	r4, [r6], #1
 800e67c:	9d07      	ldr	r5, [sp, #28]
 800e67e:	eba6 040a 	sub.w	r4, r6, sl
 800e682:	42a5      	cmp	r5, r4
 800e684:	4602      	mov	r2, r0
 800e686:	460b      	mov	r3, r1
 800e688:	f040 8117 	bne.w	800e8ba <_dtoa_r+0x6e2>
 800e68c:	f7f1 fdfe 	bl	800028c <__adddf3>
 800e690:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e694:	4604      	mov	r4, r0
 800e696:	460d      	mov	r5, r1
 800e698:	f7f2 fa3e 	bl	8000b18 <__aeabi_dcmpgt>
 800e69c:	2800      	cmp	r0, #0
 800e69e:	f040 80f9 	bne.w	800e894 <_dtoa_r+0x6bc>
 800e6a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	4629      	mov	r1, r5
 800e6aa:	f7f2 fa0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6ae:	b118      	cbz	r0, 800e6b8 <_dtoa_r+0x4e0>
 800e6b0:	f018 0f01 	tst.w	r8, #1
 800e6b4:	f040 80ee 	bne.w	800e894 <_dtoa_r+0x6bc>
 800e6b8:	4649      	mov	r1, r9
 800e6ba:	4658      	mov	r0, fp
 800e6bc:	f000 fbda 	bl	800ee74 <_Bfree>
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	7033      	strb	r3, [r6, #0]
 800e6c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e6c6:	3701      	adds	r7, #1
 800e6c8:	601f      	str	r7, [r3, #0]
 800e6ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	f000 831d 	beq.w	800ed0c <_dtoa_r+0xb34>
 800e6d2:	601e      	str	r6, [r3, #0]
 800e6d4:	e31a      	b.n	800ed0c <_dtoa_r+0xb34>
 800e6d6:	07e2      	lsls	r2, r4, #31
 800e6d8:	d505      	bpl.n	800e6e6 <_dtoa_r+0x50e>
 800e6da:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e6de:	f7f1 ff8b 	bl	80005f8 <__aeabi_dmul>
 800e6e2:	3601      	adds	r6, #1
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	1064      	asrs	r4, r4, #1
 800e6e8:	3508      	adds	r5, #8
 800e6ea:	e73f      	b.n	800e56c <_dtoa_r+0x394>
 800e6ec:	2602      	movs	r6, #2
 800e6ee:	e742      	b.n	800e576 <_dtoa_r+0x39e>
 800e6f0:	9c07      	ldr	r4, [sp, #28]
 800e6f2:	9704      	str	r7, [sp, #16]
 800e6f4:	e761      	b.n	800e5ba <_dtoa_r+0x3e2>
 800e6f6:	4b27      	ldr	r3, [pc, #156]	@ (800e794 <_dtoa_r+0x5bc>)
 800e6f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e6fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e6fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e702:	4454      	add	r4, sl
 800e704:	2900      	cmp	r1, #0
 800e706:	d053      	beq.n	800e7b0 <_dtoa_r+0x5d8>
 800e708:	4928      	ldr	r1, [pc, #160]	@ (800e7ac <_dtoa_r+0x5d4>)
 800e70a:	2000      	movs	r0, #0
 800e70c:	f7f2 f89e 	bl	800084c <__aeabi_ddiv>
 800e710:	4633      	mov	r3, r6
 800e712:	462a      	mov	r2, r5
 800e714:	f7f1 fdb8 	bl	8000288 <__aeabi_dsub>
 800e718:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e71c:	4656      	mov	r6, sl
 800e71e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e722:	f7f2 fa19 	bl	8000b58 <__aeabi_d2iz>
 800e726:	4605      	mov	r5, r0
 800e728:	f7f1 fefc 	bl	8000524 <__aeabi_i2d>
 800e72c:	4602      	mov	r2, r0
 800e72e:	460b      	mov	r3, r1
 800e730:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e734:	f7f1 fda8 	bl	8000288 <__aeabi_dsub>
 800e738:	3530      	adds	r5, #48	@ 0x30
 800e73a:	4602      	mov	r2, r0
 800e73c:	460b      	mov	r3, r1
 800e73e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e742:	f806 5b01 	strb.w	r5, [r6], #1
 800e746:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e74a:	f7f2 f9c7 	bl	8000adc <__aeabi_dcmplt>
 800e74e:	2800      	cmp	r0, #0
 800e750:	d171      	bne.n	800e836 <_dtoa_r+0x65e>
 800e752:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e756:	4911      	ldr	r1, [pc, #68]	@ (800e79c <_dtoa_r+0x5c4>)
 800e758:	2000      	movs	r0, #0
 800e75a:	f7f1 fd95 	bl	8000288 <__aeabi_dsub>
 800e75e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e762:	f7f2 f9bb 	bl	8000adc <__aeabi_dcmplt>
 800e766:	2800      	cmp	r0, #0
 800e768:	f040 8095 	bne.w	800e896 <_dtoa_r+0x6be>
 800e76c:	42a6      	cmp	r6, r4
 800e76e:	f43f af50 	beq.w	800e612 <_dtoa_r+0x43a>
 800e772:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e776:	4b0a      	ldr	r3, [pc, #40]	@ (800e7a0 <_dtoa_r+0x5c8>)
 800e778:	2200      	movs	r2, #0
 800e77a:	f7f1 ff3d 	bl	80005f8 <__aeabi_dmul>
 800e77e:	4b08      	ldr	r3, [pc, #32]	@ (800e7a0 <_dtoa_r+0x5c8>)
 800e780:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e784:	2200      	movs	r2, #0
 800e786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e78a:	f7f1 ff35 	bl	80005f8 <__aeabi_dmul>
 800e78e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e792:	e7c4      	b.n	800e71e <_dtoa_r+0x546>
 800e794:	0801d768 	.word	0x0801d768
 800e798:	0801d740 	.word	0x0801d740
 800e79c:	3ff00000 	.word	0x3ff00000
 800e7a0:	40240000 	.word	0x40240000
 800e7a4:	401c0000 	.word	0x401c0000
 800e7a8:	40140000 	.word	0x40140000
 800e7ac:	3fe00000 	.word	0x3fe00000
 800e7b0:	4631      	mov	r1, r6
 800e7b2:	4628      	mov	r0, r5
 800e7b4:	f7f1 ff20 	bl	80005f8 <__aeabi_dmul>
 800e7b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e7bc:	9415      	str	r4, [sp, #84]	@ 0x54
 800e7be:	4656      	mov	r6, sl
 800e7c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7c4:	f7f2 f9c8 	bl	8000b58 <__aeabi_d2iz>
 800e7c8:	4605      	mov	r5, r0
 800e7ca:	f7f1 feab 	bl	8000524 <__aeabi_i2d>
 800e7ce:	4602      	mov	r2, r0
 800e7d0:	460b      	mov	r3, r1
 800e7d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7d6:	f7f1 fd57 	bl	8000288 <__aeabi_dsub>
 800e7da:	3530      	adds	r5, #48	@ 0x30
 800e7dc:	f806 5b01 	strb.w	r5, [r6], #1
 800e7e0:	4602      	mov	r2, r0
 800e7e2:	460b      	mov	r3, r1
 800e7e4:	42a6      	cmp	r6, r4
 800e7e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e7ea:	f04f 0200 	mov.w	r2, #0
 800e7ee:	d124      	bne.n	800e83a <_dtoa_r+0x662>
 800e7f0:	4bac      	ldr	r3, [pc, #688]	@ (800eaa4 <_dtoa_r+0x8cc>)
 800e7f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e7f6:	f7f1 fd49 	bl	800028c <__adddf3>
 800e7fa:	4602      	mov	r2, r0
 800e7fc:	460b      	mov	r3, r1
 800e7fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e802:	f7f2 f989 	bl	8000b18 <__aeabi_dcmpgt>
 800e806:	2800      	cmp	r0, #0
 800e808:	d145      	bne.n	800e896 <_dtoa_r+0x6be>
 800e80a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e80e:	49a5      	ldr	r1, [pc, #660]	@ (800eaa4 <_dtoa_r+0x8cc>)
 800e810:	2000      	movs	r0, #0
 800e812:	f7f1 fd39 	bl	8000288 <__aeabi_dsub>
 800e816:	4602      	mov	r2, r0
 800e818:	460b      	mov	r3, r1
 800e81a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e81e:	f7f2 f95d 	bl	8000adc <__aeabi_dcmplt>
 800e822:	2800      	cmp	r0, #0
 800e824:	f43f aef5 	beq.w	800e612 <_dtoa_r+0x43a>
 800e828:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e82a:	1e73      	subs	r3, r6, #1
 800e82c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e82e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e832:	2b30      	cmp	r3, #48	@ 0x30
 800e834:	d0f8      	beq.n	800e828 <_dtoa_r+0x650>
 800e836:	9f04      	ldr	r7, [sp, #16]
 800e838:	e73e      	b.n	800e6b8 <_dtoa_r+0x4e0>
 800e83a:	4b9b      	ldr	r3, [pc, #620]	@ (800eaa8 <_dtoa_r+0x8d0>)
 800e83c:	f7f1 fedc 	bl	80005f8 <__aeabi_dmul>
 800e840:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e844:	e7bc      	b.n	800e7c0 <_dtoa_r+0x5e8>
 800e846:	d10c      	bne.n	800e862 <_dtoa_r+0x68a>
 800e848:	4b98      	ldr	r3, [pc, #608]	@ (800eaac <_dtoa_r+0x8d4>)
 800e84a:	2200      	movs	r2, #0
 800e84c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e850:	f7f1 fed2 	bl	80005f8 <__aeabi_dmul>
 800e854:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e858:	f7f2 f954 	bl	8000b04 <__aeabi_dcmpge>
 800e85c:	2800      	cmp	r0, #0
 800e85e:	f000 8157 	beq.w	800eb10 <_dtoa_r+0x938>
 800e862:	2400      	movs	r4, #0
 800e864:	4625      	mov	r5, r4
 800e866:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e868:	43db      	mvns	r3, r3
 800e86a:	9304      	str	r3, [sp, #16]
 800e86c:	4656      	mov	r6, sl
 800e86e:	2700      	movs	r7, #0
 800e870:	4621      	mov	r1, r4
 800e872:	4658      	mov	r0, fp
 800e874:	f000 fafe 	bl	800ee74 <_Bfree>
 800e878:	2d00      	cmp	r5, #0
 800e87a:	d0dc      	beq.n	800e836 <_dtoa_r+0x65e>
 800e87c:	b12f      	cbz	r7, 800e88a <_dtoa_r+0x6b2>
 800e87e:	42af      	cmp	r7, r5
 800e880:	d003      	beq.n	800e88a <_dtoa_r+0x6b2>
 800e882:	4639      	mov	r1, r7
 800e884:	4658      	mov	r0, fp
 800e886:	f000 faf5 	bl	800ee74 <_Bfree>
 800e88a:	4629      	mov	r1, r5
 800e88c:	4658      	mov	r0, fp
 800e88e:	f000 faf1 	bl	800ee74 <_Bfree>
 800e892:	e7d0      	b.n	800e836 <_dtoa_r+0x65e>
 800e894:	9704      	str	r7, [sp, #16]
 800e896:	4633      	mov	r3, r6
 800e898:	461e      	mov	r6, r3
 800e89a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e89e:	2a39      	cmp	r2, #57	@ 0x39
 800e8a0:	d107      	bne.n	800e8b2 <_dtoa_r+0x6da>
 800e8a2:	459a      	cmp	sl, r3
 800e8a4:	d1f8      	bne.n	800e898 <_dtoa_r+0x6c0>
 800e8a6:	9a04      	ldr	r2, [sp, #16]
 800e8a8:	3201      	adds	r2, #1
 800e8aa:	9204      	str	r2, [sp, #16]
 800e8ac:	2230      	movs	r2, #48	@ 0x30
 800e8ae:	f88a 2000 	strb.w	r2, [sl]
 800e8b2:	781a      	ldrb	r2, [r3, #0]
 800e8b4:	3201      	adds	r2, #1
 800e8b6:	701a      	strb	r2, [r3, #0]
 800e8b8:	e7bd      	b.n	800e836 <_dtoa_r+0x65e>
 800e8ba:	4b7b      	ldr	r3, [pc, #492]	@ (800eaa8 <_dtoa_r+0x8d0>)
 800e8bc:	2200      	movs	r2, #0
 800e8be:	f7f1 fe9b 	bl	80005f8 <__aeabi_dmul>
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	4604      	mov	r4, r0
 800e8c8:	460d      	mov	r5, r1
 800e8ca:	f7f2 f8fd 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8ce:	2800      	cmp	r0, #0
 800e8d0:	f43f aebb 	beq.w	800e64a <_dtoa_r+0x472>
 800e8d4:	e6f0      	b.n	800e6b8 <_dtoa_r+0x4e0>
 800e8d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e8d8:	2a00      	cmp	r2, #0
 800e8da:	f000 80db 	beq.w	800ea94 <_dtoa_r+0x8bc>
 800e8de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8e0:	2a01      	cmp	r2, #1
 800e8e2:	f300 80bf 	bgt.w	800ea64 <_dtoa_r+0x88c>
 800e8e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e8e8:	2a00      	cmp	r2, #0
 800e8ea:	f000 80b7 	beq.w	800ea5c <_dtoa_r+0x884>
 800e8ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e8f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e8f4:	4646      	mov	r6, r8
 800e8f6:	9a08      	ldr	r2, [sp, #32]
 800e8f8:	2101      	movs	r1, #1
 800e8fa:	441a      	add	r2, r3
 800e8fc:	4658      	mov	r0, fp
 800e8fe:	4498      	add	r8, r3
 800e900:	9208      	str	r2, [sp, #32]
 800e902:	f000 fbb5 	bl	800f070 <__i2b>
 800e906:	4605      	mov	r5, r0
 800e908:	b15e      	cbz	r6, 800e922 <_dtoa_r+0x74a>
 800e90a:	9b08      	ldr	r3, [sp, #32]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	dd08      	ble.n	800e922 <_dtoa_r+0x74a>
 800e910:	42b3      	cmp	r3, r6
 800e912:	9a08      	ldr	r2, [sp, #32]
 800e914:	bfa8      	it	ge
 800e916:	4633      	movge	r3, r6
 800e918:	eba8 0803 	sub.w	r8, r8, r3
 800e91c:	1af6      	subs	r6, r6, r3
 800e91e:	1ad3      	subs	r3, r2, r3
 800e920:	9308      	str	r3, [sp, #32]
 800e922:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e924:	b1f3      	cbz	r3, 800e964 <_dtoa_r+0x78c>
 800e926:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e928:	2b00      	cmp	r3, #0
 800e92a:	f000 80b7 	beq.w	800ea9c <_dtoa_r+0x8c4>
 800e92e:	b18c      	cbz	r4, 800e954 <_dtoa_r+0x77c>
 800e930:	4629      	mov	r1, r5
 800e932:	4622      	mov	r2, r4
 800e934:	4658      	mov	r0, fp
 800e936:	f000 fc5b 	bl	800f1f0 <__pow5mult>
 800e93a:	464a      	mov	r2, r9
 800e93c:	4601      	mov	r1, r0
 800e93e:	4605      	mov	r5, r0
 800e940:	4658      	mov	r0, fp
 800e942:	f000 fbab 	bl	800f09c <__multiply>
 800e946:	4649      	mov	r1, r9
 800e948:	9004      	str	r0, [sp, #16]
 800e94a:	4658      	mov	r0, fp
 800e94c:	f000 fa92 	bl	800ee74 <_Bfree>
 800e950:	9b04      	ldr	r3, [sp, #16]
 800e952:	4699      	mov	r9, r3
 800e954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e956:	1b1a      	subs	r2, r3, r4
 800e958:	d004      	beq.n	800e964 <_dtoa_r+0x78c>
 800e95a:	4649      	mov	r1, r9
 800e95c:	4658      	mov	r0, fp
 800e95e:	f000 fc47 	bl	800f1f0 <__pow5mult>
 800e962:	4681      	mov	r9, r0
 800e964:	2101      	movs	r1, #1
 800e966:	4658      	mov	r0, fp
 800e968:	f000 fb82 	bl	800f070 <__i2b>
 800e96c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e96e:	4604      	mov	r4, r0
 800e970:	2b00      	cmp	r3, #0
 800e972:	f000 81cf 	beq.w	800ed14 <_dtoa_r+0xb3c>
 800e976:	461a      	mov	r2, r3
 800e978:	4601      	mov	r1, r0
 800e97a:	4658      	mov	r0, fp
 800e97c:	f000 fc38 	bl	800f1f0 <__pow5mult>
 800e980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e982:	2b01      	cmp	r3, #1
 800e984:	4604      	mov	r4, r0
 800e986:	f300 8095 	bgt.w	800eab4 <_dtoa_r+0x8dc>
 800e98a:	9b02      	ldr	r3, [sp, #8]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	f040 8087 	bne.w	800eaa0 <_dtoa_r+0x8c8>
 800e992:	9b03      	ldr	r3, [sp, #12]
 800e994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e998:	2b00      	cmp	r3, #0
 800e99a:	f040 8089 	bne.w	800eab0 <_dtoa_r+0x8d8>
 800e99e:	9b03      	ldr	r3, [sp, #12]
 800e9a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e9a4:	0d1b      	lsrs	r3, r3, #20
 800e9a6:	051b      	lsls	r3, r3, #20
 800e9a8:	b12b      	cbz	r3, 800e9b6 <_dtoa_r+0x7de>
 800e9aa:	9b08      	ldr	r3, [sp, #32]
 800e9ac:	3301      	adds	r3, #1
 800e9ae:	9308      	str	r3, [sp, #32]
 800e9b0:	f108 0801 	add.w	r8, r8, #1
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e9b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	f000 81b0 	beq.w	800ed20 <_dtoa_r+0xb48>
 800e9c0:	6923      	ldr	r3, [r4, #16]
 800e9c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e9c6:	6918      	ldr	r0, [r3, #16]
 800e9c8:	f000 fb06 	bl	800efd8 <__hi0bits>
 800e9cc:	f1c0 0020 	rsb	r0, r0, #32
 800e9d0:	9b08      	ldr	r3, [sp, #32]
 800e9d2:	4418      	add	r0, r3
 800e9d4:	f010 001f 	ands.w	r0, r0, #31
 800e9d8:	d077      	beq.n	800eaca <_dtoa_r+0x8f2>
 800e9da:	f1c0 0320 	rsb	r3, r0, #32
 800e9de:	2b04      	cmp	r3, #4
 800e9e0:	dd6b      	ble.n	800eaba <_dtoa_r+0x8e2>
 800e9e2:	9b08      	ldr	r3, [sp, #32]
 800e9e4:	f1c0 001c 	rsb	r0, r0, #28
 800e9e8:	4403      	add	r3, r0
 800e9ea:	4480      	add	r8, r0
 800e9ec:	4406      	add	r6, r0
 800e9ee:	9308      	str	r3, [sp, #32]
 800e9f0:	f1b8 0f00 	cmp.w	r8, #0
 800e9f4:	dd05      	ble.n	800ea02 <_dtoa_r+0x82a>
 800e9f6:	4649      	mov	r1, r9
 800e9f8:	4642      	mov	r2, r8
 800e9fa:	4658      	mov	r0, fp
 800e9fc:	f000 fc52 	bl	800f2a4 <__lshift>
 800ea00:	4681      	mov	r9, r0
 800ea02:	9b08      	ldr	r3, [sp, #32]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	dd05      	ble.n	800ea14 <_dtoa_r+0x83c>
 800ea08:	4621      	mov	r1, r4
 800ea0a:	461a      	mov	r2, r3
 800ea0c:	4658      	mov	r0, fp
 800ea0e:	f000 fc49 	bl	800f2a4 <__lshift>
 800ea12:	4604      	mov	r4, r0
 800ea14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d059      	beq.n	800eace <_dtoa_r+0x8f6>
 800ea1a:	4621      	mov	r1, r4
 800ea1c:	4648      	mov	r0, r9
 800ea1e:	f000 fcad 	bl	800f37c <__mcmp>
 800ea22:	2800      	cmp	r0, #0
 800ea24:	da53      	bge.n	800eace <_dtoa_r+0x8f6>
 800ea26:	1e7b      	subs	r3, r7, #1
 800ea28:	9304      	str	r3, [sp, #16]
 800ea2a:	4649      	mov	r1, r9
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	220a      	movs	r2, #10
 800ea30:	4658      	mov	r0, fp
 800ea32:	f000 fa41 	bl	800eeb8 <__multadd>
 800ea36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea38:	4681      	mov	r9, r0
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	f000 8172 	beq.w	800ed24 <_dtoa_r+0xb4c>
 800ea40:	2300      	movs	r3, #0
 800ea42:	4629      	mov	r1, r5
 800ea44:	220a      	movs	r2, #10
 800ea46:	4658      	mov	r0, fp
 800ea48:	f000 fa36 	bl	800eeb8 <__multadd>
 800ea4c:	9b00      	ldr	r3, [sp, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	4605      	mov	r5, r0
 800ea52:	dc67      	bgt.n	800eb24 <_dtoa_r+0x94c>
 800ea54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea56:	2b02      	cmp	r3, #2
 800ea58:	dc41      	bgt.n	800eade <_dtoa_r+0x906>
 800ea5a:	e063      	b.n	800eb24 <_dtoa_r+0x94c>
 800ea5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ea5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ea62:	e746      	b.n	800e8f2 <_dtoa_r+0x71a>
 800ea64:	9b07      	ldr	r3, [sp, #28]
 800ea66:	1e5c      	subs	r4, r3, #1
 800ea68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea6a:	42a3      	cmp	r3, r4
 800ea6c:	bfbf      	itttt	lt
 800ea6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ea70:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ea72:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ea74:	1ae3      	sublt	r3, r4, r3
 800ea76:	bfb4      	ite	lt
 800ea78:	18d2      	addlt	r2, r2, r3
 800ea7a:	1b1c      	subge	r4, r3, r4
 800ea7c:	9b07      	ldr	r3, [sp, #28]
 800ea7e:	bfbc      	itt	lt
 800ea80:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ea82:	2400      	movlt	r4, #0
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	bfb5      	itete	lt
 800ea88:	eba8 0603 	sublt.w	r6, r8, r3
 800ea8c:	9b07      	ldrge	r3, [sp, #28]
 800ea8e:	2300      	movlt	r3, #0
 800ea90:	4646      	movge	r6, r8
 800ea92:	e730      	b.n	800e8f6 <_dtoa_r+0x71e>
 800ea94:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ea96:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ea98:	4646      	mov	r6, r8
 800ea9a:	e735      	b.n	800e908 <_dtoa_r+0x730>
 800ea9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea9e:	e75c      	b.n	800e95a <_dtoa_r+0x782>
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	e788      	b.n	800e9b6 <_dtoa_r+0x7de>
 800eaa4:	3fe00000 	.word	0x3fe00000
 800eaa8:	40240000 	.word	0x40240000
 800eaac:	40140000 	.word	0x40140000
 800eab0:	9b02      	ldr	r3, [sp, #8]
 800eab2:	e780      	b.n	800e9b6 <_dtoa_r+0x7de>
 800eab4:	2300      	movs	r3, #0
 800eab6:	930a      	str	r3, [sp, #40]	@ 0x28
 800eab8:	e782      	b.n	800e9c0 <_dtoa_r+0x7e8>
 800eaba:	d099      	beq.n	800e9f0 <_dtoa_r+0x818>
 800eabc:	9a08      	ldr	r2, [sp, #32]
 800eabe:	331c      	adds	r3, #28
 800eac0:	441a      	add	r2, r3
 800eac2:	4498      	add	r8, r3
 800eac4:	441e      	add	r6, r3
 800eac6:	9208      	str	r2, [sp, #32]
 800eac8:	e792      	b.n	800e9f0 <_dtoa_r+0x818>
 800eaca:	4603      	mov	r3, r0
 800eacc:	e7f6      	b.n	800eabc <_dtoa_r+0x8e4>
 800eace:	9b07      	ldr	r3, [sp, #28]
 800ead0:	9704      	str	r7, [sp, #16]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	dc20      	bgt.n	800eb18 <_dtoa_r+0x940>
 800ead6:	9300      	str	r3, [sp, #0]
 800ead8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eada:	2b02      	cmp	r3, #2
 800eadc:	dd1e      	ble.n	800eb1c <_dtoa_r+0x944>
 800eade:	9b00      	ldr	r3, [sp, #0]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	f47f aec0 	bne.w	800e866 <_dtoa_r+0x68e>
 800eae6:	4621      	mov	r1, r4
 800eae8:	2205      	movs	r2, #5
 800eaea:	4658      	mov	r0, fp
 800eaec:	f000 f9e4 	bl	800eeb8 <__multadd>
 800eaf0:	4601      	mov	r1, r0
 800eaf2:	4604      	mov	r4, r0
 800eaf4:	4648      	mov	r0, r9
 800eaf6:	f000 fc41 	bl	800f37c <__mcmp>
 800eafa:	2800      	cmp	r0, #0
 800eafc:	f77f aeb3 	ble.w	800e866 <_dtoa_r+0x68e>
 800eb00:	4656      	mov	r6, sl
 800eb02:	2331      	movs	r3, #49	@ 0x31
 800eb04:	f806 3b01 	strb.w	r3, [r6], #1
 800eb08:	9b04      	ldr	r3, [sp, #16]
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	9304      	str	r3, [sp, #16]
 800eb0e:	e6ae      	b.n	800e86e <_dtoa_r+0x696>
 800eb10:	9c07      	ldr	r4, [sp, #28]
 800eb12:	9704      	str	r7, [sp, #16]
 800eb14:	4625      	mov	r5, r4
 800eb16:	e7f3      	b.n	800eb00 <_dtoa_r+0x928>
 800eb18:	9b07      	ldr	r3, [sp, #28]
 800eb1a:	9300      	str	r3, [sp, #0]
 800eb1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	f000 8104 	beq.w	800ed2c <_dtoa_r+0xb54>
 800eb24:	2e00      	cmp	r6, #0
 800eb26:	dd05      	ble.n	800eb34 <_dtoa_r+0x95c>
 800eb28:	4629      	mov	r1, r5
 800eb2a:	4632      	mov	r2, r6
 800eb2c:	4658      	mov	r0, fp
 800eb2e:	f000 fbb9 	bl	800f2a4 <__lshift>
 800eb32:	4605      	mov	r5, r0
 800eb34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d05a      	beq.n	800ebf0 <_dtoa_r+0xa18>
 800eb3a:	6869      	ldr	r1, [r5, #4]
 800eb3c:	4658      	mov	r0, fp
 800eb3e:	f000 f959 	bl	800edf4 <_Balloc>
 800eb42:	4606      	mov	r6, r0
 800eb44:	b928      	cbnz	r0, 800eb52 <_dtoa_r+0x97a>
 800eb46:	4b84      	ldr	r3, [pc, #528]	@ (800ed58 <_dtoa_r+0xb80>)
 800eb48:	4602      	mov	r2, r0
 800eb4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800eb4e:	f7ff bb5a 	b.w	800e206 <_dtoa_r+0x2e>
 800eb52:	692a      	ldr	r2, [r5, #16]
 800eb54:	3202      	adds	r2, #2
 800eb56:	0092      	lsls	r2, r2, #2
 800eb58:	f105 010c 	add.w	r1, r5, #12
 800eb5c:	300c      	adds	r0, #12
 800eb5e:	f7ff fa9c 	bl	800e09a <memcpy>
 800eb62:	2201      	movs	r2, #1
 800eb64:	4631      	mov	r1, r6
 800eb66:	4658      	mov	r0, fp
 800eb68:	f000 fb9c 	bl	800f2a4 <__lshift>
 800eb6c:	f10a 0301 	add.w	r3, sl, #1
 800eb70:	9307      	str	r3, [sp, #28]
 800eb72:	9b00      	ldr	r3, [sp, #0]
 800eb74:	4453      	add	r3, sl
 800eb76:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb78:	9b02      	ldr	r3, [sp, #8]
 800eb7a:	f003 0301 	and.w	r3, r3, #1
 800eb7e:	462f      	mov	r7, r5
 800eb80:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb82:	4605      	mov	r5, r0
 800eb84:	9b07      	ldr	r3, [sp, #28]
 800eb86:	4621      	mov	r1, r4
 800eb88:	3b01      	subs	r3, #1
 800eb8a:	4648      	mov	r0, r9
 800eb8c:	9300      	str	r3, [sp, #0]
 800eb8e:	f7ff fa99 	bl	800e0c4 <quorem>
 800eb92:	4639      	mov	r1, r7
 800eb94:	9002      	str	r0, [sp, #8]
 800eb96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800eb9a:	4648      	mov	r0, r9
 800eb9c:	f000 fbee 	bl	800f37c <__mcmp>
 800eba0:	462a      	mov	r2, r5
 800eba2:	9008      	str	r0, [sp, #32]
 800eba4:	4621      	mov	r1, r4
 800eba6:	4658      	mov	r0, fp
 800eba8:	f000 fc04 	bl	800f3b4 <__mdiff>
 800ebac:	68c2      	ldr	r2, [r0, #12]
 800ebae:	4606      	mov	r6, r0
 800ebb0:	bb02      	cbnz	r2, 800ebf4 <_dtoa_r+0xa1c>
 800ebb2:	4601      	mov	r1, r0
 800ebb4:	4648      	mov	r0, r9
 800ebb6:	f000 fbe1 	bl	800f37c <__mcmp>
 800ebba:	4602      	mov	r2, r0
 800ebbc:	4631      	mov	r1, r6
 800ebbe:	4658      	mov	r0, fp
 800ebc0:	920e      	str	r2, [sp, #56]	@ 0x38
 800ebc2:	f000 f957 	bl	800ee74 <_Bfree>
 800ebc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebc8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ebca:	9e07      	ldr	r6, [sp, #28]
 800ebcc:	ea43 0102 	orr.w	r1, r3, r2
 800ebd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebd2:	4319      	orrs	r1, r3
 800ebd4:	d110      	bne.n	800ebf8 <_dtoa_r+0xa20>
 800ebd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ebda:	d029      	beq.n	800ec30 <_dtoa_r+0xa58>
 800ebdc:	9b08      	ldr	r3, [sp, #32]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	dd02      	ble.n	800ebe8 <_dtoa_r+0xa10>
 800ebe2:	9b02      	ldr	r3, [sp, #8]
 800ebe4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ebe8:	9b00      	ldr	r3, [sp, #0]
 800ebea:	f883 8000 	strb.w	r8, [r3]
 800ebee:	e63f      	b.n	800e870 <_dtoa_r+0x698>
 800ebf0:	4628      	mov	r0, r5
 800ebf2:	e7bb      	b.n	800eb6c <_dtoa_r+0x994>
 800ebf4:	2201      	movs	r2, #1
 800ebf6:	e7e1      	b.n	800ebbc <_dtoa_r+0x9e4>
 800ebf8:	9b08      	ldr	r3, [sp, #32]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	db04      	blt.n	800ec08 <_dtoa_r+0xa30>
 800ebfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ec00:	430b      	orrs	r3, r1
 800ec02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ec04:	430b      	orrs	r3, r1
 800ec06:	d120      	bne.n	800ec4a <_dtoa_r+0xa72>
 800ec08:	2a00      	cmp	r2, #0
 800ec0a:	dded      	ble.n	800ebe8 <_dtoa_r+0xa10>
 800ec0c:	4649      	mov	r1, r9
 800ec0e:	2201      	movs	r2, #1
 800ec10:	4658      	mov	r0, fp
 800ec12:	f000 fb47 	bl	800f2a4 <__lshift>
 800ec16:	4621      	mov	r1, r4
 800ec18:	4681      	mov	r9, r0
 800ec1a:	f000 fbaf 	bl	800f37c <__mcmp>
 800ec1e:	2800      	cmp	r0, #0
 800ec20:	dc03      	bgt.n	800ec2a <_dtoa_r+0xa52>
 800ec22:	d1e1      	bne.n	800ebe8 <_dtoa_r+0xa10>
 800ec24:	f018 0f01 	tst.w	r8, #1
 800ec28:	d0de      	beq.n	800ebe8 <_dtoa_r+0xa10>
 800ec2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ec2e:	d1d8      	bne.n	800ebe2 <_dtoa_r+0xa0a>
 800ec30:	9a00      	ldr	r2, [sp, #0]
 800ec32:	2339      	movs	r3, #57	@ 0x39
 800ec34:	7013      	strb	r3, [r2, #0]
 800ec36:	4633      	mov	r3, r6
 800ec38:	461e      	mov	r6, r3
 800ec3a:	3b01      	subs	r3, #1
 800ec3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ec40:	2a39      	cmp	r2, #57	@ 0x39
 800ec42:	d052      	beq.n	800ecea <_dtoa_r+0xb12>
 800ec44:	3201      	adds	r2, #1
 800ec46:	701a      	strb	r2, [r3, #0]
 800ec48:	e612      	b.n	800e870 <_dtoa_r+0x698>
 800ec4a:	2a00      	cmp	r2, #0
 800ec4c:	dd07      	ble.n	800ec5e <_dtoa_r+0xa86>
 800ec4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ec52:	d0ed      	beq.n	800ec30 <_dtoa_r+0xa58>
 800ec54:	9a00      	ldr	r2, [sp, #0]
 800ec56:	f108 0301 	add.w	r3, r8, #1
 800ec5a:	7013      	strb	r3, [r2, #0]
 800ec5c:	e608      	b.n	800e870 <_dtoa_r+0x698>
 800ec5e:	9b07      	ldr	r3, [sp, #28]
 800ec60:	9a07      	ldr	r2, [sp, #28]
 800ec62:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ec66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d028      	beq.n	800ecbe <_dtoa_r+0xae6>
 800ec6c:	4649      	mov	r1, r9
 800ec6e:	2300      	movs	r3, #0
 800ec70:	220a      	movs	r2, #10
 800ec72:	4658      	mov	r0, fp
 800ec74:	f000 f920 	bl	800eeb8 <__multadd>
 800ec78:	42af      	cmp	r7, r5
 800ec7a:	4681      	mov	r9, r0
 800ec7c:	f04f 0300 	mov.w	r3, #0
 800ec80:	f04f 020a 	mov.w	r2, #10
 800ec84:	4639      	mov	r1, r7
 800ec86:	4658      	mov	r0, fp
 800ec88:	d107      	bne.n	800ec9a <_dtoa_r+0xac2>
 800ec8a:	f000 f915 	bl	800eeb8 <__multadd>
 800ec8e:	4607      	mov	r7, r0
 800ec90:	4605      	mov	r5, r0
 800ec92:	9b07      	ldr	r3, [sp, #28]
 800ec94:	3301      	adds	r3, #1
 800ec96:	9307      	str	r3, [sp, #28]
 800ec98:	e774      	b.n	800eb84 <_dtoa_r+0x9ac>
 800ec9a:	f000 f90d 	bl	800eeb8 <__multadd>
 800ec9e:	4629      	mov	r1, r5
 800eca0:	4607      	mov	r7, r0
 800eca2:	2300      	movs	r3, #0
 800eca4:	220a      	movs	r2, #10
 800eca6:	4658      	mov	r0, fp
 800eca8:	f000 f906 	bl	800eeb8 <__multadd>
 800ecac:	4605      	mov	r5, r0
 800ecae:	e7f0      	b.n	800ec92 <_dtoa_r+0xaba>
 800ecb0:	9b00      	ldr	r3, [sp, #0]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	bfcc      	ite	gt
 800ecb6:	461e      	movgt	r6, r3
 800ecb8:	2601      	movle	r6, #1
 800ecba:	4456      	add	r6, sl
 800ecbc:	2700      	movs	r7, #0
 800ecbe:	4649      	mov	r1, r9
 800ecc0:	2201      	movs	r2, #1
 800ecc2:	4658      	mov	r0, fp
 800ecc4:	f000 faee 	bl	800f2a4 <__lshift>
 800ecc8:	4621      	mov	r1, r4
 800ecca:	4681      	mov	r9, r0
 800eccc:	f000 fb56 	bl	800f37c <__mcmp>
 800ecd0:	2800      	cmp	r0, #0
 800ecd2:	dcb0      	bgt.n	800ec36 <_dtoa_r+0xa5e>
 800ecd4:	d102      	bne.n	800ecdc <_dtoa_r+0xb04>
 800ecd6:	f018 0f01 	tst.w	r8, #1
 800ecda:	d1ac      	bne.n	800ec36 <_dtoa_r+0xa5e>
 800ecdc:	4633      	mov	r3, r6
 800ecde:	461e      	mov	r6, r3
 800ece0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ece4:	2a30      	cmp	r2, #48	@ 0x30
 800ece6:	d0fa      	beq.n	800ecde <_dtoa_r+0xb06>
 800ece8:	e5c2      	b.n	800e870 <_dtoa_r+0x698>
 800ecea:	459a      	cmp	sl, r3
 800ecec:	d1a4      	bne.n	800ec38 <_dtoa_r+0xa60>
 800ecee:	9b04      	ldr	r3, [sp, #16]
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	9304      	str	r3, [sp, #16]
 800ecf4:	2331      	movs	r3, #49	@ 0x31
 800ecf6:	f88a 3000 	strb.w	r3, [sl]
 800ecfa:	e5b9      	b.n	800e870 <_dtoa_r+0x698>
 800ecfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ecfe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ed5c <_dtoa_r+0xb84>
 800ed02:	b11b      	cbz	r3, 800ed0c <_dtoa_r+0xb34>
 800ed04:	f10a 0308 	add.w	r3, sl, #8
 800ed08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ed0a:	6013      	str	r3, [r2, #0]
 800ed0c:	4650      	mov	r0, sl
 800ed0e:	b019      	add	sp, #100	@ 0x64
 800ed10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed16:	2b01      	cmp	r3, #1
 800ed18:	f77f ae37 	ble.w	800e98a <_dtoa_r+0x7b2>
 800ed1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed20:	2001      	movs	r0, #1
 800ed22:	e655      	b.n	800e9d0 <_dtoa_r+0x7f8>
 800ed24:	9b00      	ldr	r3, [sp, #0]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	f77f aed6 	ble.w	800ead8 <_dtoa_r+0x900>
 800ed2c:	4656      	mov	r6, sl
 800ed2e:	4621      	mov	r1, r4
 800ed30:	4648      	mov	r0, r9
 800ed32:	f7ff f9c7 	bl	800e0c4 <quorem>
 800ed36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ed3a:	f806 8b01 	strb.w	r8, [r6], #1
 800ed3e:	9b00      	ldr	r3, [sp, #0]
 800ed40:	eba6 020a 	sub.w	r2, r6, sl
 800ed44:	4293      	cmp	r3, r2
 800ed46:	ddb3      	ble.n	800ecb0 <_dtoa_r+0xad8>
 800ed48:	4649      	mov	r1, r9
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	220a      	movs	r2, #10
 800ed4e:	4658      	mov	r0, fp
 800ed50:	f000 f8b2 	bl	800eeb8 <__multadd>
 800ed54:	4681      	mov	r9, r0
 800ed56:	e7ea      	b.n	800ed2e <_dtoa_r+0xb56>
 800ed58:	0801d6c5 	.word	0x0801d6c5
 800ed5c:	0801d649 	.word	0x0801d649

0800ed60 <_free_r>:
 800ed60:	b538      	push	{r3, r4, r5, lr}
 800ed62:	4605      	mov	r5, r0
 800ed64:	2900      	cmp	r1, #0
 800ed66:	d041      	beq.n	800edec <_free_r+0x8c>
 800ed68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed6c:	1f0c      	subs	r4, r1, #4
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	bfb8      	it	lt
 800ed72:	18e4      	addlt	r4, r4, r3
 800ed74:	f7fd fffe 	bl	800cd74 <__malloc_lock>
 800ed78:	4a1d      	ldr	r2, [pc, #116]	@ (800edf0 <_free_r+0x90>)
 800ed7a:	6813      	ldr	r3, [r2, #0]
 800ed7c:	b933      	cbnz	r3, 800ed8c <_free_r+0x2c>
 800ed7e:	6063      	str	r3, [r4, #4]
 800ed80:	6014      	str	r4, [r2, #0]
 800ed82:	4628      	mov	r0, r5
 800ed84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed88:	f7fd bffa 	b.w	800cd80 <__malloc_unlock>
 800ed8c:	42a3      	cmp	r3, r4
 800ed8e:	d908      	bls.n	800eda2 <_free_r+0x42>
 800ed90:	6820      	ldr	r0, [r4, #0]
 800ed92:	1821      	adds	r1, r4, r0
 800ed94:	428b      	cmp	r3, r1
 800ed96:	bf01      	itttt	eq
 800ed98:	6819      	ldreq	r1, [r3, #0]
 800ed9a:	685b      	ldreq	r3, [r3, #4]
 800ed9c:	1809      	addeq	r1, r1, r0
 800ed9e:	6021      	streq	r1, [r4, #0]
 800eda0:	e7ed      	b.n	800ed7e <_free_r+0x1e>
 800eda2:	461a      	mov	r2, r3
 800eda4:	685b      	ldr	r3, [r3, #4]
 800eda6:	b10b      	cbz	r3, 800edac <_free_r+0x4c>
 800eda8:	42a3      	cmp	r3, r4
 800edaa:	d9fa      	bls.n	800eda2 <_free_r+0x42>
 800edac:	6811      	ldr	r1, [r2, #0]
 800edae:	1850      	adds	r0, r2, r1
 800edb0:	42a0      	cmp	r0, r4
 800edb2:	d10b      	bne.n	800edcc <_free_r+0x6c>
 800edb4:	6820      	ldr	r0, [r4, #0]
 800edb6:	4401      	add	r1, r0
 800edb8:	1850      	adds	r0, r2, r1
 800edba:	4283      	cmp	r3, r0
 800edbc:	6011      	str	r1, [r2, #0]
 800edbe:	d1e0      	bne.n	800ed82 <_free_r+0x22>
 800edc0:	6818      	ldr	r0, [r3, #0]
 800edc2:	685b      	ldr	r3, [r3, #4]
 800edc4:	6053      	str	r3, [r2, #4]
 800edc6:	4408      	add	r0, r1
 800edc8:	6010      	str	r0, [r2, #0]
 800edca:	e7da      	b.n	800ed82 <_free_r+0x22>
 800edcc:	d902      	bls.n	800edd4 <_free_r+0x74>
 800edce:	230c      	movs	r3, #12
 800edd0:	602b      	str	r3, [r5, #0]
 800edd2:	e7d6      	b.n	800ed82 <_free_r+0x22>
 800edd4:	6820      	ldr	r0, [r4, #0]
 800edd6:	1821      	adds	r1, r4, r0
 800edd8:	428b      	cmp	r3, r1
 800edda:	bf04      	itt	eq
 800eddc:	6819      	ldreq	r1, [r3, #0]
 800edde:	685b      	ldreq	r3, [r3, #4]
 800ede0:	6063      	str	r3, [r4, #4]
 800ede2:	bf04      	itt	eq
 800ede4:	1809      	addeq	r1, r1, r0
 800ede6:	6021      	streq	r1, [r4, #0]
 800ede8:	6054      	str	r4, [r2, #4]
 800edea:	e7ca      	b.n	800ed82 <_free_r+0x22>
 800edec:	bd38      	pop	{r3, r4, r5, pc}
 800edee:	bf00      	nop
 800edf0:	200033ac 	.word	0x200033ac

0800edf4 <_Balloc>:
 800edf4:	b570      	push	{r4, r5, r6, lr}
 800edf6:	69c6      	ldr	r6, [r0, #28]
 800edf8:	4604      	mov	r4, r0
 800edfa:	460d      	mov	r5, r1
 800edfc:	b976      	cbnz	r6, 800ee1c <_Balloc+0x28>
 800edfe:	2010      	movs	r0, #16
 800ee00:	f7fd ff0e 	bl	800cc20 <malloc>
 800ee04:	4602      	mov	r2, r0
 800ee06:	61e0      	str	r0, [r4, #28]
 800ee08:	b920      	cbnz	r0, 800ee14 <_Balloc+0x20>
 800ee0a:	4b18      	ldr	r3, [pc, #96]	@ (800ee6c <_Balloc+0x78>)
 800ee0c:	4818      	ldr	r0, [pc, #96]	@ (800ee70 <_Balloc+0x7c>)
 800ee0e:	216b      	movs	r1, #107	@ 0x6b
 800ee10:	f001 ff2e 	bl	8010c70 <__assert_func>
 800ee14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee18:	6006      	str	r6, [r0, #0]
 800ee1a:	60c6      	str	r6, [r0, #12]
 800ee1c:	69e6      	ldr	r6, [r4, #28]
 800ee1e:	68f3      	ldr	r3, [r6, #12]
 800ee20:	b183      	cbz	r3, 800ee44 <_Balloc+0x50>
 800ee22:	69e3      	ldr	r3, [r4, #28]
 800ee24:	68db      	ldr	r3, [r3, #12]
 800ee26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ee2a:	b9b8      	cbnz	r0, 800ee5c <_Balloc+0x68>
 800ee2c:	2101      	movs	r1, #1
 800ee2e:	fa01 f605 	lsl.w	r6, r1, r5
 800ee32:	1d72      	adds	r2, r6, #5
 800ee34:	0092      	lsls	r2, r2, #2
 800ee36:	4620      	mov	r0, r4
 800ee38:	f001 ff38 	bl	8010cac <_calloc_r>
 800ee3c:	b160      	cbz	r0, 800ee58 <_Balloc+0x64>
 800ee3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ee42:	e00e      	b.n	800ee62 <_Balloc+0x6e>
 800ee44:	2221      	movs	r2, #33	@ 0x21
 800ee46:	2104      	movs	r1, #4
 800ee48:	4620      	mov	r0, r4
 800ee4a:	f001 ff2f 	bl	8010cac <_calloc_r>
 800ee4e:	69e3      	ldr	r3, [r4, #28]
 800ee50:	60f0      	str	r0, [r6, #12]
 800ee52:	68db      	ldr	r3, [r3, #12]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d1e4      	bne.n	800ee22 <_Balloc+0x2e>
 800ee58:	2000      	movs	r0, #0
 800ee5a:	bd70      	pop	{r4, r5, r6, pc}
 800ee5c:	6802      	ldr	r2, [r0, #0]
 800ee5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ee62:	2300      	movs	r3, #0
 800ee64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ee68:	e7f7      	b.n	800ee5a <_Balloc+0x66>
 800ee6a:	bf00      	nop
 800ee6c:	0801d656 	.word	0x0801d656
 800ee70:	0801d6d6 	.word	0x0801d6d6

0800ee74 <_Bfree>:
 800ee74:	b570      	push	{r4, r5, r6, lr}
 800ee76:	69c6      	ldr	r6, [r0, #28]
 800ee78:	4605      	mov	r5, r0
 800ee7a:	460c      	mov	r4, r1
 800ee7c:	b976      	cbnz	r6, 800ee9c <_Bfree+0x28>
 800ee7e:	2010      	movs	r0, #16
 800ee80:	f7fd fece 	bl	800cc20 <malloc>
 800ee84:	4602      	mov	r2, r0
 800ee86:	61e8      	str	r0, [r5, #28]
 800ee88:	b920      	cbnz	r0, 800ee94 <_Bfree+0x20>
 800ee8a:	4b09      	ldr	r3, [pc, #36]	@ (800eeb0 <_Bfree+0x3c>)
 800ee8c:	4809      	ldr	r0, [pc, #36]	@ (800eeb4 <_Bfree+0x40>)
 800ee8e:	218f      	movs	r1, #143	@ 0x8f
 800ee90:	f001 feee 	bl	8010c70 <__assert_func>
 800ee94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee98:	6006      	str	r6, [r0, #0]
 800ee9a:	60c6      	str	r6, [r0, #12]
 800ee9c:	b13c      	cbz	r4, 800eeae <_Bfree+0x3a>
 800ee9e:	69eb      	ldr	r3, [r5, #28]
 800eea0:	6862      	ldr	r2, [r4, #4]
 800eea2:	68db      	ldr	r3, [r3, #12]
 800eea4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eea8:	6021      	str	r1, [r4, #0]
 800eeaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eeae:	bd70      	pop	{r4, r5, r6, pc}
 800eeb0:	0801d656 	.word	0x0801d656
 800eeb4:	0801d6d6 	.word	0x0801d6d6

0800eeb8 <__multadd>:
 800eeb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eebc:	690d      	ldr	r5, [r1, #16]
 800eebe:	4607      	mov	r7, r0
 800eec0:	460c      	mov	r4, r1
 800eec2:	461e      	mov	r6, r3
 800eec4:	f101 0c14 	add.w	ip, r1, #20
 800eec8:	2000      	movs	r0, #0
 800eeca:	f8dc 3000 	ldr.w	r3, [ip]
 800eece:	b299      	uxth	r1, r3
 800eed0:	fb02 6101 	mla	r1, r2, r1, r6
 800eed4:	0c1e      	lsrs	r6, r3, #16
 800eed6:	0c0b      	lsrs	r3, r1, #16
 800eed8:	fb02 3306 	mla	r3, r2, r6, r3
 800eedc:	b289      	uxth	r1, r1
 800eede:	3001      	adds	r0, #1
 800eee0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eee4:	4285      	cmp	r5, r0
 800eee6:	f84c 1b04 	str.w	r1, [ip], #4
 800eeea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eeee:	dcec      	bgt.n	800eeca <__multadd+0x12>
 800eef0:	b30e      	cbz	r6, 800ef36 <__multadd+0x7e>
 800eef2:	68a3      	ldr	r3, [r4, #8]
 800eef4:	42ab      	cmp	r3, r5
 800eef6:	dc19      	bgt.n	800ef2c <__multadd+0x74>
 800eef8:	6861      	ldr	r1, [r4, #4]
 800eefa:	4638      	mov	r0, r7
 800eefc:	3101      	adds	r1, #1
 800eefe:	f7ff ff79 	bl	800edf4 <_Balloc>
 800ef02:	4680      	mov	r8, r0
 800ef04:	b928      	cbnz	r0, 800ef12 <__multadd+0x5a>
 800ef06:	4602      	mov	r2, r0
 800ef08:	4b0c      	ldr	r3, [pc, #48]	@ (800ef3c <__multadd+0x84>)
 800ef0a:	480d      	ldr	r0, [pc, #52]	@ (800ef40 <__multadd+0x88>)
 800ef0c:	21ba      	movs	r1, #186	@ 0xba
 800ef0e:	f001 feaf 	bl	8010c70 <__assert_func>
 800ef12:	6922      	ldr	r2, [r4, #16]
 800ef14:	3202      	adds	r2, #2
 800ef16:	f104 010c 	add.w	r1, r4, #12
 800ef1a:	0092      	lsls	r2, r2, #2
 800ef1c:	300c      	adds	r0, #12
 800ef1e:	f7ff f8bc 	bl	800e09a <memcpy>
 800ef22:	4621      	mov	r1, r4
 800ef24:	4638      	mov	r0, r7
 800ef26:	f7ff ffa5 	bl	800ee74 <_Bfree>
 800ef2a:	4644      	mov	r4, r8
 800ef2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ef30:	3501      	adds	r5, #1
 800ef32:	615e      	str	r6, [r3, #20]
 800ef34:	6125      	str	r5, [r4, #16]
 800ef36:	4620      	mov	r0, r4
 800ef38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef3c:	0801d6c5 	.word	0x0801d6c5
 800ef40:	0801d6d6 	.word	0x0801d6d6

0800ef44 <__s2b>:
 800ef44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef48:	460c      	mov	r4, r1
 800ef4a:	4615      	mov	r5, r2
 800ef4c:	461f      	mov	r7, r3
 800ef4e:	2209      	movs	r2, #9
 800ef50:	3308      	adds	r3, #8
 800ef52:	4606      	mov	r6, r0
 800ef54:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef58:	2100      	movs	r1, #0
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	db09      	blt.n	800ef74 <__s2b+0x30>
 800ef60:	4630      	mov	r0, r6
 800ef62:	f7ff ff47 	bl	800edf4 <_Balloc>
 800ef66:	b940      	cbnz	r0, 800ef7a <__s2b+0x36>
 800ef68:	4602      	mov	r2, r0
 800ef6a:	4b19      	ldr	r3, [pc, #100]	@ (800efd0 <__s2b+0x8c>)
 800ef6c:	4819      	ldr	r0, [pc, #100]	@ (800efd4 <__s2b+0x90>)
 800ef6e:	21d3      	movs	r1, #211	@ 0xd3
 800ef70:	f001 fe7e 	bl	8010c70 <__assert_func>
 800ef74:	0052      	lsls	r2, r2, #1
 800ef76:	3101      	adds	r1, #1
 800ef78:	e7f0      	b.n	800ef5c <__s2b+0x18>
 800ef7a:	9b08      	ldr	r3, [sp, #32]
 800ef7c:	6143      	str	r3, [r0, #20]
 800ef7e:	2d09      	cmp	r5, #9
 800ef80:	f04f 0301 	mov.w	r3, #1
 800ef84:	6103      	str	r3, [r0, #16]
 800ef86:	dd16      	ble.n	800efb6 <__s2b+0x72>
 800ef88:	f104 0909 	add.w	r9, r4, #9
 800ef8c:	46c8      	mov	r8, r9
 800ef8e:	442c      	add	r4, r5
 800ef90:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ef94:	4601      	mov	r1, r0
 800ef96:	3b30      	subs	r3, #48	@ 0x30
 800ef98:	220a      	movs	r2, #10
 800ef9a:	4630      	mov	r0, r6
 800ef9c:	f7ff ff8c 	bl	800eeb8 <__multadd>
 800efa0:	45a0      	cmp	r8, r4
 800efa2:	d1f5      	bne.n	800ef90 <__s2b+0x4c>
 800efa4:	f1a5 0408 	sub.w	r4, r5, #8
 800efa8:	444c      	add	r4, r9
 800efaa:	1b2d      	subs	r5, r5, r4
 800efac:	1963      	adds	r3, r4, r5
 800efae:	42bb      	cmp	r3, r7
 800efb0:	db04      	blt.n	800efbc <__s2b+0x78>
 800efb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efb6:	340a      	adds	r4, #10
 800efb8:	2509      	movs	r5, #9
 800efba:	e7f6      	b.n	800efaa <__s2b+0x66>
 800efbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800efc0:	4601      	mov	r1, r0
 800efc2:	3b30      	subs	r3, #48	@ 0x30
 800efc4:	220a      	movs	r2, #10
 800efc6:	4630      	mov	r0, r6
 800efc8:	f7ff ff76 	bl	800eeb8 <__multadd>
 800efcc:	e7ee      	b.n	800efac <__s2b+0x68>
 800efce:	bf00      	nop
 800efd0:	0801d6c5 	.word	0x0801d6c5
 800efd4:	0801d6d6 	.word	0x0801d6d6

0800efd8 <__hi0bits>:
 800efd8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800efdc:	4603      	mov	r3, r0
 800efde:	bf36      	itet	cc
 800efe0:	0403      	lslcc	r3, r0, #16
 800efe2:	2000      	movcs	r0, #0
 800efe4:	2010      	movcc	r0, #16
 800efe6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800efea:	bf3c      	itt	cc
 800efec:	021b      	lslcc	r3, r3, #8
 800efee:	3008      	addcc	r0, #8
 800eff0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eff4:	bf3c      	itt	cc
 800eff6:	011b      	lslcc	r3, r3, #4
 800eff8:	3004      	addcc	r0, #4
 800effa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800effe:	bf3c      	itt	cc
 800f000:	009b      	lslcc	r3, r3, #2
 800f002:	3002      	addcc	r0, #2
 800f004:	2b00      	cmp	r3, #0
 800f006:	db05      	blt.n	800f014 <__hi0bits+0x3c>
 800f008:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f00c:	f100 0001 	add.w	r0, r0, #1
 800f010:	bf08      	it	eq
 800f012:	2020      	moveq	r0, #32
 800f014:	4770      	bx	lr

0800f016 <__lo0bits>:
 800f016:	6803      	ldr	r3, [r0, #0]
 800f018:	4602      	mov	r2, r0
 800f01a:	f013 0007 	ands.w	r0, r3, #7
 800f01e:	d00b      	beq.n	800f038 <__lo0bits+0x22>
 800f020:	07d9      	lsls	r1, r3, #31
 800f022:	d421      	bmi.n	800f068 <__lo0bits+0x52>
 800f024:	0798      	lsls	r0, r3, #30
 800f026:	bf49      	itett	mi
 800f028:	085b      	lsrmi	r3, r3, #1
 800f02a:	089b      	lsrpl	r3, r3, #2
 800f02c:	2001      	movmi	r0, #1
 800f02e:	6013      	strmi	r3, [r2, #0]
 800f030:	bf5c      	itt	pl
 800f032:	6013      	strpl	r3, [r2, #0]
 800f034:	2002      	movpl	r0, #2
 800f036:	4770      	bx	lr
 800f038:	b299      	uxth	r1, r3
 800f03a:	b909      	cbnz	r1, 800f040 <__lo0bits+0x2a>
 800f03c:	0c1b      	lsrs	r3, r3, #16
 800f03e:	2010      	movs	r0, #16
 800f040:	b2d9      	uxtb	r1, r3
 800f042:	b909      	cbnz	r1, 800f048 <__lo0bits+0x32>
 800f044:	3008      	adds	r0, #8
 800f046:	0a1b      	lsrs	r3, r3, #8
 800f048:	0719      	lsls	r1, r3, #28
 800f04a:	bf04      	itt	eq
 800f04c:	091b      	lsreq	r3, r3, #4
 800f04e:	3004      	addeq	r0, #4
 800f050:	0799      	lsls	r1, r3, #30
 800f052:	bf04      	itt	eq
 800f054:	089b      	lsreq	r3, r3, #2
 800f056:	3002      	addeq	r0, #2
 800f058:	07d9      	lsls	r1, r3, #31
 800f05a:	d403      	bmi.n	800f064 <__lo0bits+0x4e>
 800f05c:	085b      	lsrs	r3, r3, #1
 800f05e:	f100 0001 	add.w	r0, r0, #1
 800f062:	d003      	beq.n	800f06c <__lo0bits+0x56>
 800f064:	6013      	str	r3, [r2, #0]
 800f066:	4770      	bx	lr
 800f068:	2000      	movs	r0, #0
 800f06a:	4770      	bx	lr
 800f06c:	2020      	movs	r0, #32
 800f06e:	4770      	bx	lr

0800f070 <__i2b>:
 800f070:	b510      	push	{r4, lr}
 800f072:	460c      	mov	r4, r1
 800f074:	2101      	movs	r1, #1
 800f076:	f7ff febd 	bl	800edf4 <_Balloc>
 800f07a:	4602      	mov	r2, r0
 800f07c:	b928      	cbnz	r0, 800f08a <__i2b+0x1a>
 800f07e:	4b05      	ldr	r3, [pc, #20]	@ (800f094 <__i2b+0x24>)
 800f080:	4805      	ldr	r0, [pc, #20]	@ (800f098 <__i2b+0x28>)
 800f082:	f240 1145 	movw	r1, #325	@ 0x145
 800f086:	f001 fdf3 	bl	8010c70 <__assert_func>
 800f08a:	2301      	movs	r3, #1
 800f08c:	6144      	str	r4, [r0, #20]
 800f08e:	6103      	str	r3, [r0, #16]
 800f090:	bd10      	pop	{r4, pc}
 800f092:	bf00      	nop
 800f094:	0801d6c5 	.word	0x0801d6c5
 800f098:	0801d6d6 	.word	0x0801d6d6

0800f09c <__multiply>:
 800f09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0a0:	4614      	mov	r4, r2
 800f0a2:	690a      	ldr	r2, [r1, #16]
 800f0a4:	6923      	ldr	r3, [r4, #16]
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	bfa8      	it	ge
 800f0aa:	4623      	movge	r3, r4
 800f0ac:	460f      	mov	r7, r1
 800f0ae:	bfa4      	itt	ge
 800f0b0:	460c      	movge	r4, r1
 800f0b2:	461f      	movge	r7, r3
 800f0b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f0b8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f0bc:	68a3      	ldr	r3, [r4, #8]
 800f0be:	6861      	ldr	r1, [r4, #4]
 800f0c0:	eb0a 0609 	add.w	r6, sl, r9
 800f0c4:	42b3      	cmp	r3, r6
 800f0c6:	b085      	sub	sp, #20
 800f0c8:	bfb8      	it	lt
 800f0ca:	3101      	addlt	r1, #1
 800f0cc:	f7ff fe92 	bl	800edf4 <_Balloc>
 800f0d0:	b930      	cbnz	r0, 800f0e0 <__multiply+0x44>
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	4b44      	ldr	r3, [pc, #272]	@ (800f1e8 <__multiply+0x14c>)
 800f0d6:	4845      	ldr	r0, [pc, #276]	@ (800f1ec <__multiply+0x150>)
 800f0d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f0dc:	f001 fdc8 	bl	8010c70 <__assert_func>
 800f0e0:	f100 0514 	add.w	r5, r0, #20
 800f0e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f0e8:	462b      	mov	r3, r5
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	4543      	cmp	r3, r8
 800f0ee:	d321      	bcc.n	800f134 <__multiply+0x98>
 800f0f0:	f107 0114 	add.w	r1, r7, #20
 800f0f4:	f104 0214 	add.w	r2, r4, #20
 800f0f8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f0fc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f100:	9302      	str	r3, [sp, #8]
 800f102:	1b13      	subs	r3, r2, r4
 800f104:	3b15      	subs	r3, #21
 800f106:	f023 0303 	bic.w	r3, r3, #3
 800f10a:	3304      	adds	r3, #4
 800f10c:	f104 0715 	add.w	r7, r4, #21
 800f110:	42ba      	cmp	r2, r7
 800f112:	bf38      	it	cc
 800f114:	2304      	movcc	r3, #4
 800f116:	9301      	str	r3, [sp, #4]
 800f118:	9b02      	ldr	r3, [sp, #8]
 800f11a:	9103      	str	r1, [sp, #12]
 800f11c:	428b      	cmp	r3, r1
 800f11e:	d80c      	bhi.n	800f13a <__multiply+0x9e>
 800f120:	2e00      	cmp	r6, #0
 800f122:	dd03      	ble.n	800f12c <__multiply+0x90>
 800f124:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d05b      	beq.n	800f1e4 <__multiply+0x148>
 800f12c:	6106      	str	r6, [r0, #16]
 800f12e:	b005      	add	sp, #20
 800f130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f134:	f843 2b04 	str.w	r2, [r3], #4
 800f138:	e7d8      	b.n	800f0ec <__multiply+0x50>
 800f13a:	f8b1 a000 	ldrh.w	sl, [r1]
 800f13e:	f1ba 0f00 	cmp.w	sl, #0
 800f142:	d024      	beq.n	800f18e <__multiply+0xf2>
 800f144:	f104 0e14 	add.w	lr, r4, #20
 800f148:	46a9      	mov	r9, r5
 800f14a:	f04f 0c00 	mov.w	ip, #0
 800f14e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f152:	f8d9 3000 	ldr.w	r3, [r9]
 800f156:	fa1f fb87 	uxth.w	fp, r7
 800f15a:	b29b      	uxth	r3, r3
 800f15c:	fb0a 330b 	mla	r3, sl, fp, r3
 800f160:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f164:	f8d9 7000 	ldr.w	r7, [r9]
 800f168:	4463      	add	r3, ip
 800f16a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f16e:	fb0a c70b 	mla	r7, sl, fp, ip
 800f172:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f176:	b29b      	uxth	r3, r3
 800f178:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f17c:	4572      	cmp	r2, lr
 800f17e:	f849 3b04 	str.w	r3, [r9], #4
 800f182:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f186:	d8e2      	bhi.n	800f14e <__multiply+0xb2>
 800f188:	9b01      	ldr	r3, [sp, #4]
 800f18a:	f845 c003 	str.w	ip, [r5, r3]
 800f18e:	9b03      	ldr	r3, [sp, #12]
 800f190:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f194:	3104      	adds	r1, #4
 800f196:	f1b9 0f00 	cmp.w	r9, #0
 800f19a:	d021      	beq.n	800f1e0 <__multiply+0x144>
 800f19c:	682b      	ldr	r3, [r5, #0]
 800f19e:	f104 0c14 	add.w	ip, r4, #20
 800f1a2:	46ae      	mov	lr, r5
 800f1a4:	f04f 0a00 	mov.w	sl, #0
 800f1a8:	f8bc b000 	ldrh.w	fp, [ip]
 800f1ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f1b0:	fb09 770b 	mla	r7, r9, fp, r7
 800f1b4:	4457      	add	r7, sl
 800f1b6:	b29b      	uxth	r3, r3
 800f1b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f1bc:	f84e 3b04 	str.w	r3, [lr], #4
 800f1c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f1c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f1c8:	f8be 3000 	ldrh.w	r3, [lr]
 800f1cc:	fb09 330a 	mla	r3, r9, sl, r3
 800f1d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f1d4:	4562      	cmp	r2, ip
 800f1d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f1da:	d8e5      	bhi.n	800f1a8 <__multiply+0x10c>
 800f1dc:	9f01      	ldr	r7, [sp, #4]
 800f1de:	51eb      	str	r3, [r5, r7]
 800f1e0:	3504      	adds	r5, #4
 800f1e2:	e799      	b.n	800f118 <__multiply+0x7c>
 800f1e4:	3e01      	subs	r6, #1
 800f1e6:	e79b      	b.n	800f120 <__multiply+0x84>
 800f1e8:	0801d6c5 	.word	0x0801d6c5
 800f1ec:	0801d6d6 	.word	0x0801d6d6

0800f1f0 <__pow5mult>:
 800f1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1f4:	4615      	mov	r5, r2
 800f1f6:	f012 0203 	ands.w	r2, r2, #3
 800f1fa:	4607      	mov	r7, r0
 800f1fc:	460e      	mov	r6, r1
 800f1fe:	d007      	beq.n	800f210 <__pow5mult+0x20>
 800f200:	4c25      	ldr	r4, [pc, #148]	@ (800f298 <__pow5mult+0xa8>)
 800f202:	3a01      	subs	r2, #1
 800f204:	2300      	movs	r3, #0
 800f206:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f20a:	f7ff fe55 	bl	800eeb8 <__multadd>
 800f20e:	4606      	mov	r6, r0
 800f210:	10ad      	asrs	r5, r5, #2
 800f212:	d03d      	beq.n	800f290 <__pow5mult+0xa0>
 800f214:	69fc      	ldr	r4, [r7, #28]
 800f216:	b97c      	cbnz	r4, 800f238 <__pow5mult+0x48>
 800f218:	2010      	movs	r0, #16
 800f21a:	f7fd fd01 	bl	800cc20 <malloc>
 800f21e:	4602      	mov	r2, r0
 800f220:	61f8      	str	r0, [r7, #28]
 800f222:	b928      	cbnz	r0, 800f230 <__pow5mult+0x40>
 800f224:	4b1d      	ldr	r3, [pc, #116]	@ (800f29c <__pow5mult+0xac>)
 800f226:	481e      	ldr	r0, [pc, #120]	@ (800f2a0 <__pow5mult+0xb0>)
 800f228:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f22c:	f001 fd20 	bl	8010c70 <__assert_func>
 800f230:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f234:	6004      	str	r4, [r0, #0]
 800f236:	60c4      	str	r4, [r0, #12]
 800f238:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f23c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f240:	b94c      	cbnz	r4, 800f256 <__pow5mult+0x66>
 800f242:	f240 2171 	movw	r1, #625	@ 0x271
 800f246:	4638      	mov	r0, r7
 800f248:	f7ff ff12 	bl	800f070 <__i2b>
 800f24c:	2300      	movs	r3, #0
 800f24e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f252:	4604      	mov	r4, r0
 800f254:	6003      	str	r3, [r0, #0]
 800f256:	f04f 0900 	mov.w	r9, #0
 800f25a:	07eb      	lsls	r3, r5, #31
 800f25c:	d50a      	bpl.n	800f274 <__pow5mult+0x84>
 800f25e:	4631      	mov	r1, r6
 800f260:	4622      	mov	r2, r4
 800f262:	4638      	mov	r0, r7
 800f264:	f7ff ff1a 	bl	800f09c <__multiply>
 800f268:	4631      	mov	r1, r6
 800f26a:	4680      	mov	r8, r0
 800f26c:	4638      	mov	r0, r7
 800f26e:	f7ff fe01 	bl	800ee74 <_Bfree>
 800f272:	4646      	mov	r6, r8
 800f274:	106d      	asrs	r5, r5, #1
 800f276:	d00b      	beq.n	800f290 <__pow5mult+0xa0>
 800f278:	6820      	ldr	r0, [r4, #0]
 800f27a:	b938      	cbnz	r0, 800f28c <__pow5mult+0x9c>
 800f27c:	4622      	mov	r2, r4
 800f27e:	4621      	mov	r1, r4
 800f280:	4638      	mov	r0, r7
 800f282:	f7ff ff0b 	bl	800f09c <__multiply>
 800f286:	6020      	str	r0, [r4, #0]
 800f288:	f8c0 9000 	str.w	r9, [r0]
 800f28c:	4604      	mov	r4, r0
 800f28e:	e7e4      	b.n	800f25a <__pow5mult+0x6a>
 800f290:	4630      	mov	r0, r6
 800f292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f296:	bf00      	nop
 800f298:	0801d730 	.word	0x0801d730
 800f29c:	0801d656 	.word	0x0801d656
 800f2a0:	0801d6d6 	.word	0x0801d6d6

0800f2a4 <__lshift>:
 800f2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2a8:	460c      	mov	r4, r1
 800f2aa:	6849      	ldr	r1, [r1, #4]
 800f2ac:	6923      	ldr	r3, [r4, #16]
 800f2ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f2b2:	68a3      	ldr	r3, [r4, #8]
 800f2b4:	4607      	mov	r7, r0
 800f2b6:	4691      	mov	r9, r2
 800f2b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f2bc:	f108 0601 	add.w	r6, r8, #1
 800f2c0:	42b3      	cmp	r3, r6
 800f2c2:	db0b      	blt.n	800f2dc <__lshift+0x38>
 800f2c4:	4638      	mov	r0, r7
 800f2c6:	f7ff fd95 	bl	800edf4 <_Balloc>
 800f2ca:	4605      	mov	r5, r0
 800f2cc:	b948      	cbnz	r0, 800f2e2 <__lshift+0x3e>
 800f2ce:	4602      	mov	r2, r0
 800f2d0:	4b28      	ldr	r3, [pc, #160]	@ (800f374 <__lshift+0xd0>)
 800f2d2:	4829      	ldr	r0, [pc, #164]	@ (800f378 <__lshift+0xd4>)
 800f2d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f2d8:	f001 fcca 	bl	8010c70 <__assert_func>
 800f2dc:	3101      	adds	r1, #1
 800f2de:	005b      	lsls	r3, r3, #1
 800f2e0:	e7ee      	b.n	800f2c0 <__lshift+0x1c>
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	f100 0114 	add.w	r1, r0, #20
 800f2e8:	f100 0210 	add.w	r2, r0, #16
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	4553      	cmp	r3, sl
 800f2f0:	db33      	blt.n	800f35a <__lshift+0xb6>
 800f2f2:	6920      	ldr	r0, [r4, #16]
 800f2f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f2f8:	f104 0314 	add.w	r3, r4, #20
 800f2fc:	f019 091f 	ands.w	r9, r9, #31
 800f300:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f304:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f308:	d02b      	beq.n	800f362 <__lshift+0xbe>
 800f30a:	f1c9 0e20 	rsb	lr, r9, #32
 800f30e:	468a      	mov	sl, r1
 800f310:	2200      	movs	r2, #0
 800f312:	6818      	ldr	r0, [r3, #0]
 800f314:	fa00 f009 	lsl.w	r0, r0, r9
 800f318:	4310      	orrs	r0, r2
 800f31a:	f84a 0b04 	str.w	r0, [sl], #4
 800f31e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f322:	459c      	cmp	ip, r3
 800f324:	fa22 f20e 	lsr.w	r2, r2, lr
 800f328:	d8f3      	bhi.n	800f312 <__lshift+0x6e>
 800f32a:	ebac 0304 	sub.w	r3, ip, r4
 800f32e:	3b15      	subs	r3, #21
 800f330:	f023 0303 	bic.w	r3, r3, #3
 800f334:	3304      	adds	r3, #4
 800f336:	f104 0015 	add.w	r0, r4, #21
 800f33a:	4584      	cmp	ip, r0
 800f33c:	bf38      	it	cc
 800f33e:	2304      	movcc	r3, #4
 800f340:	50ca      	str	r2, [r1, r3]
 800f342:	b10a      	cbz	r2, 800f348 <__lshift+0xa4>
 800f344:	f108 0602 	add.w	r6, r8, #2
 800f348:	3e01      	subs	r6, #1
 800f34a:	4638      	mov	r0, r7
 800f34c:	612e      	str	r6, [r5, #16]
 800f34e:	4621      	mov	r1, r4
 800f350:	f7ff fd90 	bl	800ee74 <_Bfree>
 800f354:	4628      	mov	r0, r5
 800f356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f35a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f35e:	3301      	adds	r3, #1
 800f360:	e7c5      	b.n	800f2ee <__lshift+0x4a>
 800f362:	3904      	subs	r1, #4
 800f364:	f853 2b04 	ldr.w	r2, [r3], #4
 800f368:	f841 2f04 	str.w	r2, [r1, #4]!
 800f36c:	459c      	cmp	ip, r3
 800f36e:	d8f9      	bhi.n	800f364 <__lshift+0xc0>
 800f370:	e7ea      	b.n	800f348 <__lshift+0xa4>
 800f372:	bf00      	nop
 800f374:	0801d6c5 	.word	0x0801d6c5
 800f378:	0801d6d6 	.word	0x0801d6d6

0800f37c <__mcmp>:
 800f37c:	690a      	ldr	r2, [r1, #16]
 800f37e:	4603      	mov	r3, r0
 800f380:	6900      	ldr	r0, [r0, #16]
 800f382:	1a80      	subs	r0, r0, r2
 800f384:	b530      	push	{r4, r5, lr}
 800f386:	d10e      	bne.n	800f3a6 <__mcmp+0x2a>
 800f388:	3314      	adds	r3, #20
 800f38a:	3114      	adds	r1, #20
 800f38c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f390:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f394:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f398:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f39c:	4295      	cmp	r5, r2
 800f39e:	d003      	beq.n	800f3a8 <__mcmp+0x2c>
 800f3a0:	d205      	bcs.n	800f3ae <__mcmp+0x32>
 800f3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f3a6:	bd30      	pop	{r4, r5, pc}
 800f3a8:	42a3      	cmp	r3, r4
 800f3aa:	d3f3      	bcc.n	800f394 <__mcmp+0x18>
 800f3ac:	e7fb      	b.n	800f3a6 <__mcmp+0x2a>
 800f3ae:	2001      	movs	r0, #1
 800f3b0:	e7f9      	b.n	800f3a6 <__mcmp+0x2a>
	...

0800f3b4 <__mdiff>:
 800f3b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3b8:	4689      	mov	r9, r1
 800f3ba:	4606      	mov	r6, r0
 800f3bc:	4611      	mov	r1, r2
 800f3be:	4648      	mov	r0, r9
 800f3c0:	4614      	mov	r4, r2
 800f3c2:	f7ff ffdb 	bl	800f37c <__mcmp>
 800f3c6:	1e05      	subs	r5, r0, #0
 800f3c8:	d112      	bne.n	800f3f0 <__mdiff+0x3c>
 800f3ca:	4629      	mov	r1, r5
 800f3cc:	4630      	mov	r0, r6
 800f3ce:	f7ff fd11 	bl	800edf4 <_Balloc>
 800f3d2:	4602      	mov	r2, r0
 800f3d4:	b928      	cbnz	r0, 800f3e2 <__mdiff+0x2e>
 800f3d6:	4b3f      	ldr	r3, [pc, #252]	@ (800f4d4 <__mdiff+0x120>)
 800f3d8:	f240 2137 	movw	r1, #567	@ 0x237
 800f3dc:	483e      	ldr	r0, [pc, #248]	@ (800f4d8 <__mdiff+0x124>)
 800f3de:	f001 fc47 	bl	8010c70 <__assert_func>
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f3e8:	4610      	mov	r0, r2
 800f3ea:	b003      	add	sp, #12
 800f3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3f0:	bfbc      	itt	lt
 800f3f2:	464b      	movlt	r3, r9
 800f3f4:	46a1      	movlt	r9, r4
 800f3f6:	4630      	mov	r0, r6
 800f3f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f3fc:	bfba      	itte	lt
 800f3fe:	461c      	movlt	r4, r3
 800f400:	2501      	movlt	r5, #1
 800f402:	2500      	movge	r5, #0
 800f404:	f7ff fcf6 	bl	800edf4 <_Balloc>
 800f408:	4602      	mov	r2, r0
 800f40a:	b918      	cbnz	r0, 800f414 <__mdiff+0x60>
 800f40c:	4b31      	ldr	r3, [pc, #196]	@ (800f4d4 <__mdiff+0x120>)
 800f40e:	f240 2145 	movw	r1, #581	@ 0x245
 800f412:	e7e3      	b.n	800f3dc <__mdiff+0x28>
 800f414:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f418:	6926      	ldr	r6, [r4, #16]
 800f41a:	60c5      	str	r5, [r0, #12]
 800f41c:	f109 0310 	add.w	r3, r9, #16
 800f420:	f109 0514 	add.w	r5, r9, #20
 800f424:	f104 0e14 	add.w	lr, r4, #20
 800f428:	f100 0b14 	add.w	fp, r0, #20
 800f42c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f430:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f434:	9301      	str	r3, [sp, #4]
 800f436:	46d9      	mov	r9, fp
 800f438:	f04f 0c00 	mov.w	ip, #0
 800f43c:	9b01      	ldr	r3, [sp, #4]
 800f43e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f442:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f446:	9301      	str	r3, [sp, #4]
 800f448:	fa1f f38a 	uxth.w	r3, sl
 800f44c:	4619      	mov	r1, r3
 800f44e:	b283      	uxth	r3, r0
 800f450:	1acb      	subs	r3, r1, r3
 800f452:	0c00      	lsrs	r0, r0, #16
 800f454:	4463      	add	r3, ip
 800f456:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f45a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f45e:	b29b      	uxth	r3, r3
 800f460:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f464:	4576      	cmp	r6, lr
 800f466:	f849 3b04 	str.w	r3, [r9], #4
 800f46a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f46e:	d8e5      	bhi.n	800f43c <__mdiff+0x88>
 800f470:	1b33      	subs	r3, r6, r4
 800f472:	3b15      	subs	r3, #21
 800f474:	f023 0303 	bic.w	r3, r3, #3
 800f478:	3415      	adds	r4, #21
 800f47a:	3304      	adds	r3, #4
 800f47c:	42a6      	cmp	r6, r4
 800f47e:	bf38      	it	cc
 800f480:	2304      	movcc	r3, #4
 800f482:	441d      	add	r5, r3
 800f484:	445b      	add	r3, fp
 800f486:	461e      	mov	r6, r3
 800f488:	462c      	mov	r4, r5
 800f48a:	4544      	cmp	r4, r8
 800f48c:	d30e      	bcc.n	800f4ac <__mdiff+0xf8>
 800f48e:	f108 0103 	add.w	r1, r8, #3
 800f492:	1b49      	subs	r1, r1, r5
 800f494:	f021 0103 	bic.w	r1, r1, #3
 800f498:	3d03      	subs	r5, #3
 800f49a:	45a8      	cmp	r8, r5
 800f49c:	bf38      	it	cc
 800f49e:	2100      	movcc	r1, #0
 800f4a0:	440b      	add	r3, r1
 800f4a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f4a6:	b191      	cbz	r1, 800f4ce <__mdiff+0x11a>
 800f4a8:	6117      	str	r7, [r2, #16]
 800f4aa:	e79d      	b.n	800f3e8 <__mdiff+0x34>
 800f4ac:	f854 1b04 	ldr.w	r1, [r4], #4
 800f4b0:	46e6      	mov	lr, ip
 800f4b2:	0c08      	lsrs	r0, r1, #16
 800f4b4:	fa1c fc81 	uxtah	ip, ip, r1
 800f4b8:	4471      	add	r1, lr
 800f4ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f4be:	b289      	uxth	r1, r1
 800f4c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f4c4:	f846 1b04 	str.w	r1, [r6], #4
 800f4c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f4cc:	e7dd      	b.n	800f48a <__mdiff+0xd6>
 800f4ce:	3f01      	subs	r7, #1
 800f4d0:	e7e7      	b.n	800f4a2 <__mdiff+0xee>
 800f4d2:	bf00      	nop
 800f4d4:	0801d6c5 	.word	0x0801d6c5
 800f4d8:	0801d6d6 	.word	0x0801d6d6

0800f4dc <__ulp>:
 800f4dc:	b082      	sub	sp, #8
 800f4de:	ed8d 0b00 	vstr	d0, [sp]
 800f4e2:	9a01      	ldr	r2, [sp, #4]
 800f4e4:	4b0f      	ldr	r3, [pc, #60]	@ (800f524 <__ulp+0x48>)
 800f4e6:	4013      	ands	r3, r2
 800f4e8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	dc08      	bgt.n	800f502 <__ulp+0x26>
 800f4f0:	425b      	negs	r3, r3
 800f4f2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f4f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f4fa:	da04      	bge.n	800f506 <__ulp+0x2a>
 800f4fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f500:	4113      	asrs	r3, r2
 800f502:	2200      	movs	r2, #0
 800f504:	e008      	b.n	800f518 <__ulp+0x3c>
 800f506:	f1a2 0314 	sub.w	r3, r2, #20
 800f50a:	2b1e      	cmp	r3, #30
 800f50c:	bfda      	itte	le
 800f50e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f512:	40da      	lsrle	r2, r3
 800f514:	2201      	movgt	r2, #1
 800f516:	2300      	movs	r3, #0
 800f518:	4619      	mov	r1, r3
 800f51a:	4610      	mov	r0, r2
 800f51c:	ec41 0b10 	vmov	d0, r0, r1
 800f520:	b002      	add	sp, #8
 800f522:	4770      	bx	lr
 800f524:	7ff00000 	.word	0x7ff00000

0800f528 <__b2d>:
 800f528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f52c:	6906      	ldr	r6, [r0, #16]
 800f52e:	f100 0814 	add.w	r8, r0, #20
 800f532:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f536:	1f37      	subs	r7, r6, #4
 800f538:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f53c:	4610      	mov	r0, r2
 800f53e:	f7ff fd4b 	bl	800efd8 <__hi0bits>
 800f542:	f1c0 0320 	rsb	r3, r0, #32
 800f546:	280a      	cmp	r0, #10
 800f548:	600b      	str	r3, [r1, #0]
 800f54a:	491b      	ldr	r1, [pc, #108]	@ (800f5b8 <__b2d+0x90>)
 800f54c:	dc15      	bgt.n	800f57a <__b2d+0x52>
 800f54e:	f1c0 0c0b 	rsb	ip, r0, #11
 800f552:	fa22 f30c 	lsr.w	r3, r2, ip
 800f556:	45b8      	cmp	r8, r7
 800f558:	ea43 0501 	orr.w	r5, r3, r1
 800f55c:	bf34      	ite	cc
 800f55e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f562:	2300      	movcs	r3, #0
 800f564:	3015      	adds	r0, #21
 800f566:	fa02 f000 	lsl.w	r0, r2, r0
 800f56a:	fa23 f30c 	lsr.w	r3, r3, ip
 800f56e:	4303      	orrs	r3, r0
 800f570:	461c      	mov	r4, r3
 800f572:	ec45 4b10 	vmov	d0, r4, r5
 800f576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f57a:	45b8      	cmp	r8, r7
 800f57c:	bf3a      	itte	cc
 800f57e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f582:	f1a6 0708 	subcc.w	r7, r6, #8
 800f586:	2300      	movcs	r3, #0
 800f588:	380b      	subs	r0, #11
 800f58a:	d012      	beq.n	800f5b2 <__b2d+0x8a>
 800f58c:	f1c0 0120 	rsb	r1, r0, #32
 800f590:	fa23 f401 	lsr.w	r4, r3, r1
 800f594:	4082      	lsls	r2, r0
 800f596:	4322      	orrs	r2, r4
 800f598:	4547      	cmp	r7, r8
 800f59a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f59e:	bf8c      	ite	hi
 800f5a0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f5a4:	2200      	movls	r2, #0
 800f5a6:	4083      	lsls	r3, r0
 800f5a8:	40ca      	lsrs	r2, r1
 800f5aa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f5ae:	4313      	orrs	r3, r2
 800f5b0:	e7de      	b.n	800f570 <__b2d+0x48>
 800f5b2:	ea42 0501 	orr.w	r5, r2, r1
 800f5b6:	e7db      	b.n	800f570 <__b2d+0x48>
 800f5b8:	3ff00000 	.word	0x3ff00000

0800f5bc <__d2b>:
 800f5bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f5c0:	460f      	mov	r7, r1
 800f5c2:	2101      	movs	r1, #1
 800f5c4:	ec59 8b10 	vmov	r8, r9, d0
 800f5c8:	4616      	mov	r6, r2
 800f5ca:	f7ff fc13 	bl	800edf4 <_Balloc>
 800f5ce:	4604      	mov	r4, r0
 800f5d0:	b930      	cbnz	r0, 800f5e0 <__d2b+0x24>
 800f5d2:	4602      	mov	r2, r0
 800f5d4:	4b23      	ldr	r3, [pc, #140]	@ (800f664 <__d2b+0xa8>)
 800f5d6:	4824      	ldr	r0, [pc, #144]	@ (800f668 <__d2b+0xac>)
 800f5d8:	f240 310f 	movw	r1, #783	@ 0x30f
 800f5dc:	f001 fb48 	bl	8010c70 <__assert_func>
 800f5e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f5e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f5e8:	b10d      	cbz	r5, 800f5ee <__d2b+0x32>
 800f5ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f5ee:	9301      	str	r3, [sp, #4]
 800f5f0:	f1b8 0300 	subs.w	r3, r8, #0
 800f5f4:	d023      	beq.n	800f63e <__d2b+0x82>
 800f5f6:	4668      	mov	r0, sp
 800f5f8:	9300      	str	r3, [sp, #0]
 800f5fa:	f7ff fd0c 	bl	800f016 <__lo0bits>
 800f5fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f602:	b1d0      	cbz	r0, 800f63a <__d2b+0x7e>
 800f604:	f1c0 0320 	rsb	r3, r0, #32
 800f608:	fa02 f303 	lsl.w	r3, r2, r3
 800f60c:	430b      	orrs	r3, r1
 800f60e:	40c2      	lsrs	r2, r0
 800f610:	6163      	str	r3, [r4, #20]
 800f612:	9201      	str	r2, [sp, #4]
 800f614:	9b01      	ldr	r3, [sp, #4]
 800f616:	61a3      	str	r3, [r4, #24]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	bf0c      	ite	eq
 800f61c:	2201      	moveq	r2, #1
 800f61e:	2202      	movne	r2, #2
 800f620:	6122      	str	r2, [r4, #16]
 800f622:	b1a5      	cbz	r5, 800f64e <__d2b+0x92>
 800f624:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f628:	4405      	add	r5, r0
 800f62a:	603d      	str	r5, [r7, #0]
 800f62c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f630:	6030      	str	r0, [r6, #0]
 800f632:	4620      	mov	r0, r4
 800f634:	b003      	add	sp, #12
 800f636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f63a:	6161      	str	r1, [r4, #20]
 800f63c:	e7ea      	b.n	800f614 <__d2b+0x58>
 800f63e:	a801      	add	r0, sp, #4
 800f640:	f7ff fce9 	bl	800f016 <__lo0bits>
 800f644:	9b01      	ldr	r3, [sp, #4]
 800f646:	6163      	str	r3, [r4, #20]
 800f648:	3020      	adds	r0, #32
 800f64a:	2201      	movs	r2, #1
 800f64c:	e7e8      	b.n	800f620 <__d2b+0x64>
 800f64e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f652:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f656:	6038      	str	r0, [r7, #0]
 800f658:	6918      	ldr	r0, [r3, #16]
 800f65a:	f7ff fcbd 	bl	800efd8 <__hi0bits>
 800f65e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f662:	e7e5      	b.n	800f630 <__d2b+0x74>
 800f664:	0801d6c5 	.word	0x0801d6c5
 800f668:	0801d6d6 	.word	0x0801d6d6

0800f66c <__ratio>:
 800f66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f670:	b085      	sub	sp, #20
 800f672:	e9cd 1000 	strd	r1, r0, [sp]
 800f676:	a902      	add	r1, sp, #8
 800f678:	f7ff ff56 	bl	800f528 <__b2d>
 800f67c:	9800      	ldr	r0, [sp, #0]
 800f67e:	a903      	add	r1, sp, #12
 800f680:	ec55 4b10 	vmov	r4, r5, d0
 800f684:	f7ff ff50 	bl	800f528 <__b2d>
 800f688:	9b01      	ldr	r3, [sp, #4]
 800f68a:	6919      	ldr	r1, [r3, #16]
 800f68c:	9b00      	ldr	r3, [sp, #0]
 800f68e:	691b      	ldr	r3, [r3, #16]
 800f690:	1ac9      	subs	r1, r1, r3
 800f692:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f696:	1a9b      	subs	r3, r3, r2
 800f698:	ec5b ab10 	vmov	sl, fp, d0
 800f69c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	bfce      	itee	gt
 800f6a4:	462a      	movgt	r2, r5
 800f6a6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f6aa:	465a      	movle	r2, fp
 800f6ac:	462f      	mov	r7, r5
 800f6ae:	46d9      	mov	r9, fp
 800f6b0:	bfcc      	ite	gt
 800f6b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f6b6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f6ba:	464b      	mov	r3, r9
 800f6bc:	4652      	mov	r2, sl
 800f6be:	4620      	mov	r0, r4
 800f6c0:	4639      	mov	r1, r7
 800f6c2:	f7f1 f8c3 	bl	800084c <__aeabi_ddiv>
 800f6c6:	ec41 0b10 	vmov	d0, r0, r1
 800f6ca:	b005      	add	sp, #20
 800f6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f6d0 <__copybits>:
 800f6d0:	3901      	subs	r1, #1
 800f6d2:	b570      	push	{r4, r5, r6, lr}
 800f6d4:	1149      	asrs	r1, r1, #5
 800f6d6:	6914      	ldr	r4, [r2, #16]
 800f6d8:	3101      	adds	r1, #1
 800f6da:	f102 0314 	add.w	r3, r2, #20
 800f6de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f6e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f6e6:	1f05      	subs	r5, r0, #4
 800f6e8:	42a3      	cmp	r3, r4
 800f6ea:	d30c      	bcc.n	800f706 <__copybits+0x36>
 800f6ec:	1aa3      	subs	r3, r4, r2
 800f6ee:	3b11      	subs	r3, #17
 800f6f0:	f023 0303 	bic.w	r3, r3, #3
 800f6f4:	3211      	adds	r2, #17
 800f6f6:	42a2      	cmp	r2, r4
 800f6f8:	bf88      	it	hi
 800f6fa:	2300      	movhi	r3, #0
 800f6fc:	4418      	add	r0, r3
 800f6fe:	2300      	movs	r3, #0
 800f700:	4288      	cmp	r0, r1
 800f702:	d305      	bcc.n	800f710 <__copybits+0x40>
 800f704:	bd70      	pop	{r4, r5, r6, pc}
 800f706:	f853 6b04 	ldr.w	r6, [r3], #4
 800f70a:	f845 6f04 	str.w	r6, [r5, #4]!
 800f70e:	e7eb      	b.n	800f6e8 <__copybits+0x18>
 800f710:	f840 3b04 	str.w	r3, [r0], #4
 800f714:	e7f4      	b.n	800f700 <__copybits+0x30>

0800f716 <__any_on>:
 800f716:	f100 0214 	add.w	r2, r0, #20
 800f71a:	6900      	ldr	r0, [r0, #16]
 800f71c:	114b      	asrs	r3, r1, #5
 800f71e:	4298      	cmp	r0, r3
 800f720:	b510      	push	{r4, lr}
 800f722:	db11      	blt.n	800f748 <__any_on+0x32>
 800f724:	dd0a      	ble.n	800f73c <__any_on+0x26>
 800f726:	f011 011f 	ands.w	r1, r1, #31
 800f72a:	d007      	beq.n	800f73c <__any_on+0x26>
 800f72c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f730:	fa24 f001 	lsr.w	r0, r4, r1
 800f734:	fa00 f101 	lsl.w	r1, r0, r1
 800f738:	428c      	cmp	r4, r1
 800f73a:	d10b      	bne.n	800f754 <__any_on+0x3e>
 800f73c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f740:	4293      	cmp	r3, r2
 800f742:	d803      	bhi.n	800f74c <__any_on+0x36>
 800f744:	2000      	movs	r0, #0
 800f746:	bd10      	pop	{r4, pc}
 800f748:	4603      	mov	r3, r0
 800f74a:	e7f7      	b.n	800f73c <__any_on+0x26>
 800f74c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f750:	2900      	cmp	r1, #0
 800f752:	d0f5      	beq.n	800f740 <__any_on+0x2a>
 800f754:	2001      	movs	r0, #1
 800f756:	e7f6      	b.n	800f746 <__any_on+0x30>

0800f758 <_malloc_usable_size_r>:
 800f758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f75c:	1f18      	subs	r0, r3, #4
 800f75e:	2b00      	cmp	r3, #0
 800f760:	bfbc      	itt	lt
 800f762:	580b      	ldrlt	r3, [r1, r0]
 800f764:	18c0      	addlt	r0, r0, r3
 800f766:	4770      	bx	lr

0800f768 <sulp>:
 800f768:	b570      	push	{r4, r5, r6, lr}
 800f76a:	4604      	mov	r4, r0
 800f76c:	460d      	mov	r5, r1
 800f76e:	ec45 4b10 	vmov	d0, r4, r5
 800f772:	4616      	mov	r6, r2
 800f774:	f7ff feb2 	bl	800f4dc <__ulp>
 800f778:	ec51 0b10 	vmov	r0, r1, d0
 800f77c:	b17e      	cbz	r6, 800f79e <sulp+0x36>
 800f77e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f782:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f786:	2b00      	cmp	r3, #0
 800f788:	dd09      	ble.n	800f79e <sulp+0x36>
 800f78a:	051b      	lsls	r3, r3, #20
 800f78c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f790:	2400      	movs	r4, #0
 800f792:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f796:	4622      	mov	r2, r4
 800f798:	462b      	mov	r3, r5
 800f79a:	f7f0 ff2d 	bl	80005f8 <__aeabi_dmul>
 800f79e:	ec41 0b10 	vmov	d0, r0, r1
 800f7a2:	bd70      	pop	{r4, r5, r6, pc}
 800f7a4:	0000      	movs	r0, r0
	...

0800f7a8 <_strtod_l>:
 800f7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ac:	b09f      	sub	sp, #124	@ 0x7c
 800f7ae:	460c      	mov	r4, r1
 800f7b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	921a      	str	r2, [sp, #104]	@ 0x68
 800f7b6:	9005      	str	r0, [sp, #20]
 800f7b8:	f04f 0a00 	mov.w	sl, #0
 800f7bc:	f04f 0b00 	mov.w	fp, #0
 800f7c0:	460a      	mov	r2, r1
 800f7c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800f7c4:	7811      	ldrb	r1, [r2, #0]
 800f7c6:	292b      	cmp	r1, #43	@ 0x2b
 800f7c8:	d04a      	beq.n	800f860 <_strtod_l+0xb8>
 800f7ca:	d838      	bhi.n	800f83e <_strtod_l+0x96>
 800f7cc:	290d      	cmp	r1, #13
 800f7ce:	d832      	bhi.n	800f836 <_strtod_l+0x8e>
 800f7d0:	2908      	cmp	r1, #8
 800f7d2:	d832      	bhi.n	800f83a <_strtod_l+0x92>
 800f7d4:	2900      	cmp	r1, #0
 800f7d6:	d03b      	beq.n	800f850 <_strtod_l+0xa8>
 800f7d8:	2200      	movs	r2, #0
 800f7da:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f7dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f7de:	782a      	ldrb	r2, [r5, #0]
 800f7e0:	2a30      	cmp	r2, #48	@ 0x30
 800f7e2:	f040 80b3 	bne.w	800f94c <_strtod_l+0x1a4>
 800f7e6:	786a      	ldrb	r2, [r5, #1]
 800f7e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f7ec:	2a58      	cmp	r2, #88	@ 0x58
 800f7ee:	d16e      	bne.n	800f8ce <_strtod_l+0x126>
 800f7f0:	9302      	str	r3, [sp, #8]
 800f7f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7f4:	9301      	str	r3, [sp, #4]
 800f7f6:	ab1a      	add	r3, sp, #104	@ 0x68
 800f7f8:	9300      	str	r3, [sp, #0]
 800f7fa:	4a8e      	ldr	r2, [pc, #568]	@ (800fa34 <_strtod_l+0x28c>)
 800f7fc:	9805      	ldr	r0, [sp, #20]
 800f7fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f800:	a919      	add	r1, sp, #100	@ 0x64
 800f802:	f001 facf 	bl	8010da4 <__gethex>
 800f806:	f010 060f 	ands.w	r6, r0, #15
 800f80a:	4604      	mov	r4, r0
 800f80c:	d005      	beq.n	800f81a <_strtod_l+0x72>
 800f80e:	2e06      	cmp	r6, #6
 800f810:	d128      	bne.n	800f864 <_strtod_l+0xbc>
 800f812:	3501      	adds	r5, #1
 800f814:	2300      	movs	r3, #0
 800f816:	9519      	str	r5, [sp, #100]	@ 0x64
 800f818:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f81a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	f040 858e 	bne.w	801033e <_strtod_l+0xb96>
 800f822:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f824:	b1cb      	cbz	r3, 800f85a <_strtod_l+0xb2>
 800f826:	4652      	mov	r2, sl
 800f828:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f82c:	ec43 2b10 	vmov	d0, r2, r3
 800f830:	b01f      	add	sp, #124	@ 0x7c
 800f832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f836:	2920      	cmp	r1, #32
 800f838:	d1ce      	bne.n	800f7d8 <_strtod_l+0x30>
 800f83a:	3201      	adds	r2, #1
 800f83c:	e7c1      	b.n	800f7c2 <_strtod_l+0x1a>
 800f83e:	292d      	cmp	r1, #45	@ 0x2d
 800f840:	d1ca      	bne.n	800f7d8 <_strtod_l+0x30>
 800f842:	2101      	movs	r1, #1
 800f844:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f846:	1c51      	adds	r1, r2, #1
 800f848:	9119      	str	r1, [sp, #100]	@ 0x64
 800f84a:	7852      	ldrb	r2, [r2, #1]
 800f84c:	2a00      	cmp	r2, #0
 800f84e:	d1c5      	bne.n	800f7dc <_strtod_l+0x34>
 800f850:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f852:	9419      	str	r4, [sp, #100]	@ 0x64
 800f854:	2b00      	cmp	r3, #0
 800f856:	f040 8570 	bne.w	801033a <_strtod_l+0xb92>
 800f85a:	4652      	mov	r2, sl
 800f85c:	465b      	mov	r3, fp
 800f85e:	e7e5      	b.n	800f82c <_strtod_l+0x84>
 800f860:	2100      	movs	r1, #0
 800f862:	e7ef      	b.n	800f844 <_strtod_l+0x9c>
 800f864:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f866:	b13a      	cbz	r2, 800f878 <_strtod_l+0xd0>
 800f868:	2135      	movs	r1, #53	@ 0x35
 800f86a:	a81c      	add	r0, sp, #112	@ 0x70
 800f86c:	f7ff ff30 	bl	800f6d0 <__copybits>
 800f870:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f872:	9805      	ldr	r0, [sp, #20]
 800f874:	f7ff fafe 	bl	800ee74 <_Bfree>
 800f878:	3e01      	subs	r6, #1
 800f87a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f87c:	2e04      	cmp	r6, #4
 800f87e:	d806      	bhi.n	800f88e <_strtod_l+0xe6>
 800f880:	e8df f006 	tbb	[pc, r6]
 800f884:	201d0314 	.word	0x201d0314
 800f888:	14          	.byte	0x14
 800f889:	00          	.byte	0x00
 800f88a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f88e:	05e1      	lsls	r1, r4, #23
 800f890:	bf48      	it	mi
 800f892:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f896:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f89a:	0d1b      	lsrs	r3, r3, #20
 800f89c:	051b      	lsls	r3, r3, #20
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d1bb      	bne.n	800f81a <_strtod_l+0x72>
 800f8a2:	f7fe fbcd 	bl	800e040 <__errno>
 800f8a6:	2322      	movs	r3, #34	@ 0x22
 800f8a8:	6003      	str	r3, [r0, #0]
 800f8aa:	e7b6      	b.n	800f81a <_strtod_l+0x72>
 800f8ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f8b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f8b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f8b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f8bc:	e7e7      	b.n	800f88e <_strtod_l+0xe6>
 800f8be:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800fa3c <_strtod_l+0x294>
 800f8c2:	e7e4      	b.n	800f88e <_strtod_l+0xe6>
 800f8c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f8c8:	f04f 3aff 	mov.w	sl, #4294967295
 800f8cc:	e7df      	b.n	800f88e <_strtod_l+0xe6>
 800f8ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f8d0:	1c5a      	adds	r2, r3, #1
 800f8d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800f8d4:	785b      	ldrb	r3, [r3, #1]
 800f8d6:	2b30      	cmp	r3, #48	@ 0x30
 800f8d8:	d0f9      	beq.n	800f8ce <_strtod_l+0x126>
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d09d      	beq.n	800f81a <_strtod_l+0x72>
 800f8de:	2301      	movs	r3, #1
 800f8e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f8e4:	930c      	str	r3, [sp, #48]	@ 0x30
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	9308      	str	r3, [sp, #32]
 800f8ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8ec:	461f      	mov	r7, r3
 800f8ee:	220a      	movs	r2, #10
 800f8f0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f8f2:	7805      	ldrb	r5, [r0, #0]
 800f8f4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f8f8:	b2d9      	uxtb	r1, r3
 800f8fa:	2909      	cmp	r1, #9
 800f8fc:	d928      	bls.n	800f950 <_strtod_l+0x1a8>
 800f8fe:	494e      	ldr	r1, [pc, #312]	@ (800fa38 <_strtod_l+0x290>)
 800f900:	2201      	movs	r2, #1
 800f902:	f001 f979 	bl	8010bf8 <strncmp>
 800f906:	2800      	cmp	r0, #0
 800f908:	d032      	beq.n	800f970 <_strtod_l+0x1c8>
 800f90a:	2000      	movs	r0, #0
 800f90c:	462a      	mov	r2, r5
 800f90e:	4681      	mov	r9, r0
 800f910:	463d      	mov	r5, r7
 800f912:	4603      	mov	r3, r0
 800f914:	2a65      	cmp	r2, #101	@ 0x65
 800f916:	d001      	beq.n	800f91c <_strtod_l+0x174>
 800f918:	2a45      	cmp	r2, #69	@ 0x45
 800f91a:	d114      	bne.n	800f946 <_strtod_l+0x19e>
 800f91c:	b91d      	cbnz	r5, 800f926 <_strtod_l+0x17e>
 800f91e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f920:	4302      	orrs	r2, r0
 800f922:	d095      	beq.n	800f850 <_strtod_l+0xa8>
 800f924:	2500      	movs	r5, #0
 800f926:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f928:	1c62      	adds	r2, r4, #1
 800f92a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f92c:	7862      	ldrb	r2, [r4, #1]
 800f92e:	2a2b      	cmp	r2, #43	@ 0x2b
 800f930:	d077      	beq.n	800fa22 <_strtod_l+0x27a>
 800f932:	2a2d      	cmp	r2, #45	@ 0x2d
 800f934:	d07b      	beq.n	800fa2e <_strtod_l+0x286>
 800f936:	f04f 0c00 	mov.w	ip, #0
 800f93a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f93e:	2909      	cmp	r1, #9
 800f940:	f240 8082 	bls.w	800fa48 <_strtod_l+0x2a0>
 800f944:	9419      	str	r4, [sp, #100]	@ 0x64
 800f946:	f04f 0800 	mov.w	r8, #0
 800f94a:	e0a2      	b.n	800fa92 <_strtod_l+0x2ea>
 800f94c:	2300      	movs	r3, #0
 800f94e:	e7c7      	b.n	800f8e0 <_strtod_l+0x138>
 800f950:	2f08      	cmp	r7, #8
 800f952:	bfd5      	itete	le
 800f954:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800f956:	9908      	ldrgt	r1, [sp, #32]
 800f958:	fb02 3301 	mlale	r3, r2, r1, r3
 800f95c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f960:	f100 0001 	add.w	r0, r0, #1
 800f964:	bfd4      	ite	le
 800f966:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f968:	9308      	strgt	r3, [sp, #32]
 800f96a:	3701      	adds	r7, #1
 800f96c:	9019      	str	r0, [sp, #100]	@ 0x64
 800f96e:	e7bf      	b.n	800f8f0 <_strtod_l+0x148>
 800f970:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f972:	1c5a      	adds	r2, r3, #1
 800f974:	9219      	str	r2, [sp, #100]	@ 0x64
 800f976:	785a      	ldrb	r2, [r3, #1]
 800f978:	b37f      	cbz	r7, 800f9da <_strtod_l+0x232>
 800f97a:	4681      	mov	r9, r0
 800f97c:	463d      	mov	r5, r7
 800f97e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f982:	2b09      	cmp	r3, #9
 800f984:	d912      	bls.n	800f9ac <_strtod_l+0x204>
 800f986:	2301      	movs	r3, #1
 800f988:	e7c4      	b.n	800f914 <_strtod_l+0x16c>
 800f98a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f98c:	1c5a      	adds	r2, r3, #1
 800f98e:	9219      	str	r2, [sp, #100]	@ 0x64
 800f990:	785a      	ldrb	r2, [r3, #1]
 800f992:	3001      	adds	r0, #1
 800f994:	2a30      	cmp	r2, #48	@ 0x30
 800f996:	d0f8      	beq.n	800f98a <_strtod_l+0x1e2>
 800f998:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f99c:	2b08      	cmp	r3, #8
 800f99e:	f200 84d3 	bhi.w	8010348 <_strtod_l+0xba0>
 800f9a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f9a4:	930c      	str	r3, [sp, #48]	@ 0x30
 800f9a6:	4681      	mov	r9, r0
 800f9a8:	2000      	movs	r0, #0
 800f9aa:	4605      	mov	r5, r0
 800f9ac:	3a30      	subs	r2, #48	@ 0x30
 800f9ae:	f100 0301 	add.w	r3, r0, #1
 800f9b2:	d02a      	beq.n	800fa0a <_strtod_l+0x262>
 800f9b4:	4499      	add	r9, r3
 800f9b6:	eb00 0c05 	add.w	ip, r0, r5
 800f9ba:	462b      	mov	r3, r5
 800f9bc:	210a      	movs	r1, #10
 800f9be:	4563      	cmp	r3, ip
 800f9c0:	d10d      	bne.n	800f9de <_strtod_l+0x236>
 800f9c2:	1c69      	adds	r1, r5, #1
 800f9c4:	4401      	add	r1, r0
 800f9c6:	4428      	add	r0, r5
 800f9c8:	2808      	cmp	r0, #8
 800f9ca:	dc16      	bgt.n	800f9fa <_strtod_l+0x252>
 800f9cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f9ce:	230a      	movs	r3, #10
 800f9d0:	fb03 2300 	mla	r3, r3, r0, r2
 800f9d4:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	e018      	b.n	800fa0c <_strtod_l+0x264>
 800f9da:	4638      	mov	r0, r7
 800f9dc:	e7da      	b.n	800f994 <_strtod_l+0x1ec>
 800f9de:	2b08      	cmp	r3, #8
 800f9e0:	f103 0301 	add.w	r3, r3, #1
 800f9e4:	dc03      	bgt.n	800f9ee <_strtod_l+0x246>
 800f9e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f9e8:	434e      	muls	r6, r1
 800f9ea:	960a      	str	r6, [sp, #40]	@ 0x28
 800f9ec:	e7e7      	b.n	800f9be <_strtod_l+0x216>
 800f9ee:	2b10      	cmp	r3, #16
 800f9f0:	bfde      	ittt	le
 800f9f2:	9e08      	ldrle	r6, [sp, #32]
 800f9f4:	434e      	mulle	r6, r1
 800f9f6:	9608      	strle	r6, [sp, #32]
 800f9f8:	e7e1      	b.n	800f9be <_strtod_l+0x216>
 800f9fa:	280f      	cmp	r0, #15
 800f9fc:	dceb      	bgt.n	800f9d6 <_strtod_l+0x22e>
 800f9fe:	9808      	ldr	r0, [sp, #32]
 800fa00:	230a      	movs	r3, #10
 800fa02:	fb03 2300 	mla	r3, r3, r0, r2
 800fa06:	9308      	str	r3, [sp, #32]
 800fa08:	e7e5      	b.n	800f9d6 <_strtod_l+0x22e>
 800fa0a:	4629      	mov	r1, r5
 800fa0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fa0e:	1c50      	adds	r0, r2, #1
 800fa10:	9019      	str	r0, [sp, #100]	@ 0x64
 800fa12:	7852      	ldrb	r2, [r2, #1]
 800fa14:	4618      	mov	r0, r3
 800fa16:	460d      	mov	r5, r1
 800fa18:	e7b1      	b.n	800f97e <_strtod_l+0x1d6>
 800fa1a:	f04f 0900 	mov.w	r9, #0
 800fa1e:	2301      	movs	r3, #1
 800fa20:	e77d      	b.n	800f91e <_strtod_l+0x176>
 800fa22:	f04f 0c00 	mov.w	ip, #0
 800fa26:	1ca2      	adds	r2, r4, #2
 800fa28:	9219      	str	r2, [sp, #100]	@ 0x64
 800fa2a:	78a2      	ldrb	r2, [r4, #2]
 800fa2c:	e785      	b.n	800f93a <_strtod_l+0x192>
 800fa2e:	f04f 0c01 	mov.w	ip, #1
 800fa32:	e7f8      	b.n	800fa26 <_strtod_l+0x27e>
 800fa34:	0801d848 	.word	0x0801d848
 800fa38:	0801d830 	.word	0x0801d830
 800fa3c:	7ff00000 	.word	0x7ff00000
 800fa40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fa42:	1c51      	adds	r1, r2, #1
 800fa44:	9119      	str	r1, [sp, #100]	@ 0x64
 800fa46:	7852      	ldrb	r2, [r2, #1]
 800fa48:	2a30      	cmp	r2, #48	@ 0x30
 800fa4a:	d0f9      	beq.n	800fa40 <_strtod_l+0x298>
 800fa4c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800fa50:	2908      	cmp	r1, #8
 800fa52:	f63f af78 	bhi.w	800f946 <_strtod_l+0x19e>
 800fa56:	3a30      	subs	r2, #48	@ 0x30
 800fa58:	920e      	str	r2, [sp, #56]	@ 0x38
 800fa5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fa5c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800fa5e:	f04f 080a 	mov.w	r8, #10
 800fa62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fa64:	1c56      	adds	r6, r2, #1
 800fa66:	9619      	str	r6, [sp, #100]	@ 0x64
 800fa68:	7852      	ldrb	r2, [r2, #1]
 800fa6a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800fa6e:	f1be 0f09 	cmp.w	lr, #9
 800fa72:	d939      	bls.n	800fae8 <_strtod_l+0x340>
 800fa74:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fa76:	1a76      	subs	r6, r6, r1
 800fa78:	2e08      	cmp	r6, #8
 800fa7a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800fa7e:	dc03      	bgt.n	800fa88 <_strtod_l+0x2e0>
 800fa80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fa82:	4588      	cmp	r8, r1
 800fa84:	bfa8      	it	ge
 800fa86:	4688      	movge	r8, r1
 800fa88:	f1bc 0f00 	cmp.w	ip, #0
 800fa8c:	d001      	beq.n	800fa92 <_strtod_l+0x2ea>
 800fa8e:	f1c8 0800 	rsb	r8, r8, #0
 800fa92:	2d00      	cmp	r5, #0
 800fa94:	d14e      	bne.n	800fb34 <_strtod_l+0x38c>
 800fa96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fa98:	4308      	orrs	r0, r1
 800fa9a:	f47f aebe 	bne.w	800f81a <_strtod_l+0x72>
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	f47f aed6 	bne.w	800f850 <_strtod_l+0xa8>
 800faa4:	2a69      	cmp	r2, #105	@ 0x69
 800faa6:	d028      	beq.n	800fafa <_strtod_l+0x352>
 800faa8:	dc25      	bgt.n	800faf6 <_strtod_l+0x34e>
 800faaa:	2a49      	cmp	r2, #73	@ 0x49
 800faac:	d025      	beq.n	800fafa <_strtod_l+0x352>
 800faae:	2a4e      	cmp	r2, #78	@ 0x4e
 800fab0:	f47f aece 	bne.w	800f850 <_strtod_l+0xa8>
 800fab4:	499b      	ldr	r1, [pc, #620]	@ (800fd24 <_strtod_l+0x57c>)
 800fab6:	a819      	add	r0, sp, #100	@ 0x64
 800fab8:	f001 fb96 	bl	80111e8 <__match>
 800fabc:	2800      	cmp	r0, #0
 800fabe:	f43f aec7 	beq.w	800f850 <_strtod_l+0xa8>
 800fac2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fac4:	781b      	ldrb	r3, [r3, #0]
 800fac6:	2b28      	cmp	r3, #40	@ 0x28
 800fac8:	d12e      	bne.n	800fb28 <_strtod_l+0x380>
 800faca:	4997      	ldr	r1, [pc, #604]	@ (800fd28 <_strtod_l+0x580>)
 800facc:	aa1c      	add	r2, sp, #112	@ 0x70
 800face:	a819      	add	r0, sp, #100	@ 0x64
 800fad0:	f001 fb9e 	bl	8011210 <__hexnan>
 800fad4:	2805      	cmp	r0, #5
 800fad6:	d127      	bne.n	800fb28 <_strtod_l+0x380>
 800fad8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fada:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800fade:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800fae2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800fae6:	e698      	b.n	800f81a <_strtod_l+0x72>
 800fae8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800faea:	fb08 2101 	mla	r1, r8, r1, r2
 800faee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800faf2:	920e      	str	r2, [sp, #56]	@ 0x38
 800faf4:	e7b5      	b.n	800fa62 <_strtod_l+0x2ba>
 800faf6:	2a6e      	cmp	r2, #110	@ 0x6e
 800faf8:	e7da      	b.n	800fab0 <_strtod_l+0x308>
 800fafa:	498c      	ldr	r1, [pc, #560]	@ (800fd2c <_strtod_l+0x584>)
 800fafc:	a819      	add	r0, sp, #100	@ 0x64
 800fafe:	f001 fb73 	bl	80111e8 <__match>
 800fb02:	2800      	cmp	r0, #0
 800fb04:	f43f aea4 	beq.w	800f850 <_strtod_l+0xa8>
 800fb08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fb0a:	4989      	ldr	r1, [pc, #548]	@ (800fd30 <_strtod_l+0x588>)
 800fb0c:	3b01      	subs	r3, #1
 800fb0e:	a819      	add	r0, sp, #100	@ 0x64
 800fb10:	9319      	str	r3, [sp, #100]	@ 0x64
 800fb12:	f001 fb69 	bl	80111e8 <__match>
 800fb16:	b910      	cbnz	r0, 800fb1e <_strtod_l+0x376>
 800fb18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	9319      	str	r3, [sp, #100]	@ 0x64
 800fb1e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800fd40 <_strtod_l+0x598>
 800fb22:	f04f 0a00 	mov.w	sl, #0
 800fb26:	e678      	b.n	800f81a <_strtod_l+0x72>
 800fb28:	4882      	ldr	r0, [pc, #520]	@ (800fd34 <_strtod_l+0x58c>)
 800fb2a:	f001 f899 	bl	8010c60 <nan>
 800fb2e:	ec5b ab10 	vmov	sl, fp, d0
 800fb32:	e672      	b.n	800f81a <_strtod_l+0x72>
 800fb34:	eba8 0309 	sub.w	r3, r8, r9
 800fb38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fb3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb3c:	2f00      	cmp	r7, #0
 800fb3e:	bf08      	it	eq
 800fb40:	462f      	moveq	r7, r5
 800fb42:	2d10      	cmp	r5, #16
 800fb44:	462c      	mov	r4, r5
 800fb46:	bfa8      	it	ge
 800fb48:	2410      	movge	r4, #16
 800fb4a:	f7f0 fcdb 	bl	8000504 <__aeabi_ui2d>
 800fb4e:	2d09      	cmp	r5, #9
 800fb50:	4682      	mov	sl, r0
 800fb52:	468b      	mov	fp, r1
 800fb54:	dc13      	bgt.n	800fb7e <_strtod_l+0x3d6>
 800fb56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	f43f ae5e 	beq.w	800f81a <_strtod_l+0x72>
 800fb5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb60:	dd78      	ble.n	800fc54 <_strtod_l+0x4ac>
 800fb62:	2b16      	cmp	r3, #22
 800fb64:	dc5f      	bgt.n	800fc26 <_strtod_l+0x47e>
 800fb66:	4974      	ldr	r1, [pc, #464]	@ (800fd38 <_strtod_l+0x590>)
 800fb68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fb6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb70:	4652      	mov	r2, sl
 800fb72:	465b      	mov	r3, fp
 800fb74:	f7f0 fd40 	bl	80005f8 <__aeabi_dmul>
 800fb78:	4682      	mov	sl, r0
 800fb7a:	468b      	mov	fp, r1
 800fb7c:	e64d      	b.n	800f81a <_strtod_l+0x72>
 800fb7e:	4b6e      	ldr	r3, [pc, #440]	@ (800fd38 <_strtod_l+0x590>)
 800fb80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fb84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800fb88:	f7f0 fd36 	bl	80005f8 <__aeabi_dmul>
 800fb8c:	4682      	mov	sl, r0
 800fb8e:	9808      	ldr	r0, [sp, #32]
 800fb90:	468b      	mov	fp, r1
 800fb92:	f7f0 fcb7 	bl	8000504 <__aeabi_ui2d>
 800fb96:	4602      	mov	r2, r0
 800fb98:	460b      	mov	r3, r1
 800fb9a:	4650      	mov	r0, sl
 800fb9c:	4659      	mov	r1, fp
 800fb9e:	f7f0 fb75 	bl	800028c <__adddf3>
 800fba2:	2d0f      	cmp	r5, #15
 800fba4:	4682      	mov	sl, r0
 800fba6:	468b      	mov	fp, r1
 800fba8:	ddd5      	ble.n	800fb56 <_strtod_l+0x3ae>
 800fbaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbac:	1b2c      	subs	r4, r5, r4
 800fbae:	441c      	add	r4, r3
 800fbb0:	2c00      	cmp	r4, #0
 800fbb2:	f340 8096 	ble.w	800fce2 <_strtod_l+0x53a>
 800fbb6:	f014 030f 	ands.w	r3, r4, #15
 800fbba:	d00a      	beq.n	800fbd2 <_strtod_l+0x42a>
 800fbbc:	495e      	ldr	r1, [pc, #376]	@ (800fd38 <_strtod_l+0x590>)
 800fbbe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fbc2:	4652      	mov	r2, sl
 800fbc4:	465b      	mov	r3, fp
 800fbc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbca:	f7f0 fd15 	bl	80005f8 <__aeabi_dmul>
 800fbce:	4682      	mov	sl, r0
 800fbd0:	468b      	mov	fp, r1
 800fbd2:	f034 040f 	bics.w	r4, r4, #15
 800fbd6:	d073      	beq.n	800fcc0 <_strtod_l+0x518>
 800fbd8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800fbdc:	dd48      	ble.n	800fc70 <_strtod_l+0x4c8>
 800fbde:	2400      	movs	r4, #0
 800fbe0:	46a0      	mov	r8, r4
 800fbe2:	940a      	str	r4, [sp, #40]	@ 0x28
 800fbe4:	46a1      	mov	r9, r4
 800fbe6:	9a05      	ldr	r2, [sp, #20]
 800fbe8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800fd40 <_strtod_l+0x598>
 800fbec:	2322      	movs	r3, #34	@ 0x22
 800fbee:	6013      	str	r3, [r2, #0]
 800fbf0:	f04f 0a00 	mov.w	sl, #0
 800fbf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	f43f ae0f 	beq.w	800f81a <_strtod_l+0x72>
 800fbfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fbfe:	9805      	ldr	r0, [sp, #20]
 800fc00:	f7ff f938 	bl	800ee74 <_Bfree>
 800fc04:	9805      	ldr	r0, [sp, #20]
 800fc06:	4649      	mov	r1, r9
 800fc08:	f7ff f934 	bl	800ee74 <_Bfree>
 800fc0c:	9805      	ldr	r0, [sp, #20]
 800fc0e:	4641      	mov	r1, r8
 800fc10:	f7ff f930 	bl	800ee74 <_Bfree>
 800fc14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fc16:	9805      	ldr	r0, [sp, #20]
 800fc18:	f7ff f92c 	bl	800ee74 <_Bfree>
 800fc1c:	9805      	ldr	r0, [sp, #20]
 800fc1e:	4621      	mov	r1, r4
 800fc20:	f7ff f928 	bl	800ee74 <_Bfree>
 800fc24:	e5f9      	b.n	800f81a <_strtod_l+0x72>
 800fc26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800fc2c:	4293      	cmp	r3, r2
 800fc2e:	dbbc      	blt.n	800fbaa <_strtod_l+0x402>
 800fc30:	4c41      	ldr	r4, [pc, #260]	@ (800fd38 <_strtod_l+0x590>)
 800fc32:	f1c5 050f 	rsb	r5, r5, #15
 800fc36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fc3a:	4652      	mov	r2, sl
 800fc3c:	465b      	mov	r3, fp
 800fc3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc42:	f7f0 fcd9 	bl	80005f8 <__aeabi_dmul>
 800fc46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc48:	1b5d      	subs	r5, r3, r5
 800fc4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fc4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fc52:	e78f      	b.n	800fb74 <_strtod_l+0x3cc>
 800fc54:	3316      	adds	r3, #22
 800fc56:	dba8      	blt.n	800fbaa <_strtod_l+0x402>
 800fc58:	4b37      	ldr	r3, [pc, #220]	@ (800fd38 <_strtod_l+0x590>)
 800fc5a:	eba9 0808 	sub.w	r8, r9, r8
 800fc5e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800fc62:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fc66:	4650      	mov	r0, sl
 800fc68:	4659      	mov	r1, fp
 800fc6a:	f7f0 fdef 	bl	800084c <__aeabi_ddiv>
 800fc6e:	e783      	b.n	800fb78 <_strtod_l+0x3d0>
 800fc70:	4b32      	ldr	r3, [pc, #200]	@ (800fd3c <_strtod_l+0x594>)
 800fc72:	9308      	str	r3, [sp, #32]
 800fc74:	2300      	movs	r3, #0
 800fc76:	1124      	asrs	r4, r4, #4
 800fc78:	4650      	mov	r0, sl
 800fc7a:	4659      	mov	r1, fp
 800fc7c:	461e      	mov	r6, r3
 800fc7e:	2c01      	cmp	r4, #1
 800fc80:	dc21      	bgt.n	800fcc6 <_strtod_l+0x51e>
 800fc82:	b10b      	cbz	r3, 800fc88 <_strtod_l+0x4e0>
 800fc84:	4682      	mov	sl, r0
 800fc86:	468b      	mov	fp, r1
 800fc88:	492c      	ldr	r1, [pc, #176]	@ (800fd3c <_strtod_l+0x594>)
 800fc8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800fc8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800fc92:	4652      	mov	r2, sl
 800fc94:	465b      	mov	r3, fp
 800fc96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc9a:	f7f0 fcad 	bl	80005f8 <__aeabi_dmul>
 800fc9e:	4b28      	ldr	r3, [pc, #160]	@ (800fd40 <_strtod_l+0x598>)
 800fca0:	460a      	mov	r2, r1
 800fca2:	400b      	ands	r3, r1
 800fca4:	4927      	ldr	r1, [pc, #156]	@ (800fd44 <_strtod_l+0x59c>)
 800fca6:	428b      	cmp	r3, r1
 800fca8:	4682      	mov	sl, r0
 800fcaa:	d898      	bhi.n	800fbde <_strtod_l+0x436>
 800fcac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800fcb0:	428b      	cmp	r3, r1
 800fcb2:	bf86      	itte	hi
 800fcb4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800fd48 <_strtod_l+0x5a0>
 800fcb8:	f04f 3aff 	movhi.w	sl, #4294967295
 800fcbc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	9308      	str	r3, [sp, #32]
 800fcc4:	e07a      	b.n	800fdbc <_strtod_l+0x614>
 800fcc6:	07e2      	lsls	r2, r4, #31
 800fcc8:	d505      	bpl.n	800fcd6 <_strtod_l+0x52e>
 800fcca:	9b08      	ldr	r3, [sp, #32]
 800fccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd0:	f7f0 fc92 	bl	80005f8 <__aeabi_dmul>
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	9a08      	ldr	r2, [sp, #32]
 800fcd8:	3208      	adds	r2, #8
 800fcda:	3601      	adds	r6, #1
 800fcdc:	1064      	asrs	r4, r4, #1
 800fcde:	9208      	str	r2, [sp, #32]
 800fce0:	e7cd      	b.n	800fc7e <_strtod_l+0x4d6>
 800fce2:	d0ed      	beq.n	800fcc0 <_strtod_l+0x518>
 800fce4:	4264      	negs	r4, r4
 800fce6:	f014 020f 	ands.w	r2, r4, #15
 800fcea:	d00a      	beq.n	800fd02 <_strtod_l+0x55a>
 800fcec:	4b12      	ldr	r3, [pc, #72]	@ (800fd38 <_strtod_l+0x590>)
 800fcee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fcf2:	4650      	mov	r0, sl
 800fcf4:	4659      	mov	r1, fp
 800fcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfa:	f7f0 fda7 	bl	800084c <__aeabi_ddiv>
 800fcfe:	4682      	mov	sl, r0
 800fd00:	468b      	mov	fp, r1
 800fd02:	1124      	asrs	r4, r4, #4
 800fd04:	d0dc      	beq.n	800fcc0 <_strtod_l+0x518>
 800fd06:	2c1f      	cmp	r4, #31
 800fd08:	dd20      	ble.n	800fd4c <_strtod_l+0x5a4>
 800fd0a:	2400      	movs	r4, #0
 800fd0c:	46a0      	mov	r8, r4
 800fd0e:	940a      	str	r4, [sp, #40]	@ 0x28
 800fd10:	46a1      	mov	r9, r4
 800fd12:	9a05      	ldr	r2, [sp, #20]
 800fd14:	2322      	movs	r3, #34	@ 0x22
 800fd16:	f04f 0a00 	mov.w	sl, #0
 800fd1a:	f04f 0b00 	mov.w	fp, #0
 800fd1e:	6013      	str	r3, [r2, #0]
 800fd20:	e768      	b.n	800fbf4 <_strtod_l+0x44c>
 800fd22:	bf00      	nop
 800fd24:	0801d61d 	.word	0x0801d61d
 800fd28:	0801d834 	.word	0x0801d834
 800fd2c:	0801d615 	.word	0x0801d615
 800fd30:	0801d64c 	.word	0x0801d64c
 800fd34:	0801d9dd 	.word	0x0801d9dd
 800fd38:	0801d768 	.word	0x0801d768
 800fd3c:	0801d740 	.word	0x0801d740
 800fd40:	7ff00000 	.word	0x7ff00000
 800fd44:	7ca00000 	.word	0x7ca00000
 800fd48:	7fefffff 	.word	0x7fefffff
 800fd4c:	f014 0310 	ands.w	r3, r4, #16
 800fd50:	bf18      	it	ne
 800fd52:	236a      	movne	r3, #106	@ 0x6a
 800fd54:	4ea9      	ldr	r6, [pc, #676]	@ (800fffc <_strtod_l+0x854>)
 800fd56:	9308      	str	r3, [sp, #32]
 800fd58:	4650      	mov	r0, sl
 800fd5a:	4659      	mov	r1, fp
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	07e2      	lsls	r2, r4, #31
 800fd60:	d504      	bpl.n	800fd6c <_strtod_l+0x5c4>
 800fd62:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fd66:	f7f0 fc47 	bl	80005f8 <__aeabi_dmul>
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	1064      	asrs	r4, r4, #1
 800fd6e:	f106 0608 	add.w	r6, r6, #8
 800fd72:	d1f4      	bne.n	800fd5e <_strtod_l+0x5b6>
 800fd74:	b10b      	cbz	r3, 800fd7a <_strtod_l+0x5d2>
 800fd76:	4682      	mov	sl, r0
 800fd78:	468b      	mov	fp, r1
 800fd7a:	9b08      	ldr	r3, [sp, #32]
 800fd7c:	b1b3      	cbz	r3, 800fdac <_strtod_l+0x604>
 800fd7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fd82:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	4659      	mov	r1, fp
 800fd8a:	dd0f      	ble.n	800fdac <_strtod_l+0x604>
 800fd8c:	2b1f      	cmp	r3, #31
 800fd8e:	dd55      	ble.n	800fe3c <_strtod_l+0x694>
 800fd90:	2b34      	cmp	r3, #52	@ 0x34
 800fd92:	bfde      	ittt	le
 800fd94:	f04f 33ff 	movle.w	r3, #4294967295
 800fd98:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800fd9c:	4093      	lslle	r3, r2
 800fd9e:	f04f 0a00 	mov.w	sl, #0
 800fda2:	bfcc      	ite	gt
 800fda4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800fda8:	ea03 0b01 	andle.w	fp, r3, r1
 800fdac:	2200      	movs	r2, #0
 800fdae:	2300      	movs	r3, #0
 800fdb0:	4650      	mov	r0, sl
 800fdb2:	4659      	mov	r1, fp
 800fdb4:	f7f0 fe88 	bl	8000ac8 <__aeabi_dcmpeq>
 800fdb8:	2800      	cmp	r0, #0
 800fdba:	d1a6      	bne.n	800fd0a <_strtod_l+0x562>
 800fdbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdbe:	9300      	str	r3, [sp, #0]
 800fdc0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fdc2:	9805      	ldr	r0, [sp, #20]
 800fdc4:	462b      	mov	r3, r5
 800fdc6:	463a      	mov	r2, r7
 800fdc8:	f7ff f8bc 	bl	800ef44 <__s2b>
 800fdcc:	900a      	str	r0, [sp, #40]	@ 0x28
 800fdce:	2800      	cmp	r0, #0
 800fdd0:	f43f af05 	beq.w	800fbde <_strtod_l+0x436>
 800fdd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fdd6:	2a00      	cmp	r2, #0
 800fdd8:	eba9 0308 	sub.w	r3, r9, r8
 800fddc:	bfa8      	it	ge
 800fdde:	2300      	movge	r3, #0
 800fde0:	9312      	str	r3, [sp, #72]	@ 0x48
 800fde2:	2400      	movs	r4, #0
 800fde4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800fde8:	9316      	str	r3, [sp, #88]	@ 0x58
 800fdea:	46a0      	mov	r8, r4
 800fdec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdee:	9805      	ldr	r0, [sp, #20]
 800fdf0:	6859      	ldr	r1, [r3, #4]
 800fdf2:	f7fe ffff 	bl	800edf4 <_Balloc>
 800fdf6:	4681      	mov	r9, r0
 800fdf8:	2800      	cmp	r0, #0
 800fdfa:	f43f aef4 	beq.w	800fbe6 <_strtod_l+0x43e>
 800fdfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe00:	691a      	ldr	r2, [r3, #16]
 800fe02:	3202      	adds	r2, #2
 800fe04:	f103 010c 	add.w	r1, r3, #12
 800fe08:	0092      	lsls	r2, r2, #2
 800fe0a:	300c      	adds	r0, #12
 800fe0c:	f7fe f945 	bl	800e09a <memcpy>
 800fe10:	ec4b ab10 	vmov	d0, sl, fp
 800fe14:	9805      	ldr	r0, [sp, #20]
 800fe16:	aa1c      	add	r2, sp, #112	@ 0x70
 800fe18:	a91b      	add	r1, sp, #108	@ 0x6c
 800fe1a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800fe1e:	f7ff fbcd 	bl	800f5bc <__d2b>
 800fe22:	901a      	str	r0, [sp, #104]	@ 0x68
 800fe24:	2800      	cmp	r0, #0
 800fe26:	f43f aede 	beq.w	800fbe6 <_strtod_l+0x43e>
 800fe2a:	9805      	ldr	r0, [sp, #20]
 800fe2c:	2101      	movs	r1, #1
 800fe2e:	f7ff f91f 	bl	800f070 <__i2b>
 800fe32:	4680      	mov	r8, r0
 800fe34:	b948      	cbnz	r0, 800fe4a <_strtod_l+0x6a2>
 800fe36:	f04f 0800 	mov.w	r8, #0
 800fe3a:	e6d4      	b.n	800fbe6 <_strtod_l+0x43e>
 800fe3c:	f04f 32ff 	mov.w	r2, #4294967295
 800fe40:	fa02 f303 	lsl.w	r3, r2, r3
 800fe44:	ea03 0a0a 	and.w	sl, r3, sl
 800fe48:	e7b0      	b.n	800fdac <_strtod_l+0x604>
 800fe4a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800fe4c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fe4e:	2d00      	cmp	r5, #0
 800fe50:	bfab      	itete	ge
 800fe52:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800fe54:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800fe56:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800fe58:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800fe5a:	bfac      	ite	ge
 800fe5c:	18ef      	addge	r7, r5, r3
 800fe5e:	1b5e      	sublt	r6, r3, r5
 800fe60:	9b08      	ldr	r3, [sp, #32]
 800fe62:	1aed      	subs	r5, r5, r3
 800fe64:	4415      	add	r5, r2
 800fe66:	4b66      	ldr	r3, [pc, #408]	@ (8010000 <_strtod_l+0x858>)
 800fe68:	3d01      	subs	r5, #1
 800fe6a:	429d      	cmp	r5, r3
 800fe6c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fe70:	da50      	bge.n	800ff14 <_strtod_l+0x76c>
 800fe72:	1b5b      	subs	r3, r3, r5
 800fe74:	2b1f      	cmp	r3, #31
 800fe76:	eba2 0203 	sub.w	r2, r2, r3
 800fe7a:	f04f 0101 	mov.w	r1, #1
 800fe7e:	dc3d      	bgt.n	800fefc <_strtod_l+0x754>
 800fe80:	fa01 f303 	lsl.w	r3, r1, r3
 800fe84:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fe86:	2300      	movs	r3, #0
 800fe88:	9310      	str	r3, [sp, #64]	@ 0x40
 800fe8a:	18bd      	adds	r5, r7, r2
 800fe8c:	9b08      	ldr	r3, [sp, #32]
 800fe8e:	42af      	cmp	r7, r5
 800fe90:	4416      	add	r6, r2
 800fe92:	441e      	add	r6, r3
 800fe94:	463b      	mov	r3, r7
 800fe96:	bfa8      	it	ge
 800fe98:	462b      	movge	r3, r5
 800fe9a:	42b3      	cmp	r3, r6
 800fe9c:	bfa8      	it	ge
 800fe9e:	4633      	movge	r3, r6
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	bfc2      	ittt	gt
 800fea4:	1aed      	subgt	r5, r5, r3
 800fea6:	1af6      	subgt	r6, r6, r3
 800fea8:	1aff      	subgt	r7, r7, r3
 800feaa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800feac:	2b00      	cmp	r3, #0
 800feae:	dd16      	ble.n	800fede <_strtod_l+0x736>
 800feb0:	4641      	mov	r1, r8
 800feb2:	9805      	ldr	r0, [sp, #20]
 800feb4:	461a      	mov	r2, r3
 800feb6:	f7ff f99b 	bl	800f1f0 <__pow5mult>
 800feba:	4680      	mov	r8, r0
 800febc:	2800      	cmp	r0, #0
 800febe:	d0ba      	beq.n	800fe36 <_strtod_l+0x68e>
 800fec0:	4601      	mov	r1, r0
 800fec2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fec4:	9805      	ldr	r0, [sp, #20]
 800fec6:	f7ff f8e9 	bl	800f09c <__multiply>
 800feca:	900e      	str	r0, [sp, #56]	@ 0x38
 800fecc:	2800      	cmp	r0, #0
 800fece:	f43f ae8a 	beq.w	800fbe6 <_strtod_l+0x43e>
 800fed2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fed4:	9805      	ldr	r0, [sp, #20]
 800fed6:	f7fe ffcd 	bl	800ee74 <_Bfree>
 800feda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fedc:	931a      	str	r3, [sp, #104]	@ 0x68
 800fede:	2d00      	cmp	r5, #0
 800fee0:	dc1d      	bgt.n	800ff1e <_strtod_l+0x776>
 800fee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	dd23      	ble.n	800ff30 <_strtod_l+0x788>
 800fee8:	4649      	mov	r1, r9
 800feea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800feec:	9805      	ldr	r0, [sp, #20]
 800feee:	f7ff f97f 	bl	800f1f0 <__pow5mult>
 800fef2:	4681      	mov	r9, r0
 800fef4:	b9e0      	cbnz	r0, 800ff30 <_strtod_l+0x788>
 800fef6:	f04f 0900 	mov.w	r9, #0
 800fefa:	e674      	b.n	800fbe6 <_strtod_l+0x43e>
 800fefc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ff00:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ff04:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ff08:	35e2      	adds	r5, #226	@ 0xe2
 800ff0a:	fa01 f305 	lsl.w	r3, r1, r5
 800ff0e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ff10:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ff12:	e7ba      	b.n	800fe8a <_strtod_l+0x6e2>
 800ff14:	2300      	movs	r3, #0
 800ff16:	9310      	str	r3, [sp, #64]	@ 0x40
 800ff18:	2301      	movs	r3, #1
 800ff1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ff1c:	e7b5      	b.n	800fe8a <_strtod_l+0x6e2>
 800ff1e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ff20:	9805      	ldr	r0, [sp, #20]
 800ff22:	462a      	mov	r2, r5
 800ff24:	f7ff f9be 	bl	800f2a4 <__lshift>
 800ff28:	901a      	str	r0, [sp, #104]	@ 0x68
 800ff2a:	2800      	cmp	r0, #0
 800ff2c:	d1d9      	bne.n	800fee2 <_strtod_l+0x73a>
 800ff2e:	e65a      	b.n	800fbe6 <_strtod_l+0x43e>
 800ff30:	2e00      	cmp	r6, #0
 800ff32:	dd07      	ble.n	800ff44 <_strtod_l+0x79c>
 800ff34:	4649      	mov	r1, r9
 800ff36:	9805      	ldr	r0, [sp, #20]
 800ff38:	4632      	mov	r2, r6
 800ff3a:	f7ff f9b3 	bl	800f2a4 <__lshift>
 800ff3e:	4681      	mov	r9, r0
 800ff40:	2800      	cmp	r0, #0
 800ff42:	d0d8      	beq.n	800fef6 <_strtod_l+0x74e>
 800ff44:	2f00      	cmp	r7, #0
 800ff46:	dd08      	ble.n	800ff5a <_strtod_l+0x7b2>
 800ff48:	4641      	mov	r1, r8
 800ff4a:	9805      	ldr	r0, [sp, #20]
 800ff4c:	463a      	mov	r2, r7
 800ff4e:	f7ff f9a9 	bl	800f2a4 <__lshift>
 800ff52:	4680      	mov	r8, r0
 800ff54:	2800      	cmp	r0, #0
 800ff56:	f43f ae46 	beq.w	800fbe6 <_strtod_l+0x43e>
 800ff5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ff5c:	9805      	ldr	r0, [sp, #20]
 800ff5e:	464a      	mov	r2, r9
 800ff60:	f7ff fa28 	bl	800f3b4 <__mdiff>
 800ff64:	4604      	mov	r4, r0
 800ff66:	2800      	cmp	r0, #0
 800ff68:	f43f ae3d 	beq.w	800fbe6 <_strtod_l+0x43e>
 800ff6c:	68c3      	ldr	r3, [r0, #12]
 800ff6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ff70:	2300      	movs	r3, #0
 800ff72:	60c3      	str	r3, [r0, #12]
 800ff74:	4641      	mov	r1, r8
 800ff76:	f7ff fa01 	bl	800f37c <__mcmp>
 800ff7a:	2800      	cmp	r0, #0
 800ff7c:	da46      	bge.n	801000c <_strtod_l+0x864>
 800ff7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff80:	ea53 030a 	orrs.w	r3, r3, sl
 800ff84:	d16c      	bne.n	8010060 <_strtod_l+0x8b8>
 800ff86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d168      	bne.n	8010060 <_strtod_l+0x8b8>
 800ff8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ff92:	0d1b      	lsrs	r3, r3, #20
 800ff94:	051b      	lsls	r3, r3, #20
 800ff96:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ff9a:	d961      	bls.n	8010060 <_strtod_l+0x8b8>
 800ff9c:	6963      	ldr	r3, [r4, #20]
 800ff9e:	b913      	cbnz	r3, 800ffa6 <_strtod_l+0x7fe>
 800ffa0:	6923      	ldr	r3, [r4, #16]
 800ffa2:	2b01      	cmp	r3, #1
 800ffa4:	dd5c      	ble.n	8010060 <_strtod_l+0x8b8>
 800ffa6:	4621      	mov	r1, r4
 800ffa8:	2201      	movs	r2, #1
 800ffaa:	9805      	ldr	r0, [sp, #20]
 800ffac:	f7ff f97a 	bl	800f2a4 <__lshift>
 800ffb0:	4641      	mov	r1, r8
 800ffb2:	4604      	mov	r4, r0
 800ffb4:	f7ff f9e2 	bl	800f37c <__mcmp>
 800ffb8:	2800      	cmp	r0, #0
 800ffba:	dd51      	ble.n	8010060 <_strtod_l+0x8b8>
 800ffbc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ffc0:	9a08      	ldr	r2, [sp, #32]
 800ffc2:	0d1b      	lsrs	r3, r3, #20
 800ffc4:	051b      	lsls	r3, r3, #20
 800ffc6:	2a00      	cmp	r2, #0
 800ffc8:	d06b      	beq.n	80100a2 <_strtod_l+0x8fa>
 800ffca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ffce:	d868      	bhi.n	80100a2 <_strtod_l+0x8fa>
 800ffd0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ffd4:	f67f ae9d 	bls.w	800fd12 <_strtod_l+0x56a>
 800ffd8:	4b0a      	ldr	r3, [pc, #40]	@ (8010004 <_strtod_l+0x85c>)
 800ffda:	4650      	mov	r0, sl
 800ffdc:	4659      	mov	r1, fp
 800ffde:	2200      	movs	r2, #0
 800ffe0:	f7f0 fb0a 	bl	80005f8 <__aeabi_dmul>
 800ffe4:	4b08      	ldr	r3, [pc, #32]	@ (8010008 <_strtod_l+0x860>)
 800ffe6:	400b      	ands	r3, r1
 800ffe8:	4682      	mov	sl, r0
 800ffea:	468b      	mov	fp, r1
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	f47f ae05 	bne.w	800fbfc <_strtod_l+0x454>
 800fff2:	9a05      	ldr	r2, [sp, #20]
 800fff4:	2322      	movs	r3, #34	@ 0x22
 800fff6:	6013      	str	r3, [r2, #0]
 800fff8:	e600      	b.n	800fbfc <_strtod_l+0x454>
 800fffa:	bf00      	nop
 800fffc:	0801d860 	.word	0x0801d860
 8010000:	fffffc02 	.word	0xfffffc02
 8010004:	39500000 	.word	0x39500000
 8010008:	7ff00000 	.word	0x7ff00000
 801000c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010010:	d165      	bne.n	80100de <_strtod_l+0x936>
 8010012:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010014:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010018:	b35a      	cbz	r2, 8010072 <_strtod_l+0x8ca>
 801001a:	4a9f      	ldr	r2, [pc, #636]	@ (8010298 <_strtod_l+0xaf0>)
 801001c:	4293      	cmp	r3, r2
 801001e:	d12b      	bne.n	8010078 <_strtod_l+0x8d0>
 8010020:	9b08      	ldr	r3, [sp, #32]
 8010022:	4651      	mov	r1, sl
 8010024:	b303      	cbz	r3, 8010068 <_strtod_l+0x8c0>
 8010026:	4b9d      	ldr	r3, [pc, #628]	@ (801029c <_strtod_l+0xaf4>)
 8010028:	465a      	mov	r2, fp
 801002a:	4013      	ands	r3, r2
 801002c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010030:	f04f 32ff 	mov.w	r2, #4294967295
 8010034:	d81b      	bhi.n	801006e <_strtod_l+0x8c6>
 8010036:	0d1b      	lsrs	r3, r3, #20
 8010038:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801003c:	fa02 f303 	lsl.w	r3, r2, r3
 8010040:	4299      	cmp	r1, r3
 8010042:	d119      	bne.n	8010078 <_strtod_l+0x8d0>
 8010044:	4b96      	ldr	r3, [pc, #600]	@ (80102a0 <_strtod_l+0xaf8>)
 8010046:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010048:	429a      	cmp	r2, r3
 801004a:	d102      	bne.n	8010052 <_strtod_l+0x8aa>
 801004c:	3101      	adds	r1, #1
 801004e:	f43f adca 	beq.w	800fbe6 <_strtod_l+0x43e>
 8010052:	4b92      	ldr	r3, [pc, #584]	@ (801029c <_strtod_l+0xaf4>)
 8010054:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010056:	401a      	ands	r2, r3
 8010058:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801005c:	f04f 0a00 	mov.w	sl, #0
 8010060:	9b08      	ldr	r3, [sp, #32]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d1b8      	bne.n	800ffd8 <_strtod_l+0x830>
 8010066:	e5c9      	b.n	800fbfc <_strtod_l+0x454>
 8010068:	f04f 33ff 	mov.w	r3, #4294967295
 801006c:	e7e8      	b.n	8010040 <_strtod_l+0x898>
 801006e:	4613      	mov	r3, r2
 8010070:	e7e6      	b.n	8010040 <_strtod_l+0x898>
 8010072:	ea53 030a 	orrs.w	r3, r3, sl
 8010076:	d0a1      	beq.n	800ffbc <_strtod_l+0x814>
 8010078:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801007a:	b1db      	cbz	r3, 80100b4 <_strtod_l+0x90c>
 801007c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801007e:	4213      	tst	r3, r2
 8010080:	d0ee      	beq.n	8010060 <_strtod_l+0x8b8>
 8010082:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010084:	9a08      	ldr	r2, [sp, #32]
 8010086:	4650      	mov	r0, sl
 8010088:	4659      	mov	r1, fp
 801008a:	b1bb      	cbz	r3, 80100bc <_strtod_l+0x914>
 801008c:	f7ff fb6c 	bl	800f768 <sulp>
 8010090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010094:	ec53 2b10 	vmov	r2, r3, d0
 8010098:	f7f0 f8f8 	bl	800028c <__adddf3>
 801009c:	4682      	mov	sl, r0
 801009e:	468b      	mov	fp, r1
 80100a0:	e7de      	b.n	8010060 <_strtod_l+0x8b8>
 80100a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80100a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80100aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80100ae:	f04f 3aff 	mov.w	sl, #4294967295
 80100b2:	e7d5      	b.n	8010060 <_strtod_l+0x8b8>
 80100b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80100b6:	ea13 0f0a 	tst.w	r3, sl
 80100ba:	e7e1      	b.n	8010080 <_strtod_l+0x8d8>
 80100bc:	f7ff fb54 	bl	800f768 <sulp>
 80100c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80100c4:	ec53 2b10 	vmov	r2, r3, d0
 80100c8:	f7f0 f8de 	bl	8000288 <__aeabi_dsub>
 80100cc:	2200      	movs	r2, #0
 80100ce:	2300      	movs	r3, #0
 80100d0:	4682      	mov	sl, r0
 80100d2:	468b      	mov	fp, r1
 80100d4:	f7f0 fcf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80100d8:	2800      	cmp	r0, #0
 80100da:	d0c1      	beq.n	8010060 <_strtod_l+0x8b8>
 80100dc:	e619      	b.n	800fd12 <_strtod_l+0x56a>
 80100de:	4641      	mov	r1, r8
 80100e0:	4620      	mov	r0, r4
 80100e2:	f7ff fac3 	bl	800f66c <__ratio>
 80100e6:	ec57 6b10 	vmov	r6, r7, d0
 80100ea:	2200      	movs	r2, #0
 80100ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80100f0:	4630      	mov	r0, r6
 80100f2:	4639      	mov	r1, r7
 80100f4:	f7f0 fcfc 	bl	8000af0 <__aeabi_dcmple>
 80100f8:	2800      	cmp	r0, #0
 80100fa:	d06f      	beq.n	80101dc <_strtod_l+0xa34>
 80100fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d17a      	bne.n	80101f8 <_strtod_l+0xa50>
 8010102:	f1ba 0f00 	cmp.w	sl, #0
 8010106:	d158      	bne.n	80101ba <_strtod_l+0xa12>
 8010108:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801010a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801010e:	2b00      	cmp	r3, #0
 8010110:	d15a      	bne.n	80101c8 <_strtod_l+0xa20>
 8010112:	4b64      	ldr	r3, [pc, #400]	@ (80102a4 <_strtod_l+0xafc>)
 8010114:	2200      	movs	r2, #0
 8010116:	4630      	mov	r0, r6
 8010118:	4639      	mov	r1, r7
 801011a:	f7f0 fcdf 	bl	8000adc <__aeabi_dcmplt>
 801011e:	2800      	cmp	r0, #0
 8010120:	d159      	bne.n	80101d6 <_strtod_l+0xa2e>
 8010122:	4630      	mov	r0, r6
 8010124:	4639      	mov	r1, r7
 8010126:	4b60      	ldr	r3, [pc, #384]	@ (80102a8 <_strtod_l+0xb00>)
 8010128:	2200      	movs	r2, #0
 801012a:	f7f0 fa65 	bl	80005f8 <__aeabi_dmul>
 801012e:	4606      	mov	r6, r0
 8010130:	460f      	mov	r7, r1
 8010132:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010136:	9606      	str	r6, [sp, #24]
 8010138:	9307      	str	r3, [sp, #28]
 801013a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801013e:	4d57      	ldr	r5, [pc, #348]	@ (801029c <_strtod_l+0xaf4>)
 8010140:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010144:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010146:	401d      	ands	r5, r3
 8010148:	4b58      	ldr	r3, [pc, #352]	@ (80102ac <_strtod_l+0xb04>)
 801014a:	429d      	cmp	r5, r3
 801014c:	f040 80b2 	bne.w	80102b4 <_strtod_l+0xb0c>
 8010150:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010152:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010156:	ec4b ab10 	vmov	d0, sl, fp
 801015a:	f7ff f9bf 	bl	800f4dc <__ulp>
 801015e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010162:	ec51 0b10 	vmov	r0, r1, d0
 8010166:	f7f0 fa47 	bl	80005f8 <__aeabi_dmul>
 801016a:	4652      	mov	r2, sl
 801016c:	465b      	mov	r3, fp
 801016e:	f7f0 f88d 	bl	800028c <__adddf3>
 8010172:	460b      	mov	r3, r1
 8010174:	4949      	ldr	r1, [pc, #292]	@ (801029c <_strtod_l+0xaf4>)
 8010176:	4a4e      	ldr	r2, [pc, #312]	@ (80102b0 <_strtod_l+0xb08>)
 8010178:	4019      	ands	r1, r3
 801017a:	4291      	cmp	r1, r2
 801017c:	4682      	mov	sl, r0
 801017e:	d942      	bls.n	8010206 <_strtod_l+0xa5e>
 8010180:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010182:	4b47      	ldr	r3, [pc, #284]	@ (80102a0 <_strtod_l+0xaf8>)
 8010184:	429a      	cmp	r2, r3
 8010186:	d103      	bne.n	8010190 <_strtod_l+0x9e8>
 8010188:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801018a:	3301      	adds	r3, #1
 801018c:	f43f ad2b 	beq.w	800fbe6 <_strtod_l+0x43e>
 8010190:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80102a0 <_strtod_l+0xaf8>
 8010194:	f04f 3aff 	mov.w	sl, #4294967295
 8010198:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801019a:	9805      	ldr	r0, [sp, #20]
 801019c:	f7fe fe6a 	bl	800ee74 <_Bfree>
 80101a0:	9805      	ldr	r0, [sp, #20]
 80101a2:	4649      	mov	r1, r9
 80101a4:	f7fe fe66 	bl	800ee74 <_Bfree>
 80101a8:	9805      	ldr	r0, [sp, #20]
 80101aa:	4641      	mov	r1, r8
 80101ac:	f7fe fe62 	bl	800ee74 <_Bfree>
 80101b0:	9805      	ldr	r0, [sp, #20]
 80101b2:	4621      	mov	r1, r4
 80101b4:	f7fe fe5e 	bl	800ee74 <_Bfree>
 80101b8:	e618      	b.n	800fdec <_strtod_l+0x644>
 80101ba:	f1ba 0f01 	cmp.w	sl, #1
 80101be:	d103      	bne.n	80101c8 <_strtod_l+0xa20>
 80101c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	f43f ada5 	beq.w	800fd12 <_strtod_l+0x56a>
 80101c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010278 <_strtod_l+0xad0>
 80101cc:	4f35      	ldr	r7, [pc, #212]	@ (80102a4 <_strtod_l+0xafc>)
 80101ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80101d2:	2600      	movs	r6, #0
 80101d4:	e7b1      	b.n	801013a <_strtod_l+0x992>
 80101d6:	4f34      	ldr	r7, [pc, #208]	@ (80102a8 <_strtod_l+0xb00>)
 80101d8:	2600      	movs	r6, #0
 80101da:	e7aa      	b.n	8010132 <_strtod_l+0x98a>
 80101dc:	4b32      	ldr	r3, [pc, #200]	@ (80102a8 <_strtod_l+0xb00>)
 80101de:	4630      	mov	r0, r6
 80101e0:	4639      	mov	r1, r7
 80101e2:	2200      	movs	r2, #0
 80101e4:	f7f0 fa08 	bl	80005f8 <__aeabi_dmul>
 80101e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101ea:	4606      	mov	r6, r0
 80101ec:	460f      	mov	r7, r1
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d09f      	beq.n	8010132 <_strtod_l+0x98a>
 80101f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80101f6:	e7a0      	b.n	801013a <_strtod_l+0x992>
 80101f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010280 <_strtod_l+0xad8>
 80101fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010200:	ec57 6b17 	vmov	r6, r7, d7
 8010204:	e799      	b.n	801013a <_strtod_l+0x992>
 8010206:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801020a:	9b08      	ldr	r3, [sp, #32]
 801020c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010210:	2b00      	cmp	r3, #0
 8010212:	d1c1      	bne.n	8010198 <_strtod_l+0x9f0>
 8010214:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010218:	0d1b      	lsrs	r3, r3, #20
 801021a:	051b      	lsls	r3, r3, #20
 801021c:	429d      	cmp	r5, r3
 801021e:	d1bb      	bne.n	8010198 <_strtod_l+0x9f0>
 8010220:	4630      	mov	r0, r6
 8010222:	4639      	mov	r1, r7
 8010224:	f7f0 fd48 	bl	8000cb8 <__aeabi_d2lz>
 8010228:	f7f0 f9b8 	bl	800059c <__aeabi_l2d>
 801022c:	4602      	mov	r2, r0
 801022e:	460b      	mov	r3, r1
 8010230:	4630      	mov	r0, r6
 8010232:	4639      	mov	r1, r7
 8010234:	f7f0 f828 	bl	8000288 <__aeabi_dsub>
 8010238:	460b      	mov	r3, r1
 801023a:	4602      	mov	r2, r0
 801023c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010240:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010246:	ea46 060a 	orr.w	r6, r6, sl
 801024a:	431e      	orrs	r6, r3
 801024c:	d06f      	beq.n	801032e <_strtod_l+0xb86>
 801024e:	a30e      	add	r3, pc, #56	@ (adr r3, 8010288 <_strtod_l+0xae0>)
 8010250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010254:	f7f0 fc42 	bl	8000adc <__aeabi_dcmplt>
 8010258:	2800      	cmp	r0, #0
 801025a:	f47f accf 	bne.w	800fbfc <_strtod_l+0x454>
 801025e:	a30c      	add	r3, pc, #48	@ (adr r3, 8010290 <_strtod_l+0xae8>)
 8010260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010264:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010268:	f7f0 fc56 	bl	8000b18 <__aeabi_dcmpgt>
 801026c:	2800      	cmp	r0, #0
 801026e:	d093      	beq.n	8010198 <_strtod_l+0x9f0>
 8010270:	e4c4      	b.n	800fbfc <_strtod_l+0x454>
 8010272:	bf00      	nop
 8010274:	f3af 8000 	nop.w
 8010278:	00000000 	.word	0x00000000
 801027c:	bff00000 	.word	0xbff00000
 8010280:	00000000 	.word	0x00000000
 8010284:	3ff00000 	.word	0x3ff00000
 8010288:	94a03595 	.word	0x94a03595
 801028c:	3fdfffff 	.word	0x3fdfffff
 8010290:	35afe535 	.word	0x35afe535
 8010294:	3fe00000 	.word	0x3fe00000
 8010298:	000fffff 	.word	0x000fffff
 801029c:	7ff00000 	.word	0x7ff00000
 80102a0:	7fefffff 	.word	0x7fefffff
 80102a4:	3ff00000 	.word	0x3ff00000
 80102a8:	3fe00000 	.word	0x3fe00000
 80102ac:	7fe00000 	.word	0x7fe00000
 80102b0:	7c9fffff 	.word	0x7c9fffff
 80102b4:	9b08      	ldr	r3, [sp, #32]
 80102b6:	b323      	cbz	r3, 8010302 <_strtod_l+0xb5a>
 80102b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80102bc:	d821      	bhi.n	8010302 <_strtod_l+0xb5a>
 80102be:	a328      	add	r3, pc, #160	@ (adr r3, 8010360 <_strtod_l+0xbb8>)
 80102c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c4:	4630      	mov	r0, r6
 80102c6:	4639      	mov	r1, r7
 80102c8:	f7f0 fc12 	bl	8000af0 <__aeabi_dcmple>
 80102cc:	b1a0      	cbz	r0, 80102f8 <_strtod_l+0xb50>
 80102ce:	4639      	mov	r1, r7
 80102d0:	4630      	mov	r0, r6
 80102d2:	f7f0 fc69 	bl	8000ba8 <__aeabi_d2uiz>
 80102d6:	2801      	cmp	r0, #1
 80102d8:	bf38      	it	cc
 80102da:	2001      	movcc	r0, #1
 80102dc:	f7f0 f912 	bl	8000504 <__aeabi_ui2d>
 80102e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102e2:	4606      	mov	r6, r0
 80102e4:	460f      	mov	r7, r1
 80102e6:	b9fb      	cbnz	r3, 8010328 <_strtod_l+0xb80>
 80102e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80102ec:	9014      	str	r0, [sp, #80]	@ 0x50
 80102ee:	9315      	str	r3, [sp, #84]	@ 0x54
 80102f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80102f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80102f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80102fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80102fe:	1b5b      	subs	r3, r3, r5
 8010300:	9311      	str	r3, [sp, #68]	@ 0x44
 8010302:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010306:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801030a:	f7ff f8e7 	bl	800f4dc <__ulp>
 801030e:	4650      	mov	r0, sl
 8010310:	ec53 2b10 	vmov	r2, r3, d0
 8010314:	4659      	mov	r1, fp
 8010316:	f7f0 f96f 	bl	80005f8 <__aeabi_dmul>
 801031a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801031e:	f7ef ffb5 	bl	800028c <__adddf3>
 8010322:	4682      	mov	sl, r0
 8010324:	468b      	mov	fp, r1
 8010326:	e770      	b.n	801020a <_strtod_l+0xa62>
 8010328:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801032c:	e7e0      	b.n	80102f0 <_strtod_l+0xb48>
 801032e:	a30e      	add	r3, pc, #56	@ (adr r3, 8010368 <_strtod_l+0xbc0>)
 8010330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010334:	f7f0 fbd2 	bl	8000adc <__aeabi_dcmplt>
 8010338:	e798      	b.n	801026c <_strtod_l+0xac4>
 801033a:	2300      	movs	r3, #0
 801033c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801033e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010340:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010342:	6013      	str	r3, [r2, #0]
 8010344:	f7ff ba6d 	b.w	800f822 <_strtod_l+0x7a>
 8010348:	2a65      	cmp	r2, #101	@ 0x65
 801034a:	f43f ab66 	beq.w	800fa1a <_strtod_l+0x272>
 801034e:	2a45      	cmp	r2, #69	@ 0x45
 8010350:	f43f ab63 	beq.w	800fa1a <_strtod_l+0x272>
 8010354:	2301      	movs	r3, #1
 8010356:	f7ff bb9e 	b.w	800fa96 <_strtod_l+0x2ee>
 801035a:	bf00      	nop
 801035c:	f3af 8000 	nop.w
 8010360:	ffc00000 	.word	0xffc00000
 8010364:	41dfffff 	.word	0x41dfffff
 8010368:	94a03595 	.word	0x94a03595
 801036c:	3fcfffff 	.word	0x3fcfffff

08010370 <_strtod_r>:
 8010370:	4b01      	ldr	r3, [pc, #4]	@ (8010378 <_strtod_r+0x8>)
 8010372:	f7ff ba19 	b.w	800f7a8 <_strtod_l>
 8010376:	bf00      	nop
 8010378:	20000900 	.word	0x20000900

0801037c <_strtol_l.constprop.0>:
 801037c:	2b24      	cmp	r3, #36	@ 0x24
 801037e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010382:	4686      	mov	lr, r0
 8010384:	4690      	mov	r8, r2
 8010386:	d801      	bhi.n	801038c <_strtol_l.constprop.0+0x10>
 8010388:	2b01      	cmp	r3, #1
 801038a:	d106      	bne.n	801039a <_strtol_l.constprop.0+0x1e>
 801038c:	f7fd fe58 	bl	800e040 <__errno>
 8010390:	2316      	movs	r3, #22
 8010392:	6003      	str	r3, [r0, #0]
 8010394:	2000      	movs	r0, #0
 8010396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801039a:	4834      	ldr	r0, [pc, #208]	@ (801046c <_strtol_l.constprop.0+0xf0>)
 801039c:	460d      	mov	r5, r1
 801039e:	462a      	mov	r2, r5
 80103a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80103a4:	5d06      	ldrb	r6, [r0, r4]
 80103a6:	f016 0608 	ands.w	r6, r6, #8
 80103aa:	d1f8      	bne.n	801039e <_strtol_l.constprop.0+0x22>
 80103ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80103ae:	d12d      	bne.n	801040c <_strtol_l.constprop.0+0x90>
 80103b0:	782c      	ldrb	r4, [r5, #0]
 80103b2:	2601      	movs	r6, #1
 80103b4:	1c95      	adds	r5, r2, #2
 80103b6:	f033 0210 	bics.w	r2, r3, #16
 80103ba:	d109      	bne.n	80103d0 <_strtol_l.constprop.0+0x54>
 80103bc:	2c30      	cmp	r4, #48	@ 0x30
 80103be:	d12a      	bne.n	8010416 <_strtol_l.constprop.0+0x9a>
 80103c0:	782a      	ldrb	r2, [r5, #0]
 80103c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80103c6:	2a58      	cmp	r2, #88	@ 0x58
 80103c8:	d125      	bne.n	8010416 <_strtol_l.constprop.0+0x9a>
 80103ca:	786c      	ldrb	r4, [r5, #1]
 80103cc:	2310      	movs	r3, #16
 80103ce:	3502      	adds	r5, #2
 80103d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80103d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80103d8:	2200      	movs	r2, #0
 80103da:	fbbc f9f3 	udiv	r9, ip, r3
 80103de:	4610      	mov	r0, r2
 80103e0:	fb03 ca19 	mls	sl, r3, r9, ip
 80103e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80103e8:	2f09      	cmp	r7, #9
 80103ea:	d81b      	bhi.n	8010424 <_strtol_l.constprop.0+0xa8>
 80103ec:	463c      	mov	r4, r7
 80103ee:	42a3      	cmp	r3, r4
 80103f0:	dd27      	ble.n	8010442 <_strtol_l.constprop.0+0xc6>
 80103f2:	1c57      	adds	r7, r2, #1
 80103f4:	d007      	beq.n	8010406 <_strtol_l.constprop.0+0x8a>
 80103f6:	4581      	cmp	r9, r0
 80103f8:	d320      	bcc.n	801043c <_strtol_l.constprop.0+0xc0>
 80103fa:	d101      	bne.n	8010400 <_strtol_l.constprop.0+0x84>
 80103fc:	45a2      	cmp	sl, r4
 80103fe:	db1d      	blt.n	801043c <_strtol_l.constprop.0+0xc0>
 8010400:	fb00 4003 	mla	r0, r0, r3, r4
 8010404:	2201      	movs	r2, #1
 8010406:	f815 4b01 	ldrb.w	r4, [r5], #1
 801040a:	e7eb      	b.n	80103e4 <_strtol_l.constprop.0+0x68>
 801040c:	2c2b      	cmp	r4, #43	@ 0x2b
 801040e:	bf04      	itt	eq
 8010410:	782c      	ldrbeq	r4, [r5, #0]
 8010412:	1c95      	addeq	r5, r2, #2
 8010414:	e7cf      	b.n	80103b6 <_strtol_l.constprop.0+0x3a>
 8010416:	2b00      	cmp	r3, #0
 8010418:	d1da      	bne.n	80103d0 <_strtol_l.constprop.0+0x54>
 801041a:	2c30      	cmp	r4, #48	@ 0x30
 801041c:	bf0c      	ite	eq
 801041e:	2308      	moveq	r3, #8
 8010420:	230a      	movne	r3, #10
 8010422:	e7d5      	b.n	80103d0 <_strtol_l.constprop.0+0x54>
 8010424:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010428:	2f19      	cmp	r7, #25
 801042a:	d801      	bhi.n	8010430 <_strtol_l.constprop.0+0xb4>
 801042c:	3c37      	subs	r4, #55	@ 0x37
 801042e:	e7de      	b.n	80103ee <_strtol_l.constprop.0+0x72>
 8010430:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010434:	2f19      	cmp	r7, #25
 8010436:	d804      	bhi.n	8010442 <_strtol_l.constprop.0+0xc6>
 8010438:	3c57      	subs	r4, #87	@ 0x57
 801043a:	e7d8      	b.n	80103ee <_strtol_l.constprop.0+0x72>
 801043c:	f04f 32ff 	mov.w	r2, #4294967295
 8010440:	e7e1      	b.n	8010406 <_strtol_l.constprop.0+0x8a>
 8010442:	1c53      	adds	r3, r2, #1
 8010444:	d108      	bne.n	8010458 <_strtol_l.constprop.0+0xdc>
 8010446:	2322      	movs	r3, #34	@ 0x22
 8010448:	f8ce 3000 	str.w	r3, [lr]
 801044c:	4660      	mov	r0, ip
 801044e:	f1b8 0f00 	cmp.w	r8, #0
 8010452:	d0a0      	beq.n	8010396 <_strtol_l.constprop.0+0x1a>
 8010454:	1e69      	subs	r1, r5, #1
 8010456:	e006      	b.n	8010466 <_strtol_l.constprop.0+0xea>
 8010458:	b106      	cbz	r6, 801045c <_strtol_l.constprop.0+0xe0>
 801045a:	4240      	negs	r0, r0
 801045c:	f1b8 0f00 	cmp.w	r8, #0
 8010460:	d099      	beq.n	8010396 <_strtol_l.constprop.0+0x1a>
 8010462:	2a00      	cmp	r2, #0
 8010464:	d1f6      	bne.n	8010454 <_strtol_l.constprop.0+0xd8>
 8010466:	f8c8 1000 	str.w	r1, [r8]
 801046a:	e794      	b.n	8010396 <_strtol_l.constprop.0+0x1a>
 801046c:	0801d889 	.word	0x0801d889

08010470 <_strtol_r>:
 8010470:	f7ff bf84 	b.w	801037c <_strtol_l.constprop.0>

08010474 <__ssputs_r>:
 8010474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010478:	688e      	ldr	r6, [r1, #8]
 801047a:	461f      	mov	r7, r3
 801047c:	42be      	cmp	r6, r7
 801047e:	680b      	ldr	r3, [r1, #0]
 8010480:	4682      	mov	sl, r0
 8010482:	460c      	mov	r4, r1
 8010484:	4690      	mov	r8, r2
 8010486:	d82d      	bhi.n	80104e4 <__ssputs_r+0x70>
 8010488:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801048c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010490:	d026      	beq.n	80104e0 <__ssputs_r+0x6c>
 8010492:	6965      	ldr	r5, [r4, #20]
 8010494:	6909      	ldr	r1, [r1, #16]
 8010496:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801049a:	eba3 0901 	sub.w	r9, r3, r1
 801049e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80104a2:	1c7b      	adds	r3, r7, #1
 80104a4:	444b      	add	r3, r9
 80104a6:	106d      	asrs	r5, r5, #1
 80104a8:	429d      	cmp	r5, r3
 80104aa:	bf38      	it	cc
 80104ac:	461d      	movcc	r5, r3
 80104ae:	0553      	lsls	r3, r2, #21
 80104b0:	d527      	bpl.n	8010502 <__ssputs_r+0x8e>
 80104b2:	4629      	mov	r1, r5
 80104b4:	f7fc fbde 	bl	800cc74 <_malloc_r>
 80104b8:	4606      	mov	r6, r0
 80104ba:	b360      	cbz	r0, 8010516 <__ssputs_r+0xa2>
 80104bc:	6921      	ldr	r1, [r4, #16]
 80104be:	464a      	mov	r2, r9
 80104c0:	f7fd fdeb 	bl	800e09a <memcpy>
 80104c4:	89a3      	ldrh	r3, [r4, #12]
 80104c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80104ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104ce:	81a3      	strh	r3, [r4, #12]
 80104d0:	6126      	str	r6, [r4, #16]
 80104d2:	6165      	str	r5, [r4, #20]
 80104d4:	444e      	add	r6, r9
 80104d6:	eba5 0509 	sub.w	r5, r5, r9
 80104da:	6026      	str	r6, [r4, #0]
 80104dc:	60a5      	str	r5, [r4, #8]
 80104de:	463e      	mov	r6, r7
 80104e0:	42be      	cmp	r6, r7
 80104e2:	d900      	bls.n	80104e6 <__ssputs_r+0x72>
 80104e4:	463e      	mov	r6, r7
 80104e6:	6820      	ldr	r0, [r4, #0]
 80104e8:	4632      	mov	r2, r6
 80104ea:	4641      	mov	r1, r8
 80104ec:	f000 fb6a 	bl	8010bc4 <memmove>
 80104f0:	68a3      	ldr	r3, [r4, #8]
 80104f2:	1b9b      	subs	r3, r3, r6
 80104f4:	60a3      	str	r3, [r4, #8]
 80104f6:	6823      	ldr	r3, [r4, #0]
 80104f8:	4433      	add	r3, r6
 80104fa:	6023      	str	r3, [r4, #0]
 80104fc:	2000      	movs	r0, #0
 80104fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010502:	462a      	mov	r2, r5
 8010504:	f7fc fc42 	bl	800cd8c <_realloc_r>
 8010508:	4606      	mov	r6, r0
 801050a:	2800      	cmp	r0, #0
 801050c:	d1e0      	bne.n	80104d0 <__ssputs_r+0x5c>
 801050e:	6921      	ldr	r1, [r4, #16]
 8010510:	4650      	mov	r0, sl
 8010512:	f7fe fc25 	bl	800ed60 <_free_r>
 8010516:	230c      	movs	r3, #12
 8010518:	f8ca 3000 	str.w	r3, [sl]
 801051c:	89a3      	ldrh	r3, [r4, #12]
 801051e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010522:	81a3      	strh	r3, [r4, #12]
 8010524:	f04f 30ff 	mov.w	r0, #4294967295
 8010528:	e7e9      	b.n	80104fe <__ssputs_r+0x8a>
	...

0801052c <_svfiprintf_r>:
 801052c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010530:	4698      	mov	r8, r3
 8010532:	898b      	ldrh	r3, [r1, #12]
 8010534:	061b      	lsls	r3, r3, #24
 8010536:	b09d      	sub	sp, #116	@ 0x74
 8010538:	4607      	mov	r7, r0
 801053a:	460d      	mov	r5, r1
 801053c:	4614      	mov	r4, r2
 801053e:	d510      	bpl.n	8010562 <_svfiprintf_r+0x36>
 8010540:	690b      	ldr	r3, [r1, #16]
 8010542:	b973      	cbnz	r3, 8010562 <_svfiprintf_r+0x36>
 8010544:	2140      	movs	r1, #64	@ 0x40
 8010546:	f7fc fb95 	bl	800cc74 <_malloc_r>
 801054a:	6028      	str	r0, [r5, #0]
 801054c:	6128      	str	r0, [r5, #16]
 801054e:	b930      	cbnz	r0, 801055e <_svfiprintf_r+0x32>
 8010550:	230c      	movs	r3, #12
 8010552:	603b      	str	r3, [r7, #0]
 8010554:	f04f 30ff 	mov.w	r0, #4294967295
 8010558:	b01d      	add	sp, #116	@ 0x74
 801055a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801055e:	2340      	movs	r3, #64	@ 0x40
 8010560:	616b      	str	r3, [r5, #20]
 8010562:	2300      	movs	r3, #0
 8010564:	9309      	str	r3, [sp, #36]	@ 0x24
 8010566:	2320      	movs	r3, #32
 8010568:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801056c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010570:	2330      	movs	r3, #48	@ 0x30
 8010572:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010710 <_svfiprintf_r+0x1e4>
 8010576:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801057a:	f04f 0901 	mov.w	r9, #1
 801057e:	4623      	mov	r3, r4
 8010580:	469a      	mov	sl, r3
 8010582:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010586:	b10a      	cbz	r2, 801058c <_svfiprintf_r+0x60>
 8010588:	2a25      	cmp	r2, #37	@ 0x25
 801058a:	d1f9      	bne.n	8010580 <_svfiprintf_r+0x54>
 801058c:	ebba 0b04 	subs.w	fp, sl, r4
 8010590:	d00b      	beq.n	80105aa <_svfiprintf_r+0x7e>
 8010592:	465b      	mov	r3, fp
 8010594:	4622      	mov	r2, r4
 8010596:	4629      	mov	r1, r5
 8010598:	4638      	mov	r0, r7
 801059a:	f7ff ff6b 	bl	8010474 <__ssputs_r>
 801059e:	3001      	adds	r0, #1
 80105a0:	f000 80a7 	beq.w	80106f2 <_svfiprintf_r+0x1c6>
 80105a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105a6:	445a      	add	r2, fp
 80105a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80105aa:	f89a 3000 	ldrb.w	r3, [sl]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	f000 809f 	beq.w	80106f2 <_svfiprintf_r+0x1c6>
 80105b4:	2300      	movs	r3, #0
 80105b6:	f04f 32ff 	mov.w	r2, #4294967295
 80105ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105be:	f10a 0a01 	add.w	sl, sl, #1
 80105c2:	9304      	str	r3, [sp, #16]
 80105c4:	9307      	str	r3, [sp, #28]
 80105c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80105ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80105cc:	4654      	mov	r4, sl
 80105ce:	2205      	movs	r2, #5
 80105d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105d4:	484e      	ldr	r0, [pc, #312]	@ (8010710 <_svfiprintf_r+0x1e4>)
 80105d6:	f7ef fdfb 	bl	80001d0 <memchr>
 80105da:	9a04      	ldr	r2, [sp, #16]
 80105dc:	b9d8      	cbnz	r0, 8010616 <_svfiprintf_r+0xea>
 80105de:	06d0      	lsls	r0, r2, #27
 80105e0:	bf44      	itt	mi
 80105e2:	2320      	movmi	r3, #32
 80105e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105e8:	0711      	lsls	r1, r2, #28
 80105ea:	bf44      	itt	mi
 80105ec:	232b      	movmi	r3, #43	@ 0x2b
 80105ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105f2:	f89a 3000 	ldrb.w	r3, [sl]
 80105f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80105f8:	d015      	beq.n	8010626 <_svfiprintf_r+0xfa>
 80105fa:	9a07      	ldr	r2, [sp, #28]
 80105fc:	4654      	mov	r4, sl
 80105fe:	2000      	movs	r0, #0
 8010600:	f04f 0c0a 	mov.w	ip, #10
 8010604:	4621      	mov	r1, r4
 8010606:	f811 3b01 	ldrb.w	r3, [r1], #1
 801060a:	3b30      	subs	r3, #48	@ 0x30
 801060c:	2b09      	cmp	r3, #9
 801060e:	d94b      	bls.n	80106a8 <_svfiprintf_r+0x17c>
 8010610:	b1b0      	cbz	r0, 8010640 <_svfiprintf_r+0x114>
 8010612:	9207      	str	r2, [sp, #28]
 8010614:	e014      	b.n	8010640 <_svfiprintf_r+0x114>
 8010616:	eba0 0308 	sub.w	r3, r0, r8
 801061a:	fa09 f303 	lsl.w	r3, r9, r3
 801061e:	4313      	orrs	r3, r2
 8010620:	9304      	str	r3, [sp, #16]
 8010622:	46a2      	mov	sl, r4
 8010624:	e7d2      	b.n	80105cc <_svfiprintf_r+0xa0>
 8010626:	9b03      	ldr	r3, [sp, #12]
 8010628:	1d19      	adds	r1, r3, #4
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	9103      	str	r1, [sp, #12]
 801062e:	2b00      	cmp	r3, #0
 8010630:	bfbb      	ittet	lt
 8010632:	425b      	neglt	r3, r3
 8010634:	f042 0202 	orrlt.w	r2, r2, #2
 8010638:	9307      	strge	r3, [sp, #28]
 801063a:	9307      	strlt	r3, [sp, #28]
 801063c:	bfb8      	it	lt
 801063e:	9204      	strlt	r2, [sp, #16]
 8010640:	7823      	ldrb	r3, [r4, #0]
 8010642:	2b2e      	cmp	r3, #46	@ 0x2e
 8010644:	d10a      	bne.n	801065c <_svfiprintf_r+0x130>
 8010646:	7863      	ldrb	r3, [r4, #1]
 8010648:	2b2a      	cmp	r3, #42	@ 0x2a
 801064a:	d132      	bne.n	80106b2 <_svfiprintf_r+0x186>
 801064c:	9b03      	ldr	r3, [sp, #12]
 801064e:	1d1a      	adds	r2, r3, #4
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	9203      	str	r2, [sp, #12]
 8010654:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010658:	3402      	adds	r4, #2
 801065a:	9305      	str	r3, [sp, #20]
 801065c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010720 <_svfiprintf_r+0x1f4>
 8010660:	7821      	ldrb	r1, [r4, #0]
 8010662:	2203      	movs	r2, #3
 8010664:	4650      	mov	r0, sl
 8010666:	f7ef fdb3 	bl	80001d0 <memchr>
 801066a:	b138      	cbz	r0, 801067c <_svfiprintf_r+0x150>
 801066c:	9b04      	ldr	r3, [sp, #16]
 801066e:	eba0 000a 	sub.w	r0, r0, sl
 8010672:	2240      	movs	r2, #64	@ 0x40
 8010674:	4082      	lsls	r2, r0
 8010676:	4313      	orrs	r3, r2
 8010678:	3401      	adds	r4, #1
 801067a:	9304      	str	r3, [sp, #16]
 801067c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010680:	4824      	ldr	r0, [pc, #144]	@ (8010714 <_svfiprintf_r+0x1e8>)
 8010682:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010686:	2206      	movs	r2, #6
 8010688:	f7ef fda2 	bl	80001d0 <memchr>
 801068c:	2800      	cmp	r0, #0
 801068e:	d036      	beq.n	80106fe <_svfiprintf_r+0x1d2>
 8010690:	4b21      	ldr	r3, [pc, #132]	@ (8010718 <_svfiprintf_r+0x1ec>)
 8010692:	bb1b      	cbnz	r3, 80106dc <_svfiprintf_r+0x1b0>
 8010694:	9b03      	ldr	r3, [sp, #12]
 8010696:	3307      	adds	r3, #7
 8010698:	f023 0307 	bic.w	r3, r3, #7
 801069c:	3308      	adds	r3, #8
 801069e:	9303      	str	r3, [sp, #12]
 80106a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106a2:	4433      	add	r3, r6
 80106a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80106a6:	e76a      	b.n	801057e <_svfiprintf_r+0x52>
 80106a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80106ac:	460c      	mov	r4, r1
 80106ae:	2001      	movs	r0, #1
 80106b0:	e7a8      	b.n	8010604 <_svfiprintf_r+0xd8>
 80106b2:	2300      	movs	r3, #0
 80106b4:	3401      	adds	r4, #1
 80106b6:	9305      	str	r3, [sp, #20]
 80106b8:	4619      	mov	r1, r3
 80106ba:	f04f 0c0a 	mov.w	ip, #10
 80106be:	4620      	mov	r0, r4
 80106c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106c4:	3a30      	subs	r2, #48	@ 0x30
 80106c6:	2a09      	cmp	r2, #9
 80106c8:	d903      	bls.n	80106d2 <_svfiprintf_r+0x1a6>
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d0c6      	beq.n	801065c <_svfiprintf_r+0x130>
 80106ce:	9105      	str	r1, [sp, #20]
 80106d0:	e7c4      	b.n	801065c <_svfiprintf_r+0x130>
 80106d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80106d6:	4604      	mov	r4, r0
 80106d8:	2301      	movs	r3, #1
 80106da:	e7f0      	b.n	80106be <_svfiprintf_r+0x192>
 80106dc:	ab03      	add	r3, sp, #12
 80106de:	9300      	str	r3, [sp, #0]
 80106e0:	462a      	mov	r2, r5
 80106e2:	4b0e      	ldr	r3, [pc, #56]	@ (801071c <_svfiprintf_r+0x1f0>)
 80106e4:	a904      	add	r1, sp, #16
 80106e6:	4638      	mov	r0, r7
 80106e8:	f7fc fc1e 	bl	800cf28 <_printf_float>
 80106ec:	1c42      	adds	r2, r0, #1
 80106ee:	4606      	mov	r6, r0
 80106f0:	d1d6      	bne.n	80106a0 <_svfiprintf_r+0x174>
 80106f2:	89ab      	ldrh	r3, [r5, #12]
 80106f4:	065b      	lsls	r3, r3, #25
 80106f6:	f53f af2d 	bmi.w	8010554 <_svfiprintf_r+0x28>
 80106fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80106fc:	e72c      	b.n	8010558 <_svfiprintf_r+0x2c>
 80106fe:	ab03      	add	r3, sp, #12
 8010700:	9300      	str	r3, [sp, #0]
 8010702:	462a      	mov	r2, r5
 8010704:	4b05      	ldr	r3, [pc, #20]	@ (801071c <_svfiprintf_r+0x1f0>)
 8010706:	a904      	add	r1, sp, #16
 8010708:	4638      	mov	r0, r7
 801070a:	f7fc fea5 	bl	800d458 <_printf_i>
 801070e:	e7ed      	b.n	80106ec <_svfiprintf_r+0x1c0>
 8010710:	0801d989 	.word	0x0801d989
 8010714:	0801d993 	.word	0x0801d993
 8010718:	0800cf29 	.word	0x0800cf29
 801071c:	08010475 	.word	0x08010475
 8010720:	0801d98f 	.word	0x0801d98f

08010724 <__sfputc_r>:
 8010724:	6893      	ldr	r3, [r2, #8]
 8010726:	3b01      	subs	r3, #1
 8010728:	2b00      	cmp	r3, #0
 801072a:	b410      	push	{r4}
 801072c:	6093      	str	r3, [r2, #8]
 801072e:	da08      	bge.n	8010742 <__sfputc_r+0x1e>
 8010730:	6994      	ldr	r4, [r2, #24]
 8010732:	42a3      	cmp	r3, r4
 8010734:	db01      	blt.n	801073a <__sfputc_r+0x16>
 8010736:	290a      	cmp	r1, #10
 8010738:	d103      	bne.n	8010742 <__sfputc_r+0x1e>
 801073a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801073e:	f7fd bb88 	b.w	800de52 <__swbuf_r>
 8010742:	6813      	ldr	r3, [r2, #0]
 8010744:	1c58      	adds	r0, r3, #1
 8010746:	6010      	str	r0, [r2, #0]
 8010748:	7019      	strb	r1, [r3, #0]
 801074a:	4608      	mov	r0, r1
 801074c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010750:	4770      	bx	lr

08010752 <__sfputs_r>:
 8010752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010754:	4606      	mov	r6, r0
 8010756:	460f      	mov	r7, r1
 8010758:	4614      	mov	r4, r2
 801075a:	18d5      	adds	r5, r2, r3
 801075c:	42ac      	cmp	r4, r5
 801075e:	d101      	bne.n	8010764 <__sfputs_r+0x12>
 8010760:	2000      	movs	r0, #0
 8010762:	e007      	b.n	8010774 <__sfputs_r+0x22>
 8010764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010768:	463a      	mov	r2, r7
 801076a:	4630      	mov	r0, r6
 801076c:	f7ff ffda 	bl	8010724 <__sfputc_r>
 8010770:	1c43      	adds	r3, r0, #1
 8010772:	d1f3      	bne.n	801075c <__sfputs_r+0xa>
 8010774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010778 <_vfiprintf_r>:
 8010778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801077c:	460d      	mov	r5, r1
 801077e:	b09d      	sub	sp, #116	@ 0x74
 8010780:	4614      	mov	r4, r2
 8010782:	4698      	mov	r8, r3
 8010784:	4606      	mov	r6, r0
 8010786:	b118      	cbz	r0, 8010790 <_vfiprintf_r+0x18>
 8010788:	6a03      	ldr	r3, [r0, #32]
 801078a:	b90b      	cbnz	r3, 8010790 <_vfiprintf_r+0x18>
 801078c:	f7fd fa24 	bl	800dbd8 <__sinit>
 8010790:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010792:	07d9      	lsls	r1, r3, #31
 8010794:	d405      	bmi.n	80107a2 <_vfiprintf_r+0x2a>
 8010796:	89ab      	ldrh	r3, [r5, #12]
 8010798:	059a      	lsls	r2, r3, #22
 801079a:	d402      	bmi.n	80107a2 <_vfiprintf_r+0x2a>
 801079c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801079e:	f7fd fc7a 	bl	800e096 <__retarget_lock_acquire_recursive>
 80107a2:	89ab      	ldrh	r3, [r5, #12]
 80107a4:	071b      	lsls	r3, r3, #28
 80107a6:	d501      	bpl.n	80107ac <_vfiprintf_r+0x34>
 80107a8:	692b      	ldr	r3, [r5, #16]
 80107aa:	b99b      	cbnz	r3, 80107d4 <_vfiprintf_r+0x5c>
 80107ac:	4629      	mov	r1, r5
 80107ae:	4630      	mov	r0, r6
 80107b0:	f7fd fb8e 	bl	800ded0 <__swsetup_r>
 80107b4:	b170      	cbz	r0, 80107d4 <_vfiprintf_r+0x5c>
 80107b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80107b8:	07dc      	lsls	r4, r3, #31
 80107ba:	d504      	bpl.n	80107c6 <_vfiprintf_r+0x4e>
 80107bc:	f04f 30ff 	mov.w	r0, #4294967295
 80107c0:	b01d      	add	sp, #116	@ 0x74
 80107c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107c6:	89ab      	ldrh	r3, [r5, #12]
 80107c8:	0598      	lsls	r0, r3, #22
 80107ca:	d4f7      	bmi.n	80107bc <_vfiprintf_r+0x44>
 80107cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80107ce:	f7fd fc63 	bl	800e098 <__retarget_lock_release_recursive>
 80107d2:	e7f3      	b.n	80107bc <_vfiprintf_r+0x44>
 80107d4:	2300      	movs	r3, #0
 80107d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80107d8:	2320      	movs	r3, #32
 80107da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80107de:	f8cd 800c 	str.w	r8, [sp, #12]
 80107e2:	2330      	movs	r3, #48	@ 0x30
 80107e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010994 <_vfiprintf_r+0x21c>
 80107e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80107ec:	f04f 0901 	mov.w	r9, #1
 80107f0:	4623      	mov	r3, r4
 80107f2:	469a      	mov	sl, r3
 80107f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107f8:	b10a      	cbz	r2, 80107fe <_vfiprintf_r+0x86>
 80107fa:	2a25      	cmp	r2, #37	@ 0x25
 80107fc:	d1f9      	bne.n	80107f2 <_vfiprintf_r+0x7a>
 80107fe:	ebba 0b04 	subs.w	fp, sl, r4
 8010802:	d00b      	beq.n	801081c <_vfiprintf_r+0xa4>
 8010804:	465b      	mov	r3, fp
 8010806:	4622      	mov	r2, r4
 8010808:	4629      	mov	r1, r5
 801080a:	4630      	mov	r0, r6
 801080c:	f7ff ffa1 	bl	8010752 <__sfputs_r>
 8010810:	3001      	adds	r0, #1
 8010812:	f000 80a7 	beq.w	8010964 <_vfiprintf_r+0x1ec>
 8010816:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010818:	445a      	add	r2, fp
 801081a:	9209      	str	r2, [sp, #36]	@ 0x24
 801081c:	f89a 3000 	ldrb.w	r3, [sl]
 8010820:	2b00      	cmp	r3, #0
 8010822:	f000 809f 	beq.w	8010964 <_vfiprintf_r+0x1ec>
 8010826:	2300      	movs	r3, #0
 8010828:	f04f 32ff 	mov.w	r2, #4294967295
 801082c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010830:	f10a 0a01 	add.w	sl, sl, #1
 8010834:	9304      	str	r3, [sp, #16]
 8010836:	9307      	str	r3, [sp, #28]
 8010838:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801083c:	931a      	str	r3, [sp, #104]	@ 0x68
 801083e:	4654      	mov	r4, sl
 8010840:	2205      	movs	r2, #5
 8010842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010846:	4853      	ldr	r0, [pc, #332]	@ (8010994 <_vfiprintf_r+0x21c>)
 8010848:	f7ef fcc2 	bl	80001d0 <memchr>
 801084c:	9a04      	ldr	r2, [sp, #16]
 801084e:	b9d8      	cbnz	r0, 8010888 <_vfiprintf_r+0x110>
 8010850:	06d1      	lsls	r1, r2, #27
 8010852:	bf44      	itt	mi
 8010854:	2320      	movmi	r3, #32
 8010856:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801085a:	0713      	lsls	r3, r2, #28
 801085c:	bf44      	itt	mi
 801085e:	232b      	movmi	r3, #43	@ 0x2b
 8010860:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010864:	f89a 3000 	ldrb.w	r3, [sl]
 8010868:	2b2a      	cmp	r3, #42	@ 0x2a
 801086a:	d015      	beq.n	8010898 <_vfiprintf_r+0x120>
 801086c:	9a07      	ldr	r2, [sp, #28]
 801086e:	4654      	mov	r4, sl
 8010870:	2000      	movs	r0, #0
 8010872:	f04f 0c0a 	mov.w	ip, #10
 8010876:	4621      	mov	r1, r4
 8010878:	f811 3b01 	ldrb.w	r3, [r1], #1
 801087c:	3b30      	subs	r3, #48	@ 0x30
 801087e:	2b09      	cmp	r3, #9
 8010880:	d94b      	bls.n	801091a <_vfiprintf_r+0x1a2>
 8010882:	b1b0      	cbz	r0, 80108b2 <_vfiprintf_r+0x13a>
 8010884:	9207      	str	r2, [sp, #28]
 8010886:	e014      	b.n	80108b2 <_vfiprintf_r+0x13a>
 8010888:	eba0 0308 	sub.w	r3, r0, r8
 801088c:	fa09 f303 	lsl.w	r3, r9, r3
 8010890:	4313      	orrs	r3, r2
 8010892:	9304      	str	r3, [sp, #16]
 8010894:	46a2      	mov	sl, r4
 8010896:	e7d2      	b.n	801083e <_vfiprintf_r+0xc6>
 8010898:	9b03      	ldr	r3, [sp, #12]
 801089a:	1d19      	adds	r1, r3, #4
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	9103      	str	r1, [sp, #12]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	bfbb      	ittet	lt
 80108a4:	425b      	neglt	r3, r3
 80108a6:	f042 0202 	orrlt.w	r2, r2, #2
 80108aa:	9307      	strge	r3, [sp, #28]
 80108ac:	9307      	strlt	r3, [sp, #28]
 80108ae:	bfb8      	it	lt
 80108b0:	9204      	strlt	r2, [sp, #16]
 80108b2:	7823      	ldrb	r3, [r4, #0]
 80108b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80108b6:	d10a      	bne.n	80108ce <_vfiprintf_r+0x156>
 80108b8:	7863      	ldrb	r3, [r4, #1]
 80108ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80108bc:	d132      	bne.n	8010924 <_vfiprintf_r+0x1ac>
 80108be:	9b03      	ldr	r3, [sp, #12]
 80108c0:	1d1a      	adds	r2, r3, #4
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	9203      	str	r2, [sp, #12]
 80108c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80108ca:	3402      	adds	r4, #2
 80108cc:	9305      	str	r3, [sp, #20]
 80108ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80109a4 <_vfiprintf_r+0x22c>
 80108d2:	7821      	ldrb	r1, [r4, #0]
 80108d4:	2203      	movs	r2, #3
 80108d6:	4650      	mov	r0, sl
 80108d8:	f7ef fc7a 	bl	80001d0 <memchr>
 80108dc:	b138      	cbz	r0, 80108ee <_vfiprintf_r+0x176>
 80108de:	9b04      	ldr	r3, [sp, #16]
 80108e0:	eba0 000a 	sub.w	r0, r0, sl
 80108e4:	2240      	movs	r2, #64	@ 0x40
 80108e6:	4082      	lsls	r2, r0
 80108e8:	4313      	orrs	r3, r2
 80108ea:	3401      	adds	r4, #1
 80108ec:	9304      	str	r3, [sp, #16]
 80108ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108f2:	4829      	ldr	r0, [pc, #164]	@ (8010998 <_vfiprintf_r+0x220>)
 80108f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80108f8:	2206      	movs	r2, #6
 80108fa:	f7ef fc69 	bl	80001d0 <memchr>
 80108fe:	2800      	cmp	r0, #0
 8010900:	d03f      	beq.n	8010982 <_vfiprintf_r+0x20a>
 8010902:	4b26      	ldr	r3, [pc, #152]	@ (801099c <_vfiprintf_r+0x224>)
 8010904:	bb1b      	cbnz	r3, 801094e <_vfiprintf_r+0x1d6>
 8010906:	9b03      	ldr	r3, [sp, #12]
 8010908:	3307      	adds	r3, #7
 801090a:	f023 0307 	bic.w	r3, r3, #7
 801090e:	3308      	adds	r3, #8
 8010910:	9303      	str	r3, [sp, #12]
 8010912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010914:	443b      	add	r3, r7
 8010916:	9309      	str	r3, [sp, #36]	@ 0x24
 8010918:	e76a      	b.n	80107f0 <_vfiprintf_r+0x78>
 801091a:	fb0c 3202 	mla	r2, ip, r2, r3
 801091e:	460c      	mov	r4, r1
 8010920:	2001      	movs	r0, #1
 8010922:	e7a8      	b.n	8010876 <_vfiprintf_r+0xfe>
 8010924:	2300      	movs	r3, #0
 8010926:	3401      	adds	r4, #1
 8010928:	9305      	str	r3, [sp, #20]
 801092a:	4619      	mov	r1, r3
 801092c:	f04f 0c0a 	mov.w	ip, #10
 8010930:	4620      	mov	r0, r4
 8010932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010936:	3a30      	subs	r2, #48	@ 0x30
 8010938:	2a09      	cmp	r2, #9
 801093a:	d903      	bls.n	8010944 <_vfiprintf_r+0x1cc>
 801093c:	2b00      	cmp	r3, #0
 801093e:	d0c6      	beq.n	80108ce <_vfiprintf_r+0x156>
 8010940:	9105      	str	r1, [sp, #20]
 8010942:	e7c4      	b.n	80108ce <_vfiprintf_r+0x156>
 8010944:	fb0c 2101 	mla	r1, ip, r1, r2
 8010948:	4604      	mov	r4, r0
 801094a:	2301      	movs	r3, #1
 801094c:	e7f0      	b.n	8010930 <_vfiprintf_r+0x1b8>
 801094e:	ab03      	add	r3, sp, #12
 8010950:	9300      	str	r3, [sp, #0]
 8010952:	462a      	mov	r2, r5
 8010954:	4b12      	ldr	r3, [pc, #72]	@ (80109a0 <_vfiprintf_r+0x228>)
 8010956:	a904      	add	r1, sp, #16
 8010958:	4630      	mov	r0, r6
 801095a:	f7fc fae5 	bl	800cf28 <_printf_float>
 801095e:	4607      	mov	r7, r0
 8010960:	1c78      	adds	r0, r7, #1
 8010962:	d1d6      	bne.n	8010912 <_vfiprintf_r+0x19a>
 8010964:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010966:	07d9      	lsls	r1, r3, #31
 8010968:	d405      	bmi.n	8010976 <_vfiprintf_r+0x1fe>
 801096a:	89ab      	ldrh	r3, [r5, #12]
 801096c:	059a      	lsls	r2, r3, #22
 801096e:	d402      	bmi.n	8010976 <_vfiprintf_r+0x1fe>
 8010970:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010972:	f7fd fb91 	bl	800e098 <__retarget_lock_release_recursive>
 8010976:	89ab      	ldrh	r3, [r5, #12]
 8010978:	065b      	lsls	r3, r3, #25
 801097a:	f53f af1f 	bmi.w	80107bc <_vfiprintf_r+0x44>
 801097e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010980:	e71e      	b.n	80107c0 <_vfiprintf_r+0x48>
 8010982:	ab03      	add	r3, sp, #12
 8010984:	9300      	str	r3, [sp, #0]
 8010986:	462a      	mov	r2, r5
 8010988:	4b05      	ldr	r3, [pc, #20]	@ (80109a0 <_vfiprintf_r+0x228>)
 801098a:	a904      	add	r1, sp, #16
 801098c:	4630      	mov	r0, r6
 801098e:	f7fc fd63 	bl	800d458 <_printf_i>
 8010992:	e7e4      	b.n	801095e <_vfiprintf_r+0x1e6>
 8010994:	0801d989 	.word	0x0801d989
 8010998:	0801d993 	.word	0x0801d993
 801099c:	0800cf29 	.word	0x0800cf29
 80109a0:	08010753 	.word	0x08010753
 80109a4:	0801d98f 	.word	0x0801d98f

080109a8 <__sflush_r>:
 80109a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80109ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109b0:	0716      	lsls	r6, r2, #28
 80109b2:	4605      	mov	r5, r0
 80109b4:	460c      	mov	r4, r1
 80109b6:	d454      	bmi.n	8010a62 <__sflush_r+0xba>
 80109b8:	684b      	ldr	r3, [r1, #4]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	dc02      	bgt.n	80109c4 <__sflush_r+0x1c>
 80109be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	dd48      	ble.n	8010a56 <__sflush_r+0xae>
 80109c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80109c6:	2e00      	cmp	r6, #0
 80109c8:	d045      	beq.n	8010a56 <__sflush_r+0xae>
 80109ca:	2300      	movs	r3, #0
 80109cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80109d0:	682f      	ldr	r7, [r5, #0]
 80109d2:	6a21      	ldr	r1, [r4, #32]
 80109d4:	602b      	str	r3, [r5, #0]
 80109d6:	d030      	beq.n	8010a3a <__sflush_r+0x92>
 80109d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80109da:	89a3      	ldrh	r3, [r4, #12]
 80109dc:	0759      	lsls	r1, r3, #29
 80109de:	d505      	bpl.n	80109ec <__sflush_r+0x44>
 80109e0:	6863      	ldr	r3, [r4, #4]
 80109e2:	1ad2      	subs	r2, r2, r3
 80109e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80109e6:	b10b      	cbz	r3, 80109ec <__sflush_r+0x44>
 80109e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80109ea:	1ad2      	subs	r2, r2, r3
 80109ec:	2300      	movs	r3, #0
 80109ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80109f0:	6a21      	ldr	r1, [r4, #32]
 80109f2:	4628      	mov	r0, r5
 80109f4:	47b0      	blx	r6
 80109f6:	1c43      	adds	r3, r0, #1
 80109f8:	89a3      	ldrh	r3, [r4, #12]
 80109fa:	d106      	bne.n	8010a0a <__sflush_r+0x62>
 80109fc:	6829      	ldr	r1, [r5, #0]
 80109fe:	291d      	cmp	r1, #29
 8010a00:	d82b      	bhi.n	8010a5a <__sflush_r+0xb2>
 8010a02:	4a2a      	ldr	r2, [pc, #168]	@ (8010aac <__sflush_r+0x104>)
 8010a04:	410a      	asrs	r2, r1
 8010a06:	07d6      	lsls	r6, r2, #31
 8010a08:	d427      	bmi.n	8010a5a <__sflush_r+0xb2>
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	6062      	str	r2, [r4, #4]
 8010a0e:	04d9      	lsls	r1, r3, #19
 8010a10:	6922      	ldr	r2, [r4, #16]
 8010a12:	6022      	str	r2, [r4, #0]
 8010a14:	d504      	bpl.n	8010a20 <__sflush_r+0x78>
 8010a16:	1c42      	adds	r2, r0, #1
 8010a18:	d101      	bne.n	8010a1e <__sflush_r+0x76>
 8010a1a:	682b      	ldr	r3, [r5, #0]
 8010a1c:	b903      	cbnz	r3, 8010a20 <__sflush_r+0x78>
 8010a1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010a20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010a22:	602f      	str	r7, [r5, #0]
 8010a24:	b1b9      	cbz	r1, 8010a56 <__sflush_r+0xae>
 8010a26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010a2a:	4299      	cmp	r1, r3
 8010a2c:	d002      	beq.n	8010a34 <__sflush_r+0x8c>
 8010a2e:	4628      	mov	r0, r5
 8010a30:	f7fe f996 	bl	800ed60 <_free_r>
 8010a34:	2300      	movs	r3, #0
 8010a36:	6363      	str	r3, [r4, #52]	@ 0x34
 8010a38:	e00d      	b.n	8010a56 <__sflush_r+0xae>
 8010a3a:	2301      	movs	r3, #1
 8010a3c:	4628      	mov	r0, r5
 8010a3e:	47b0      	blx	r6
 8010a40:	4602      	mov	r2, r0
 8010a42:	1c50      	adds	r0, r2, #1
 8010a44:	d1c9      	bne.n	80109da <__sflush_r+0x32>
 8010a46:	682b      	ldr	r3, [r5, #0]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d0c6      	beq.n	80109da <__sflush_r+0x32>
 8010a4c:	2b1d      	cmp	r3, #29
 8010a4e:	d001      	beq.n	8010a54 <__sflush_r+0xac>
 8010a50:	2b16      	cmp	r3, #22
 8010a52:	d11e      	bne.n	8010a92 <__sflush_r+0xea>
 8010a54:	602f      	str	r7, [r5, #0]
 8010a56:	2000      	movs	r0, #0
 8010a58:	e022      	b.n	8010aa0 <__sflush_r+0xf8>
 8010a5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a5e:	b21b      	sxth	r3, r3
 8010a60:	e01b      	b.n	8010a9a <__sflush_r+0xf2>
 8010a62:	690f      	ldr	r7, [r1, #16]
 8010a64:	2f00      	cmp	r7, #0
 8010a66:	d0f6      	beq.n	8010a56 <__sflush_r+0xae>
 8010a68:	0793      	lsls	r3, r2, #30
 8010a6a:	680e      	ldr	r6, [r1, #0]
 8010a6c:	bf08      	it	eq
 8010a6e:	694b      	ldreq	r3, [r1, #20]
 8010a70:	600f      	str	r7, [r1, #0]
 8010a72:	bf18      	it	ne
 8010a74:	2300      	movne	r3, #0
 8010a76:	eba6 0807 	sub.w	r8, r6, r7
 8010a7a:	608b      	str	r3, [r1, #8]
 8010a7c:	f1b8 0f00 	cmp.w	r8, #0
 8010a80:	dde9      	ble.n	8010a56 <__sflush_r+0xae>
 8010a82:	6a21      	ldr	r1, [r4, #32]
 8010a84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010a86:	4643      	mov	r3, r8
 8010a88:	463a      	mov	r2, r7
 8010a8a:	4628      	mov	r0, r5
 8010a8c:	47b0      	blx	r6
 8010a8e:	2800      	cmp	r0, #0
 8010a90:	dc08      	bgt.n	8010aa4 <__sflush_r+0xfc>
 8010a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a9a:	81a3      	strh	r3, [r4, #12]
 8010a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aa4:	4407      	add	r7, r0
 8010aa6:	eba8 0800 	sub.w	r8, r8, r0
 8010aaa:	e7e7      	b.n	8010a7c <__sflush_r+0xd4>
 8010aac:	dfbffffe 	.word	0xdfbffffe

08010ab0 <_fflush_r>:
 8010ab0:	b538      	push	{r3, r4, r5, lr}
 8010ab2:	690b      	ldr	r3, [r1, #16]
 8010ab4:	4605      	mov	r5, r0
 8010ab6:	460c      	mov	r4, r1
 8010ab8:	b913      	cbnz	r3, 8010ac0 <_fflush_r+0x10>
 8010aba:	2500      	movs	r5, #0
 8010abc:	4628      	mov	r0, r5
 8010abe:	bd38      	pop	{r3, r4, r5, pc}
 8010ac0:	b118      	cbz	r0, 8010aca <_fflush_r+0x1a>
 8010ac2:	6a03      	ldr	r3, [r0, #32]
 8010ac4:	b90b      	cbnz	r3, 8010aca <_fflush_r+0x1a>
 8010ac6:	f7fd f887 	bl	800dbd8 <__sinit>
 8010aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d0f3      	beq.n	8010aba <_fflush_r+0xa>
 8010ad2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010ad4:	07d0      	lsls	r0, r2, #31
 8010ad6:	d404      	bmi.n	8010ae2 <_fflush_r+0x32>
 8010ad8:	0599      	lsls	r1, r3, #22
 8010ada:	d402      	bmi.n	8010ae2 <_fflush_r+0x32>
 8010adc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ade:	f7fd fada 	bl	800e096 <__retarget_lock_acquire_recursive>
 8010ae2:	4628      	mov	r0, r5
 8010ae4:	4621      	mov	r1, r4
 8010ae6:	f7ff ff5f 	bl	80109a8 <__sflush_r>
 8010aea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010aec:	07da      	lsls	r2, r3, #31
 8010aee:	4605      	mov	r5, r0
 8010af0:	d4e4      	bmi.n	8010abc <_fflush_r+0xc>
 8010af2:	89a3      	ldrh	r3, [r4, #12]
 8010af4:	059b      	lsls	r3, r3, #22
 8010af6:	d4e1      	bmi.n	8010abc <_fflush_r+0xc>
 8010af8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010afa:	f7fd facd 	bl	800e098 <__retarget_lock_release_recursive>
 8010afe:	e7dd      	b.n	8010abc <_fflush_r+0xc>

08010b00 <__swhatbuf_r>:
 8010b00:	b570      	push	{r4, r5, r6, lr}
 8010b02:	460c      	mov	r4, r1
 8010b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b08:	2900      	cmp	r1, #0
 8010b0a:	b096      	sub	sp, #88	@ 0x58
 8010b0c:	4615      	mov	r5, r2
 8010b0e:	461e      	mov	r6, r3
 8010b10:	da0d      	bge.n	8010b2e <__swhatbuf_r+0x2e>
 8010b12:	89a3      	ldrh	r3, [r4, #12]
 8010b14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010b18:	f04f 0100 	mov.w	r1, #0
 8010b1c:	bf14      	ite	ne
 8010b1e:	2340      	movne	r3, #64	@ 0x40
 8010b20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010b24:	2000      	movs	r0, #0
 8010b26:	6031      	str	r1, [r6, #0]
 8010b28:	602b      	str	r3, [r5, #0]
 8010b2a:	b016      	add	sp, #88	@ 0x58
 8010b2c:	bd70      	pop	{r4, r5, r6, pc}
 8010b2e:	466a      	mov	r2, sp
 8010b30:	f000 f874 	bl	8010c1c <_fstat_r>
 8010b34:	2800      	cmp	r0, #0
 8010b36:	dbec      	blt.n	8010b12 <__swhatbuf_r+0x12>
 8010b38:	9901      	ldr	r1, [sp, #4]
 8010b3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010b3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010b42:	4259      	negs	r1, r3
 8010b44:	4159      	adcs	r1, r3
 8010b46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b4a:	e7eb      	b.n	8010b24 <__swhatbuf_r+0x24>

08010b4c <__smakebuf_r>:
 8010b4c:	898b      	ldrh	r3, [r1, #12]
 8010b4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b50:	079d      	lsls	r5, r3, #30
 8010b52:	4606      	mov	r6, r0
 8010b54:	460c      	mov	r4, r1
 8010b56:	d507      	bpl.n	8010b68 <__smakebuf_r+0x1c>
 8010b58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010b5c:	6023      	str	r3, [r4, #0]
 8010b5e:	6123      	str	r3, [r4, #16]
 8010b60:	2301      	movs	r3, #1
 8010b62:	6163      	str	r3, [r4, #20]
 8010b64:	b003      	add	sp, #12
 8010b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b68:	ab01      	add	r3, sp, #4
 8010b6a:	466a      	mov	r2, sp
 8010b6c:	f7ff ffc8 	bl	8010b00 <__swhatbuf_r>
 8010b70:	9f00      	ldr	r7, [sp, #0]
 8010b72:	4605      	mov	r5, r0
 8010b74:	4639      	mov	r1, r7
 8010b76:	4630      	mov	r0, r6
 8010b78:	f7fc f87c 	bl	800cc74 <_malloc_r>
 8010b7c:	b948      	cbnz	r0, 8010b92 <__smakebuf_r+0x46>
 8010b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b82:	059a      	lsls	r2, r3, #22
 8010b84:	d4ee      	bmi.n	8010b64 <__smakebuf_r+0x18>
 8010b86:	f023 0303 	bic.w	r3, r3, #3
 8010b8a:	f043 0302 	orr.w	r3, r3, #2
 8010b8e:	81a3      	strh	r3, [r4, #12]
 8010b90:	e7e2      	b.n	8010b58 <__smakebuf_r+0xc>
 8010b92:	89a3      	ldrh	r3, [r4, #12]
 8010b94:	6020      	str	r0, [r4, #0]
 8010b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b9a:	81a3      	strh	r3, [r4, #12]
 8010b9c:	9b01      	ldr	r3, [sp, #4]
 8010b9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010ba2:	b15b      	cbz	r3, 8010bbc <__smakebuf_r+0x70>
 8010ba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ba8:	4630      	mov	r0, r6
 8010baa:	f000 f849 	bl	8010c40 <_isatty_r>
 8010bae:	b128      	cbz	r0, 8010bbc <__smakebuf_r+0x70>
 8010bb0:	89a3      	ldrh	r3, [r4, #12]
 8010bb2:	f023 0303 	bic.w	r3, r3, #3
 8010bb6:	f043 0301 	orr.w	r3, r3, #1
 8010bba:	81a3      	strh	r3, [r4, #12]
 8010bbc:	89a3      	ldrh	r3, [r4, #12]
 8010bbe:	431d      	orrs	r5, r3
 8010bc0:	81a5      	strh	r5, [r4, #12]
 8010bc2:	e7cf      	b.n	8010b64 <__smakebuf_r+0x18>

08010bc4 <memmove>:
 8010bc4:	4288      	cmp	r0, r1
 8010bc6:	b510      	push	{r4, lr}
 8010bc8:	eb01 0402 	add.w	r4, r1, r2
 8010bcc:	d902      	bls.n	8010bd4 <memmove+0x10>
 8010bce:	4284      	cmp	r4, r0
 8010bd0:	4623      	mov	r3, r4
 8010bd2:	d807      	bhi.n	8010be4 <memmove+0x20>
 8010bd4:	1e43      	subs	r3, r0, #1
 8010bd6:	42a1      	cmp	r1, r4
 8010bd8:	d008      	beq.n	8010bec <memmove+0x28>
 8010bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010be2:	e7f8      	b.n	8010bd6 <memmove+0x12>
 8010be4:	4402      	add	r2, r0
 8010be6:	4601      	mov	r1, r0
 8010be8:	428a      	cmp	r2, r1
 8010bea:	d100      	bne.n	8010bee <memmove+0x2a>
 8010bec:	bd10      	pop	{r4, pc}
 8010bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010bf6:	e7f7      	b.n	8010be8 <memmove+0x24>

08010bf8 <strncmp>:
 8010bf8:	b510      	push	{r4, lr}
 8010bfa:	b16a      	cbz	r2, 8010c18 <strncmp+0x20>
 8010bfc:	3901      	subs	r1, #1
 8010bfe:	1884      	adds	r4, r0, r2
 8010c00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c04:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010c08:	429a      	cmp	r2, r3
 8010c0a:	d103      	bne.n	8010c14 <strncmp+0x1c>
 8010c0c:	42a0      	cmp	r0, r4
 8010c0e:	d001      	beq.n	8010c14 <strncmp+0x1c>
 8010c10:	2a00      	cmp	r2, #0
 8010c12:	d1f5      	bne.n	8010c00 <strncmp+0x8>
 8010c14:	1ad0      	subs	r0, r2, r3
 8010c16:	bd10      	pop	{r4, pc}
 8010c18:	4610      	mov	r0, r2
 8010c1a:	e7fc      	b.n	8010c16 <strncmp+0x1e>

08010c1c <_fstat_r>:
 8010c1c:	b538      	push	{r3, r4, r5, lr}
 8010c1e:	4d07      	ldr	r5, [pc, #28]	@ (8010c3c <_fstat_r+0x20>)
 8010c20:	2300      	movs	r3, #0
 8010c22:	4604      	mov	r4, r0
 8010c24:	4608      	mov	r0, r1
 8010c26:	4611      	mov	r1, r2
 8010c28:	602b      	str	r3, [r5, #0]
 8010c2a:	f000 fd45 	bl	80116b8 <_fstat>
 8010c2e:	1c43      	adds	r3, r0, #1
 8010c30:	d102      	bne.n	8010c38 <_fstat_r+0x1c>
 8010c32:	682b      	ldr	r3, [r5, #0]
 8010c34:	b103      	cbz	r3, 8010c38 <_fstat_r+0x1c>
 8010c36:	6023      	str	r3, [r4, #0]
 8010c38:	bd38      	pop	{r3, r4, r5, pc}
 8010c3a:	bf00      	nop
 8010c3c:	200034ec 	.word	0x200034ec

08010c40 <_isatty_r>:
 8010c40:	b538      	push	{r3, r4, r5, lr}
 8010c42:	4d06      	ldr	r5, [pc, #24]	@ (8010c5c <_isatty_r+0x1c>)
 8010c44:	2300      	movs	r3, #0
 8010c46:	4604      	mov	r4, r0
 8010c48:	4608      	mov	r0, r1
 8010c4a:	602b      	str	r3, [r5, #0]
 8010c4c:	f000 fd44 	bl	80116d8 <_isatty>
 8010c50:	1c43      	adds	r3, r0, #1
 8010c52:	d102      	bne.n	8010c5a <_isatty_r+0x1a>
 8010c54:	682b      	ldr	r3, [r5, #0]
 8010c56:	b103      	cbz	r3, 8010c5a <_isatty_r+0x1a>
 8010c58:	6023      	str	r3, [r4, #0]
 8010c5a:	bd38      	pop	{r3, r4, r5, pc}
 8010c5c:	200034ec 	.word	0x200034ec

08010c60 <nan>:
 8010c60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010c68 <nan+0x8>
 8010c64:	4770      	bx	lr
 8010c66:	bf00      	nop
 8010c68:	00000000 	.word	0x00000000
 8010c6c:	7ff80000 	.word	0x7ff80000

08010c70 <__assert_func>:
 8010c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010c72:	4614      	mov	r4, r2
 8010c74:	461a      	mov	r2, r3
 8010c76:	4b09      	ldr	r3, [pc, #36]	@ (8010c9c <__assert_func+0x2c>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	4605      	mov	r5, r0
 8010c7c:	68d8      	ldr	r0, [r3, #12]
 8010c7e:	b954      	cbnz	r4, 8010c96 <__assert_func+0x26>
 8010c80:	4b07      	ldr	r3, [pc, #28]	@ (8010ca0 <__assert_func+0x30>)
 8010c82:	461c      	mov	r4, r3
 8010c84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010c88:	9100      	str	r1, [sp, #0]
 8010c8a:	462b      	mov	r3, r5
 8010c8c:	4905      	ldr	r1, [pc, #20]	@ (8010ca4 <__assert_func+0x34>)
 8010c8e:	f000 fb79 	bl	8011384 <fiprintf>
 8010c92:	f000 fb89 	bl	80113a8 <abort>
 8010c96:	4b04      	ldr	r3, [pc, #16]	@ (8010ca8 <__assert_func+0x38>)
 8010c98:	e7f4      	b.n	8010c84 <__assert_func+0x14>
 8010c9a:	bf00      	nop
 8010c9c:	200008b0 	.word	0x200008b0
 8010ca0:	0801d9dd 	.word	0x0801d9dd
 8010ca4:	0801d9af 	.word	0x0801d9af
 8010ca8:	0801d9a2 	.word	0x0801d9a2

08010cac <_calloc_r>:
 8010cac:	b570      	push	{r4, r5, r6, lr}
 8010cae:	fba1 5402 	umull	r5, r4, r1, r2
 8010cb2:	b93c      	cbnz	r4, 8010cc4 <_calloc_r+0x18>
 8010cb4:	4629      	mov	r1, r5
 8010cb6:	f7fb ffdd 	bl	800cc74 <_malloc_r>
 8010cba:	4606      	mov	r6, r0
 8010cbc:	b928      	cbnz	r0, 8010cca <_calloc_r+0x1e>
 8010cbe:	2600      	movs	r6, #0
 8010cc0:	4630      	mov	r0, r6
 8010cc2:	bd70      	pop	{r4, r5, r6, pc}
 8010cc4:	220c      	movs	r2, #12
 8010cc6:	6002      	str	r2, [r0, #0]
 8010cc8:	e7f9      	b.n	8010cbe <_calloc_r+0x12>
 8010cca:	462a      	mov	r2, r5
 8010ccc:	4621      	mov	r1, r4
 8010cce:	f7fd f955 	bl	800df7c <memset>
 8010cd2:	e7f5      	b.n	8010cc0 <_calloc_r+0x14>

08010cd4 <rshift>:
 8010cd4:	6903      	ldr	r3, [r0, #16]
 8010cd6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010cda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010cde:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010ce2:	f100 0414 	add.w	r4, r0, #20
 8010ce6:	dd45      	ble.n	8010d74 <rshift+0xa0>
 8010ce8:	f011 011f 	ands.w	r1, r1, #31
 8010cec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010cf0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010cf4:	d10c      	bne.n	8010d10 <rshift+0x3c>
 8010cf6:	f100 0710 	add.w	r7, r0, #16
 8010cfa:	4629      	mov	r1, r5
 8010cfc:	42b1      	cmp	r1, r6
 8010cfe:	d334      	bcc.n	8010d6a <rshift+0x96>
 8010d00:	1a9b      	subs	r3, r3, r2
 8010d02:	009b      	lsls	r3, r3, #2
 8010d04:	1eea      	subs	r2, r5, #3
 8010d06:	4296      	cmp	r6, r2
 8010d08:	bf38      	it	cc
 8010d0a:	2300      	movcc	r3, #0
 8010d0c:	4423      	add	r3, r4
 8010d0e:	e015      	b.n	8010d3c <rshift+0x68>
 8010d10:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010d14:	f1c1 0820 	rsb	r8, r1, #32
 8010d18:	40cf      	lsrs	r7, r1
 8010d1a:	f105 0e04 	add.w	lr, r5, #4
 8010d1e:	46a1      	mov	r9, r4
 8010d20:	4576      	cmp	r6, lr
 8010d22:	46f4      	mov	ip, lr
 8010d24:	d815      	bhi.n	8010d52 <rshift+0x7e>
 8010d26:	1a9a      	subs	r2, r3, r2
 8010d28:	0092      	lsls	r2, r2, #2
 8010d2a:	3a04      	subs	r2, #4
 8010d2c:	3501      	adds	r5, #1
 8010d2e:	42ae      	cmp	r6, r5
 8010d30:	bf38      	it	cc
 8010d32:	2200      	movcc	r2, #0
 8010d34:	18a3      	adds	r3, r4, r2
 8010d36:	50a7      	str	r7, [r4, r2]
 8010d38:	b107      	cbz	r7, 8010d3c <rshift+0x68>
 8010d3a:	3304      	adds	r3, #4
 8010d3c:	1b1a      	subs	r2, r3, r4
 8010d3e:	42a3      	cmp	r3, r4
 8010d40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010d44:	bf08      	it	eq
 8010d46:	2300      	moveq	r3, #0
 8010d48:	6102      	str	r2, [r0, #16]
 8010d4a:	bf08      	it	eq
 8010d4c:	6143      	streq	r3, [r0, #20]
 8010d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d52:	f8dc c000 	ldr.w	ip, [ip]
 8010d56:	fa0c fc08 	lsl.w	ip, ip, r8
 8010d5a:	ea4c 0707 	orr.w	r7, ip, r7
 8010d5e:	f849 7b04 	str.w	r7, [r9], #4
 8010d62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010d66:	40cf      	lsrs	r7, r1
 8010d68:	e7da      	b.n	8010d20 <rshift+0x4c>
 8010d6a:	f851 cb04 	ldr.w	ip, [r1], #4
 8010d6e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010d72:	e7c3      	b.n	8010cfc <rshift+0x28>
 8010d74:	4623      	mov	r3, r4
 8010d76:	e7e1      	b.n	8010d3c <rshift+0x68>

08010d78 <__hexdig_fun>:
 8010d78:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010d7c:	2b09      	cmp	r3, #9
 8010d7e:	d802      	bhi.n	8010d86 <__hexdig_fun+0xe>
 8010d80:	3820      	subs	r0, #32
 8010d82:	b2c0      	uxtb	r0, r0
 8010d84:	4770      	bx	lr
 8010d86:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010d8a:	2b05      	cmp	r3, #5
 8010d8c:	d801      	bhi.n	8010d92 <__hexdig_fun+0x1a>
 8010d8e:	3847      	subs	r0, #71	@ 0x47
 8010d90:	e7f7      	b.n	8010d82 <__hexdig_fun+0xa>
 8010d92:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010d96:	2b05      	cmp	r3, #5
 8010d98:	d801      	bhi.n	8010d9e <__hexdig_fun+0x26>
 8010d9a:	3827      	subs	r0, #39	@ 0x27
 8010d9c:	e7f1      	b.n	8010d82 <__hexdig_fun+0xa>
 8010d9e:	2000      	movs	r0, #0
 8010da0:	4770      	bx	lr
	...

08010da4 <__gethex>:
 8010da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010da8:	b085      	sub	sp, #20
 8010daa:	468a      	mov	sl, r1
 8010dac:	9302      	str	r3, [sp, #8]
 8010dae:	680b      	ldr	r3, [r1, #0]
 8010db0:	9001      	str	r0, [sp, #4]
 8010db2:	4690      	mov	r8, r2
 8010db4:	1c9c      	adds	r4, r3, #2
 8010db6:	46a1      	mov	r9, r4
 8010db8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010dbc:	2830      	cmp	r0, #48	@ 0x30
 8010dbe:	d0fa      	beq.n	8010db6 <__gethex+0x12>
 8010dc0:	eba9 0303 	sub.w	r3, r9, r3
 8010dc4:	f1a3 0b02 	sub.w	fp, r3, #2
 8010dc8:	f7ff ffd6 	bl	8010d78 <__hexdig_fun>
 8010dcc:	4605      	mov	r5, r0
 8010dce:	2800      	cmp	r0, #0
 8010dd0:	d168      	bne.n	8010ea4 <__gethex+0x100>
 8010dd2:	49a0      	ldr	r1, [pc, #640]	@ (8011054 <__gethex+0x2b0>)
 8010dd4:	2201      	movs	r2, #1
 8010dd6:	4648      	mov	r0, r9
 8010dd8:	f7ff ff0e 	bl	8010bf8 <strncmp>
 8010ddc:	4607      	mov	r7, r0
 8010dde:	2800      	cmp	r0, #0
 8010de0:	d167      	bne.n	8010eb2 <__gethex+0x10e>
 8010de2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010de6:	4626      	mov	r6, r4
 8010de8:	f7ff ffc6 	bl	8010d78 <__hexdig_fun>
 8010dec:	2800      	cmp	r0, #0
 8010dee:	d062      	beq.n	8010eb6 <__gethex+0x112>
 8010df0:	4623      	mov	r3, r4
 8010df2:	7818      	ldrb	r0, [r3, #0]
 8010df4:	2830      	cmp	r0, #48	@ 0x30
 8010df6:	4699      	mov	r9, r3
 8010df8:	f103 0301 	add.w	r3, r3, #1
 8010dfc:	d0f9      	beq.n	8010df2 <__gethex+0x4e>
 8010dfe:	f7ff ffbb 	bl	8010d78 <__hexdig_fun>
 8010e02:	fab0 f580 	clz	r5, r0
 8010e06:	096d      	lsrs	r5, r5, #5
 8010e08:	f04f 0b01 	mov.w	fp, #1
 8010e0c:	464a      	mov	r2, r9
 8010e0e:	4616      	mov	r6, r2
 8010e10:	3201      	adds	r2, #1
 8010e12:	7830      	ldrb	r0, [r6, #0]
 8010e14:	f7ff ffb0 	bl	8010d78 <__hexdig_fun>
 8010e18:	2800      	cmp	r0, #0
 8010e1a:	d1f8      	bne.n	8010e0e <__gethex+0x6a>
 8010e1c:	498d      	ldr	r1, [pc, #564]	@ (8011054 <__gethex+0x2b0>)
 8010e1e:	2201      	movs	r2, #1
 8010e20:	4630      	mov	r0, r6
 8010e22:	f7ff fee9 	bl	8010bf8 <strncmp>
 8010e26:	2800      	cmp	r0, #0
 8010e28:	d13f      	bne.n	8010eaa <__gethex+0x106>
 8010e2a:	b944      	cbnz	r4, 8010e3e <__gethex+0x9a>
 8010e2c:	1c74      	adds	r4, r6, #1
 8010e2e:	4622      	mov	r2, r4
 8010e30:	4616      	mov	r6, r2
 8010e32:	3201      	adds	r2, #1
 8010e34:	7830      	ldrb	r0, [r6, #0]
 8010e36:	f7ff ff9f 	bl	8010d78 <__hexdig_fun>
 8010e3a:	2800      	cmp	r0, #0
 8010e3c:	d1f8      	bne.n	8010e30 <__gethex+0x8c>
 8010e3e:	1ba4      	subs	r4, r4, r6
 8010e40:	00a7      	lsls	r7, r4, #2
 8010e42:	7833      	ldrb	r3, [r6, #0]
 8010e44:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010e48:	2b50      	cmp	r3, #80	@ 0x50
 8010e4a:	d13e      	bne.n	8010eca <__gethex+0x126>
 8010e4c:	7873      	ldrb	r3, [r6, #1]
 8010e4e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010e50:	d033      	beq.n	8010eba <__gethex+0x116>
 8010e52:	2b2d      	cmp	r3, #45	@ 0x2d
 8010e54:	d034      	beq.n	8010ec0 <__gethex+0x11c>
 8010e56:	1c71      	adds	r1, r6, #1
 8010e58:	2400      	movs	r4, #0
 8010e5a:	7808      	ldrb	r0, [r1, #0]
 8010e5c:	f7ff ff8c 	bl	8010d78 <__hexdig_fun>
 8010e60:	1e43      	subs	r3, r0, #1
 8010e62:	b2db      	uxtb	r3, r3
 8010e64:	2b18      	cmp	r3, #24
 8010e66:	d830      	bhi.n	8010eca <__gethex+0x126>
 8010e68:	f1a0 0210 	sub.w	r2, r0, #16
 8010e6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010e70:	f7ff ff82 	bl	8010d78 <__hexdig_fun>
 8010e74:	f100 3cff 	add.w	ip, r0, #4294967295
 8010e78:	fa5f fc8c 	uxtb.w	ip, ip
 8010e7c:	f1bc 0f18 	cmp.w	ip, #24
 8010e80:	f04f 030a 	mov.w	r3, #10
 8010e84:	d91e      	bls.n	8010ec4 <__gethex+0x120>
 8010e86:	b104      	cbz	r4, 8010e8a <__gethex+0xe6>
 8010e88:	4252      	negs	r2, r2
 8010e8a:	4417      	add	r7, r2
 8010e8c:	f8ca 1000 	str.w	r1, [sl]
 8010e90:	b1ed      	cbz	r5, 8010ece <__gethex+0x12a>
 8010e92:	f1bb 0f00 	cmp.w	fp, #0
 8010e96:	bf0c      	ite	eq
 8010e98:	2506      	moveq	r5, #6
 8010e9a:	2500      	movne	r5, #0
 8010e9c:	4628      	mov	r0, r5
 8010e9e:	b005      	add	sp, #20
 8010ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ea4:	2500      	movs	r5, #0
 8010ea6:	462c      	mov	r4, r5
 8010ea8:	e7b0      	b.n	8010e0c <__gethex+0x68>
 8010eaa:	2c00      	cmp	r4, #0
 8010eac:	d1c7      	bne.n	8010e3e <__gethex+0x9a>
 8010eae:	4627      	mov	r7, r4
 8010eb0:	e7c7      	b.n	8010e42 <__gethex+0x9e>
 8010eb2:	464e      	mov	r6, r9
 8010eb4:	462f      	mov	r7, r5
 8010eb6:	2501      	movs	r5, #1
 8010eb8:	e7c3      	b.n	8010e42 <__gethex+0x9e>
 8010eba:	2400      	movs	r4, #0
 8010ebc:	1cb1      	adds	r1, r6, #2
 8010ebe:	e7cc      	b.n	8010e5a <__gethex+0xb6>
 8010ec0:	2401      	movs	r4, #1
 8010ec2:	e7fb      	b.n	8010ebc <__gethex+0x118>
 8010ec4:	fb03 0002 	mla	r0, r3, r2, r0
 8010ec8:	e7ce      	b.n	8010e68 <__gethex+0xc4>
 8010eca:	4631      	mov	r1, r6
 8010ecc:	e7de      	b.n	8010e8c <__gethex+0xe8>
 8010ece:	eba6 0309 	sub.w	r3, r6, r9
 8010ed2:	3b01      	subs	r3, #1
 8010ed4:	4629      	mov	r1, r5
 8010ed6:	2b07      	cmp	r3, #7
 8010ed8:	dc0a      	bgt.n	8010ef0 <__gethex+0x14c>
 8010eda:	9801      	ldr	r0, [sp, #4]
 8010edc:	f7fd ff8a 	bl	800edf4 <_Balloc>
 8010ee0:	4604      	mov	r4, r0
 8010ee2:	b940      	cbnz	r0, 8010ef6 <__gethex+0x152>
 8010ee4:	4b5c      	ldr	r3, [pc, #368]	@ (8011058 <__gethex+0x2b4>)
 8010ee6:	4602      	mov	r2, r0
 8010ee8:	21e4      	movs	r1, #228	@ 0xe4
 8010eea:	485c      	ldr	r0, [pc, #368]	@ (801105c <__gethex+0x2b8>)
 8010eec:	f7ff fec0 	bl	8010c70 <__assert_func>
 8010ef0:	3101      	adds	r1, #1
 8010ef2:	105b      	asrs	r3, r3, #1
 8010ef4:	e7ef      	b.n	8010ed6 <__gethex+0x132>
 8010ef6:	f100 0a14 	add.w	sl, r0, #20
 8010efa:	2300      	movs	r3, #0
 8010efc:	4655      	mov	r5, sl
 8010efe:	469b      	mov	fp, r3
 8010f00:	45b1      	cmp	r9, r6
 8010f02:	d337      	bcc.n	8010f74 <__gethex+0x1d0>
 8010f04:	f845 bb04 	str.w	fp, [r5], #4
 8010f08:	eba5 050a 	sub.w	r5, r5, sl
 8010f0c:	10ad      	asrs	r5, r5, #2
 8010f0e:	6125      	str	r5, [r4, #16]
 8010f10:	4658      	mov	r0, fp
 8010f12:	f7fe f861 	bl	800efd8 <__hi0bits>
 8010f16:	016d      	lsls	r5, r5, #5
 8010f18:	f8d8 6000 	ldr.w	r6, [r8]
 8010f1c:	1a2d      	subs	r5, r5, r0
 8010f1e:	42b5      	cmp	r5, r6
 8010f20:	dd54      	ble.n	8010fcc <__gethex+0x228>
 8010f22:	1bad      	subs	r5, r5, r6
 8010f24:	4629      	mov	r1, r5
 8010f26:	4620      	mov	r0, r4
 8010f28:	f7fe fbf5 	bl	800f716 <__any_on>
 8010f2c:	4681      	mov	r9, r0
 8010f2e:	b178      	cbz	r0, 8010f50 <__gethex+0x1ac>
 8010f30:	1e6b      	subs	r3, r5, #1
 8010f32:	1159      	asrs	r1, r3, #5
 8010f34:	f003 021f 	and.w	r2, r3, #31
 8010f38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010f3c:	f04f 0901 	mov.w	r9, #1
 8010f40:	fa09 f202 	lsl.w	r2, r9, r2
 8010f44:	420a      	tst	r2, r1
 8010f46:	d003      	beq.n	8010f50 <__gethex+0x1ac>
 8010f48:	454b      	cmp	r3, r9
 8010f4a:	dc36      	bgt.n	8010fba <__gethex+0x216>
 8010f4c:	f04f 0902 	mov.w	r9, #2
 8010f50:	4629      	mov	r1, r5
 8010f52:	4620      	mov	r0, r4
 8010f54:	f7ff febe 	bl	8010cd4 <rshift>
 8010f58:	442f      	add	r7, r5
 8010f5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f5e:	42bb      	cmp	r3, r7
 8010f60:	da42      	bge.n	8010fe8 <__gethex+0x244>
 8010f62:	9801      	ldr	r0, [sp, #4]
 8010f64:	4621      	mov	r1, r4
 8010f66:	f7fd ff85 	bl	800ee74 <_Bfree>
 8010f6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	6013      	str	r3, [r2, #0]
 8010f70:	25a3      	movs	r5, #163	@ 0xa3
 8010f72:	e793      	b.n	8010e9c <__gethex+0xf8>
 8010f74:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010f78:	2a2e      	cmp	r2, #46	@ 0x2e
 8010f7a:	d012      	beq.n	8010fa2 <__gethex+0x1fe>
 8010f7c:	2b20      	cmp	r3, #32
 8010f7e:	d104      	bne.n	8010f8a <__gethex+0x1e6>
 8010f80:	f845 bb04 	str.w	fp, [r5], #4
 8010f84:	f04f 0b00 	mov.w	fp, #0
 8010f88:	465b      	mov	r3, fp
 8010f8a:	7830      	ldrb	r0, [r6, #0]
 8010f8c:	9303      	str	r3, [sp, #12]
 8010f8e:	f7ff fef3 	bl	8010d78 <__hexdig_fun>
 8010f92:	9b03      	ldr	r3, [sp, #12]
 8010f94:	f000 000f 	and.w	r0, r0, #15
 8010f98:	4098      	lsls	r0, r3
 8010f9a:	ea4b 0b00 	orr.w	fp, fp, r0
 8010f9e:	3304      	adds	r3, #4
 8010fa0:	e7ae      	b.n	8010f00 <__gethex+0x15c>
 8010fa2:	45b1      	cmp	r9, r6
 8010fa4:	d8ea      	bhi.n	8010f7c <__gethex+0x1d8>
 8010fa6:	492b      	ldr	r1, [pc, #172]	@ (8011054 <__gethex+0x2b0>)
 8010fa8:	9303      	str	r3, [sp, #12]
 8010faa:	2201      	movs	r2, #1
 8010fac:	4630      	mov	r0, r6
 8010fae:	f7ff fe23 	bl	8010bf8 <strncmp>
 8010fb2:	9b03      	ldr	r3, [sp, #12]
 8010fb4:	2800      	cmp	r0, #0
 8010fb6:	d1e1      	bne.n	8010f7c <__gethex+0x1d8>
 8010fb8:	e7a2      	b.n	8010f00 <__gethex+0x15c>
 8010fba:	1ea9      	subs	r1, r5, #2
 8010fbc:	4620      	mov	r0, r4
 8010fbe:	f7fe fbaa 	bl	800f716 <__any_on>
 8010fc2:	2800      	cmp	r0, #0
 8010fc4:	d0c2      	beq.n	8010f4c <__gethex+0x1a8>
 8010fc6:	f04f 0903 	mov.w	r9, #3
 8010fca:	e7c1      	b.n	8010f50 <__gethex+0x1ac>
 8010fcc:	da09      	bge.n	8010fe2 <__gethex+0x23e>
 8010fce:	1b75      	subs	r5, r6, r5
 8010fd0:	4621      	mov	r1, r4
 8010fd2:	9801      	ldr	r0, [sp, #4]
 8010fd4:	462a      	mov	r2, r5
 8010fd6:	f7fe f965 	bl	800f2a4 <__lshift>
 8010fda:	1b7f      	subs	r7, r7, r5
 8010fdc:	4604      	mov	r4, r0
 8010fde:	f100 0a14 	add.w	sl, r0, #20
 8010fe2:	f04f 0900 	mov.w	r9, #0
 8010fe6:	e7b8      	b.n	8010f5a <__gethex+0x1b6>
 8010fe8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010fec:	42bd      	cmp	r5, r7
 8010fee:	dd6f      	ble.n	80110d0 <__gethex+0x32c>
 8010ff0:	1bed      	subs	r5, r5, r7
 8010ff2:	42ae      	cmp	r6, r5
 8010ff4:	dc34      	bgt.n	8011060 <__gethex+0x2bc>
 8010ff6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010ffa:	2b02      	cmp	r3, #2
 8010ffc:	d022      	beq.n	8011044 <__gethex+0x2a0>
 8010ffe:	2b03      	cmp	r3, #3
 8011000:	d024      	beq.n	801104c <__gethex+0x2a8>
 8011002:	2b01      	cmp	r3, #1
 8011004:	d115      	bne.n	8011032 <__gethex+0x28e>
 8011006:	42ae      	cmp	r6, r5
 8011008:	d113      	bne.n	8011032 <__gethex+0x28e>
 801100a:	2e01      	cmp	r6, #1
 801100c:	d10b      	bne.n	8011026 <__gethex+0x282>
 801100e:	9a02      	ldr	r2, [sp, #8]
 8011010:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011014:	6013      	str	r3, [r2, #0]
 8011016:	2301      	movs	r3, #1
 8011018:	6123      	str	r3, [r4, #16]
 801101a:	f8ca 3000 	str.w	r3, [sl]
 801101e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011020:	2562      	movs	r5, #98	@ 0x62
 8011022:	601c      	str	r4, [r3, #0]
 8011024:	e73a      	b.n	8010e9c <__gethex+0xf8>
 8011026:	1e71      	subs	r1, r6, #1
 8011028:	4620      	mov	r0, r4
 801102a:	f7fe fb74 	bl	800f716 <__any_on>
 801102e:	2800      	cmp	r0, #0
 8011030:	d1ed      	bne.n	801100e <__gethex+0x26a>
 8011032:	9801      	ldr	r0, [sp, #4]
 8011034:	4621      	mov	r1, r4
 8011036:	f7fd ff1d 	bl	800ee74 <_Bfree>
 801103a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801103c:	2300      	movs	r3, #0
 801103e:	6013      	str	r3, [r2, #0]
 8011040:	2550      	movs	r5, #80	@ 0x50
 8011042:	e72b      	b.n	8010e9c <__gethex+0xf8>
 8011044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011046:	2b00      	cmp	r3, #0
 8011048:	d1f3      	bne.n	8011032 <__gethex+0x28e>
 801104a:	e7e0      	b.n	801100e <__gethex+0x26a>
 801104c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801104e:	2b00      	cmp	r3, #0
 8011050:	d1dd      	bne.n	801100e <__gethex+0x26a>
 8011052:	e7ee      	b.n	8011032 <__gethex+0x28e>
 8011054:	0801d830 	.word	0x0801d830
 8011058:	0801d6c5 	.word	0x0801d6c5
 801105c:	0801d9de 	.word	0x0801d9de
 8011060:	1e6f      	subs	r7, r5, #1
 8011062:	f1b9 0f00 	cmp.w	r9, #0
 8011066:	d130      	bne.n	80110ca <__gethex+0x326>
 8011068:	b127      	cbz	r7, 8011074 <__gethex+0x2d0>
 801106a:	4639      	mov	r1, r7
 801106c:	4620      	mov	r0, r4
 801106e:	f7fe fb52 	bl	800f716 <__any_on>
 8011072:	4681      	mov	r9, r0
 8011074:	117a      	asrs	r2, r7, #5
 8011076:	2301      	movs	r3, #1
 8011078:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801107c:	f007 071f 	and.w	r7, r7, #31
 8011080:	40bb      	lsls	r3, r7
 8011082:	4213      	tst	r3, r2
 8011084:	4629      	mov	r1, r5
 8011086:	4620      	mov	r0, r4
 8011088:	bf18      	it	ne
 801108a:	f049 0902 	orrne.w	r9, r9, #2
 801108e:	f7ff fe21 	bl	8010cd4 <rshift>
 8011092:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011096:	1b76      	subs	r6, r6, r5
 8011098:	2502      	movs	r5, #2
 801109a:	f1b9 0f00 	cmp.w	r9, #0
 801109e:	d047      	beq.n	8011130 <__gethex+0x38c>
 80110a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80110a4:	2b02      	cmp	r3, #2
 80110a6:	d015      	beq.n	80110d4 <__gethex+0x330>
 80110a8:	2b03      	cmp	r3, #3
 80110aa:	d017      	beq.n	80110dc <__gethex+0x338>
 80110ac:	2b01      	cmp	r3, #1
 80110ae:	d109      	bne.n	80110c4 <__gethex+0x320>
 80110b0:	f019 0f02 	tst.w	r9, #2
 80110b4:	d006      	beq.n	80110c4 <__gethex+0x320>
 80110b6:	f8da 3000 	ldr.w	r3, [sl]
 80110ba:	ea49 0903 	orr.w	r9, r9, r3
 80110be:	f019 0f01 	tst.w	r9, #1
 80110c2:	d10e      	bne.n	80110e2 <__gethex+0x33e>
 80110c4:	f045 0510 	orr.w	r5, r5, #16
 80110c8:	e032      	b.n	8011130 <__gethex+0x38c>
 80110ca:	f04f 0901 	mov.w	r9, #1
 80110ce:	e7d1      	b.n	8011074 <__gethex+0x2d0>
 80110d0:	2501      	movs	r5, #1
 80110d2:	e7e2      	b.n	801109a <__gethex+0x2f6>
 80110d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80110d6:	f1c3 0301 	rsb	r3, r3, #1
 80110da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80110dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d0f0      	beq.n	80110c4 <__gethex+0x320>
 80110e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80110e6:	f104 0314 	add.w	r3, r4, #20
 80110ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80110ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80110f2:	f04f 0c00 	mov.w	ip, #0
 80110f6:	4618      	mov	r0, r3
 80110f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80110fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011100:	d01b      	beq.n	801113a <__gethex+0x396>
 8011102:	3201      	adds	r2, #1
 8011104:	6002      	str	r2, [r0, #0]
 8011106:	2d02      	cmp	r5, #2
 8011108:	f104 0314 	add.w	r3, r4, #20
 801110c:	d13c      	bne.n	8011188 <__gethex+0x3e4>
 801110e:	f8d8 2000 	ldr.w	r2, [r8]
 8011112:	3a01      	subs	r2, #1
 8011114:	42b2      	cmp	r2, r6
 8011116:	d109      	bne.n	801112c <__gethex+0x388>
 8011118:	1171      	asrs	r1, r6, #5
 801111a:	2201      	movs	r2, #1
 801111c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011120:	f006 061f 	and.w	r6, r6, #31
 8011124:	fa02 f606 	lsl.w	r6, r2, r6
 8011128:	421e      	tst	r6, r3
 801112a:	d13a      	bne.n	80111a2 <__gethex+0x3fe>
 801112c:	f045 0520 	orr.w	r5, r5, #32
 8011130:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011132:	601c      	str	r4, [r3, #0]
 8011134:	9b02      	ldr	r3, [sp, #8]
 8011136:	601f      	str	r7, [r3, #0]
 8011138:	e6b0      	b.n	8010e9c <__gethex+0xf8>
 801113a:	4299      	cmp	r1, r3
 801113c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011140:	d8d9      	bhi.n	80110f6 <__gethex+0x352>
 8011142:	68a3      	ldr	r3, [r4, #8]
 8011144:	459b      	cmp	fp, r3
 8011146:	db17      	blt.n	8011178 <__gethex+0x3d4>
 8011148:	6861      	ldr	r1, [r4, #4]
 801114a:	9801      	ldr	r0, [sp, #4]
 801114c:	3101      	adds	r1, #1
 801114e:	f7fd fe51 	bl	800edf4 <_Balloc>
 8011152:	4681      	mov	r9, r0
 8011154:	b918      	cbnz	r0, 801115e <__gethex+0x3ba>
 8011156:	4b1a      	ldr	r3, [pc, #104]	@ (80111c0 <__gethex+0x41c>)
 8011158:	4602      	mov	r2, r0
 801115a:	2184      	movs	r1, #132	@ 0x84
 801115c:	e6c5      	b.n	8010eea <__gethex+0x146>
 801115e:	6922      	ldr	r2, [r4, #16]
 8011160:	3202      	adds	r2, #2
 8011162:	f104 010c 	add.w	r1, r4, #12
 8011166:	0092      	lsls	r2, r2, #2
 8011168:	300c      	adds	r0, #12
 801116a:	f7fc ff96 	bl	800e09a <memcpy>
 801116e:	4621      	mov	r1, r4
 8011170:	9801      	ldr	r0, [sp, #4]
 8011172:	f7fd fe7f 	bl	800ee74 <_Bfree>
 8011176:	464c      	mov	r4, r9
 8011178:	6923      	ldr	r3, [r4, #16]
 801117a:	1c5a      	adds	r2, r3, #1
 801117c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011180:	6122      	str	r2, [r4, #16]
 8011182:	2201      	movs	r2, #1
 8011184:	615a      	str	r2, [r3, #20]
 8011186:	e7be      	b.n	8011106 <__gethex+0x362>
 8011188:	6922      	ldr	r2, [r4, #16]
 801118a:	455a      	cmp	r2, fp
 801118c:	dd0b      	ble.n	80111a6 <__gethex+0x402>
 801118e:	2101      	movs	r1, #1
 8011190:	4620      	mov	r0, r4
 8011192:	f7ff fd9f 	bl	8010cd4 <rshift>
 8011196:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801119a:	3701      	adds	r7, #1
 801119c:	42bb      	cmp	r3, r7
 801119e:	f6ff aee0 	blt.w	8010f62 <__gethex+0x1be>
 80111a2:	2501      	movs	r5, #1
 80111a4:	e7c2      	b.n	801112c <__gethex+0x388>
 80111a6:	f016 061f 	ands.w	r6, r6, #31
 80111aa:	d0fa      	beq.n	80111a2 <__gethex+0x3fe>
 80111ac:	4453      	add	r3, sl
 80111ae:	f1c6 0620 	rsb	r6, r6, #32
 80111b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80111b6:	f7fd ff0f 	bl	800efd8 <__hi0bits>
 80111ba:	42b0      	cmp	r0, r6
 80111bc:	dbe7      	blt.n	801118e <__gethex+0x3ea>
 80111be:	e7f0      	b.n	80111a2 <__gethex+0x3fe>
 80111c0:	0801d6c5 	.word	0x0801d6c5

080111c4 <L_shift>:
 80111c4:	f1c2 0208 	rsb	r2, r2, #8
 80111c8:	0092      	lsls	r2, r2, #2
 80111ca:	b570      	push	{r4, r5, r6, lr}
 80111cc:	f1c2 0620 	rsb	r6, r2, #32
 80111d0:	6843      	ldr	r3, [r0, #4]
 80111d2:	6804      	ldr	r4, [r0, #0]
 80111d4:	fa03 f506 	lsl.w	r5, r3, r6
 80111d8:	432c      	orrs	r4, r5
 80111da:	40d3      	lsrs	r3, r2
 80111dc:	6004      	str	r4, [r0, #0]
 80111de:	f840 3f04 	str.w	r3, [r0, #4]!
 80111e2:	4288      	cmp	r0, r1
 80111e4:	d3f4      	bcc.n	80111d0 <L_shift+0xc>
 80111e6:	bd70      	pop	{r4, r5, r6, pc}

080111e8 <__match>:
 80111e8:	b530      	push	{r4, r5, lr}
 80111ea:	6803      	ldr	r3, [r0, #0]
 80111ec:	3301      	adds	r3, #1
 80111ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111f2:	b914      	cbnz	r4, 80111fa <__match+0x12>
 80111f4:	6003      	str	r3, [r0, #0]
 80111f6:	2001      	movs	r0, #1
 80111f8:	bd30      	pop	{r4, r5, pc}
 80111fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011202:	2d19      	cmp	r5, #25
 8011204:	bf98      	it	ls
 8011206:	3220      	addls	r2, #32
 8011208:	42a2      	cmp	r2, r4
 801120a:	d0f0      	beq.n	80111ee <__match+0x6>
 801120c:	2000      	movs	r0, #0
 801120e:	e7f3      	b.n	80111f8 <__match+0x10>

08011210 <__hexnan>:
 8011210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011214:	680b      	ldr	r3, [r1, #0]
 8011216:	6801      	ldr	r1, [r0, #0]
 8011218:	115e      	asrs	r6, r3, #5
 801121a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801121e:	f013 031f 	ands.w	r3, r3, #31
 8011222:	b087      	sub	sp, #28
 8011224:	bf18      	it	ne
 8011226:	3604      	addne	r6, #4
 8011228:	2500      	movs	r5, #0
 801122a:	1f37      	subs	r7, r6, #4
 801122c:	4682      	mov	sl, r0
 801122e:	4690      	mov	r8, r2
 8011230:	9301      	str	r3, [sp, #4]
 8011232:	f846 5c04 	str.w	r5, [r6, #-4]
 8011236:	46b9      	mov	r9, r7
 8011238:	463c      	mov	r4, r7
 801123a:	9502      	str	r5, [sp, #8]
 801123c:	46ab      	mov	fp, r5
 801123e:	784a      	ldrb	r2, [r1, #1]
 8011240:	1c4b      	adds	r3, r1, #1
 8011242:	9303      	str	r3, [sp, #12]
 8011244:	b342      	cbz	r2, 8011298 <__hexnan+0x88>
 8011246:	4610      	mov	r0, r2
 8011248:	9105      	str	r1, [sp, #20]
 801124a:	9204      	str	r2, [sp, #16]
 801124c:	f7ff fd94 	bl	8010d78 <__hexdig_fun>
 8011250:	2800      	cmp	r0, #0
 8011252:	d151      	bne.n	80112f8 <__hexnan+0xe8>
 8011254:	9a04      	ldr	r2, [sp, #16]
 8011256:	9905      	ldr	r1, [sp, #20]
 8011258:	2a20      	cmp	r2, #32
 801125a:	d818      	bhi.n	801128e <__hexnan+0x7e>
 801125c:	9b02      	ldr	r3, [sp, #8]
 801125e:	459b      	cmp	fp, r3
 8011260:	dd13      	ble.n	801128a <__hexnan+0x7a>
 8011262:	454c      	cmp	r4, r9
 8011264:	d206      	bcs.n	8011274 <__hexnan+0x64>
 8011266:	2d07      	cmp	r5, #7
 8011268:	dc04      	bgt.n	8011274 <__hexnan+0x64>
 801126a:	462a      	mov	r2, r5
 801126c:	4649      	mov	r1, r9
 801126e:	4620      	mov	r0, r4
 8011270:	f7ff ffa8 	bl	80111c4 <L_shift>
 8011274:	4544      	cmp	r4, r8
 8011276:	d952      	bls.n	801131e <__hexnan+0x10e>
 8011278:	2300      	movs	r3, #0
 801127a:	f1a4 0904 	sub.w	r9, r4, #4
 801127e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011282:	f8cd b008 	str.w	fp, [sp, #8]
 8011286:	464c      	mov	r4, r9
 8011288:	461d      	mov	r5, r3
 801128a:	9903      	ldr	r1, [sp, #12]
 801128c:	e7d7      	b.n	801123e <__hexnan+0x2e>
 801128e:	2a29      	cmp	r2, #41	@ 0x29
 8011290:	d157      	bne.n	8011342 <__hexnan+0x132>
 8011292:	3102      	adds	r1, #2
 8011294:	f8ca 1000 	str.w	r1, [sl]
 8011298:	f1bb 0f00 	cmp.w	fp, #0
 801129c:	d051      	beq.n	8011342 <__hexnan+0x132>
 801129e:	454c      	cmp	r4, r9
 80112a0:	d206      	bcs.n	80112b0 <__hexnan+0xa0>
 80112a2:	2d07      	cmp	r5, #7
 80112a4:	dc04      	bgt.n	80112b0 <__hexnan+0xa0>
 80112a6:	462a      	mov	r2, r5
 80112a8:	4649      	mov	r1, r9
 80112aa:	4620      	mov	r0, r4
 80112ac:	f7ff ff8a 	bl	80111c4 <L_shift>
 80112b0:	4544      	cmp	r4, r8
 80112b2:	d936      	bls.n	8011322 <__hexnan+0x112>
 80112b4:	f1a8 0204 	sub.w	r2, r8, #4
 80112b8:	4623      	mov	r3, r4
 80112ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80112be:	f842 1f04 	str.w	r1, [r2, #4]!
 80112c2:	429f      	cmp	r7, r3
 80112c4:	d2f9      	bcs.n	80112ba <__hexnan+0xaa>
 80112c6:	1b3b      	subs	r3, r7, r4
 80112c8:	f023 0303 	bic.w	r3, r3, #3
 80112cc:	3304      	adds	r3, #4
 80112ce:	3401      	adds	r4, #1
 80112d0:	3e03      	subs	r6, #3
 80112d2:	42b4      	cmp	r4, r6
 80112d4:	bf88      	it	hi
 80112d6:	2304      	movhi	r3, #4
 80112d8:	4443      	add	r3, r8
 80112da:	2200      	movs	r2, #0
 80112dc:	f843 2b04 	str.w	r2, [r3], #4
 80112e0:	429f      	cmp	r7, r3
 80112e2:	d2fb      	bcs.n	80112dc <__hexnan+0xcc>
 80112e4:	683b      	ldr	r3, [r7, #0]
 80112e6:	b91b      	cbnz	r3, 80112f0 <__hexnan+0xe0>
 80112e8:	4547      	cmp	r7, r8
 80112ea:	d128      	bne.n	801133e <__hexnan+0x12e>
 80112ec:	2301      	movs	r3, #1
 80112ee:	603b      	str	r3, [r7, #0]
 80112f0:	2005      	movs	r0, #5
 80112f2:	b007      	add	sp, #28
 80112f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112f8:	3501      	adds	r5, #1
 80112fa:	2d08      	cmp	r5, #8
 80112fc:	f10b 0b01 	add.w	fp, fp, #1
 8011300:	dd06      	ble.n	8011310 <__hexnan+0x100>
 8011302:	4544      	cmp	r4, r8
 8011304:	d9c1      	bls.n	801128a <__hexnan+0x7a>
 8011306:	2300      	movs	r3, #0
 8011308:	f844 3c04 	str.w	r3, [r4, #-4]
 801130c:	2501      	movs	r5, #1
 801130e:	3c04      	subs	r4, #4
 8011310:	6822      	ldr	r2, [r4, #0]
 8011312:	f000 000f 	and.w	r0, r0, #15
 8011316:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801131a:	6020      	str	r0, [r4, #0]
 801131c:	e7b5      	b.n	801128a <__hexnan+0x7a>
 801131e:	2508      	movs	r5, #8
 8011320:	e7b3      	b.n	801128a <__hexnan+0x7a>
 8011322:	9b01      	ldr	r3, [sp, #4]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d0dd      	beq.n	80112e4 <__hexnan+0xd4>
 8011328:	f1c3 0320 	rsb	r3, r3, #32
 801132c:	f04f 32ff 	mov.w	r2, #4294967295
 8011330:	40da      	lsrs	r2, r3
 8011332:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011336:	4013      	ands	r3, r2
 8011338:	f846 3c04 	str.w	r3, [r6, #-4]
 801133c:	e7d2      	b.n	80112e4 <__hexnan+0xd4>
 801133e:	3f04      	subs	r7, #4
 8011340:	e7d0      	b.n	80112e4 <__hexnan+0xd4>
 8011342:	2004      	movs	r0, #4
 8011344:	e7d5      	b.n	80112f2 <__hexnan+0xe2>

08011346 <__ascii_mbtowc>:
 8011346:	b082      	sub	sp, #8
 8011348:	b901      	cbnz	r1, 801134c <__ascii_mbtowc+0x6>
 801134a:	a901      	add	r1, sp, #4
 801134c:	b142      	cbz	r2, 8011360 <__ascii_mbtowc+0x1a>
 801134e:	b14b      	cbz	r3, 8011364 <__ascii_mbtowc+0x1e>
 8011350:	7813      	ldrb	r3, [r2, #0]
 8011352:	600b      	str	r3, [r1, #0]
 8011354:	7812      	ldrb	r2, [r2, #0]
 8011356:	1e10      	subs	r0, r2, #0
 8011358:	bf18      	it	ne
 801135a:	2001      	movne	r0, #1
 801135c:	b002      	add	sp, #8
 801135e:	4770      	bx	lr
 8011360:	4610      	mov	r0, r2
 8011362:	e7fb      	b.n	801135c <__ascii_mbtowc+0x16>
 8011364:	f06f 0001 	mvn.w	r0, #1
 8011368:	e7f8      	b.n	801135c <__ascii_mbtowc+0x16>

0801136a <__ascii_wctomb>:
 801136a:	4603      	mov	r3, r0
 801136c:	4608      	mov	r0, r1
 801136e:	b141      	cbz	r1, 8011382 <__ascii_wctomb+0x18>
 8011370:	2aff      	cmp	r2, #255	@ 0xff
 8011372:	d904      	bls.n	801137e <__ascii_wctomb+0x14>
 8011374:	228a      	movs	r2, #138	@ 0x8a
 8011376:	601a      	str	r2, [r3, #0]
 8011378:	f04f 30ff 	mov.w	r0, #4294967295
 801137c:	4770      	bx	lr
 801137e:	700a      	strb	r2, [r1, #0]
 8011380:	2001      	movs	r0, #1
 8011382:	4770      	bx	lr

08011384 <fiprintf>:
 8011384:	b40e      	push	{r1, r2, r3}
 8011386:	b503      	push	{r0, r1, lr}
 8011388:	4601      	mov	r1, r0
 801138a:	ab03      	add	r3, sp, #12
 801138c:	4805      	ldr	r0, [pc, #20]	@ (80113a4 <fiprintf+0x20>)
 801138e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011392:	6800      	ldr	r0, [r0, #0]
 8011394:	9301      	str	r3, [sp, #4]
 8011396:	f7ff f9ef 	bl	8010778 <_vfiprintf_r>
 801139a:	b002      	add	sp, #8
 801139c:	f85d eb04 	ldr.w	lr, [sp], #4
 80113a0:	b003      	add	sp, #12
 80113a2:	4770      	bx	lr
 80113a4:	200008b0 	.word	0x200008b0

080113a8 <abort>:
 80113a8:	b508      	push	{r3, lr}
 80113aa:	2006      	movs	r0, #6
 80113ac:	f000 f82c 	bl	8011408 <raise>
 80113b0:	2001      	movs	r0, #1
 80113b2:	f000 f9b1 	bl	8011718 <_exit>

080113b6 <_raise_r>:
 80113b6:	291f      	cmp	r1, #31
 80113b8:	b538      	push	{r3, r4, r5, lr}
 80113ba:	4605      	mov	r5, r0
 80113bc:	460c      	mov	r4, r1
 80113be:	d904      	bls.n	80113ca <_raise_r+0x14>
 80113c0:	2316      	movs	r3, #22
 80113c2:	6003      	str	r3, [r0, #0]
 80113c4:	f04f 30ff 	mov.w	r0, #4294967295
 80113c8:	bd38      	pop	{r3, r4, r5, pc}
 80113ca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80113cc:	b112      	cbz	r2, 80113d4 <_raise_r+0x1e>
 80113ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80113d2:	b94b      	cbnz	r3, 80113e8 <_raise_r+0x32>
 80113d4:	4628      	mov	r0, r5
 80113d6:	f000 f831 	bl	801143c <_getpid_r>
 80113da:	4622      	mov	r2, r4
 80113dc:	4601      	mov	r1, r0
 80113de:	4628      	mov	r0, r5
 80113e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113e4:	f000 b818 	b.w	8011418 <_kill_r>
 80113e8:	2b01      	cmp	r3, #1
 80113ea:	d00a      	beq.n	8011402 <_raise_r+0x4c>
 80113ec:	1c59      	adds	r1, r3, #1
 80113ee:	d103      	bne.n	80113f8 <_raise_r+0x42>
 80113f0:	2316      	movs	r3, #22
 80113f2:	6003      	str	r3, [r0, #0]
 80113f4:	2001      	movs	r0, #1
 80113f6:	e7e7      	b.n	80113c8 <_raise_r+0x12>
 80113f8:	2100      	movs	r1, #0
 80113fa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80113fe:	4620      	mov	r0, r4
 8011400:	4798      	blx	r3
 8011402:	2000      	movs	r0, #0
 8011404:	e7e0      	b.n	80113c8 <_raise_r+0x12>
	...

08011408 <raise>:
 8011408:	4b02      	ldr	r3, [pc, #8]	@ (8011414 <raise+0xc>)
 801140a:	4601      	mov	r1, r0
 801140c:	6818      	ldr	r0, [r3, #0]
 801140e:	f7ff bfd2 	b.w	80113b6 <_raise_r>
 8011412:	bf00      	nop
 8011414:	200008b0 	.word	0x200008b0

08011418 <_kill_r>:
 8011418:	b538      	push	{r3, r4, r5, lr}
 801141a:	4d07      	ldr	r5, [pc, #28]	@ (8011438 <_kill_r+0x20>)
 801141c:	2300      	movs	r3, #0
 801141e:	4604      	mov	r4, r0
 8011420:	4608      	mov	r0, r1
 8011422:	4611      	mov	r1, r2
 8011424:	602b      	str	r3, [r5, #0]
 8011426:	f000 f95f 	bl	80116e8 <_kill>
 801142a:	1c43      	adds	r3, r0, #1
 801142c:	d102      	bne.n	8011434 <_kill_r+0x1c>
 801142e:	682b      	ldr	r3, [r5, #0]
 8011430:	b103      	cbz	r3, 8011434 <_kill_r+0x1c>
 8011432:	6023      	str	r3, [r4, #0]
 8011434:	bd38      	pop	{r3, r4, r5, pc}
 8011436:	bf00      	nop
 8011438:	200034ec 	.word	0x200034ec

0801143c <_getpid_r>:
 801143c:	f000 b944 	b.w	80116c8 <_getpid>

08011440 <expf>:
 8011440:	b508      	push	{r3, lr}
 8011442:	ed2d 8b02 	vpush	{d8}
 8011446:	eef0 8a40 	vmov.f32	s17, s0
 801144a:	f000 f85f 	bl	801150c <__ieee754_expf>
 801144e:	eeb0 8a40 	vmov.f32	s16, s0
 8011452:	eeb0 0a68 	vmov.f32	s0, s17
 8011456:	f000 f829 	bl	80114ac <finitef>
 801145a:	b160      	cbz	r0, 8011476 <expf+0x36>
 801145c:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 801149c <expf+0x5c>
 8011460:	eef4 8ae7 	vcmpe.f32	s17, s15
 8011464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011468:	dd0a      	ble.n	8011480 <expf+0x40>
 801146a:	f7fc fde9 	bl	800e040 <__errno>
 801146e:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 80114a0 <expf+0x60>
 8011472:	2322      	movs	r3, #34	@ 0x22
 8011474:	6003      	str	r3, [r0, #0]
 8011476:	eeb0 0a48 	vmov.f32	s0, s16
 801147a:	ecbd 8b02 	vpop	{d8}
 801147e:	bd08      	pop	{r3, pc}
 8011480:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80114a4 <expf+0x64>
 8011484:	eef4 8ae7 	vcmpe.f32	s17, s15
 8011488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801148c:	d5f3      	bpl.n	8011476 <expf+0x36>
 801148e:	f7fc fdd7 	bl	800e040 <__errno>
 8011492:	2322      	movs	r3, #34	@ 0x22
 8011494:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 80114a8 <expf+0x68>
 8011498:	6003      	str	r3, [r0, #0]
 801149a:	e7ec      	b.n	8011476 <expf+0x36>
 801149c:	42b17217 	.word	0x42b17217
 80114a0:	7f800000 	.word	0x7f800000
 80114a4:	c2cff1b5 	.word	0xc2cff1b5
 80114a8:	00000000 	.word	0x00000000

080114ac <finitef>:
 80114ac:	ee10 3a10 	vmov	r3, s0
 80114b0:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80114b4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80114b8:	bfac      	ite	ge
 80114ba:	2000      	movge	r0, #0
 80114bc:	2001      	movlt	r0, #1
 80114be:	4770      	bx	lr

080114c0 <with_errnof>:
 80114c0:	b510      	push	{r4, lr}
 80114c2:	ed2d 8b02 	vpush	{d8}
 80114c6:	eeb0 8a40 	vmov.f32	s16, s0
 80114ca:	4604      	mov	r4, r0
 80114cc:	f7fc fdb8 	bl	800e040 <__errno>
 80114d0:	eeb0 0a48 	vmov.f32	s0, s16
 80114d4:	ecbd 8b02 	vpop	{d8}
 80114d8:	6004      	str	r4, [r0, #0]
 80114da:	bd10      	pop	{r4, pc}

080114dc <xflowf>:
 80114dc:	b130      	cbz	r0, 80114ec <xflowf+0x10>
 80114de:	eef1 7a40 	vneg.f32	s15, s0
 80114e2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80114e6:	2022      	movs	r0, #34	@ 0x22
 80114e8:	f7ff bfea 	b.w	80114c0 <with_errnof>
 80114ec:	eef0 7a40 	vmov.f32	s15, s0
 80114f0:	e7f7      	b.n	80114e2 <xflowf+0x6>
	...

080114f4 <__math_uflowf>:
 80114f4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80114fc <__math_uflowf+0x8>
 80114f8:	f7ff bff0 	b.w	80114dc <xflowf>
 80114fc:	10000000 	.word	0x10000000

08011500 <__math_oflowf>:
 8011500:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011508 <__math_oflowf+0x8>
 8011504:	f7ff bfea 	b.w	80114dc <xflowf>
 8011508:	70000000 	.word	0x70000000

0801150c <__ieee754_expf>:
 801150c:	ee10 2a10 	vmov	r2, s0
 8011510:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8011514:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011518:	d902      	bls.n	8011520 <__ieee754_expf+0x14>
 801151a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801151e:	4770      	bx	lr
 8011520:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8011524:	d106      	bne.n	8011534 <__ieee754_expf+0x28>
 8011526:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8011660 <__ieee754_expf+0x154>
 801152a:	2900      	cmp	r1, #0
 801152c:	bf18      	it	ne
 801152e:	eeb0 0a67 	vmovne.f32	s0, s15
 8011532:	4770      	bx	lr
 8011534:	484b      	ldr	r0, [pc, #300]	@ (8011664 <__ieee754_expf+0x158>)
 8011536:	4282      	cmp	r2, r0
 8011538:	dd02      	ble.n	8011540 <__ieee754_expf+0x34>
 801153a:	2000      	movs	r0, #0
 801153c:	f7ff bfe0 	b.w	8011500 <__math_oflowf>
 8011540:	2a00      	cmp	r2, #0
 8011542:	da05      	bge.n	8011550 <__ieee754_expf+0x44>
 8011544:	4a48      	ldr	r2, [pc, #288]	@ (8011668 <__ieee754_expf+0x15c>)
 8011546:	4293      	cmp	r3, r2
 8011548:	d902      	bls.n	8011550 <__ieee754_expf+0x44>
 801154a:	2000      	movs	r0, #0
 801154c:	f7ff bfd2 	b.w	80114f4 <__math_uflowf>
 8011550:	4a46      	ldr	r2, [pc, #280]	@ (801166c <__ieee754_expf+0x160>)
 8011552:	4293      	cmp	r3, r2
 8011554:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8011558:	d952      	bls.n	8011600 <__ieee754_expf+0xf4>
 801155a:	4a45      	ldr	r2, [pc, #276]	@ (8011670 <__ieee754_expf+0x164>)
 801155c:	4293      	cmp	r3, r2
 801155e:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8011562:	d834      	bhi.n	80115ce <__ieee754_expf+0xc2>
 8011564:	4b43      	ldr	r3, [pc, #268]	@ (8011674 <__ieee754_expf+0x168>)
 8011566:	4413      	add	r3, r2
 8011568:	ed93 7a00 	vldr	s14, [r3]
 801156c:	4b42      	ldr	r3, [pc, #264]	@ (8011678 <__ieee754_expf+0x16c>)
 801156e:	4413      	add	r3, r2
 8011570:	ee30 7a47 	vsub.f32	s14, s0, s14
 8011574:	f1c1 0201 	rsb	r2, r1, #1
 8011578:	edd3 7a00 	vldr	s15, [r3]
 801157c:	1a52      	subs	r2, r2, r1
 801157e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8011582:	ee20 6a00 	vmul.f32	s12, s0, s0
 8011586:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 801167c <__ieee754_expf+0x170>
 801158a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8011680 <__ieee754_expf+0x174>
 801158e:	eee6 6a05 	vfma.f32	s13, s12, s10
 8011592:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8011684 <__ieee754_expf+0x178>
 8011596:	eea6 5a86 	vfma.f32	s10, s13, s12
 801159a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8011688 <__ieee754_expf+0x17c>
 801159e:	eee5 6a06 	vfma.f32	s13, s10, s12
 80115a2:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801168c <__ieee754_expf+0x180>
 80115a6:	eea6 5a86 	vfma.f32	s10, s13, s12
 80115aa:	eef0 6a40 	vmov.f32	s13, s0
 80115ae:	eee5 6a46 	vfms.f32	s13, s10, s12
 80115b2:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80115b6:	ee20 5a26 	vmul.f32	s10, s0, s13
 80115ba:	bb92      	cbnz	r2, 8011622 <__ieee754_expf+0x116>
 80115bc:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80115c0:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80115c4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80115c8:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80115cc:	4770      	bx	lr
 80115ce:	4b30      	ldr	r3, [pc, #192]	@ (8011690 <__ieee754_expf+0x184>)
 80115d0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8011694 <__ieee754_expf+0x188>
 80115d4:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8011698 <__ieee754_expf+0x18c>
 80115d8:	4413      	add	r3, r2
 80115da:	edd3 7a00 	vldr	s15, [r3]
 80115de:	eee0 7a07 	vfma.f32	s15, s0, s14
 80115e2:	eeb0 7a40 	vmov.f32	s14, s0
 80115e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80115ea:	ee17 2a90 	vmov	r2, s15
 80115ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80115f2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80115f6:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801169c <__ieee754_expf+0x190>
 80115fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80115fe:	e7be      	b.n	801157e <__ieee754_expf+0x72>
 8011600:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8011604:	d20b      	bcs.n	801161e <__ieee754_expf+0x112>
 8011606:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80116a0 <__ieee754_expf+0x194>
 801160a:	ee70 6a26 	vadd.f32	s13, s0, s13
 801160e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8011612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011616:	dd02      	ble.n	801161e <__ieee754_expf+0x112>
 8011618:	ee30 0a25 	vadd.f32	s0, s0, s11
 801161c:	4770      	bx	lr
 801161e:	2200      	movs	r2, #0
 8011620:	e7af      	b.n	8011582 <__ieee754_expf+0x76>
 8011622:	ee36 6a66 	vsub.f32	s12, s12, s13
 8011626:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801162a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801162e:	bfb8      	it	lt
 8011630:	3264      	addlt	r2, #100	@ 0x64
 8011632:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011636:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801163a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801163e:	ee17 3a90 	vmov	r3, s15
 8011642:	bfab      	itete	ge
 8011644:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8011648:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801164c:	ee00 3a10 	vmovge	s0, r3
 8011650:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 80116a4 <__ieee754_expf+0x198>
 8011654:	bfbc      	itt	lt
 8011656:	ee00 3a10 	vmovlt	s0, r3
 801165a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801165e:	4770      	bx	lr
 8011660:	00000000 	.word	0x00000000
 8011664:	42b17217 	.word	0x42b17217
 8011668:	42cff1b5 	.word	0x42cff1b5
 801166c:	3eb17218 	.word	0x3eb17218
 8011670:	3f851591 	.word	0x3f851591
 8011674:	0801da48 	.word	0x0801da48
 8011678:	0801da40 	.word	0x0801da40
 801167c:	3331bb4c 	.word	0x3331bb4c
 8011680:	b5ddea0e 	.word	0xb5ddea0e
 8011684:	388ab355 	.word	0x388ab355
 8011688:	bb360b61 	.word	0xbb360b61
 801168c:	3e2aaaab 	.word	0x3e2aaaab
 8011690:	0801da50 	.word	0x0801da50
 8011694:	3fb8aa3b 	.word	0x3fb8aa3b
 8011698:	3f317180 	.word	0x3f317180
 801169c:	3717f7d1 	.word	0x3717f7d1
 80116a0:	7149f2ca 	.word	0x7149f2ca
 80116a4:	0d800000 	.word	0x0d800000

080116a8 <_close>:
 80116a8:	4b02      	ldr	r3, [pc, #8]	@ (80116b4 <_close+0xc>)
 80116aa:	2258      	movs	r2, #88	@ 0x58
 80116ac:	601a      	str	r2, [r3, #0]
 80116ae:	f04f 30ff 	mov.w	r0, #4294967295
 80116b2:	4770      	bx	lr
 80116b4:	200034ec 	.word	0x200034ec

080116b8 <_fstat>:
 80116b8:	4b02      	ldr	r3, [pc, #8]	@ (80116c4 <_fstat+0xc>)
 80116ba:	2258      	movs	r2, #88	@ 0x58
 80116bc:	601a      	str	r2, [r3, #0]
 80116be:	f04f 30ff 	mov.w	r0, #4294967295
 80116c2:	4770      	bx	lr
 80116c4:	200034ec 	.word	0x200034ec

080116c8 <_getpid>:
 80116c8:	4b02      	ldr	r3, [pc, #8]	@ (80116d4 <_getpid+0xc>)
 80116ca:	2258      	movs	r2, #88	@ 0x58
 80116cc:	601a      	str	r2, [r3, #0]
 80116ce:	f04f 30ff 	mov.w	r0, #4294967295
 80116d2:	4770      	bx	lr
 80116d4:	200034ec 	.word	0x200034ec

080116d8 <_isatty>:
 80116d8:	4b02      	ldr	r3, [pc, #8]	@ (80116e4 <_isatty+0xc>)
 80116da:	2258      	movs	r2, #88	@ 0x58
 80116dc:	601a      	str	r2, [r3, #0]
 80116de:	2000      	movs	r0, #0
 80116e0:	4770      	bx	lr
 80116e2:	bf00      	nop
 80116e4:	200034ec 	.word	0x200034ec

080116e8 <_kill>:
 80116e8:	4b02      	ldr	r3, [pc, #8]	@ (80116f4 <_kill+0xc>)
 80116ea:	2258      	movs	r2, #88	@ 0x58
 80116ec:	601a      	str	r2, [r3, #0]
 80116ee:	f04f 30ff 	mov.w	r0, #4294967295
 80116f2:	4770      	bx	lr
 80116f4:	200034ec 	.word	0x200034ec

080116f8 <_lseek>:
 80116f8:	4b02      	ldr	r3, [pc, #8]	@ (8011704 <_lseek+0xc>)
 80116fa:	2258      	movs	r2, #88	@ 0x58
 80116fc:	601a      	str	r2, [r3, #0]
 80116fe:	f04f 30ff 	mov.w	r0, #4294967295
 8011702:	4770      	bx	lr
 8011704:	200034ec 	.word	0x200034ec

08011708 <_read>:
 8011708:	4b02      	ldr	r3, [pc, #8]	@ (8011714 <_read+0xc>)
 801170a:	2258      	movs	r2, #88	@ 0x58
 801170c:	601a      	str	r2, [r3, #0]
 801170e:	f04f 30ff 	mov.w	r0, #4294967295
 8011712:	4770      	bx	lr
 8011714:	200034ec 	.word	0x200034ec

08011718 <_exit>:
 8011718:	e7fe      	b.n	8011718 <_exit>
	...

0801171c <_init>:
 801171c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801171e:	bf00      	nop
 8011720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011722:	bc08      	pop	{r3}
 8011724:	469e      	mov	lr, r3
 8011726:	4770      	bx	lr

08011728 <_fini>:
 8011728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801172a:	bf00      	nop
 801172c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801172e:	bc08      	pop	{r3}
 8011730:	469e      	mov	lr, r3
 8011732:	4770      	bx	lr
