
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08007a54  08007a54  00008a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ad8  08007ad8  00009010  2**0
                  CONTENTS
  4 .ARM          00000008  08007ad8  08007ad8  00008ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ae0  08007ae0  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ae0  08007ae0  00008ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ae4  08007ae4  00008ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007ae8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e4  20000010  08007af8  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020f4  08007af8  000090f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000265a5  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004af0  00000000  00000000  0002f5e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002320  00000000  00000000  000340d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b6c  00000000  00000000  000363f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000054cf  00000000  00000000  00037f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000281db  00000000  00000000  0003d433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107f77  00000000  00000000  0006560e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016d585  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009814  00000000  00000000  0016d5c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00176ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a3c 	.word	0x08007a3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007a3c 	.word	0x08007a3c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af02      	add	r7, sp, #8
 /* USER CODE BEGIN 1 */
 /* USER CODE END 1 */
 /* MCU Configuration--------------------------------------------------------*/
 /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 HAL_Init();
 80004c6:	f000 fffc 	bl	80014c2 <HAL_Init>
 /* USER CODE BEGIN Init */
 /* USER CODE END Init */
 /* Configure the system clock */
 SystemClock_Config();
 80004ca:	f000 f847 	bl	800055c <SystemClock_Config>
 /* USER CODE BEGIN SysInit */
 /* USER CODE END SysInit */
 /* Initialize all configured peripherals */
 MX_GPIO_Init();
 80004ce:	f000 fa0f 	bl	80008f0 <MX_GPIO_Init>
 MX_DFSDM1_Init();
 80004d2:	f000 f8a5 	bl	8000620 <MX_DFSDM1_Init>
 MX_I2C2_Init();
 80004d6:	f000 f8db 	bl	8000690 <MX_I2C2_Init>
 MX_QUADSPI_Init();
 80004da:	f000 f917 	bl	800070c <MX_QUADSPI_Init>
 MX_SPI3_Init();
 80004de:	f000 f93b 	bl	8000758 <MX_SPI3_Init>
 MX_USART1_UART_Init();
 80004e2:	f000 f977 	bl	80007d4 <MX_USART1_UART_Init>
 MX_USB_OTG_FS_PCD_Init();
 80004e6:	f000 f9d5 	bl	8000894 <MX_USB_OTG_FS_PCD_Init>
 MX_USART2_UART_Init();
 80004ea:	f000 f9a3 	bl	8000834 <MX_USART2_UART_Init>
 /* Create the thread(s) */
 /* creation of defaultTask */
 //defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 /* USER CODE BEGIN RTOS_THREADS */
 /* add threads, ... */
 BaseType_t xReturned = xTaskCreate(vTaskFunction1, "Task 1 New", 128,
 80004ee:	4b12      	ldr	r3, [pc, #72]	@ (8000538 <main+0x78>)
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2301      	movs	r3, #1
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	2300      	movs	r3, #0
 80004f8:	2280      	movs	r2, #128	@ 0x80
 80004fa:	4910      	ldr	r1, [pc, #64]	@ (800053c <main+0x7c>)
 80004fc:	4810      	ldr	r0, [pc, #64]	@ (8000540 <main+0x80>)
 80004fe:	f005 fc55 	bl	8005dac <xTaskCreate>
 8000502:	6078      	str	r0, [r7, #4]
 NULL, 1, &xHandle1);//green
 if (xReturned != pdPASS)
 ; //add code to handle error
 xReturned = xTaskCreate(vTaskFunction2, "Task 2 New", 128, NULL, 1,
 8000504:	4b0f      	ldr	r3, [pc, #60]	@ (8000544 <main+0x84>)
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	2301      	movs	r3, #1
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2300      	movs	r3, #0
 800050e:	2280      	movs	r2, #128	@ 0x80
 8000510:	490d      	ldr	r1, [pc, #52]	@ (8000548 <main+0x88>)
 8000512:	480e      	ldr	r0, [pc, #56]	@ (800054c <main+0x8c>)
 8000514:	f005 fc4a 	bl	8005dac <xTaskCreate>
 8000518:	6078      	str	r0, [r7, #4]
 &xHandle2);//orange
 if (xReturned != pdPASS)
   ;
 xReturned = xTaskCreate(vTaskFunction3, "Task 3 New", 128, NULL, 3,
 800051a:	4b0d      	ldr	r3, [pc, #52]	@ (8000550 <main+0x90>)
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	2303      	movs	r3, #3
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2300      	movs	r3, #0
 8000524:	2280      	movs	r2, #128	@ 0x80
 8000526:	490b      	ldr	r1, [pc, #44]	@ (8000554 <main+0x94>)
 8000528:	480b      	ldr	r0, [pc, #44]	@ (8000558 <main+0x98>)
 800052a:	f005 fc3f 	bl	8005dac <xTaskCreate>
 800052e:	6078      	str	r0, [r7, #4]
 &xHandle3);//blue
 if (xReturned != pdPASS)
 ; // add code to handle error
 vTaskStartScheduler(); // start scheduler
 8000530:	f005 fd82 	bl	8006038 <vTaskStartScheduler>
 /* Start scheduler */
 //osKernelStart();
 /* We should never get here as control is now taken by the scheduler */
 /* Infinite loop */
 /* USER CODE BEGIN WHILE */
 while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <main+0x74>
 8000538:	2000076c 	.word	0x2000076c
 800053c:	08007a54 	.word	0x08007a54
 8000540:	08000c55 	.word	0x08000c55
 8000544:	20000770 	.word	0x20000770
 8000548:	08007a60 	.word	0x08007a60
 800054c:	08000c9d 	.word	0x08000c9d
 8000550:	20000774 	.word	0x20000774
 8000554:	08007a6c 	.word	0x08007a6c
 8000558:	08000ce5 	.word	0x08000ce5

0800055c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b096      	sub	sp, #88	@ 0x58
 8000560:	af00      	add	r7, sp, #0
 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	2244      	movs	r2, #68	@ 0x44
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f007 fa2c 	bl	80079c8 <memset>
 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	463b      	mov	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]
 /** Configure the main internal regulator output voltage
 */
 if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800057e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000582:	f001 fe6b 	bl	800225c <HAL_PWREx_ControlVoltageScaling>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x34>
 {
   Error_Handler();
 800058c:	f000 fbe0 	bl	8000d50 <Error_Handler>
 }
 /** Configure LSE Drive Capability
 */
 HAL_PWR_EnableBkUpAccess();
 8000590:	f001 fe46 	bl	8002220 <HAL_PWR_EnableBkUpAccess>
 __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000594:	4b21      	ldr	r3, [pc, #132]	@ (800061c <SystemClock_Config+0xc0>)
 8000596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800059a:	4a20      	ldr	r2, [pc, #128]	@ (800061c <SystemClock_Config+0xc0>)
 800059c:	f023 0318 	bic.w	r3, r3, #24
 80005a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 /** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005a4:	2314      	movs	r3, #20
 80005a6:	617b      	str	r3, [r7, #20]
 RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	61fb      	str	r3, [r7, #28]
 RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 RCC_OscInitStruct.MSICalibrationValue = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	633b      	str	r3, [r7, #48]	@ 0x30
 RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005b4:	2360      	movs	r3, #96	@ 0x60
 80005b6:	637b      	str	r3, [r7, #52]	@ 0x34
 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	2302      	movs	r3, #2
 80005ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005bc:	2301      	movs	r3, #1
 80005be:	643b      	str	r3, [r7, #64]	@ 0x40
 RCC_OscInitStruct.PLL.PLLM = 1;
 80005c0:	2301      	movs	r3, #1
 80005c2:	647b      	str	r3, [r7, #68]	@ 0x44
 RCC_OscInitStruct.PLL.PLLN = 40;
 80005c4:	2328      	movs	r3, #40	@ 0x28
 80005c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005c8:	2307      	movs	r3, #7
 80005ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	653b      	str	r3, [r7, #80]	@ 0x50
 RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	657b      	str	r3, [r7, #84]	@ 0x54
 if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 ff61 	bl	80024a0 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x8c>
 {
   Error_Handler();
 80005e4:	f000 fbb4 	bl	8000d50 <Error_Handler>
 }
 /** Initializes the CPU, AHB and APB buses clocks
 */
 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	603b      	str	r3, [r7, #0]
                             |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2303      	movs	r3, #3
 80005ee:	607b      	str	r3, [r7, #4]
 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
 if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005fc:	463b      	mov	r3, r7
 80005fe:	2104      	movs	r1, #4
 8000600:	4618      	mov	r0, r3
 8000602:	f002 fb29 	bl	8002c58 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xb4>
 {
   Error_Handler();
 800060c:	f000 fba0 	bl	8000d50 <Error_Handler>
 }
 /** Enable MSI Auto calibration
 */
 HAL_RCCEx_EnableMSIPLLMode();
 8000610:	f003 f862 	bl	80036d8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000614:	bf00      	nop
 8000616:	3758      	adds	r7, #88	@ 0x58
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40021000 	.word	0x40021000

08000620 <MX_DFSDM1_Init>:
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN DFSDM1_Init 0 */
 /* USER CODE END DFSDM1_Init 0 */
 /* USER CODE BEGIN DFSDM1_Init 1 */
 /* USER CODE END DFSDM1_Init 1 */
 hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000624:	4b18      	ldr	r3, [pc, #96]	@ (8000688 <MX_DFSDM1_Init+0x68>)
 8000626:	4a19      	ldr	r2, [pc, #100]	@ (800068c <MX_DFSDM1_Init+0x6c>)
 8000628:	601a      	str	r2, [r3, #0]
 hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800062a:	4b17      	ldr	r3, [pc, #92]	@ (8000688 <MX_DFSDM1_Init+0x68>)
 800062c:	2201      	movs	r2, #1
 800062e:	711a      	strb	r2, [r3, #4]
 hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000630:	4b15      	ldr	r3, [pc, #84]	@ (8000688 <MX_DFSDM1_Init+0x68>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
 hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000636:	4b14      	ldr	r3, [pc, #80]	@ (8000688 <MX_DFSDM1_Init+0x68>)
 8000638:	2202      	movs	r2, #2
 800063a:	60da      	str	r2, [r3, #12]
 hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800063c:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <MX_DFSDM1_Init+0x68>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
 hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000642:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <MX_DFSDM1_Init+0x68>)
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
 hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000648:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <MX_DFSDM1_Init+0x68>)
 800064a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800064e:	619a      	str	r2, [r3, #24]
 hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000650:	4b0d      	ldr	r3, [pc, #52]	@ (8000688 <MX_DFSDM1_Init+0x68>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
 hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000656:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <MX_DFSDM1_Init+0x68>)
 8000658:	2204      	movs	r2, #4
 800065a:	621a      	str	r2, [r3, #32]
 hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800065c:	4b0a      	ldr	r3, [pc, #40]	@ (8000688 <MX_DFSDM1_Init+0x68>)
 800065e:	2200      	movs	r2, #0
 8000660:	625a      	str	r2, [r3, #36]	@ 0x24
 hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000662:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <MX_DFSDM1_Init+0x68>)
 8000664:	2201      	movs	r2, #1
 8000666:	629a      	str	r2, [r3, #40]	@ 0x28
 hdfsdm1_channel1.Init.Offset = 0;
 8000668:	4b07      	ldr	r3, [pc, #28]	@ (8000688 <MX_DFSDM1_Init+0x68>)
 800066a:	2200      	movs	r2, #0
 800066c:	62da      	str	r2, [r3, #44]	@ 0x2c
 hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800066e:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <MX_DFSDM1_Init+0x68>)
 8000670:	2200      	movs	r2, #0
 8000672:	631a      	str	r2, [r3, #48]	@ 0x30
 if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	@ (8000688 <MX_DFSDM1_Init+0x68>)
 8000676:	f001 f863 	bl	8001740 <HAL_DFSDM_ChannelInit>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_DFSDM1_Init+0x64>
 {
   Error_Handler();
 8000680:	f000 fb66 	bl	8000d50 <Error_Handler>
 }
 /* USER CODE BEGIN DFSDM1_Init 2 */
 /* USER CODE END DFSDM1_Init 2 */
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	2000002c 	.word	0x2000002c
 800068c:	40016020 	.word	0x40016020

08000690 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN I2C2_Init 0 */
 /* USER CODE END I2C2_Init 0 */
 /* USER CODE BEGIN I2C2_Init 1 */
 /* USER CODE END I2C2_Init 1 */
 hi2c2.Instance = I2C2;
 8000694:	4b1b      	ldr	r3, [pc, #108]	@ (8000704 <MX_I2C2_Init+0x74>)
 8000696:	4a1c      	ldr	r2, [pc, #112]	@ (8000708 <MX_I2C2_Init+0x78>)
 8000698:	601a      	str	r2, [r3, #0]
 hi2c2.Init.Timing = 0x00000E14;
 800069a:	4b1a      	ldr	r3, [pc, #104]	@ (8000704 <MX_I2C2_Init+0x74>)
 800069c:	f640 6214 	movw	r2, #3604	@ 0xe14
 80006a0:	605a      	str	r2, [r3, #4]
 hi2c2.Init.OwnAddress1 = 0;
 80006a2:	4b18      	ldr	r3, [pc, #96]	@ (8000704 <MX_I2C2_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
 hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a8:	4b16      	ldr	r3, [pc, #88]	@ (8000704 <MX_I2C2_Init+0x74>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	60da      	str	r2, [r3, #12]
 hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ae:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <MX_I2C2_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
 hi2c2.Init.OwnAddress2 = 0;
 80006b4:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <MX_I2C2_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
 hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ba:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MX_I2C2_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
 hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c0:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <MX_I2C2_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
 hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_I2C2_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
 if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006cc:	480d      	ldr	r0, [pc, #52]	@ (8000704 <MX_I2C2_Init+0x74>)
 80006ce:	f001 fb42 	bl	8001d56 <HAL_I2C_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_I2C2_Init+0x4c>
 {
   Error_Handler();
 80006d8:	f000 fb3a 	bl	8000d50 <Error_Handler>
 }
 /** Configure Analogue filter
 */
 if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006dc:	2100      	movs	r1, #0
 80006de:	4809      	ldr	r0, [pc, #36]	@ (8000704 <MX_I2C2_Init+0x74>)
 80006e0:	f001 fbd4 	bl	8001e8c <HAL_I2CEx_ConfigAnalogFilter>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_I2C2_Init+0x5e>
 {
   Error_Handler();
 80006ea:	f000 fb31 	bl	8000d50 <Error_Handler>
 }
 /** Configure Digital filter
 */
 if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006ee:	2100      	movs	r1, #0
 80006f0:	4804      	ldr	r0, [pc, #16]	@ (8000704 <MX_I2C2_Init+0x74>)
 80006f2:	f001 fc16 	bl	8001f22 <HAL_I2CEx_ConfigDigitalFilter>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C2_Init+0x70>
 {
   Error_Handler();
 80006fc:	f000 fb28 	bl	8000d50 <Error_Handler>
 }
 /* USER CODE BEGIN I2C2_Init 2 */
 /* USER CODE END I2C2_Init 2 */
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000064 	.word	0x20000064
 8000708:	40005800 	.word	0x40005800

0800070c <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN QUADSPI_Init 0 */
 /* USER CODE END QUADSPI_Init 0 */
 /* USER CODE BEGIN QUADSPI_Init 1 */
 /* USER CODE END QUADSPI_Init 1 */
 /* QUADSPI parameter configuration*/
 hqspi.Instance = QUADSPI;
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_QUADSPI_Init+0x44>)
 8000712:	4a10      	ldr	r2, [pc, #64]	@ (8000754 <MX_QUADSPI_Init+0x48>)
 8000714:	601a      	str	r2, [r3, #0]
 hqspi.Init.ClockPrescaler = 2;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_QUADSPI_Init+0x44>)
 8000718:	2202      	movs	r2, #2
 800071a:	605a      	str	r2, [r3, #4]
 hqspi.Init.FifoThreshold = 4;
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_QUADSPI_Init+0x44>)
 800071e:	2204      	movs	r2, #4
 8000720:	609a      	str	r2, [r3, #8]
 hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <MX_QUADSPI_Init+0x44>)
 8000724:	2210      	movs	r2, #16
 8000726:	60da      	str	r2, [r3, #12]
 hqspi.Init.FlashSize = 23;
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_QUADSPI_Init+0x44>)
 800072a:	2217      	movs	r2, #23
 800072c:	611a      	str	r2, [r3, #16]
 hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <MX_QUADSPI_Init+0x44>)
 8000730:	2200      	movs	r2, #0
 8000732:	615a      	str	r2, [r3, #20]
 hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_QUADSPI_Init+0x44>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]
 if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	@ (8000750 <MX_QUADSPI_Init+0x44>)
 800073c:	f001 fdf4 	bl	8002328 <HAL_QSPI_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_QUADSPI_Init+0x3e>
 {
   Error_Handler();
 8000746:	f000 fb03 	bl	8000d50 <Error_Handler>
 }
 /* USER CODE BEGIN QUADSPI_Init 2 */
 /* USER CODE END QUADSPI_Init 2 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000b8 	.word	0x200000b8
 8000754:	a0001000 	.word	0xa0001000

08000758 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN SPI3_Init 0 */
 /* USER CODE END SPI3_Init 0 */
 /* USER CODE BEGIN SPI3_Init 1 */
 /* USER CODE END SPI3_Init 1 */
 /* SPI3 parameter configuration*/
 hspi3.Instance = SPI3;
 800075c:	4b1b      	ldr	r3, [pc, #108]	@ (80007cc <MX_SPI3_Init+0x74>)
 800075e:	4a1c      	ldr	r2, [pc, #112]	@ (80007d0 <MX_SPI3_Init+0x78>)
 8000760:	601a      	str	r2, [r3, #0]
 hspi3.Init.Mode = SPI_MODE_MASTER;
 8000762:	4b1a      	ldr	r3, [pc, #104]	@ (80007cc <MX_SPI3_Init+0x74>)
 8000764:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000768:	605a      	str	r2, [r3, #4]
 hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800076a:	4b18      	ldr	r3, [pc, #96]	@ (80007cc <MX_SPI3_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
 hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000770:	4b16      	ldr	r3, [pc, #88]	@ (80007cc <MX_SPI3_Init+0x74>)
 8000772:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000776:	60da      	str	r2, [r3, #12]
 hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000778:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <MX_SPI3_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
 hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800077e:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <MX_SPI3_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
 hspi3.Init.NSS = SPI_NSS_SOFT;
 8000784:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_SPI3_Init+0x74>)
 8000786:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800078a:	619a      	str	r2, [r3, #24]
 hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800078c:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <MX_SPI3_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
 hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000792:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_SPI3_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
 hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000798:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <MX_SPI3_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	@ 0x24
 hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <MX_SPI3_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	629a      	str	r2, [r3, #40]	@ 0x28
 hspi3.Init.CRCPolynomial = 7;
 80007a4:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_SPI3_Init+0x74>)
 80007a6:	2207      	movs	r2, #7
 80007a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <MX_SPI3_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	631a      	str	r2, [r3, #48]	@ 0x30
 hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007b0:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_SPI3_Init+0x74>)
 80007b2:	2208      	movs	r2, #8
 80007b4:	635a      	str	r2, [r3, #52]	@ 0x34
 if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	@ (80007cc <MX_SPI3_Init+0x74>)
 80007b8:	f003 f970 	bl	8003a9c <HAL_SPI_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_SPI3_Init+0x6e>
 {
   Error_Handler();
 80007c2:	f000 fac5 	bl	8000d50 <Error_Handler>
 }
 /* USER CODE BEGIN SPI3_Init 2 */
 /* USER CODE END SPI3_Init 2 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000fc 	.word	0x200000fc
 80007d0:	40003c00 	.word	0x40003c00

080007d4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN USART1_Init 0 */
 /* USER CODE END USART1_Init 0 */
 /* USER CODE BEGIN USART1_Init 1 */
 /* USER CODE END USART1_Init 1 */
 huart1.Instance = USART1;
 80007d8:	4b14      	ldr	r3, [pc, #80]	@ (800082c <MX_USART1_UART_Init+0x58>)
 80007da:	4a15      	ldr	r2, [pc, #84]	@ (8000830 <MX_USART1_UART_Init+0x5c>)
 80007dc:	601a      	str	r2, [r3, #0]
 huart1.Init.BaudRate = 115200;
 80007de:	4b13      	ldr	r3, [pc, #76]	@ (800082c <MX_USART1_UART_Init+0x58>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
 huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_USART1_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
 huart1.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <MX_USART1_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
 huart1.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_USART1_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
 huart1.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_USART1_UART_Init+0x58>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
 huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <MX_USART1_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
 huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_USART1_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
 huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <MX_USART1_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
 huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_USART1_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	@ 0x24
 if (HAL_UART_Init(&huart1) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_USART1_UART_Init+0x58>)
 8000818:	f003 fca8 	bl	800416c <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART1_UART_Init+0x52>
 {
   Error_Handler();
 8000822:	f000 fa95 	bl	8000d50 <Error_Handler>
 }
 /* USER CODE BEGIN USART1_Init 2 */
 /* USER CODE END USART1_Init 2 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000160 	.word	0x20000160
 8000830:	40013800 	.word	0x40013800

08000834 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN USART2_Init 0 */
 /* USER CODE END USART2_Init 0 */
 /* USER CODE BEGIN USART2_Init 1 */
 /* USER CODE END USART2_Init 1 */
 huart2.Instance = USART2;
 8000838:	4b14      	ldr	r3, [pc, #80]	@ (800088c <MX_USART2_UART_Init+0x58>)
 800083a:	4a15      	ldr	r2, [pc, #84]	@ (8000890 <MX_USART2_UART_Init+0x5c>)
 800083c:	601a      	str	r2, [r3, #0]
 huart2.Init.BaudRate = 115200;
 800083e:	4b13      	ldr	r3, [pc, #76]	@ (800088c <MX_USART2_UART_Init+0x58>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
 huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
 huart2.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <MX_USART2_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
 huart2.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_USART2_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
 huart2.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <MX_USART2_UART_Init+0x58>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
 huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <MX_USART2_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
 huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_USART2_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
 huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
 huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_USART2_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	@ 0x24
 if (HAL_UART_Init(&huart2) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	@ (800088c <MX_USART2_UART_Init+0x58>)
 8000878:	f003 fc78 	bl	800416c <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART2_UART_Init+0x52>
 {
   Error_Handler();
 8000882:	f000 fa65 	bl	8000d50 <Error_Handler>
 }
 /* USER CODE BEGIN USART2_Init 2 */
 /* USER CODE END USART2_Init 2 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200001e8 	.word	0x200001e8
 8000890:	40004400 	.word	0x40004400

08000894 <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN USB_OTG_FS_Init 0 */
 /* USER CODE END USB_OTG_FS_Init 0 */
 /* USER CODE BEGIN USB_OTG_FS_Init 1 */
 /* USER CODE END USB_OTG_FS_Init 1 */
 hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000898:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800089e:	601a      	str	r2, [r3, #0]
 hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008a0:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	2206      	movs	r2, #6
 80008a4:	711a      	strb	r2, [r3, #4]
 hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	71da      	strb	r2, [r3, #7]
 hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	2202      	movs	r2, #2
 80008b0:	725a      	strb	r2, [r3, #9]
 hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	729a      	strb	r2, [r3, #10]
 hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	72da      	strb	r2, [r3, #11]
 hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	731a      	strb	r2, [r3, #12]
 hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80008c4:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	735a      	strb	r2, [r3, #13]
 hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	73da      	strb	r2, [r3, #15]
 hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	739a      	strb	r2, [r3, #14]
 if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d8:	f001 fb6f 	bl	8001fba <HAL_PCD_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USB_OTG_FS_PCD_Init+0x52>
 {
   Error_Handler();
 80008e2:	f000 fa35 	bl	8000d50 <Error_Handler>
 }
 /* USER CODE BEGIN USB_OTG_FS_Init 2 */
 /* USER CODE END USB_OTG_FS_Init 2 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000270 	.word	0x20000270

080008f0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	@ 0x28
 80008f4:	af00      	add	r7, sp, #0
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */
 /* GPIO Ports Clock Enable */
 __HAL_RCC_GPIOE_CLK_ENABLE();
 8000906:	4bbd      	ldr	r3, [pc, #756]	@ (8000bfc <MX_GPIO_Init+0x30c>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	4abc      	ldr	r2, [pc, #752]	@ (8000bfc <MX_GPIO_Init+0x30c>)
 800090c:	f043 0310 	orr.w	r3, r3, #16
 8000910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000912:	4bba      	ldr	r3, [pc, #744]	@ (8000bfc <MX_GPIO_Init+0x30c>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	f003 0310 	and.w	r3, r3, #16
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
 __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	4bb7      	ldr	r3, [pc, #732]	@ (8000bfc <MX_GPIO_Init+0x30c>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	4ab6      	ldr	r2, [pc, #728]	@ (8000bfc <MX_GPIO_Init+0x30c>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092a:	4bb4      	ldr	r3, [pc, #720]	@ (8000bfc <MX_GPIO_Init+0x30c>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4bb1      	ldr	r3, [pc, #708]	@ (8000bfc <MX_GPIO_Init+0x30c>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	4ab0      	ldr	r2, [pc, #704]	@ (8000bfc <MX_GPIO_Init+0x30c>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000942:	4bae      	ldr	r3, [pc, #696]	@ (8000bfc <MX_GPIO_Init+0x30c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
 __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4bab      	ldr	r3, [pc, #684]	@ (8000bfc <MX_GPIO_Init+0x30c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	4aaa      	ldr	r2, [pc, #680]	@ (8000bfc <MX_GPIO_Init+0x30c>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095a:	4ba8      	ldr	r3, [pc, #672]	@ (8000bfc <MX_GPIO_Init+0x30c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
 __HAL_RCC_GPIOD_CLK_ENABLE();
 8000966:	4ba5      	ldr	r3, [pc, #660]	@ (8000bfc <MX_GPIO_Init+0x30c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	4aa4      	ldr	r2, [pc, #656]	@ (8000bfc <MX_GPIO_Init+0x30c>)
 800096c:	f043 0308 	orr.w	r3, r3, #8
 8000970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000972:	4ba2      	ldr	r3, [pc, #648]	@ (8000bfc <MX_GPIO_Init+0x30c>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000984:	489e      	ldr	r0, [pc, #632]	@ (8000c00 <MX_GPIO_Init+0x310>)
 8000986:	f001 f991 	bl	8001cac <HAL_GPIO_WritePin>
 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000990:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000994:	f001 f98a 	bl	8001cac <HAL_GPIO_WritePin>
 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000998:	2200      	movs	r2, #0
 800099a:	f24f 0114 	movw	r1, #61460	@ 0xf014
 800099e:	4899      	ldr	r0, [pc, #612]	@ (8000c04 <MX_GPIO_Init+0x314>)
 80009a0:	f001 f984 	bl	8001cac <HAL_GPIO_WritePin>
                         |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);
 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f241 0181 	movw	r1, #4225	@ 0x1081
 80009aa:	4897      	ldr	r0, [pc, #604]	@ (8000c08 <MX_GPIO_Init+0x318>)
 80009ac:	f001 f97e 	bl	8001cac <HAL_GPIO_WritePin>
 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009b6:	4894      	ldr	r0, [pc, #592]	@ (8000c08 <MX_GPIO_Init+0x318>)
 80009b8:	f001 f978 	bl	8001cac <HAL_GPIO_WritePin>
 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80009c2:	4892      	ldr	r0, [pc, #584]	@ (8000c0c <MX_GPIO_Init+0x31c>)
 80009c4:	f001 f972 	bl	8001cac <HAL_GPIO_WritePin>
 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2120      	movs	r1, #32
 80009cc:	488d      	ldr	r0, [pc, #564]	@ (8000c04 <MX_GPIO_Init+0x314>)
 80009ce:	f001 f96d 	bl	8001cac <HAL_GPIO_WritePin>
 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	2101      	movs	r1, #1
 80009d6:	488a      	ldr	r0, [pc, #552]	@ (8000c00 <MX_GPIO_Init+0x310>)
 80009d8:	f001 f968 	bl	8001cac <HAL_GPIO_WritePin>
 /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
 GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80009dc:	f240 1315 	movw	r3, #277	@ 0x115
 80009e0:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
 HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	4882      	ldr	r0, [pc, #520]	@ (8000c00 <MX_GPIO_Init+0x310>)
 80009f6:	f000 ffaf 	bl	8001958 <HAL_GPIO_Init>
 /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
 GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80009fa:	236a      	movs	r3, #106	@ 0x6a
 80009fc:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009fe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a02:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
 HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	487c      	ldr	r0, [pc, #496]	@ (8000c00 <MX_GPIO_Init+0x310>)
 8000a10:	f000 ffa2 	bl	8001958 <HAL_GPIO_Init>
 /*Configure GPIO pin : BUTTON_EXTI13_Pin */
 GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000a14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a18:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a1a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a1e:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
 HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4878      	ldr	r0, [pc, #480]	@ (8000c0c <MX_GPIO_Init+0x31c>)
 8000a2c:	f000 ff94 	bl	8001958 <HAL_GPIO_Init>
 /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                          ARD_A1_Pin ARD_A0_Pin */
 GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000a30:	233f      	movs	r3, #63	@ 0x3f
 8000a32:	617b      	str	r3, [r7, #20]
                         |ARD_A1_Pin|ARD_A0_Pin;
 GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a34:	230b      	movs	r3, #11
 8000a36:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
 HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4872      	ldr	r0, [pc, #456]	@ (8000c0c <MX_GPIO_Init+0x31c>)
 8000a44:	f000 ff88 	bl	8001958 <HAL_GPIO_Init>
 /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
 GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a66:	f000 ff77 	bl	8001958 <HAL_GPIO_Init>
 /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
 GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a6a:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000a6e:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a86:	f000 ff67 	bl	8001958 <HAL_GPIO_Init>
 /*Configure GPIO pin : ARD_D4_Pin */
 GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000a8a:	2308      	movs	r3, #8
 8000a8c:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
 HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa8:	f000 ff56 	bl	8001958 <HAL_GPIO_Init>
 /*Configure GPIO pin : ARD_D7_Pin */
 GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000aac:	2310      	movs	r3, #16
 8000aae:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ab0:	230b      	movs	r3, #11
 8000ab2:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
 HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac2:	f000 ff49 	bl	8001958 <HAL_GPIO_Init>
 /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
 GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000ac6:	23e0      	movs	r3, #224	@ 0xe0
 8000ac8:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae4:	f000 ff38 	bl	8001958 <HAL_GPIO_Init>
 /*Configure GPIO pin : ARD_D3_Pin */
 GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000af0:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
 HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4841      	ldr	r0, [pc, #260]	@ (8000c04 <MX_GPIO_Init+0x314>)
 8000afe:	f000 ff2b 	bl	8001958 <HAL_GPIO_Init>
 /*Configure GPIO pin : ARD_D6_Pin */
 GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b02:	2302      	movs	r3, #2
 8000b04:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b06:	230b      	movs	r3, #11
 8000b08:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
 HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	483b      	ldr	r0, [pc, #236]	@ (8000c04 <MX_GPIO_Init+0x314>)
 8000b16:	f000 ff1f 	bl	8001958 <HAL_GPIO_Init>
 /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                          SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
 GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b1a:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000b1e:	617b      	str	r3, [r7, #20]
                         |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
 HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	4834      	ldr	r0, [pc, #208]	@ (8000c04 <MX_GPIO_Init+0x314>)
 8000b34:	f000 ff10 	bl	8001958 <HAL_GPIO_Init>
 /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
 GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000b38:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b3c:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b4a:	2307      	movs	r3, #7
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	482c      	ldr	r0, [pc, #176]	@ (8000c08 <MX_GPIO_Init+0x318>)
 8000b56:	f000 feff 	bl	8001958 <HAL_GPIO_Init>
 /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                          PMOD_IRQ_EXTI12_Pin */
 GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b5a:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000b5e:	617b      	str	r3, [r7, #20]
                         |PMOD_IRQ_EXTI12_Pin;
 GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b64:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
 HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4825      	ldr	r0, [pc, #148]	@ (8000c08 <MX_GPIO_Init+0x318>)
 8000b72:	f000 fef1 	bl	8001958 <HAL_GPIO_Init>
 /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
 GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b76:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000b7a:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
 HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	481e      	ldr	r0, [pc, #120]	@ (8000c08 <MX_GPIO_Init+0x318>)
 8000b90:	f000 fee2 	bl	8001958 <HAL_GPIO_Init>
 /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
 GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b94:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b98:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
 HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4817      	ldr	r0, [pc, #92]	@ (8000c0c <MX_GPIO_Init+0x31c>)
 8000bae:	f000 fed3 	bl	8001958 <HAL_GPIO_Init>
 /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
 GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000bb2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000bb6:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bbc:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
 HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4810      	ldr	r0, [pc, #64]	@ (8000c0c <MX_GPIO_Init+0x31c>)
 8000bca:	f000 fec5 	bl	8001958 <HAL_GPIO_Init>
 /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
 GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bde:	2305      	movs	r3, #5
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
 HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4807      	ldr	r0, [pc, #28]	@ (8000c08 <MX_GPIO_Init+0x318>)
 8000bea:	f000 feb5 	bl	8001958 <HAL_GPIO_Init>
 /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
 GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000bee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bf2:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf4:	2312      	movs	r3, #18
 8000bf6:	61bb      	str	r3, [r7, #24]
 8000bf8:	e00a      	b.n	8000c10 <MX_GPIO_Init+0x320>
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	48001000 	.word	0x48001000
 8000c04:	48000400 	.word	0x48000400
 8000c08:	48000c00 	.word	0x48000c00
 8000c0c:	48000800 	.word	0x48000800
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	480b      	ldr	r0, [pc, #44]	@ (8000c50 <MX_GPIO_Init+0x360>)
 8000c24:	f000 fe98 	bl	8001958 <HAL_GPIO_Init>
 /* EXTI interrupt init*/
 HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2105      	movs	r1, #5
 8000c2c:	2017      	movs	r0, #23
 8000c2e:	f000 fd5d 	bl	80016ec <HAL_NVIC_SetPriority>
 HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c32:	2017      	movs	r0, #23
 8000c34:	f000 fd76 	bl	8001724 <HAL_NVIC_EnableIRQ>
 HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2105      	movs	r1, #5
 8000c3c:	2028      	movs	r0, #40	@ 0x28
 8000c3e:	f000 fd55 	bl	80016ec <HAL_NVIC_SetPriority>
 HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c42:	2028      	movs	r0, #40	@ 0x28
 8000c44:	f000 fd6e 	bl	8001724 <HAL_NVIC_EnableIRQ>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c48:	bf00      	nop
 8000c4a:	3728      	adds	r7, #40	@ 0x28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	48000400 	.word	0x48000400

08000c54 <vTaskFunction1>:
/* USER CODE BEGIN 4 */
void vTaskFunction1(void *pvParameters) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
for (;;) {
// Task code here
start1 = xTaskGetTickCount();
 8000c5c:	f005 fb00 	bl	8006260 <xTaskGetTickCount>
 8000c60:	4603      	mov	r3, r0
 8000c62:	461a      	mov	r2, r3
 8000c64:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <vTaskFunction1+0x3c>)
 8000c66:	601a      	str	r2, [r3, #0]
HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14);
 8000c68:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <vTaskFunction1+0x40>)
 8000c6e:	f001 f835 	bl	8001cdc <HAL_GPIO_TogglePin>
HAL_Delay(250);
 8000c72:	20fa      	movs	r0, #250	@ 0xfa
 8000c74:	f000 fc5e 	bl	8001534 <HAL_Delay>
stop1 = xTaskGetTickCount() - start1;
 8000c78:	f005 faf2 	bl	8006260 <xTaskGetTickCount>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	4a04      	ldr	r2, [pc, #16]	@ (8000c90 <vTaskFunction1+0x3c>)
 8000c80:	6812      	ldr	r2, [r2, #0]
 8000c82:	1a9b      	subs	r3, r3, r2
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <vTaskFunction1+0x44>)
 8000c88:	601a      	str	r2, [r3, #0]
start1 = xTaskGetTickCount();
 8000c8a:	bf00      	nop
 8000c8c:	e7e6      	b.n	8000c5c <vTaskFunction1+0x8>
 8000c8e:	bf00      	nop
 8000c90:	20000754 	.word	0x20000754
 8000c94:	48000400 	.word	0x48000400
 8000c98:	20000758 	.word	0x20000758

08000c9c <vTaskFunction2>:
//taskYIELD();
//vTaskDelay(250);
}
vTaskDelete(NULL);
}
void vTaskFunction2(void *pvParameters) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
for (;;) {
// Task code here
start2 = xTaskGetTickCount();
 8000ca4:	f005 fadc 	bl	8006260 <xTaskGetTickCount>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <vTaskFunction2+0x3c>)
 8000cae:	601a      	str	r2, [r3, #0]
HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_3);
 8000cb0:	2108      	movs	r1, #8
 8000cb2:	480a      	ldr	r0, [pc, #40]	@ (8000cdc <vTaskFunction2+0x40>)
 8000cb4:	f001 f812 	bl	8001cdc <HAL_GPIO_TogglePin>
HAL_Delay(500);
 8000cb8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cbc:	f000 fc3a 	bl	8001534 <HAL_Delay>
stop2 = xTaskGetTickCount() - start2;
 8000cc0:	f005 face 	bl	8006260 <xTaskGetTickCount>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	4a04      	ldr	r2, [pc, #16]	@ (8000cd8 <vTaskFunction2+0x3c>)
 8000cc8:	6812      	ldr	r2, [r2, #0]
 8000cca:	1a9b      	subs	r3, r3, r2
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <vTaskFunction2+0x44>)
 8000cd0:	601a      	str	r2, [r3, #0]
start2 = xTaskGetTickCount();
 8000cd2:	bf00      	nop
 8000cd4:	e7e6      	b.n	8000ca4 <vTaskFunction2+0x8>
 8000cd6:	bf00      	nop
 8000cd8:	2000075c 	.word	0x2000075c
 8000cdc:	48001000 	.word	0x48001000
 8000ce0:	20000760 	.word	0x20000760

08000ce4 <vTaskFunction3>:
//taskYIELD();
//vTaskDelay(500);
}
vTaskDelete(NULL);
}
void vTaskFunction3(void *pvParameters) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	for (;;) {
	// Task code here
		start3 = xTaskGetTickCount();
 8000cec:	f005 fab8 	bl	8006260 <xTaskGetTickCount>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <vTaskFunction3+0x3c>)
 8000cf6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin (LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin);
 8000cf8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cfc:	4809      	ldr	r0, [pc, #36]	@ (8000d24 <vTaskFunction3+0x40>)
 8000cfe:	f000 ffed 	bl	8001cdc <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000d02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d06:	f000 fc15 	bl	8001534 <HAL_Delay>
		stop3 = xTaskGetTickCount() - start3;
 8000d0a:	f005 faa9 	bl	8006260 <xTaskGetTickCount>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4a03      	ldr	r2, [pc, #12]	@ (8000d20 <vTaskFunction3+0x3c>)
 8000d12:	6812      	ldr	r2, [r2, #0]
 8000d14:	1a9b      	subs	r3, r3, r2
 8000d16:	461a      	mov	r2, r3
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <vTaskFunction3+0x44>)
 8000d1a:	601a      	str	r2, [r3, #0]
		start3 = xTaskGetTickCount();
 8000d1c:	bf00      	nop
 8000d1e:	e7e5      	b.n	8000cec <vTaskFunction3+0x8>
 8000d20:	20000764 	.word	0x20000764
 8000d24:	48000800 	.word	0x48000800
 8000d28:	20000768 	.word	0x20000768

08000d2c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 /* USER CODE BEGIN Callback 0 */
 /* USER CODE END Callback 0 */
 if (htim->Instance == TIM6) {
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a04      	ldr	r2, [pc, #16]	@ (8000d4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d101      	bne.n	8000d42 <HAL_TIM_PeriodElapsedCallback+0x16>
   HAL_IncTick();
 8000d3e:	f000 fbd9 	bl	80014f4 <HAL_IncTick>
 }
 /* USER CODE BEGIN Callback 1 */
 /* USER CODE END Callback 1 */
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40001000 	.word	0x40001000

08000d50 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	bf00      	nop
 /* USER CODE BEGIN Error_Handler_Debug */
 /* User can add his own implementation to report the HAL error return state */
 __disable_irq();
 while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <Error_Handler+0x8>

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <HAL_MspInit+0x4c>)
 8000d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d66:	4a10      	ldr	r2, [pc, #64]	@ (8000da8 <HAL_MspInit+0x4c>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <HAL_MspInit+0x4c>)
 8000d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <HAL_MspInit+0x4c>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <HAL_MspInit+0x4c>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d86:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <HAL_MspInit+0x4c>)
 8000d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	210f      	movs	r1, #15
 8000d96:	f06f 0001 	mvn.w	r0, #1
 8000d9a:	f000 fca7 	bl	80016ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000

08000dac <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b0ac      	sub	sp, #176	@ 0xb0
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2288      	movs	r2, #136	@ 0x88
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f006 fdfb 	bl	80079c8 <memset>
  if(DFSDM1_Init == 0)
 8000dd2:	4b25      	ldr	r3, [pc, #148]	@ (8000e68 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d142      	bne.n	8000e60 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000dda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dde:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4618      	mov	r0, r3
 8000dec:	f002 f98a 	bl	8003104 <HAL_RCCEx_PeriphCLKConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000df6:	f7ff ffab 	bl	8000d50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8000e6c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8000e6c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e04:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e06:	4b19      	ldr	r3, [pc, #100]	@ (8000e6c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e12:	4b16      	ldr	r3, [pc, #88]	@ (8000e6c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e16:	4a15      	ldr	r2, [pc, #84]	@ (8000e6c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e18:	f043 0310 	orr.w	r3, r3, #16
 8000e1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e1e:	4b13      	ldr	r3, [pc, #76]	@ (8000e6c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e22:	f003 0310 	and.w	r3, r3, #16
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000e2a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000e2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e44:	2306      	movs	r3, #6
 8000e46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e4a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4807      	ldr	r0, [pc, #28]	@ (8000e70 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000e52:	f000 fd81 	bl	8001958 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000e56:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	4a02      	ldr	r2, [pc, #8]	@ (8000e68 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e5e:	6013      	str	r3, [r2, #0]
  }

}
 8000e60:	bf00      	nop
 8000e62:	37b0      	adds	r7, #176	@ 0xb0
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000778 	.word	0x20000778
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	48001000 	.word	0x48001000

08000e74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b0ac      	sub	sp, #176	@ 0xb0
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2288      	movs	r2, #136	@ 0x88
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f006 fd97 	bl	80079c8 <memset>
  if(hi2c->Instance==I2C2)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a21      	ldr	r2, [pc, #132]	@ (8000f24 <HAL_I2C_MspInit+0xb0>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d13b      	bne.n	8000f1c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ea4:	2380      	movs	r3, #128	@ 0x80
 8000ea6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f002 f927 	bl	8003104 <HAL_RCCEx_PeriphCLKConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ebc:	f7ff ff48 	bl	8000d50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec0:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <HAL_I2C_MspInit+0xb4>)
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec4:	4a18      	ldr	r2, [pc, #96]	@ (8000f28 <HAL_I2C_MspInit+0xb4>)
 8000ec6:	f043 0302 	orr.w	r3, r3, #2
 8000eca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ecc:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <HAL_I2C_MspInit+0xb4>)
 8000ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000ed8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000edc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ee0:	2312      	movs	r3, #18
 8000ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000efc:	4619      	mov	r1, r3
 8000efe:	480b      	ldr	r0, [pc, #44]	@ (8000f2c <HAL_I2C_MspInit+0xb8>)
 8000f00:	f000 fd2a 	bl	8001958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f04:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <HAL_I2C_MspInit+0xb4>)
 8000f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f08:	4a07      	ldr	r2, [pc, #28]	@ (8000f28 <HAL_I2C_MspInit+0xb4>)
 8000f0a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f10:	4b05      	ldr	r3, [pc, #20]	@ (8000f28 <HAL_I2C_MspInit+0xb4>)
 8000f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000f1c:	bf00      	nop
 8000f1e:	37b0      	adds	r7, #176	@ 0xb0
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40005800 	.word	0x40005800
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	48000400 	.word	0x48000400

08000f30 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	@ 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a17      	ldr	r2, [pc, #92]	@ (8000fac <HAL_QSPI_MspInit+0x7c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d128      	bne.n	8000fa4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f52:	4b17      	ldr	r3, [pc, #92]	@ (8000fb0 <HAL_QSPI_MspInit+0x80>)
 8000f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f56:	4a16      	ldr	r2, [pc, #88]	@ (8000fb0 <HAL_QSPI_MspInit+0x80>)
 8000f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8000f5e:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <HAL_QSPI_MspInit+0x80>)
 8000f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <HAL_QSPI_MspInit+0x80>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6e:	4a10      	ldr	r2, [pc, #64]	@ (8000fb0 <HAL_QSPI_MspInit+0x80>)
 8000f70:	f043 0310 	orr.w	r3, r3, #16
 8000f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f76:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <HAL_QSPI_MspInit+0x80>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7a:	f003 0310 	and.w	r3, r3, #16
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000f82:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000f86:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f94:	230a      	movs	r3, #10
 8000f96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <HAL_QSPI_MspInit+0x84>)
 8000fa0:	f000 fcda 	bl	8001958 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8000fa4:	bf00      	nop
 8000fa6:	3728      	adds	r7, #40	@ 0x28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	a0001000 	.word	0xa0001000
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	48001000 	.word	0x48001000

08000fb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	@ 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a17      	ldr	r2, [pc, #92]	@ (8001034 <HAL_SPI_MspInit+0x7c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d128      	bne.n	800102c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fda:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <HAL_SPI_MspInit+0x80>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fde:	4a16      	ldr	r2, [pc, #88]	@ (8001038 <HAL_SPI_MspInit+0x80>)
 8000fe0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fe4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <HAL_SPI_MspInit+0x80>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <HAL_SPI_MspInit+0x80>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff6:	4a10      	ldr	r2, [pc, #64]	@ (8001038 <HAL_SPI_MspInit+0x80>)
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <HAL_SPI_MspInit+0x80>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800100a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800101c:	2306      	movs	r3, #6
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	4805      	ldr	r0, [pc, #20]	@ (800103c <HAL_SPI_MspInit+0x84>)
 8001028:	f000 fc96 	bl	8001958 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	@ 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40003c00 	.word	0x40003c00
 8001038:	40021000 	.word	0x40021000
 800103c:	48000800 	.word	0x48000800

08001040 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b0ae      	sub	sp, #184	@ 0xb8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	2288      	movs	r2, #136	@ 0x88
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f006 fcb1 	bl	80079c8 <memset>
  if(huart->Instance==USART1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a41      	ldr	r2, [pc, #260]	@ (8001170 <HAL_UART_MspInit+0x130>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d13b      	bne.n	80010e8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001070:	2301      	movs	r3, #1
 8001072:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001074:	2300      	movs	r3, #0
 8001076:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	4618      	mov	r0, r3
 800107e:	f002 f841 	bl	8003104 <HAL_RCCEx_PeriphCLKConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001088:	f7ff fe62 	bl	8000d50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800108c:	4b39      	ldr	r3, [pc, #228]	@ (8001174 <HAL_UART_MspInit+0x134>)
 800108e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001090:	4a38      	ldr	r2, [pc, #224]	@ (8001174 <HAL_UART_MspInit+0x134>)
 8001092:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001096:	6613      	str	r3, [r2, #96]	@ 0x60
 8001098:	4b36      	ldr	r3, [pc, #216]	@ (8001174 <HAL_UART_MspInit+0x134>)
 800109a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800109c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010a0:	61bb      	str	r3, [r7, #24]
 80010a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	4b33      	ldr	r3, [pc, #204]	@ (8001174 <HAL_UART_MspInit+0x134>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a8:	4a32      	ldr	r2, [pc, #200]	@ (8001174 <HAL_UART_MspInit+0x134>)
 80010aa:	f043 0302 	orr.w	r3, r3, #2
 80010ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b0:	4b30      	ldr	r3, [pc, #192]	@ (8001174 <HAL_UART_MspInit+0x134>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80010bc:	23c0      	movs	r3, #192	@ 0xc0
 80010be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ce:	2303      	movs	r3, #3
 80010d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010d4:	2307      	movs	r3, #7
 80010d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010de:	4619      	mov	r1, r3
 80010e0:	4825      	ldr	r0, [pc, #148]	@ (8001178 <HAL_UART_MspInit+0x138>)
 80010e2:	f000 fc39 	bl	8001958 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010e6:	e03f      	b.n	8001168 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a23      	ldr	r2, [pc, #140]	@ (800117c <HAL_UART_MspInit+0x13c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d13a      	bne.n	8001168 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 f800 	bl	8003104 <HAL_RCCEx_PeriphCLKConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800110a:	f7ff fe21 	bl	8000d50 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <HAL_UART_MspInit+0x134>)
 8001110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001112:	4a18      	ldr	r2, [pc, #96]	@ (8001174 <HAL_UART_MspInit+0x134>)
 8001114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001118:	6593      	str	r3, [r2, #88]	@ 0x58
 800111a:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <HAL_UART_MspInit+0x134>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001126:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <HAL_UART_MspInit+0x134>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	4a12      	ldr	r2, [pc, #72]	@ (8001174 <HAL_UART_MspInit+0x134>)
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001132:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <HAL_UART_MspInit+0x134>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800113e:	2378      	movs	r3, #120	@ 0x78
 8001140:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001156:	2307      	movs	r3, #7
 8001158:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800115c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001160:	4619      	mov	r1, r3
 8001162:	4807      	ldr	r0, [pc, #28]	@ (8001180 <HAL_UART_MspInit+0x140>)
 8001164:	f000 fbf8 	bl	8001958 <HAL_GPIO_Init>
}
 8001168:	bf00      	nop
 800116a:	37b8      	adds	r7, #184	@ 0xb8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40013800 	.word	0x40013800
 8001174:	40021000 	.word	0x40021000
 8001178:	48000400 	.word	0x48000400
 800117c:	40004400 	.word	0x40004400
 8001180:	48000c00 	.word	0x48000c00

08001184 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b0ac      	sub	sp, #176	@ 0xb0
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2288      	movs	r2, #136	@ 0x88
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f006 fc0f 	bl	80079c8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011b2:	d17c      	bne.n	80012ae <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011b8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80011ba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80011be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80011c2:	2301      	movs	r3, #1
 80011c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80011ca:	2318      	movs	r3, #24
 80011cc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011ce:	2307      	movs	r3, #7
 80011d0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011d2:	2302      	movs	r3, #2
 80011d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80011da:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80011de:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 ff8d 	bl	8003104 <HAL_RCCEx_PeriphCLKConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80011f0:	f7ff fdae 	bl	8000d50 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	4b30      	ldr	r3, [pc, #192]	@ (80012b8 <HAL_PCD_MspInit+0x134>)
 80011f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f8:	4a2f      	ldr	r2, [pc, #188]	@ (80012b8 <HAL_PCD_MspInit+0x134>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001200:	4b2d      	ldr	r3, [pc, #180]	@ (80012b8 <HAL_PCD_MspInit+0x134>)
 8001202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800120c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001210:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001224:	4619      	mov	r1, r3
 8001226:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800122a:	f000 fb95 	bl	8001958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800122e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001232:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001248:	230a      	movs	r3, #10
 800124a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001252:	4619      	mov	r1, r3
 8001254:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001258:	f000 fb7e 	bl	8001958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800125c:	4b16      	ldr	r3, [pc, #88]	@ (80012b8 <HAL_PCD_MspInit+0x134>)
 800125e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001260:	4a15      	ldr	r2, [pc, #84]	@ (80012b8 <HAL_PCD_MspInit+0x134>)
 8001262:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001266:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001268:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <HAL_PCD_MspInit+0x134>)
 800126a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001274:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <HAL_PCD_MspInit+0x134>)
 8001276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d114      	bne.n	80012aa <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001280:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <HAL_PCD_MspInit+0x134>)
 8001282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001284:	4a0c      	ldr	r2, [pc, #48]	@ (80012b8 <HAL_PCD_MspInit+0x134>)
 8001286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800128a:	6593      	str	r3, [r2, #88]	@ 0x58
 800128c:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <HAL_PCD_MspInit+0x134>)
 800128e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001298:	f001 f836 	bl	8002308 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_PCD_MspInit+0x134>)
 800129e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a0:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <HAL_PCD_MspInit+0x134>)
 80012a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80012a8:	e001      	b.n	80012ae <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80012aa:	f001 f82d 	bl	8002308 <HAL_PWREx_EnableVddUSB>
}
 80012ae:	bf00      	nop
 80012b0:	37b0      	adds	r7, #176	@ 0xb0
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000

080012bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	@ 0x38
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012ca:	4b34      	ldr	r3, [pc, #208]	@ (800139c <HAL_InitTick+0xe0>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ce:	4a33      	ldr	r2, [pc, #204]	@ (800139c <HAL_InitTick+0xe0>)
 80012d0:	f043 0310 	orr.w	r3, r3, #16
 80012d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012d6:	4b31      	ldr	r3, [pc, #196]	@ (800139c <HAL_InitTick+0xe0>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012e2:	f107 0210 	add.w	r2, r7, #16
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f001 fe77 	bl	8002fe0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d103      	bne.n	8001304 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012fc:	f001 fe44 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8001300:	6378      	str	r0, [r7, #52]	@ 0x34
 8001302:	e004      	b.n	800130e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001304:	f001 fe40 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8001308:	4603      	mov	r3, r0
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800130e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001310:	4a23      	ldr	r2, [pc, #140]	@ (80013a0 <HAL_InitTick+0xe4>)
 8001312:	fba2 2303 	umull	r2, r3, r2, r3
 8001316:	0c9b      	lsrs	r3, r3, #18
 8001318:	3b01      	subs	r3, #1
 800131a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800131c:	4b21      	ldr	r3, [pc, #132]	@ (80013a4 <HAL_InitTick+0xe8>)
 800131e:	4a22      	ldr	r2, [pc, #136]	@ (80013a8 <HAL_InitTick+0xec>)
 8001320:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001322:	4b20      	ldr	r3, [pc, #128]	@ (80013a4 <HAL_InitTick+0xe8>)
 8001324:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001328:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800132a:	4a1e      	ldr	r2, [pc, #120]	@ (80013a4 <HAL_InitTick+0xe8>)
 800132c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800132e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001330:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <HAL_InitTick+0xe8>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001336:	4b1b      	ldr	r3, [pc, #108]	@ (80013a4 <HAL_InitTick+0xe8>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133c:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <HAL_InitTick+0xe8>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001342:	4818      	ldr	r0, [pc, #96]	@ (80013a4 <HAL_InitTick+0xe8>)
 8001344:	f002 fc4d 	bl	8003be2 <HAL_TIM_Base_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800134e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001352:	2b00      	cmp	r3, #0
 8001354:	d11b      	bne.n	800138e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001356:	4813      	ldr	r0, [pc, #76]	@ (80013a4 <HAL_InitTick+0xe8>)
 8001358:	f002 fca4 	bl	8003ca4 <HAL_TIM_Base_Start_IT>
 800135c:	4603      	mov	r3, r0
 800135e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001362:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001366:	2b00      	cmp	r3, #0
 8001368:	d111      	bne.n	800138e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800136a:	2036      	movs	r0, #54	@ 0x36
 800136c:	f000 f9da 	bl	8001724 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b0f      	cmp	r3, #15
 8001374:	d808      	bhi.n	8001388 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001376:	2200      	movs	r2, #0
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	2036      	movs	r0, #54	@ 0x36
 800137c:	f000 f9b6 	bl	80016ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001380:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <HAL_InitTick+0xf0>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e002      	b.n	800138e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800138e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001392:	4618      	mov	r0, r3
 8001394:	3738      	adds	r7, #56	@ 0x38
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000
 80013a0:	431bde83 	.word	0x431bde83
 80013a4:	2000077c 	.word	0x2000077c
 80013a8:	40001000 	.word	0x40001000
 80013ac:	20000004 	.word	0x20000004

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <NMI_Handler+0x4>

080013b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <HardFault_Handler+0x4>

080013c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <MemManage_Handler+0x4>

080013c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80013ea:	2020      	movs	r0, #32
 80013ec:	f000 fc90 	bl	8001d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80013f0:	2040      	movs	r0, #64	@ 0x40
 80013f2:	f000 fc8d 	bl	8001d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80013f6:	2080      	movs	r0, #128	@ 0x80
 80013f8:	f000 fc8a 	bl	8001d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80013fc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001400:	f000 fc86 	bl	8001d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}

08001408 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800140c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001410:	f000 fc7e 	bl	8001d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001414:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001418:	f000 fc7a 	bl	8001d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800141c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001420:	f000 fc76 	bl	8001d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001424:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001428:	f000 fc72 	bl	8001d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800142c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001430:	f000 fc6e 	bl	8001d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800143c:	4802      	ldr	r0, [pc, #8]	@ (8001448 <TIM6_DAC_IRQHandler+0x10>)
 800143e:	f002 fca1 	bl	8003d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2000077c 	.word	0x2000077c

0800144c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <SystemInit+0x20>)
 8001452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001456:	4a05      	ldr	r2, [pc, #20]	@ (800146c <SystemInit+0x20>)
 8001458:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800145c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001470:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001474:	f7ff ffea 	bl	800144c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001478:	480c      	ldr	r0, [pc, #48]	@ (80014ac <LoopForever+0x6>)
  ldr r1, =_edata
 800147a:	490d      	ldr	r1, [pc, #52]	@ (80014b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800147c:	4a0d      	ldr	r2, [pc, #52]	@ (80014b4 <LoopForever+0xe>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001480:	e002      	b.n	8001488 <LoopCopyDataInit>

08001482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001486:	3304      	adds	r3, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800148c:	d3f9      	bcc.n	8001482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001490:	4c0a      	ldr	r4, [pc, #40]	@ (80014bc <LoopForever+0x16>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001494:	e001      	b.n	800149a <LoopFillZerobss>

08001496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001498:	3204      	adds	r2, #4

0800149a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800149c:	d3fb      	bcc.n	8001496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800149e:	f006 fa9b 	bl	80079d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014a2:	f7ff f80d 	bl	80004c0 <main>

080014a6 <LoopForever>:

LoopForever:
    b LoopForever
 80014a6:	e7fe      	b.n	80014a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014b4:	08007ae8 	.word	0x08007ae8
  ldr r2, =_sbss
 80014b8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014bc:	200020f4 	.word	0x200020f4

080014c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC1_2_IRQHandler>

080014c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014cc:	2003      	movs	r0, #3
 80014ce:	f000 f902 	bl	80016d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014d2:	200f      	movs	r0, #15
 80014d4:	f7ff fef2 	bl	80012bc <HAL_InitTick>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d002      	beq.n	80014e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	71fb      	strb	r3, [r7, #7]
 80014e2:	e001      	b.n	80014e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014e4:	f7ff fc3a 	bl	8000d5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014e8:	79fb      	ldrb	r3, [r7, #7]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	@ (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000008 	.word	0x20000008
 8001518:	200007c8 	.word	0x200007c8

0800151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	200007c8 	.word	0x200007c8

08001534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800153c:	f7ff ffee 	bl	800151c <HAL_GetTick>
 8001540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154c:	d005      	beq.n	800155a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800154e:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <HAL_Delay+0x44>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800155a:	bf00      	nop
 800155c:	f7ff ffde 	bl	800151c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	429a      	cmp	r2, r3
 800156a:	d8f7      	bhi.n	800155c <HAL_Delay+0x28>
  {
  }
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000008 	.word	0x20000008

0800157c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	@ (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c8:	4b04      	ldr	r3, [pc, #16]	@ (80015dc <__NVIC_GetPriorityGrouping+0x18>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	f003 0307 	and.w	r3, r3, #7
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	db0b      	blt.n	800160a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	f003 021f 	and.w	r2, r3, #31
 80015f8:	4907      	ldr	r1, [pc, #28]	@ (8001618 <__NVIC_EnableIRQ+0x38>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	2001      	movs	r0, #1
 8001602:	fa00 f202 	lsl.w	r2, r0, r2
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000e100 	.word	0xe000e100

0800161c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	db0a      	blt.n	8001646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	490c      	ldr	r1, [pc, #48]	@ (8001668 <__NVIC_SetPriority+0x4c>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	0112      	lsls	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	440b      	add	r3, r1
 8001640:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001644:	e00a      	b.n	800165c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4908      	ldr	r1, [pc, #32]	@ (800166c <__NVIC_SetPriority+0x50>)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	3b04      	subs	r3, #4
 8001654:	0112      	lsls	r2, r2, #4
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	440b      	add	r3, r1
 800165a:	761a      	strb	r2, [r3, #24]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000e100 	.word	0xe000e100
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	@ 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f1c3 0307 	rsb	r3, r3, #7
 800168a:	2b04      	cmp	r3, #4
 800168c:	bf28      	it	cs
 800168e:	2304      	movcs	r3, #4
 8001690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3304      	adds	r3, #4
 8001696:	2b06      	cmp	r3, #6
 8001698:	d902      	bls.n	80016a0 <NVIC_EncodePriority+0x30>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3b03      	subs	r3, #3
 800169e:	e000      	b.n	80016a2 <NVIC_EncodePriority+0x32>
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 32ff 	mov.w	r2, #4294967295
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	401a      	ands	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	43d9      	mvns	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	4313      	orrs	r3, r2
         );
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3724      	adds	r7, #36	@ 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ff4c 	bl	800157c <__NVIC_SetPriorityGrouping>
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016fe:	f7ff ff61 	bl	80015c4 <__NVIC_GetPriorityGrouping>
 8001702:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	68b9      	ldr	r1, [r7, #8]
 8001708:	6978      	ldr	r0, [r7, #20]
 800170a:	f7ff ffb1 	bl	8001670 <NVIC_EncodePriority>
 800170e:	4602      	mov	r2, r0
 8001710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff80 	bl	800161c <__NVIC_SetPriority>
}
 800171c:	bf00      	nop
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ff54 	bl	80015e0 <__NVIC_EnableIRQ>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e0ac      	b.n	80018ac <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f000 f8b2 	bl	80018c0 <DFSDM_GetChannelFromInstance>
 800175c:	4603      	mov	r3, r0
 800175e:	4a55      	ldr	r2, [pc, #340]	@ (80018b4 <HAL_DFSDM_ChannelInit+0x174>)
 8001760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e09f      	b.n	80018ac <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff fb1d 	bl	8000dac <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001772:	4b51      	ldr	r3, [pc, #324]	@ (80018b8 <HAL_DFSDM_ChannelInit+0x178>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	4a4f      	ldr	r2, [pc, #316]	@ (80018b8 <HAL_DFSDM_ChannelInit+0x178>)
 800177a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800177c:	4b4e      	ldr	r3, [pc, #312]	@ (80018b8 <HAL_DFSDM_ChannelInit+0x178>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d125      	bne.n	80017d0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001784:	4b4d      	ldr	r3, [pc, #308]	@ (80018bc <HAL_DFSDM_ChannelInit+0x17c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a4c      	ldr	r2, [pc, #304]	@ (80018bc <HAL_DFSDM_ChannelInit+0x17c>)
 800178a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800178e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001790:	4b4a      	ldr	r3, [pc, #296]	@ (80018bc <HAL_DFSDM_ChannelInit+0x17c>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4948      	ldr	r1, [pc, #288]	@ (80018bc <HAL_DFSDM_ChannelInit+0x17c>)
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800179e:	4b47      	ldr	r3, [pc, #284]	@ (80018bc <HAL_DFSDM_ChannelInit+0x17c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a46      	ldr	r2, [pc, #280]	@ (80018bc <HAL_DFSDM_ChannelInit+0x17c>)
 80017a4:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80017a8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	791b      	ldrb	r3, [r3, #4]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d108      	bne.n	80017c4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80017b2:	4b42      	ldr	r3, [pc, #264]	@ (80018bc <HAL_DFSDM_ChannelInit+0x17c>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	041b      	lsls	r3, r3, #16
 80017be:	493f      	ldr	r1, [pc, #252]	@ (80018bc <HAL_DFSDM_ChannelInit+0x17c>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80017c4:	4b3d      	ldr	r3, [pc, #244]	@ (80018bc <HAL_DFSDM_ChannelInit+0x17c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a3c      	ldr	r2, [pc, #240]	@ (80018bc <HAL_DFSDM_ChannelInit+0x17c>)
 80017ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80017ce:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80017de:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6819      	ldr	r1, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017ee:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80017f4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 020f 	bic.w	r2, r2, #15
 800180c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6819      	ldr	r1, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001834:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6899      	ldr	r1, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001844:	3b01      	subs	r3, #1
 8001846:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001848:	431a      	orrs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f002 0207 	and.w	r2, r2, #7
 8001860:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001874:	431a      	orrs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800188c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f810 	bl	80018c0 <DFSDM_GetChannelFromInstance>
 80018a0:	4602      	mov	r2, r0
 80018a2:	4904      	ldr	r1, [pc, #16]	@ (80018b4 <HAL_DFSDM_ChannelInit+0x174>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200007d0 	.word	0x200007d0
 80018b8:	200007cc 	.word	0x200007cc
 80018bc:	40016000 	.word	0x40016000

080018c0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a1c      	ldr	r2, [pc, #112]	@ (800193c <DFSDM_GetChannelFromInstance+0x7c>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d102      	bne.n	80018d6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	e02b      	b.n	800192e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a19      	ldr	r2, [pc, #100]	@ (8001940 <DFSDM_GetChannelFromInstance+0x80>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d102      	bne.n	80018e4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80018de:	2301      	movs	r3, #1
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	e024      	b.n	800192e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a17      	ldr	r2, [pc, #92]	@ (8001944 <DFSDM_GetChannelFromInstance+0x84>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d102      	bne.n	80018f2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80018ec:	2302      	movs	r3, #2
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	e01d      	b.n	800192e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a14      	ldr	r2, [pc, #80]	@ (8001948 <DFSDM_GetChannelFromInstance+0x88>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d102      	bne.n	8001900 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80018fa:	2304      	movs	r3, #4
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	e016      	b.n	800192e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a12      	ldr	r2, [pc, #72]	@ (800194c <DFSDM_GetChannelFromInstance+0x8c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d102      	bne.n	800190e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001908:	2305      	movs	r3, #5
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	e00f      	b.n	800192e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a0f      	ldr	r2, [pc, #60]	@ (8001950 <DFSDM_GetChannelFromInstance+0x90>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d102      	bne.n	800191c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001916:	2306      	movs	r3, #6
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	e008      	b.n	800192e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a0d      	ldr	r2, [pc, #52]	@ (8001954 <DFSDM_GetChannelFromInstance+0x94>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d102      	bne.n	800192a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001924:	2307      	movs	r3, #7
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	e001      	b.n	800192e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800192a:	2303      	movs	r3, #3
 800192c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800192e:	68fb      	ldr	r3, [r7, #12]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40016000 	.word	0x40016000
 8001940:	40016020 	.word	0x40016020
 8001944:	40016040 	.word	0x40016040
 8001948:	40016080 	.word	0x40016080
 800194c:	400160a0 	.word	0x400160a0
 8001950:	400160c0 	.word	0x400160c0
 8001954:	400160e0 	.word	0x400160e0

08001958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001966:	e17f      	b.n	8001c68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2101      	movs	r1, #1
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 8171 	beq.w	8001c62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b01      	cmp	r3, #1
 800198a:	d005      	beq.n	8001998 <HAL_GPIO_Init+0x40>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d130      	bne.n	80019fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ce:	2201      	movs	r2, #1
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	091b      	lsrs	r3, r3, #4
 80019e4:	f003 0201 	and.w	r2, r3, #1
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d118      	bne.n	8001a38 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	08db      	lsrs	r3, r3, #3
 8001a22:	f003 0201 	and.w	r2, r3, #1
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d017      	beq.n	8001a74 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d123      	bne.n	8001ac8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	08da      	lsrs	r2, r3, #3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3208      	adds	r2, #8
 8001a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	220f      	movs	r2, #15
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	08da      	lsrs	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3208      	adds	r2, #8
 8001ac2:	6939      	ldr	r1, [r7, #16]
 8001ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0203 	and.w	r2, r3, #3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 80ac 	beq.w	8001c62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	4b5f      	ldr	r3, [pc, #380]	@ (8001c88 <HAL_GPIO_Init+0x330>)
 8001b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b0e:	4a5e      	ldr	r2, [pc, #376]	@ (8001c88 <HAL_GPIO_Init+0x330>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b16:	4b5c      	ldr	r3, [pc, #368]	@ (8001c88 <HAL_GPIO_Init+0x330>)
 8001b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b22:	4a5a      	ldr	r2, [pc, #360]	@ (8001c8c <HAL_GPIO_Init+0x334>)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	3302      	adds	r3, #2
 8001b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	220f      	movs	r2, #15
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b4c:	d025      	beq.n	8001b9a <HAL_GPIO_Init+0x242>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a4f      	ldr	r2, [pc, #316]	@ (8001c90 <HAL_GPIO_Init+0x338>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d01f      	beq.n	8001b96 <HAL_GPIO_Init+0x23e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a4e      	ldr	r2, [pc, #312]	@ (8001c94 <HAL_GPIO_Init+0x33c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d019      	beq.n	8001b92 <HAL_GPIO_Init+0x23a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4d      	ldr	r2, [pc, #308]	@ (8001c98 <HAL_GPIO_Init+0x340>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <HAL_GPIO_Init+0x236>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4c      	ldr	r2, [pc, #304]	@ (8001c9c <HAL_GPIO_Init+0x344>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00d      	beq.n	8001b8a <HAL_GPIO_Init+0x232>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4b      	ldr	r2, [pc, #300]	@ (8001ca0 <HAL_GPIO_Init+0x348>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d007      	beq.n	8001b86 <HAL_GPIO_Init+0x22e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4a      	ldr	r2, [pc, #296]	@ (8001ca4 <HAL_GPIO_Init+0x34c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d101      	bne.n	8001b82 <HAL_GPIO_Init+0x22a>
 8001b7e:	2306      	movs	r3, #6
 8001b80:	e00c      	b.n	8001b9c <HAL_GPIO_Init+0x244>
 8001b82:	2307      	movs	r3, #7
 8001b84:	e00a      	b.n	8001b9c <HAL_GPIO_Init+0x244>
 8001b86:	2305      	movs	r3, #5
 8001b88:	e008      	b.n	8001b9c <HAL_GPIO_Init+0x244>
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	e006      	b.n	8001b9c <HAL_GPIO_Init+0x244>
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e004      	b.n	8001b9c <HAL_GPIO_Init+0x244>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e002      	b.n	8001b9c <HAL_GPIO_Init+0x244>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_GPIO_Init+0x244>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	f002 0203 	and.w	r2, r2, #3
 8001ba2:	0092      	lsls	r2, r2, #2
 8001ba4:	4093      	lsls	r3, r2
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bac:	4937      	ldr	r1, [pc, #220]	@ (8001c8c <HAL_GPIO_Init+0x334>)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	089b      	lsrs	r3, r3, #2
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bba:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca8 <HAL_GPIO_Init+0x350>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bde:	4a32      	ldr	r2, [pc, #200]	@ (8001ca8 <HAL_GPIO_Init+0x350>)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001be4:	4b30      	ldr	r3, [pc, #192]	@ (8001ca8 <HAL_GPIO_Init+0x350>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c08:	4a27      	ldr	r2, [pc, #156]	@ (8001ca8 <HAL_GPIO_Init+0x350>)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c0e:	4b26      	ldr	r3, [pc, #152]	@ (8001ca8 <HAL_GPIO_Init+0x350>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c32:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca8 <HAL_GPIO_Init+0x350>)
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca8 <HAL_GPIO_Init+0x350>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c5c:	4a12      	ldr	r2, [pc, #72]	@ (8001ca8 <HAL_GPIO_Init+0x350>)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	3301      	adds	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f47f ae78 	bne.w	8001968 <HAL_GPIO_Init+0x10>
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	371c      	adds	r7, #28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40010000 	.word	0x40010000
 8001c90:	48000400 	.word	0x48000400
 8001c94:	48000800 	.word	0x48000800
 8001c98:	48000c00 	.word	0x48000c00
 8001c9c:	48001000 	.word	0x48001000
 8001ca0:	48001400 	.word	0x48001400
 8001ca4:	48001800 	.word	0x48001800
 8001ca8:	40010400 	.word	0x40010400

08001cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cbc:	787b      	ldrb	r3, [r7, #1]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cc2:	887a      	ldrh	r2, [r7, #2]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cc8:	e002      	b.n	8001cd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cee:	887a      	ldrh	r2, [r7, #2]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	041a      	lsls	r2, r3, #16
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	43d9      	mvns	r1, r3
 8001cfa:	887b      	ldrh	r3, [r7, #2]
 8001cfc:	400b      	ands	r3, r1
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	619a      	str	r2, [r3, #24]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d1a:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d006      	beq.n	8001d34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d26:	4a05      	ldr	r2, [pc, #20]	@ (8001d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d28:	88fb      	ldrh	r3, [r7, #6]
 8001d2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 f806 	bl	8001d40 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40010400 	.word	0x40010400

08001d40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e08d      	b.n	8001e84 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d106      	bne.n	8001d82 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff f879 	bl	8000e74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2224      	movs	r2, #36	@ 0x24
 8001d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0201 	bic.w	r2, r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001da6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001db6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d107      	bne.n	8001dd0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	e006      	b.n	8001dde <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001ddc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d108      	bne.n	8001df8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	e007      	b.n	8001e08 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e06:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e1a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e2a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69d9      	ldr	r1, [r3, #28]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a1a      	ldr	r2, [r3, #32]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f042 0201 	orr.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b20      	cmp	r3, #32
 8001ea0:	d138      	bne.n	8001f14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e032      	b.n	8001f16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2224      	movs	r2, #36	@ 0x24
 8001ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0201 	bic.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ede:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6819      	ldr	r1, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2220      	movs	r2, #32
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	e000      	b.n	8001f16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f14:	2302      	movs	r3, #2
  }
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b085      	sub	sp, #20
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d139      	bne.n	8001fac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e033      	b.n	8001fae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2224      	movs	r2, #36	@ 0x24
 8001f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0201 	bic.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e000      	b.n	8001fae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fac:	2302      	movs	r3, #2
  }
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af02      	add	r7, sp, #8
 8001fc0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e101      	b.n	80021d0 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d106      	bne.n	8001fe6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff f8cf 	bl	8001184 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2203      	movs	r2, #3
 8001fea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f002 fe05 	bl	8004c08 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	7c1a      	ldrb	r2, [r3, #16]
 8002006:	f88d 2000 	strb.w	r2, [sp]
 800200a:	3304      	adds	r3, #4
 800200c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800200e:	f002 fdce 	bl	8004bae <USB_CoreInit>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0d5      	b.n	80021d0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f002 fdfd 	bl	8004c2a <USB_SetCurrentMode>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2202      	movs	r2, #2
 800203a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e0c6      	b.n	80021d0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]
 8002046:	e04a      	b.n	80020de <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	3315      	adds	r3, #21
 8002058:	2201      	movs	r2, #1
 800205a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	3314      	adds	r3, #20
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	b298      	uxth	r0, r3
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	332e      	adds	r3, #46	@ 0x2e
 8002084:	4602      	mov	r2, r0
 8002086:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002088:	7bfa      	ldrb	r2, [r7, #15]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	3318      	adds	r3, #24
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	331c      	adds	r3, #28
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	3320      	adds	r3, #32
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	3324      	adds	r3, #36	@ 0x24
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	3301      	adds	r3, #1
 80020dc:	73fb      	strb	r3, [r7, #15]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	791b      	ldrb	r3, [r3, #4]
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d3af      	bcc.n	8002048 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	73fb      	strb	r3, [r7, #15]
 80020ec:	e044      	b.n	8002178 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002104:	7bfa      	ldrb	r2, [r7, #15]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002130:	7bfa      	ldrb	r2, [r7, #15]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002146:	7bfa      	ldrb	r2, [r7, #15]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800215c:	7bfa      	ldrb	r2, [r7, #15]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4413      	add	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	3301      	adds	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	791b      	ldrb	r3, [r3, #4]
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	429a      	cmp	r2, r3
 8002180:	d3b5      	bcc.n	80020ee <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7c1a      	ldrb	r2, [r3, #16]
 800218a:	f88d 2000 	strb.w	r2, [sp]
 800218e:	3304      	adds	r3, #4
 8002190:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002192:	f002 fd97 	bl	8004cc4 <USB_DevInit>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e013      	b.n	80021d0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	7b1b      	ldrb	r3, [r3, #12]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d102      	bne.n	80021c4 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f80a 	bl	80021d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f002 ff3c 	bl	8005046 <USB_DevDisconnect>

  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800220a:	f043 0303 	orr.w	r3, r3, #3
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002224:	4b05      	ldr	r3, [pc, #20]	@ (800223c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a04      	ldr	r2, [pc, #16]	@ (800223c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800222a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40007000 	.word	0x40007000

08002240 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002244:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <HAL_PWREx_GetVoltageRange+0x18>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40007000 	.word	0x40007000

0800225c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800226a:	d130      	bne.n	80022ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800226c:	4b23      	ldr	r3, [pc, #140]	@ (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002278:	d038      	beq.n	80022ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800227a:	4b20      	ldr	r3, [pc, #128]	@ (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002282:	4a1e      	ldr	r2, [pc, #120]	@ (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002284:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002288:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800228a:	4b1d      	ldr	r3, [pc, #116]	@ (8002300 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2232      	movs	r2, #50	@ 0x32
 8002290:	fb02 f303 	mul.w	r3, r2, r3
 8002294:	4a1b      	ldr	r2, [pc, #108]	@ (8002304 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	0c9b      	lsrs	r3, r3, #18
 800229c:	3301      	adds	r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022a0:	e002      	b.n	80022a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022a8:	4b14      	ldr	r3, [pc, #80]	@ (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022b4:	d102      	bne.n	80022bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f2      	bne.n	80022a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022bc:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022c8:	d110      	bne.n	80022ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e00f      	b.n	80022ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ce:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022da:	d007      	beq.n	80022ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022dc:	4b07      	ldr	r3, [pc, #28]	@ (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022e4:	4a05      	ldr	r2, [pc, #20]	@ (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40007000 	.word	0x40007000
 8002300:	20000000 	.word	0x20000000
 8002304:	431bde83 	.word	0x431bde83

08002308 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800230c:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <HAL_PWREx_EnableVddUSB+0x1c>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4a04      	ldr	r2, [pc, #16]	@ (8002324 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002312:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002316:	6053      	str	r3, [r2, #4]
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40007000 	.word	0x40007000

08002328 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af02      	add	r7, sp, #8
 800232e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002330:	f7ff f8f4 	bl	800151c <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e063      	b.n	8002408 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10b      	bne.n	8002364 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7fe fdeb 	bl	8000f30 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800235a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f858 	bl	8002414 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	3b01      	subs	r3, #1
 8002374:	021a      	lsls	r2, r3, #8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	2120      	movs	r1, #32
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f850 	bl	8002430 <QSPI_WaitFlagStateUntilTimeout>
 8002390:	4603      	mov	r3, r0
 8002392:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002394:	7afb      	ldrb	r3, [r7, #11]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d131      	bne.n	80023fe <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80023a4:	f023 0310 	bic.w	r3, r3, #16
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6852      	ldr	r2, [r2, #4]
 80023ac:	0611      	lsls	r1, r2, #24
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	68d2      	ldr	r2, [r2, #12]
 80023b2:	4311      	orrs	r1, r2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	430b      	orrs	r3, r1
 80023ba:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	4b13      	ldr	r3, [pc, #76]	@ (8002410 <HAL_QSPI_Init+0xe8>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6912      	ldr	r2, [r2, #16]
 80023ca:	0411      	lsls	r1, r2, #16
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6952      	ldr	r2, [r2, #20]
 80023d0:	4311      	orrs	r1, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6992      	ldr	r2, [r2, #24]
 80023d6:	4311      	orrs	r1, r2
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	430b      	orrs	r3, r1
 80023de:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8002406:	7afb      	ldrb	r3, [r7, #11]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	ffe0f8fe 	.word	0xffe0f8fe

08002414 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	4613      	mov	r3, r2
 800243e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002440:	e01a      	b.n	8002478 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d016      	beq.n	8002478 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244a:	f7ff f867 	bl	800151c <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	429a      	cmp	r2, r3
 8002458:	d302      	bcc.n	8002460 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10b      	bne.n	8002478 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2204      	movs	r2, #4
 8002464:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800246c:	f043 0201 	orr.w	r2, r3, #1
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e00e      	b.n	8002496 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	4013      	ands	r3, r2
 8002482:	2b00      	cmp	r3, #0
 8002484:	bf14      	ite	ne
 8002486:	2301      	movne	r3, #1
 8002488:	2300      	moveq	r3, #0
 800248a:	b2db      	uxtb	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	429a      	cmp	r2, r3
 8002492:	d1d6      	bne.n	8002442 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e3ca      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024b2:	4b97      	ldr	r3, [pc, #604]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024bc:	4b94      	ldr	r3, [pc, #592]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 80e4 	beq.w	800269c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d007      	beq.n	80024ea <HAL_RCC_OscConfig+0x4a>
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b0c      	cmp	r3, #12
 80024de:	f040 808b 	bne.w	80025f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	f040 8087 	bne.w	80025f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024ea:	4b89      	ldr	r3, [pc, #548]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <HAL_RCC_OscConfig+0x62>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e3a2      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1a      	ldr	r2, [r3, #32]
 8002506:	4b82      	ldr	r3, [pc, #520]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d004      	beq.n	800251c <HAL_RCC_OscConfig+0x7c>
 8002512:	4b7f      	ldr	r3, [pc, #508]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800251a:	e005      	b.n	8002528 <HAL_RCC_OscConfig+0x88>
 800251c:	4b7c      	ldr	r3, [pc, #496]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 800251e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002528:	4293      	cmp	r3, r2
 800252a:	d223      	bcs.n	8002574 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fd87 	bl	8003044 <RCC_SetFlashLatencyFromMSIRange>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e383      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002540:	4b73      	ldr	r3, [pc, #460]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a72      	ldr	r2, [pc, #456]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 8002546:	f043 0308 	orr.w	r3, r3, #8
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b70      	ldr	r3, [pc, #448]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	496d      	ldr	r1, [pc, #436]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800255e:	4b6c      	ldr	r3, [pc, #432]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	4968      	ldr	r1, [pc, #416]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]
 8002572:	e025      	b.n	80025c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002574:	4b66      	ldr	r3, [pc, #408]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a65      	ldr	r2, [pc, #404]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 800257a:	f043 0308 	orr.w	r3, r3, #8
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b63      	ldr	r3, [pc, #396]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4960      	ldr	r1, [pc, #384]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002592:	4b5f      	ldr	r3, [pc, #380]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	021b      	lsls	r3, r3, #8
 80025a0:	495b      	ldr	r1, [pc, #364]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d109      	bne.n	80025c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fd47 	bl	8003044 <RCC_SetFlashLatencyFromMSIRange>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e343      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025c0:	f000 fc4a 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 80025c4:	4602      	mov	r2, r0
 80025c6:	4b52      	ldr	r3, [pc, #328]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	4950      	ldr	r1, [pc, #320]	@ (8002714 <HAL_RCC_OscConfig+0x274>)
 80025d2:	5ccb      	ldrb	r3, [r1, r3]
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
 80025dc:	4a4e      	ldr	r2, [pc, #312]	@ (8002718 <HAL_RCC_OscConfig+0x278>)
 80025de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025e0:	4b4e      	ldr	r3, [pc, #312]	@ (800271c <HAL_RCC_OscConfig+0x27c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fe69 	bl	80012bc <HAL_InitTick>
 80025ea:	4603      	mov	r3, r0
 80025ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d052      	beq.n	800269a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	e327      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d032      	beq.n	8002666 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002600:	4b43      	ldr	r3, [pc, #268]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a42      	ldr	r2, [pc, #264]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800260c:	f7fe ff86 	bl	800151c <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002614:	f7fe ff82 	bl	800151c <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e310      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002626:	4b3a      	ldr	r3, [pc, #232]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002632:	4b37      	ldr	r3, [pc, #220]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a36      	ldr	r2, [pc, #216]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 8002638:	f043 0308 	orr.w	r3, r3, #8
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	4b34      	ldr	r3, [pc, #208]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	4931      	ldr	r1, [pc, #196]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002650:	4b2f      	ldr	r3, [pc, #188]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	492c      	ldr	r1, [pc, #176]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]
 8002664:	e01a      	b.n	800269c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002666:	4b2a      	ldr	r3, [pc, #168]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a29      	ldr	r2, [pc, #164]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002672:	f7fe ff53 	bl	800151c <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800267a:	f7fe ff4f 	bl	800151c <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e2dd      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800268c:	4b20      	ldr	r3, [pc, #128]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f0      	bne.n	800267a <HAL_RCC_OscConfig+0x1da>
 8002698:	e000      	b.n	800269c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800269a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d074      	beq.n	8002792 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d005      	beq.n	80026ba <HAL_RCC_OscConfig+0x21a>
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	2b0c      	cmp	r3, #12
 80026b2:	d10e      	bne.n	80026d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d10b      	bne.n	80026d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ba:	4b15      	ldr	r3, [pc, #84]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d064      	beq.n	8002790 <HAL_RCC_OscConfig+0x2f0>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d160      	bne.n	8002790 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e2ba      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026da:	d106      	bne.n	80026ea <HAL_RCC_OscConfig+0x24a>
 80026dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 80026e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	e026      	b.n	8002738 <HAL_RCC_OscConfig+0x298>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026f2:	d115      	bne.n	8002720 <HAL_RCC_OscConfig+0x280>
 80026f4:	4b06      	ldr	r3, [pc, #24]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a05      	ldr	r2, [pc, #20]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 80026fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	4b03      	ldr	r3, [pc, #12]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a02      	ldr	r2, [pc, #8]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 8002706:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	e014      	b.n	8002738 <HAL_RCC_OscConfig+0x298>
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000
 8002714:	08007a90 	.word	0x08007a90
 8002718:	20000000 	.word	0x20000000
 800271c:	20000004 	.word	0x20000004
 8002720:	4ba0      	ldr	r3, [pc, #640]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a9f      	ldr	r2, [pc, #636]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 8002726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b9d      	ldr	r3, [pc, #628]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a9c      	ldr	r2, [pc, #624]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 8002732:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d013      	beq.n	8002768 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7fe feec 	bl	800151c <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002748:	f7fe fee8 	bl	800151c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	@ 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e276      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800275a:	4b92      	ldr	r3, [pc, #584]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0x2a8>
 8002766:	e014      	b.n	8002792 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7fe fed8 	bl	800151c <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002770:	f7fe fed4 	bl	800151c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	@ 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e262      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002782:	4b88      	ldr	r3, [pc, #544]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x2d0>
 800278e:	e000      	b.n	8002792 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d060      	beq.n	8002860 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_OscConfig+0x310>
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2b0c      	cmp	r3, #12
 80027a8:	d119      	bne.n	80027de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d116      	bne.n	80027de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027b0:	4b7c      	ldr	r3, [pc, #496]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_RCC_OscConfig+0x328>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e23f      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c8:	4b76      	ldr	r3, [pc, #472]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	061b      	lsls	r3, r3, #24
 80027d6:	4973      	ldr	r1, [pc, #460]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027dc:	e040      	b.n	8002860 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d023      	beq.n	800282e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e6:	4b6f      	ldr	r3, [pc, #444]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a6e      	ldr	r2, [pc, #440]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 80027ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f2:	f7fe fe93 	bl	800151c <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fa:	f7fe fe8f 	bl	800151c <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e21d      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800280c:	4b65      	ldr	r3, [pc, #404]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002818:	4b62      	ldr	r3, [pc, #392]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	061b      	lsls	r3, r3, #24
 8002826:	495f      	ldr	r1, [pc, #380]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
 800282c:	e018      	b.n	8002860 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282e:	4b5d      	ldr	r3, [pc, #372]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a5c      	ldr	r2, [pc, #368]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 8002834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe fe6f 	bl	800151c <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002842:	f7fe fe6b 	bl	800151c <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e1f9      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002854:	4b53      	ldr	r3, [pc, #332]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f0      	bne.n	8002842 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d03c      	beq.n	80028e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d01c      	beq.n	80028ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002874:	4b4b      	ldr	r3, [pc, #300]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 8002876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800287a:	4a4a      	ldr	r2, [pc, #296]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002884:	f7fe fe4a 	bl	800151c <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288c:	f7fe fe46 	bl	800151c <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e1d4      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800289e:	4b41      	ldr	r3, [pc, #260]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 80028a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0ef      	beq.n	800288c <HAL_RCC_OscConfig+0x3ec>
 80028ac:	e01b      	b.n	80028e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ae:	4b3d      	ldr	r3, [pc, #244]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 80028b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028b4:	4a3b      	ldr	r2, [pc, #236]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028be:	f7fe fe2d 	bl	800151c <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c6:	f7fe fe29 	bl	800151c <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e1b7      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028d8:	4b32      	ldr	r3, [pc, #200]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 80028da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1ef      	bne.n	80028c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 80a6 	beq.w	8002a40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f4:	2300      	movs	r3, #0
 80028f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028f8:	4b2a      	ldr	r3, [pc, #168]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 80028fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10d      	bne.n	8002920 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002904:	4b27      	ldr	r3, [pc, #156]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 8002906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002908:	4a26      	ldr	r2, [pc, #152]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 800290a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800290e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002910:	4b24      	ldr	r3, [pc, #144]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 8002912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291c:	2301      	movs	r3, #1
 800291e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002920:	4b21      	ldr	r3, [pc, #132]	@ (80029a8 <HAL_RCC_OscConfig+0x508>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d118      	bne.n	800295e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800292c:	4b1e      	ldr	r3, [pc, #120]	@ (80029a8 <HAL_RCC_OscConfig+0x508>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1d      	ldr	r2, [pc, #116]	@ (80029a8 <HAL_RCC_OscConfig+0x508>)
 8002932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002936:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002938:	f7fe fdf0 	bl	800151c <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002940:	f7fe fdec 	bl	800151c <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e17a      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002952:	4b15      	ldr	r3, [pc, #84]	@ (80029a8 <HAL_RCC_OscConfig+0x508>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d108      	bne.n	8002978 <HAL_RCC_OscConfig+0x4d8>
 8002966:	4b0f      	ldr	r3, [pc, #60]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 8002968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800296c:	4a0d      	ldr	r2, [pc, #52]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002976:	e029      	b.n	80029cc <HAL_RCC_OscConfig+0x52c>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b05      	cmp	r3, #5
 800297e:	d115      	bne.n	80029ac <HAL_RCC_OscConfig+0x50c>
 8002980:	4b08      	ldr	r3, [pc, #32]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002986:	4a07      	ldr	r2, [pc, #28]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 8002988:	f043 0304 	orr.w	r3, r3, #4
 800298c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002990:	4b04      	ldr	r3, [pc, #16]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 8002992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002996:	4a03      	ldr	r2, [pc, #12]	@ (80029a4 <HAL_RCC_OscConfig+0x504>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029a0:	e014      	b.n	80029cc <HAL_RCC_OscConfig+0x52c>
 80029a2:	bf00      	nop
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40007000 	.word	0x40007000
 80029ac:	4b9c      	ldr	r3, [pc, #624]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b2:	4a9b      	ldr	r2, [pc, #620]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 80029b4:	f023 0301 	bic.w	r3, r3, #1
 80029b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029bc:	4b98      	ldr	r3, [pc, #608]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c2:	4a97      	ldr	r2, [pc, #604]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 80029c4:	f023 0304 	bic.w	r3, r3, #4
 80029c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d016      	beq.n	8002a02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7fe fda2 	bl	800151c <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029dc:	f7fe fd9e 	bl	800151c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e12a      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f2:	4b8b      	ldr	r3, [pc, #556]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0ed      	beq.n	80029dc <HAL_RCC_OscConfig+0x53c>
 8002a00:	e015      	b.n	8002a2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a02:	f7fe fd8b 	bl	800151c <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a08:	e00a      	b.n	8002a20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7fe fd87 	bl	800151c <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e113      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a20:	4b7f      	ldr	r3, [pc, #508]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1ed      	bne.n	8002a0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a2e:	7ffb      	ldrb	r3, [r7, #31]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d105      	bne.n	8002a40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a34:	4b7a      	ldr	r3, [pc, #488]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a38:	4a79      	ldr	r2, [pc, #484]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002a3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a3e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80fe 	beq.w	8002c46 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	f040 80d0 	bne.w	8002bf4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a54:	4b72      	ldr	r3, [pc, #456]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f003 0203 	and.w	r2, r3, #3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d130      	bne.n	8002aca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a72:	3b01      	subs	r3, #1
 8002a74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d127      	bne.n	8002aca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a84:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d11f      	bne.n	8002aca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a94:	2a07      	cmp	r2, #7
 8002a96:	bf14      	ite	ne
 8002a98:	2201      	movne	r2, #1
 8002a9a:	2200      	moveq	r2, #0
 8002a9c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d113      	bne.n	8002aca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aac:	085b      	lsrs	r3, r3, #1
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d109      	bne.n	8002aca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	085b      	lsrs	r3, r3, #1
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d06e      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	2b0c      	cmp	r3, #12
 8002ace:	d069      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ad0:	4b53      	ldr	r3, [pc, #332]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d105      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002adc:	4b50      	ldr	r3, [pc, #320]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0ad      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002aec:	4b4c      	ldr	r3, [pc, #304]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a4b      	ldr	r2, [pc, #300]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002af2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002af6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002af8:	f7fe fd10 	bl	800151c <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fe fd0c 	bl	800151c <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e09a      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b12:	4b43      	ldr	r3, [pc, #268]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b1e:	4b40      	ldr	r3, [pc, #256]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	4b40      	ldr	r3, [pc, #256]	@ (8002c24 <HAL_RCC_OscConfig+0x784>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b2e:	3a01      	subs	r2, #1
 8002b30:	0112      	lsls	r2, r2, #4
 8002b32:	4311      	orrs	r1, r2
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b38:	0212      	lsls	r2, r2, #8
 8002b3a:	4311      	orrs	r1, r2
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b40:	0852      	lsrs	r2, r2, #1
 8002b42:	3a01      	subs	r2, #1
 8002b44:	0552      	lsls	r2, r2, #21
 8002b46:	4311      	orrs	r1, r2
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b4c:	0852      	lsrs	r2, r2, #1
 8002b4e:	3a01      	subs	r2, #1
 8002b50:	0652      	lsls	r2, r2, #25
 8002b52:	4311      	orrs	r1, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b58:	0912      	lsrs	r2, r2, #4
 8002b5a:	0452      	lsls	r2, r2, #17
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	4930      	ldr	r1, [pc, #192]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b64:	4b2e      	ldr	r3, [pc, #184]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a2d      	ldr	r2, [pc, #180]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002b6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b70:	4b2b      	ldr	r3, [pc, #172]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4a2a      	ldr	r2, [pc, #168]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002b76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b7c:	f7fe fcce 	bl	800151c <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b84:	f7fe fcca 	bl	800151c <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e058      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b96:	4b22      	ldr	r3, [pc, #136]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ba2:	e050      	b.n	8002c46 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e04f      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d148      	bne.n	8002c46 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a19      	ldr	r2, [pc, #100]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002bba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bc0:	4b17      	ldr	r3, [pc, #92]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4a16      	ldr	r2, [pc, #88]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002bc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bcc:	f7fe fca6 	bl	800151c <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd4:	f7fe fca2 	bl	800151c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e030      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x734>
 8002bf2:	e028      	b.n	8002c46 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	2b0c      	cmp	r3, #12
 8002bf8:	d023      	beq.n	8002c42 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfa:	4b09      	ldr	r3, [pc, #36]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a08      	ldr	r2, [pc, #32]	@ (8002c20 <HAL_RCC_OscConfig+0x780>)
 8002c00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c06:	f7fe fc89 	bl	800151c <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c0c:	e00c      	b.n	8002c28 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0e:	f7fe fc85 	bl	800151c <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d905      	bls.n	8002c28 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e013      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
 8002c20:	40021000 	.word	0x40021000
 8002c24:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c28:	4b09      	ldr	r3, [pc, #36]	@ (8002c50 <HAL_RCC_OscConfig+0x7b0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1ec      	bne.n	8002c0e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c34:	4b06      	ldr	r3, [pc, #24]	@ (8002c50 <HAL_RCC_OscConfig+0x7b0>)
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	4905      	ldr	r1, [pc, #20]	@ (8002c50 <HAL_RCC_OscConfig+0x7b0>)
 8002c3a:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <HAL_RCC_OscConfig+0x7b4>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60cb      	str	r3, [r1, #12]
 8002c40:	e001      	b.n	8002c46 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3720      	adds	r7, #32
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40021000 	.word	0x40021000
 8002c54:	feeefffc 	.word	0xfeeefffc

08002c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0e7      	b.n	8002e3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b75      	ldr	r3, [pc, #468]	@ (8002e44 <HAL_RCC_ClockConfig+0x1ec>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d910      	bls.n	8002c9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b72      	ldr	r3, [pc, #456]	@ (8002e44 <HAL_RCC_ClockConfig+0x1ec>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 0207 	bic.w	r2, r3, #7
 8002c82:	4970      	ldr	r1, [pc, #448]	@ (8002e44 <HAL_RCC_ClockConfig+0x1ec>)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8a:	4b6e      	ldr	r3, [pc, #440]	@ (8002e44 <HAL_RCC_ClockConfig+0x1ec>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0cf      	b.n	8002e3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d010      	beq.n	8002cca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	4b66      	ldr	r3, [pc, #408]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d908      	bls.n	8002cca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb8:	4b63      	ldr	r3, [pc, #396]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4960      	ldr	r1, [pc, #384]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d04c      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d107      	bne.n	8002cee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cde:	4b5a      	ldr	r3, [pc, #360]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d121      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e0a6      	b.n	8002e3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d107      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cf6:	4b54      	ldr	r3, [pc, #336]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d115      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e09a      	b.n	8002e3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d107      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d0e:	4b4e      	ldr	r3, [pc, #312]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e08e      	b.n	8002e3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e086      	b.n	8002e3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d2e:	4b46      	ldr	r3, [pc, #280]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f023 0203 	bic.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4943      	ldr	r1, [pc, #268]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d40:	f7fe fbec 	bl	800151c <HAL_GetTick>
 8002d44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d46:	e00a      	b.n	8002d5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d48:	f7fe fbe8 	bl	800151c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e06e      	b.n	8002e3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 020c 	and.w	r2, r3, #12
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d1eb      	bne.n	8002d48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d010      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	4b31      	ldr	r3, [pc, #196]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d208      	bcs.n	8002d9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	492b      	ldr	r1, [pc, #172]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d9e:	4b29      	ldr	r3, [pc, #164]	@ (8002e44 <HAL_RCC_ClockConfig+0x1ec>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d210      	bcs.n	8002dce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dac:	4b25      	ldr	r3, [pc, #148]	@ (8002e44 <HAL_RCC_ClockConfig+0x1ec>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f023 0207 	bic.w	r2, r3, #7
 8002db4:	4923      	ldr	r1, [pc, #140]	@ (8002e44 <HAL_RCC_ClockConfig+0x1ec>)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbc:	4b21      	ldr	r3, [pc, #132]	@ (8002e44 <HAL_RCC_ClockConfig+0x1ec>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d001      	beq.n	8002dce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e036      	b.n	8002e3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0304 	and.w	r3, r3, #4
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dda:	4b1b      	ldr	r3, [pc, #108]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	4918      	ldr	r1, [pc, #96]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d009      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002df8:	4b13      	ldr	r3, [pc, #76]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4910      	ldr	r1, [pc, #64]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e0c:	f000 f824 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8002e10:	4602      	mov	r2, r0
 8002e12:	4b0d      	ldr	r3, [pc, #52]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	f003 030f 	and.w	r3, r3, #15
 8002e1c:	490b      	ldr	r1, [pc, #44]	@ (8002e4c <HAL_RCC_ClockConfig+0x1f4>)
 8002e1e:	5ccb      	ldrb	r3, [r1, r3]
 8002e20:	f003 031f 	and.w	r3, r3, #31
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
 8002e28:	4a09      	ldr	r2, [pc, #36]	@ (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002e2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e2c:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <HAL_RCC_ClockConfig+0x1fc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe fa43 	bl	80012bc <HAL_InitTick>
 8002e36:	4603      	mov	r3, r0
 8002e38:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e3a:	7afb      	ldrb	r3, [r7, #11]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40022000 	.word	0x40022000
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	08007a90 	.word	0x08007a90
 8002e50:	20000000 	.word	0x20000000
 8002e54:	20000004 	.word	0x20000004

08002e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b089      	sub	sp, #36	@ 0x24
 8002e5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	2300      	movs	r3, #0
 8002e64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e66:	4b3e      	ldr	r3, [pc, #248]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e70:	4b3b      	ldr	r3, [pc, #236]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_RCC_GetSysClockFreq+0x34>
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	2b0c      	cmp	r3, #12
 8002e84:	d121      	bne.n	8002eca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d11e      	bne.n	8002eca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e8c:	4b34      	ldr	r3, [pc, #208]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d107      	bne.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e98:	4b31      	ldr	r3, [pc, #196]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e9e:	0a1b      	lsrs	r3, r3, #8
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	61fb      	str	r3, [r7, #28]
 8002ea6:	e005      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	091b      	lsrs	r3, r3, #4
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ebc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10d      	bne.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ec8:	e00a      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d102      	bne.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ed0:	4b25      	ldr	r3, [pc, #148]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ed2:	61bb      	str	r3, [r7, #24]
 8002ed4:	e004      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002edc:	4b23      	ldr	r3, [pc, #140]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002ede:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	2b0c      	cmp	r3, #12
 8002ee4:	d134      	bne.n	8002f50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d003      	beq.n	8002efe <HAL_RCC_GetSysClockFreq+0xa6>
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d003      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0xac>
 8002efc:	e005      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002efe:	4b1a      	ldr	r3, [pc, #104]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f00:	617b      	str	r3, [r7, #20]
      break;
 8002f02:	e005      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f04:	4b19      	ldr	r3, [pc, #100]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002f06:	617b      	str	r3, [r7, #20]
      break;
 8002f08:	e002      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	617b      	str	r3, [r7, #20]
      break;
 8002f0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f10:	4b13      	ldr	r3, [pc, #76]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f1e:	4b10      	ldr	r3, [pc, #64]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	0a1b      	lsrs	r3, r3, #8
 8002f24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	fb03 f202 	mul.w	r2, r3, r2
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f36:	4b0a      	ldr	r3, [pc, #40]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	0e5b      	lsrs	r3, r3, #25
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	3301      	adds	r3, #1
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f50:	69bb      	ldr	r3, [r7, #24]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3724      	adds	r7, #36	@ 0x24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40021000 	.word	0x40021000
 8002f64:	08007aa8 	.word	0x08007aa8
 8002f68:	00f42400 	.word	0x00f42400
 8002f6c:	007a1200 	.word	0x007a1200

08002f70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f74:	4b03      	ldr	r3, [pc, #12]	@ (8002f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f76:	681b      	ldr	r3, [r3, #0]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	20000000 	.word	0x20000000

08002f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f8c:	f7ff fff0 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b06      	ldr	r3, [pc, #24]	@ (8002fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	4904      	ldr	r1, [pc, #16]	@ (8002fb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	08007aa0 	.word	0x08007aa0

08002fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fb8:	f7ff ffda 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	0adb      	lsrs	r3, r3, #11
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	4904      	ldr	r1, [pc, #16]	@ (8002fdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fca:	5ccb      	ldrb	r3, [r1, r3]
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	08007aa0 	.word	0x08007aa0

08002fe0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	220f      	movs	r2, #15
 8002fee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002ff0:	4b12      	ldr	r3, [pc, #72]	@ (800303c <HAL_RCC_GetClockConfig+0x5c>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0203 	and.w	r2, r3, #3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800303c <HAL_RCC_GetClockConfig+0x5c>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003008:	4b0c      	ldr	r3, [pc, #48]	@ (800303c <HAL_RCC_GetClockConfig+0x5c>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003014:	4b09      	ldr	r3, [pc, #36]	@ (800303c <HAL_RCC_GetClockConfig+0x5c>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	08db      	lsrs	r3, r3, #3
 800301a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003022:	4b07      	ldr	r3, [pc, #28]	@ (8003040 <HAL_RCC_GetClockConfig+0x60>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0207 	and.w	r2, r3, #7
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	601a      	str	r2, [r3, #0]
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000
 8003040:	40022000 	.word	0x40022000

08003044 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800304c:	2300      	movs	r3, #0
 800304e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003050:	4b2a      	ldr	r3, [pc, #168]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800305c:	f7ff f8f0 	bl	8002240 <HAL_PWREx_GetVoltageRange>
 8003060:	6178      	str	r0, [r7, #20]
 8003062:	e014      	b.n	800308e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003064:	4b25      	ldr	r3, [pc, #148]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003068:	4a24      	ldr	r2, [pc, #144]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800306a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800306e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003070:	4b22      	ldr	r3, [pc, #136]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800307c:	f7ff f8e0 	bl	8002240 <HAL_PWREx_GetVoltageRange>
 8003080:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003082:	4b1e      	ldr	r3, [pc, #120]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003086:	4a1d      	ldr	r2, [pc, #116]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800308c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003094:	d10b      	bne.n	80030ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b80      	cmp	r3, #128	@ 0x80
 800309a:	d919      	bls.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2ba0      	cmp	r3, #160	@ 0xa0
 80030a0:	d902      	bls.n	80030a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030a2:	2302      	movs	r3, #2
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	e013      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030a8:	2301      	movs	r3, #1
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	e010      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b80      	cmp	r3, #128	@ 0x80
 80030b2:	d902      	bls.n	80030ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030b4:	2303      	movs	r3, #3
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	e00a      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b80      	cmp	r3, #128	@ 0x80
 80030be:	d102      	bne.n	80030c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030c0:	2302      	movs	r3, #2
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	e004      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b70      	cmp	r3, #112	@ 0x70
 80030ca:	d101      	bne.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030cc:	2301      	movs	r3, #1
 80030ce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003100 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f023 0207 	bic.w	r2, r3, #7
 80030d8:	4909      	ldr	r1, [pc, #36]	@ (8003100 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030e0:	4b07      	ldr	r3, [pc, #28]	@ (8003100 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d001      	beq.n	80030f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000
 8003100:	40022000 	.word	0x40022000

08003104 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800310c:	2300      	movs	r3, #0
 800310e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003110:	2300      	movs	r3, #0
 8003112:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800311c:	2b00      	cmp	r3, #0
 800311e:	d041      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003124:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003128:	d02a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800312a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800312e:	d824      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003130:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003134:	d008      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003136:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800313a:	d81e      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003140:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003144:	d010      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003146:	e018      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003148:	4b86      	ldr	r3, [pc, #536]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	4a85      	ldr	r2, [pc, #532]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003152:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003154:	e015      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3304      	adds	r3, #4
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f000 facb 	bl	80036f8 <RCCEx_PLLSAI1_Config>
 8003162:	4603      	mov	r3, r0
 8003164:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003166:	e00c      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3320      	adds	r3, #32
 800316c:	2100      	movs	r1, #0
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fbb6 	bl	80038e0 <RCCEx_PLLSAI2_Config>
 8003174:	4603      	mov	r3, r0
 8003176:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003178:	e003      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	74fb      	strb	r3, [r7, #19]
      break;
 800317e:	e000      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003182:	7cfb      	ldrb	r3, [r7, #19]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10b      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003188:	4b76      	ldr	r3, [pc, #472]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003196:	4973      	ldr	r1, [pc, #460]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800319e:	e001      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d041      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031b8:	d02a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031be:	d824      	bhi.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031c4:	d008      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031ca:	d81e      	bhi.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031d4:	d010      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031d6:	e018      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031d8:	4b62      	ldr	r3, [pc, #392]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4a61      	ldr	r2, [pc, #388]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031e4:	e015      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3304      	adds	r3, #4
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fa83 	bl	80036f8 <RCCEx_PLLSAI1_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031f6:	e00c      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3320      	adds	r3, #32
 80031fc:	2100      	movs	r1, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fb6e 	bl	80038e0 <RCCEx_PLLSAI2_Config>
 8003204:	4603      	mov	r3, r0
 8003206:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003208:	e003      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	74fb      	strb	r3, [r7, #19]
      break;
 800320e:	e000      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003212:	7cfb      	ldrb	r3, [r7, #19]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10b      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003218:	4b52      	ldr	r3, [pc, #328]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800321e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003226:	494f      	ldr	r1, [pc, #316]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800322e:	e001      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003230:	7cfb      	ldrb	r3, [r7, #19]
 8003232:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80a0 	beq.w	8003382 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003242:	2300      	movs	r3, #0
 8003244:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003246:	4b47      	ldr	r3, [pc, #284]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003256:	2300      	movs	r3, #0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00d      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325c:	4b41      	ldr	r3, [pc, #260]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003260:	4a40      	ldr	r2, [pc, #256]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003262:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003266:	6593      	str	r3, [r2, #88]	@ 0x58
 8003268:	4b3e      	ldr	r3, [pc, #248]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003274:	2301      	movs	r3, #1
 8003276:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003278:	4b3b      	ldr	r3, [pc, #236]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a3a      	ldr	r2, [pc, #232]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800327e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003282:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003284:	f7fe f94a 	bl	800151c <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800328a:	e009      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328c:	f7fe f946 	bl	800151c <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d902      	bls.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	74fb      	strb	r3, [r7, #19]
        break;
 800329e:	e005      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032a0:	4b31      	ldr	r3, [pc, #196]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ef      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d15c      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01f      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d019      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032d0:	4b24      	ldr	r3, [pc, #144]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032dc:	4b21      	ldr	r3, [pc, #132]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e2:	4a20      	ldr	r2, [pc, #128]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032fc:	4a19      	ldr	r2, [pc, #100]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d016      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330e:	f7fe f905 	bl	800151c <HAL_GetTick>
 8003312:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003314:	e00b      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003316:	f7fe f901 	bl	800151c <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003324:	4293      	cmp	r3, r2
 8003326:	d902      	bls.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	74fb      	strb	r3, [r7, #19]
            break;
 800332c:	e006      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800332e:	4b0d      	ldr	r3, [pc, #52]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ec      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800333c:	7cfb      	ldrb	r3, [r7, #19]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10c      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003342:	4b08      	ldr	r3, [pc, #32]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003348:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003352:	4904      	ldr	r1, [pc, #16]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800335a:	e009      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800335c:	7cfb      	ldrb	r3, [r7, #19]
 800335e:	74bb      	strb	r3, [r7, #18]
 8003360:	e006      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
 8003368:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003370:	7c7b      	ldrb	r3, [r7, #17]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d105      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003376:	4b9e      	ldr	r3, [pc, #632]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337a:	4a9d      	ldr	r2, [pc, #628]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003380:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800338e:	4b98      	ldr	r3, [pc, #608]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003394:	f023 0203 	bic.w	r2, r3, #3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339c:	4994      	ldr	r1, [pc, #592]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033b0:	4b8f      	ldr	r3, [pc, #572]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b6:	f023 020c 	bic.w	r2, r3, #12
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033be:	498c      	ldr	r1, [pc, #560]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033d2:	4b87      	ldr	r3, [pc, #540]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e0:	4983      	ldr	r1, [pc, #524]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033f4:	4b7e      	ldr	r3, [pc, #504]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003402:	497b      	ldr	r1, [pc, #492]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003416:	4b76      	ldr	r3, [pc, #472]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003424:	4972      	ldr	r1, [pc, #456]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003438:	4b6d      	ldr	r3, [pc, #436]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003446:	496a      	ldr	r1, [pc, #424]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800345a:	4b65      	ldr	r3, [pc, #404]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003460:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003468:	4961      	ldr	r1, [pc, #388]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800347c:	4b5c      	ldr	r3, [pc, #368]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003482:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800348a:	4959      	ldr	r1, [pc, #356]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800349e:	4b54      	ldr	r3, [pc, #336]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ac:	4950      	ldr	r1, [pc, #320]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034c0:	4b4b      	ldr	r3, [pc, #300]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ce:	4948      	ldr	r1, [pc, #288]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034e2:	4b43      	ldr	r3, [pc, #268]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f0:	493f      	ldr	r1, [pc, #252]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d028      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003504:	4b3a      	ldr	r3, [pc, #232]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800350a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003512:	4937      	ldr	r1, [pc, #220]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800351e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003522:	d106      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003524:	4b32      	ldr	r3, [pc, #200]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4a31      	ldr	r2, [pc, #196]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800352e:	60d3      	str	r3, [r2, #12]
 8003530:	e011      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003536:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800353a:	d10c      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3304      	adds	r3, #4
 8003540:	2101      	movs	r1, #1
 8003542:	4618      	mov	r0, r3
 8003544:	f000 f8d8 	bl	80036f8 <RCCEx_PLLSAI1_Config>
 8003548:	4603      	mov	r3, r0
 800354a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003552:	7cfb      	ldrb	r3, [r7, #19]
 8003554:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d028      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003562:	4b23      	ldr	r3, [pc, #140]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003568:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003570:	491f      	ldr	r1, [pc, #124]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003580:	d106      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003582:	4b1b      	ldr	r3, [pc, #108]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	4a1a      	ldr	r2, [pc, #104]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003588:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800358c:	60d3      	str	r3, [r2, #12]
 800358e:	e011      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003594:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003598:	d10c      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3304      	adds	r3, #4
 800359e:	2101      	movs	r1, #1
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 f8a9 	bl	80036f8 <RCCEx_PLLSAI1_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035aa:	7cfb      	ldrb	r3, [r7, #19]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035b0:	7cfb      	ldrb	r3, [r7, #19]
 80035b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d02b      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035c0:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ce:	4908      	ldr	r1, [pc, #32]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035de:	d109      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e0:	4b03      	ldr	r3, [pc, #12]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4a02      	ldr	r2, [pc, #8]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035ea:	60d3      	str	r3, [r2, #12]
 80035ec:	e014      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035fc:	d10c      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3304      	adds	r3, #4
 8003602:	2101      	movs	r1, #1
 8003604:	4618      	mov	r0, r3
 8003606:	f000 f877 	bl	80036f8 <RCCEx_PLLSAI1_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800360e:	7cfb      	ldrb	r3, [r7, #19]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003614:	7cfb      	ldrb	r3, [r7, #19]
 8003616:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d02f      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003624:	4b2b      	ldr	r3, [pc, #172]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003632:	4928      	ldr	r1, [pc, #160]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800363e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003642:	d10d      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	2102      	movs	r1, #2
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f854 	bl	80036f8 <RCCEx_PLLSAI1_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d014      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800365a:	7cfb      	ldrb	r3, [r7, #19]
 800365c:	74bb      	strb	r3, [r7, #18]
 800365e:	e011      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003664:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003668:	d10c      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3320      	adds	r3, #32
 800366e:	2102      	movs	r1, #2
 8003670:	4618      	mov	r0, r3
 8003672:	f000 f935 	bl	80038e0 <RCCEx_PLLSAI2_Config>
 8003676:	4603      	mov	r3, r0
 8003678:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800367a:	7cfb      	ldrb	r3, [r7, #19]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003690:	4b10      	ldr	r3, [pc, #64]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003696:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800369e:	490d      	ldr	r1, [pc, #52]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036b2:	4b08      	ldr	r3, [pc, #32]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036c2:	4904      	ldr	r1, [pc, #16]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40021000 	.word	0x40021000

080036d8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80036dc:	4b05      	ldr	r3, [pc, #20]	@ (80036f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a04      	ldr	r2, [pc, #16]	@ (80036f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036e2:	f043 0304 	orr.w	r3, r3, #4
 80036e6:	6013      	str	r3, [r2, #0]
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40021000 	.word	0x40021000

080036f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003706:	4b75      	ldr	r3, [pc, #468]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d018      	beq.n	8003744 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003712:	4b72      	ldr	r3, [pc, #456]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f003 0203 	and.w	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d10d      	bne.n	800373e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
       ||
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800372a:	4b6c      	ldr	r3, [pc, #432]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	091b      	lsrs	r3, r3, #4
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
       ||
 800373a:	429a      	cmp	r2, r3
 800373c:	d047      	beq.n	80037ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	73fb      	strb	r3, [r7, #15]
 8003742:	e044      	b.n	80037ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b03      	cmp	r3, #3
 800374a:	d018      	beq.n	800377e <RCCEx_PLLSAI1_Config+0x86>
 800374c:	2b03      	cmp	r3, #3
 800374e:	d825      	bhi.n	800379c <RCCEx_PLLSAI1_Config+0xa4>
 8003750:	2b01      	cmp	r3, #1
 8003752:	d002      	beq.n	800375a <RCCEx_PLLSAI1_Config+0x62>
 8003754:	2b02      	cmp	r3, #2
 8003756:	d009      	beq.n	800376c <RCCEx_PLLSAI1_Config+0x74>
 8003758:	e020      	b.n	800379c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800375a:	4b60      	ldr	r3, [pc, #384]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d11d      	bne.n	80037a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800376a:	e01a      	b.n	80037a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800376c:	4b5b      	ldr	r3, [pc, #364]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003774:	2b00      	cmp	r3, #0
 8003776:	d116      	bne.n	80037a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800377c:	e013      	b.n	80037a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800377e:	4b57      	ldr	r3, [pc, #348]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10f      	bne.n	80037aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800378a:	4b54      	ldr	r3, [pc, #336]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d109      	bne.n	80037aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800379a:	e006      	b.n	80037aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
      break;
 80037a0:	e004      	b.n	80037ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037a2:	bf00      	nop
 80037a4:	e002      	b.n	80037ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037a6:	bf00      	nop
 80037a8:	e000      	b.n	80037ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10d      	bne.n	80037ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037b2:	4b4a      	ldr	r3, [pc, #296]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6819      	ldr	r1, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	430b      	orrs	r3, r1
 80037c8:	4944      	ldr	r1, [pc, #272]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d17d      	bne.n	80038d0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037d4:	4b41      	ldr	r3, [pc, #260]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a40      	ldr	r2, [pc, #256]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e0:	f7fd fe9c 	bl	800151c <HAL_GetTick>
 80037e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037e6:	e009      	b.n	80037fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037e8:	f7fd fe98 	bl	800151c <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d902      	bls.n	80037fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	73fb      	strb	r3, [r7, #15]
        break;
 80037fa:	e005      	b.n	8003808 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037fc:	4b37      	ldr	r3, [pc, #220]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1ef      	bne.n	80037e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d160      	bne.n	80038d0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d111      	bne.n	8003838 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003814:	4b31      	ldr	r3, [pc, #196]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800381c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6892      	ldr	r2, [r2, #8]
 8003824:	0211      	lsls	r1, r2, #8
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68d2      	ldr	r2, [r2, #12]
 800382a:	0912      	lsrs	r2, r2, #4
 800382c:	0452      	lsls	r2, r2, #17
 800382e:	430a      	orrs	r2, r1
 8003830:	492a      	ldr	r1, [pc, #168]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003832:	4313      	orrs	r3, r2
 8003834:	610b      	str	r3, [r1, #16]
 8003836:	e027      	b.n	8003888 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d112      	bne.n	8003864 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800383e:	4b27      	ldr	r3, [pc, #156]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003846:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6892      	ldr	r2, [r2, #8]
 800384e:	0211      	lsls	r1, r2, #8
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6912      	ldr	r2, [r2, #16]
 8003854:	0852      	lsrs	r2, r2, #1
 8003856:	3a01      	subs	r2, #1
 8003858:	0552      	lsls	r2, r2, #21
 800385a:	430a      	orrs	r2, r1
 800385c:	491f      	ldr	r1, [pc, #124]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800385e:	4313      	orrs	r3, r2
 8003860:	610b      	str	r3, [r1, #16]
 8003862:	e011      	b.n	8003888 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003864:	4b1d      	ldr	r3, [pc, #116]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800386c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6892      	ldr	r2, [r2, #8]
 8003874:	0211      	lsls	r1, r2, #8
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6952      	ldr	r2, [r2, #20]
 800387a:	0852      	lsrs	r2, r2, #1
 800387c:	3a01      	subs	r2, #1
 800387e:	0652      	lsls	r2, r2, #25
 8003880:	430a      	orrs	r2, r1
 8003882:	4916      	ldr	r1, [pc, #88]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003884:	4313      	orrs	r3, r2
 8003886:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003888:	4b14      	ldr	r3, [pc, #80]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a13      	ldr	r2, [pc, #76]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800388e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003892:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003894:	f7fd fe42 	bl	800151c <HAL_GetTick>
 8003898:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800389a:	e009      	b.n	80038b0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800389c:	f7fd fe3e 	bl	800151c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d902      	bls.n	80038b0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	73fb      	strb	r3, [r7, #15]
          break;
 80038ae:	e005      	b.n	80038bc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038b0:	4b0a      	ldr	r3, [pc, #40]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0ef      	beq.n	800389c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038c2:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	4904      	ldr	r1, [pc, #16]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000

080038e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d018      	beq.n	800392c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038fa:	4b67      	ldr	r3, [pc, #412]	@ (8003a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f003 0203 	and.w	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d10d      	bne.n	8003926 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
       ||
 800390e:	2b00      	cmp	r3, #0
 8003910:	d009      	beq.n	8003926 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003912:	4b61      	ldr	r3, [pc, #388]	@ (8003a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	091b      	lsrs	r3, r3, #4
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
       ||
 8003922:	429a      	cmp	r2, r3
 8003924:	d047      	beq.n	80039b6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
 800392a:	e044      	b.n	80039b6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b03      	cmp	r3, #3
 8003932:	d018      	beq.n	8003966 <RCCEx_PLLSAI2_Config+0x86>
 8003934:	2b03      	cmp	r3, #3
 8003936:	d825      	bhi.n	8003984 <RCCEx_PLLSAI2_Config+0xa4>
 8003938:	2b01      	cmp	r3, #1
 800393a:	d002      	beq.n	8003942 <RCCEx_PLLSAI2_Config+0x62>
 800393c:	2b02      	cmp	r3, #2
 800393e:	d009      	beq.n	8003954 <RCCEx_PLLSAI2_Config+0x74>
 8003940:	e020      	b.n	8003984 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003942:	4b55      	ldr	r3, [pc, #340]	@ (8003a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d11d      	bne.n	800398a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003952:	e01a      	b.n	800398a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003954:	4b50      	ldr	r3, [pc, #320]	@ (8003a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800395c:	2b00      	cmp	r3, #0
 800395e:	d116      	bne.n	800398e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003964:	e013      	b.n	800398e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003966:	4b4c      	ldr	r3, [pc, #304]	@ (8003a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10f      	bne.n	8003992 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003972:	4b49      	ldr	r3, [pc, #292]	@ (8003a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003982:	e006      	b.n	8003992 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	73fb      	strb	r3, [r7, #15]
      break;
 8003988:	e004      	b.n	8003994 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800398a:	bf00      	nop
 800398c:	e002      	b.n	8003994 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800398e:	bf00      	nop
 8003990:	e000      	b.n	8003994 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003992:	bf00      	nop
    }

    if(status == HAL_OK)
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10d      	bne.n	80039b6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800399a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6819      	ldr	r1, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	430b      	orrs	r3, r1
 80039b0:	4939      	ldr	r1, [pc, #228]	@ (8003a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d167      	bne.n	8003a8c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039bc:	4b36      	ldr	r3, [pc, #216]	@ (8003a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a35      	ldr	r2, [pc, #212]	@ (8003a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c8:	f7fd fda8 	bl	800151c <HAL_GetTick>
 80039cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039ce:	e009      	b.n	80039e4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039d0:	f7fd fda4 	bl	800151c <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d902      	bls.n	80039e4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	73fb      	strb	r3, [r7, #15]
        break;
 80039e2:	e005      	b.n	80039f0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1ef      	bne.n	80039d0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d14a      	bne.n	8003a8c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d111      	bne.n	8003a20 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039fc:	4b26      	ldr	r3, [pc, #152]	@ (8003a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003a04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6892      	ldr	r2, [r2, #8]
 8003a0c:	0211      	lsls	r1, r2, #8
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68d2      	ldr	r2, [r2, #12]
 8003a12:	0912      	lsrs	r2, r2, #4
 8003a14:	0452      	lsls	r2, r2, #17
 8003a16:	430a      	orrs	r2, r1
 8003a18:	491f      	ldr	r1, [pc, #124]	@ (8003a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	614b      	str	r3, [r1, #20]
 8003a1e:	e011      	b.n	8003a44 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a20:	4b1d      	ldr	r3, [pc, #116]	@ (8003a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a28:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6892      	ldr	r2, [r2, #8]
 8003a30:	0211      	lsls	r1, r2, #8
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6912      	ldr	r2, [r2, #16]
 8003a36:	0852      	lsrs	r2, r2, #1
 8003a38:	3a01      	subs	r2, #1
 8003a3a:	0652      	lsls	r2, r2, #25
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	4916      	ldr	r1, [pc, #88]	@ (8003a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a44:	4b14      	ldr	r3, [pc, #80]	@ (8003a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a13      	ldr	r2, [pc, #76]	@ (8003a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a50:	f7fd fd64 	bl	800151c <HAL_GetTick>
 8003a54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a56:	e009      	b.n	8003a6c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a58:	f7fd fd60 	bl	800151c <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d902      	bls.n	8003a6c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	73fb      	strb	r3, [r7, #15]
          break;
 8003a6a:	e005      	b.n	8003a78 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ef      	beq.n	8003a58 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a7e:	4b06      	ldr	r3, [pc, #24]	@ (8003a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a80:	695a      	ldr	r2, [r3, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	4904      	ldr	r1, [pc, #16]	@ (8003a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40021000 	.word	0x40021000

08003a9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e095      	b.n	8003bda <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d108      	bne.n	8003ac8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003abe:	d009      	beq.n	8003ad4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	61da      	str	r2, [r3, #28]
 8003ac6:	e005      	b.n	8003ad4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fd fa62 	bl	8000fb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b14:	d902      	bls.n	8003b1c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	e002      	b.n	8003b22 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003b2a:	d007      	beq.n	8003b3c <HAL_SPI_Init+0xa0>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b34:	d002      	beq.n	8003b3c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b7e:	ea42 0103 	orr.w	r1, r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b86:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	0c1b      	lsrs	r3, r3, #16
 8003b98:	f003 0204 	and.w	r2, r3, #4
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003bb8:	ea42 0103 	orr.w	r1, r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e049      	b.n	8003c88 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d106      	bne.n	8003c0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f841 	bl	8003c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2202      	movs	r2, #2
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4610      	mov	r0, r2
 8003c22:	f000 f9df 	bl	8003fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d001      	beq.n	8003cbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e04f      	b.n	8003d5c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a23      	ldr	r2, [pc, #140]	@ (8003d68 <HAL_TIM_Base_Start_IT+0xc4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d01d      	beq.n	8003d1a <HAL_TIM_Base_Start_IT+0x76>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ce6:	d018      	beq.n	8003d1a <HAL_TIM_Base_Start_IT+0x76>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1f      	ldr	r2, [pc, #124]	@ (8003d6c <HAL_TIM_Base_Start_IT+0xc8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d013      	beq.n	8003d1a <HAL_TIM_Base_Start_IT+0x76>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8003d70 <HAL_TIM_Base_Start_IT+0xcc>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00e      	beq.n	8003d1a <HAL_TIM_Base_Start_IT+0x76>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1c      	ldr	r2, [pc, #112]	@ (8003d74 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d009      	beq.n	8003d1a <HAL_TIM_Base_Start_IT+0x76>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a1b      	ldr	r2, [pc, #108]	@ (8003d78 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d004      	beq.n	8003d1a <HAL_TIM_Base_Start_IT+0x76>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a19      	ldr	r2, [pc, #100]	@ (8003d7c <HAL_TIM_Base_Start_IT+0xd8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d115      	bne.n	8003d46 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	4b17      	ldr	r3, [pc, #92]	@ (8003d80 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b06      	cmp	r3, #6
 8003d2a:	d015      	beq.n	8003d58 <HAL_TIM_Base_Start_IT+0xb4>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d32:	d011      	beq.n	8003d58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d44:	e008      	b.n	8003d58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	e000      	b.n	8003d5a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	40012c00 	.word	0x40012c00
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40000800 	.word	0x40000800
 8003d74:	40000c00 	.word	0x40000c00
 8003d78:	40013400 	.word	0x40013400
 8003d7c:	40014000 	.word	0x40014000
 8003d80:	00010007 	.word	0x00010007

08003d84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d020      	beq.n	8003de8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01b      	beq.n	8003de8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0202 	mvn.w	r2, #2
 8003db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f8e9 	bl	8003fa6 <HAL_TIM_IC_CaptureCallback>
 8003dd4:	e005      	b.n	8003de2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f8db 	bl	8003f92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f8ec 	bl	8003fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d020      	beq.n	8003e34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01b      	beq.n	8003e34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0204 	mvn.w	r2, #4
 8003e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2202      	movs	r2, #2
 8003e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f8c3 	bl	8003fa6 <HAL_TIM_IC_CaptureCallback>
 8003e20:	e005      	b.n	8003e2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f8b5 	bl	8003f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f8c6 	bl	8003fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d020      	beq.n	8003e80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01b      	beq.n	8003e80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0208 	mvn.w	r2, #8
 8003e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2204      	movs	r2, #4
 8003e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f89d 	bl	8003fa6 <HAL_TIM_IC_CaptureCallback>
 8003e6c:	e005      	b.n	8003e7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f88f 	bl	8003f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f8a0 	bl	8003fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d020      	beq.n	8003ecc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01b      	beq.n	8003ecc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0210 	mvn.w	r2, #16
 8003e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f877 	bl	8003fa6 <HAL_TIM_IC_CaptureCallback>
 8003eb8:	e005      	b.n	8003ec6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f869 	bl	8003f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f87a 	bl	8003fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00c      	beq.n	8003ef0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d007      	beq.n	8003ef0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0201 	mvn.w	r2, #1
 8003ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fc ff1e 	bl	8000d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d104      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00c      	beq.n	8003f1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d007      	beq.n	8003f1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f913 	bl	8004144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00c      	beq.n	8003f42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d007      	beq.n	8003f42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f90b 	bl	8004158 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00c      	beq.n	8003f66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d007      	beq.n	8003f66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f834 	bl	8003fce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00c      	beq.n	8003f8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f06f 0220 	mvn.w	r2, #32
 8003f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f8d3 	bl	8004130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f8a:	bf00      	nop
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a46      	ldr	r2, [pc, #280]	@ (8004110 <TIM_Base_SetConfig+0x12c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d013      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004002:	d00f      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a43      	ldr	r2, [pc, #268]	@ (8004114 <TIM_Base_SetConfig+0x130>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00b      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a42      	ldr	r2, [pc, #264]	@ (8004118 <TIM_Base_SetConfig+0x134>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d007      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a41      	ldr	r2, [pc, #260]	@ (800411c <TIM_Base_SetConfig+0x138>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a40      	ldr	r2, [pc, #256]	@ (8004120 <TIM_Base_SetConfig+0x13c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d108      	bne.n	8004036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800402a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a35      	ldr	r2, [pc, #212]	@ (8004110 <TIM_Base_SetConfig+0x12c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01f      	beq.n	800407e <TIM_Base_SetConfig+0x9a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004044:	d01b      	beq.n	800407e <TIM_Base_SetConfig+0x9a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a32      	ldr	r2, [pc, #200]	@ (8004114 <TIM_Base_SetConfig+0x130>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d017      	beq.n	800407e <TIM_Base_SetConfig+0x9a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a31      	ldr	r2, [pc, #196]	@ (8004118 <TIM_Base_SetConfig+0x134>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d013      	beq.n	800407e <TIM_Base_SetConfig+0x9a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a30      	ldr	r2, [pc, #192]	@ (800411c <TIM_Base_SetConfig+0x138>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00f      	beq.n	800407e <TIM_Base_SetConfig+0x9a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a2f      	ldr	r2, [pc, #188]	@ (8004120 <TIM_Base_SetConfig+0x13c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00b      	beq.n	800407e <TIM_Base_SetConfig+0x9a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a2e      	ldr	r2, [pc, #184]	@ (8004124 <TIM_Base_SetConfig+0x140>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d007      	beq.n	800407e <TIM_Base_SetConfig+0x9a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a2d      	ldr	r2, [pc, #180]	@ (8004128 <TIM_Base_SetConfig+0x144>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d003      	beq.n	800407e <TIM_Base_SetConfig+0x9a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a2c      	ldr	r2, [pc, #176]	@ (800412c <TIM_Base_SetConfig+0x148>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d108      	bne.n	8004090 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a16      	ldr	r2, [pc, #88]	@ (8004110 <TIM_Base_SetConfig+0x12c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00f      	beq.n	80040dc <TIM_Base_SetConfig+0xf8>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a18      	ldr	r2, [pc, #96]	@ (8004120 <TIM_Base_SetConfig+0x13c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00b      	beq.n	80040dc <TIM_Base_SetConfig+0xf8>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a17      	ldr	r2, [pc, #92]	@ (8004124 <TIM_Base_SetConfig+0x140>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d007      	beq.n	80040dc <TIM_Base_SetConfig+0xf8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a16      	ldr	r2, [pc, #88]	@ (8004128 <TIM_Base_SetConfig+0x144>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d003      	beq.n	80040dc <TIM_Base_SetConfig+0xf8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a15      	ldr	r2, [pc, #84]	@ (800412c <TIM_Base_SetConfig+0x148>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d103      	bne.n	80040e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d105      	bne.n	8004102 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f023 0201 	bic.w	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	611a      	str	r2, [r3, #16]
  }
}
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40012c00 	.word	0x40012c00
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800
 800411c:	40000c00 	.word	0x40000c00
 8004120:	40013400 	.word	0x40013400
 8004124:	40014000 	.word	0x40014000
 8004128:	40014400 	.word	0x40014400
 800412c:	40014800 	.word	0x40014800

08004130 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e040      	b.n	8004200 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fc ff56 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2224      	movs	r2, #36	@ 0x24
 8004198:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0201 	bic.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fae0 	bl	8004778 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f825 	bl	8004208 <UART_SetConfig>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e01b      	b.n	8004200 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 fb5f 	bl	80048bc <UART_CheckIdleState>
 80041fe:	4603      	mov	r3, r0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800420c:	b08a      	sub	sp, #40	@ 0x28
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	431a      	orrs	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	431a      	orrs	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	4313      	orrs	r3, r2
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	4ba4      	ldr	r3, [pc, #656]	@ (80044c8 <UART_SetConfig+0x2c0>)
 8004238:	4013      	ands	r3, r2
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	6812      	ldr	r2, [r2, #0]
 800423e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004240:	430b      	orrs	r3, r1
 8004242:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a99      	ldr	r2, [pc, #612]	@ (80044cc <UART_SetConfig+0x2c4>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d004      	beq.n	8004274 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004270:	4313      	orrs	r3, r2
 8004272:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004284:	430a      	orrs	r2, r1
 8004286:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a90      	ldr	r2, [pc, #576]	@ (80044d0 <UART_SetConfig+0x2c8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d126      	bne.n	80042e0 <UART_SetConfig+0xd8>
 8004292:	4b90      	ldr	r3, [pc, #576]	@ (80044d4 <UART_SetConfig+0x2cc>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	2b03      	cmp	r3, #3
 800429e:	d81b      	bhi.n	80042d8 <UART_SetConfig+0xd0>
 80042a0:	a201      	add	r2, pc, #4	@ (adr r2, 80042a8 <UART_SetConfig+0xa0>)
 80042a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a6:	bf00      	nop
 80042a8:	080042b9 	.word	0x080042b9
 80042ac:	080042c9 	.word	0x080042c9
 80042b0:	080042c1 	.word	0x080042c1
 80042b4:	080042d1 	.word	0x080042d1
 80042b8:	2301      	movs	r3, #1
 80042ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042be:	e116      	b.n	80044ee <UART_SetConfig+0x2e6>
 80042c0:	2302      	movs	r3, #2
 80042c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042c6:	e112      	b.n	80044ee <UART_SetConfig+0x2e6>
 80042c8:	2304      	movs	r3, #4
 80042ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ce:	e10e      	b.n	80044ee <UART_SetConfig+0x2e6>
 80042d0:	2308      	movs	r3, #8
 80042d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042d6:	e10a      	b.n	80044ee <UART_SetConfig+0x2e6>
 80042d8:	2310      	movs	r3, #16
 80042da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042de:	e106      	b.n	80044ee <UART_SetConfig+0x2e6>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a7c      	ldr	r2, [pc, #496]	@ (80044d8 <UART_SetConfig+0x2d0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d138      	bne.n	800435c <UART_SetConfig+0x154>
 80042ea:	4b7a      	ldr	r3, [pc, #488]	@ (80044d4 <UART_SetConfig+0x2cc>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f0:	f003 030c 	and.w	r3, r3, #12
 80042f4:	2b0c      	cmp	r3, #12
 80042f6:	d82d      	bhi.n	8004354 <UART_SetConfig+0x14c>
 80042f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004300 <UART_SetConfig+0xf8>)
 80042fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fe:	bf00      	nop
 8004300:	08004335 	.word	0x08004335
 8004304:	08004355 	.word	0x08004355
 8004308:	08004355 	.word	0x08004355
 800430c:	08004355 	.word	0x08004355
 8004310:	08004345 	.word	0x08004345
 8004314:	08004355 	.word	0x08004355
 8004318:	08004355 	.word	0x08004355
 800431c:	08004355 	.word	0x08004355
 8004320:	0800433d 	.word	0x0800433d
 8004324:	08004355 	.word	0x08004355
 8004328:	08004355 	.word	0x08004355
 800432c:	08004355 	.word	0x08004355
 8004330:	0800434d 	.word	0x0800434d
 8004334:	2300      	movs	r3, #0
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800433a:	e0d8      	b.n	80044ee <UART_SetConfig+0x2e6>
 800433c:	2302      	movs	r3, #2
 800433e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004342:	e0d4      	b.n	80044ee <UART_SetConfig+0x2e6>
 8004344:	2304      	movs	r3, #4
 8004346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800434a:	e0d0      	b.n	80044ee <UART_SetConfig+0x2e6>
 800434c:	2308      	movs	r3, #8
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004352:	e0cc      	b.n	80044ee <UART_SetConfig+0x2e6>
 8004354:	2310      	movs	r3, #16
 8004356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800435a:	e0c8      	b.n	80044ee <UART_SetConfig+0x2e6>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a5e      	ldr	r2, [pc, #376]	@ (80044dc <UART_SetConfig+0x2d4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d125      	bne.n	80043b2 <UART_SetConfig+0x1aa>
 8004366:	4b5b      	ldr	r3, [pc, #364]	@ (80044d4 <UART_SetConfig+0x2cc>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800436c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004370:	2b30      	cmp	r3, #48	@ 0x30
 8004372:	d016      	beq.n	80043a2 <UART_SetConfig+0x19a>
 8004374:	2b30      	cmp	r3, #48	@ 0x30
 8004376:	d818      	bhi.n	80043aa <UART_SetConfig+0x1a2>
 8004378:	2b20      	cmp	r3, #32
 800437a:	d00a      	beq.n	8004392 <UART_SetConfig+0x18a>
 800437c:	2b20      	cmp	r3, #32
 800437e:	d814      	bhi.n	80043aa <UART_SetConfig+0x1a2>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <UART_SetConfig+0x182>
 8004384:	2b10      	cmp	r3, #16
 8004386:	d008      	beq.n	800439a <UART_SetConfig+0x192>
 8004388:	e00f      	b.n	80043aa <UART_SetConfig+0x1a2>
 800438a:	2300      	movs	r3, #0
 800438c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004390:	e0ad      	b.n	80044ee <UART_SetConfig+0x2e6>
 8004392:	2302      	movs	r3, #2
 8004394:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004398:	e0a9      	b.n	80044ee <UART_SetConfig+0x2e6>
 800439a:	2304      	movs	r3, #4
 800439c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043a0:	e0a5      	b.n	80044ee <UART_SetConfig+0x2e6>
 80043a2:	2308      	movs	r3, #8
 80043a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043a8:	e0a1      	b.n	80044ee <UART_SetConfig+0x2e6>
 80043aa:	2310      	movs	r3, #16
 80043ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043b0:	e09d      	b.n	80044ee <UART_SetConfig+0x2e6>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a4a      	ldr	r2, [pc, #296]	@ (80044e0 <UART_SetConfig+0x2d8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d125      	bne.n	8004408 <UART_SetConfig+0x200>
 80043bc:	4b45      	ldr	r3, [pc, #276]	@ (80044d4 <UART_SetConfig+0x2cc>)
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80043c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80043c8:	d016      	beq.n	80043f8 <UART_SetConfig+0x1f0>
 80043ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80043cc:	d818      	bhi.n	8004400 <UART_SetConfig+0x1f8>
 80043ce:	2b80      	cmp	r3, #128	@ 0x80
 80043d0:	d00a      	beq.n	80043e8 <UART_SetConfig+0x1e0>
 80043d2:	2b80      	cmp	r3, #128	@ 0x80
 80043d4:	d814      	bhi.n	8004400 <UART_SetConfig+0x1f8>
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <UART_SetConfig+0x1d8>
 80043da:	2b40      	cmp	r3, #64	@ 0x40
 80043dc:	d008      	beq.n	80043f0 <UART_SetConfig+0x1e8>
 80043de:	e00f      	b.n	8004400 <UART_SetConfig+0x1f8>
 80043e0:	2300      	movs	r3, #0
 80043e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043e6:	e082      	b.n	80044ee <UART_SetConfig+0x2e6>
 80043e8:	2302      	movs	r3, #2
 80043ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ee:	e07e      	b.n	80044ee <UART_SetConfig+0x2e6>
 80043f0:	2304      	movs	r3, #4
 80043f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043f6:	e07a      	b.n	80044ee <UART_SetConfig+0x2e6>
 80043f8:	2308      	movs	r3, #8
 80043fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043fe:	e076      	b.n	80044ee <UART_SetConfig+0x2e6>
 8004400:	2310      	movs	r3, #16
 8004402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004406:	e072      	b.n	80044ee <UART_SetConfig+0x2e6>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a35      	ldr	r2, [pc, #212]	@ (80044e4 <UART_SetConfig+0x2dc>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d12a      	bne.n	8004468 <UART_SetConfig+0x260>
 8004412:	4b30      	ldr	r3, [pc, #192]	@ (80044d4 <UART_SetConfig+0x2cc>)
 8004414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004418:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800441c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004420:	d01a      	beq.n	8004458 <UART_SetConfig+0x250>
 8004422:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004426:	d81b      	bhi.n	8004460 <UART_SetConfig+0x258>
 8004428:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800442c:	d00c      	beq.n	8004448 <UART_SetConfig+0x240>
 800442e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004432:	d815      	bhi.n	8004460 <UART_SetConfig+0x258>
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <UART_SetConfig+0x238>
 8004438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800443c:	d008      	beq.n	8004450 <UART_SetConfig+0x248>
 800443e:	e00f      	b.n	8004460 <UART_SetConfig+0x258>
 8004440:	2300      	movs	r3, #0
 8004442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004446:	e052      	b.n	80044ee <UART_SetConfig+0x2e6>
 8004448:	2302      	movs	r3, #2
 800444a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800444e:	e04e      	b.n	80044ee <UART_SetConfig+0x2e6>
 8004450:	2304      	movs	r3, #4
 8004452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004456:	e04a      	b.n	80044ee <UART_SetConfig+0x2e6>
 8004458:	2308      	movs	r3, #8
 800445a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800445e:	e046      	b.n	80044ee <UART_SetConfig+0x2e6>
 8004460:	2310      	movs	r3, #16
 8004462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004466:	e042      	b.n	80044ee <UART_SetConfig+0x2e6>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a17      	ldr	r2, [pc, #92]	@ (80044cc <UART_SetConfig+0x2c4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d13a      	bne.n	80044e8 <UART_SetConfig+0x2e0>
 8004472:	4b18      	ldr	r3, [pc, #96]	@ (80044d4 <UART_SetConfig+0x2cc>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004478:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800447c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004480:	d01a      	beq.n	80044b8 <UART_SetConfig+0x2b0>
 8004482:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004486:	d81b      	bhi.n	80044c0 <UART_SetConfig+0x2b8>
 8004488:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800448c:	d00c      	beq.n	80044a8 <UART_SetConfig+0x2a0>
 800448e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004492:	d815      	bhi.n	80044c0 <UART_SetConfig+0x2b8>
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <UART_SetConfig+0x298>
 8004498:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800449c:	d008      	beq.n	80044b0 <UART_SetConfig+0x2a8>
 800449e:	e00f      	b.n	80044c0 <UART_SetConfig+0x2b8>
 80044a0:	2300      	movs	r3, #0
 80044a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044a6:	e022      	b.n	80044ee <UART_SetConfig+0x2e6>
 80044a8:	2302      	movs	r3, #2
 80044aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ae:	e01e      	b.n	80044ee <UART_SetConfig+0x2e6>
 80044b0:	2304      	movs	r3, #4
 80044b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044b6:	e01a      	b.n	80044ee <UART_SetConfig+0x2e6>
 80044b8:	2308      	movs	r3, #8
 80044ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044be:	e016      	b.n	80044ee <UART_SetConfig+0x2e6>
 80044c0:	2310      	movs	r3, #16
 80044c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044c6:	e012      	b.n	80044ee <UART_SetConfig+0x2e6>
 80044c8:	efff69f3 	.word	0xefff69f3
 80044cc:	40008000 	.word	0x40008000
 80044d0:	40013800 	.word	0x40013800
 80044d4:	40021000 	.word	0x40021000
 80044d8:	40004400 	.word	0x40004400
 80044dc:	40004800 	.word	0x40004800
 80044e0:	40004c00 	.word	0x40004c00
 80044e4:	40005000 	.word	0x40005000
 80044e8:	2310      	movs	r3, #16
 80044ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a9f      	ldr	r2, [pc, #636]	@ (8004770 <UART_SetConfig+0x568>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d17a      	bne.n	80045ee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d824      	bhi.n	800454a <UART_SetConfig+0x342>
 8004500:	a201      	add	r2, pc, #4	@ (adr r2, 8004508 <UART_SetConfig+0x300>)
 8004502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004506:	bf00      	nop
 8004508:	0800452d 	.word	0x0800452d
 800450c:	0800454b 	.word	0x0800454b
 8004510:	08004535 	.word	0x08004535
 8004514:	0800454b 	.word	0x0800454b
 8004518:	0800453b 	.word	0x0800453b
 800451c:	0800454b 	.word	0x0800454b
 8004520:	0800454b 	.word	0x0800454b
 8004524:	0800454b 	.word	0x0800454b
 8004528:	08004543 	.word	0x08004543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800452c:	f7fe fd2c 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8004530:	61f8      	str	r0, [r7, #28]
        break;
 8004532:	e010      	b.n	8004556 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004534:	4b8f      	ldr	r3, [pc, #572]	@ (8004774 <UART_SetConfig+0x56c>)
 8004536:	61fb      	str	r3, [r7, #28]
        break;
 8004538:	e00d      	b.n	8004556 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800453a:	f7fe fc8d 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 800453e:	61f8      	str	r0, [r7, #28]
        break;
 8004540:	e009      	b.n	8004556 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004546:	61fb      	str	r3, [r7, #28]
        break;
 8004548:	e005      	b.n	8004556 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004554:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80fb 	beq.w	8004754 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	4613      	mov	r3, r2
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	4413      	add	r3, r2
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	429a      	cmp	r2, r3
 800456c:	d305      	bcc.n	800457a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	429a      	cmp	r2, r3
 8004578:	d903      	bls.n	8004582 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004580:	e0e8      	b.n	8004754 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	2200      	movs	r2, #0
 8004586:	461c      	mov	r4, r3
 8004588:	4615      	mov	r5, r2
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	022b      	lsls	r3, r5, #8
 8004594:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004598:	0222      	lsls	r2, r4, #8
 800459a:	68f9      	ldr	r1, [r7, #12]
 800459c:	6849      	ldr	r1, [r1, #4]
 800459e:	0849      	lsrs	r1, r1, #1
 80045a0:	2000      	movs	r0, #0
 80045a2:	4688      	mov	r8, r1
 80045a4:	4681      	mov	r9, r0
 80045a6:	eb12 0a08 	adds.w	sl, r2, r8
 80045aa:	eb43 0b09 	adc.w	fp, r3, r9
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	603b      	str	r3, [r7, #0]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045bc:	4650      	mov	r0, sl
 80045be:	4659      	mov	r1, fp
 80045c0:	f7fb fe06 	bl	80001d0 <__aeabi_uldivmod>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4613      	mov	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045d2:	d308      	bcc.n	80045e6 <UART_SetConfig+0x3de>
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045da:	d204      	bcs.n	80045e6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	60da      	str	r2, [r3, #12]
 80045e4:	e0b6      	b.n	8004754 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80045ec:	e0b2      	b.n	8004754 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045f6:	d15e      	bne.n	80046b6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80045f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d828      	bhi.n	8004652 <UART_SetConfig+0x44a>
 8004600:	a201      	add	r2, pc, #4	@ (adr r2, 8004608 <UART_SetConfig+0x400>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	0800462d 	.word	0x0800462d
 800460c:	08004635 	.word	0x08004635
 8004610:	0800463d 	.word	0x0800463d
 8004614:	08004653 	.word	0x08004653
 8004618:	08004643 	.word	0x08004643
 800461c:	08004653 	.word	0x08004653
 8004620:	08004653 	.word	0x08004653
 8004624:	08004653 	.word	0x08004653
 8004628:	0800464b 	.word	0x0800464b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800462c:	f7fe fcac 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8004630:	61f8      	str	r0, [r7, #28]
        break;
 8004632:	e014      	b.n	800465e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004634:	f7fe fcbe 	bl	8002fb4 <HAL_RCC_GetPCLK2Freq>
 8004638:	61f8      	str	r0, [r7, #28]
        break;
 800463a:	e010      	b.n	800465e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800463c:	4b4d      	ldr	r3, [pc, #308]	@ (8004774 <UART_SetConfig+0x56c>)
 800463e:	61fb      	str	r3, [r7, #28]
        break;
 8004640:	e00d      	b.n	800465e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004642:	f7fe fc09 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8004646:	61f8      	str	r0, [r7, #28]
        break;
 8004648:	e009      	b.n	800465e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800464a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800464e:	61fb      	str	r3, [r7, #28]
        break;
 8004650:	e005      	b.n	800465e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800465c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d077      	beq.n	8004754 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	005a      	lsls	r2, r3, #1
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	085b      	lsrs	r3, r3, #1
 800466e:	441a      	add	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	2b0f      	cmp	r3, #15
 800467e:	d916      	bls.n	80046ae <UART_SetConfig+0x4a6>
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004686:	d212      	bcs.n	80046ae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	b29b      	uxth	r3, r3
 800468c:	f023 030f 	bic.w	r3, r3, #15
 8004690:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	085b      	lsrs	r3, r3, #1
 8004696:	b29b      	uxth	r3, r3
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	b29a      	uxth	r2, r3
 800469e:	8afb      	ldrh	r3, [r7, #22]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	8afa      	ldrh	r2, [r7, #22]
 80046aa:	60da      	str	r2, [r3, #12]
 80046ac:	e052      	b.n	8004754 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80046b4:	e04e      	b.n	8004754 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d827      	bhi.n	800470e <UART_SetConfig+0x506>
 80046be:	a201      	add	r2, pc, #4	@ (adr r2, 80046c4 <UART_SetConfig+0x4bc>)
 80046c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c4:	080046e9 	.word	0x080046e9
 80046c8:	080046f1 	.word	0x080046f1
 80046cc:	080046f9 	.word	0x080046f9
 80046d0:	0800470f 	.word	0x0800470f
 80046d4:	080046ff 	.word	0x080046ff
 80046d8:	0800470f 	.word	0x0800470f
 80046dc:	0800470f 	.word	0x0800470f
 80046e0:	0800470f 	.word	0x0800470f
 80046e4:	08004707 	.word	0x08004707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046e8:	f7fe fc4e 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 80046ec:	61f8      	str	r0, [r7, #28]
        break;
 80046ee:	e014      	b.n	800471a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046f0:	f7fe fc60 	bl	8002fb4 <HAL_RCC_GetPCLK2Freq>
 80046f4:	61f8      	str	r0, [r7, #28]
        break;
 80046f6:	e010      	b.n	800471a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004774 <UART_SetConfig+0x56c>)
 80046fa:	61fb      	str	r3, [r7, #28]
        break;
 80046fc:	e00d      	b.n	800471a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046fe:	f7fe fbab 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8004702:	61f8      	str	r0, [r7, #28]
        break;
 8004704:	e009      	b.n	800471a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800470a:	61fb      	str	r3, [r7, #28]
        break;
 800470c:	e005      	b.n	800471a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004718:	bf00      	nop
    }

    if (pclk != 0U)
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d019      	beq.n	8004754 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	085a      	lsrs	r2, r3, #1
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	441a      	add	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004732:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	2b0f      	cmp	r3, #15
 8004738:	d909      	bls.n	800474e <UART_SetConfig+0x546>
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004740:	d205      	bcs.n	800474e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60da      	str	r2, [r3, #12]
 800474c:	e002      	b.n	8004754 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004760:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004764:	4618      	mov	r0, r3
 8004766:	3728      	adds	r7, #40	@ 0x28
 8004768:	46bd      	mov	sp, r7
 800476a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800476e:	bf00      	nop
 8004770:	40008000 	.word	0x40008000
 8004774:	00f42400 	.word	0x00f42400

08004778 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480c:	f003 0310 	and.w	r3, r3, #16
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01a      	beq.n	800488e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004872:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004876:	d10a      	bne.n	800488e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	605a      	str	r2, [r3, #4]
  }
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b098      	sub	sp, #96	@ 0x60
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048cc:	f7fc fe26 	bl	800151c <HAL_GetTick>
 80048d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d12e      	bne.n	800493e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e8:	2200      	movs	r2, #0
 80048ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f88c 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d021      	beq.n	800493e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004902:	e853 3f00 	ldrex	r3, [r3]
 8004906:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800490a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800490e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	461a      	mov	r2, r3
 8004916:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004918:	647b      	str	r3, [r7, #68]	@ 0x44
 800491a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800491e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e6      	bne.n	80048fa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2220      	movs	r2, #32
 8004930:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e062      	b.n	8004a04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b04      	cmp	r3, #4
 800494a:	d149      	bne.n	80049e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800494c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004954:	2200      	movs	r2, #0
 8004956:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f856 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d03c      	beq.n	80049e0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496e:	e853 3f00 	ldrex	r3, [r3]
 8004972:	623b      	str	r3, [r7, #32]
   return(result);
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800497a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004984:	633b      	str	r3, [r7, #48]	@ 0x30
 8004986:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004988:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800498a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800498c:	e841 2300 	strex	r3, r2, [r1]
 8004990:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e6      	bne.n	8004966 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3308      	adds	r3, #8
 800499e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0301 	bic.w	r3, r3, #1
 80049ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3308      	adds	r3, #8
 80049b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049b8:	61fa      	str	r2, [r7, #28]
 80049ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	69b9      	ldr	r1, [r7, #24]
 80049be:	69fa      	ldr	r2, [r7, #28]
 80049c0:	e841 2300 	strex	r3, r2, [r1]
 80049c4:	617b      	str	r3, [r7, #20]
   return(result);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e5      	bne.n	8004998 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e011      	b.n	8004a04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2220      	movs	r2, #32
 80049e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3758      	adds	r7, #88	@ 0x58
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a1c:	e04f      	b.n	8004abe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a24:	d04b      	beq.n	8004abe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a26:	f7fc fd79 	bl	800151c <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d302      	bcc.n	8004a3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e04e      	b.n	8004ade <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d037      	beq.n	8004abe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b80      	cmp	r3, #128	@ 0x80
 8004a52:	d034      	beq.n	8004abe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b40      	cmp	r3, #64	@ 0x40
 8004a58:	d031      	beq.n	8004abe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d110      	bne.n	8004a8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 f838 	bl	8004ae6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2208      	movs	r2, #8
 8004a7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e029      	b.n	8004ade <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a98:	d111      	bne.n	8004abe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004aa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f81e 	bl	8004ae6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e00f      	b.n	8004ade <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	bf0c      	ite	eq
 8004ace:	2301      	moveq	r3, #1
 8004ad0:	2300      	movne	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d0a0      	beq.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b095      	sub	sp, #84	@ 0x54
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b14:	e841 2300 	strex	r3, r2, [r1]
 8004b18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e6      	bne.n	8004aee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3308      	adds	r3, #8
 8004b26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	e853 3f00 	ldrex	r3, [r3]
 8004b2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	f023 0301 	bic.w	r3, r3, #1
 8004b36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e5      	bne.n	8004b20 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d118      	bne.n	8004b8e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	e853 3f00 	ldrex	r3, [r3]
 8004b68:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f023 0310 	bic.w	r3, r3, #16
 8004b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b7a:	61bb      	str	r3, [r7, #24]
 8004b7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7e:	6979      	ldr	r1, [r7, #20]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	613b      	str	r3, [r7, #16]
   return(result);
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e6      	bne.n	8004b5c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004ba2:	bf00      	nop
 8004ba4:	3754      	adds	r7, #84	@ 0x54
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bae:	b084      	sub	sp, #16
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	f107 001c 	add.w	r0, r7, #28
 8004bbc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 fa69 	bl	80050a4 <USB_CoreReset>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004bd6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d106      	bne.n	8004bec <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	639a      	str	r2, [r3, #56]	@ 0x38
 8004bea:	e005      	b.n	8004bf8 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c04:	b004      	add	sp, #16
 8004c06:	4770      	bx	lr

08004c08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f023 0201 	bic.w	r2, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	460b      	mov	r3, r1
 8004c34:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d115      	bne.n	8004c78 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004c58:	200a      	movs	r0, #10
 8004c5a:	f7fc fc6b 	bl	8001534 <HAL_Delay>
      ms += 10U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	330a      	adds	r3, #10
 8004c62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fa0f 	bl	8005088 <USB_GetMode>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d01e      	beq.n	8004cae <USB_SetCurrentMode+0x84>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2bc7      	cmp	r3, #199	@ 0xc7
 8004c74:	d9f0      	bls.n	8004c58 <USB_SetCurrentMode+0x2e>
 8004c76:	e01a      	b.n	8004cae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d115      	bne.n	8004caa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004c8a:	200a      	movs	r0, #10
 8004c8c:	f7fc fc52 	bl	8001534 <HAL_Delay>
      ms += 10U;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	330a      	adds	r3, #10
 8004c94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f9f6 	bl	8005088 <USB_GetMode>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d005      	beq.n	8004cae <USB_SetCurrentMode+0x84>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2bc7      	cmp	r3, #199	@ 0xc7
 8004ca6:	d9f0      	bls.n	8004c8a <USB_SetCurrentMode+0x60>
 8004ca8:	e001      	b.n	8004cae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e005      	b.n	8004cba <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2bc8      	cmp	r3, #200	@ 0xc8
 8004cb2:	d101      	bne.n	8004cb8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
	...

08004cc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b086      	sub	sp, #24
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004cd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004cde:	2300      	movs	r3, #0
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	e009      	b.n	8004cf8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	3340      	adds	r3, #64	@ 0x40
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	2200      	movs	r2, #0
 8004cf0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	2b0e      	cmp	r3, #14
 8004cfc:	d9f2      	bls.n	8004ce4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004cfe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d11c      	bne.n	8004d40 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d14:	f043 0302 	orr.w	r3, r3, #2
 8004d18:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	e005      	b.n	8004d4c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d44:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004d52:	461a      	mov	r2, r3
 8004d54:	2300      	movs	r3, #0
 8004d56:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d58:	2103      	movs	r1, #3
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f95a 	bl	8005014 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d60:	2110      	movs	r1, #16
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f8f6 	bl	8004f54 <USB_FlushTxFifo>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f920 	bl	8004fb8 <USB_FlushRxFifo>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d88:	461a      	mov	r2, r3
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d94:	461a      	mov	r2, r3
 8004d96:	2300      	movs	r3, #0
 8004d98:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004da0:	461a      	mov	r2, r3
 8004da2:	2300      	movs	r3, #0
 8004da4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004da6:	2300      	movs	r3, #0
 8004da8:	613b      	str	r3, [r7, #16]
 8004daa:	e043      	b.n	8004e34 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dc2:	d118      	bne.n	8004df6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10a      	bne.n	8004de0 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	e013      	b.n	8004e08 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dec:	461a      	mov	r2, r3
 8004dee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004df2:	6013      	str	r3, [r2, #0]
 8004df4:	e008      	b.n	8004e08 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e02:	461a      	mov	r2, r3
 8004e04:	2300      	movs	r3, #0
 8004e06:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e14:	461a      	mov	r2, r3
 8004e16:	2300      	movs	r3, #0
 8004e18:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e26:	461a      	mov	r2, r3
 8004e28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	3301      	adds	r3, #1
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e38:	461a      	mov	r2, r3
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d3b5      	bcc.n	8004dac <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e40:	2300      	movs	r3, #0
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	e043      	b.n	8004ece <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e5c:	d118      	bne.n	8004e90 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10a      	bne.n	8004e7a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e70:	461a      	mov	r2, r3
 8004e72:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004e76:	6013      	str	r3, [r2, #0]
 8004e78:	e013      	b.n	8004ea2 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e86:	461a      	mov	r2, r3
 8004e88:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	e008      	b.n	8004ea2 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eae:	461a      	mov	r2, r3
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ec6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d3b5      	bcc.n	8004e46 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ee8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004eec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004efa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f043 0210 	orr.w	r2, r3, #16
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699a      	ldr	r2, [r3, #24]
 8004f0c:	4b10      	ldr	r3, [pc, #64]	@ (8004f50 <USB_DevInit+0x28c>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f14:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	f043 0208 	orr.w	r2, r3, #8
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d107      	bne.n	8004f40 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f38:	f043 0304 	orr.w	r3, r3, #4
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f4c:	b004      	add	sp, #16
 8004f4e:	4770      	bx	lr
 8004f50:	803c3800 	.word	0x803c3800

08004f54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3301      	adds	r3, #1
 8004f66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f6e:	d901      	bls.n	8004f74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e01b      	b.n	8004fac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	daf2      	bge.n	8004f62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	019b      	lsls	r3, r3, #6
 8004f84:	f043 0220 	orr.w	r2, r3, #32
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f98:	d901      	bls.n	8004f9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e006      	b.n	8004fac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b20      	cmp	r3, #32
 8004fa8:	d0f0      	beq.n	8004f8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fd0:	d901      	bls.n	8004fd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e018      	b.n	8005008 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	daf2      	bge.n	8004fc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2210      	movs	r2, #16
 8004fe6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	3301      	adds	r3, #1
 8004fec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ff4:	d901      	bls.n	8004ffa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e006      	b.n	8005008 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f003 0310 	and.w	r3, r3, #16
 8005002:	2b10      	cmp	r3, #16
 8005004:	d0f0      	beq.n	8004fe8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	68f9      	ldr	r1, [r7, #12]
 8005030:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005034:	4313      	orrs	r3, r2
 8005036:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005046:	b480      	push	{r7}
 8005048:	b085      	sub	sp, #20
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005060:	f023 0303 	bic.w	r3, r3, #3
 8005064:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005074:	f043 0302 	orr.w	r3, r3, #2
 8005078:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	f003 0301 	and.w	r3, r3, #1
}
 8005098:	4618      	mov	r0, r3
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3301      	adds	r3, #1
 80050b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050bc:	d901      	bls.n	80050c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e01b      	b.n	80050fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	daf2      	bge.n	80050b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f043 0201 	orr.w	r2, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	3301      	adds	r3, #1
 80050de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050e6:	d901      	bls.n	80050ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e006      	b.n	80050fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d0f0      	beq.n	80050da <USB_CoreReset+0x36>

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
	...

08005108 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800510c:	4b05      	ldr	r3, [pc, #20]	@ (8005124 <SysTick_Handler+0x1c>)
 800510e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005110:	f001 fbe0 	bl	80068d4 <xTaskGetSchedulerState>
 8005114:	4603      	mov	r3, r0
 8005116:	2b01      	cmp	r3, #1
 8005118:	d001      	beq.n	800511e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800511a:	f002 f9d5 	bl	80074c8 <xPortSysTickHandler>
  }
}
 800511e:	bf00      	nop
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	e000e010 	.word	0xe000e010

08005128 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4a07      	ldr	r2, [pc, #28]	@ (8005154 <vApplicationGetIdleTaskMemory+0x2c>)
 8005138:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	4a06      	ldr	r2, [pc, #24]	@ (8005158 <vApplicationGetIdleTaskMemory+0x30>)
 800513e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2280      	movs	r2, #128	@ 0x80
 8005144:	601a      	str	r2, [r3, #0]
}
 8005146:	bf00      	nop
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	200007f0 	.word	0x200007f0
 8005158:	2000084c 	.word	0x2000084c

0800515c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4a07      	ldr	r2, [pc, #28]	@ (8005188 <vApplicationGetTimerTaskMemory+0x2c>)
 800516c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	4a06      	ldr	r2, [pc, #24]	@ (800518c <vApplicationGetTimerTaskMemory+0x30>)
 8005172:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800517a:	601a      	str	r2, [r3, #0]
}
 800517c:	bf00      	nop
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	20000a4c 	.word	0x20000a4c
 800518c:	20000aa8 	.word	0x20000aa8

08005190 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f103 0208 	add.w	r2, r3, #8
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f04f 32ff 	mov.w	r2, #4294967295
 80051a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f103 0208 	add.w	r2, r3, #8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f103 0208 	add.w	r2, r3, #8
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051ea:	b480      	push	{r7}
 80051ec:	b085      	sub	sp, #20
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	601a      	str	r2, [r3, #0]
}
 8005226:	bf00      	nop
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005232:	b480      	push	{r7}
 8005234:	b085      	sub	sp, #20
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005248:	d103      	bne.n	8005252 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	e00c      	b.n	800526c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3308      	adds	r3, #8
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	e002      	b.n	8005260 <vListInsert+0x2e>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	429a      	cmp	r2, r3
 800526a:	d2f6      	bcs.n	800525a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	601a      	str	r2, [r3, #0]
}
 8005298:	bf00      	nop
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6892      	ldr	r2, [r2, #8]
 80052ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6852      	ldr	r2, [r2, #4]
 80052c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d103      	bne.n	80052d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	1e5a      	subs	r2, r3, #1
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10b      	bne.n	8005324 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800531e:	bf00      	nop
 8005320:	bf00      	nop
 8005322:	e7fd      	b.n	8005320 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005324:	f002 f840 	bl	80073a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005330:	68f9      	ldr	r1, [r7, #12]
 8005332:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005334:	fb01 f303 	mul.w	r3, r1, r3
 8005338:	441a      	add	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005354:	3b01      	subs	r3, #1
 8005356:	68f9      	ldr	r1, [r7, #12]
 8005358:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800535a:	fb01 f303 	mul.w	r3, r1, r3
 800535e:	441a      	add	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	22ff      	movs	r2, #255	@ 0xff
 8005368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	22ff      	movs	r2, #255	@ 0xff
 8005370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d114      	bne.n	80053a4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d01a      	beq.n	80053b8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	3310      	adds	r3, #16
 8005386:	4618      	mov	r0, r3
 8005388:	f001 f8e4 	bl	8006554 <xTaskRemoveFromEventList>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d012      	beq.n	80053b8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005392:	4b0d      	ldr	r3, [pc, #52]	@ (80053c8 <xQueueGenericReset+0xd0>)
 8005394:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	e009      	b.n	80053b8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3310      	adds	r3, #16
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff fef1 	bl	8005190 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	3324      	adds	r3, #36	@ 0x24
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff feec 	bl	8005190 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053b8:	f002 f828 	bl	800740c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80053bc:	2301      	movs	r3, #1
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	e000ed04 	.word	0xe000ed04

080053cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08e      	sub	sp, #56	@ 0x38
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10b      	bne.n	80053f8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80053f2:	bf00      	nop
 80053f4:	bf00      	nop
 80053f6:	e7fd      	b.n	80053f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10b      	bne.n	8005416 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005410:	bf00      	nop
 8005412:	bf00      	nop
 8005414:	e7fd      	b.n	8005412 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <xQueueGenericCreateStatic+0x56>
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <xQueueGenericCreateStatic+0x5a>
 8005422:	2301      	movs	r3, #1
 8005424:	e000      	b.n	8005428 <xQueueGenericCreateStatic+0x5c>
 8005426:	2300      	movs	r3, #0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10b      	bne.n	8005444 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800542c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	623b      	str	r3, [r7, #32]
}
 800543e:	bf00      	nop
 8005440:	bf00      	nop
 8005442:	e7fd      	b.n	8005440 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d102      	bne.n	8005450 <xQueueGenericCreateStatic+0x84>
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <xQueueGenericCreateStatic+0x88>
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <xQueueGenericCreateStatic+0x8a>
 8005454:	2300      	movs	r3, #0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10b      	bne.n	8005472 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	61fb      	str	r3, [r7, #28]
}
 800546c:	bf00      	nop
 800546e:	bf00      	nop
 8005470:	e7fd      	b.n	800546e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005472:	2350      	movs	r3, #80	@ 0x50
 8005474:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2b50      	cmp	r3, #80	@ 0x50
 800547a:	d00b      	beq.n	8005494 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	61bb      	str	r3, [r7, #24]
}
 800548e:	bf00      	nop
 8005490:	bf00      	nop
 8005492:	e7fd      	b.n	8005490 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005494:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800549a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00d      	beq.n	80054bc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80054a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80054ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	4613      	mov	r3, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	68b9      	ldr	r1, [r7, #8]
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 f805 	bl	80054c6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80054bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80054be:	4618      	mov	r0, r3
 80054c0:	3730      	adds	r7, #48	@ 0x30
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b084      	sub	sp, #16
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	607a      	str	r2, [r7, #4]
 80054d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d103      	bne.n	80054e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	e002      	b.n	80054e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80054f4:	2101      	movs	r1, #1
 80054f6:	69b8      	ldr	r0, [r7, #24]
 80054f8:	f7ff fefe 	bl	80052f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	78fa      	ldrb	r2, [r7, #3]
 8005500:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005504:	bf00      	nop
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08e      	sub	sp, #56	@ 0x38
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800551a:	2300      	movs	r3, #0
 800551c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10b      	bne.n	8005540 <xQueueGenericSend+0x34>
	__asm volatile
 8005528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800553a:	bf00      	nop
 800553c:	bf00      	nop
 800553e:	e7fd      	b.n	800553c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d103      	bne.n	800554e <xQueueGenericSend+0x42>
 8005546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <xQueueGenericSend+0x46>
 800554e:	2301      	movs	r3, #1
 8005550:	e000      	b.n	8005554 <xQueueGenericSend+0x48>
 8005552:	2300      	movs	r3, #0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10b      	bne.n	8005570 <xQueueGenericSend+0x64>
	__asm volatile
 8005558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800556a:	bf00      	nop
 800556c:	bf00      	nop
 800556e:	e7fd      	b.n	800556c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	2b02      	cmp	r3, #2
 8005574:	d103      	bne.n	800557e <xQueueGenericSend+0x72>
 8005576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <xQueueGenericSend+0x76>
 800557e:	2301      	movs	r3, #1
 8005580:	e000      	b.n	8005584 <xQueueGenericSend+0x78>
 8005582:	2300      	movs	r3, #0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10b      	bne.n	80055a0 <xQueueGenericSend+0x94>
	__asm volatile
 8005588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	623b      	str	r3, [r7, #32]
}
 800559a:	bf00      	nop
 800559c:	bf00      	nop
 800559e:	e7fd      	b.n	800559c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055a0:	f001 f998 	bl	80068d4 <xTaskGetSchedulerState>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d102      	bne.n	80055b0 <xQueueGenericSend+0xa4>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <xQueueGenericSend+0xa8>
 80055b0:	2301      	movs	r3, #1
 80055b2:	e000      	b.n	80055b6 <xQueueGenericSend+0xaa>
 80055b4:	2300      	movs	r3, #0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10b      	bne.n	80055d2 <xQueueGenericSend+0xc6>
	__asm volatile
 80055ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	61fb      	str	r3, [r7, #28]
}
 80055cc:	bf00      	nop
 80055ce:	bf00      	nop
 80055d0:	e7fd      	b.n	80055ce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055d2:	f001 fee9 	bl	80073a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055de:	429a      	cmp	r2, r3
 80055e0:	d302      	bcc.n	80055e8 <xQueueGenericSend+0xdc>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d129      	bne.n	800563c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	68b9      	ldr	r1, [r7, #8]
 80055ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055ee:	f000 fa0f 	bl	8005a10 <prvCopyDataToQueue>
 80055f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d010      	beq.n	800561e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fe:	3324      	adds	r3, #36	@ 0x24
 8005600:	4618      	mov	r0, r3
 8005602:	f000 ffa7 	bl	8006554 <xTaskRemoveFromEventList>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d013      	beq.n	8005634 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800560c:	4b3f      	ldr	r3, [pc, #252]	@ (800570c <xQueueGenericSend+0x200>)
 800560e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	e00a      	b.n	8005634 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800561e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005620:	2b00      	cmp	r3, #0
 8005622:	d007      	beq.n	8005634 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005624:	4b39      	ldr	r3, [pc, #228]	@ (800570c <xQueueGenericSend+0x200>)
 8005626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005634:	f001 feea 	bl	800740c <vPortExitCritical>
				return pdPASS;
 8005638:	2301      	movs	r3, #1
 800563a:	e063      	b.n	8005704 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d103      	bne.n	800564a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005642:	f001 fee3 	bl	800740c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005646:	2300      	movs	r3, #0
 8005648:	e05c      	b.n	8005704 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800564a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800564c:	2b00      	cmp	r3, #0
 800564e:	d106      	bne.n	800565e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005650:	f107 0314 	add.w	r3, r7, #20
 8005654:	4618      	mov	r0, r3
 8005656:	f000 ffe1 	bl	800661c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800565a:	2301      	movs	r3, #1
 800565c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800565e:	f001 fed5 	bl	800740c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005662:	f000 fd51 	bl	8006108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005666:	f001 fe9f 	bl	80073a8 <vPortEnterCritical>
 800566a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005670:	b25b      	sxtb	r3, r3
 8005672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005676:	d103      	bne.n	8005680 <xQueueGenericSend+0x174>
 8005678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005682:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005686:	b25b      	sxtb	r3, r3
 8005688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568c:	d103      	bne.n	8005696 <xQueueGenericSend+0x18a>
 800568e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005696:	f001 feb9 	bl	800740c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800569a:	1d3a      	adds	r2, r7, #4
 800569c:	f107 0314 	add.w	r3, r7, #20
 80056a0:	4611      	mov	r1, r2
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 ffd0 	bl	8006648 <xTaskCheckForTimeOut>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d124      	bne.n	80056f8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056b0:	f000 faa6 	bl	8005c00 <prvIsQueueFull>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d018      	beq.n	80056ec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056bc:	3310      	adds	r3, #16
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	4611      	mov	r1, r2
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fef4 	bl	80064b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80056c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056ca:	f000 fa31 	bl	8005b30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80056ce:	f000 fd29 	bl	8006124 <xTaskResumeAll>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f47f af7c 	bne.w	80055d2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80056da:	4b0c      	ldr	r3, [pc, #48]	@ (800570c <xQueueGenericSend+0x200>)
 80056dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	e772      	b.n	80055d2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80056ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056ee:	f000 fa1f 	bl	8005b30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056f2:	f000 fd17 	bl	8006124 <xTaskResumeAll>
 80056f6:	e76c      	b.n	80055d2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80056f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056fa:	f000 fa19 	bl	8005b30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056fe:	f000 fd11 	bl	8006124 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005702:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005704:	4618      	mov	r0, r3
 8005706:	3738      	adds	r7, #56	@ 0x38
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	e000ed04 	.word	0xe000ed04

08005710 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b090      	sub	sp, #64	@ 0x40
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
 800571c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10b      	bne.n	8005740 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800573a:	bf00      	nop
 800573c:	bf00      	nop
 800573e:	e7fd      	b.n	800573c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d103      	bne.n	800574e <xQueueGenericSendFromISR+0x3e>
 8005746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <xQueueGenericSendFromISR+0x42>
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <xQueueGenericSendFromISR+0x44>
 8005752:	2300      	movs	r3, #0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10b      	bne.n	8005770 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800576a:	bf00      	nop
 800576c:	bf00      	nop
 800576e:	e7fd      	b.n	800576c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b02      	cmp	r3, #2
 8005774:	d103      	bne.n	800577e <xQueueGenericSendFromISR+0x6e>
 8005776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <xQueueGenericSendFromISR+0x72>
 800577e:	2301      	movs	r3, #1
 8005780:	e000      	b.n	8005784 <xQueueGenericSendFromISR+0x74>
 8005782:	2300      	movs	r3, #0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10b      	bne.n	80057a0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	623b      	str	r3, [r7, #32]
}
 800579a:	bf00      	nop
 800579c:	bf00      	nop
 800579e:	e7fd      	b.n	800579c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057a0:	f001 fee2 	bl	8007568 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057a4:	f3ef 8211 	mrs	r2, BASEPRI
 80057a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	61fa      	str	r2, [r7, #28]
 80057ba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057bc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057be:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d302      	bcc.n	80057d2 <xQueueGenericSendFromISR+0xc2>
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d12f      	bne.n	8005832 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80057e8:	f000 f912 	bl	8005a10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057ec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80057f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f4:	d112      	bne.n	800581c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d016      	beq.n	800582c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005800:	3324      	adds	r3, #36	@ 0x24
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fea6 	bl	8006554 <xTaskRemoveFromEventList>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00e      	beq.n	800582c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00b      	beq.n	800582c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	e007      	b.n	800582c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800581c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005820:	3301      	adds	r3, #1
 8005822:	b2db      	uxtb	r3, r3
 8005824:	b25a      	sxtb	r2, r3
 8005826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005828:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800582c:	2301      	movs	r3, #1
 800582e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005830:	e001      	b.n	8005836 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005832:	2300      	movs	r3, #0
 8005834:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005838:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005840:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005844:	4618      	mov	r0, r3
 8005846:	3740      	adds	r7, #64	@ 0x40
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08c      	sub	sp, #48	@ 0x30
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005858:	2300      	movs	r3, #0
 800585a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10b      	bne.n	800587e <xQueueReceive+0x32>
	__asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	623b      	str	r3, [r7, #32]
}
 8005878:	bf00      	nop
 800587a:	bf00      	nop
 800587c:	e7fd      	b.n	800587a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d103      	bne.n	800588c <xQueueReceive+0x40>
 8005884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <xQueueReceive+0x44>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <xQueueReceive+0x46>
 8005890:	2300      	movs	r3, #0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10b      	bne.n	80058ae <xQueueReceive+0x62>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	61fb      	str	r3, [r7, #28]
}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	e7fd      	b.n	80058aa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058ae:	f001 f811 	bl	80068d4 <xTaskGetSchedulerState>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d102      	bne.n	80058be <xQueueReceive+0x72>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <xQueueReceive+0x76>
 80058be:	2301      	movs	r3, #1
 80058c0:	e000      	b.n	80058c4 <xQueueReceive+0x78>
 80058c2:	2300      	movs	r3, #0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10b      	bne.n	80058e0 <xQueueReceive+0x94>
	__asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	61bb      	str	r3, [r7, #24]
}
 80058da:	bf00      	nop
 80058dc:	bf00      	nop
 80058de:	e7fd      	b.n	80058dc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058e0:	f001 fd62 	bl	80073a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d01f      	beq.n	8005930 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058f4:	f000 f8f6 	bl	8005ae4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fa:	1e5a      	subs	r2, r3, #1
 80058fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00f      	beq.n	8005928 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590a:	3310      	adds	r3, #16
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fe21 	bl	8006554 <xTaskRemoveFromEventList>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d007      	beq.n	8005928 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005918:	4b3c      	ldr	r3, [pc, #240]	@ (8005a0c <xQueueReceive+0x1c0>)
 800591a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005928:	f001 fd70 	bl	800740c <vPortExitCritical>
				return pdPASS;
 800592c:	2301      	movs	r3, #1
 800592e:	e069      	b.n	8005a04 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d103      	bne.n	800593e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005936:	f001 fd69 	bl	800740c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800593a:	2300      	movs	r3, #0
 800593c:	e062      	b.n	8005a04 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800593e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005940:	2b00      	cmp	r3, #0
 8005942:	d106      	bne.n	8005952 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005944:	f107 0310 	add.w	r3, r7, #16
 8005948:	4618      	mov	r0, r3
 800594a:	f000 fe67 	bl	800661c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800594e:	2301      	movs	r3, #1
 8005950:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005952:	f001 fd5b 	bl	800740c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005956:	f000 fbd7 	bl	8006108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800595a:	f001 fd25 	bl	80073a8 <vPortEnterCritical>
 800595e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005960:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005964:	b25b      	sxtb	r3, r3
 8005966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596a:	d103      	bne.n	8005974 <xQueueReceive+0x128>
 800596c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005976:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800597a:	b25b      	sxtb	r3, r3
 800597c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005980:	d103      	bne.n	800598a <xQueueReceive+0x13e>
 8005982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800598a:	f001 fd3f 	bl	800740c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800598e:	1d3a      	adds	r2, r7, #4
 8005990:	f107 0310 	add.w	r3, r7, #16
 8005994:	4611      	mov	r1, r2
 8005996:	4618      	mov	r0, r3
 8005998:	f000 fe56 	bl	8006648 <xTaskCheckForTimeOut>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d123      	bne.n	80059ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059a4:	f000 f916 	bl	8005bd4 <prvIsQueueEmpty>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d017      	beq.n	80059de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b0:	3324      	adds	r3, #36	@ 0x24
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	4611      	mov	r1, r2
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fd7a 	bl	80064b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059be:	f000 f8b7 	bl	8005b30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059c2:	f000 fbaf 	bl	8006124 <xTaskResumeAll>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d189      	bne.n	80058e0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80059cc:	4b0f      	ldr	r3, [pc, #60]	@ (8005a0c <xQueueReceive+0x1c0>)
 80059ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	e780      	b.n	80058e0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80059de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059e0:	f000 f8a6 	bl	8005b30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059e4:	f000 fb9e 	bl	8006124 <xTaskResumeAll>
 80059e8:	e77a      	b.n	80058e0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80059ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059ec:	f000 f8a0 	bl	8005b30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059f0:	f000 fb98 	bl	8006124 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059f6:	f000 f8ed 	bl	8005bd4 <prvIsQueueEmpty>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f43f af6f 	beq.w	80058e0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a02:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3730      	adds	r7, #48	@ 0x30
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	e000ed04 	.word	0xe000ed04

08005a10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10d      	bne.n	8005a4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d14d      	bne.n	8005ad2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 ff68 	bl	8006910 <xTaskPriorityDisinherit>
 8005a40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	609a      	str	r2, [r3, #8]
 8005a48:	e043      	b.n	8005ad2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d119      	bne.n	8005a84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6858      	ldr	r0, [r3, #4]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a58:	461a      	mov	r2, r3
 8005a5a:	68b9      	ldr	r1, [r7, #8]
 8005a5c:	f001 ffe0 	bl	8007a20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a68:	441a      	add	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d32b      	bcc.n	8005ad2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	605a      	str	r2, [r3, #4]
 8005a82:	e026      	b.n	8005ad2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	68d8      	ldr	r0, [r3, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	68b9      	ldr	r1, [r7, #8]
 8005a90:	f001 ffc6 	bl	8007a20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	68da      	ldr	r2, [r3, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9c:	425b      	negs	r3, r3
 8005a9e:	441a      	add	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d207      	bcs.n	8005ac0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab8:	425b      	negs	r3, r3
 8005aba:	441a      	add	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d105      	bne.n	8005ad2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005ada:	697b      	ldr	r3, [r7, #20]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3718      	adds	r7, #24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d018      	beq.n	8005b28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afe:	441a      	add	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d303      	bcc.n	8005b18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68d9      	ldr	r1, [r3, #12]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b20:	461a      	mov	r2, r3
 8005b22:	6838      	ldr	r0, [r7, #0]
 8005b24:	f001 ff7c 	bl	8007a20 <memcpy>
	}
}
 8005b28:	bf00      	nop
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b38:	f001 fc36 	bl	80073a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b44:	e011      	b.n	8005b6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d012      	beq.n	8005b74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	3324      	adds	r3, #36	@ 0x24
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 fcfe 	bl	8006554 <xTaskRemoveFromEventList>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b5e:	f000 fdd7 	bl	8006710 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	dce9      	bgt.n	8005b46 <prvUnlockQueue+0x16>
 8005b72:	e000      	b.n	8005b76 <prvUnlockQueue+0x46>
					break;
 8005b74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	22ff      	movs	r2, #255	@ 0xff
 8005b7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005b7e:	f001 fc45 	bl	800740c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b82:	f001 fc11 	bl	80073a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b8e:	e011      	b.n	8005bb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d012      	beq.n	8005bbe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3310      	adds	r3, #16
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 fcd9 	bl	8006554 <xTaskRemoveFromEventList>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ba8:	f000 fdb2 	bl	8006710 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005bac:	7bbb      	ldrb	r3, [r7, #14]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	dce9      	bgt.n	8005b90 <prvUnlockQueue+0x60>
 8005bbc:	e000      	b.n	8005bc0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005bbe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	22ff      	movs	r2, #255	@ 0xff
 8005bc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005bc8:	f001 fc20 	bl	800740c <vPortExitCritical>
}
 8005bcc:	bf00      	nop
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bdc:	f001 fbe4 	bl	80073a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d102      	bne.n	8005bee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005be8:	2301      	movs	r3, #1
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	e001      	b.n	8005bf2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bf2:	f001 fc0b 	bl	800740c <vPortExitCritical>

	return xReturn;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c08:	f001 fbce 	bl	80073a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d102      	bne.n	8005c1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	e001      	b.n	8005c22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c22:	f001 fbf3 	bl	800740c <vPortExitCritical>

	return xReturn;
 8005c26:	68fb      	ldr	r3, [r7, #12]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60fb      	str	r3, [r7, #12]
 8005c3e:	e014      	b.n	8005c6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c40:	4a0f      	ldr	r2, [pc, #60]	@ (8005c80 <vQueueAddToRegistry+0x50>)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10b      	bne.n	8005c64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c4c:	490c      	ldr	r1, [pc, #48]	@ (8005c80 <vQueueAddToRegistry+0x50>)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c56:	4a0a      	ldr	r2, [pc, #40]	@ (8005c80 <vQueueAddToRegistry+0x50>)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	4413      	add	r3, r2
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c62:	e006      	b.n	8005c72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3301      	adds	r3, #1
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b07      	cmp	r3, #7
 8005c6e:	d9e7      	bls.n	8005c40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	20000ea8 	.word	0x20000ea8

08005c84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c94:	f001 fb88 	bl	80073a8 <vPortEnterCritical>
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c9e:	b25b      	sxtb	r3, r3
 8005ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca4:	d103      	bne.n	8005cae <vQueueWaitForMessageRestricted+0x2a>
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cb4:	b25b      	sxtb	r3, r3
 8005cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cba:	d103      	bne.n	8005cc4 <vQueueWaitForMessageRestricted+0x40>
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cc4:	f001 fba2 	bl	800740c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d106      	bne.n	8005cde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	3324      	adds	r3, #36	@ 0x24
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fc0f 	bl	80064fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005cde:	6978      	ldr	r0, [r7, #20]
 8005ce0:	f7ff ff26 	bl	8005b30 <prvUnlockQueue>
	}
 8005ce4:	bf00      	nop
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08e      	sub	sp, #56	@ 0x38
 8005cf0:	af04      	add	r7, sp, #16
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10b      	bne.n	8005d18 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	623b      	str	r3, [r7, #32]
}
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
 8005d16:	e7fd      	b.n	8005d14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10b      	bne.n	8005d36 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	61fb      	str	r3, [r7, #28]
}
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop
 8005d34:	e7fd      	b.n	8005d32 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d36:	235c      	movs	r3, #92	@ 0x5c
 8005d38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	2b5c      	cmp	r3, #92	@ 0x5c
 8005d3e:	d00b      	beq.n	8005d58 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	61bb      	str	r3, [r7, #24]
}
 8005d52:	bf00      	nop
 8005d54:	bf00      	nop
 8005d56:	e7fd      	b.n	8005d54 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005d58:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01e      	beq.n	8005d9e <xTaskCreateStatic+0xb2>
 8005d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d01b      	beq.n	8005d9e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d68:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d6e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d78:	2300      	movs	r3, #0
 8005d7a:	9303      	str	r3, [sp, #12]
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7e:	9302      	str	r3, [sp, #8]
 8005d80:	f107 0314 	add.w	r3, r7, #20
 8005d84:	9301      	str	r3, [sp, #4]
 8005d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 f850 	bl	8005e36 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d98:	f000 f8de 	bl	8005f58 <prvAddNewTaskToReadyList>
 8005d9c:	e001      	b.n	8005da2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005da2:	697b      	ldr	r3, [r7, #20]
	}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3728      	adds	r7, #40	@ 0x28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08c      	sub	sp, #48	@ 0x30
 8005db0:	af04      	add	r7, sp, #16
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	603b      	str	r3, [r7, #0]
 8005db8:	4613      	mov	r3, r2
 8005dba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005dbc:	88fb      	ldrh	r3, [r7, #6]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f001 fc13 	bl	80075ec <pvPortMalloc>
 8005dc6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00e      	beq.n	8005dec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005dce:	205c      	movs	r0, #92	@ 0x5c
 8005dd0:	f001 fc0c 	bl	80075ec <pvPortMalloc>
 8005dd4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	631a      	str	r2, [r3, #48]	@ 0x30
 8005de2:	e005      	b.n	8005df0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005de4:	6978      	ldr	r0, [r7, #20]
 8005de6:	f001 fccf 	bl	8007788 <vPortFree>
 8005dea:	e001      	b.n	8005df0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005dec:	2300      	movs	r3, #0
 8005dee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d017      	beq.n	8005e26 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005dfe:	88fa      	ldrh	r2, [r7, #6]
 8005e00:	2300      	movs	r3, #0
 8005e02:	9303      	str	r3, [sp, #12]
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	9302      	str	r3, [sp, #8]
 8005e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0a:	9301      	str	r3, [sp, #4]
 8005e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	68b9      	ldr	r1, [r7, #8]
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f80e 	bl	8005e36 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e1a:	69f8      	ldr	r0, [r7, #28]
 8005e1c:	f000 f89c 	bl	8005f58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e20:	2301      	movs	r3, #1
 8005e22:	61bb      	str	r3, [r7, #24]
 8005e24:	e002      	b.n	8005e2c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e26:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e2c:	69bb      	ldr	r3, [r7, #24]
	}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3720      	adds	r7, #32
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b088      	sub	sp, #32
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	60f8      	str	r0, [r7, #12]
 8005e3e:	60b9      	str	r1, [r7, #8]
 8005e40:	607a      	str	r2, [r7, #4]
 8005e42:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e46:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	21a5      	movs	r1, #165	@ 0xa5
 8005e50:	f001 fdba 	bl	80079c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	f023 0307 	bic.w	r3, r3, #7
 8005e6c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00b      	beq.n	8005e90 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	617b      	str	r3, [r7, #20]
}
 8005e8a:	bf00      	nop
 8005e8c:	bf00      	nop
 8005e8e:	e7fd      	b.n	8005e8c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d01f      	beq.n	8005ed6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e96:	2300      	movs	r3, #0
 8005e98:	61fb      	str	r3, [r7, #28]
 8005e9a:	e012      	b.n	8005ec2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	7819      	ldrb	r1, [r3, #0]
 8005ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	3334      	adds	r3, #52	@ 0x34
 8005eac:	460a      	mov	r2, r1
 8005eae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d006      	beq.n	8005eca <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	61fb      	str	r3, [r7, #28]
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	2b0f      	cmp	r3, #15
 8005ec6:	d9e9      	bls.n	8005e9c <prvInitialiseNewTask+0x66>
 8005ec8:	e000      	b.n	8005ecc <prvInitialiseNewTask+0x96>
			{
				break;
 8005eca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ed4:	e003      	b.n	8005ede <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee0:	2b37      	cmp	r3, #55	@ 0x37
 8005ee2:	d901      	bls.n	8005ee8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ee4:	2337      	movs	r3, #55	@ 0x37
 8005ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005eec:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ef2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efc:	3304      	adds	r3, #4
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7ff f966 	bl	80051d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f06:	3318      	adds	r3, #24
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7ff f961 	bl	80051d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f16:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f22:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f26:	2200      	movs	r2, #0
 8005f28:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	68f9      	ldr	r1, [r7, #12]
 8005f36:	69b8      	ldr	r0, [r7, #24]
 8005f38:	f001 f908 	bl	800714c <pxPortInitialiseStack>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f4e:	bf00      	nop
 8005f50:	3720      	adds	r7, #32
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
	...

08005f58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f60:	f001 fa22 	bl	80073a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f64:	4b2d      	ldr	r3, [pc, #180]	@ (800601c <prvAddNewTaskToReadyList+0xc4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	4a2c      	ldr	r2, [pc, #176]	@ (800601c <prvAddNewTaskToReadyList+0xc4>)
 8005f6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8006020 <prvAddNewTaskToReadyList+0xc8>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d109      	bne.n	8005f8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f76:	4a2a      	ldr	r2, [pc, #168]	@ (8006020 <prvAddNewTaskToReadyList+0xc8>)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f7c:	4b27      	ldr	r3, [pc, #156]	@ (800601c <prvAddNewTaskToReadyList+0xc4>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d110      	bne.n	8005fa6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f84:	f000 fbe8 	bl	8006758 <prvInitialiseTaskLists>
 8005f88:	e00d      	b.n	8005fa6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f8a:	4b26      	ldr	r3, [pc, #152]	@ (8006024 <prvAddNewTaskToReadyList+0xcc>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d109      	bne.n	8005fa6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f92:	4b23      	ldr	r3, [pc, #140]	@ (8006020 <prvAddNewTaskToReadyList+0xc8>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d802      	bhi.n	8005fa6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8006020 <prvAddNewTaskToReadyList+0xc8>)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005fa6:	4b20      	ldr	r3, [pc, #128]	@ (8006028 <prvAddNewTaskToReadyList+0xd0>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3301      	adds	r3, #1
 8005fac:	4a1e      	ldr	r2, [pc, #120]	@ (8006028 <prvAddNewTaskToReadyList+0xd0>)
 8005fae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8006028 <prvAddNewTaskToReadyList+0xd0>)
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800602c <prvAddNewTaskToReadyList+0xd4>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d903      	bls.n	8005fcc <prvAddNewTaskToReadyList+0x74>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc8:	4a18      	ldr	r2, [pc, #96]	@ (800602c <prvAddNewTaskToReadyList+0xd4>)
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4a15      	ldr	r2, [pc, #84]	@ (8006030 <prvAddNewTaskToReadyList+0xd8>)
 8005fda:	441a      	add	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3304      	adds	r3, #4
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	f7ff f901 	bl	80051ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005fe8:	f001 fa10 	bl	800740c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fec:	4b0d      	ldr	r3, [pc, #52]	@ (8006024 <prvAddNewTaskToReadyList+0xcc>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00e      	beq.n	8006012 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8006020 <prvAddNewTaskToReadyList+0xc8>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d207      	bcs.n	8006012 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006002:	4b0c      	ldr	r3, [pc, #48]	@ (8006034 <prvAddNewTaskToReadyList+0xdc>)
 8006004:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006012:	bf00      	nop
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	200013bc 	.word	0x200013bc
 8006020:	20000ee8 	.word	0x20000ee8
 8006024:	200013c8 	.word	0x200013c8
 8006028:	200013d8 	.word	0x200013d8
 800602c:	200013c4 	.word	0x200013c4
 8006030:	20000eec 	.word	0x20000eec
 8006034:	e000ed04 	.word	0xe000ed04

08006038 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08a      	sub	sp, #40	@ 0x28
 800603c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800603e:	2300      	movs	r3, #0
 8006040:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006042:	2300      	movs	r3, #0
 8006044:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006046:	463a      	mov	r2, r7
 8006048:	1d39      	adds	r1, r7, #4
 800604a:	f107 0308 	add.w	r3, r7, #8
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff f86a 	bl	8005128 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	9202      	str	r2, [sp, #8]
 800605c:	9301      	str	r3, [sp, #4]
 800605e:	2300      	movs	r3, #0
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	2300      	movs	r3, #0
 8006064:	460a      	mov	r2, r1
 8006066:	4922      	ldr	r1, [pc, #136]	@ (80060f0 <vTaskStartScheduler+0xb8>)
 8006068:	4822      	ldr	r0, [pc, #136]	@ (80060f4 <vTaskStartScheduler+0xbc>)
 800606a:	f7ff fe3f 	bl	8005cec <xTaskCreateStatic>
 800606e:	4603      	mov	r3, r0
 8006070:	4a21      	ldr	r2, [pc, #132]	@ (80060f8 <vTaskStartScheduler+0xc0>)
 8006072:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006074:	4b20      	ldr	r3, [pc, #128]	@ (80060f8 <vTaskStartScheduler+0xc0>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800607c:	2301      	movs	r3, #1
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	e001      	b.n	8006086 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d102      	bne.n	8006092 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800608c:	f000 fd04 	bl	8006a98 <xTimerCreateTimerTask>
 8006090:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d116      	bne.n	80060c6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609c:	f383 8811 	msr	BASEPRI, r3
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	613b      	str	r3, [r7, #16]
}
 80060aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060ac:	4b13      	ldr	r3, [pc, #76]	@ (80060fc <vTaskStartScheduler+0xc4>)
 80060ae:	f04f 32ff 	mov.w	r2, #4294967295
 80060b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060b4:	4b12      	ldr	r3, [pc, #72]	@ (8006100 <vTaskStartScheduler+0xc8>)
 80060b6:	2201      	movs	r2, #1
 80060b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80060ba:	4b12      	ldr	r3, [pc, #72]	@ (8006104 <vTaskStartScheduler+0xcc>)
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80060c0:	f001 f8ce 	bl	8007260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80060c4:	e00f      	b.n	80060e6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060cc:	d10b      	bne.n	80060e6 <vTaskStartScheduler+0xae>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	60fb      	str	r3, [r7, #12]
}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	e7fd      	b.n	80060e2 <vTaskStartScheduler+0xaa>
}
 80060e6:	bf00      	nop
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	08007a78 	.word	0x08007a78
 80060f4:	08006729 	.word	0x08006729
 80060f8:	200013e0 	.word	0x200013e0
 80060fc:	200013dc 	.word	0x200013dc
 8006100:	200013c8 	.word	0x200013c8
 8006104:	200013c0 	.word	0x200013c0

08006108 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800610c:	4b04      	ldr	r3, [pc, #16]	@ (8006120 <vTaskSuspendAll+0x18>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3301      	adds	r3, #1
 8006112:	4a03      	ldr	r2, [pc, #12]	@ (8006120 <vTaskSuspendAll+0x18>)
 8006114:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006116:	bf00      	nop
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	200013e4 	.word	0x200013e4

08006124 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800612e:	2300      	movs	r3, #0
 8006130:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006132:	4b42      	ldr	r3, [pc, #264]	@ (800623c <xTaskResumeAll+0x118>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10b      	bne.n	8006152 <xTaskResumeAll+0x2e>
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	603b      	str	r3, [r7, #0]
}
 800614c:	bf00      	nop
 800614e:	bf00      	nop
 8006150:	e7fd      	b.n	800614e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006152:	f001 f929 	bl	80073a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006156:	4b39      	ldr	r3, [pc, #228]	@ (800623c <xTaskResumeAll+0x118>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3b01      	subs	r3, #1
 800615c:	4a37      	ldr	r2, [pc, #220]	@ (800623c <xTaskResumeAll+0x118>)
 800615e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006160:	4b36      	ldr	r3, [pc, #216]	@ (800623c <xTaskResumeAll+0x118>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d162      	bne.n	800622e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006168:	4b35      	ldr	r3, [pc, #212]	@ (8006240 <xTaskResumeAll+0x11c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d05e      	beq.n	800622e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006170:	e02f      	b.n	80061d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006172:	4b34      	ldr	r3, [pc, #208]	@ (8006244 <xTaskResumeAll+0x120>)
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3318      	adds	r3, #24
 800617e:	4618      	mov	r0, r3
 8006180:	f7ff f890 	bl	80052a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3304      	adds	r3, #4
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff f88b 	bl	80052a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006192:	4b2d      	ldr	r3, [pc, #180]	@ (8006248 <xTaskResumeAll+0x124>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	429a      	cmp	r2, r3
 8006198:	d903      	bls.n	80061a2 <xTaskResumeAll+0x7e>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619e:	4a2a      	ldr	r2, [pc, #168]	@ (8006248 <xTaskResumeAll+0x124>)
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4a27      	ldr	r2, [pc, #156]	@ (800624c <xTaskResumeAll+0x128>)
 80061b0:	441a      	add	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3304      	adds	r3, #4
 80061b6:	4619      	mov	r1, r3
 80061b8:	4610      	mov	r0, r2
 80061ba:	f7ff f816 	bl	80051ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061c2:	4b23      	ldr	r3, [pc, #140]	@ (8006250 <xTaskResumeAll+0x12c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d302      	bcc.n	80061d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80061cc:	4b21      	ldr	r3, [pc, #132]	@ (8006254 <xTaskResumeAll+0x130>)
 80061ce:	2201      	movs	r2, #1
 80061d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061d2:	4b1c      	ldr	r3, [pc, #112]	@ (8006244 <xTaskResumeAll+0x120>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1cb      	bne.n	8006172 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80061e0:	f000 fb58 	bl	8006894 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80061e4:	4b1c      	ldr	r3, [pc, #112]	@ (8006258 <xTaskResumeAll+0x134>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d010      	beq.n	8006212 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80061f0:	f000 f846 	bl	8006280 <xTaskIncrementTick>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80061fa:	4b16      	ldr	r3, [pc, #88]	@ (8006254 <xTaskResumeAll+0x130>)
 80061fc:	2201      	movs	r2, #1
 80061fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3b01      	subs	r3, #1
 8006204:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1f1      	bne.n	80061f0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800620c:	4b12      	ldr	r3, [pc, #72]	@ (8006258 <xTaskResumeAll+0x134>)
 800620e:	2200      	movs	r2, #0
 8006210:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006212:	4b10      	ldr	r3, [pc, #64]	@ (8006254 <xTaskResumeAll+0x130>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d009      	beq.n	800622e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800621a:	2301      	movs	r3, #1
 800621c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800621e:	4b0f      	ldr	r3, [pc, #60]	@ (800625c <xTaskResumeAll+0x138>)
 8006220:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800622e:	f001 f8ed 	bl	800740c <vPortExitCritical>

	return xAlreadyYielded;
 8006232:	68bb      	ldr	r3, [r7, #8]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	200013e4 	.word	0x200013e4
 8006240:	200013bc 	.word	0x200013bc
 8006244:	2000137c 	.word	0x2000137c
 8006248:	200013c4 	.word	0x200013c4
 800624c:	20000eec 	.word	0x20000eec
 8006250:	20000ee8 	.word	0x20000ee8
 8006254:	200013d0 	.word	0x200013d0
 8006258:	200013cc 	.word	0x200013cc
 800625c:	e000ed04 	.word	0xe000ed04

08006260 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006266:	4b05      	ldr	r3, [pc, #20]	@ (800627c <xTaskGetTickCount+0x1c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800626c:	687b      	ldr	r3, [r7, #4]
}
 800626e:	4618      	mov	r0, r3
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	200013c0 	.word	0x200013c0

08006280 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006286:	2300      	movs	r3, #0
 8006288:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800628a:	4b4f      	ldr	r3, [pc, #316]	@ (80063c8 <xTaskIncrementTick+0x148>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	f040 8090 	bne.w	80063b4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006294:	4b4d      	ldr	r3, [pc, #308]	@ (80063cc <xTaskIncrementTick+0x14c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3301      	adds	r3, #1
 800629a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800629c:	4a4b      	ldr	r2, [pc, #300]	@ (80063cc <xTaskIncrementTick+0x14c>)
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d121      	bne.n	80062ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80062a8:	4b49      	ldr	r3, [pc, #292]	@ (80063d0 <xTaskIncrementTick+0x150>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00b      	beq.n	80062ca <xTaskIncrementTick+0x4a>
	__asm volatile
 80062b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b6:	f383 8811 	msr	BASEPRI, r3
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	603b      	str	r3, [r7, #0]
}
 80062c4:	bf00      	nop
 80062c6:	bf00      	nop
 80062c8:	e7fd      	b.n	80062c6 <xTaskIncrementTick+0x46>
 80062ca:	4b41      	ldr	r3, [pc, #260]	@ (80063d0 <xTaskIncrementTick+0x150>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	4b40      	ldr	r3, [pc, #256]	@ (80063d4 <xTaskIncrementTick+0x154>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a3e      	ldr	r2, [pc, #248]	@ (80063d0 <xTaskIncrementTick+0x150>)
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	4a3e      	ldr	r2, [pc, #248]	@ (80063d4 <xTaskIncrementTick+0x154>)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	4b3e      	ldr	r3, [pc, #248]	@ (80063d8 <xTaskIncrementTick+0x158>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3301      	adds	r3, #1
 80062e4:	4a3c      	ldr	r2, [pc, #240]	@ (80063d8 <xTaskIncrementTick+0x158>)
 80062e6:	6013      	str	r3, [r2, #0]
 80062e8:	f000 fad4 	bl	8006894 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062ec:	4b3b      	ldr	r3, [pc, #236]	@ (80063dc <xTaskIncrementTick+0x15c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d349      	bcc.n	800638a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062f6:	4b36      	ldr	r3, [pc, #216]	@ (80063d0 <xTaskIncrementTick+0x150>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d104      	bne.n	800630a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006300:	4b36      	ldr	r3, [pc, #216]	@ (80063dc <xTaskIncrementTick+0x15c>)
 8006302:	f04f 32ff 	mov.w	r2, #4294967295
 8006306:	601a      	str	r2, [r3, #0]
					break;
 8006308:	e03f      	b.n	800638a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800630a:	4b31      	ldr	r3, [pc, #196]	@ (80063d0 <xTaskIncrementTick+0x150>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	429a      	cmp	r2, r3
 8006320:	d203      	bcs.n	800632a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006322:	4a2e      	ldr	r2, [pc, #184]	@ (80063dc <xTaskIncrementTick+0x15c>)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006328:	e02f      	b.n	800638a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	3304      	adds	r3, #4
 800632e:	4618      	mov	r0, r3
 8006330:	f7fe ffb8 	bl	80052a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006338:	2b00      	cmp	r3, #0
 800633a:	d004      	beq.n	8006346 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	3318      	adds	r3, #24
 8006340:	4618      	mov	r0, r3
 8006342:	f7fe ffaf 	bl	80052a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800634a:	4b25      	ldr	r3, [pc, #148]	@ (80063e0 <xTaskIncrementTick+0x160>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	429a      	cmp	r2, r3
 8006350:	d903      	bls.n	800635a <xTaskIncrementTick+0xda>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006356:	4a22      	ldr	r2, [pc, #136]	@ (80063e0 <xTaskIncrementTick+0x160>)
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800635e:	4613      	mov	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4a1f      	ldr	r2, [pc, #124]	@ (80063e4 <xTaskIncrementTick+0x164>)
 8006368:	441a      	add	r2, r3
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	3304      	adds	r3, #4
 800636e:	4619      	mov	r1, r3
 8006370:	4610      	mov	r0, r2
 8006372:	f7fe ff3a 	bl	80051ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800637a:	4b1b      	ldr	r3, [pc, #108]	@ (80063e8 <xTaskIncrementTick+0x168>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006380:	429a      	cmp	r2, r3
 8006382:	d3b8      	bcc.n	80062f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006384:	2301      	movs	r3, #1
 8006386:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006388:	e7b5      	b.n	80062f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800638a:	4b17      	ldr	r3, [pc, #92]	@ (80063e8 <xTaskIncrementTick+0x168>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006390:	4914      	ldr	r1, [pc, #80]	@ (80063e4 <xTaskIncrementTick+0x164>)
 8006392:	4613      	mov	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	440b      	add	r3, r1
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d901      	bls.n	80063a6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80063a2:	2301      	movs	r3, #1
 80063a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80063a6:	4b11      	ldr	r3, [pc, #68]	@ (80063ec <xTaskIncrementTick+0x16c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d007      	beq.n	80063be <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80063ae:	2301      	movs	r3, #1
 80063b0:	617b      	str	r3, [r7, #20]
 80063b2:	e004      	b.n	80063be <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80063b4:	4b0e      	ldr	r3, [pc, #56]	@ (80063f0 <xTaskIncrementTick+0x170>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3301      	adds	r3, #1
 80063ba:	4a0d      	ldr	r2, [pc, #52]	@ (80063f0 <xTaskIncrementTick+0x170>)
 80063bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80063be:	697b      	ldr	r3, [r7, #20]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	200013e4 	.word	0x200013e4
 80063cc:	200013c0 	.word	0x200013c0
 80063d0:	20001374 	.word	0x20001374
 80063d4:	20001378 	.word	0x20001378
 80063d8:	200013d4 	.word	0x200013d4
 80063dc:	200013dc 	.word	0x200013dc
 80063e0:	200013c4 	.word	0x200013c4
 80063e4:	20000eec 	.word	0x20000eec
 80063e8:	20000ee8 	.word	0x20000ee8
 80063ec:	200013d0 	.word	0x200013d0
 80063f0:	200013cc 	.word	0x200013cc

080063f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063fa:	4b28      	ldr	r3, [pc, #160]	@ (800649c <vTaskSwitchContext+0xa8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006402:	4b27      	ldr	r3, [pc, #156]	@ (80064a0 <vTaskSwitchContext+0xac>)
 8006404:	2201      	movs	r2, #1
 8006406:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006408:	e042      	b.n	8006490 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800640a:	4b25      	ldr	r3, [pc, #148]	@ (80064a0 <vTaskSwitchContext+0xac>)
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006410:	4b24      	ldr	r3, [pc, #144]	@ (80064a4 <vTaskSwitchContext+0xb0>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	60fb      	str	r3, [r7, #12]
 8006416:	e011      	b.n	800643c <vTaskSwitchContext+0x48>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10b      	bne.n	8006436 <vTaskSwitchContext+0x42>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	607b      	str	r3, [r7, #4]
}
 8006430:	bf00      	nop
 8006432:	bf00      	nop
 8006434:	e7fd      	b.n	8006432 <vTaskSwitchContext+0x3e>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3b01      	subs	r3, #1
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	491a      	ldr	r1, [pc, #104]	@ (80064a8 <vTaskSwitchContext+0xb4>)
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4613      	mov	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	440b      	add	r3, r1
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0e3      	beq.n	8006418 <vTaskSwitchContext+0x24>
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	4613      	mov	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4a13      	ldr	r2, [pc, #76]	@ (80064a8 <vTaskSwitchContext+0xb4>)
 800645c:	4413      	add	r3, r2
 800645e:	60bb      	str	r3, [r7, #8]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	605a      	str	r2, [r3, #4]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	3308      	adds	r3, #8
 8006472:	429a      	cmp	r2, r3
 8006474:	d104      	bne.n	8006480 <vTaskSwitchContext+0x8c>
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	605a      	str	r2, [r3, #4]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	4a09      	ldr	r2, [pc, #36]	@ (80064ac <vTaskSwitchContext+0xb8>)
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	4a06      	ldr	r2, [pc, #24]	@ (80064a4 <vTaskSwitchContext+0xb0>)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6013      	str	r3, [r2, #0]
}
 8006490:	bf00      	nop
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	200013e4 	.word	0x200013e4
 80064a0:	200013d0 	.word	0x200013d0
 80064a4:	200013c4 	.word	0x200013c4
 80064a8:	20000eec 	.word	0x20000eec
 80064ac:	20000ee8 	.word	0x20000ee8

080064b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10b      	bne.n	80064d8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	60fb      	str	r3, [r7, #12]
}
 80064d2:	bf00      	nop
 80064d4:	bf00      	nop
 80064d6:	e7fd      	b.n	80064d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064d8:	4b07      	ldr	r3, [pc, #28]	@ (80064f8 <vTaskPlaceOnEventList+0x48>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3318      	adds	r3, #24
 80064de:	4619      	mov	r1, r3
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7fe fea6 	bl	8005232 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064e6:	2101      	movs	r1, #1
 80064e8:	6838      	ldr	r0, [r7, #0]
 80064ea:	f000 fa81 	bl	80069f0 <prvAddCurrentTaskToDelayedList>
}
 80064ee:	bf00      	nop
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000ee8 	.word	0x20000ee8

080064fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10b      	bne.n	8006526 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	617b      	str	r3, [r7, #20]
}
 8006520:	bf00      	nop
 8006522:	bf00      	nop
 8006524:	e7fd      	b.n	8006522 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006526:	4b0a      	ldr	r3, [pc, #40]	@ (8006550 <vTaskPlaceOnEventListRestricted+0x54>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3318      	adds	r3, #24
 800652c:	4619      	mov	r1, r3
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f7fe fe5b 	bl	80051ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d002      	beq.n	8006540 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800653a:	f04f 33ff 	mov.w	r3, #4294967295
 800653e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	68b8      	ldr	r0, [r7, #8]
 8006544:	f000 fa54 	bl	80069f0 <prvAddCurrentTaskToDelayedList>
	}
 8006548:	bf00      	nop
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	20000ee8 	.word	0x20000ee8

08006554 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10b      	bne.n	8006582 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	60fb      	str	r3, [r7, #12]
}
 800657c:	bf00      	nop
 800657e:	bf00      	nop
 8006580:	e7fd      	b.n	800657e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	3318      	adds	r3, #24
 8006586:	4618      	mov	r0, r3
 8006588:	f7fe fe8c 	bl	80052a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800658c:	4b1d      	ldr	r3, [pc, #116]	@ (8006604 <xTaskRemoveFromEventList+0xb0>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d11d      	bne.n	80065d0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	3304      	adds	r3, #4
 8006598:	4618      	mov	r0, r3
 800659a:	f7fe fe83 	bl	80052a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065a2:	4b19      	ldr	r3, [pc, #100]	@ (8006608 <xTaskRemoveFromEventList+0xb4>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d903      	bls.n	80065b2 <xTaskRemoveFromEventList+0x5e>
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ae:	4a16      	ldr	r2, [pc, #88]	@ (8006608 <xTaskRemoveFromEventList+0xb4>)
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065b6:	4613      	mov	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4a13      	ldr	r2, [pc, #76]	@ (800660c <xTaskRemoveFromEventList+0xb8>)
 80065c0:	441a      	add	r2, r3
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	3304      	adds	r3, #4
 80065c6:	4619      	mov	r1, r3
 80065c8:	4610      	mov	r0, r2
 80065ca:	f7fe fe0e 	bl	80051ea <vListInsertEnd>
 80065ce:	e005      	b.n	80065dc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	3318      	adds	r3, #24
 80065d4:	4619      	mov	r1, r3
 80065d6:	480e      	ldr	r0, [pc, #56]	@ (8006610 <xTaskRemoveFromEventList+0xbc>)
 80065d8:	f7fe fe07 	bl	80051ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006614 <xTaskRemoveFromEventList+0xc0>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d905      	bls.n	80065f6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065ea:	2301      	movs	r3, #1
 80065ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80065ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006618 <xTaskRemoveFromEventList+0xc4>)
 80065f0:	2201      	movs	r2, #1
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	e001      	b.n	80065fa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80065fa:	697b      	ldr	r3, [r7, #20]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	200013e4 	.word	0x200013e4
 8006608:	200013c4 	.word	0x200013c4
 800660c:	20000eec 	.word	0x20000eec
 8006610:	2000137c 	.word	0x2000137c
 8006614:	20000ee8 	.word	0x20000ee8
 8006618:	200013d0 	.word	0x200013d0

0800661c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006624:	4b06      	ldr	r3, [pc, #24]	@ (8006640 <vTaskInternalSetTimeOutState+0x24>)
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800662c:	4b05      	ldr	r3, [pc, #20]	@ (8006644 <vTaskInternalSetTimeOutState+0x28>)
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	605a      	str	r2, [r3, #4]
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	200013d4 	.word	0x200013d4
 8006644:	200013c0 	.word	0x200013c0

08006648 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b088      	sub	sp, #32
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10b      	bne.n	8006670 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	613b      	str	r3, [r7, #16]
}
 800666a:	bf00      	nop
 800666c:	bf00      	nop
 800666e:	e7fd      	b.n	800666c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10b      	bne.n	800668e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	60fb      	str	r3, [r7, #12]
}
 8006688:	bf00      	nop
 800668a:	bf00      	nop
 800668c:	e7fd      	b.n	800668a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800668e:	f000 fe8b 	bl	80073a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006692:	4b1d      	ldr	r3, [pc, #116]	@ (8006708 <xTaskCheckForTimeOut+0xc0>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066aa:	d102      	bne.n	80066b2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80066ac:	2300      	movs	r3, #0
 80066ae:	61fb      	str	r3, [r7, #28]
 80066b0:	e023      	b.n	80066fa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	4b15      	ldr	r3, [pc, #84]	@ (800670c <xTaskCheckForTimeOut+0xc4>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d007      	beq.n	80066ce <xTaskCheckForTimeOut+0x86>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	69ba      	ldr	r2, [r7, #24]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d302      	bcc.n	80066ce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80066c8:	2301      	movs	r3, #1
 80066ca:	61fb      	str	r3, [r7, #28]
 80066cc:	e015      	b.n	80066fa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d20b      	bcs.n	80066f0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	1ad2      	subs	r2, r2, r3
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7ff ff99 	bl	800661c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066ea:	2300      	movs	r3, #0
 80066ec:	61fb      	str	r3, [r7, #28]
 80066ee:	e004      	b.n	80066fa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2200      	movs	r2, #0
 80066f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80066f6:	2301      	movs	r3, #1
 80066f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80066fa:	f000 fe87 	bl	800740c <vPortExitCritical>

	return xReturn;
 80066fe:	69fb      	ldr	r3, [r7, #28]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3720      	adds	r7, #32
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	200013c0 	.word	0x200013c0
 800670c:	200013d4 	.word	0x200013d4

08006710 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006710:	b480      	push	{r7}
 8006712:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006714:	4b03      	ldr	r3, [pc, #12]	@ (8006724 <vTaskMissedYield+0x14>)
 8006716:	2201      	movs	r2, #1
 8006718:	601a      	str	r2, [r3, #0]
}
 800671a:	bf00      	nop
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	200013d0 	.word	0x200013d0

08006728 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006730:	f000 f852 	bl	80067d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006734:	4b06      	ldr	r3, [pc, #24]	@ (8006750 <prvIdleTask+0x28>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d9f9      	bls.n	8006730 <prvIdleTask+0x8>
			{
				taskYIELD();
 800673c:	4b05      	ldr	r3, [pc, #20]	@ (8006754 <prvIdleTask+0x2c>)
 800673e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800674c:	e7f0      	b.n	8006730 <prvIdleTask+0x8>
 800674e:	bf00      	nop
 8006750:	20000eec 	.word	0x20000eec
 8006754:	e000ed04 	.word	0xe000ed04

08006758 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800675e:	2300      	movs	r3, #0
 8006760:	607b      	str	r3, [r7, #4]
 8006762:	e00c      	b.n	800677e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	4613      	mov	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4a12      	ldr	r2, [pc, #72]	@ (80067b8 <prvInitialiseTaskLists+0x60>)
 8006770:	4413      	add	r3, r2
 8006772:	4618      	mov	r0, r3
 8006774:	f7fe fd0c 	bl	8005190 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3301      	adds	r3, #1
 800677c:	607b      	str	r3, [r7, #4]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b37      	cmp	r3, #55	@ 0x37
 8006782:	d9ef      	bls.n	8006764 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006784:	480d      	ldr	r0, [pc, #52]	@ (80067bc <prvInitialiseTaskLists+0x64>)
 8006786:	f7fe fd03 	bl	8005190 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800678a:	480d      	ldr	r0, [pc, #52]	@ (80067c0 <prvInitialiseTaskLists+0x68>)
 800678c:	f7fe fd00 	bl	8005190 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006790:	480c      	ldr	r0, [pc, #48]	@ (80067c4 <prvInitialiseTaskLists+0x6c>)
 8006792:	f7fe fcfd 	bl	8005190 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006796:	480c      	ldr	r0, [pc, #48]	@ (80067c8 <prvInitialiseTaskLists+0x70>)
 8006798:	f7fe fcfa 	bl	8005190 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800679c:	480b      	ldr	r0, [pc, #44]	@ (80067cc <prvInitialiseTaskLists+0x74>)
 800679e:	f7fe fcf7 	bl	8005190 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80067a2:	4b0b      	ldr	r3, [pc, #44]	@ (80067d0 <prvInitialiseTaskLists+0x78>)
 80067a4:	4a05      	ldr	r2, [pc, #20]	@ (80067bc <prvInitialiseTaskLists+0x64>)
 80067a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067a8:	4b0a      	ldr	r3, [pc, #40]	@ (80067d4 <prvInitialiseTaskLists+0x7c>)
 80067aa:	4a05      	ldr	r2, [pc, #20]	@ (80067c0 <prvInitialiseTaskLists+0x68>)
 80067ac:	601a      	str	r2, [r3, #0]
}
 80067ae:	bf00      	nop
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	20000eec 	.word	0x20000eec
 80067bc:	2000134c 	.word	0x2000134c
 80067c0:	20001360 	.word	0x20001360
 80067c4:	2000137c 	.word	0x2000137c
 80067c8:	20001390 	.word	0x20001390
 80067cc:	200013a8 	.word	0x200013a8
 80067d0:	20001374 	.word	0x20001374
 80067d4:	20001378 	.word	0x20001378

080067d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067de:	e019      	b.n	8006814 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067e0:	f000 fde2 	bl	80073a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067e4:	4b10      	ldr	r3, [pc, #64]	@ (8006828 <prvCheckTasksWaitingTermination+0x50>)
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	3304      	adds	r3, #4
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7fe fd57 	bl	80052a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067f6:	4b0d      	ldr	r3, [pc, #52]	@ (800682c <prvCheckTasksWaitingTermination+0x54>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	4a0b      	ldr	r2, [pc, #44]	@ (800682c <prvCheckTasksWaitingTermination+0x54>)
 80067fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006800:	4b0b      	ldr	r3, [pc, #44]	@ (8006830 <prvCheckTasksWaitingTermination+0x58>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3b01      	subs	r3, #1
 8006806:	4a0a      	ldr	r2, [pc, #40]	@ (8006830 <prvCheckTasksWaitingTermination+0x58>)
 8006808:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800680a:	f000 fdff 	bl	800740c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f810 	bl	8006834 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006814:	4b06      	ldr	r3, [pc, #24]	@ (8006830 <prvCheckTasksWaitingTermination+0x58>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e1      	bne.n	80067e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800681c:	bf00      	nop
 800681e:	bf00      	nop
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20001390 	.word	0x20001390
 800682c:	200013bc 	.word	0x200013bc
 8006830:	200013a4 	.word	0x200013a4

08006834 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006842:	2b00      	cmp	r3, #0
 8006844:	d108      	bne.n	8006858 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684a:	4618      	mov	r0, r3
 800684c:	f000 ff9c 	bl	8007788 <vPortFree>
				vPortFree( pxTCB );
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 ff99 	bl	8007788 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006856:	e019      	b.n	800688c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800685e:	2b01      	cmp	r3, #1
 8006860:	d103      	bne.n	800686a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 ff90 	bl	8007788 <vPortFree>
	}
 8006868:	e010      	b.n	800688c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006870:	2b02      	cmp	r3, #2
 8006872:	d00b      	beq.n	800688c <prvDeleteTCB+0x58>
	__asm volatile
 8006874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	60fb      	str	r3, [r7, #12]
}
 8006886:	bf00      	nop
 8006888:	bf00      	nop
 800688a:	e7fd      	b.n	8006888 <prvDeleteTCB+0x54>
	}
 800688c:	bf00      	nop
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800689a:	4b0c      	ldr	r3, [pc, #48]	@ (80068cc <prvResetNextTaskUnblockTime+0x38>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d104      	bne.n	80068ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80068a4:	4b0a      	ldr	r3, [pc, #40]	@ (80068d0 <prvResetNextTaskUnblockTime+0x3c>)
 80068a6:	f04f 32ff 	mov.w	r2, #4294967295
 80068aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80068ac:	e008      	b.n	80068c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068ae:	4b07      	ldr	r3, [pc, #28]	@ (80068cc <prvResetNextTaskUnblockTime+0x38>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	4a04      	ldr	r2, [pc, #16]	@ (80068d0 <prvResetNextTaskUnblockTime+0x3c>)
 80068be:	6013      	str	r3, [r2, #0]
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	20001374 	.word	0x20001374
 80068d0:	200013dc 	.word	0x200013dc

080068d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068da:	4b0b      	ldr	r3, [pc, #44]	@ (8006908 <xTaskGetSchedulerState+0x34>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d102      	bne.n	80068e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068e2:	2301      	movs	r3, #1
 80068e4:	607b      	str	r3, [r7, #4]
 80068e6:	e008      	b.n	80068fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068e8:	4b08      	ldr	r3, [pc, #32]	@ (800690c <xTaskGetSchedulerState+0x38>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d102      	bne.n	80068f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068f0:	2302      	movs	r3, #2
 80068f2:	607b      	str	r3, [r7, #4]
 80068f4:	e001      	b.n	80068fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068f6:	2300      	movs	r3, #0
 80068f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068fa:	687b      	ldr	r3, [r7, #4]
	}
 80068fc:	4618      	mov	r0, r3
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	200013c8 	.word	0x200013c8
 800690c:	200013e4 	.word	0x200013e4

08006910 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800691c:	2300      	movs	r3, #0
 800691e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d058      	beq.n	80069d8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006926:	4b2f      	ldr	r3, [pc, #188]	@ (80069e4 <xTaskPriorityDisinherit+0xd4>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	429a      	cmp	r2, r3
 800692e:	d00b      	beq.n	8006948 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	60fb      	str	r3, [r7, #12]
}
 8006942:	bf00      	nop
 8006944:	bf00      	nop
 8006946:	e7fd      	b.n	8006944 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10b      	bne.n	8006968 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	60bb      	str	r3, [r7, #8]
}
 8006962:	bf00      	nop
 8006964:	bf00      	nop
 8006966:	e7fd      	b.n	8006964 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800696c:	1e5a      	subs	r2, r3, #1
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800697a:	429a      	cmp	r2, r3
 800697c:	d02c      	beq.n	80069d8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006982:	2b00      	cmp	r3, #0
 8006984:	d128      	bne.n	80069d8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	3304      	adds	r3, #4
 800698a:	4618      	mov	r0, r3
 800698c:	f7fe fc8a 	bl	80052a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069a8:	4b0f      	ldr	r3, [pc, #60]	@ (80069e8 <xTaskPriorityDisinherit+0xd8>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d903      	bls.n	80069b8 <xTaskPriorityDisinherit+0xa8>
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b4:	4a0c      	ldr	r2, [pc, #48]	@ (80069e8 <xTaskPriorityDisinherit+0xd8>)
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069bc:	4613      	mov	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4a09      	ldr	r2, [pc, #36]	@ (80069ec <xTaskPriorityDisinherit+0xdc>)
 80069c6:	441a      	add	r2, r3
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	3304      	adds	r3, #4
 80069cc:	4619      	mov	r1, r3
 80069ce:	4610      	mov	r0, r2
 80069d0:	f7fe fc0b 	bl	80051ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80069d4:	2301      	movs	r3, #1
 80069d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069d8:	697b      	ldr	r3, [r7, #20]
	}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20000ee8 	.word	0x20000ee8
 80069e8:	200013c4 	.word	0x200013c4
 80069ec:	20000eec 	.word	0x20000eec

080069f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069fa:	4b21      	ldr	r3, [pc, #132]	@ (8006a80 <prvAddCurrentTaskToDelayedList+0x90>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a00:	4b20      	ldr	r3, [pc, #128]	@ (8006a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3304      	adds	r3, #4
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fe fc4c 	bl	80052a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a12:	d10a      	bne.n	8006a2a <prvAddCurrentTaskToDelayedList+0x3a>
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d007      	beq.n	8006a2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8006a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3304      	adds	r3, #4
 8006a20:	4619      	mov	r1, r3
 8006a22:	4819      	ldr	r0, [pc, #100]	@ (8006a88 <prvAddCurrentTaskToDelayedList+0x98>)
 8006a24:	f7fe fbe1 	bl	80051ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a28:	e026      	b.n	8006a78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4413      	add	r3, r2
 8006a30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a32:	4b14      	ldr	r3, [pc, #80]	@ (8006a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d209      	bcs.n	8006a56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a42:	4b12      	ldr	r3, [pc, #72]	@ (8006a8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	4b0f      	ldr	r3, [pc, #60]	@ (8006a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	4610      	mov	r0, r2
 8006a50:	f7fe fbef 	bl	8005232 <vListInsert>
}
 8006a54:	e010      	b.n	8006a78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a56:	4b0e      	ldr	r3, [pc, #56]	@ (8006a90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3304      	adds	r3, #4
 8006a60:	4619      	mov	r1, r3
 8006a62:	4610      	mov	r0, r2
 8006a64:	f7fe fbe5 	bl	8005232 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a68:	4b0a      	ldr	r3, [pc, #40]	@ (8006a94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d202      	bcs.n	8006a78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a72:	4a08      	ldr	r2, [pc, #32]	@ (8006a94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	6013      	str	r3, [r2, #0]
}
 8006a78:	bf00      	nop
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	200013c0 	.word	0x200013c0
 8006a84:	20000ee8 	.word	0x20000ee8
 8006a88:	200013a8 	.word	0x200013a8
 8006a8c:	20001378 	.word	0x20001378
 8006a90:	20001374 	.word	0x20001374
 8006a94:	200013dc 	.word	0x200013dc

08006a98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08a      	sub	sp, #40	@ 0x28
 8006a9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006aa2:	f000 fb13 	bl	80070cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8006b1c <xTimerCreateTimerTask+0x84>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d021      	beq.n	8006af2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006ab6:	1d3a      	adds	r2, r7, #4
 8006ab8:	f107 0108 	add.w	r1, r7, #8
 8006abc:	f107 030c 	add.w	r3, r7, #12
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7fe fb4b 	bl	800515c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	9202      	str	r2, [sp, #8]
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	460a      	mov	r2, r1
 8006ad8:	4911      	ldr	r1, [pc, #68]	@ (8006b20 <xTimerCreateTimerTask+0x88>)
 8006ada:	4812      	ldr	r0, [pc, #72]	@ (8006b24 <xTimerCreateTimerTask+0x8c>)
 8006adc:	f7ff f906 	bl	8005cec <xTaskCreateStatic>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	4a11      	ldr	r2, [pc, #68]	@ (8006b28 <xTimerCreateTimerTask+0x90>)
 8006ae4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006ae6:	4b10      	ldr	r3, [pc, #64]	@ (8006b28 <xTimerCreateTimerTask+0x90>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006aee:	2301      	movs	r3, #1
 8006af0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10b      	bne.n	8006b10 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	613b      	str	r3, [r7, #16]
}
 8006b0a:	bf00      	nop
 8006b0c:	bf00      	nop
 8006b0e:	e7fd      	b.n	8006b0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006b10:	697b      	ldr	r3, [r7, #20]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20001418 	.word	0x20001418
 8006b20:	08007a80 	.word	0x08007a80
 8006b24:	08006c65 	.word	0x08006c65
 8006b28:	2000141c 	.word	0x2000141c

08006b2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08a      	sub	sp, #40	@ 0x28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10b      	bne.n	8006b5c <xTimerGenericCommand+0x30>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	623b      	str	r3, [r7, #32]
}
 8006b56:	bf00      	nop
 8006b58:	bf00      	nop
 8006b5a:	e7fd      	b.n	8006b58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006b5c:	4b19      	ldr	r3, [pc, #100]	@ (8006bc4 <xTimerGenericCommand+0x98>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d02a      	beq.n	8006bba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2b05      	cmp	r3, #5
 8006b74:	dc18      	bgt.n	8006ba8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b76:	f7ff fead 	bl	80068d4 <xTaskGetSchedulerState>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d109      	bne.n	8006b94 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b80:	4b10      	ldr	r3, [pc, #64]	@ (8006bc4 <xTimerGenericCommand+0x98>)
 8006b82:	6818      	ldr	r0, [r3, #0]
 8006b84:	f107 0110 	add.w	r1, r7, #16
 8006b88:	2300      	movs	r3, #0
 8006b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b8c:	f7fe fcbe 	bl	800550c <xQueueGenericSend>
 8006b90:	6278      	str	r0, [r7, #36]	@ 0x24
 8006b92:	e012      	b.n	8006bba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b94:	4b0b      	ldr	r3, [pc, #44]	@ (8006bc4 <xTimerGenericCommand+0x98>)
 8006b96:	6818      	ldr	r0, [r3, #0]
 8006b98:	f107 0110 	add.w	r1, r7, #16
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f7fe fcb4 	bl	800550c <xQueueGenericSend>
 8006ba4:	6278      	str	r0, [r7, #36]	@ 0x24
 8006ba6:	e008      	b.n	8006bba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ba8:	4b06      	ldr	r3, [pc, #24]	@ (8006bc4 <xTimerGenericCommand+0x98>)
 8006baa:	6818      	ldr	r0, [r3, #0]
 8006bac:	f107 0110 	add.w	r1, r7, #16
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	f7fe fdac 	bl	8005710 <xQueueGenericSendFromISR>
 8006bb8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3728      	adds	r7, #40	@ 0x28
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	20001418 	.word	0x20001418

08006bc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b088      	sub	sp, #32
 8006bcc:	af02      	add	r7, sp, #8
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bd2:	4b23      	ldr	r3, [pc, #140]	@ (8006c60 <prvProcessExpiredTimer+0x98>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	3304      	adds	r3, #4
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7fe fb5f 	bl	80052a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bec:	f003 0304 	and.w	r3, r3, #4
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d023      	beq.n	8006c3c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	699a      	ldr	r2, [r3, #24]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	18d1      	adds	r1, r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	6978      	ldr	r0, [r7, #20]
 8006c02:	f000 f8d5 	bl	8006db0 <prvInsertTimerInActiveList>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d020      	beq.n	8006c4e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	2300      	movs	r3, #0
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	2100      	movs	r1, #0
 8006c16:	6978      	ldr	r0, [r7, #20]
 8006c18:	f7ff ff88 	bl	8006b2c <xTimerGenericCommand>
 8006c1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d114      	bne.n	8006c4e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	60fb      	str	r3, [r7, #12]
}
 8006c36:	bf00      	nop
 8006c38:	bf00      	nop
 8006c3a:	e7fd      	b.n	8006c38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c42:	f023 0301 	bic.w	r3, r3, #1
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	6978      	ldr	r0, [r7, #20]
 8006c54:	4798      	blx	r3
}
 8006c56:	bf00      	nop
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	20001410 	.word	0x20001410

08006c64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c6c:	f107 0308 	add.w	r3, r7, #8
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 f859 	bl	8006d28 <prvGetNextExpireTime>
 8006c76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 f805 	bl	8006c8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c82:	f000 f8d7 	bl	8006e34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c86:	bf00      	nop
 8006c88:	e7f0      	b.n	8006c6c <prvTimerTask+0x8>
	...

08006c8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c96:	f7ff fa37 	bl	8006108 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c9a:	f107 0308 	add.w	r3, r7, #8
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 f866 	bl	8006d70 <prvSampleTimeNow>
 8006ca4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d130      	bne.n	8006d0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <prvProcessTimerOrBlockTask+0x3c>
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d806      	bhi.n	8006cc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006cba:	f7ff fa33 	bl	8006124 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006cbe:	68f9      	ldr	r1, [r7, #12]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7ff ff81 	bl	8006bc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006cc6:	e024      	b.n	8006d12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d008      	beq.n	8006ce0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006cce:	4b13      	ldr	r3, [pc, #76]	@ (8006d1c <prvProcessTimerOrBlockTask+0x90>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <prvProcessTimerOrBlockTask+0x50>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e000      	b.n	8006cde <prvProcessTimerOrBlockTask+0x52>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8006d20 <prvProcessTimerOrBlockTask+0x94>)
 8006ce2:	6818      	ldr	r0, [r3, #0]
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	4619      	mov	r1, r3
 8006cee:	f7fe ffc9 	bl	8005c84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006cf2:	f7ff fa17 	bl	8006124 <xTaskResumeAll>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10a      	bne.n	8006d12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006cfc:	4b09      	ldr	r3, [pc, #36]	@ (8006d24 <prvProcessTimerOrBlockTask+0x98>)
 8006cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	f3bf 8f6f 	isb	sy
}
 8006d0c:	e001      	b.n	8006d12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d0e:	f7ff fa09 	bl	8006124 <xTaskResumeAll>
}
 8006d12:	bf00      	nop
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	20001414 	.word	0x20001414
 8006d20:	20001418 	.word	0x20001418
 8006d24:	e000ed04 	.word	0xe000ed04

08006d28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d30:	4b0e      	ldr	r3, [pc, #56]	@ (8006d6c <prvGetNextExpireTime+0x44>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <prvGetNextExpireTime+0x16>
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	e000      	b.n	8006d40 <prvGetNextExpireTime+0x18>
 8006d3e:	2200      	movs	r2, #0
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d105      	bne.n	8006d58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d4c:	4b07      	ldr	r3, [pc, #28]	@ (8006d6c <prvGetNextExpireTime+0x44>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	60fb      	str	r3, [r7, #12]
 8006d56:	e001      	b.n	8006d5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	20001410 	.word	0x20001410

08006d70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006d78:	f7ff fa72 	bl	8006260 <xTaskGetTickCount>
 8006d7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006dac <prvSampleTimeNow+0x3c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d205      	bcs.n	8006d94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006d88:	f000 f93a 	bl	8007000 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	601a      	str	r2, [r3, #0]
 8006d92:	e002      	b.n	8006d9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d9a:	4a04      	ldr	r2, [pc, #16]	@ (8006dac <prvSampleTimeNow+0x3c>)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006da0:	68fb      	ldr	r3, [r7, #12]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	20001420 	.word	0x20001420

08006db0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d812      	bhi.n	8006dfc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	1ad2      	subs	r2, r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d302      	bcc.n	8006dea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006de4:	2301      	movs	r3, #1
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	e01b      	b.n	8006e22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006dea:	4b10      	ldr	r3, [pc, #64]	@ (8006e2c <prvInsertTimerInActiveList+0x7c>)
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3304      	adds	r3, #4
 8006df2:	4619      	mov	r1, r3
 8006df4:	4610      	mov	r0, r2
 8006df6:	f7fe fa1c 	bl	8005232 <vListInsert>
 8006dfa:	e012      	b.n	8006e22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d206      	bcs.n	8006e12 <prvInsertTimerInActiveList+0x62>
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d302      	bcc.n	8006e12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	e007      	b.n	8006e22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e12:	4b07      	ldr	r3, [pc, #28]	@ (8006e30 <prvInsertTimerInActiveList+0x80>)
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	f7fe fa08 	bl	8005232 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e22:	697b      	ldr	r3, [r7, #20]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3718      	adds	r7, #24
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	20001414 	.word	0x20001414
 8006e30:	20001410 	.word	0x20001410

08006e34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b08e      	sub	sp, #56	@ 0x38
 8006e38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e3a:	e0ce      	b.n	8006fda <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	da19      	bge.n	8006e76 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006e42:	1d3b      	adds	r3, r7, #4
 8006e44:	3304      	adds	r3, #4
 8006e46:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10b      	bne.n	8006e66 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	61fb      	str	r3, [r7, #28]
}
 8006e60:	bf00      	nop
 8006e62:	bf00      	nop
 8006e64:	e7fd      	b.n	8006e62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e6c:	6850      	ldr	r0, [r2, #4]
 8006e6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e70:	6892      	ldr	r2, [r2, #8]
 8006e72:	4611      	mov	r1, r2
 8006e74:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f2c0 80ae 	blt.w	8006fda <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d004      	beq.n	8006e94 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe fa08 	bl	80052a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e94:	463b      	mov	r3, r7
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7ff ff6a 	bl	8006d70 <prvSampleTimeNow>
 8006e9c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b09      	cmp	r3, #9
 8006ea2:	f200 8097 	bhi.w	8006fd4 <prvProcessReceivedCommands+0x1a0>
 8006ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8006eac <prvProcessReceivedCommands+0x78>)
 8006ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eac:	08006ed5 	.word	0x08006ed5
 8006eb0:	08006ed5 	.word	0x08006ed5
 8006eb4:	08006ed5 	.word	0x08006ed5
 8006eb8:	08006f4b 	.word	0x08006f4b
 8006ebc:	08006f5f 	.word	0x08006f5f
 8006ec0:	08006fab 	.word	0x08006fab
 8006ec4:	08006ed5 	.word	0x08006ed5
 8006ec8:	08006ed5 	.word	0x08006ed5
 8006ecc:	08006f4b 	.word	0x08006f4b
 8006ed0:	08006f5f 	.word	0x08006f5f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006eda:	f043 0301 	orr.w	r3, r3, #1
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	18d1      	adds	r1, r2, r3
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ef2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ef4:	f7ff ff5c 	bl	8006db0 <prvInsertTimerInActiveList>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d06c      	beq.n	8006fd8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f0c:	f003 0304 	and.w	r3, r3, #4
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d061      	beq.n	8006fd8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	441a      	add	r2, r3
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	2300      	movs	r3, #0
 8006f22:	2100      	movs	r1, #0
 8006f24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f26:	f7ff fe01 	bl	8006b2c <xTimerGenericCommand>
 8006f2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d152      	bne.n	8006fd8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	61bb      	str	r3, [r7, #24]
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop
 8006f48:	e7fd      	b.n	8006f46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f50:	f023 0301 	bic.w	r3, r3, #1
 8006f54:	b2da      	uxtb	r2, r3
 8006f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006f5c:	e03d      	b.n	8006fda <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f64:	f043 0301 	orr.w	r3, r3, #1
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f74:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10b      	bne.n	8006f96 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	617b      	str	r3, [r7, #20]
}
 8006f90:	bf00      	nop
 8006f92:	bf00      	nop
 8006f94:	e7fd      	b.n	8006f92 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f98:	699a      	ldr	r2, [r3, #24]
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	18d1      	adds	r1, r2, r3
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fa4:	f7ff ff04 	bl	8006db0 <prvInsertTimerInActiveList>
					break;
 8006fa8:	e017      	b.n	8006fda <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fb0:	f003 0302 	and.w	r3, r3, #2
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d103      	bne.n	8006fc0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006fb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fba:	f000 fbe5 	bl	8007788 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006fbe:	e00c      	b.n	8006fda <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fc6:	f023 0301 	bic.w	r3, r3, #1
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006fd2:	e002      	b.n	8006fda <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006fd4:	bf00      	nop
 8006fd6:	e000      	b.n	8006fda <prvProcessReceivedCommands+0x1a6>
					break;
 8006fd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fda:	4b08      	ldr	r3, [pc, #32]	@ (8006ffc <prvProcessReceivedCommands+0x1c8>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	1d39      	adds	r1, r7, #4
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fe fc32 	bl	800584c <xQueueReceive>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f47f af26 	bne.w	8006e3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006ff0:	bf00      	nop
 8006ff2:	bf00      	nop
 8006ff4:	3730      	adds	r7, #48	@ 0x30
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20001418 	.word	0x20001418

08007000 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b088      	sub	sp, #32
 8007004:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007006:	e049      	b.n	800709c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007008:	4b2e      	ldr	r3, [pc, #184]	@ (80070c4 <prvSwitchTimerLists+0xc4>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007012:	4b2c      	ldr	r3, [pc, #176]	@ (80070c4 <prvSwitchTimerLists+0xc4>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	3304      	adds	r3, #4
 8007020:	4618      	mov	r0, r3
 8007022:	f7fe f93f 	bl	80052a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007034:	f003 0304 	and.w	r3, r3, #4
 8007038:	2b00      	cmp	r3, #0
 800703a:	d02f      	beq.n	800709c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	4413      	add	r3, r2
 8007044:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	429a      	cmp	r2, r3
 800704c:	d90e      	bls.n	800706c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800705a:	4b1a      	ldr	r3, [pc, #104]	@ (80070c4 <prvSwitchTimerLists+0xc4>)
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3304      	adds	r3, #4
 8007062:	4619      	mov	r1, r3
 8007064:	4610      	mov	r0, r2
 8007066:	f7fe f8e4 	bl	8005232 <vListInsert>
 800706a:	e017      	b.n	800709c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800706c:	2300      	movs	r3, #0
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	2300      	movs	r3, #0
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	2100      	movs	r1, #0
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f7ff fd58 	bl	8006b2c <xTimerGenericCommand>
 800707c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10b      	bne.n	800709c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	603b      	str	r3, [r7, #0]
}
 8007096:	bf00      	nop
 8007098:	bf00      	nop
 800709a:	e7fd      	b.n	8007098 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800709c:	4b09      	ldr	r3, [pc, #36]	@ (80070c4 <prvSwitchTimerLists+0xc4>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1b0      	bne.n	8007008 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80070a6:	4b07      	ldr	r3, [pc, #28]	@ (80070c4 <prvSwitchTimerLists+0xc4>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80070ac:	4b06      	ldr	r3, [pc, #24]	@ (80070c8 <prvSwitchTimerLists+0xc8>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a04      	ldr	r2, [pc, #16]	@ (80070c4 <prvSwitchTimerLists+0xc4>)
 80070b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80070b4:	4a04      	ldr	r2, [pc, #16]	@ (80070c8 <prvSwitchTimerLists+0xc8>)
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	6013      	str	r3, [r2, #0]
}
 80070ba:	bf00      	nop
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	20001410 	.word	0x20001410
 80070c8:	20001414 	.word	0x20001414

080070cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80070d2:	f000 f969 	bl	80073a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80070d6:	4b15      	ldr	r3, [pc, #84]	@ (800712c <prvCheckForValidListAndQueue+0x60>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d120      	bne.n	8007120 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80070de:	4814      	ldr	r0, [pc, #80]	@ (8007130 <prvCheckForValidListAndQueue+0x64>)
 80070e0:	f7fe f856 	bl	8005190 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80070e4:	4813      	ldr	r0, [pc, #76]	@ (8007134 <prvCheckForValidListAndQueue+0x68>)
 80070e6:	f7fe f853 	bl	8005190 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80070ea:	4b13      	ldr	r3, [pc, #76]	@ (8007138 <prvCheckForValidListAndQueue+0x6c>)
 80070ec:	4a10      	ldr	r2, [pc, #64]	@ (8007130 <prvCheckForValidListAndQueue+0x64>)
 80070ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80070f0:	4b12      	ldr	r3, [pc, #72]	@ (800713c <prvCheckForValidListAndQueue+0x70>)
 80070f2:	4a10      	ldr	r2, [pc, #64]	@ (8007134 <prvCheckForValidListAndQueue+0x68>)
 80070f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80070f6:	2300      	movs	r3, #0
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	4b11      	ldr	r3, [pc, #68]	@ (8007140 <prvCheckForValidListAndQueue+0x74>)
 80070fc:	4a11      	ldr	r2, [pc, #68]	@ (8007144 <prvCheckForValidListAndQueue+0x78>)
 80070fe:	2110      	movs	r1, #16
 8007100:	200a      	movs	r0, #10
 8007102:	f7fe f963 	bl	80053cc <xQueueGenericCreateStatic>
 8007106:	4603      	mov	r3, r0
 8007108:	4a08      	ldr	r2, [pc, #32]	@ (800712c <prvCheckForValidListAndQueue+0x60>)
 800710a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800710c:	4b07      	ldr	r3, [pc, #28]	@ (800712c <prvCheckForValidListAndQueue+0x60>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d005      	beq.n	8007120 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007114:	4b05      	ldr	r3, [pc, #20]	@ (800712c <prvCheckForValidListAndQueue+0x60>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	490b      	ldr	r1, [pc, #44]	@ (8007148 <prvCheckForValidListAndQueue+0x7c>)
 800711a:	4618      	mov	r0, r3
 800711c:	f7fe fd88 	bl	8005c30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007120:	f000 f974 	bl	800740c <vPortExitCritical>
}
 8007124:	bf00      	nop
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	20001418 	.word	0x20001418
 8007130:	200013e8 	.word	0x200013e8
 8007134:	200013fc 	.word	0x200013fc
 8007138:	20001410 	.word	0x20001410
 800713c:	20001414 	.word	0x20001414
 8007140:	200014c4 	.word	0x200014c4
 8007144:	20001424 	.word	0x20001424
 8007148:	08007a88 	.word	0x08007a88

0800714c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	3b04      	subs	r3, #4
 800715c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	3b04      	subs	r3, #4
 800716a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f023 0201 	bic.w	r2, r3, #1
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	3b04      	subs	r3, #4
 800717a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800717c:	4a0c      	ldr	r2, [pc, #48]	@ (80071b0 <pxPortInitialiseStack+0x64>)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	3b14      	subs	r3, #20
 8007186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3b04      	subs	r3, #4
 8007192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f06f 0202 	mvn.w	r2, #2
 800719a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3b20      	subs	r3, #32
 80071a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071a2:	68fb      	ldr	r3, [r7, #12]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	080071b5 	.word	0x080071b5

080071b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071be:	4b13      	ldr	r3, [pc, #76]	@ (800720c <prvTaskExitError+0x58>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c6:	d00b      	beq.n	80071e0 <prvTaskExitError+0x2c>
	__asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	60fb      	str	r3, [r7, #12]
}
 80071da:	bf00      	nop
 80071dc:	bf00      	nop
 80071de:	e7fd      	b.n	80071dc <prvTaskExitError+0x28>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	60bb      	str	r3, [r7, #8]
}
 80071f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80071f4:	bf00      	nop
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d0fc      	beq.n	80071f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80071fc:	bf00      	nop
 80071fe:	bf00      	nop
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	2000000c 	.word	0x2000000c

08007210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007210:	4b07      	ldr	r3, [pc, #28]	@ (8007230 <pxCurrentTCBConst2>)
 8007212:	6819      	ldr	r1, [r3, #0]
 8007214:	6808      	ldr	r0, [r1, #0]
 8007216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721a:	f380 8809 	msr	PSP, r0
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f04f 0000 	mov.w	r0, #0
 8007226:	f380 8811 	msr	BASEPRI, r0
 800722a:	4770      	bx	lr
 800722c:	f3af 8000 	nop.w

08007230 <pxCurrentTCBConst2>:
 8007230:	20000ee8 	.word	0x20000ee8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop

08007238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007238:	4808      	ldr	r0, [pc, #32]	@ (800725c <prvPortStartFirstTask+0x24>)
 800723a:	6800      	ldr	r0, [r0, #0]
 800723c:	6800      	ldr	r0, [r0, #0]
 800723e:	f380 8808 	msr	MSP, r0
 8007242:	f04f 0000 	mov.w	r0, #0
 8007246:	f380 8814 	msr	CONTROL, r0
 800724a:	b662      	cpsie	i
 800724c:	b661      	cpsie	f
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	f3bf 8f6f 	isb	sy
 8007256:	df00      	svc	0
 8007258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800725a:	bf00      	nop
 800725c:	e000ed08 	.word	0xe000ed08

08007260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007266:	4b47      	ldr	r3, [pc, #284]	@ (8007384 <xPortStartScheduler+0x124>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a47      	ldr	r2, [pc, #284]	@ (8007388 <xPortStartScheduler+0x128>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d10b      	bne.n	8007288 <xPortStartScheduler+0x28>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	613b      	str	r3, [r7, #16]
}
 8007282:	bf00      	nop
 8007284:	bf00      	nop
 8007286:	e7fd      	b.n	8007284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007288:	4b3e      	ldr	r3, [pc, #248]	@ (8007384 <xPortStartScheduler+0x124>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a3f      	ldr	r2, [pc, #252]	@ (800738c <xPortStartScheduler+0x12c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d10b      	bne.n	80072aa <xPortStartScheduler+0x4a>
	__asm volatile
 8007292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007296:	f383 8811 	msr	BASEPRI, r3
 800729a:	f3bf 8f6f 	isb	sy
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	60fb      	str	r3, [r7, #12]
}
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop
 80072a8:	e7fd      	b.n	80072a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80072aa:	4b39      	ldr	r3, [pc, #228]	@ (8007390 <xPortStartScheduler+0x130>)
 80072ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	22ff      	movs	r2, #255	@ 0xff
 80072ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	4b31      	ldr	r3, [pc, #196]	@ (8007394 <xPortStartScheduler+0x134>)
 80072d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072d2:	4b31      	ldr	r3, [pc, #196]	@ (8007398 <xPortStartScheduler+0x138>)
 80072d4:	2207      	movs	r2, #7
 80072d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072d8:	e009      	b.n	80072ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80072da:	4b2f      	ldr	r3, [pc, #188]	@ (8007398 <xPortStartScheduler+0x138>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3b01      	subs	r3, #1
 80072e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007398 <xPortStartScheduler+0x138>)
 80072e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072e4:	78fb      	ldrb	r3, [r7, #3]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072ee:	78fb      	ldrb	r3, [r7, #3]
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072f6:	2b80      	cmp	r3, #128	@ 0x80
 80072f8:	d0ef      	beq.n	80072da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072fa:	4b27      	ldr	r3, [pc, #156]	@ (8007398 <xPortStartScheduler+0x138>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f1c3 0307 	rsb	r3, r3, #7
 8007302:	2b04      	cmp	r3, #4
 8007304:	d00b      	beq.n	800731e <xPortStartScheduler+0xbe>
	__asm volatile
 8007306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	60bb      	str	r3, [r7, #8]
}
 8007318:	bf00      	nop
 800731a:	bf00      	nop
 800731c:	e7fd      	b.n	800731a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800731e:	4b1e      	ldr	r3, [pc, #120]	@ (8007398 <xPortStartScheduler+0x138>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	021b      	lsls	r3, r3, #8
 8007324:	4a1c      	ldr	r2, [pc, #112]	@ (8007398 <xPortStartScheduler+0x138>)
 8007326:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007328:	4b1b      	ldr	r3, [pc, #108]	@ (8007398 <xPortStartScheduler+0x138>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007330:	4a19      	ldr	r2, [pc, #100]	@ (8007398 <xPortStartScheduler+0x138>)
 8007332:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	b2da      	uxtb	r2, r3
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800733c:	4b17      	ldr	r3, [pc, #92]	@ (800739c <xPortStartScheduler+0x13c>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a16      	ldr	r2, [pc, #88]	@ (800739c <xPortStartScheduler+0x13c>)
 8007342:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007346:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007348:	4b14      	ldr	r3, [pc, #80]	@ (800739c <xPortStartScheduler+0x13c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a13      	ldr	r2, [pc, #76]	@ (800739c <xPortStartScheduler+0x13c>)
 800734e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007352:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007354:	f000 f8da 	bl	800750c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007358:	4b11      	ldr	r3, [pc, #68]	@ (80073a0 <xPortStartScheduler+0x140>)
 800735a:	2200      	movs	r2, #0
 800735c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800735e:	f000 f8f9 	bl	8007554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007362:	4b10      	ldr	r3, [pc, #64]	@ (80073a4 <xPortStartScheduler+0x144>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a0f      	ldr	r2, [pc, #60]	@ (80073a4 <xPortStartScheduler+0x144>)
 8007368:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800736c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800736e:	f7ff ff63 	bl	8007238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007372:	f7ff f83f 	bl	80063f4 <vTaskSwitchContext>
	prvTaskExitError();
 8007376:	f7ff ff1d 	bl	80071b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3718      	adds	r7, #24
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	e000ed00 	.word	0xe000ed00
 8007388:	410fc271 	.word	0x410fc271
 800738c:	410fc270 	.word	0x410fc270
 8007390:	e000e400 	.word	0xe000e400
 8007394:	20001514 	.word	0x20001514
 8007398:	20001518 	.word	0x20001518
 800739c:	e000ed20 	.word	0xe000ed20
 80073a0:	2000000c 	.word	0x2000000c
 80073a4:	e000ef34 	.word	0xe000ef34

080073a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	607b      	str	r3, [r7, #4]
}
 80073c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80073c2:	4b10      	ldr	r3, [pc, #64]	@ (8007404 <vPortEnterCritical+0x5c>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3301      	adds	r3, #1
 80073c8:	4a0e      	ldr	r2, [pc, #56]	@ (8007404 <vPortEnterCritical+0x5c>)
 80073ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80073cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007404 <vPortEnterCritical+0x5c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d110      	bne.n	80073f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007408 <vPortEnterCritical+0x60>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00b      	beq.n	80073f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	603b      	str	r3, [r7, #0]
}
 80073f0:	bf00      	nop
 80073f2:	bf00      	nop
 80073f4:	e7fd      	b.n	80073f2 <vPortEnterCritical+0x4a>
	}
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	2000000c 	.word	0x2000000c
 8007408:	e000ed04 	.word	0xe000ed04

0800740c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007412:	4b12      	ldr	r3, [pc, #72]	@ (800745c <vPortExitCritical+0x50>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10b      	bne.n	8007432 <vPortExitCritical+0x26>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	607b      	str	r3, [r7, #4]
}
 800742c:	bf00      	nop
 800742e:	bf00      	nop
 8007430:	e7fd      	b.n	800742e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007432:	4b0a      	ldr	r3, [pc, #40]	@ (800745c <vPortExitCritical+0x50>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3b01      	subs	r3, #1
 8007438:	4a08      	ldr	r2, [pc, #32]	@ (800745c <vPortExitCritical+0x50>)
 800743a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800743c:	4b07      	ldr	r3, [pc, #28]	@ (800745c <vPortExitCritical+0x50>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d105      	bne.n	8007450 <vPortExitCritical+0x44>
 8007444:	2300      	movs	r3, #0
 8007446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	f383 8811 	msr	BASEPRI, r3
}
 800744e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	2000000c 	.word	0x2000000c

08007460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007460:	f3ef 8009 	mrs	r0, PSP
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	4b15      	ldr	r3, [pc, #84]	@ (80074c0 <pxCurrentTCBConst>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	f01e 0f10 	tst.w	lr, #16
 8007470:	bf08      	it	eq
 8007472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747a:	6010      	str	r0, [r2, #0]
 800747c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007480:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007484:	f380 8811 	msr	BASEPRI, r0
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f7fe ffb0 	bl	80063f4 <vTaskSwitchContext>
 8007494:	f04f 0000 	mov.w	r0, #0
 8007498:	f380 8811 	msr	BASEPRI, r0
 800749c:	bc09      	pop	{r0, r3}
 800749e:	6819      	ldr	r1, [r3, #0]
 80074a0:	6808      	ldr	r0, [r1, #0]
 80074a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a6:	f01e 0f10 	tst.w	lr, #16
 80074aa:	bf08      	it	eq
 80074ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074b0:	f380 8809 	msr	PSP, r0
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	f3af 8000 	nop.w

080074c0 <pxCurrentTCBConst>:
 80074c0:	20000ee8 	.word	0x20000ee8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop

080074c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	607b      	str	r3, [r7, #4]
}
 80074e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80074e2:	f7fe fecd 	bl	8006280 <xTaskIncrementTick>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d003      	beq.n	80074f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80074ec:	4b06      	ldr	r3, [pc, #24]	@ (8007508 <xPortSysTickHandler+0x40>)
 80074ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	2300      	movs	r3, #0
 80074f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	f383 8811 	msr	BASEPRI, r3
}
 80074fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	e000ed04 	.word	0xe000ed04

0800750c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800750c:	b480      	push	{r7}
 800750e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007510:	4b0b      	ldr	r3, [pc, #44]	@ (8007540 <vPortSetupTimerInterrupt+0x34>)
 8007512:	2200      	movs	r2, #0
 8007514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007516:	4b0b      	ldr	r3, [pc, #44]	@ (8007544 <vPortSetupTimerInterrupt+0x38>)
 8007518:	2200      	movs	r2, #0
 800751a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800751c:	4b0a      	ldr	r3, [pc, #40]	@ (8007548 <vPortSetupTimerInterrupt+0x3c>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a0a      	ldr	r2, [pc, #40]	@ (800754c <vPortSetupTimerInterrupt+0x40>)
 8007522:	fba2 2303 	umull	r2, r3, r2, r3
 8007526:	099b      	lsrs	r3, r3, #6
 8007528:	4a09      	ldr	r2, [pc, #36]	@ (8007550 <vPortSetupTimerInterrupt+0x44>)
 800752a:	3b01      	subs	r3, #1
 800752c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800752e:	4b04      	ldr	r3, [pc, #16]	@ (8007540 <vPortSetupTimerInterrupt+0x34>)
 8007530:	2207      	movs	r2, #7
 8007532:	601a      	str	r2, [r3, #0]
}
 8007534:	bf00      	nop
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	e000e010 	.word	0xe000e010
 8007544:	e000e018 	.word	0xe000e018
 8007548:	20000000 	.word	0x20000000
 800754c:	10624dd3 	.word	0x10624dd3
 8007550:	e000e014 	.word	0xe000e014

08007554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007554:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007564 <vPortEnableVFP+0x10>
 8007558:	6801      	ldr	r1, [r0, #0]
 800755a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800755e:	6001      	str	r1, [r0, #0]
 8007560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007562:	bf00      	nop
 8007564:	e000ed88 	.word	0xe000ed88

08007568 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800756e:	f3ef 8305 	mrs	r3, IPSR
 8007572:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b0f      	cmp	r3, #15
 8007578:	d915      	bls.n	80075a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800757a:	4a18      	ldr	r2, [pc, #96]	@ (80075dc <vPortValidateInterruptPriority+0x74>)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007584:	4b16      	ldr	r3, [pc, #88]	@ (80075e0 <vPortValidateInterruptPriority+0x78>)
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	7afa      	ldrb	r2, [r7, #11]
 800758a:	429a      	cmp	r2, r3
 800758c:	d20b      	bcs.n	80075a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	607b      	str	r3, [r7, #4]
}
 80075a0:	bf00      	nop
 80075a2:	bf00      	nop
 80075a4:	e7fd      	b.n	80075a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80075a6:	4b0f      	ldr	r3, [pc, #60]	@ (80075e4 <vPortValidateInterruptPriority+0x7c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80075ae:	4b0e      	ldr	r3, [pc, #56]	@ (80075e8 <vPortValidateInterruptPriority+0x80>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d90b      	bls.n	80075ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	603b      	str	r3, [r7, #0]
}
 80075c8:	bf00      	nop
 80075ca:	bf00      	nop
 80075cc:	e7fd      	b.n	80075ca <vPortValidateInterruptPriority+0x62>
	}
 80075ce:	bf00      	nop
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	e000e3f0 	.word	0xe000e3f0
 80075e0:	20001514 	.word	0x20001514
 80075e4:	e000ed0c 	.word	0xe000ed0c
 80075e8:	20001518 	.word	0x20001518

080075ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b08a      	sub	sp, #40	@ 0x28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075f4:	2300      	movs	r3, #0
 80075f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075f8:	f7fe fd86 	bl	8006108 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80075fc:	4b5c      	ldr	r3, [pc, #368]	@ (8007770 <pvPortMalloc+0x184>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007604:	f000 f924 	bl	8007850 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007608:	4b5a      	ldr	r3, [pc, #360]	@ (8007774 <pvPortMalloc+0x188>)
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4013      	ands	r3, r2
 8007610:	2b00      	cmp	r3, #0
 8007612:	f040 8095 	bne.w	8007740 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d01e      	beq.n	800765a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800761c:	2208      	movs	r2, #8
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4413      	add	r3, r2
 8007622:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	2b00      	cmp	r3, #0
 800762c:	d015      	beq.n	800765a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f023 0307 	bic.w	r3, r3, #7
 8007634:	3308      	adds	r3, #8
 8007636:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f003 0307 	and.w	r3, r3, #7
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00b      	beq.n	800765a <pvPortMalloc+0x6e>
	__asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	617b      	str	r3, [r7, #20]
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop
 8007658:	e7fd      	b.n	8007656 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d06f      	beq.n	8007740 <pvPortMalloc+0x154>
 8007660:	4b45      	ldr	r3, [pc, #276]	@ (8007778 <pvPortMalloc+0x18c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	429a      	cmp	r2, r3
 8007668:	d86a      	bhi.n	8007740 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800766a:	4b44      	ldr	r3, [pc, #272]	@ (800777c <pvPortMalloc+0x190>)
 800766c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800766e:	4b43      	ldr	r3, [pc, #268]	@ (800777c <pvPortMalloc+0x190>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007674:	e004      	b.n	8007680 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007678:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	429a      	cmp	r2, r3
 8007688:	d903      	bls.n	8007692 <pvPortMalloc+0xa6>
 800768a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1f1      	bne.n	8007676 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007692:	4b37      	ldr	r3, [pc, #220]	@ (8007770 <pvPortMalloc+0x184>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007698:	429a      	cmp	r2, r3
 800769a:	d051      	beq.n	8007740 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2208      	movs	r2, #8
 80076a2:	4413      	add	r3, r2
 80076a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80076a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80076ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	1ad2      	subs	r2, r2, r3
 80076b6:	2308      	movs	r3, #8
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d920      	bls.n	8007700 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80076be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4413      	add	r3, r2
 80076c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	f003 0307 	and.w	r3, r3, #7
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00b      	beq.n	80076e8 <pvPortMalloc+0xfc>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	613b      	str	r3, [r7, #16]
}
 80076e2:	bf00      	nop
 80076e4:	bf00      	nop
 80076e6:	e7fd      	b.n	80076e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80076e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	1ad2      	subs	r2, r2, r3
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80076f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076fa:	69b8      	ldr	r0, [r7, #24]
 80076fc:	f000 f90a 	bl	8007914 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007700:	4b1d      	ldr	r3, [pc, #116]	@ (8007778 <pvPortMalloc+0x18c>)
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	4a1b      	ldr	r2, [pc, #108]	@ (8007778 <pvPortMalloc+0x18c>)
 800770c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800770e:	4b1a      	ldr	r3, [pc, #104]	@ (8007778 <pvPortMalloc+0x18c>)
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	4b1b      	ldr	r3, [pc, #108]	@ (8007780 <pvPortMalloc+0x194>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	429a      	cmp	r2, r3
 8007718:	d203      	bcs.n	8007722 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800771a:	4b17      	ldr	r3, [pc, #92]	@ (8007778 <pvPortMalloc+0x18c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a18      	ldr	r2, [pc, #96]	@ (8007780 <pvPortMalloc+0x194>)
 8007720:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007724:	685a      	ldr	r2, [r3, #4]
 8007726:	4b13      	ldr	r3, [pc, #76]	@ (8007774 <pvPortMalloc+0x188>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	431a      	orrs	r2, r3
 800772c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007732:	2200      	movs	r2, #0
 8007734:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007736:	4b13      	ldr	r3, [pc, #76]	@ (8007784 <pvPortMalloc+0x198>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3301      	adds	r3, #1
 800773c:	4a11      	ldr	r2, [pc, #68]	@ (8007784 <pvPortMalloc+0x198>)
 800773e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007740:	f7fe fcf0 	bl	8006124 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00b      	beq.n	8007766 <pvPortMalloc+0x17a>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	60fb      	str	r3, [r7, #12]
}
 8007760:	bf00      	nop
 8007762:	bf00      	nop
 8007764:	e7fd      	b.n	8007762 <pvPortMalloc+0x176>
	return pvReturn;
 8007766:	69fb      	ldr	r3, [r7, #28]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3728      	adds	r7, #40	@ 0x28
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	200020dc 	.word	0x200020dc
 8007774:	200020f0 	.word	0x200020f0
 8007778:	200020e0 	.word	0x200020e0
 800777c:	200020d4 	.word	0x200020d4
 8007780:	200020e4 	.word	0x200020e4
 8007784:	200020e8 	.word	0x200020e8

08007788 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d04f      	beq.n	800783a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800779a:	2308      	movs	r3, #8
 800779c:	425b      	negs	r3, r3
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	4413      	add	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	4b25      	ldr	r3, [pc, #148]	@ (8007844 <vPortFree+0xbc>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4013      	ands	r3, r2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10b      	bne.n	80077ce <vPortFree+0x46>
	__asm volatile
 80077b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ba:	f383 8811 	msr	BASEPRI, r3
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	60fb      	str	r3, [r7, #12]
}
 80077c8:	bf00      	nop
 80077ca:	bf00      	nop
 80077cc:	e7fd      	b.n	80077ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00b      	beq.n	80077ee <vPortFree+0x66>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	60bb      	str	r3, [r7, #8]
}
 80077e8:	bf00      	nop
 80077ea:	bf00      	nop
 80077ec:	e7fd      	b.n	80077ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	685a      	ldr	r2, [r3, #4]
 80077f2:	4b14      	ldr	r3, [pc, #80]	@ (8007844 <vPortFree+0xbc>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4013      	ands	r3, r2
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d01e      	beq.n	800783a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d11a      	bne.n	800783a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	4b0e      	ldr	r3, [pc, #56]	@ (8007844 <vPortFree+0xbc>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	43db      	mvns	r3, r3
 800780e:	401a      	ands	r2, r3
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007814:	f7fe fc78 	bl	8006108 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	4b0a      	ldr	r3, [pc, #40]	@ (8007848 <vPortFree+0xc0>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4413      	add	r3, r2
 8007822:	4a09      	ldr	r2, [pc, #36]	@ (8007848 <vPortFree+0xc0>)
 8007824:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007826:	6938      	ldr	r0, [r7, #16]
 8007828:	f000 f874 	bl	8007914 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800782c:	4b07      	ldr	r3, [pc, #28]	@ (800784c <vPortFree+0xc4>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3301      	adds	r3, #1
 8007832:	4a06      	ldr	r2, [pc, #24]	@ (800784c <vPortFree+0xc4>)
 8007834:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007836:	f7fe fc75 	bl	8006124 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800783a:	bf00      	nop
 800783c:	3718      	adds	r7, #24
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	200020f0 	.word	0x200020f0
 8007848:	200020e0 	.word	0x200020e0
 800784c:	200020ec 	.word	0x200020ec

08007850 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007856:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800785a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800785c:	4b27      	ldr	r3, [pc, #156]	@ (80078fc <prvHeapInit+0xac>)
 800785e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f003 0307 	and.w	r3, r3, #7
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00c      	beq.n	8007884 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	3307      	adds	r3, #7
 800786e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f023 0307 	bic.w	r3, r3, #7
 8007876:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	4a1f      	ldr	r2, [pc, #124]	@ (80078fc <prvHeapInit+0xac>)
 8007880:	4413      	add	r3, r2
 8007882:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007888:	4a1d      	ldr	r2, [pc, #116]	@ (8007900 <prvHeapInit+0xb0>)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800788e:	4b1c      	ldr	r3, [pc, #112]	@ (8007900 <prvHeapInit+0xb0>)
 8007890:	2200      	movs	r2, #0
 8007892:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	4413      	add	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800789c:	2208      	movs	r2, #8
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	1a9b      	subs	r3, r3, r2
 80078a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f023 0307 	bic.w	r3, r3, #7
 80078aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	4a15      	ldr	r2, [pc, #84]	@ (8007904 <prvHeapInit+0xb4>)
 80078b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80078b2:	4b14      	ldr	r3, [pc, #80]	@ (8007904 <prvHeapInit+0xb4>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2200      	movs	r2, #0
 80078b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80078ba:	4b12      	ldr	r3, [pc, #72]	@ (8007904 <prvHeapInit+0xb4>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2200      	movs	r2, #0
 80078c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	1ad2      	subs	r2, r2, r3
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007904 <prvHeapInit+0xb4>)
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	4a0a      	ldr	r2, [pc, #40]	@ (8007908 <prvHeapInit+0xb8>)
 80078de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	4a09      	ldr	r2, [pc, #36]	@ (800790c <prvHeapInit+0xbc>)
 80078e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078e8:	4b09      	ldr	r3, [pc, #36]	@ (8007910 <prvHeapInit+0xc0>)
 80078ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80078ee:	601a      	str	r2, [r3, #0]
}
 80078f0:	bf00      	nop
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	2000151c 	.word	0x2000151c
 8007900:	200020d4 	.word	0x200020d4
 8007904:	200020dc 	.word	0x200020dc
 8007908:	200020e4 	.word	0x200020e4
 800790c:	200020e0 	.word	0x200020e0
 8007910:	200020f0 	.word	0x200020f0

08007914 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800791c:	4b28      	ldr	r3, [pc, #160]	@ (80079c0 <prvInsertBlockIntoFreeList+0xac>)
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	e002      	b.n	8007928 <prvInsertBlockIntoFreeList+0x14>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	429a      	cmp	r2, r3
 8007930:	d8f7      	bhi.n	8007922 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	4413      	add	r3, r2
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	429a      	cmp	r2, r3
 8007942:	d108      	bne.n	8007956 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	441a      	add	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	441a      	add	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	429a      	cmp	r2, r3
 8007968:	d118      	bne.n	800799c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	4b15      	ldr	r3, [pc, #84]	@ (80079c4 <prvInsertBlockIntoFreeList+0xb0>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	429a      	cmp	r2, r3
 8007974:	d00d      	beq.n	8007992 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685a      	ldr	r2, [r3, #4]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	441a      	add	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	e008      	b.n	80079a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007992:	4b0c      	ldr	r3, [pc, #48]	@ (80079c4 <prvInsertBlockIntoFreeList+0xb0>)
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	e003      	b.n	80079a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d002      	beq.n	80079b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079b2:	bf00      	nop
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	200020d4 	.word	0x200020d4
 80079c4:	200020dc 	.word	0x200020dc

080079c8 <memset>:
 80079c8:	4402      	add	r2, r0
 80079ca:	4603      	mov	r3, r0
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d100      	bne.n	80079d2 <memset+0xa>
 80079d0:	4770      	bx	lr
 80079d2:	f803 1b01 	strb.w	r1, [r3], #1
 80079d6:	e7f9      	b.n	80079cc <memset+0x4>

080079d8 <__libc_init_array>:
 80079d8:	b570      	push	{r4, r5, r6, lr}
 80079da:	4d0d      	ldr	r5, [pc, #52]	@ (8007a10 <__libc_init_array+0x38>)
 80079dc:	4c0d      	ldr	r4, [pc, #52]	@ (8007a14 <__libc_init_array+0x3c>)
 80079de:	1b64      	subs	r4, r4, r5
 80079e0:	10a4      	asrs	r4, r4, #2
 80079e2:	2600      	movs	r6, #0
 80079e4:	42a6      	cmp	r6, r4
 80079e6:	d109      	bne.n	80079fc <__libc_init_array+0x24>
 80079e8:	4d0b      	ldr	r5, [pc, #44]	@ (8007a18 <__libc_init_array+0x40>)
 80079ea:	4c0c      	ldr	r4, [pc, #48]	@ (8007a1c <__libc_init_array+0x44>)
 80079ec:	f000 f826 	bl	8007a3c <_init>
 80079f0:	1b64      	subs	r4, r4, r5
 80079f2:	10a4      	asrs	r4, r4, #2
 80079f4:	2600      	movs	r6, #0
 80079f6:	42a6      	cmp	r6, r4
 80079f8:	d105      	bne.n	8007a06 <__libc_init_array+0x2e>
 80079fa:	bd70      	pop	{r4, r5, r6, pc}
 80079fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a00:	4798      	blx	r3
 8007a02:	3601      	adds	r6, #1
 8007a04:	e7ee      	b.n	80079e4 <__libc_init_array+0xc>
 8007a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a0a:	4798      	blx	r3
 8007a0c:	3601      	adds	r6, #1
 8007a0e:	e7f2      	b.n	80079f6 <__libc_init_array+0x1e>
 8007a10:	08007ae0 	.word	0x08007ae0
 8007a14:	08007ae0 	.word	0x08007ae0
 8007a18:	08007ae0 	.word	0x08007ae0
 8007a1c:	08007ae4 	.word	0x08007ae4

08007a20 <memcpy>:
 8007a20:	440a      	add	r2, r1
 8007a22:	4291      	cmp	r1, r2
 8007a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a28:	d100      	bne.n	8007a2c <memcpy+0xc>
 8007a2a:	4770      	bx	lr
 8007a2c:	b510      	push	{r4, lr}
 8007a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a36:	4291      	cmp	r1, r2
 8007a38:	d1f9      	bne.n	8007a2e <memcpy+0xe>
 8007a3a:	bd10      	pop	{r4, pc}

08007a3c <_init>:
 8007a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3e:	bf00      	nop
 8007a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a42:	bc08      	pop	{r3}
 8007a44:	469e      	mov	lr, r3
 8007a46:	4770      	bx	lr

08007a48 <_fini>:
 8007a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4a:	bf00      	nop
 8007a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4e:	bc08      	pop	{r3}
 8007a50:	469e      	mov	lr, r3
 8007a52:	4770      	bx	lr
