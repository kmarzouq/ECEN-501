
ECEN501Lab4Pt3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c054  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c1d8  0800c200  0800c200  0000d200  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080183d8  080183d8  0001ac60  2**0
                  CONTENTS
  4 .ARM          00000008  080183d8  080183d8  000193d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080183e0  080183e0  0001ac60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080183e0  080183e0  000193e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080183e4  080183e4  000193e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000c60  20000000  080183e8  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001208  20000c60  08019048  0001ac60  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20001e68  08019048  0001ae68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001ac60  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c133  00000000  00000000  0001ac90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b9c  00000000  00000000  00036dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  0003a960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001299  00000000  00000000  0003c198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aaf9  00000000  00000000  0003d431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d476  00000000  00000000  00067f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102f87  00000000  00000000  000853a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00188327  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a38  00000000  00000000  001883b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0018fde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000c60 	.word	0x20000c60
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c1cc 	.word	0x0800c1cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000c64 	.word	0x20000c64
 80001cc:	0800c1cc 	.word	0x0800c1cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b0a4      	sub	sp, #144	@ 0x90
 8000e9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f001 fb4b 	bl	8002538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f8cb 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f000 fa93 	bl	80013d0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000eaa:	f000 f929 	bl	8001100 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000eae:	f000 f95f 	bl	8001170 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000eb2:	f000 f99b 	bl	80011ec <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000eb6:	f000 f9bf 	bl	8001238 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000eba:	f000 f9fb 	bl	80012b4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000ebe:	f000 fa29 	bl	8001314 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ec2:	f000 fa57 	bl	8001374 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  uint8_t msg8[] = "=====> Accelerometer sensor LSM6DSL initialized \r\n ";
 8000ec6:	4b53      	ldr	r3, [pc, #332]	@ (8001014 <main+0x17c>)
 8000ec8:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8000ecc:	461d      	mov	r5, r3
 8000ece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eda:	682b      	ldr	r3, [r5, #0]
 8000edc:	6023      	str	r3, [r4, #0]

  AI_Init();
 8000ede:	f000 fc29 	bl	8001734 <AI_Init>
  BSP_ACCELERO_Init();
 8000ee2:	f001 f9bd 	bl	8002260 <BSP_ACCELERO_Init>
  HAL_UART_Transmit(&huart1,msg8,sizeof(msg8),1000);
 8000ee6:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000eea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eee:	2234      	movs	r2, #52	@ 0x34
 8000ef0:	4849      	ldr	r0, [pc, #292]	@ (8001018 <main+0x180>)
 8000ef2:	f004 fd32 	bl	800595a <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t write_index = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_ACCELERO_AccGetXYZ(acc_value);
 8000efc:	4847      	ldr	r0, [pc, #284]	@ (800101c <main+0x184>)
 8000efe:	f001 f9ed 	bl	80022dc <BSP_ACCELERO_AccGetXYZ>

      aiInData[write_index + 0] = (float) acc_value[0] / 4000.0f;
 8000f02:	4b46      	ldr	r3, [pc, #280]	@ (800101c <main+0x184>)
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f0e:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8001020 <main+0x188>
 8000f12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f16:	4a43      	ldr	r2, [pc, #268]	@ (8001024 <main+0x18c>)
 8000f18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	edc3 7a00 	vstr	s15, [r3]
      aiInData[write_index + 1] = (float) acc_value[1] / 4000.0f;
 8000f24:	4b3d      	ldr	r3, [pc, #244]	@ (800101c <main+0x184>)
 8000f26:	885b      	ldrh	r3, [r3, #2]
 8000f28:	ee07 3a90 	vmov	s15, r3
 8000f2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f34:	3301      	adds	r3, #1
 8000f36:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8001020 <main+0x188>
 8000f3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f3e:	4a39      	ldr	r2, [pc, #228]	@ (8001024 <main+0x18c>)
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	edc3 7a00 	vstr	s15, [r3]
      aiInData[write_index + 2] = (float) acc_value[2] / 4000.0f;
 8000f48:	4b34      	ldr	r3, [pc, #208]	@ (800101c <main+0x184>)
 8000f4a:	889b      	ldrh	r3, [r3, #4]
 8000f4c:	ee07 3a90 	vmov	s15, r3
 8000f50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f58:	3302      	adds	r3, #2
 8000f5a:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001020 <main+0x188>
 8000f5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f62:	4a30      	ldr	r2, [pc, #192]	@ (8001024 <main+0x18c>)
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	edc3 7a00 	vstr	s15, [r3]
      write_index += 3;
 8000f6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f70:	3303      	adds	r3, #3
 8000f72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      if (write_index == AI_NETWORK_IN_1_SIZE) {
 8000f76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f7a:	2b4e      	cmp	r3, #78	@ 0x4e
 8000f7c:	d1be      	bne.n	8000efc <main+0x64>
        write_index = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

        printf("Running inference\r\n");
 8000f84:	4828      	ldr	r0, [pc, #160]	@ (8001028 <main+0x190>)
 8000f86:	f008 ff45 	bl	8009e14 <puts>
        AI_Run(aiInData, aiOutData);
 8000f8a:	4928      	ldr	r1, [pc, #160]	@ (800102c <main+0x194>)
 8000f8c:	4825      	ldr	r0, [pc, #148]	@ (8001024 <main+0x18c>)
 8000f8e:	f000 fc0d 	bl	80017ac <AI_Run>

        /* Output results */
        for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000f98:	e01f      	b.n	8000fda <main+0x142>
          uint8_t msg[20];
          snprintf(msg, sizeof(msg), "%8.6f ", aiOutData[i]);
 8000f9a:	4a24      	ldr	r2, [pc, #144]	@ (800102c <main+0x194>)
 8000f9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff face 	bl	8000548 <__aeabi_f2d>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8000fb4:	e9cd 2300 	strd	r2, r3, [sp]
 8000fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8001030 <main+0x198>)
 8000fba:	2114      	movs	r1, #20
 8000fbc:	f008 ff32 	bl	8009e24 <sniprintf>
          HAL_UART_Transmit(&huart1,msg,sizeof(msg),1000);
 8000fc0:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000fc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc8:	2214      	movs	r2, #20
 8000fca:	4813      	ldr	r0, [pc, #76]	@ (8001018 <main+0x180>)
 8000fcc:	f004 fcc5 	bl	800595a <HAL_UART_Transmit>
        for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8000fd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000fda:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d9db      	bls.n	8000f9a <main+0x102>
        }
        uint32_t class = argmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 8000fe2:	2103      	movs	r1, #3
 8000fe4:	4811      	ldr	r0, [pc, #68]	@ (800102c <main+0x194>)
 8000fe6:	f000 fc19 	bl	800181c <argmax>
 8000fea:	67f8      	str	r0, [r7, #124]	@ 0x7c
        uint8_t msg1[50];
        snprintf(msg1, sizeof(msg1), ": %d - %s\r\n", (int) class, activities[class]);
 8000fec:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000fee:	4911      	ldr	r1, [pc, #68]	@ (8001034 <main+0x19c>)
 8000ff0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ff2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ff6:	4638      	mov	r0, r7
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	4a0e      	ldr	r2, [pc, #56]	@ (8001038 <main+0x1a0>)
 8000ffe:	2132      	movs	r1, #50	@ 0x32
 8001000:	f008 ff10 	bl	8009e24 <sniprintf>
        HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 8001004:	4639      	mov	r1, r7
 8001006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100a:	2232      	movs	r2, #50	@ 0x32
 800100c:	4802      	ldr	r0, [pc, #8]	@ (8001018 <main+0x180>)
 800100e:	f004 fca4 	bl	800595a <HAL_UART_Transmit>
  {
 8001012:	e773      	b.n	8000efc <main+0x64>
 8001014:	0800c244 	.word	0x0800c244
 8001018:	20000db0 	.word	0x20000db0
 800101c:	20001bd4 	.word	0x20001bd4
 8001020:	457a0000 	.word	0x457a0000
 8001024:	200013a8 	.word	0x200013a8
 8001028:	0800c21c 	.word	0x0800c21c
 800102c:	200014e0 	.word	0x200014e0
 8001030:	0800c230 	.word	0x0800c230
 8001034:	20000000 	.word	0x20000000
 8001038:	0800c238 	.word	0x0800c238

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b096      	sub	sp, #88	@ 0x58
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	2244      	movs	r2, #68	@ 0x44
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f008 fff6 	bl	800a03c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800105e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001062:	f002 ff9b 	bl	8003f9c <HAL_PWREx_ControlVoltageScaling>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800106c:	f000 fc06 	bl	800187c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001070:	f002 ff76 	bl	8003f60 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001074:	4b21      	ldr	r3, [pc, #132]	@ (80010fc <SystemClock_Config+0xc0>)
 8001076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800107a:	4a20      	ldr	r2, [pc, #128]	@ (80010fc <SystemClock_Config+0xc0>)
 800107c:	f023 0318 	bic.w	r3, r3, #24
 8001080:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001084:	2314      	movs	r3, #20
 8001086:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001088:	2301      	movs	r3, #1
 800108a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800108c:	2301      	movs	r3, #1
 800108e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001094:	2360      	movs	r3, #96	@ 0x60
 8001096:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001098:	2302      	movs	r3, #2
 800109a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800109c:	2301      	movs	r3, #1
 800109e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80010a4:	2328      	movs	r3, #40	@ 0x28
 80010a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010a8:	2307      	movs	r3, #7
 80010aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 f891 	bl	80041e0 <HAL_RCC_OscConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80010c4:	f000 fbda 	bl	800187c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c8:	230f      	movs	r3, #15
 80010ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010cc:	2303      	movs	r3, #3
 80010ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	2104      	movs	r1, #4
 80010e0:	4618      	mov	r0, r3
 80010e2:	f003 fc59 	bl	8004998 <HAL_RCC_ClockConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80010ec:	f000 fbc6 	bl	800187c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80010f0:	f004 f960 	bl	80053b4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80010f4:	bf00      	nop
 80010f6:	3758      	adds	r7, #88	@ 0x58
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40021000 	.word	0x40021000

08001100 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001104:	4b18      	ldr	r3, [pc, #96]	@ (8001168 <MX_DFSDM1_Init+0x68>)
 8001106:	4a19      	ldr	r2, [pc, #100]	@ (800116c <MX_DFSDM1_Init+0x6c>)
 8001108:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800110a:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <MX_DFSDM1_Init+0x68>)
 800110c:	2201      	movs	r2, #1
 800110e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001110:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <MX_DFSDM1_Init+0x68>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001116:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <MX_DFSDM1_Init+0x68>)
 8001118:	2202      	movs	r2, #2
 800111a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800111c:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <MX_DFSDM1_Init+0x68>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <MX_DFSDM1_Init+0x68>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001128:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <MX_DFSDM1_Init+0x68>)
 800112a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800112e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001130:	4b0d      	ldr	r3, [pc, #52]	@ (8001168 <MX_DFSDM1_Init+0x68>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001136:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <MX_DFSDM1_Init+0x68>)
 8001138:	2204      	movs	r2, #4
 800113a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800113c:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <MX_DFSDM1_Init+0x68>)
 800113e:	2200      	movs	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001142:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <MX_DFSDM1_Init+0x68>)
 8001144:	2201      	movs	r2, #1
 8001146:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001148:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <MX_DFSDM1_Init+0x68>)
 800114a:	2200      	movs	r2, #0
 800114c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <MX_DFSDM1_Init+0x68>)
 8001150:	2200      	movs	r2, #0
 8001152:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	@ (8001168 <MX_DFSDM1_Init+0x68>)
 8001156:	f001 fb99 	bl	800288c <HAL_DFSDM_ChannelInit>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001160:	f000 fb8c 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000c7c 	.word	0x20000c7c
 800116c:	40016020 	.word	0x40016020

08001170 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001174:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <MX_I2C2_Init+0x74>)
 8001176:	4a1c      	ldr	r2, [pc, #112]	@ (80011e8 <MX_I2C2_Init+0x78>)
 8001178:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800117a:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <MX_I2C2_Init+0x74>)
 800117c:	f640 6214 	movw	r2, #3604	@ 0xe14
 8001180:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001182:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <MX_I2C2_Init+0x74>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001188:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <MX_I2C2_Init+0x74>)
 800118a:	2201      	movs	r2, #1
 800118c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800118e:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <MX_I2C2_Init+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001194:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <MX_I2C2_Init+0x74>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800119a:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <MX_I2C2_Init+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a0:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <MX_I2C2_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <MX_I2C2_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011ac:	480d      	ldr	r0, [pc, #52]	@ (80011e4 <MX_I2C2_Init+0x74>)
 80011ae:	f001 ff52 	bl	8003056 <HAL_I2C_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011b8:	f000 fb60 	bl	800187c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011bc:	2100      	movs	r1, #0
 80011be:	4809      	ldr	r0, [pc, #36]	@ (80011e4 <MX_I2C2_Init+0x74>)
 80011c0:	f002 fd04 	bl	8003bcc <HAL_I2CEx_ConfigAnalogFilter>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80011ca:	f000 fb57 	bl	800187c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011ce:	2100      	movs	r1, #0
 80011d0:	4804      	ldr	r0, [pc, #16]	@ (80011e4 <MX_I2C2_Init+0x74>)
 80011d2:	f002 fd46 	bl	8003c62 <HAL_I2CEx_ConfigDigitalFilter>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80011dc:	f000 fb4e 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000cb4 	.word	0x20000cb4
 80011e8:	40005800 	.word	0x40005800

080011ec <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <MX_QUADSPI_Init+0x44>)
 80011f2:	4a10      	ldr	r2, [pc, #64]	@ (8001234 <MX_QUADSPI_Init+0x48>)
 80011f4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <MX_QUADSPI_Init+0x44>)
 80011f8:	2202      	movs	r2, #2
 80011fa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <MX_QUADSPI_Init+0x44>)
 80011fe:	2204      	movs	r2, #4
 8001200:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <MX_QUADSPI_Init+0x44>)
 8001204:	2210      	movs	r2, #16
 8001206:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001208:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <MX_QUADSPI_Init+0x44>)
 800120a:	2217      	movs	r2, #23
 800120c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800120e:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <MX_QUADSPI_Init+0x44>)
 8001210:	2200      	movs	r2, #0
 8001212:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <MX_QUADSPI_Init+0x44>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	@ (8001230 <MX_QUADSPI_Init+0x44>)
 800121c:	f002 ff24 	bl	8004068 <HAL_QSPI_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001226:	f000 fb29 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000d08 	.word	0x20000d08
 8001234:	a0001000 	.word	0xa0001000

08001238 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800123c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <MX_SPI3_Init+0x74>)
 800123e:	4a1c      	ldr	r2, [pc, #112]	@ (80012b0 <MX_SPI3_Init+0x78>)
 8001240:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001242:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <MX_SPI3_Init+0x74>)
 8001244:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001248:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800124a:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <MX_SPI3_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001250:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <MX_SPI3_Init+0x74>)
 8001252:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001256:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <MX_SPI3_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800125e:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <MX_SPI3_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001264:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <MX_SPI3_Init+0x74>)
 8001266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800126a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800126c:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <MX_SPI3_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <MX_SPI3_Init+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001278:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <MX_SPI3_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800127e:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <MX_SPI3_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001284:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <MX_SPI3_Init+0x74>)
 8001286:	2207      	movs	r2, #7
 8001288:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800128a:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <MX_SPI3_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <MX_SPI3_Init+0x74>)
 8001292:	2208      	movs	r2, #8
 8001294:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	@ (80012ac <MX_SPI3_Init+0x74>)
 8001298:	f004 fa6e 	bl	8005778 <HAL_SPI_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80012a2:	f000 faeb 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000d4c 	.word	0x20000d4c
 80012b0:	40003c00 	.word	0x40003c00

080012b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012b8:	4b14      	ldr	r3, [pc, #80]	@ (800130c <MX_USART1_UART_Init+0x58>)
 80012ba:	4a15      	ldr	r2, [pc, #84]	@ (8001310 <MX_USART1_UART_Init+0x5c>)
 80012bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012be:	4b13      	ldr	r3, [pc, #76]	@ (800130c <MX_USART1_UART_Init+0x58>)
 80012c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <MX_USART1_UART_Init+0x58>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <MX_USART1_UART_Init+0x58>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <MX_USART1_UART_Init+0x58>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <MX_USART1_UART_Init+0x58>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <MX_USART1_UART_Init+0x58>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	4b09      	ldr	r3, [pc, #36]	@ (800130c <MX_USART1_UART_Init+0x58>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	@ (800130c <MX_USART1_UART_Init+0x58>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <MX_USART1_UART_Init+0x58>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	@ (800130c <MX_USART1_UART_Init+0x58>)
 80012f8:	f004 fae1 	bl	80058be <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001302:	f000 fabb 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000db0 	.word	0x20000db0
 8001310:	40013800 	.word	0x40013800

08001314 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001318:	4b14      	ldr	r3, [pc, #80]	@ (800136c <MX_USART3_UART_Init+0x58>)
 800131a:	4a15      	ldr	r2, [pc, #84]	@ (8001370 <MX_USART3_UART_Init+0x5c>)
 800131c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800131e:	4b13      	ldr	r3, [pc, #76]	@ (800136c <MX_USART3_UART_Init+0x58>)
 8001320:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001324:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b11      	ldr	r3, [pc, #68]	@ (800136c <MX_USART3_UART_Init+0x58>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <MX_USART3_UART_Init+0x58>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001332:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <MX_USART3_UART_Init+0x58>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <MX_USART3_UART_Init+0x58>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <MX_USART3_UART_Init+0x58>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b09      	ldr	r3, [pc, #36]	@ (800136c <MX_USART3_UART_Init+0x58>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800134a:	4b08      	ldr	r3, [pc, #32]	@ (800136c <MX_USART3_UART_Init+0x58>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <MX_USART3_UART_Init+0x58>)
 8001352:	2200      	movs	r2, #0
 8001354:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <MX_USART3_UART_Init+0x58>)
 8001358:	f004 fab1 	bl	80058be <HAL_UART_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001362:	f000 fa8b 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000e38 	.word	0x20000e38
 8001370:	40004800 	.word	0x40004800

08001374 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001378:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800137a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800137e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001382:	2206      	movs	r2, #6
 8001384:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001388:	2202      	movs	r2, #2
 800138a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800138e:	2202      	movs	r2, #2
 8001390:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001394:	2200      	movs	r2, #0
 8001396:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800139a:	2200      	movs	r2, #0
 800139c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80013a4:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b8:	f002 fc9f 	bl	8003cfa <HAL_PCD_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80013c2:	f000 fa5b 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000ec0 	.word	0x20000ec0

080013d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	@ 0x28
 80013d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013e6:	4bbd      	ldr	r3, [pc, #756]	@ (80016dc <MX_GPIO_Init+0x30c>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	4abc      	ldr	r2, [pc, #752]	@ (80016dc <MX_GPIO_Init+0x30c>)
 80013ec:	f043 0310 	orr.w	r3, r3, #16
 80013f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f2:	4bba      	ldr	r3, [pc, #744]	@ (80016dc <MX_GPIO_Init+0x30c>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	4bb7      	ldr	r3, [pc, #732]	@ (80016dc <MX_GPIO_Init+0x30c>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	4ab6      	ldr	r2, [pc, #728]	@ (80016dc <MX_GPIO_Init+0x30c>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140a:	4bb4      	ldr	r3, [pc, #720]	@ (80016dc <MX_GPIO_Init+0x30c>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4bb1      	ldr	r3, [pc, #708]	@ (80016dc <MX_GPIO_Init+0x30c>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	4ab0      	ldr	r2, [pc, #704]	@ (80016dc <MX_GPIO_Init+0x30c>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001422:	4bae      	ldr	r3, [pc, #696]	@ (80016dc <MX_GPIO_Init+0x30c>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	4bab      	ldr	r3, [pc, #684]	@ (80016dc <MX_GPIO_Init+0x30c>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001432:	4aaa      	ldr	r2, [pc, #680]	@ (80016dc <MX_GPIO_Init+0x30c>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143a:	4ba8      	ldr	r3, [pc, #672]	@ (80016dc <MX_GPIO_Init+0x30c>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001446:	4ba5      	ldr	r3, [pc, #660]	@ (80016dc <MX_GPIO_Init+0x30c>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	4aa4      	ldr	r2, [pc, #656]	@ (80016dc <MX_GPIO_Init+0x30c>)
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001452:	4ba2      	ldr	r3, [pc, #648]	@ (80016dc <MX_GPIO_Init+0x30c>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001464:	489e      	ldr	r0, [pc, #632]	@ (80016e0 <MX_GPIO_Init+0x310>)
 8001466:	f001 fdbb 	bl	8002fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	f248 1104 	movw	r1, #33028	@ 0x8104
 8001470:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001474:	f001 fdb4 	bl	8002fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001478:	2200      	movs	r2, #0
 800147a:	f24f 0114 	movw	r1, #61460	@ 0xf014
 800147e:	4899      	ldr	r0, [pc, #612]	@ (80016e4 <MX_GPIO_Init+0x314>)
 8001480:	f001 fdae 	bl	8002fe0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001484:	2200      	movs	r2, #0
 8001486:	f241 0181 	movw	r1, #4225	@ 0x1081
 800148a:	4897      	ldr	r0, [pc, #604]	@ (80016e8 <MX_GPIO_Init+0x318>)
 800148c:	f001 fda8 	bl	8002fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001490:	2201      	movs	r2, #1
 8001492:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001496:	4894      	ldr	r0, [pc, #592]	@ (80016e8 <MX_GPIO_Init+0x318>)
 8001498:	f001 fda2 	bl	8002fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80014a2:	4892      	ldr	r0, [pc, #584]	@ (80016ec <MX_GPIO_Init+0x31c>)
 80014a4:	f001 fd9c 	bl	8002fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	2120      	movs	r1, #32
 80014ac:	488d      	ldr	r0, [pc, #564]	@ (80016e4 <MX_GPIO_Init+0x314>)
 80014ae:	f001 fd97 	bl	8002fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80014b2:	2201      	movs	r2, #1
 80014b4:	2101      	movs	r1, #1
 80014b6:	488a      	ldr	r0, [pc, #552]	@ (80016e0 <MX_GPIO_Init+0x310>)
 80014b8:	f001 fd92 	bl	8002fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80014bc:	f240 1315 	movw	r3, #277	@ 0x115
 80014c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4882      	ldr	r0, [pc, #520]	@ (80016e0 <MX_GPIO_Init+0x310>)
 80014d6:	f001 fae5 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80014da:	236a      	movs	r3, #106	@ 0x6a
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	487c      	ldr	r0, [pc, #496]	@ (80016e0 <MX_GPIO_Init+0x310>)
 80014f0:	f001 fad8 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80014f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014fa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4878      	ldr	r0, [pc, #480]	@ (80016ec <MX_GPIO_Init+0x31c>)
 800150c:	f001 faca 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001510:	233f      	movs	r3, #63	@ 0x3f
 8001512:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001514:	230b      	movs	r3, #11
 8001516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	4872      	ldr	r0, [pc, #456]	@ (80016ec <MX_GPIO_Init+0x31c>)
 8001524:	f001 fabe 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001528:	2303      	movs	r3, #3
 800152a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001538:	2308      	movs	r3, #8
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001546:	f001 faad 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800154a:	f248 1304 	movw	r3, #33028	@ 0x8104
 800154e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	2301      	movs	r3, #1
 8001552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4619      	mov	r1, r3
 8001562:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001566:	f001 fa9d 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800156a:	2308      	movs	r3, #8
 800156c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800157a:	2301      	movs	r3, #1
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001588:	f001 fa8c 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800158c:	2310      	movs	r3, #16
 800158e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001590:	230b      	movs	r3, #11
 8001592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a2:	f001 fa7f 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80015a6:	23e0      	movs	r3, #224	@ 0xe0
 80015a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015b6:	2305      	movs	r3, #5
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c4:	f001 fa6e 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80015c8:	2301      	movs	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	4841      	ldr	r0, [pc, #260]	@ (80016e4 <MX_GPIO_Init+0x314>)
 80015de:	f001 fa61 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80015e2:	2302      	movs	r3, #2
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015e6:	230b      	movs	r3, #11
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	483b      	ldr	r0, [pc, #236]	@ (80016e4 <MX_GPIO_Init+0x314>)
 80015f6:	f001 fa55 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80015fa:	f24f 0334 	movw	r3, #61492	@ 0xf034
 80015fe:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001600:	2301      	movs	r3, #1
 8001602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4834      	ldr	r0, [pc, #208]	@ (80016e4 <MX_GPIO_Init+0x314>)
 8001614:	f001 fa46 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001618:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 800161c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800161e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	482e      	ldr	r0, [pc, #184]	@ (80016e8 <MX_GPIO_Init+0x318>)
 8001630:	f001 fa38 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001634:	f243 0381 	movw	r3, #12417	@ 0x3081
 8001638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163a:	2301      	movs	r3, #1
 800163c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4826      	ldr	r0, [pc, #152]	@ (80016e8 <MX_GPIO_Init+0x318>)
 800164e:	f001 fa29 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001652:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001658:	2301      	movs	r3, #1
 800165a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	4820      	ldr	r0, [pc, #128]	@ (80016ec <MX_GPIO_Init+0x31c>)
 800166c:	f001 fa1a 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001670:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001676:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800167a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	4819      	ldr	r0, [pc, #100]	@ (80016ec <MX_GPIO_Init+0x31c>)
 8001688:	f001 fa0c 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800168c:	2302      	movs	r3, #2
 800168e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800169c:	2305      	movs	r3, #5
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4619      	mov	r1, r3
 80016a6:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <MX_GPIO_Init+0x318>)
 80016a8:	f001 f9fc 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80016ac:	2378      	movs	r3, #120	@ 0x78
 80016ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b8:	2303      	movs	r3, #3
 80016ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016bc:	2307      	movs	r3, #7
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	4808      	ldr	r0, [pc, #32]	@ (80016e8 <MX_GPIO_Init+0x318>)
 80016c8:	f001 f9ec 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80016cc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d2:	2312      	movs	r3, #18
 80016d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e00a      	b.n	80016f0 <MX_GPIO_Init+0x320>
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	48001000 	.word	0x48001000
 80016e4:	48000400 	.word	0x48000400
 80016e8:	48000c00 	.word	0x48000c00
 80016ec:	48000800 	.word	0x48000800
 80016f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016f6:	2304      	movs	r3, #4
 80016f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	480b      	ldr	r0, [pc, #44]	@ (8001730 <MX_GPIO_Init+0x360>)
 8001702:	f001 f9cf 	bl	8002aa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	2017      	movs	r0, #23
 800170c:	f001 f887 	bl	800281e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001710:	2017      	movs	r0, #23
 8001712:	f001 f8a0 	bl	8002856 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2028      	movs	r0, #40	@ 0x28
 800171c:	f001 f87f 	bl	800281e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001720:	2028      	movs	r0, #40	@ 0x28
 8001722:	f001 f898 	bl	8002856 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	@ 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	48000400 	.word	0x48000400

08001734 <AI_Init>:

/* USER CODE BEGIN 4 */

static void AI_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create a local array with the addresses of the activations buffers */
  const ai_handle act_addr[] = { activations };
 800173a:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <AI_Init+0x64>)
 800173c:	603b      	str	r3, [r7, #0]
  /* Create an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 800173e:	463b      	mov	r3, r7
 8001740:	2200      	movs	r2, #0
 8001742:	4619      	mov	r1, r3
 8001744:	4815      	ldr	r0, [pc, #84]	@ (800179c <AI_Init+0x68>)
 8001746:	f005 fa95 	bl	8006c74 <ai_network_create_and_init>
 800174a:	4603      	mov	r3, r0
 800174c:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {
 800174e:	793b      	ldrb	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00a      	beq.n	800176a <AI_Init+0x36>
    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 8001754:	793b      	ldrb	r3, [r7, #4]
 8001756:	4619      	mov	r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800175e:	461a      	mov	r2, r3
 8001760:	480f      	ldr	r0, [pc, #60]	@ (80017a0 <AI_Init+0x6c>)
 8001762:	f008 faef 	bl	8009d44 <iprintf>
    Error_Handler();
 8001766:	f000 f889 	bl	800187c <Error_Handler>
  }
  ai_input = ai_network_inputs_get(network, NULL);
 800176a:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <AI_Init+0x68>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f005 fafd 	bl	8006d70 <ai_network_inputs_get>
 8001776:	4603      	mov	r3, r0
 8001778:	4a0a      	ldr	r2, [pc, #40]	@ (80017a4 <AI_Init+0x70>)
 800177a:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 800177c:	4b07      	ldr	r3, [pc, #28]	@ (800179c <AI_Init+0x68>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f005 fb0e 	bl	8006da4 <ai_network_outputs_get>
 8001788:	4603      	mov	r3, r0
 800178a:	4a07      	ldr	r2, [pc, #28]	@ (80017a8 <AI_Init+0x74>)
 800178c:	6013      	str	r3, [r2, #0]
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200014ec 	.word	0x200014ec
 800179c:	200013a4 	.word	0x200013a4
 80017a0:	0800c278 	.word	0x0800c278
 80017a4:	20001bcc 	.word	0x20001bcc
 80017a8:	20001bd0 	.word	0x20001bd0

080017ac <AI_Run>:

static void AI_Run(float *pIn, float *pOut)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  ai_i32 batch;
  ai_error err;

  /* Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <AI_Run+0x60>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 80017be:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <AI_Run+0x64>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	605a      	str	r2, [r3, #4]

  batch = ai_network_run(network, ai_input, ai_output);
 80017c6:	4b13      	ldr	r3, [pc, #76]	@ (8001814 <AI_Run+0x68>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a10      	ldr	r2, [pc, #64]	@ (800180c <AI_Run+0x60>)
 80017cc:	6811      	ldr	r1, [r2, #0]
 80017ce:	4a10      	ldr	r2, [pc, #64]	@ (8001810 <AI_Run+0x64>)
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f005 fb3c 	bl	8006e50 <ai_network_run>
 80017d8:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d011      	beq.n	8001804 <AI_Run+0x58>
    err = ai_network_get_error(network);
 80017e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <AI_Run+0x68>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f005 fa23 	bl	8006c30 <ai_network_get_error>
 80017ea:	4603      	mov	r3, r0
 80017ec:	60bb      	str	r3, [r7, #8]
    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 80017ee:	7a3b      	ldrb	r3, [r7, #8]
 80017f0:	4619      	mov	r1, r3
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80017f8:	461a      	mov	r2, r3
 80017fa:	4807      	ldr	r0, [pc, #28]	@ (8001818 <AI_Run+0x6c>)
 80017fc:	f008 faa2 	bl	8009d44 <iprintf>
    Error_Handler();
 8001800:	f000 f83c 	bl	800187c <Error_Handler>
  }
}
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20001bcc 	.word	0x20001bcc
 8001810:	20001bd0 	.word	0x20001bd0
 8001814:	200013a4 	.word	0x200013a4
 8001818:	0800c2a4 	.word	0x0800c2a4

0800181c <argmax>:

static uint32_t argmax(const float * values, uint32_t len)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  float max_value = values[0];
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	617b      	str	r3, [r7, #20]
  uint32_t max_index = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 8001830:	2301      	movs	r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	e017      	b.n	8001866 <argmax+0x4a>
    if (values[i] > max_value) {
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	ed97 7a05 	vldr	s14, [r7, #20]
 8001846:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800184a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184e:	d507      	bpl.n	8001860 <argmax+0x44>
      max_value = values[i];
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	617b      	str	r3, [r7, #20]
      max_index = i;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3301      	adds	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d3e3      	bcc.n	8001836 <argmax+0x1a>
    }
  }
  return max_index;
 800186e:	693b      	ldr	r3, [r7, #16]
}
 8001870:	4618      	mov	r0, r3
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001880:	b672      	cpsid	i
}
 8001882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <Error_Handler+0x8>

08001888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <HAL_MspInit+0x44>)
 8001890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001892:	4a0e      	ldr	r2, [pc, #56]	@ (80018cc <HAL_MspInit+0x44>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6613      	str	r3, [r2, #96]	@ 0x60
 800189a:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <HAL_MspInit+0x44>)
 800189c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <HAL_MspInit+0x44>)
 80018a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018aa:	4a08      	ldr	r2, [pc, #32]	@ (80018cc <HAL_MspInit+0x44>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <HAL_MspInit+0x44>)
 80018b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000

080018d0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b0ac      	sub	sp, #176	@ 0xb0
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2288      	movs	r2, #136	@ 0x88
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f008 fba3 	bl	800a03c <memset>
  if(DFSDM1_Init == 0)
 80018f6:	4b25      	ldr	r3, [pc, #148]	@ (800198c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d142      	bne.n	8001984 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80018fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001902:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001904:	2300      	movs	r3, #0
 8001906:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4618      	mov	r0, r3
 8001910:	f003 fa66 	bl	8004de0 <HAL_RCCEx_PeriphCLKConfig>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800191a:	f7ff ffaf 	bl	800187c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800191e:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001922:	4a1b      	ldr	r2, [pc, #108]	@ (8001990 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001924:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001928:	6613      	str	r3, [r2, #96]	@ 0x60
 800192a:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800192c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800192e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001936:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193a:	4a15      	ldr	r2, [pc, #84]	@ (8001990 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800193c:	f043 0310 	orr.w	r3, r3, #16
 8001940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001942:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001946:	f003 0310 	and.w	r3, r3, #16
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800194e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001952:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001968:	2306      	movs	r3, #6
 800196a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800196e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001972:	4619      	mov	r1, r3
 8001974:	4807      	ldr	r0, [pc, #28]	@ (8001994 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001976:	f001 f895 	bl	8002aa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800197a:	4b04      	ldr	r3, [pc, #16]	@ (800198c <HAL_DFSDM_ChannelMspInit+0xbc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	3301      	adds	r3, #1
 8001980:	4a02      	ldr	r2, [pc, #8]	@ (800198c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001982:	6013      	str	r3, [r2, #0]
  }

}
 8001984:	bf00      	nop
 8001986:	37b0      	adds	r7, #176	@ 0xb0
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20001bdc 	.word	0x20001bdc
 8001990:	40021000 	.word	0x40021000
 8001994:	48001000 	.word	0x48001000

08001998 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b0ac      	sub	sp, #176	@ 0xb0
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	2288      	movs	r2, #136	@ 0x88
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f008 fb3f 	bl	800a03c <memset>
  if(hi2c->Instance==I2C2)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a21      	ldr	r2, [pc, #132]	@ (8001a48 <HAL_I2C_MspInit+0xb0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d13b      	bne.n	8001a40 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019c8:	2380      	movs	r3, #128	@ 0x80
 80019ca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4618      	mov	r0, r3
 80019d6:	f003 fa03 	bl	8004de0 <HAL_RCCEx_PeriphCLKConfig>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019e0:	f7ff ff4c 	bl	800187c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e4:	4b19      	ldr	r3, [pc, #100]	@ (8001a4c <HAL_I2C_MspInit+0xb4>)
 80019e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e8:	4a18      	ldr	r2, [pc, #96]	@ (8001a4c <HAL_I2C_MspInit+0xb4>)
 80019ea:	f043 0302 	orr.w	r3, r3, #2
 80019ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f0:	4b16      	ldr	r3, [pc, #88]	@ (8001a4c <HAL_I2C_MspInit+0xb4>)
 80019f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80019fc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a04:	2312      	movs	r3, #18
 8001a06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a10:	2303      	movs	r3, #3
 8001a12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a16:	2304      	movs	r3, #4
 8001a18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a20:	4619      	mov	r1, r3
 8001a22:	480b      	ldr	r0, [pc, #44]	@ (8001a50 <HAL_I2C_MspInit+0xb8>)
 8001a24:	f001 f83e 	bl	8002aa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a28:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <HAL_I2C_MspInit+0xb4>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2c:	4a07      	ldr	r2, [pc, #28]	@ (8001a4c <HAL_I2C_MspInit+0xb4>)
 8001a2e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a32:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a34:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <HAL_I2C_MspInit+0xb4>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001a40:	bf00      	nop
 8001a42:	37b0      	adds	r7, #176	@ 0xb0
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40005800 	.word	0x40005800
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	48000400 	.word	0x48000400

08001a54 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0b      	ldr	r2, [pc, #44]	@ (8001a90 <HAL_I2C_MspDeInit+0x3c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d10f      	bne.n	8001a86 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001a66:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <HAL_I2C_MspDeInit+0x40>)
 8001a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <HAL_I2C_MspDeInit+0x40>)
 8001a6c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001a70:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001a72:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a76:	4808      	ldr	r0, [pc, #32]	@ (8001a98 <HAL_I2C_MspDeInit+0x44>)
 8001a78:	f001 f9be 	bl	8002df8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001a7c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a80:	4805      	ldr	r0, [pc, #20]	@ (8001a98 <HAL_I2C_MspDeInit+0x44>)
 8001a82:	f001 f9b9 	bl	8002df8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40005800 	.word	0x40005800
 8001a94:	40021000 	.word	0x40021000
 8001a98:	48000400 	.word	0x48000400

08001a9c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	@ 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a17      	ldr	r2, [pc, #92]	@ (8001b18 <HAL_QSPI_MspInit+0x7c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d128      	bne.n	8001b10 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001abe:	4b17      	ldr	r3, [pc, #92]	@ (8001b1c <HAL_QSPI_MspInit+0x80>)
 8001ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ac2:	4a16      	ldr	r2, [pc, #88]	@ (8001b1c <HAL_QSPI_MspInit+0x80>)
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ac8:	6513      	str	r3, [r2, #80]	@ 0x50
 8001aca:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <HAL_QSPI_MspInit+0x80>)
 8001acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ad6:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <HAL_QSPI_MspInit+0x80>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ada:	4a10      	ldr	r2, [pc, #64]	@ (8001b1c <HAL_QSPI_MspInit+0x80>)
 8001adc:	f043 0310 	orr.w	r3, r3, #16
 8001ae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <HAL_QSPI_MspInit+0x80>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001aee:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001af2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afc:	2303      	movs	r3, #3
 8001afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b00:	230a      	movs	r3, #10
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4805      	ldr	r0, [pc, #20]	@ (8001b20 <HAL_QSPI_MspInit+0x84>)
 8001b0c:	f000 ffca 	bl	8002aa4 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001b10:	bf00      	nop
 8001b12:	3728      	adds	r7, #40	@ 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	a0001000 	.word	0xa0001000
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	48001000 	.word	0x48001000

08001b24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	@ 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a17      	ldr	r2, [pc, #92]	@ (8001ba0 <HAL_SPI_MspInit+0x7c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d128      	bne.n	8001b98 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b46:	4b17      	ldr	r3, [pc, #92]	@ (8001ba4 <HAL_SPI_MspInit+0x80>)
 8001b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4a:	4a16      	ldr	r2, [pc, #88]	@ (8001ba4 <HAL_SPI_MspInit+0x80>)
 8001b4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b50:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b52:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <HAL_SPI_MspInit+0x80>)
 8001b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <HAL_SPI_MspInit+0x80>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b62:	4a10      	ldr	r2, [pc, #64]	@ (8001ba4 <HAL_SPI_MspInit+0x80>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba4 <HAL_SPI_MspInit+0x80>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001b76:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b84:	2303      	movs	r3, #3
 8001b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b88:	2306      	movs	r3, #6
 8001b8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	4805      	ldr	r0, [pc, #20]	@ (8001ba8 <HAL_SPI_MspInit+0x84>)
 8001b94:	f000 ff86 	bl	8002aa4 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001b98:	bf00      	nop
 8001b9a:	3728      	adds	r7, #40	@ 0x28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40003c00 	.word	0x40003c00
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	48000800 	.word	0x48000800

08001bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b0ae      	sub	sp, #184	@ 0xb8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	2288      	movs	r2, #136	@ 0x88
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f008 fa35 	bl	800a03c <memset>
  if(huart->Instance==USART1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a42      	ldr	r2, [pc, #264]	@ (8001ce0 <HAL_UART_MspInit+0x134>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d13b      	bne.n	8001c54 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001be0:	2300      	movs	r3, #0
 8001be2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 f8f9 	bl	8004de0 <HAL_RCCEx_PeriphCLKConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bf4:	f7ff fe42 	bl	800187c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bf8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce4 <HAL_UART_MspInit+0x138>)
 8001bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bfc:	4a39      	ldr	r2, [pc, #228]	@ (8001ce4 <HAL_UART_MspInit+0x138>)
 8001bfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c02:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c04:	4b37      	ldr	r3, [pc, #220]	@ (8001ce4 <HAL_UART_MspInit+0x138>)
 8001c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c0c:	61bb      	str	r3, [r7, #24]
 8001c0e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c10:	4b34      	ldr	r3, [pc, #208]	@ (8001ce4 <HAL_UART_MspInit+0x138>)
 8001c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c14:	4a33      	ldr	r2, [pc, #204]	@ (8001ce4 <HAL_UART_MspInit+0x138>)
 8001c16:	f043 0302 	orr.w	r3, r3, #2
 8001c1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c1c:	4b31      	ldr	r3, [pc, #196]	@ (8001ce4 <HAL_UART_MspInit+0x138>)
 8001c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001c28:	23c0      	movs	r3, #192	@ 0xc0
 8001c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c40:	2307      	movs	r3, #7
 8001c42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c46:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4826      	ldr	r0, [pc, #152]	@ (8001ce8 <HAL_UART_MspInit+0x13c>)
 8001c4e:	f000 ff29 	bl	8002aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c52:	e040      	b.n	8001cd6 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a24      	ldr	r2, [pc, #144]	@ (8001cec <HAL_UART_MspInit+0x140>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d13b      	bne.n	8001cd6 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c5e:	2304      	movs	r3, #4
 8001c60:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c62:	2300      	movs	r3, #0
 8001c64:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c66:	f107 031c 	add.w	r3, r7, #28
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 f8b8 	bl	8004de0 <HAL_RCCEx_PeriphCLKConfig>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001c76:	f7ff fe01 	bl	800187c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce4 <HAL_UART_MspInit+0x138>)
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c7e:	4a19      	ldr	r2, [pc, #100]	@ (8001ce4 <HAL_UART_MspInit+0x138>)
 8001c80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c84:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c86:	4b17      	ldr	r3, [pc, #92]	@ (8001ce4 <HAL_UART_MspInit+0x138>)
 8001c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c92:	4b14      	ldr	r3, [pc, #80]	@ (8001ce4 <HAL_UART_MspInit+0x138>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c96:	4a13      	ldr	r2, [pc, #76]	@ (8001ce4 <HAL_UART_MspInit+0x138>)
 8001c98:	f043 0308 	orr.w	r3, r3, #8
 8001c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <HAL_UART_MspInit+0x138>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001caa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cc4:	2307      	movs	r3, #7
 8001cc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cca:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4807      	ldr	r0, [pc, #28]	@ (8001cf0 <HAL_UART_MspInit+0x144>)
 8001cd2:	f000 fee7 	bl	8002aa4 <HAL_GPIO_Init>
}
 8001cd6:	bf00      	nop
 8001cd8:	37b8      	adds	r7, #184	@ 0xb8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40013800 	.word	0x40013800
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	48000400 	.word	0x48000400
 8001cec:	40004800 	.word	0x40004800
 8001cf0:	48000c00 	.word	0x48000c00

08001cf4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b0ac      	sub	sp, #176	@ 0xb0
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	2288      	movs	r2, #136	@ 0x88
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f008 f991 	bl	800a03c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d22:	d17c      	bne.n	8001e1e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001d24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d28:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001d2a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001d2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001d32:	2301      	movs	r3, #1
 8001d34:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001d36:	2301      	movs	r3, #1
 8001d38:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001d3a:	2318      	movs	r3, #24
 8001d3c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001d3e:	2307      	movs	r3, #7
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001d42:	2302      	movs	r3, #2
 8001d44:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001d46:	2302      	movs	r3, #2
 8001d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001d4a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d4e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	4618      	mov	r0, r3
 8001d56:	f003 f843 	bl	8004de0 <HAL_RCCEx_PeriphCLKConfig>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001d60:	f7ff fd8c 	bl	800187c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d64:	4b30      	ldr	r3, [pc, #192]	@ (8001e28 <HAL_PCD_MspInit+0x134>)
 8001d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d68:	4a2f      	ldr	r2, [pc, #188]	@ (8001e28 <HAL_PCD_MspInit+0x134>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d70:	4b2d      	ldr	r3, [pc, #180]	@ (8001e28 <HAL_PCD_MspInit+0x134>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001d7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d90:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d94:	4619      	mov	r1, r3
 8001d96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d9a:	f000 fe83 	bl	8002aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001d9e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001da2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001db8:	230a      	movs	r3, #10
 8001dba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dc8:	f000 fe6c 	bl	8002aa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001dcc:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <HAL_PCD_MspInit+0x134>)
 8001dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd0:	4a15      	ldr	r2, [pc, #84]	@ (8001e28 <HAL_PCD_MspInit+0x134>)
 8001dd2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd8:	4b13      	ldr	r3, [pc, #76]	@ (8001e28 <HAL_PCD_MspInit+0x134>)
 8001dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ddc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001de4:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <HAL_PCD_MspInit+0x134>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d114      	bne.n	8001e1a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df0:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <HAL_PCD_MspInit+0x134>)
 8001df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df4:	4a0c      	ldr	r2, [pc, #48]	@ (8001e28 <HAL_PCD_MspInit+0x134>)
 8001df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <HAL_PCD_MspInit+0x134>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001e08:	f002 f91e 	bl	8004048 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0c:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <HAL_PCD_MspInit+0x134>)
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e10:	4a05      	ldr	r2, [pc, #20]	@ (8001e28 <HAL_PCD_MspInit+0x134>)
 8001e12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e16:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001e18:	e001      	b.n	8001e1e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001e1a:	f002 f915 	bl	8004048 <HAL_PWREx_EnableVddUSB>
}
 8001e1e:	bf00      	nop
 8001e20:	37b0      	adds	r7, #176	@ 0xb0
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000

08001e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <NMI_Handler+0x4>

08001e34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <HardFault_Handler+0x4>

08001e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <MemManage_Handler+0x4>

08001e44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <BusFault_Handler+0x4>

08001e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <UsageFault_Handler+0x4>

08001e54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e82:	f000 fbad 	bl	80025e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001e8e:	2020      	movs	r0, #32
 8001e90:	f001 f8be 	bl	8003010 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001e94:	2040      	movs	r0, #64	@ 0x40
 8001e96:	f001 f8bb 	bl	8003010 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001e9a:	2080      	movs	r0, #128	@ 0x80
 8001e9c:	f001 f8b8 	bl	8003010 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001ea0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001ea4:	f001 f8b4 	bl	8003010 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001eb0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001eb4:	f001 f8ac 	bl	8003010 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001eb8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001ebc:	f001 f8a8 	bl	8003010 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001ec0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ec4:	f001 f8a4 	bl	8003010 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001ec8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001ecc:	f001 f8a0 	bl	8003010 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001ed0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001ed4:	f001 f89c 	bl	8003010 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee4:	4a14      	ldr	r2, [pc, #80]	@ (8001f38 <_sbrk+0x5c>)
 8001ee6:	4b15      	ldr	r3, [pc, #84]	@ (8001f3c <_sbrk+0x60>)
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef0:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <_sbrk+0x64>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d102      	bne.n	8001efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <_sbrk+0x64>)
 8001efa:	4a12      	ldr	r2, [pc, #72]	@ (8001f44 <_sbrk+0x68>)
 8001efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001efe:	4b10      	ldr	r3, [pc, #64]	@ (8001f40 <_sbrk+0x64>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d207      	bcs.n	8001f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f0c:	f008 f8f8 	bl	800a100 <__errno>
 8001f10:	4603      	mov	r3, r0
 8001f12:	220c      	movs	r2, #12
 8001f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1a:	e009      	b.n	8001f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f1c:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <_sbrk+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f22:	4b07      	ldr	r3, [pc, #28]	@ (8001f40 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	4a05      	ldr	r2, [pc, #20]	@ (8001f40 <_sbrk+0x64>)
 8001f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20018000 	.word	0x20018000
 8001f3c:	00000800 	.word	0x00000800
 8001f40:	20001be0 	.word	0x20001be0
 8001f44:	20001e68 	.word	0x20001e68

08001f48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f4c:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <SystemInit+0x20>)
 8001f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f52:	4a05      	ldr	r2, [pc, #20]	@ (8001f68 <SystemInit+0x20>)
 8001f54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fa4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f70:	f7ff ffea 	bl	8001f48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f74:	480c      	ldr	r0, [pc, #48]	@ (8001fa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f76:	490d      	ldr	r1, [pc, #52]	@ (8001fac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f78:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb0 <LoopForever+0xe>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f7c:	e002      	b.n	8001f84 <LoopCopyDataInit>

08001f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f82:	3304      	adds	r3, #4

08001f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f88:	d3f9      	bcc.n	8001f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001fb8 <LoopForever+0x16>)
  movs r3, #0
 8001f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f90:	e001      	b.n	8001f96 <LoopFillZerobss>

08001f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f94:	3204      	adds	r2, #4

08001f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f98:	d3fb      	bcc.n	8001f92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f9a:	f008 f8b7 	bl	800a10c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f9e:	f7fe ff7b 	bl	8000e98 <main>

08001fa2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fa2:	e7fe      	b.n	8001fa2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fa4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fac:	20000c60 	.word	0x20000c60
  ldr r2, =_sidata
 8001fb0:	080183e8 	.word	0x080183e8
  ldr r2, =_sbss
 8001fb4:	20000c60 	.word	0x20000c60
  ldr r4, =_ebss
 8001fb8:	20001e68 	.word	0x20001e68

08001fbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fbc:	e7fe      	b.n	8001fbc <ADC1_2_IRQHandler>
	...

08001fc0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	@ 0x28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001fc8:	4b27      	ldr	r3, [pc, #156]	@ (8002068 <I2Cx_MspInit+0xa8>)
 8001fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fcc:	4a26      	ldr	r2, [pc, #152]	@ (8002068 <I2Cx_MspInit+0xa8>)
 8001fce:	f043 0302 	orr.w	r3, r3, #2
 8001fd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fd4:	4b24      	ldr	r3, [pc, #144]	@ (8002068 <I2Cx_MspInit+0xa8>)
 8001fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001fe0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001fe4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001fe6:	2312      	movs	r3, #18
 8001fe8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001fea:	2301      	movs	r3, #1
 8001fec:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ff6:	f107 0314 	add.w	r3, r7, #20
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	481b      	ldr	r0, [pc, #108]	@ (800206c <I2Cx_MspInit+0xac>)
 8001ffe:	f000 fd51 	bl	8002aa4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002002:	f107 0314 	add.w	r3, r7, #20
 8002006:	4619      	mov	r1, r3
 8002008:	4818      	ldr	r0, [pc, #96]	@ (800206c <I2Cx_MspInit+0xac>)
 800200a:	f000 fd4b 	bl	8002aa4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800200e:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <I2Cx_MspInit+0xa8>)
 8002010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002012:	4a15      	ldr	r2, [pc, #84]	@ (8002068 <I2Cx_MspInit+0xa8>)
 8002014:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002018:	6593      	str	r3, [r2, #88]	@ 0x58
 800201a:	4b13      	ldr	r3, [pc, #76]	@ (8002068 <I2Cx_MspInit+0xa8>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <I2Cx_MspInit+0xa8>)
 8002028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800202a:	4a0f      	ldr	r2, [pc, #60]	@ (8002068 <I2Cx_MspInit+0xa8>)
 800202c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002030:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002032:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <I2Cx_MspInit+0xa8>)
 8002034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002036:	4a0c      	ldr	r2, [pc, #48]	@ (8002068 <I2Cx_MspInit+0xa8>)
 8002038:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800203c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	210f      	movs	r1, #15
 8002042:	2021      	movs	r0, #33	@ 0x21
 8002044:	f000 fbeb 	bl	800281e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002048:	2021      	movs	r0, #33	@ 0x21
 800204a:	f000 fc04 	bl	8002856 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	210f      	movs	r1, #15
 8002052:	2022      	movs	r0, #34	@ 0x22
 8002054:	f000 fbe3 	bl	800281e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002058:	2022      	movs	r0, #34	@ 0x22
 800205a:	f000 fbfc 	bl	8002856 <HAL_NVIC_EnableIRQ>
}
 800205e:	bf00      	nop
 8002060:	3728      	adds	r7, #40	@ 0x28
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	48000400 	.word	0x48000400

08002070 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a12      	ldr	r2, [pc, #72]	@ (80020c4 <I2Cx_Init+0x54>)
 800207c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a11      	ldr	r2, [pc, #68]	@ (80020c8 <I2Cx_Init+0x58>)
 8002082:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ff89 	bl	8001fc0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 ffd1 	bl	8003056 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80020b4:	2100      	movs	r1, #0
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f001 fd88 	bl	8003bcc <HAL_I2CEx_ConfigAnalogFilter>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40005800 	.word	0x40005800
 80020c8:	00702681 	.word	0x00702681

080020cc <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	@ 0x28
 80020d0:	af04      	add	r7, sp, #16
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	4608      	mov	r0, r1
 80020d6:	4611      	mov	r1, r2
 80020d8:	461a      	mov	r2, r3
 80020da:	4603      	mov	r3, r0
 80020dc:	72fb      	strb	r3, [r7, #11]
 80020de:	460b      	mov	r3, r1
 80020e0:	813b      	strh	r3, [r7, #8]
 80020e2:	4613      	mov	r3, r2
 80020e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80020ea:	7afb      	ldrb	r3, [r7, #11]
 80020ec:	b299      	uxth	r1, r3
 80020ee:	88f8      	ldrh	r0, [r7, #6]
 80020f0:	893a      	ldrh	r2, [r7, #8]
 80020f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020f6:	9302      	str	r3, [sp, #8]
 80020f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	4603      	mov	r3, r0
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f001 f986 	bl	8003414 <HAL_I2C_Mem_Read>
 8002108:	4603      	mov	r3, r0
 800210a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800210c:	7dfb      	ldrb	r3, [r7, #23]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d004      	beq.n	800211c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002112:	7afb      	ldrb	r3, [r7, #11]
 8002114:	4619      	mov	r1, r3
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 f832 	bl	8002180 <I2Cx_Error>
  }
  return status;
 800211c:	7dfb      	ldrb	r3, [r7, #23]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b08a      	sub	sp, #40	@ 0x28
 800212a:	af04      	add	r7, sp, #16
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	4608      	mov	r0, r1
 8002130:	4611      	mov	r1, r2
 8002132:	461a      	mov	r2, r3
 8002134:	4603      	mov	r3, r0
 8002136:	72fb      	strb	r3, [r7, #11]
 8002138:	460b      	mov	r3, r1
 800213a:	813b      	strh	r3, [r7, #8]
 800213c:	4613      	mov	r3, r2
 800213e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002144:	7afb      	ldrb	r3, [r7, #11]
 8002146:	b299      	uxth	r1, r3
 8002148:	88f8      	ldrh	r0, [r7, #6]
 800214a:	893a      	ldrh	r2, [r7, #8]
 800214c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002150:	9302      	str	r3, [sp, #8]
 8002152:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	4603      	mov	r3, r0
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f001 f845 	bl	80031ec <HAL_I2C_Mem_Write>
 8002162:	4603      	mov	r3, r0
 8002164:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002166:	7dfb      	ldrb	r3, [r7, #23]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d004      	beq.n	8002176 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800216c:	7afb      	ldrb	r3, [r7, #11]
 800216e:	4619      	mov	r1, r3
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f805 	bl	8002180 <I2Cx_Error>
  }
  return status;
 8002176:	7dfb      	ldrb	r3, [r7, #23]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 fffd 	bl	800318c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ff6c 	bl	8002070 <I2Cx_Init>
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80021a4:	4802      	ldr	r0, [pc, #8]	@ (80021b0 <SENSOR_IO_Init+0x10>)
 80021a6:	f7ff ff63 	bl	8002070 <I2Cx_Init>
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20001be4 	.word	0x20001be4

080021b4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
 80021be:	460b      	mov	r3, r1
 80021c0:	71bb      	strb	r3, [r7, #6]
 80021c2:	4613      	mov	r3, r2
 80021c4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80021c6:	79bb      	ldrb	r3, [r7, #6]
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	79f9      	ldrb	r1, [r7, #7]
 80021cc:	2301      	movs	r3, #1
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	1d7b      	adds	r3, r7, #5
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2301      	movs	r3, #1
 80021d6:	4803      	ldr	r0, [pc, #12]	@ (80021e4 <SENSOR_IO_Write+0x30>)
 80021d8:	f7ff ffa5 	bl	8002126 <I2Cx_WriteMultiple>
}
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20001be4 	.word	0x20001be4

080021e8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	4603      	mov	r3, r0
 80021f0:	460a      	mov	r2, r1
 80021f2:	71fb      	strb	r3, [r7, #7]
 80021f4:	4613      	mov	r3, r2
 80021f6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80021fc:	79bb      	ldrb	r3, [r7, #6]
 80021fe:	b29a      	uxth	r2, r3
 8002200:	79f9      	ldrb	r1, [r7, #7]
 8002202:	2301      	movs	r3, #1
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	f107 030f 	add.w	r3, r7, #15
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2301      	movs	r3, #1
 800220e:	4804      	ldr	r0, [pc, #16]	@ (8002220 <SENSOR_IO_Read+0x38>)
 8002210:	f7ff ff5c 	bl	80020cc <I2Cx_ReadMultiple>

  return read_value;
 8002214:	7bfb      	ldrb	r3, [r7, #15]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20001be4 	.word	0x20001be4

08002224 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af02      	add	r7, sp, #8
 800222a:	603a      	str	r2, [r7, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
 8002232:	460b      	mov	r3, r1
 8002234:	71bb      	strb	r3, [r7, #6]
 8002236:	4613      	mov	r3, r2
 8002238:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800223a:	79bb      	ldrb	r3, [r7, #6]
 800223c:	b29a      	uxth	r2, r3
 800223e:	79f9      	ldrb	r1, [r7, #7]
 8002240:	88bb      	ldrh	r3, [r7, #4]
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	2301      	movs	r3, #1
 800224a:	4804      	ldr	r0, [pc, #16]	@ (800225c <SENSOR_IO_ReadMultiple+0x38>)
 800224c:	f7ff ff3e 	bl	80020cc <I2Cx_ReadMultiple>
 8002250:	4603      	mov	r3, r0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20001be4 	.word	0x20001be4

08002260 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800226a:	2300      	movs	r3, #0
 800226c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800226e:	4b19      	ldr	r3, [pc, #100]	@ (80022d4 <BSP_ACCELERO_Init+0x74>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	4798      	blx	r3
 8002274:	4603      	mov	r3, r0
 8002276:	2b6a      	cmp	r3, #106	@ 0x6a
 8002278:	d002      	beq.n	8002280 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	73fb      	strb	r3, [r7, #15]
 800227e:	e024      	b.n	80022ca <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002280:	4b15      	ldr	r3, [pc, #84]	@ (80022d8 <BSP_ACCELERO_Init+0x78>)
 8002282:	4a14      	ldr	r2, [pc, #80]	@ (80022d4 <BSP_ACCELERO_Init+0x74>)
 8002284:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8002286:	2330      	movs	r3, #48	@ 0x30
 8002288:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800228e:	2300      	movs	r3, #0
 8002290:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002292:	2340      	movs	r3, #64	@ 0x40
 8002294:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800229e:	797a      	ldrb	r2, [r7, #5]
 80022a0:	7abb      	ldrb	r3, [r7, #10]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80022a8:	7a3b      	ldrb	r3, [r7, #8]
 80022aa:	f043 0304 	orr.w	r3, r3, #4
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	021b      	lsls	r3, r3, #8
 80022b2:	b21a      	sxth	r2, r3
 80022b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	b21b      	sxth	r3, r3
 80022bc:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80022be:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <BSP_ACCELERO_Init+0x78>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	89ba      	ldrh	r2, [r7, #12]
 80022c6:	4610      	mov	r0, r2
 80022c8:	4798      	blx	r3
  }  

  return ret;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000010 	.word	0x20000010
 80022d8:	20001c38 	.word	0x20001c38

080022dc <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80022e4:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d009      	beq.n	8002300 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80022ec:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d004      	beq.n	8002300 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80022f6:	4b04      	ldr	r3, [pc, #16]	@ (8002308 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	4798      	blx	r3
    }
  }
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20001c38 	.word	0x20001c38

0800230c <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800231a:	2110      	movs	r1, #16
 800231c:	20d4      	movs	r0, #212	@ 0xd4
 800231e:	f7ff ff63 	bl	80021e8 <SENSOR_IO_Read>
 8002322:	4603      	mov	r3, r0
 8002324:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800232a:	7bbb      	ldrb	r3, [r7, #14]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002332:	7bba      	ldrb	r2, [r7, #14]
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	4313      	orrs	r3, r2
 8002338:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800233a:	7bbb      	ldrb	r3, [r7, #14]
 800233c:	461a      	mov	r2, r3
 800233e:	2110      	movs	r1, #16
 8002340:	20d4      	movs	r0, #212	@ 0xd4
 8002342:	f7ff ff37 	bl	80021b4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002346:	2112      	movs	r1, #18
 8002348:	20d4      	movs	r0, #212	@ 0xd4
 800234a:	f7ff ff4d 	bl	80021e8 <SENSOR_IO_Read>
 800234e:	4603      	mov	r3, r0
 8002350:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	0a1b      	lsrs	r3, r3, #8
 8002356:	b29b      	uxth	r3, r3
 8002358:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800235a:	7bbb      	ldrb	r3, [r7, #14]
 800235c:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8002360:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002362:	7bba      	ldrb	r2, [r7, #14]
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	4313      	orrs	r3, r2
 8002368:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800236a:	7bbb      	ldrb	r3, [r7, #14]
 800236c:	461a      	mov	r2, r3
 800236e:	2112      	movs	r1, #18
 8002370:	20d4      	movs	r0, #212	@ 0xd4
 8002372:	f7ff ff1f 	bl	80021b4 <SENSOR_IO_Write>
}
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002384:	2300      	movs	r3, #0
 8002386:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002388:	2110      	movs	r1, #16
 800238a:	20d4      	movs	r0, #212	@ 0xd4
 800238c:	f7ff ff2c 	bl	80021e8 <SENSOR_IO_Read>
 8002390:	4603      	mov	r3, r0
 8002392:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	461a      	mov	r2, r3
 80023a0:	2110      	movs	r1, #16
 80023a2:	20d4      	movs	r0, #212	@ 0xd4
 80023a4:	f7ff ff06 	bl	80021b4 <SENSOR_IO_Write>
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80023b4:	f7ff fef4 	bl	80021a0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80023b8:	210f      	movs	r1, #15
 80023ba:	20d4      	movs	r0, #212	@ 0xd4
 80023bc:	f7ff ff14 	bl	80021e8 <SENSOR_IO_Read>
 80023c0:	4603      	mov	r3, r0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b084      	sub	sp, #16
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	4603      	mov	r3, r0
 80023ce:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80023d4:	2115      	movs	r1, #21
 80023d6:	20d4      	movs	r0, #212	@ 0xd4
 80023d8:	f7ff ff06 	bl	80021e8 <SENSOR_IO_Read>
 80023dc:	4603      	mov	r3, r0
 80023de:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	f023 0310 	bic.w	r3, r3, #16
 80023e6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	f043 0310 	orr.w	r3, r3, #16
 80023f4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	461a      	mov	r2, r3
 80023fa:	2115      	movs	r1, #21
 80023fc:	20d4      	movs	r0, #212	@ 0xd4
 80023fe:	f7ff fed9 	bl	80021b4 <SENSOR_IO_Write>
}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002414:	2300      	movs	r3, #0
 8002416:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002422:	2110      	movs	r1, #16
 8002424:	20d4      	movs	r0, #212	@ 0xd4
 8002426:	f7ff fedf 	bl	80021e8 <SENSOR_IO_Read>
 800242a:	4603      	mov	r3, r0
 800242c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800242e:	f107 0208 	add.w	r2, r7, #8
 8002432:	2306      	movs	r3, #6
 8002434:	2128      	movs	r1, #40	@ 0x28
 8002436:	20d4      	movs	r0, #212	@ 0xd4
 8002438:	f7ff fef4 	bl	8002224 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800243c:	2300      	movs	r3, #0
 800243e:	77fb      	strb	r3, [r7, #31]
 8002440:	e01a      	b.n	8002478 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002442:	7ffb      	ldrb	r3, [r7, #31]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	3301      	adds	r3, #1
 8002448:	3320      	adds	r3, #32
 800244a:	443b      	add	r3, r7
 800244c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	b29b      	uxth	r3, r3
 8002454:	7ffa      	ldrb	r2, [r7, #31]
 8002456:	0052      	lsls	r2, r2, #1
 8002458:	3220      	adds	r2, #32
 800245a:	443a      	add	r2, r7
 800245c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002460:	4413      	add	r3, r2
 8002462:	b29a      	uxth	r2, r3
 8002464:	7ffb      	ldrb	r3, [r7, #31]
 8002466:	b212      	sxth	r2, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	3320      	adds	r3, #32
 800246c:	443b      	add	r3, r7
 800246e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002472:	7ffb      	ldrb	r3, [r7, #31]
 8002474:	3301      	adds	r3, #1
 8002476:	77fb      	strb	r3, [r7, #31]
 8002478:	7ffb      	ldrb	r3, [r7, #31]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d9e1      	bls.n	8002442 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800247e:	7dfb      	ldrb	r3, [r7, #23]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	2b0c      	cmp	r3, #12
 8002486:	d829      	bhi.n	80024dc <LSM6DSL_AccReadXYZ+0xd0>
 8002488:	a201      	add	r2, pc, #4	@ (adr r2, 8002490 <LSM6DSL_AccReadXYZ+0x84>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080024c5 	.word	0x080024c5
 8002494:	080024dd 	.word	0x080024dd
 8002498:	080024dd 	.word	0x080024dd
 800249c:	080024dd 	.word	0x080024dd
 80024a0:	080024d7 	.word	0x080024d7
 80024a4:	080024dd 	.word	0x080024dd
 80024a8:	080024dd 	.word	0x080024dd
 80024ac:	080024dd 	.word	0x080024dd
 80024b0:	080024cb 	.word	0x080024cb
 80024b4:	080024dd 	.word	0x080024dd
 80024b8:	080024dd 	.word	0x080024dd
 80024bc:	080024dd 	.word	0x080024dd
 80024c0:	080024d1 	.word	0x080024d1
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80024c4:	4b18      	ldr	r3, [pc, #96]	@ (8002528 <LSM6DSL_AccReadXYZ+0x11c>)
 80024c6:	61bb      	str	r3, [r7, #24]
    break;
 80024c8:	e008      	b.n	80024dc <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80024ca:	4b18      	ldr	r3, [pc, #96]	@ (800252c <LSM6DSL_AccReadXYZ+0x120>)
 80024cc:	61bb      	str	r3, [r7, #24]
    break;
 80024ce:	e005      	b.n	80024dc <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80024d0:	4b17      	ldr	r3, [pc, #92]	@ (8002530 <LSM6DSL_AccReadXYZ+0x124>)
 80024d2:	61bb      	str	r3, [r7, #24]
    break;
 80024d4:	e002      	b.n	80024dc <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80024d6:	4b17      	ldr	r3, [pc, #92]	@ (8002534 <LSM6DSL_AccReadXYZ+0x128>)
 80024d8:	61bb      	str	r3, [r7, #24]
    break;    
 80024da:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80024dc:	2300      	movs	r3, #0
 80024de:	77fb      	strb	r3, [r7, #31]
 80024e0:	e01a      	b.n	8002518 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80024e2:	7ffb      	ldrb	r3, [r7, #31]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	3320      	adds	r3, #32
 80024e8:	443b      	add	r3, r7
 80024ea:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80024fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fe:	7ffb      	ldrb	r3, [r7, #31]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800250a:	ee17 2a90 	vmov	r2, s15
 800250e:	b212      	sxth	r2, r2
 8002510:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002512:	7ffb      	ldrb	r3, [r7, #31]
 8002514:	3301      	adds	r3, #1
 8002516:	77fb      	strb	r3, [r7, #31]
 8002518:	7ffb      	ldrb	r3, [r7, #31]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d9e1      	bls.n	80024e2 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 800251e:	bf00      	nop
 8002520:	bf00      	nop
 8002522:	3720      	adds	r7, #32
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	3d79db23 	.word	0x3d79db23
 800252c:	3df9db23 	.word	0x3df9db23
 8002530:	3e79db23 	.word	0x3e79db23
 8002534:	3ef9db23 	.word	0x3ef9db23

08002538 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002542:	2003      	movs	r0, #3
 8002544:	f000 f960 	bl	8002808 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002548:	2000      	movs	r0, #0
 800254a:	f000 f80d 	bl	8002568 <HAL_InitTick>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	71fb      	strb	r3, [r7, #7]
 8002558:	e001      	b.n	800255e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800255a:	f7ff f995 	bl	8001888 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800255e:	79fb      	ldrb	r3, [r7, #7]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002574:	4b17      	ldr	r3, [pc, #92]	@ (80025d4 <HAL_InitTick+0x6c>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d023      	beq.n	80025c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800257c:	4b16      	ldr	r3, [pc, #88]	@ (80025d8 <HAL_InitTick+0x70>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b14      	ldr	r3, [pc, #80]	@ (80025d4 <HAL_InitTick+0x6c>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	4619      	mov	r1, r3
 8002586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800258a:	fbb3 f3f1 	udiv	r3, r3, r1
 800258e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002592:	4618      	mov	r0, r3
 8002594:	f000 f96d 	bl	8002872 <HAL_SYSTICK_Config>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10f      	bne.n	80025be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b0f      	cmp	r3, #15
 80025a2:	d809      	bhi.n	80025b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a4:	2200      	movs	r2, #0
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ac:	f000 f937 	bl	800281e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025b0:	4a0a      	ldr	r2, [pc, #40]	@ (80025dc <HAL_InitTick+0x74>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e007      	b.n	80025c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
 80025bc:	e004      	b.n	80025c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	e001      	b.n	80025c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000048 	.word	0x20000048
 80025d8:	2000000c 	.word	0x2000000c
 80025dc:	20000044 	.word	0x20000044

080025e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025e4:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <HAL_IncTick+0x20>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	4b06      	ldr	r3, [pc, #24]	@ (8002604 <HAL_IncTick+0x24>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4413      	add	r3, r2
 80025f0:	4a04      	ldr	r2, [pc, #16]	@ (8002604 <HAL_IncTick+0x24>)
 80025f2:	6013      	str	r3, [r2, #0]
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000048 	.word	0x20000048
 8002604:	20001c3c 	.word	0x20001c3c

08002608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return uwTick;
 800260c:	4b03      	ldr	r3, [pc, #12]	@ (800261c <HAL_GetTick+0x14>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20001c3c 	.word	0x20001c3c

08002620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002628:	f7ff ffee 	bl	8002608 <HAL_GetTick>
 800262c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002638:	d005      	beq.n	8002646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800263a:	4b0a      	ldr	r3, [pc, #40]	@ (8002664 <HAL_Delay+0x44>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4413      	add	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002646:	bf00      	nop
 8002648:	f7ff ffde 	bl	8002608 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	429a      	cmp	r2, r3
 8002656:	d8f7      	bhi.n	8002648 <HAL_Delay+0x28>
  {
  }
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000048 	.word	0x20000048

08002668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002678:	4b0c      	ldr	r3, [pc, #48]	@ (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002684:	4013      	ands	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002690:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269a:	4a04      	ldr	r2, [pc, #16]	@ (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	60d3      	str	r3, [r2, #12]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b4:	4b04      	ldr	r3, [pc, #16]	@ (80026c8 <__NVIC_GetPriorityGrouping+0x18>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	f003 0307 	and.w	r3, r3, #7
}
 80026be:	4618      	mov	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	db0b      	blt.n	80026f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	4907      	ldr	r1, [pc, #28]	@ (8002704 <__NVIC_EnableIRQ+0x38>)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	2001      	movs	r0, #1
 80026ee:	fa00 f202 	lsl.w	r2, r0, r2
 80026f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000e100 	.word	0xe000e100

08002708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	6039      	str	r1, [r7, #0]
 8002712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	2b00      	cmp	r3, #0
 800271a:	db0a      	blt.n	8002732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	490c      	ldr	r1, [pc, #48]	@ (8002754 <__NVIC_SetPriority+0x4c>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	0112      	lsls	r2, r2, #4
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	440b      	add	r3, r1
 800272c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002730:	e00a      	b.n	8002748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4908      	ldr	r1, [pc, #32]	@ (8002758 <__NVIC_SetPriority+0x50>)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	3b04      	subs	r3, #4
 8002740:	0112      	lsls	r2, r2, #4
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	440b      	add	r3, r1
 8002746:	761a      	strb	r2, [r3, #24]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000e100 	.word	0xe000e100
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	@ 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f1c3 0307 	rsb	r3, r3, #7
 8002776:	2b04      	cmp	r3, #4
 8002778:	bf28      	it	cs
 800277a:	2304      	movcs	r3, #4
 800277c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3304      	adds	r3, #4
 8002782:	2b06      	cmp	r3, #6
 8002784:	d902      	bls.n	800278c <NVIC_EncodePriority+0x30>
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3b03      	subs	r3, #3
 800278a:	e000      	b.n	800278e <NVIC_EncodePriority+0x32>
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	f04f 32ff 	mov.w	r2, #4294967295
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	401a      	ands	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a4:	f04f 31ff 	mov.w	r1, #4294967295
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	43d9      	mvns	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	4313      	orrs	r3, r2
         );
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3724      	adds	r7, #36	@ 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027d4:	d301      	bcc.n	80027da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d6:	2301      	movs	r3, #1
 80027d8:	e00f      	b.n	80027fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027da:	4a0a      	ldr	r2, [pc, #40]	@ (8002804 <SysTick_Config+0x40>)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e2:	210f      	movs	r1, #15
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	f7ff ff8e 	bl	8002708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ec:	4b05      	ldr	r3, [pc, #20]	@ (8002804 <SysTick_Config+0x40>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f2:	4b04      	ldr	r3, [pc, #16]	@ (8002804 <SysTick_Config+0x40>)
 80027f4:	2207      	movs	r2, #7
 80027f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	e000e010 	.word	0xe000e010

08002808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff ff29 	bl	8002668 <__NVIC_SetPriorityGrouping>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002830:	f7ff ff3e 	bl	80026b0 <__NVIC_GetPriorityGrouping>
 8002834:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	6978      	ldr	r0, [r7, #20]
 800283c:	f7ff ff8e 	bl	800275c <NVIC_EncodePriority>
 8002840:	4602      	mov	r2, r0
 8002842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff5d 	bl	8002708 <__NVIC_SetPriority>
}
 800284e:	bf00      	nop
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff31 	bl	80026cc <__NVIC_EnableIRQ>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff ffa2 	bl	80027c4 <SysTick_Config>
 8002880:	4603      	mov	r3, r0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e0ac      	b.n	80029f8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f8b2 	bl	8002a0c <DFSDM_GetChannelFromInstance>
 80028a8:	4603      	mov	r3, r0
 80028aa:	4a55      	ldr	r2, [pc, #340]	@ (8002a00 <HAL_DFSDM_ChannelInit+0x174>)
 80028ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e09f      	b.n	80029f8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff f809 	bl	80018d0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80028be:	4b51      	ldr	r3, [pc, #324]	@ (8002a04 <HAL_DFSDM_ChannelInit+0x178>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3301      	adds	r3, #1
 80028c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002a04 <HAL_DFSDM_ChannelInit+0x178>)
 80028c6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80028c8:	4b4e      	ldr	r3, [pc, #312]	@ (8002a04 <HAL_DFSDM_ChannelInit+0x178>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d125      	bne.n	800291c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80028d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002a08 <HAL_DFSDM_ChannelInit+0x17c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a4c      	ldr	r2, [pc, #304]	@ (8002a08 <HAL_DFSDM_ChannelInit+0x17c>)
 80028d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028da:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80028dc:	4b4a      	ldr	r3, [pc, #296]	@ (8002a08 <HAL_DFSDM_ChannelInit+0x17c>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4948      	ldr	r1, [pc, #288]	@ (8002a08 <HAL_DFSDM_ChannelInit+0x17c>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80028ea:	4b47      	ldr	r3, [pc, #284]	@ (8002a08 <HAL_DFSDM_ChannelInit+0x17c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a46      	ldr	r2, [pc, #280]	@ (8002a08 <HAL_DFSDM_ChannelInit+0x17c>)
 80028f0:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80028f4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	791b      	ldrb	r3, [r3, #4]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d108      	bne.n	8002910 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80028fe:	4b42      	ldr	r3, [pc, #264]	@ (8002a08 <HAL_DFSDM_ChannelInit+0x17c>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	3b01      	subs	r3, #1
 8002908:	041b      	lsls	r3, r3, #16
 800290a:	493f      	ldr	r1, [pc, #252]	@ (8002a08 <HAL_DFSDM_ChannelInit+0x17c>)
 800290c:	4313      	orrs	r3, r2
 800290e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002910:	4b3d      	ldr	r3, [pc, #244]	@ (8002a08 <HAL_DFSDM_ChannelInit+0x17c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a3c      	ldr	r2, [pc, #240]	@ (8002a08 <HAL_DFSDM_ChannelInit+0x17c>)
 8002916:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800291a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800292a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6819      	ldr	r1, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800293a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002940:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 020f 	bic.w	r2, r2, #15
 8002958:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6819      	ldr	r1, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8002980:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6899      	ldr	r1, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002990:	3b01      	subs	r3, #1
 8002992:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f002 0207 	and.w	r2, r2, #7
 80029ac:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029d8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f810 	bl	8002a0c <DFSDM_GetChannelFromInstance>
 80029ec:	4602      	mov	r2, r0
 80029ee:	4904      	ldr	r1, [pc, #16]	@ (8002a00 <HAL_DFSDM_ChannelInit+0x174>)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20001c44 	.word	0x20001c44
 8002a04:	20001c40 	.word	0x20001c40
 8002a08:	40016000 	.word	0x40016000

08002a0c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a1c      	ldr	r2, [pc, #112]	@ (8002a88 <DFSDM_GetChannelFromInstance+0x7c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d102      	bne.n	8002a22 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	e02b      	b.n	8002a7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a19      	ldr	r2, [pc, #100]	@ (8002a8c <DFSDM_GetChannelFromInstance+0x80>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d102      	bne.n	8002a30 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	e024      	b.n	8002a7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a17      	ldr	r2, [pc, #92]	@ (8002a90 <DFSDM_GetChannelFromInstance+0x84>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d102      	bne.n	8002a3e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	e01d      	b.n	8002a7a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a14      	ldr	r2, [pc, #80]	@ (8002a94 <DFSDM_GetChannelFromInstance+0x88>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d102      	bne.n	8002a4c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002a46:	2304      	movs	r3, #4
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	e016      	b.n	8002a7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a12      	ldr	r2, [pc, #72]	@ (8002a98 <DFSDM_GetChannelFromInstance+0x8c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d102      	bne.n	8002a5a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002a54:	2305      	movs	r3, #5
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	e00f      	b.n	8002a7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8002a9c <DFSDM_GetChannelFromInstance+0x90>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d102      	bne.n	8002a68 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002a62:	2306      	movs	r3, #6
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	e008      	b.n	8002a7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa0 <DFSDM_GetChannelFromInstance+0x94>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d102      	bne.n	8002a76 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002a70:	2307      	movs	r3, #7
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	e001      	b.n	8002a7a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002a76:	2303      	movs	r3, #3
 8002a78:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40016000 	.word	0x40016000
 8002a8c:	40016020 	.word	0x40016020
 8002a90:	40016040 	.word	0x40016040
 8002a94:	40016080 	.word	0x40016080
 8002a98:	400160a0 	.word	0x400160a0
 8002a9c:	400160c0 	.word	0x400160c0
 8002aa0:	400160e0 	.word	0x400160e0

08002aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ab2:	e17f      	b.n	8002db4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	2101      	movs	r1, #1
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8171 	beq.w	8002dae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d005      	beq.n	8002ae4 <HAL_GPIO_Init+0x40>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d130      	bne.n	8002b46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	2203      	movs	r2, #3
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4013      	ands	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	091b      	lsrs	r3, r3, #4
 8002b30:	f003 0201 	and.w	r2, r3, #1
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d118      	bne.n	8002b84 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b58:	2201      	movs	r2, #1
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4013      	ands	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	08db      	lsrs	r3, r3, #3
 8002b6e:	f003 0201 	and.w	r2, r3, #1
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d017      	beq.n	8002bc0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d123      	bne.n	8002c14 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	08da      	lsrs	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3208      	adds	r2, #8
 8002bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	220f      	movs	r2, #15
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	08da      	lsrs	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3208      	adds	r2, #8
 8002c0e:	6939      	ldr	r1, [r7, #16]
 8002c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2203      	movs	r2, #3
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0203 	and.w	r2, r3, #3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80ac 	beq.w	8002dae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c56:	4b5f      	ldr	r3, [pc, #380]	@ (8002dd4 <HAL_GPIO_Init+0x330>)
 8002c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c5a:	4a5e      	ldr	r2, [pc, #376]	@ (8002dd4 <HAL_GPIO_Init+0x330>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c62:	4b5c      	ldr	r3, [pc, #368]	@ (8002dd4 <HAL_GPIO_Init+0x330>)
 8002c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c6e:	4a5a      	ldr	r2, [pc, #360]	@ (8002dd8 <HAL_GPIO_Init+0x334>)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	089b      	lsrs	r3, r3, #2
 8002c74:	3302      	adds	r3, #2
 8002c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	220f      	movs	r2, #15
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c98:	d025      	beq.n	8002ce6 <HAL_GPIO_Init+0x242>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a4f      	ldr	r2, [pc, #316]	@ (8002ddc <HAL_GPIO_Init+0x338>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01f      	beq.n	8002ce2 <HAL_GPIO_Init+0x23e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a4e      	ldr	r2, [pc, #312]	@ (8002de0 <HAL_GPIO_Init+0x33c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d019      	beq.n	8002cde <HAL_GPIO_Init+0x23a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4d      	ldr	r2, [pc, #308]	@ (8002de4 <HAL_GPIO_Init+0x340>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <HAL_GPIO_Init+0x236>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4c      	ldr	r2, [pc, #304]	@ (8002de8 <HAL_GPIO_Init+0x344>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00d      	beq.n	8002cd6 <HAL_GPIO_Init+0x232>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4b      	ldr	r2, [pc, #300]	@ (8002dec <HAL_GPIO_Init+0x348>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d007      	beq.n	8002cd2 <HAL_GPIO_Init+0x22e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4a      	ldr	r2, [pc, #296]	@ (8002df0 <HAL_GPIO_Init+0x34c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d101      	bne.n	8002cce <HAL_GPIO_Init+0x22a>
 8002cca:	2306      	movs	r3, #6
 8002ccc:	e00c      	b.n	8002ce8 <HAL_GPIO_Init+0x244>
 8002cce:	2307      	movs	r3, #7
 8002cd0:	e00a      	b.n	8002ce8 <HAL_GPIO_Init+0x244>
 8002cd2:	2305      	movs	r3, #5
 8002cd4:	e008      	b.n	8002ce8 <HAL_GPIO_Init+0x244>
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	e006      	b.n	8002ce8 <HAL_GPIO_Init+0x244>
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e004      	b.n	8002ce8 <HAL_GPIO_Init+0x244>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e002      	b.n	8002ce8 <HAL_GPIO_Init+0x244>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <HAL_GPIO_Init+0x244>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	f002 0203 	and.w	r2, r2, #3
 8002cee:	0092      	lsls	r2, r2, #2
 8002cf0:	4093      	lsls	r3, r2
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cf8:	4937      	ldr	r1, [pc, #220]	@ (8002dd8 <HAL_GPIO_Init+0x334>)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	089b      	lsrs	r3, r3, #2
 8002cfe:	3302      	adds	r3, #2
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d06:	4b3b      	ldr	r3, [pc, #236]	@ (8002df4 <HAL_GPIO_Init+0x350>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4013      	ands	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d2a:	4a32      	ldr	r2, [pc, #200]	@ (8002df4 <HAL_GPIO_Init+0x350>)
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d30:	4b30      	ldr	r3, [pc, #192]	@ (8002df4 <HAL_GPIO_Init+0x350>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d54:	4a27      	ldr	r2, [pc, #156]	@ (8002df4 <HAL_GPIO_Init+0x350>)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d5a:	4b26      	ldr	r3, [pc, #152]	@ (8002df4 <HAL_GPIO_Init+0x350>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4013      	ands	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002df4 <HAL_GPIO_Init+0x350>)
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d84:	4b1b      	ldr	r3, [pc, #108]	@ (8002df4 <HAL_GPIO_Init+0x350>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002da8:	4a12      	ldr	r2, [pc, #72]	@ (8002df4 <HAL_GPIO_Init+0x350>)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	3301      	adds	r3, #1
 8002db2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f47f ae78 	bne.w	8002ab4 <HAL_GPIO_Init+0x10>
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	bf00      	nop
 8002dc8:	371c      	adds	r7, #28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40010000 	.word	0x40010000
 8002ddc:	48000400 	.word	0x48000400
 8002de0:	48000800 	.word	0x48000800
 8002de4:	48000c00 	.word	0x48000c00
 8002de8:	48001000 	.word	0x48001000
 8002dec:	48001400 	.word	0x48001400
 8002df0:	48001800 	.word	0x48001800
 8002df4:	40010400 	.word	0x40010400

08002df8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002e06:	e0cd      	b.n	8002fa4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002e08:	2201      	movs	r2, #1
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 80c0 	beq.w	8002f9e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002e1e:	4a68      	ldr	r2, [pc, #416]	@ (8002fc0 <HAL_GPIO_DeInit+0x1c8>)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	3302      	adds	r3, #2
 8002e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	220f      	movs	r2, #15
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e46:	d025      	beq.n	8002e94 <HAL_GPIO_DeInit+0x9c>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a5e      	ldr	r2, [pc, #376]	@ (8002fc4 <HAL_GPIO_DeInit+0x1cc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d01f      	beq.n	8002e90 <HAL_GPIO_DeInit+0x98>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a5d      	ldr	r2, [pc, #372]	@ (8002fc8 <HAL_GPIO_DeInit+0x1d0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d019      	beq.n	8002e8c <HAL_GPIO_DeInit+0x94>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a5c      	ldr	r2, [pc, #368]	@ (8002fcc <HAL_GPIO_DeInit+0x1d4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d013      	beq.n	8002e88 <HAL_GPIO_DeInit+0x90>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a5b      	ldr	r2, [pc, #364]	@ (8002fd0 <HAL_GPIO_DeInit+0x1d8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00d      	beq.n	8002e84 <HAL_GPIO_DeInit+0x8c>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a5a      	ldr	r2, [pc, #360]	@ (8002fd4 <HAL_GPIO_DeInit+0x1dc>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d007      	beq.n	8002e80 <HAL_GPIO_DeInit+0x88>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a59      	ldr	r2, [pc, #356]	@ (8002fd8 <HAL_GPIO_DeInit+0x1e0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d101      	bne.n	8002e7c <HAL_GPIO_DeInit+0x84>
 8002e78:	2306      	movs	r3, #6
 8002e7a:	e00c      	b.n	8002e96 <HAL_GPIO_DeInit+0x9e>
 8002e7c:	2307      	movs	r3, #7
 8002e7e:	e00a      	b.n	8002e96 <HAL_GPIO_DeInit+0x9e>
 8002e80:	2305      	movs	r3, #5
 8002e82:	e008      	b.n	8002e96 <HAL_GPIO_DeInit+0x9e>
 8002e84:	2304      	movs	r3, #4
 8002e86:	e006      	b.n	8002e96 <HAL_GPIO_DeInit+0x9e>
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e004      	b.n	8002e96 <HAL_GPIO_DeInit+0x9e>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e002      	b.n	8002e96 <HAL_GPIO_DeInit+0x9e>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <HAL_GPIO_DeInit+0x9e>
 8002e94:	2300      	movs	r3, #0
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	f002 0203 	and.w	r2, r2, #3
 8002e9c:	0092      	lsls	r2, r2, #2
 8002e9e:	4093      	lsls	r3, r2
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d132      	bne.n	8002f0c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002ea6:	4b4d      	ldr	r3, [pc, #308]	@ (8002fdc <HAL_GPIO_DeInit+0x1e4>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	494b      	ldr	r1, [pc, #300]	@ (8002fdc <HAL_GPIO_DeInit+0x1e4>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002eb4:	4b49      	ldr	r3, [pc, #292]	@ (8002fdc <HAL_GPIO_DeInit+0x1e4>)
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	4947      	ldr	r1, [pc, #284]	@ (8002fdc <HAL_GPIO_DeInit+0x1e4>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002ec2:	4b46      	ldr	r3, [pc, #280]	@ (8002fdc <HAL_GPIO_DeInit+0x1e4>)
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	4944      	ldr	r1, [pc, #272]	@ (8002fdc <HAL_GPIO_DeInit+0x1e4>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002ed0:	4b42      	ldr	r3, [pc, #264]	@ (8002fdc <HAL_GPIO_DeInit+0x1e4>)
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	4940      	ldr	r1, [pc, #256]	@ (8002fdc <HAL_GPIO_DeInit+0x1e4>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	220f      	movs	r2, #15
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002eee:	4a34      	ldr	r2, [pc, #208]	@ (8002fc0 <HAL_GPIO_DeInit+0x1c8>)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	089b      	lsrs	r3, r3, #2
 8002ef4:	3302      	adds	r3, #2
 8002ef6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	43da      	mvns	r2, r3
 8002efe:	4830      	ldr	r0, [pc, #192]	@ (8002fc0 <HAL_GPIO_DeInit+0x1c8>)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	089b      	lsrs	r3, r3, #2
 8002f04:	400a      	ands	r2, r1
 8002f06:	3302      	adds	r3, #2
 8002f08:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	2103      	movs	r1, #3
 8002f16:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	08da      	lsrs	r2, r3, #3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3208      	adds	r2, #8
 8002f28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	220f      	movs	r2, #15
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	08d2      	lsrs	r2, r2, #3
 8002f40:	4019      	ands	r1, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3208      	adds	r2, #8
 8002f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	2103      	movs	r1, #3
 8002f54:	fa01 f303 	lsl.w	r3, r1, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	401a      	ands	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	2101      	movs	r1, #1
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	401a      	ands	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	2103      	movs	r1, #3
 8002f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	401a      	ands	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f8e:	2101      	movs	r1, #1
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	43db      	mvns	r3, r3
 8002f98:	401a      	ands	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f47f af2b 	bne.w	8002e08 <HAL_GPIO_DeInit+0x10>
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	bf00      	nop
 8002fb6:	371c      	adds	r7, #28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	40010000 	.word	0x40010000
 8002fc4:	48000400 	.word	0x48000400
 8002fc8:	48000800 	.word	0x48000800
 8002fcc:	48000c00 	.word	0x48000c00
 8002fd0:	48001000 	.word	0x48001000
 8002fd4:	48001400 	.word	0x48001400
 8002fd8:	48001800 	.word	0x48001800
 8002fdc:	40010400 	.word	0x40010400

08002fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	807b      	strh	r3, [r7, #2]
 8002fec:	4613      	mov	r3, r2
 8002fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ff0:	787b      	ldrb	r3, [r7, #1]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ff6:	887a      	ldrh	r2, [r7, #2]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ffc:	e002      	b.n	8003004 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ffe:	887a      	ldrh	r2, [r7, #2]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800301a:	4b08      	ldr	r3, [pc, #32]	@ (800303c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	4013      	ands	r3, r2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d006      	beq.n	8003034 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003026:	4a05      	ldr	r2, [pc, #20]	@ (800303c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	4618      	mov	r0, r3
 8003030:	f000 f806 	bl	8003040 <HAL_GPIO_EXTI_Callback>
  }
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40010400 	.word	0x40010400

08003040 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e08d      	b.n	8003184 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d106      	bne.n	8003082 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7fe fc8b 	bl	8001998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2224      	movs	r2, #36	@ 0x24
 8003086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0201 	bic.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d107      	bne.n	80030d0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030cc:	609a      	str	r2, [r3, #8]
 80030ce:	e006      	b.n	80030de <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80030dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d108      	bne.n	80030f8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	e007      	b.n	8003108 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003106:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003116:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800311a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800312a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69d9      	ldr	r1, [r3, #28]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1a      	ldr	r2, [r3, #32]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0201 	orr.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e021      	b.n	80031e2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2224      	movs	r2, #36	@ 0x24
 80031a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0201 	bic.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7fe fc4c 	bl	8001a54 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	4608      	mov	r0, r1
 80031f6:	4611      	mov	r1, r2
 80031f8:	461a      	mov	r2, r3
 80031fa:	4603      	mov	r3, r0
 80031fc:	817b      	strh	r3, [r7, #10]
 80031fe:	460b      	mov	r3, r1
 8003200:	813b      	strh	r3, [r7, #8]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b20      	cmp	r3, #32
 8003210:	f040 80f9 	bne.w	8003406 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <HAL_I2C_Mem_Write+0x34>
 800321a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800321c:	2b00      	cmp	r3, #0
 800321e:	d105      	bne.n	800322c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003226:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0ed      	b.n	8003408 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_I2C_Mem_Write+0x4e>
 8003236:	2302      	movs	r3, #2
 8003238:	e0e6      	b.n	8003408 <HAL_I2C_Mem_Write+0x21c>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003242:	f7ff f9e1 	bl	8002608 <HAL_GetTick>
 8003246:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	2319      	movs	r3, #25
 800324e:	2201      	movs	r2, #1
 8003250:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 fac3 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0d1      	b.n	8003408 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2221      	movs	r2, #33	@ 0x21
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2240      	movs	r2, #64	@ 0x40
 8003270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a3a      	ldr	r2, [r7, #32]
 800327e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003284:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800328c:	88f8      	ldrh	r0, [r7, #6]
 800328e:	893a      	ldrh	r2, [r7, #8]
 8003290:	8979      	ldrh	r1, [r7, #10]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	4603      	mov	r3, r0
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f9d3 	bl	8003648 <I2C_RequestMemoryWrite>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0a9      	b.n	8003408 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2bff      	cmp	r3, #255	@ 0xff
 80032bc:	d90e      	bls.n	80032dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	22ff      	movs	r2, #255	@ 0xff
 80032c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	8979      	ldrh	r1, [r7, #10]
 80032cc:	2300      	movs	r3, #0
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 fc47 	bl	8003b68 <I2C_TransferConfig>
 80032da:	e00f      	b.n	80032fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	8979      	ldrh	r1, [r7, #10]
 80032ee:	2300      	movs	r3, #0
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fc36 	bl	8003b68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 fac6 	bl	8003892 <I2C_WaitOnTXISFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e07b      	b.n	8003408 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	781a      	ldrb	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d034      	beq.n	80033b4 <HAL_I2C_Mem_Write+0x1c8>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334e:	2b00      	cmp	r3, #0
 8003350:	d130      	bne.n	80033b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003358:	2200      	movs	r2, #0
 800335a:	2180      	movs	r1, #128	@ 0x80
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 fa3f 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e04d      	b.n	8003408 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	2bff      	cmp	r3, #255	@ 0xff
 8003374:	d90e      	bls.n	8003394 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	22ff      	movs	r2, #255	@ 0xff
 800337a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003380:	b2da      	uxtb	r2, r3
 8003382:	8979      	ldrh	r1, [r7, #10]
 8003384:	2300      	movs	r3, #0
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 fbeb 	bl	8003b68 <I2C_TransferConfig>
 8003392:	e00f      	b.n	80033b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	8979      	ldrh	r1, [r7, #10]
 80033a6:	2300      	movs	r3, #0
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fbda 	bl	8003b68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d19e      	bne.n	80032fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 faac 	bl	8003920 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e01a      	b.n	8003408 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2220      	movs	r2, #32
 80033d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6859      	ldr	r1, [r3, #4]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003410 <HAL_I2C_Mem_Write+0x224>)
 80033e6:	400b      	ands	r3, r1
 80033e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	e000      	b.n	8003408 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003406:	2302      	movs	r3, #2
  }
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	fe00e800 	.word	0xfe00e800

08003414 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	4608      	mov	r0, r1
 800341e:	4611      	mov	r1, r2
 8003420:	461a      	mov	r2, r3
 8003422:	4603      	mov	r3, r0
 8003424:	817b      	strh	r3, [r7, #10]
 8003426:	460b      	mov	r3, r1
 8003428:	813b      	strh	r3, [r7, #8]
 800342a:	4613      	mov	r3, r2
 800342c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b20      	cmp	r3, #32
 8003438:	f040 80fd 	bne.w	8003636 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <HAL_I2C_Mem_Read+0x34>
 8003442:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003444:	2b00      	cmp	r3, #0
 8003446:	d105      	bne.n	8003454 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800344e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0f1      	b.n	8003638 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_I2C_Mem_Read+0x4e>
 800345e:	2302      	movs	r3, #2
 8003460:	e0ea      	b.n	8003638 <HAL_I2C_Mem_Read+0x224>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800346a:	f7ff f8cd 	bl	8002608 <HAL_GetTick>
 800346e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	2319      	movs	r3, #25
 8003476:	2201      	movs	r2, #1
 8003478:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f9af 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0d5      	b.n	8003638 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2222      	movs	r2, #34	@ 0x22
 8003490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2240      	movs	r2, #64	@ 0x40
 8003498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a3a      	ldr	r2, [r7, #32]
 80034a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80034ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034b4:	88f8      	ldrh	r0, [r7, #6]
 80034b6:	893a      	ldrh	r2, [r7, #8]
 80034b8:	8979      	ldrh	r1, [r7, #10]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	4603      	mov	r3, r0
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f913 	bl	80036f0 <I2C_RequestMemoryRead>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0ad      	b.n	8003638 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2bff      	cmp	r3, #255	@ 0xff
 80034e4:	d90e      	bls.n	8003504 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2201      	movs	r2, #1
 80034ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	8979      	ldrh	r1, [r7, #10]
 80034f4:	4b52      	ldr	r3, [pc, #328]	@ (8003640 <HAL_I2C_Mem_Read+0x22c>)
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 fb33 	bl	8003b68 <I2C_TransferConfig>
 8003502:	e00f      	b.n	8003524 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003512:	b2da      	uxtb	r2, r3
 8003514:	8979      	ldrh	r1, [r7, #10]
 8003516:	4b4a      	ldr	r3, [pc, #296]	@ (8003640 <HAL_I2C_Mem_Read+0x22c>)
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 fb22 	bl	8003b68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352a:	2200      	movs	r2, #0
 800352c:	2104      	movs	r1, #4
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f956 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e07c      	b.n	8003638 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d034      	beq.n	80035e4 <HAL_I2C_Mem_Read+0x1d0>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800357e:	2b00      	cmp	r3, #0
 8003580:	d130      	bne.n	80035e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003588:	2200      	movs	r2, #0
 800358a:	2180      	movs	r1, #128	@ 0x80
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 f927 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e04d      	b.n	8003638 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2bff      	cmp	r3, #255	@ 0xff
 80035a4:	d90e      	bls.n	80035c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	8979      	ldrh	r1, [r7, #10]
 80035b4:	2300      	movs	r3, #0
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 fad3 	bl	8003b68 <I2C_TransferConfig>
 80035c2:	e00f      	b.n	80035e4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	8979      	ldrh	r1, [r7, #10]
 80035d6:	2300      	movs	r3, #0
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 fac2 	bl	8003b68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d19a      	bne.n	8003524 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f994 	bl	8003920 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e01a      	b.n	8003638 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2220      	movs	r2, #32
 8003608:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6859      	ldr	r1, [r3, #4]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4b0b      	ldr	r3, [pc, #44]	@ (8003644 <HAL_I2C_Mem_Read+0x230>)
 8003616:	400b      	ands	r3, r1
 8003618:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e000      	b.n	8003638 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003636:	2302      	movs	r3, #2
  }
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	80002400 	.word	0x80002400
 8003644:	fe00e800 	.word	0xfe00e800

08003648 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af02      	add	r7, sp, #8
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	4608      	mov	r0, r1
 8003652:	4611      	mov	r1, r2
 8003654:	461a      	mov	r2, r3
 8003656:	4603      	mov	r3, r0
 8003658:	817b      	strh	r3, [r7, #10]
 800365a:	460b      	mov	r3, r1
 800365c:	813b      	strh	r3, [r7, #8]
 800365e:	4613      	mov	r3, r2
 8003660:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	b2da      	uxtb	r2, r3
 8003666:	8979      	ldrh	r1, [r7, #10]
 8003668:	4b20      	ldr	r3, [pc, #128]	@ (80036ec <I2C_RequestMemoryWrite+0xa4>)
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fa79 	bl	8003b68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	69b9      	ldr	r1, [r7, #24]
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f909 	bl	8003892 <I2C_WaitOnTXISFlagUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e02c      	b.n	80036e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d105      	bne.n	800369c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003690:	893b      	ldrh	r3, [r7, #8]
 8003692:	b2da      	uxtb	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	629a      	str	r2, [r3, #40]	@ 0x28
 800369a:	e015      	b.n	80036c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800369c:	893b      	ldrh	r3, [r7, #8]
 800369e:	0a1b      	lsrs	r3, r3, #8
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	69b9      	ldr	r1, [r7, #24]
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f8ef 	bl	8003892 <I2C_WaitOnTXISFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e012      	b.n	80036e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036be:	893b      	ldrh	r3, [r7, #8]
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	2200      	movs	r2, #0
 80036d0:	2180      	movs	r1, #128	@ 0x80
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 f884 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	80002000 	.word	0x80002000

080036f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	4608      	mov	r0, r1
 80036fa:	4611      	mov	r1, r2
 80036fc:	461a      	mov	r2, r3
 80036fe:	4603      	mov	r3, r0
 8003700:	817b      	strh	r3, [r7, #10]
 8003702:	460b      	mov	r3, r1
 8003704:	813b      	strh	r3, [r7, #8]
 8003706:	4613      	mov	r3, r2
 8003708:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	b2da      	uxtb	r2, r3
 800370e:	8979      	ldrh	r1, [r7, #10]
 8003710:	4b20      	ldr	r3, [pc, #128]	@ (8003794 <I2C_RequestMemoryRead+0xa4>)
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	2300      	movs	r3, #0
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 fa26 	bl	8003b68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	69b9      	ldr	r1, [r7, #24]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f8b6 	bl	8003892 <I2C_WaitOnTXISFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e02c      	b.n	800378a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d105      	bne.n	8003742 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003736:	893b      	ldrh	r3, [r7, #8]
 8003738:	b2da      	uxtb	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003740:	e015      	b.n	800376e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003742:	893b      	ldrh	r3, [r7, #8]
 8003744:	0a1b      	lsrs	r3, r3, #8
 8003746:	b29b      	uxth	r3, r3
 8003748:	b2da      	uxtb	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	69b9      	ldr	r1, [r7, #24]
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f89c 	bl	8003892 <I2C_WaitOnTXISFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e012      	b.n	800378a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003764:	893b      	ldrh	r3, [r7, #8]
 8003766:	b2da      	uxtb	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2200      	movs	r2, #0
 8003776:	2140      	movs	r1, #64	@ 0x40
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f831 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	80002000 	.word	0x80002000

08003798 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d103      	bne.n	80037b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2200      	movs	r2, #0
 80037b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d007      	beq.n	80037d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	619a      	str	r2, [r3, #24]
  }
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	4613      	mov	r3, r2
 80037ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037f0:	e03b      	b.n	800386a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	6839      	ldr	r1, [r7, #0]
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f8d6 	bl	80039a8 <I2C_IsErrorOccurred>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e041      	b.n	800388a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d02d      	beq.n	800386a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380e:	f7fe fefb 	bl	8002608 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d302      	bcc.n	8003824 <I2C_WaitOnFlagUntilTimeout+0x44>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d122      	bne.n	800386a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699a      	ldr	r2, [r3, #24]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	4013      	ands	r3, r2
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	429a      	cmp	r2, r3
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	429a      	cmp	r2, r3
 8003840:	d113      	bne.n	800386a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003846:	f043 0220 	orr.w	r2, r3, #32
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e00f      	b.n	800388a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	699a      	ldr	r2, [r3, #24]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4013      	ands	r3, r2
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	429a      	cmp	r2, r3
 8003878:	bf0c      	ite	eq
 800387a:	2301      	moveq	r3, #1
 800387c:	2300      	movne	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	79fb      	ldrb	r3, [r7, #7]
 8003884:	429a      	cmp	r2, r3
 8003886:	d0b4      	beq.n	80037f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800389e:	e033      	b.n	8003908 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f87f 	bl	80039a8 <I2C_IsErrorOccurred>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e031      	b.n	8003918 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ba:	d025      	beq.n	8003908 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038bc:	f7fe fea4 	bl	8002608 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d302      	bcc.n	80038d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d11a      	bne.n	8003908 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d013      	beq.n	8003908 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e4:	f043 0220 	orr.w	r2, r3, #32
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e007      	b.n	8003918 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b02      	cmp	r3, #2
 8003914:	d1c4      	bne.n	80038a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800392c:	e02f      	b.n	800398e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f838 	bl	80039a8 <I2C_IsErrorOccurred>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e02d      	b.n	800399e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003942:	f7fe fe61 	bl	8002608 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	429a      	cmp	r2, r3
 8003950:	d302      	bcc.n	8003958 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d11a      	bne.n	800398e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	2b20      	cmp	r3, #32
 8003964:	d013      	beq.n	800398e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396a:	f043 0220 	orr.w	r2, r3, #32
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e007      	b.n	800399e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b20      	cmp	r3, #32
 800399a:	d1c8      	bne.n	800392e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08a      	sub	sp, #40	@ 0x28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d068      	beq.n	8003aa6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2210      	movs	r2, #16
 80039da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039dc:	e049      	b.n	8003a72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e4:	d045      	beq.n	8003a72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039e6:	f7fe fe0f 	bl	8002608 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d302      	bcc.n	80039fc <I2C_IsErrorOccurred+0x54>
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d13a      	bne.n	8003a72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a1e:	d121      	bne.n	8003a64 <I2C_IsErrorOccurred+0xbc>
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a26:	d01d      	beq.n	8003a64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a28:	7cfb      	ldrb	r3, [r7, #19]
 8003a2a:	2b20      	cmp	r3, #32
 8003a2c:	d01a      	beq.n	8003a64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a3e:	f7fe fde3 	bl	8002608 <HAL_GetTick>
 8003a42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a44:	e00e      	b.n	8003a64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a46:	f7fe fddf 	bl	8002608 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b19      	cmp	r3, #25
 8003a52:	d907      	bls.n	8003a64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	f043 0320 	orr.w	r3, r3, #32
 8003a5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003a62:	e006      	b.n	8003a72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	d1e9      	bne.n	8003a46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d003      	beq.n	8003a88 <I2C_IsErrorOccurred+0xe0>
 8003a80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0aa      	beq.n	80039de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d103      	bne.n	8003a98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2220      	movs	r2, #32
 8003a96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	f043 0304 	orr.w	r3, r3, #4
 8003a9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00b      	beq.n	8003ad0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	f043 0301 	orr.w	r3, r3, #1
 8003abe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ac8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	f043 0308 	orr.w	r3, r3, #8
 8003ae0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003aea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00b      	beq.n	8003b14 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	f043 0302 	orr.w	r3, r3, #2
 8003b02:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003b14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01c      	beq.n	8003b56 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f7ff fe3b 	bl	8003798 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6859      	ldr	r1, [r3, #4]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b64 <I2C_IsErrorOccurred+0x1bc>)
 8003b2e:	400b      	ands	r3, r1
 8003b30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003b56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3728      	adds	r7, #40	@ 0x28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	fe00e800 	.word	0xfe00e800

08003b68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	460b      	mov	r3, r1
 8003b74:	817b      	strh	r3, [r7, #10]
 8003b76:	4613      	mov	r3, r2
 8003b78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b7a:	897b      	ldrh	r3, [r7, #10]
 8003b7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b80:	7a7b      	ldrb	r3, [r7, #9]
 8003b82:	041b      	lsls	r3, r3, #16
 8003b84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	0d5b      	lsrs	r3, r3, #21
 8003ba2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003ba6:	4b08      	ldr	r3, [pc, #32]	@ (8003bc8 <I2C_TransferConfig+0x60>)
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	43db      	mvns	r3, r3
 8003bac:	ea02 0103 	and.w	r1, r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003bba:	bf00      	nop
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	03ff63ff 	.word	0x03ff63ff

08003bcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b20      	cmp	r3, #32
 8003be0:	d138      	bne.n	8003c54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e032      	b.n	8003c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2224      	movs	r2, #36	@ 0x24
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0201 	bic.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6819      	ldr	r1, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	e000      	b.n	8003c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c54:	2302      	movs	r3, #2
  }
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b085      	sub	sp, #20
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d139      	bne.n	8003cec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e033      	b.n	8003cee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2224      	movs	r2, #36	@ 0x24
 8003c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0201 	bic.w	r2, r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003cb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	021b      	lsls	r3, r3, #8
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	e000      	b.n	8003cee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cec:	2302      	movs	r3, #2
  }
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b086      	sub	sp, #24
 8003cfe:	af02      	add	r7, sp, #8
 8003d00:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e101      	b.n	8003f10 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d106      	bne.n	8003d26 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7fd ffe7 	bl	8001cf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2203      	movs	r2, #3
 8003d2a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f002 fb97 	bl	800646c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	7c1a      	ldrb	r2, [r3, #16]
 8003d46:	f88d 2000 	strb.w	r2, [sp]
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d4e:	f002 fb60 	bl	8006412 <USB_CoreInit>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0d5      	b.n	8003f10 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f002 fb8f 	bl	800648e <USB_SetCurrentMode>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e0c6      	b.n	8003f10 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d82:	2300      	movs	r3, #0
 8003d84:	73fb      	strb	r3, [r7, #15]
 8003d86:	e04a      	b.n	8003e1e <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d88:	7bfa      	ldrb	r2, [r7, #15]
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	3315      	adds	r3, #21
 8003d98:	2201      	movs	r2, #1
 8003d9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d9c:	7bfa      	ldrb	r2, [r7, #15]
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	3314      	adds	r3, #20
 8003dac:	7bfa      	ldrb	r2, [r7, #15]
 8003dae:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003db0:	7bfa      	ldrb	r2, [r7, #15]
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	b298      	uxth	r0, r3
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	332e      	adds	r3, #46	@ 0x2e
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003dc8:	7bfa      	ldrb	r2, [r7, #15]
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	3318      	adds	r3, #24
 8003dd8:	2200      	movs	r2, #0
 8003dda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ddc:	7bfa      	ldrb	r2, [r7, #15]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	331c      	adds	r3, #28
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003df0:	7bfa      	ldrb	r2, [r7, #15]
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	3320      	adds	r3, #32
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e04:	7bfa      	ldrb	r2, [r7, #15]
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	3324      	adds	r3, #36	@ 0x24
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	73fb      	strb	r3, [r7, #15]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	791b      	ldrb	r3, [r3, #4]
 8003e22:	7bfa      	ldrb	r2, [r7, #15]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d3af      	bcc.n	8003d88 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e28:	2300      	movs	r3, #0
 8003e2a:	73fb      	strb	r3, [r7, #15]
 8003e2c:	e044      	b.n	8003eb8 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e2e:	7bfa      	ldrb	r2, [r7, #15]
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003e40:	2200      	movs	r2, #0
 8003e42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e44:	7bfa      	ldrb	r2, [r7, #15]
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003e56:	7bfa      	ldrb	r2, [r7, #15]
 8003e58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e5a:	7bfa      	ldrb	r2, [r7, #15]
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	4413      	add	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e70:	7bfa      	ldrb	r2, [r7, #15]
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e86:	7bfa      	ldrb	r2, [r7, #15]
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e9c:	7bfa      	ldrb	r2, [r7, #15]
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	73fb      	strb	r3, [r7, #15]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	791b      	ldrb	r3, [r3, #4]
 8003ebc:	7bfa      	ldrb	r2, [r7, #15]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d3b5      	bcc.n	8003e2e <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	7c1a      	ldrb	r2, [r3, #16]
 8003eca:	f88d 2000 	strb.w	r2, [sp]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ed2:	f002 fb29 	bl	8006528 <USB_DevInit>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e013      	b.n	8003f10 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	7b1b      	ldrb	r3, [r3, #12]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d102      	bne.n	8003f04 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f80a 	bl	8003f18 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f002 fcce 	bl	80068aa <USB_DevDisconnect>

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f4a:	f043 0303 	orr.w	r3, r3, #3
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f64:	4b05      	ldr	r3, [pc, #20]	@ (8003f7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a04      	ldr	r2, [pc, #16]	@ (8003f7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f6e:	6013      	str	r3, [r2, #0]
}
 8003f70:	bf00      	nop
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40007000 	.word	0x40007000

08003f80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f84:	4b04      	ldr	r3, [pc, #16]	@ (8003f98 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40007000 	.word	0x40007000

08003f9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003faa:	d130      	bne.n	800400e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fac:	4b23      	ldr	r3, [pc, #140]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fb8:	d038      	beq.n	800402c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fba:	4b20      	ldr	r3, [pc, #128]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fc4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fca:	4b1d      	ldr	r3, [pc, #116]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2232      	movs	r2, #50	@ 0x32
 8003fd0:	fb02 f303 	mul.w	r3, r2, r3
 8003fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8004044 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fda:	0c9b      	lsrs	r3, r3, #18
 8003fdc:	3301      	adds	r3, #1
 8003fde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fe0:	e002      	b.n	8003fe8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fe8:	4b14      	ldr	r3, [pc, #80]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ff4:	d102      	bne.n	8003ffc <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1f2      	bne.n	8003fe2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004008:	d110      	bne.n	800402c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e00f      	b.n	800402e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800400e:	4b0b      	ldr	r3, [pc, #44]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800401a:	d007      	beq.n	800402c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800401c:	4b07      	ldr	r3, [pc, #28]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004024:	4a05      	ldr	r2, [pc, #20]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004026:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800402a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40007000 	.word	0x40007000
 8004040:	2000000c 	.word	0x2000000c
 8004044:	431bde83 	.word	0x431bde83

08004048 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800404c:	4b05      	ldr	r3, [pc, #20]	@ (8004064 <HAL_PWREx_EnableVddUSB+0x1c>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	4a04      	ldr	r2, [pc, #16]	@ (8004064 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004052:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004056:	6053      	str	r3, [r2, #4]
}
 8004058:	bf00      	nop
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40007000 	.word	0x40007000

08004068 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af02      	add	r7, sp, #8
 800406e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004070:	f7fe faca 	bl	8002608 <HAL_GetTick>
 8004074:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e063      	b.n	8004148 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10b      	bne.n	80040a4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7fd fd01 	bl	8001a9c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800409a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f858 	bl	8004154 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	021a      	lsls	r2, r3, #8
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	2120      	movs	r1, #32
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f850 	bl	8004170 <QSPI_WaitFlagStateUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80040d4:	7afb      	ldrb	r3, [r7, #11]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d131      	bne.n	800413e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80040e4:	f023 0310 	bic.w	r3, r3, #16
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6852      	ldr	r2, [r2, #4]
 80040ec:	0611      	lsls	r1, r2, #24
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	68d2      	ldr	r2, [r2, #12]
 80040f2:	4311      	orrs	r1, r2
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	430b      	orrs	r3, r1
 80040fa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	4b13      	ldr	r3, [pc, #76]	@ (8004150 <HAL_QSPI_Init+0xe8>)
 8004104:	4013      	ands	r3, r2
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6912      	ldr	r2, [r2, #16]
 800410a:	0411      	lsls	r1, r2, #16
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6952      	ldr	r2, [r2, #20]
 8004110:	4311      	orrs	r1, r2
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6992      	ldr	r2, [r2, #24]
 8004116:	4311      	orrs	r1, r2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	430b      	orrs	r3, r1
 800411e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8004146:	7afb      	ldrb	r3, [r7, #11]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	ffe0f8fe 	.word	0xffe0f8fe

08004154 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	4613      	mov	r3, r2
 800417e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004180:	e01a      	b.n	80041b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004188:	d016      	beq.n	80041b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418a:	f7fe fa3d 	bl	8002608 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	429a      	cmp	r2, r3
 8004198:	d302      	bcc.n	80041a0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10b      	bne.n	80041b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2204      	movs	r2, #4
 80041a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ac:	f043 0201 	orr.w	r2, r3, #1
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e00e      	b.n	80041d6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	bf14      	ite	ne
 80041c6:	2301      	movne	r3, #1
 80041c8:	2300      	moveq	r3, #0
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d1d6      	bne.n	8004182 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e3ca      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041f2:	4b97      	ldr	r3, [pc, #604]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
 80041fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041fc:	4b94      	ldr	r3, [pc, #592]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0303 	and.w	r3, r3, #3
 8004204:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 80e4 	beq.w	80043dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d007      	beq.n	800422a <HAL_RCC_OscConfig+0x4a>
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	2b0c      	cmp	r3, #12
 800421e:	f040 808b 	bne.w	8004338 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2b01      	cmp	r3, #1
 8004226:	f040 8087 	bne.w	8004338 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800422a:	4b89      	ldr	r3, [pc, #548]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d005      	beq.n	8004242 <HAL_RCC_OscConfig+0x62>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e3a2      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1a      	ldr	r2, [r3, #32]
 8004246:	4b82      	ldr	r3, [pc, #520]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d004      	beq.n	800425c <HAL_RCC_OscConfig+0x7c>
 8004252:	4b7f      	ldr	r3, [pc, #508]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800425a:	e005      	b.n	8004268 <HAL_RCC_OscConfig+0x88>
 800425c:	4b7c      	ldr	r3, [pc, #496]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 800425e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004262:	091b      	lsrs	r3, r3, #4
 8004264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004268:	4293      	cmp	r3, r2
 800426a:	d223      	bcs.n	80042b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fd55 	bl	8004d20 <RCC_SetFlashLatencyFromMSIRange>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e383      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004280:	4b73      	ldr	r3, [pc, #460]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a72      	ldr	r2, [pc, #456]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 8004286:	f043 0308 	orr.w	r3, r3, #8
 800428a:	6013      	str	r3, [r2, #0]
 800428c:	4b70      	ldr	r3, [pc, #448]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	496d      	ldr	r1, [pc, #436]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 800429a:	4313      	orrs	r3, r2
 800429c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800429e:	4b6c      	ldr	r3, [pc, #432]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	4968      	ldr	r1, [pc, #416]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	604b      	str	r3, [r1, #4]
 80042b2:	e025      	b.n	8004300 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042b4:	4b66      	ldr	r3, [pc, #408]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a65      	ldr	r2, [pc, #404]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 80042ba:	f043 0308 	orr.w	r3, r3, #8
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	4b63      	ldr	r3, [pc, #396]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	4960      	ldr	r1, [pc, #384]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	495b      	ldr	r1, [pc, #364]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d109      	bne.n	8004300 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fd15 	bl	8004d20 <RCC_SetFlashLatencyFromMSIRange>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e343      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004300:	f000 fc4a 	bl	8004b98 <HAL_RCC_GetSysClockFreq>
 8004304:	4602      	mov	r2, r0
 8004306:	4b52      	ldr	r3, [pc, #328]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	091b      	lsrs	r3, r3, #4
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	4950      	ldr	r1, [pc, #320]	@ (8004454 <HAL_RCC_OscConfig+0x274>)
 8004312:	5ccb      	ldrb	r3, [r1, r3]
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	fa22 f303 	lsr.w	r3, r2, r3
 800431c:	4a4e      	ldr	r2, [pc, #312]	@ (8004458 <HAL_RCC_OscConfig+0x278>)
 800431e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004320:	4b4e      	ldr	r3, [pc, #312]	@ (800445c <HAL_RCC_OscConfig+0x27c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7fe f91f 	bl	8002568 <HAL_InitTick>
 800432a:	4603      	mov	r3, r0
 800432c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800432e:	7bfb      	ldrb	r3, [r7, #15]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d052      	beq.n	80043da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
 8004336:	e327      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d032      	beq.n	80043a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004340:	4b43      	ldr	r3, [pc, #268]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a42      	ldr	r2, [pc, #264]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800434c:	f7fe f95c 	bl	8002608 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004354:	f7fe f958 	bl	8002608 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e310      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004366:	4b3a      	ldr	r3, [pc, #232]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0f0      	beq.n	8004354 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004372:	4b37      	ldr	r3, [pc, #220]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a36      	ldr	r2, [pc, #216]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 8004378:	f043 0308 	orr.w	r3, r3, #8
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	4b34      	ldr	r3, [pc, #208]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	4931      	ldr	r1, [pc, #196]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 800438c:	4313      	orrs	r3, r2
 800438e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004390:	4b2f      	ldr	r3, [pc, #188]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	492c      	ldr	r1, [pc, #176]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	604b      	str	r3, [r1, #4]
 80043a4:	e01a      	b.n	80043dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80043a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a29      	ldr	r2, [pc, #164]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043b2:	f7fe f929 	bl	8002608 <HAL_GetTick>
 80043b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043b8:	e008      	b.n	80043cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043ba:	f7fe f925 	bl	8002608 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e2dd      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043cc:	4b20      	ldr	r3, [pc, #128]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1f0      	bne.n	80043ba <HAL_RCC_OscConfig+0x1da>
 80043d8:	e000      	b.n	80043dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d074      	beq.n	80044d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d005      	beq.n	80043fa <HAL_RCC_OscConfig+0x21a>
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2b0c      	cmp	r3, #12
 80043f2:	d10e      	bne.n	8004412 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d10b      	bne.n	8004412 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043fa:	4b15      	ldr	r3, [pc, #84]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d064      	beq.n	80044d0 <HAL_RCC_OscConfig+0x2f0>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d160      	bne.n	80044d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e2ba      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800441a:	d106      	bne.n	800442a <HAL_RCC_OscConfig+0x24a>
 800441c:	4b0c      	ldr	r3, [pc, #48]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a0b      	ldr	r2, [pc, #44]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 8004422:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	e026      	b.n	8004478 <HAL_RCC_OscConfig+0x298>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004432:	d115      	bne.n	8004460 <HAL_RCC_OscConfig+0x280>
 8004434:	4b06      	ldr	r3, [pc, #24]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a05      	ldr	r2, [pc, #20]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 800443a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	4b03      	ldr	r3, [pc, #12]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a02      	ldr	r2, [pc, #8]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 8004446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	e014      	b.n	8004478 <HAL_RCC_OscConfig+0x298>
 800444e:	bf00      	nop
 8004450:	40021000 	.word	0x40021000
 8004454:	0800c300 	.word	0x0800c300
 8004458:	2000000c 	.word	0x2000000c
 800445c:	20000044 	.word	0x20000044
 8004460:	4ba0      	ldr	r3, [pc, #640]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a9f      	ldr	r2, [pc, #636]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 8004466:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	4b9d      	ldr	r3, [pc, #628]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a9c      	ldr	r2, [pc, #624]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 8004472:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d013      	beq.n	80044a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fe f8c2 	bl	8002608 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004488:	f7fe f8be 	bl	8002608 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b64      	cmp	r3, #100	@ 0x64
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e276      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800449a:	4b92      	ldr	r3, [pc, #584]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x2a8>
 80044a6:	e014      	b.n	80044d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fe f8ae 	bl	8002608 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044b0:	f7fe f8aa 	bl	8002608 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b64      	cmp	r3, #100	@ 0x64
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e262      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044c2:	4b88      	ldr	r3, [pc, #544]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x2d0>
 80044ce:	e000      	b.n	80044d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d060      	beq.n	80045a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d005      	beq.n	80044f0 <HAL_RCC_OscConfig+0x310>
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b0c      	cmp	r3, #12
 80044e8:	d119      	bne.n	800451e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d116      	bne.n	800451e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044f0:	4b7c      	ldr	r3, [pc, #496]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_RCC_OscConfig+0x328>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e23f      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004508:	4b76      	ldr	r3, [pc, #472]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	061b      	lsls	r3, r3, #24
 8004516:	4973      	ldr	r1, [pc, #460]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 8004518:	4313      	orrs	r3, r2
 800451a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800451c:	e040      	b.n	80045a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d023      	beq.n	800456e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004526:	4b6f      	ldr	r3, [pc, #444]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a6e      	ldr	r2, [pc, #440]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 800452c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004532:	f7fe f869 	bl	8002608 <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800453a:	f7fe f865 	bl	8002608 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e21d      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800454c:	4b65      	ldr	r3, [pc, #404]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f0      	beq.n	800453a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004558:	4b62      	ldr	r3, [pc, #392]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	061b      	lsls	r3, r3, #24
 8004566:	495f      	ldr	r1, [pc, #380]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 8004568:	4313      	orrs	r3, r2
 800456a:	604b      	str	r3, [r1, #4]
 800456c:	e018      	b.n	80045a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800456e:	4b5d      	ldr	r3, [pc, #372]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a5c      	ldr	r2, [pc, #368]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 8004574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457a:	f7fe f845 	bl	8002608 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004582:	f7fe f841 	bl	8002608 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e1f9      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004594:	4b53      	ldr	r3, [pc, #332]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1f0      	bne.n	8004582 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d03c      	beq.n	8004626 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01c      	beq.n	80045ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045b4:	4b4b      	ldr	r3, [pc, #300]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 80045b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045ba:	4a4a      	ldr	r2, [pc, #296]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c4:	f7fe f820 	bl	8002608 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045cc:	f7fe f81c 	bl	8002608 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e1d4      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045de:	4b41      	ldr	r3, [pc, #260]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 80045e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0ef      	beq.n	80045cc <HAL_RCC_OscConfig+0x3ec>
 80045ec:	e01b      	b.n	8004626 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ee:	4b3d      	ldr	r3, [pc, #244]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 80045f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045f4:	4a3b      	ldr	r2, [pc, #236]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 80045f6:	f023 0301 	bic.w	r3, r3, #1
 80045fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fe:	f7fe f803 	bl	8002608 <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004606:	f7fd ffff 	bl	8002608 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e1b7      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004618:	4b32      	ldr	r3, [pc, #200]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 800461a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1ef      	bne.n	8004606 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 80a6 	beq.w	8004780 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004634:	2300      	movs	r3, #0
 8004636:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004638:	4b2a      	ldr	r3, [pc, #168]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 800463a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10d      	bne.n	8004660 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004644:	4b27      	ldr	r3, [pc, #156]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 8004646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004648:	4a26      	ldr	r2, [pc, #152]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 800464a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800464e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004650:	4b24      	ldr	r3, [pc, #144]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 8004652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800465c:	2301      	movs	r3, #1
 800465e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004660:	4b21      	ldr	r3, [pc, #132]	@ (80046e8 <HAL_RCC_OscConfig+0x508>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004668:	2b00      	cmp	r3, #0
 800466a:	d118      	bne.n	800469e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800466c:	4b1e      	ldr	r3, [pc, #120]	@ (80046e8 <HAL_RCC_OscConfig+0x508>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a1d      	ldr	r2, [pc, #116]	@ (80046e8 <HAL_RCC_OscConfig+0x508>)
 8004672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004676:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004678:	f7fd ffc6 	bl	8002608 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004680:	f7fd ffc2 	bl	8002608 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e17a      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004692:	4b15      	ldr	r3, [pc, #84]	@ (80046e8 <HAL_RCC_OscConfig+0x508>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d108      	bne.n	80046b8 <HAL_RCC_OscConfig+0x4d8>
 80046a6:	4b0f      	ldr	r3, [pc, #60]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 80046a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ac:	4a0d      	ldr	r2, [pc, #52]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 80046ae:	f043 0301 	orr.w	r3, r3, #1
 80046b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046b6:	e029      	b.n	800470c <HAL_RCC_OscConfig+0x52c>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b05      	cmp	r3, #5
 80046be:	d115      	bne.n	80046ec <HAL_RCC_OscConfig+0x50c>
 80046c0:	4b08      	ldr	r3, [pc, #32]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c6:	4a07      	ldr	r2, [pc, #28]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 80046c8:	f043 0304 	orr.w	r3, r3, #4
 80046cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046d0:	4b04      	ldr	r3, [pc, #16]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 80046d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d6:	4a03      	ldr	r2, [pc, #12]	@ (80046e4 <HAL_RCC_OscConfig+0x504>)
 80046d8:	f043 0301 	orr.w	r3, r3, #1
 80046dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046e0:	e014      	b.n	800470c <HAL_RCC_OscConfig+0x52c>
 80046e2:	bf00      	nop
 80046e4:	40021000 	.word	0x40021000
 80046e8:	40007000 	.word	0x40007000
 80046ec:	4b9c      	ldr	r3, [pc, #624]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 80046ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f2:	4a9b      	ldr	r2, [pc, #620]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 80046f4:	f023 0301 	bic.w	r3, r3, #1
 80046f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046fc:	4b98      	ldr	r3, [pc, #608]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004702:	4a97      	ldr	r2, [pc, #604]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 8004704:	f023 0304 	bic.w	r3, r3, #4
 8004708:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d016      	beq.n	8004742 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004714:	f7fd ff78 	bl	8002608 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800471a:	e00a      	b.n	8004732 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800471c:	f7fd ff74 	bl	8002608 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800472a:	4293      	cmp	r3, r2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e12a      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004732:	4b8b      	ldr	r3, [pc, #556]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 8004734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0ed      	beq.n	800471c <HAL_RCC_OscConfig+0x53c>
 8004740:	e015      	b.n	800476e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004742:	f7fd ff61 	bl	8002608 <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004748:	e00a      	b.n	8004760 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800474a:	f7fd ff5d 	bl	8002608 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004758:	4293      	cmp	r3, r2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e113      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004760:	4b7f      	ldr	r3, [pc, #508]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1ed      	bne.n	800474a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800476e:	7ffb      	ldrb	r3, [r7, #31]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d105      	bne.n	8004780 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004774:	4b7a      	ldr	r3, [pc, #488]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 8004776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004778:	4a79      	ldr	r2, [pc, #484]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 800477a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800477e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 80fe 	beq.w	8004986 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478e:	2b02      	cmp	r3, #2
 8004790:	f040 80d0 	bne.w	8004934 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004794:	4b72      	ldr	r3, [pc, #456]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f003 0203 	and.w	r2, r3, #3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d130      	bne.n	800480a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b2:	3b01      	subs	r3, #1
 80047b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d127      	bne.n	800480a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d11f      	bne.n	800480a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80047d4:	2a07      	cmp	r2, #7
 80047d6:	bf14      	ite	ne
 80047d8:	2201      	movne	r2, #1
 80047da:	2200      	moveq	r2, #0
 80047dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047de:	4293      	cmp	r3, r2
 80047e0:	d113      	bne.n	800480a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ec:	085b      	lsrs	r3, r3, #1
 80047ee:	3b01      	subs	r3, #1
 80047f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d109      	bne.n	800480a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004800:	085b      	lsrs	r3, r3, #1
 8004802:	3b01      	subs	r3, #1
 8004804:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004806:	429a      	cmp	r2, r3
 8004808:	d06e      	beq.n	80048e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b0c      	cmp	r3, #12
 800480e:	d069      	beq.n	80048e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004810:	4b53      	ldr	r3, [pc, #332]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d105      	bne.n	8004828 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800481c:	4b50      	ldr	r3, [pc, #320]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e0ad      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800482c:	4b4c      	ldr	r3, [pc, #304]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a4b      	ldr	r2, [pc, #300]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 8004832:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004836:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004838:	f7fd fee6 	bl	8002608 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004840:	f7fd fee2 	bl	8002608 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e09a      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004852:	4b43      	ldr	r3, [pc, #268]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800485e:	4b40      	ldr	r3, [pc, #256]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	4b40      	ldr	r3, [pc, #256]	@ (8004964 <HAL_RCC_OscConfig+0x784>)
 8004864:	4013      	ands	r3, r2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800486e:	3a01      	subs	r2, #1
 8004870:	0112      	lsls	r2, r2, #4
 8004872:	4311      	orrs	r1, r2
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004878:	0212      	lsls	r2, r2, #8
 800487a:	4311      	orrs	r1, r2
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004880:	0852      	lsrs	r2, r2, #1
 8004882:	3a01      	subs	r2, #1
 8004884:	0552      	lsls	r2, r2, #21
 8004886:	4311      	orrs	r1, r2
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800488c:	0852      	lsrs	r2, r2, #1
 800488e:	3a01      	subs	r2, #1
 8004890:	0652      	lsls	r2, r2, #25
 8004892:	4311      	orrs	r1, r2
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004898:	0912      	lsrs	r2, r2, #4
 800489a:	0452      	lsls	r2, r2, #17
 800489c:	430a      	orrs	r2, r1
 800489e:	4930      	ldr	r1, [pc, #192]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80048a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a2d      	ldr	r2, [pc, #180]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 80048aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 80048b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048bc:	f7fd fea4 	bl	8002608 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c4:	f7fd fea0 	bl	8002608 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e058      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048d6:	4b22      	ldr	r3, [pc, #136]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048e2:	e050      	b.n	8004986 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e04f      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d148      	bne.n	8004986 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80048f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a19      	ldr	r2, [pc, #100]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 80048fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004900:	4b17      	ldr	r3, [pc, #92]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4a16      	ldr	r2, [pc, #88]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 8004906:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800490a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800490c:	f7fd fe7c 	bl	8002608 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004914:	f7fd fe78 	bl	8002608 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e030      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004926:	4b0e      	ldr	r3, [pc, #56]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f0      	beq.n	8004914 <HAL_RCC_OscConfig+0x734>
 8004932:	e028      	b.n	8004986 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	2b0c      	cmp	r3, #12
 8004938:	d023      	beq.n	8004982 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800493a:	4b09      	ldr	r3, [pc, #36]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a08      	ldr	r2, [pc, #32]	@ (8004960 <HAL_RCC_OscConfig+0x780>)
 8004940:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004946:	f7fd fe5f 	bl	8002608 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800494c:	e00c      	b.n	8004968 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800494e:	f7fd fe5b 	bl	8002608 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d905      	bls.n	8004968 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e013      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
 8004960:	40021000 	.word	0x40021000
 8004964:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004968:	4b09      	ldr	r3, [pc, #36]	@ (8004990 <HAL_RCC_OscConfig+0x7b0>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1ec      	bne.n	800494e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004974:	4b06      	ldr	r3, [pc, #24]	@ (8004990 <HAL_RCC_OscConfig+0x7b0>)
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	4905      	ldr	r1, [pc, #20]	@ (8004990 <HAL_RCC_OscConfig+0x7b0>)
 800497a:	4b06      	ldr	r3, [pc, #24]	@ (8004994 <HAL_RCC_OscConfig+0x7b4>)
 800497c:	4013      	ands	r3, r2
 800497e:	60cb      	str	r3, [r1, #12]
 8004980:	e001      	b.n	8004986 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3720      	adds	r7, #32
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40021000 	.word	0x40021000
 8004994:	feeefffc 	.word	0xfeeefffc

08004998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0e7      	b.n	8004b7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049ac:	4b75      	ldr	r3, [pc, #468]	@ (8004b84 <HAL_RCC_ClockConfig+0x1ec>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d910      	bls.n	80049dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ba:	4b72      	ldr	r3, [pc, #456]	@ (8004b84 <HAL_RCC_ClockConfig+0x1ec>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f023 0207 	bic.w	r2, r3, #7
 80049c2:	4970      	ldr	r1, [pc, #448]	@ (8004b84 <HAL_RCC_ClockConfig+0x1ec>)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ca:	4b6e      	ldr	r3, [pc, #440]	@ (8004b84 <HAL_RCC_ClockConfig+0x1ec>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d001      	beq.n	80049dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0cf      	b.n	8004b7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d010      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	4b66      	ldr	r3, [pc, #408]	@ (8004b88 <HAL_RCC_ClockConfig+0x1f0>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d908      	bls.n	8004a0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f8:	4b63      	ldr	r3, [pc, #396]	@ (8004b88 <HAL_RCC_ClockConfig+0x1f0>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	4960      	ldr	r1, [pc, #384]	@ (8004b88 <HAL_RCC_ClockConfig+0x1f0>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d04c      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b03      	cmp	r3, #3
 8004a1c:	d107      	bne.n	8004a2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a1e:	4b5a      	ldr	r3, [pc, #360]	@ (8004b88 <HAL_RCC_ClockConfig+0x1f0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d121      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e0a6      	b.n	8004b7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d107      	bne.n	8004a46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a36:	4b54      	ldr	r3, [pc, #336]	@ (8004b88 <HAL_RCC_ClockConfig+0x1f0>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d115      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e09a      	b.n	8004b7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d107      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a4e:	4b4e      	ldr	r3, [pc, #312]	@ (8004b88 <HAL_RCC_ClockConfig+0x1f0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e08e      	b.n	8004b7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004b88 <HAL_RCC_ClockConfig+0x1f0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e086      	b.n	8004b7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a6e:	4b46      	ldr	r3, [pc, #280]	@ (8004b88 <HAL_RCC_ClockConfig+0x1f0>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f023 0203 	bic.w	r2, r3, #3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	4943      	ldr	r1, [pc, #268]	@ (8004b88 <HAL_RCC_ClockConfig+0x1f0>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a80:	f7fd fdc2 	bl	8002608 <HAL_GetTick>
 8004a84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a86:	e00a      	b.n	8004a9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a88:	f7fd fdbe 	bl	8002608 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e06e      	b.n	8004b7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9e:	4b3a      	ldr	r3, [pc, #232]	@ (8004b88 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 020c 	and.w	r2, r3, #12
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d1eb      	bne.n	8004a88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d010      	beq.n	8004ade <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	4b31      	ldr	r3, [pc, #196]	@ (8004b88 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d208      	bcs.n	8004ade <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004acc:	4b2e      	ldr	r3, [pc, #184]	@ (8004b88 <HAL_RCC_ClockConfig+0x1f0>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	492b      	ldr	r1, [pc, #172]	@ (8004b88 <HAL_RCC_ClockConfig+0x1f0>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ade:	4b29      	ldr	r3, [pc, #164]	@ (8004b84 <HAL_RCC_ClockConfig+0x1ec>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d210      	bcs.n	8004b0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aec:	4b25      	ldr	r3, [pc, #148]	@ (8004b84 <HAL_RCC_ClockConfig+0x1ec>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f023 0207 	bic.w	r2, r3, #7
 8004af4:	4923      	ldr	r1, [pc, #140]	@ (8004b84 <HAL_RCC_ClockConfig+0x1ec>)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afc:	4b21      	ldr	r3, [pc, #132]	@ (8004b84 <HAL_RCC_ClockConfig+0x1ec>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d001      	beq.n	8004b0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e036      	b.n	8004b7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0304 	and.w	r3, r3, #4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d008      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004b88 <HAL_RCC_ClockConfig+0x1f0>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	4918      	ldr	r1, [pc, #96]	@ (8004b88 <HAL_RCC_ClockConfig+0x1f0>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0308 	and.w	r3, r3, #8
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d009      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b38:	4b13      	ldr	r3, [pc, #76]	@ (8004b88 <HAL_RCC_ClockConfig+0x1f0>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4910      	ldr	r1, [pc, #64]	@ (8004b88 <HAL_RCC_ClockConfig+0x1f0>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b4c:	f000 f824 	bl	8004b98 <HAL_RCC_GetSysClockFreq>
 8004b50:	4602      	mov	r2, r0
 8004b52:	4b0d      	ldr	r3, [pc, #52]	@ (8004b88 <HAL_RCC_ClockConfig+0x1f0>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	091b      	lsrs	r3, r3, #4
 8004b58:	f003 030f 	and.w	r3, r3, #15
 8004b5c:	490b      	ldr	r1, [pc, #44]	@ (8004b8c <HAL_RCC_ClockConfig+0x1f4>)
 8004b5e:	5ccb      	ldrb	r3, [r1, r3]
 8004b60:	f003 031f 	and.w	r3, r3, #31
 8004b64:	fa22 f303 	lsr.w	r3, r2, r3
 8004b68:	4a09      	ldr	r2, [pc, #36]	@ (8004b90 <HAL_RCC_ClockConfig+0x1f8>)
 8004b6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b6c:	4b09      	ldr	r3, [pc, #36]	@ (8004b94 <HAL_RCC_ClockConfig+0x1fc>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fd fcf9 	bl	8002568 <HAL_InitTick>
 8004b76:	4603      	mov	r3, r0
 8004b78:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b7a:	7afb      	ldrb	r3, [r7, #11]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	40022000 	.word	0x40022000
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	0800c300 	.word	0x0800c300
 8004b90:	2000000c 	.word	0x2000000c
 8004b94:	20000044 	.word	0x20000044

08004b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b089      	sub	sp, #36	@ 0x24
 8004b9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61fb      	str	r3, [r7, #28]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 030c 	and.w	r3, r3, #12
 8004bae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bb0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 0303 	and.w	r3, r3, #3
 8004bb8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <HAL_RCC_GetSysClockFreq+0x34>
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	2b0c      	cmp	r3, #12
 8004bc4:	d121      	bne.n	8004c0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d11e      	bne.n	8004c0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004bcc:	4b34      	ldr	r3, [pc, #208]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0308 	and.w	r3, r3, #8
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d107      	bne.n	8004be8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004bd8:	4b31      	ldr	r3, [pc, #196]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bde:	0a1b      	lsrs	r3, r3, #8
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	61fb      	str	r3, [r7, #28]
 8004be6:	e005      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004be8:	4b2d      	ldr	r3, [pc, #180]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	091b      	lsrs	r3, r3, #4
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8004ca4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bfc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10d      	bne.n	8004c20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c08:	e00a      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d102      	bne.n	8004c16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c10:	4b25      	ldr	r3, [pc, #148]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c12:	61bb      	str	r3, [r7, #24]
 8004c14:	e004      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d101      	bne.n	8004c20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c1c:	4b23      	ldr	r3, [pc, #140]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x114>)
 8004c1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	2b0c      	cmp	r3, #12
 8004c24:	d134      	bne.n	8004c90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c26:	4b1e      	ldr	r3, [pc, #120]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d003      	beq.n	8004c3e <HAL_RCC_GetSysClockFreq+0xa6>
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b03      	cmp	r3, #3
 8004c3a:	d003      	beq.n	8004c44 <HAL_RCC_GetSysClockFreq+0xac>
 8004c3c:	e005      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c40:	617b      	str	r3, [r7, #20]
      break;
 8004c42:	e005      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c44:	4b19      	ldr	r3, [pc, #100]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x114>)
 8004c46:	617b      	str	r3, [r7, #20]
      break;
 8004c48:	e002      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	617b      	str	r3, [r7, #20]
      break;
 8004c4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c50:	4b13      	ldr	r3, [pc, #76]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	091b      	lsrs	r3, r3, #4
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	0a1b      	lsrs	r3, r3, #8
 8004c64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	fb03 f202 	mul.w	r2, r3, r2
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c76:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	0e5b      	lsrs	r3, r3, #25
 8004c7c:	f003 0303 	and.w	r3, r3, #3
 8004c80:	3301      	adds	r3, #1
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c90:	69bb      	ldr	r3, [r7, #24]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3724      	adds	r7, #36	@ 0x24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	0800c318 	.word	0x0800c318
 8004ca8:	00f42400 	.word	0x00f42400
 8004cac:	007a1200 	.word	0x007a1200

08004cb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cb4:	4b03      	ldr	r3, [pc, #12]	@ (8004cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	2000000c 	.word	0x2000000c

08004cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ccc:	f7ff fff0 	bl	8004cb0 <HAL_RCC_GetHCLKFreq>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	4b06      	ldr	r3, [pc, #24]	@ (8004cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	0a1b      	lsrs	r3, r3, #8
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	4904      	ldr	r1, [pc, #16]	@ (8004cf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cde:	5ccb      	ldrb	r3, [r1, r3]
 8004ce0:	f003 031f 	and.w	r3, r3, #31
 8004ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	0800c310 	.word	0x0800c310

08004cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004cf8:	f7ff ffda 	bl	8004cb0 <HAL_RCC_GetHCLKFreq>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	4b06      	ldr	r3, [pc, #24]	@ (8004d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	0adb      	lsrs	r3, r3, #11
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	4904      	ldr	r1, [pc, #16]	@ (8004d1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d0a:	5ccb      	ldrb	r3, [r1, r3]
 8004d0c:	f003 031f 	and.w	r3, r3, #31
 8004d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	0800c310 	.word	0x0800c310

08004d20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d28:	2300      	movs	r3, #0
 8004d2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8004dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d38:	f7ff f922 	bl	8003f80 <HAL_PWREx_GetVoltageRange>
 8004d3c:	6178      	str	r0, [r7, #20]
 8004d3e:	e014      	b.n	8004d6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d40:	4b25      	ldr	r3, [pc, #148]	@ (8004dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d44:	4a24      	ldr	r2, [pc, #144]	@ (8004dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d4c:	4b22      	ldr	r3, [pc, #136]	@ (8004dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d58:	f7ff f912 	bl	8003f80 <HAL_PWREx_GetVoltageRange>
 8004d5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d62:	4a1d      	ldr	r2, [pc, #116]	@ (8004dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d68:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d70:	d10b      	bne.n	8004d8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b80      	cmp	r3, #128	@ 0x80
 8004d76:	d919      	bls.n	8004dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2ba0      	cmp	r3, #160	@ 0xa0
 8004d7c:	d902      	bls.n	8004d84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d7e:	2302      	movs	r3, #2
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	e013      	b.n	8004dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d84:	2301      	movs	r3, #1
 8004d86:	613b      	str	r3, [r7, #16]
 8004d88:	e010      	b.n	8004dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b80      	cmp	r3, #128	@ 0x80
 8004d8e:	d902      	bls.n	8004d96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004d90:	2303      	movs	r3, #3
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	e00a      	b.n	8004dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b80      	cmp	r3, #128	@ 0x80
 8004d9a:	d102      	bne.n	8004da2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	613b      	str	r3, [r7, #16]
 8004da0:	e004      	b.n	8004dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b70      	cmp	r3, #112	@ 0x70
 8004da6:	d101      	bne.n	8004dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004da8:	2301      	movs	r3, #1
 8004daa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004dac:	4b0b      	ldr	r3, [pc, #44]	@ (8004ddc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f023 0207 	bic.w	r2, r3, #7
 8004db4:	4909      	ldr	r1, [pc, #36]	@ (8004ddc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004dbc:	4b07      	ldr	r3, [pc, #28]	@ (8004ddc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d001      	beq.n	8004dce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	40022000 	.word	0x40022000

08004de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004de8:	2300      	movs	r3, #0
 8004dea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dec:	2300      	movs	r3, #0
 8004dee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d041      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e00:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e04:	d02a      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e06:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e0a:	d824      	bhi.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e10:	d008      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e16:	d81e      	bhi.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004e1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e20:	d010      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e22:	e018      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e24:	4b86      	ldr	r3, [pc, #536]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	4a85      	ldr	r2, [pc, #532]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e2e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e30:	e015      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3304      	adds	r3, #4
 8004e36:	2100      	movs	r1, #0
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 facb 	bl	80053d4 <RCCEx_PLLSAI1_Config>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e42:	e00c      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3320      	adds	r3, #32
 8004e48:	2100      	movs	r1, #0
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fbb6 	bl	80055bc <RCCEx_PLLSAI2_Config>
 8004e50:	4603      	mov	r3, r0
 8004e52:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e54:	e003      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	74fb      	strb	r3, [r7, #19]
      break;
 8004e5a:	e000      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e5e:	7cfb      	ldrb	r3, [r7, #19]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10b      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e64:	4b76      	ldr	r3, [pc, #472]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e72:	4973      	ldr	r1, [pc, #460]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004e7a:	e001      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e7c:	7cfb      	ldrb	r3, [r7, #19]
 8004e7e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d041      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e94:	d02a      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004e96:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e9a:	d824      	bhi.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004e9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ea0:	d008      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ea2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ea6:	d81e      	bhi.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004eac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004eb0:	d010      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004eb2:	e018      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004eb4:	4b62      	ldr	r3, [pc, #392]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	4a61      	ldr	r2, [pc, #388]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ebe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ec0:	e015      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 fa83 	bl	80053d4 <RCCEx_PLLSAI1_Config>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ed2:	e00c      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3320      	adds	r3, #32
 8004ed8:	2100      	movs	r1, #0
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fb6e 	bl	80055bc <RCCEx_PLLSAI2_Config>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ee4:	e003      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	74fb      	strb	r3, [r7, #19]
      break;
 8004eea:	e000      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004eec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eee:	7cfb      	ldrb	r3, [r7, #19]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10b      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ef4:	4b52      	ldr	r3, [pc, #328]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004efa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f02:	494f      	ldr	r1, [pc, #316]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004f0a:	e001      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0c:	7cfb      	ldrb	r3, [r7, #19]
 8004f0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 80a0 	beq.w	800505e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f22:	4b47      	ldr	r3, [pc, #284]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004f32:	2300      	movs	r3, #0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00d      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f38:	4b41      	ldr	r3, [pc, #260]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f3c:	4a40      	ldr	r2, [pc, #256]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f42:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f44:	4b3e      	ldr	r3, [pc, #248]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f50:	2301      	movs	r3, #1
 8004f52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f54:	4b3b      	ldr	r3, [pc, #236]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a3a      	ldr	r2, [pc, #232]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f60:	f7fd fb52 	bl	8002608 <HAL_GetTick>
 8004f64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f66:	e009      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f68:	f7fd fb4e 	bl	8002608 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d902      	bls.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	74fb      	strb	r3, [r7, #19]
        break;
 8004f7a:	e005      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f7c:	4b31      	ldr	r3, [pc, #196]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0ef      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004f88:	7cfb      	ldrb	r3, [r7, #19]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d15c      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01f      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d019      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fac:	4b24      	ldr	r3, [pc, #144]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fb6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fb8:	4b21      	ldr	r3, [pc, #132]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fbe:	4a20      	ldr	r2, [pc, #128]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fce:	4a1c      	ldr	r2, [pc, #112]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fd8:	4a19      	ldr	r2, [pc, #100]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d016      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fea:	f7fd fb0d 	bl	8002608 <HAL_GetTick>
 8004fee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ff0:	e00b      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff2:	f7fd fb09 	bl	8002608 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005000:	4293      	cmp	r3, r2
 8005002:	d902      	bls.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	74fb      	strb	r3, [r7, #19]
            break;
 8005008:	e006      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800500a:	4b0d      	ldr	r3, [pc, #52]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800500c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0ec      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005018:	7cfb      	ldrb	r3, [r7, #19]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10c      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800501e:	4b08      	ldr	r3, [pc, #32]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005024:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800502e:	4904      	ldr	r1, [pc, #16]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005036:	e009      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005038:	7cfb      	ldrb	r3, [r7, #19]
 800503a:	74bb      	strb	r3, [r7, #18]
 800503c:	e006      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800503e:	bf00      	nop
 8005040:	40021000 	.word	0x40021000
 8005044:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005048:	7cfb      	ldrb	r3, [r7, #19]
 800504a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800504c:	7c7b      	ldrb	r3, [r7, #17]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d105      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005052:	4b9e      	ldr	r3, [pc, #632]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005056:	4a9d      	ldr	r2, [pc, #628]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005058:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800505c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800506a:	4b98      	ldr	r3, [pc, #608]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005070:	f023 0203 	bic.w	r2, r3, #3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005078:	4994      	ldr	r1, [pc, #592]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800507a:	4313      	orrs	r3, r2
 800507c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00a      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800508c:	4b8f      	ldr	r3, [pc, #572]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800508e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005092:	f023 020c 	bic.w	r2, r3, #12
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800509a:	498c      	ldr	r1, [pc, #560]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800509c:	4313      	orrs	r3, r2
 800509e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0304 	and.w	r3, r3, #4
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050ae:	4b87      	ldr	r3, [pc, #540]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050bc:	4983      	ldr	r1, [pc, #524]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050d0:	4b7e      	ldr	r3, [pc, #504]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050de:	497b      	ldr	r1, [pc, #492]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050f2:	4b76      	ldr	r3, [pc, #472]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005100:	4972      	ldr	r1, [pc, #456]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005114:	4b6d      	ldr	r3, [pc, #436]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800511a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005122:	496a      	ldr	r1, [pc, #424]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005136:	4b65      	ldr	r3, [pc, #404]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800513c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005144:	4961      	ldr	r1, [pc, #388]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005146:	4313      	orrs	r3, r2
 8005148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00a      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005158:	4b5c      	ldr	r3, [pc, #368]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800515e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005166:	4959      	ldr	r1, [pc, #356]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005168:	4313      	orrs	r3, r2
 800516a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800517a:	4b54      	ldr	r3, [pc, #336]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800517c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005180:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005188:	4950      	ldr	r1, [pc, #320]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800519c:	4b4b      	ldr	r3, [pc, #300]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051aa:	4948      	ldr	r1, [pc, #288]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051be:	4b43      	ldr	r3, [pc, #268]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051cc:	493f      	ldr	r1, [pc, #252]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d028      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051e0:	4b3a      	ldr	r3, [pc, #232]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051ee:	4937      	ldr	r1, [pc, #220]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051fe:	d106      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005200:	4b32      	ldr	r3, [pc, #200]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	4a31      	ldr	r2, [pc, #196]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800520a:	60d3      	str	r3, [r2, #12]
 800520c:	e011      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005212:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005216:	d10c      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3304      	adds	r3, #4
 800521c:	2101      	movs	r1, #1
 800521e:	4618      	mov	r0, r3
 8005220:	f000 f8d8 	bl	80053d4 <RCCEx_PLLSAI1_Config>
 8005224:	4603      	mov	r3, r0
 8005226:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005228:	7cfb      	ldrb	r3, [r7, #19]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800522e:	7cfb      	ldrb	r3, [r7, #19]
 8005230:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d028      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800523e:	4b23      	ldr	r3, [pc, #140]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005244:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800524c:	491f      	ldr	r1, [pc, #124]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800524e:	4313      	orrs	r3, r2
 8005250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005258:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800525c:	d106      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800525e:	4b1b      	ldr	r3, [pc, #108]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	4a1a      	ldr	r2, [pc, #104]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005264:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005268:	60d3      	str	r3, [r2, #12]
 800526a:	e011      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005270:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005274:	d10c      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3304      	adds	r3, #4
 800527a:	2101      	movs	r1, #1
 800527c:	4618      	mov	r0, r3
 800527e:	f000 f8a9 	bl	80053d4 <RCCEx_PLLSAI1_Config>
 8005282:	4603      	mov	r3, r0
 8005284:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005286:	7cfb      	ldrb	r3, [r7, #19]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800528c:	7cfb      	ldrb	r3, [r7, #19]
 800528e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d02b      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800529c:	4b0b      	ldr	r3, [pc, #44]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052aa:	4908      	ldr	r1, [pc, #32]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052ba:	d109      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052bc:	4b03      	ldr	r3, [pc, #12]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	4a02      	ldr	r2, [pc, #8]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052c6:	60d3      	str	r3, [r2, #12]
 80052c8:	e014      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80052ca:	bf00      	nop
 80052cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052d8:	d10c      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3304      	adds	r3, #4
 80052de:	2101      	movs	r1, #1
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 f877 	bl	80053d4 <RCCEx_PLLSAI1_Config>
 80052e6:	4603      	mov	r3, r0
 80052e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052ea:	7cfb      	ldrb	r3, [r7, #19]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80052f0:	7cfb      	ldrb	r3, [r7, #19]
 80052f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d02f      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005300:	4b2b      	ldr	r3, [pc, #172]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005306:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800530e:	4928      	ldr	r1, [pc, #160]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005310:	4313      	orrs	r3, r2
 8005312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800531a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800531e:	d10d      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3304      	adds	r3, #4
 8005324:	2102      	movs	r1, #2
 8005326:	4618      	mov	r0, r3
 8005328:	f000 f854 	bl	80053d4 <RCCEx_PLLSAI1_Config>
 800532c:	4603      	mov	r3, r0
 800532e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005330:	7cfb      	ldrb	r3, [r7, #19]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d014      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005336:	7cfb      	ldrb	r3, [r7, #19]
 8005338:	74bb      	strb	r3, [r7, #18]
 800533a:	e011      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005340:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005344:	d10c      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3320      	adds	r3, #32
 800534a:	2102      	movs	r1, #2
 800534c:	4618      	mov	r0, r3
 800534e:	f000 f935 	bl	80055bc <RCCEx_PLLSAI2_Config>
 8005352:	4603      	mov	r3, r0
 8005354:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005356:	7cfb      	ldrb	r3, [r7, #19]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800535c:	7cfb      	ldrb	r3, [r7, #19]
 800535e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800536c:	4b10      	ldr	r3, [pc, #64]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005372:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800537a:	490d      	ldr	r1, [pc, #52]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00b      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800538e:	4b08      	ldr	r3, [pc, #32]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005394:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800539e:	4904      	ldr	r1, [pc, #16]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80053a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40021000 	.word	0x40021000

080053b4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80053b8:	4b05      	ldr	r3, [pc, #20]	@ (80053d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a04      	ldr	r2, [pc, #16]	@ (80053d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80053be:	f043 0304 	orr.w	r3, r3, #4
 80053c2:	6013      	str	r3, [r2, #0]
}
 80053c4:	bf00      	nop
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40021000 	.word	0x40021000

080053d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053e2:	4b75      	ldr	r3, [pc, #468]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d018      	beq.n	8005420 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80053ee:	4b72      	ldr	r3, [pc, #456]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f003 0203 	and.w	r2, r3, #3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d10d      	bne.n	800541a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
       ||
 8005402:	2b00      	cmp	r3, #0
 8005404:	d009      	beq.n	800541a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005406:	4b6c      	ldr	r3, [pc, #432]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	091b      	lsrs	r3, r3, #4
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
       ||
 8005416:	429a      	cmp	r2, r3
 8005418:	d047      	beq.n	80054aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	73fb      	strb	r3, [r7, #15]
 800541e:	e044      	b.n	80054aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b03      	cmp	r3, #3
 8005426:	d018      	beq.n	800545a <RCCEx_PLLSAI1_Config+0x86>
 8005428:	2b03      	cmp	r3, #3
 800542a:	d825      	bhi.n	8005478 <RCCEx_PLLSAI1_Config+0xa4>
 800542c:	2b01      	cmp	r3, #1
 800542e:	d002      	beq.n	8005436 <RCCEx_PLLSAI1_Config+0x62>
 8005430:	2b02      	cmp	r3, #2
 8005432:	d009      	beq.n	8005448 <RCCEx_PLLSAI1_Config+0x74>
 8005434:	e020      	b.n	8005478 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005436:	4b60      	ldr	r3, [pc, #384]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d11d      	bne.n	800547e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005446:	e01a      	b.n	800547e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005448:	4b5b      	ldr	r3, [pc, #364]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005450:	2b00      	cmp	r3, #0
 8005452:	d116      	bne.n	8005482 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005458:	e013      	b.n	8005482 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800545a:	4b57      	ldr	r3, [pc, #348]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10f      	bne.n	8005486 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005466:	4b54      	ldr	r3, [pc, #336]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d109      	bne.n	8005486 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005476:	e006      	b.n	8005486 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	73fb      	strb	r3, [r7, #15]
      break;
 800547c:	e004      	b.n	8005488 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800547e:	bf00      	nop
 8005480:	e002      	b.n	8005488 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005482:	bf00      	nop
 8005484:	e000      	b.n	8005488 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005486:	bf00      	nop
    }

    if(status == HAL_OK)
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10d      	bne.n	80054aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800548e:	4b4a      	ldr	r3, [pc, #296]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6819      	ldr	r1, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	3b01      	subs	r3, #1
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	430b      	orrs	r3, r1
 80054a4:	4944      	ldr	r1, [pc, #272]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d17d      	bne.n	80055ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80054b0:	4b41      	ldr	r3, [pc, #260]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a40      	ldr	r2, [pc, #256]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80054ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054bc:	f7fd f8a4 	bl	8002608 <HAL_GetTick>
 80054c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054c2:	e009      	b.n	80054d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054c4:	f7fd f8a0 	bl	8002608 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d902      	bls.n	80054d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	73fb      	strb	r3, [r7, #15]
        break;
 80054d6:	e005      	b.n	80054e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054d8:	4b37      	ldr	r3, [pc, #220]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1ef      	bne.n	80054c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d160      	bne.n	80055ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d111      	bne.n	8005514 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054f0:	4b31      	ldr	r3, [pc, #196]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80054f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6892      	ldr	r2, [r2, #8]
 8005500:	0211      	lsls	r1, r2, #8
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	68d2      	ldr	r2, [r2, #12]
 8005506:	0912      	lsrs	r2, r2, #4
 8005508:	0452      	lsls	r2, r2, #17
 800550a:	430a      	orrs	r2, r1
 800550c:	492a      	ldr	r1, [pc, #168]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800550e:	4313      	orrs	r3, r2
 8005510:	610b      	str	r3, [r1, #16]
 8005512:	e027      	b.n	8005564 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d112      	bne.n	8005540 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800551a:	4b27      	ldr	r3, [pc, #156]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005522:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6892      	ldr	r2, [r2, #8]
 800552a:	0211      	lsls	r1, r2, #8
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6912      	ldr	r2, [r2, #16]
 8005530:	0852      	lsrs	r2, r2, #1
 8005532:	3a01      	subs	r2, #1
 8005534:	0552      	lsls	r2, r2, #21
 8005536:	430a      	orrs	r2, r1
 8005538:	491f      	ldr	r1, [pc, #124]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800553a:	4313      	orrs	r3, r2
 800553c:	610b      	str	r3, [r1, #16]
 800553e:	e011      	b.n	8005564 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005540:	4b1d      	ldr	r3, [pc, #116]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005548:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6892      	ldr	r2, [r2, #8]
 8005550:	0211      	lsls	r1, r2, #8
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6952      	ldr	r2, [r2, #20]
 8005556:	0852      	lsrs	r2, r2, #1
 8005558:	3a01      	subs	r2, #1
 800555a:	0652      	lsls	r2, r2, #25
 800555c:	430a      	orrs	r2, r1
 800555e:	4916      	ldr	r1, [pc, #88]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005560:	4313      	orrs	r3, r2
 8005562:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005564:	4b14      	ldr	r3, [pc, #80]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a13      	ldr	r2, [pc, #76]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800556a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800556e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005570:	f7fd f84a 	bl	8002608 <HAL_GetTick>
 8005574:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005576:	e009      	b.n	800558c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005578:	f7fd f846 	bl	8002608 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d902      	bls.n	800558c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	73fb      	strb	r3, [r7, #15]
          break;
 800558a:	e005      	b.n	8005598 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800558c:	4b0a      	ldr	r3, [pc, #40]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0ef      	beq.n	8005578 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d106      	bne.n	80055ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800559e:	4b06      	ldr	r3, [pc, #24]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a0:	691a      	ldr	r2, [r3, #16]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	4904      	ldr	r1, [pc, #16]	@ (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40021000 	.word	0x40021000

080055bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d018      	beq.n	8005608 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80055d6:	4b67      	ldr	r3, [pc, #412]	@ (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f003 0203 	and.w	r2, r3, #3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d10d      	bne.n	8005602 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
       ||
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d009      	beq.n	8005602 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80055ee:	4b61      	ldr	r3, [pc, #388]	@ (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	091b      	lsrs	r3, r3, #4
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
       ||
 80055fe:	429a      	cmp	r2, r3
 8005600:	d047      	beq.n	8005692 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	73fb      	strb	r3, [r7, #15]
 8005606:	e044      	b.n	8005692 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b03      	cmp	r3, #3
 800560e:	d018      	beq.n	8005642 <RCCEx_PLLSAI2_Config+0x86>
 8005610:	2b03      	cmp	r3, #3
 8005612:	d825      	bhi.n	8005660 <RCCEx_PLLSAI2_Config+0xa4>
 8005614:	2b01      	cmp	r3, #1
 8005616:	d002      	beq.n	800561e <RCCEx_PLLSAI2_Config+0x62>
 8005618:	2b02      	cmp	r3, #2
 800561a:	d009      	beq.n	8005630 <RCCEx_PLLSAI2_Config+0x74>
 800561c:	e020      	b.n	8005660 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800561e:	4b55      	ldr	r3, [pc, #340]	@ (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d11d      	bne.n	8005666 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800562e:	e01a      	b.n	8005666 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005630:	4b50      	ldr	r3, [pc, #320]	@ (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005638:	2b00      	cmp	r3, #0
 800563a:	d116      	bne.n	800566a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005640:	e013      	b.n	800566a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005642:	4b4c      	ldr	r3, [pc, #304]	@ (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10f      	bne.n	800566e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800564e:	4b49      	ldr	r3, [pc, #292]	@ (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d109      	bne.n	800566e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800565e:	e006      	b.n	800566e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	73fb      	strb	r3, [r7, #15]
      break;
 8005664:	e004      	b.n	8005670 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005666:	bf00      	nop
 8005668:	e002      	b.n	8005670 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800566a:	bf00      	nop
 800566c:	e000      	b.n	8005670 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800566e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10d      	bne.n	8005692 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005676:	4b3f      	ldr	r3, [pc, #252]	@ (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6819      	ldr	r1, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	3b01      	subs	r3, #1
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	430b      	orrs	r3, r1
 800568c:	4939      	ldr	r1, [pc, #228]	@ (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 800568e:	4313      	orrs	r3, r2
 8005690:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005692:	7bfb      	ldrb	r3, [r7, #15]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d167      	bne.n	8005768 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005698:	4b36      	ldr	r3, [pc, #216]	@ (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a35      	ldr	r2, [pc, #212]	@ (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 800569e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056a4:	f7fc ffb0 	bl	8002608 <HAL_GetTick>
 80056a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056aa:	e009      	b.n	80056c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056ac:	f7fc ffac 	bl	8002608 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d902      	bls.n	80056c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	73fb      	strb	r3, [r7, #15]
        break;
 80056be:	e005      	b.n	80056cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056c0:	4b2c      	ldr	r3, [pc, #176]	@ (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1ef      	bne.n	80056ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d14a      	bne.n	8005768 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d111      	bne.n	80056fc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056d8:	4b26      	ldr	r3, [pc, #152]	@ (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80056e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6892      	ldr	r2, [r2, #8]
 80056e8:	0211      	lsls	r1, r2, #8
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	68d2      	ldr	r2, [r2, #12]
 80056ee:	0912      	lsrs	r2, r2, #4
 80056f0:	0452      	lsls	r2, r2, #17
 80056f2:	430a      	orrs	r2, r1
 80056f4:	491f      	ldr	r1, [pc, #124]	@ (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	614b      	str	r3, [r1, #20]
 80056fa:	e011      	b.n	8005720 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005704:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6892      	ldr	r2, [r2, #8]
 800570c:	0211      	lsls	r1, r2, #8
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	6912      	ldr	r2, [r2, #16]
 8005712:	0852      	lsrs	r2, r2, #1
 8005714:	3a01      	subs	r2, #1
 8005716:	0652      	lsls	r2, r2, #25
 8005718:	430a      	orrs	r2, r1
 800571a:	4916      	ldr	r1, [pc, #88]	@ (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 800571c:	4313      	orrs	r3, r2
 800571e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005720:	4b14      	ldr	r3, [pc, #80]	@ (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a13      	ldr	r2, [pc, #76]	@ (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800572a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572c:	f7fc ff6c 	bl	8002608 <HAL_GetTick>
 8005730:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005732:	e009      	b.n	8005748 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005734:	f7fc ff68 	bl	8002608 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d902      	bls.n	8005748 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	73fb      	strb	r3, [r7, #15]
          break;
 8005746:	e005      	b.n	8005754 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005748:	4b0a      	ldr	r3, [pc, #40]	@ (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0ef      	beq.n	8005734 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005754:	7bfb      	ldrb	r3, [r7, #15]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800575a:	4b06      	ldr	r3, [pc, #24]	@ (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 800575c:	695a      	ldr	r2, [r3, #20]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	4904      	ldr	r1, [pc, #16]	@ (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005764:	4313      	orrs	r3, r2
 8005766:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005768:	7bfb      	ldrb	r3, [r7, #15]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40021000 	.word	0x40021000

08005778 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e095      	b.n	80058b6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578e:	2b00      	cmp	r3, #0
 8005790:	d108      	bne.n	80057a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800579a:	d009      	beq.n	80057b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	61da      	str	r2, [r3, #28]
 80057a2:	e005      	b.n	80057b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7fc f9aa 	bl	8001b24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057f0:	d902      	bls.n	80057f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80057f2:	2300      	movs	r3, #0
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	e002      	b.n	80057fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80057f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80057fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005806:	d007      	beq.n	8005818 <HAL_SPI_Init+0xa0>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005810:	d002      	beq.n	8005818 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	431a      	orrs	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005850:	431a      	orrs	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800585a:	ea42 0103 	orr.w	r1, r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005862:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	0c1b      	lsrs	r3, r3, #16
 8005874:	f003 0204 	and.w	r2, r3, #4
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005886:	f003 0308 	and.w	r3, r3, #8
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005894:	ea42 0103 	orr.w	r1, r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e040      	b.n	8005952 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d106      	bne.n	80058e6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7fc f963 	bl	8001bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2224      	movs	r2, #36	@ 0x24
 80058ea:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0201 	bic.w	r2, r2, #1
 80058fa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fb69 	bl	8005fdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f8ae 	bl	8005a6c <UART_SetConfig>
 8005910:	4603      	mov	r3, r0
 8005912:	2b01      	cmp	r3, #1
 8005914:	d101      	bne.n	800591a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e01b      	b.n	8005952 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005928:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005938:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f042 0201 	orr.w	r2, r2, #1
 8005948:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fbe8 	bl	8006120 <UART_CheckIdleState>
 8005950:	4603      	mov	r3, r0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b08a      	sub	sp, #40	@ 0x28
 800595e:	af02      	add	r7, sp, #8
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	603b      	str	r3, [r7, #0]
 8005966:	4613      	mov	r3, r2
 8005968:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800596e:	2b20      	cmp	r3, #32
 8005970:	d177      	bne.n	8005a62 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <HAL_UART_Transmit+0x24>
 8005978:	88fb      	ldrh	r3, [r7, #6]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e070      	b.n	8005a64 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2221      	movs	r2, #33	@ 0x21
 800598e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005990:	f7fc fe3a 	bl	8002608 <HAL_GetTick>
 8005994:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	88fa      	ldrh	r2, [r7, #6]
 800599a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	88fa      	ldrh	r2, [r7, #6]
 80059a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ae:	d108      	bne.n	80059c2 <HAL_UART_Transmit+0x68>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d104      	bne.n	80059c2 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80059b8:	2300      	movs	r3, #0
 80059ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	61bb      	str	r3, [r7, #24]
 80059c0:	e003      	b.n	80059ca <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059c6:	2300      	movs	r3, #0
 80059c8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059ca:	e02f      	b.n	8005a2c <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2200      	movs	r2, #0
 80059d4:	2180      	movs	r1, #128	@ 0x80
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 fc4a 	bl	8006270 <UART_WaitOnFlagUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d004      	beq.n	80059ec <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2220      	movs	r2, #32
 80059e6:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e03b      	b.n	8005a64 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10b      	bne.n	8005a0a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	881a      	ldrh	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059fe:	b292      	uxth	r2, r2
 8005a00:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	3302      	adds	r3, #2
 8005a06:	61bb      	str	r3, [r7, #24]
 8005a08:	e007      	b.n	8005a1a <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	781a      	ldrb	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	3301      	adds	r3, #1
 8005a18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1c9      	bne.n	80059cc <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	2140      	movs	r1, #64	@ 0x40
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 fc14 	bl	8006270 <UART_WaitOnFlagUntilTimeout>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d004      	beq.n	8005a58 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2220      	movs	r2, #32
 8005a52:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e005      	b.n	8005a64 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	e000      	b.n	8005a64 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005a62:	2302      	movs	r3, #2
  }
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3720      	adds	r7, #32
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a70:	b08a      	sub	sp, #40	@ 0x28
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	431a      	orrs	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	4ba4      	ldr	r3, [pc, #656]	@ (8005d2c <UART_SetConfig+0x2c0>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005aa4:	430b      	orrs	r3, r1
 8005aa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a99      	ldr	r2, [pc, #612]	@ (8005d30 <UART_SetConfig+0x2c4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d004      	beq.n	8005ad8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a90      	ldr	r2, [pc, #576]	@ (8005d34 <UART_SetConfig+0x2c8>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d126      	bne.n	8005b44 <UART_SetConfig+0xd8>
 8005af6:	4b90      	ldr	r3, [pc, #576]	@ (8005d38 <UART_SetConfig+0x2cc>)
 8005af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005afc:	f003 0303 	and.w	r3, r3, #3
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d81b      	bhi.n	8005b3c <UART_SetConfig+0xd0>
 8005b04:	a201      	add	r2, pc, #4	@ (adr r2, 8005b0c <UART_SetConfig+0xa0>)
 8005b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0a:	bf00      	nop
 8005b0c:	08005b1d 	.word	0x08005b1d
 8005b10:	08005b2d 	.word	0x08005b2d
 8005b14:	08005b25 	.word	0x08005b25
 8005b18:	08005b35 	.word	0x08005b35
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b22:	e116      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005b24:	2302      	movs	r3, #2
 8005b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b2a:	e112      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b32:	e10e      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005b34:	2308      	movs	r3, #8
 8005b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b3a:	e10a      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005b3c:	2310      	movs	r3, #16
 8005b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b42:	e106      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a7c      	ldr	r2, [pc, #496]	@ (8005d3c <UART_SetConfig+0x2d0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d138      	bne.n	8005bc0 <UART_SetConfig+0x154>
 8005b4e:	4b7a      	ldr	r3, [pc, #488]	@ (8005d38 <UART_SetConfig+0x2cc>)
 8005b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b54:	f003 030c 	and.w	r3, r3, #12
 8005b58:	2b0c      	cmp	r3, #12
 8005b5a:	d82d      	bhi.n	8005bb8 <UART_SetConfig+0x14c>
 8005b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b64 <UART_SetConfig+0xf8>)
 8005b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b62:	bf00      	nop
 8005b64:	08005b99 	.word	0x08005b99
 8005b68:	08005bb9 	.word	0x08005bb9
 8005b6c:	08005bb9 	.word	0x08005bb9
 8005b70:	08005bb9 	.word	0x08005bb9
 8005b74:	08005ba9 	.word	0x08005ba9
 8005b78:	08005bb9 	.word	0x08005bb9
 8005b7c:	08005bb9 	.word	0x08005bb9
 8005b80:	08005bb9 	.word	0x08005bb9
 8005b84:	08005ba1 	.word	0x08005ba1
 8005b88:	08005bb9 	.word	0x08005bb9
 8005b8c:	08005bb9 	.word	0x08005bb9
 8005b90:	08005bb9 	.word	0x08005bb9
 8005b94:	08005bb1 	.word	0x08005bb1
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b9e:	e0d8      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ba6:	e0d4      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005ba8:	2304      	movs	r3, #4
 8005baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bae:	e0d0      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005bb0:	2308      	movs	r3, #8
 8005bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bb6:	e0cc      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005bb8:	2310      	movs	r3, #16
 8005bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bbe:	e0c8      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a5e      	ldr	r2, [pc, #376]	@ (8005d40 <UART_SetConfig+0x2d4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d125      	bne.n	8005c16 <UART_SetConfig+0x1aa>
 8005bca:	4b5b      	ldr	r3, [pc, #364]	@ (8005d38 <UART_SetConfig+0x2cc>)
 8005bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005bd4:	2b30      	cmp	r3, #48	@ 0x30
 8005bd6:	d016      	beq.n	8005c06 <UART_SetConfig+0x19a>
 8005bd8:	2b30      	cmp	r3, #48	@ 0x30
 8005bda:	d818      	bhi.n	8005c0e <UART_SetConfig+0x1a2>
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	d00a      	beq.n	8005bf6 <UART_SetConfig+0x18a>
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	d814      	bhi.n	8005c0e <UART_SetConfig+0x1a2>
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <UART_SetConfig+0x182>
 8005be8:	2b10      	cmp	r3, #16
 8005bea:	d008      	beq.n	8005bfe <UART_SetConfig+0x192>
 8005bec:	e00f      	b.n	8005c0e <UART_SetConfig+0x1a2>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bf4:	e0ad      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bfc:	e0a9      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005bfe:	2304      	movs	r3, #4
 8005c00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c04:	e0a5      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005c06:	2308      	movs	r3, #8
 8005c08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c0c:	e0a1      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005c0e:	2310      	movs	r3, #16
 8005c10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c14:	e09d      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a4a      	ldr	r2, [pc, #296]	@ (8005d44 <UART_SetConfig+0x2d8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d125      	bne.n	8005c6c <UART_SetConfig+0x200>
 8005c20:	4b45      	ldr	r3, [pc, #276]	@ (8005d38 <UART_SetConfig+0x2cc>)
 8005c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005c2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c2c:	d016      	beq.n	8005c5c <UART_SetConfig+0x1f0>
 8005c2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c30:	d818      	bhi.n	8005c64 <UART_SetConfig+0x1f8>
 8005c32:	2b80      	cmp	r3, #128	@ 0x80
 8005c34:	d00a      	beq.n	8005c4c <UART_SetConfig+0x1e0>
 8005c36:	2b80      	cmp	r3, #128	@ 0x80
 8005c38:	d814      	bhi.n	8005c64 <UART_SetConfig+0x1f8>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <UART_SetConfig+0x1d8>
 8005c3e:	2b40      	cmp	r3, #64	@ 0x40
 8005c40:	d008      	beq.n	8005c54 <UART_SetConfig+0x1e8>
 8005c42:	e00f      	b.n	8005c64 <UART_SetConfig+0x1f8>
 8005c44:	2300      	movs	r3, #0
 8005c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c4a:	e082      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c52:	e07e      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005c54:	2304      	movs	r3, #4
 8005c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c5a:	e07a      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005c5c:	2308      	movs	r3, #8
 8005c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c62:	e076      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005c64:	2310      	movs	r3, #16
 8005c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c6a:	e072      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a35      	ldr	r2, [pc, #212]	@ (8005d48 <UART_SetConfig+0x2dc>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d12a      	bne.n	8005ccc <UART_SetConfig+0x260>
 8005c76:	4b30      	ldr	r3, [pc, #192]	@ (8005d38 <UART_SetConfig+0x2cc>)
 8005c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c84:	d01a      	beq.n	8005cbc <UART_SetConfig+0x250>
 8005c86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c8a:	d81b      	bhi.n	8005cc4 <UART_SetConfig+0x258>
 8005c8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c90:	d00c      	beq.n	8005cac <UART_SetConfig+0x240>
 8005c92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c96:	d815      	bhi.n	8005cc4 <UART_SetConfig+0x258>
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <UART_SetConfig+0x238>
 8005c9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ca0:	d008      	beq.n	8005cb4 <UART_SetConfig+0x248>
 8005ca2:	e00f      	b.n	8005cc4 <UART_SetConfig+0x258>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005caa:	e052      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005cac:	2302      	movs	r3, #2
 8005cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cb2:	e04e      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005cb4:	2304      	movs	r3, #4
 8005cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cba:	e04a      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005cbc:	2308      	movs	r3, #8
 8005cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cc2:	e046      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005cc4:	2310      	movs	r3, #16
 8005cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cca:	e042      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a17      	ldr	r2, [pc, #92]	@ (8005d30 <UART_SetConfig+0x2c4>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d13a      	bne.n	8005d4c <UART_SetConfig+0x2e0>
 8005cd6:	4b18      	ldr	r3, [pc, #96]	@ (8005d38 <UART_SetConfig+0x2cc>)
 8005cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cdc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005ce0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ce4:	d01a      	beq.n	8005d1c <UART_SetConfig+0x2b0>
 8005ce6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005cea:	d81b      	bhi.n	8005d24 <UART_SetConfig+0x2b8>
 8005cec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cf0:	d00c      	beq.n	8005d0c <UART_SetConfig+0x2a0>
 8005cf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cf6:	d815      	bhi.n	8005d24 <UART_SetConfig+0x2b8>
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <UART_SetConfig+0x298>
 8005cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d00:	d008      	beq.n	8005d14 <UART_SetConfig+0x2a8>
 8005d02:	e00f      	b.n	8005d24 <UART_SetConfig+0x2b8>
 8005d04:	2300      	movs	r3, #0
 8005d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d0a:	e022      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d12:	e01e      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005d14:	2304      	movs	r3, #4
 8005d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d1a:	e01a      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005d1c:	2308      	movs	r3, #8
 8005d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d22:	e016      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005d24:	2310      	movs	r3, #16
 8005d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d2a:	e012      	b.n	8005d52 <UART_SetConfig+0x2e6>
 8005d2c:	efff69f3 	.word	0xefff69f3
 8005d30:	40008000 	.word	0x40008000
 8005d34:	40013800 	.word	0x40013800
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	40004400 	.word	0x40004400
 8005d40:	40004800 	.word	0x40004800
 8005d44:	40004c00 	.word	0x40004c00
 8005d48:	40005000 	.word	0x40005000
 8005d4c:	2310      	movs	r3, #16
 8005d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a9f      	ldr	r2, [pc, #636]	@ (8005fd4 <UART_SetConfig+0x568>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d17a      	bne.n	8005e52 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d824      	bhi.n	8005dae <UART_SetConfig+0x342>
 8005d64:	a201      	add	r2, pc, #4	@ (adr r2, 8005d6c <UART_SetConfig+0x300>)
 8005d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6a:	bf00      	nop
 8005d6c:	08005d91 	.word	0x08005d91
 8005d70:	08005daf 	.word	0x08005daf
 8005d74:	08005d99 	.word	0x08005d99
 8005d78:	08005daf 	.word	0x08005daf
 8005d7c:	08005d9f 	.word	0x08005d9f
 8005d80:	08005daf 	.word	0x08005daf
 8005d84:	08005daf 	.word	0x08005daf
 8005d88:	08005daf 	.word	0x08005daf
 8005d8c:	08005da7 	.word	0x08005da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d90:	f7fe ff9a 	bl	8004cc8 <HAL_RCC_GetPCLK1Freq>
 8005d94:	61f8      	str	r0, [r7, #28]
        break;
 8005d96:	e010      	b.n	8005dba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d98:	4b8f      	ldr	r3, [pc, #572]	@ (8005fd8 <UART_SetConfig+0x56c>)
 8005d9a:	61fb      	str	r3, [r7, #28]
        break;
 8005d9c:	e00d      	b.n	8005dba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d9e:	f7fe fefb 	bl	8004b98 <HAL_RCC_GetSysClockFreq>
 8005da2:	61f8      	str	r0, [r7, #28]
        break;
 8005da4:	e009      	b.n	8005dba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005da6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005daa:	61fb      	str	r3, [r7, #28]
        break;
 8005dac:	e005      	b.n	8005dba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005db8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 80fb 	beq.w	8005fb8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	4413      	add	r3, r2
 8005dcc:	69fa      	ldr	r2, [r7, #28]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d305      	bcc.n	8005dde <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d903      	bls.n	8005de6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005de4:	e0e8      	b.n	8005fb8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	2200      	movs	r2, #0
 8005dea:	461c      	mov	r4, r3
 8005dec:	4615      	mov	r5, r2
 8005dee:	f04f 0200 	mov.w	r2, #0
 8005df2:	f04f 0300 	mov.w	r3, #0
 8005df6:	022b      	lsls	r3, r5, #8
 8005df8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005dfc:	0222      	lsls	r2, r4, #8
 8005dfe:	68f9      	ldr	r1, [r7, #12]
 8005e00:	6849      	ldr	r1, [r1, #4]
 8005e02:	0849      	lsrs	r1, r1, #1
 8005e04:	2000      	movs	r0, #0
 8005e06:	4688      	mov	r8, r1
 8005e08:	4681      	mov	r9, r0
 8005e0a:	eb12 0a08 	adds.w	sl, r2, r8
 8005e0e:	eb43 0b09 	adc.w	fp, r3, r9
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	603b      	str	r3, [r7, #0]
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e20:	4650      	mov	r0, sl
 8005e22:	4659      	mov	r1, fp
 8005e24:	f7fa fec0 	bl	8000ba8 <__aeabi_uldivmod>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e36:	d308      	bcc.n	8005e4a <UART_SetConfig+0x3de>
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e3e:	d204      	bcs.n	8005e4a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	60da      	str	r2, [r3, #12]
 8005e48:	e0b6      	b.n	8005fb8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e50:	e0b2      	b.n	8005fb8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e5a:	d15e      	bne.n	8005f1a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005e5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d828      	bhi.n	8005eb6 <UART_SetConfig+0x44a>
 8005e64:	a201      	add	r2, pc, #4	@ (adr r2, 8005e6c <UART_SetConfig+0x400>)
 8005e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6a:	bf00      	nop
 8005e6c:	08005e91 	.word	0x08005e91
 8005e70:	08005e99 	.word	0x08005e99
 8005e74:	08005ea1 	.word	0x08005ea1
 8005e78:	08005eb7 	.word	0x08005eb7
 8005e7c:	08005ea7 	.word	0x08005ea7
 8005e80:	08005eb7 	.word	0x08005eb7
 8005e84:	08005eb7 	.word	0x08005eb7
 8005e88:	08005eb7 	.word	0x08005eb7
 8005e8c:	08005eaf 	.word	0x08005eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e90:	f7fe ff1a 	bl	8004cc8 <HAL_RCC_GetPCLK1Freq>
 8005e94:	61f8      	str	r0, [r7, #28]
        break;
 8005e96:	e014      	b.n	8005ec2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e98:	f7fe ff2c 	bl	8004cf4 <HAL_RCC_GetPCLK2Freq>
 8005e9c:	61f8      	str	r0, [r7, #28]
        break;
 8005e9e:	e010      	b.n	8005ec2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ea0:	4b4d      	ldr	r3, [pc, #308]	@ (8005fd8 <UART_SetConfig+0x56c>)
 8005ea2:	61fb      	str	r3, [r7, #28]
        break;
 8005ea4:	e00d      	b.n	8005ec2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ea6:	f7fe fe77 	bl	8004b98 <HAL_RCC_GetSysClockFreq>
 8005eaa:	61f8      	str	r0, [r7, #28]
        break;
 8005eac:	e009      	b.n	8005ec2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eb2:	61fb      	str	r3, [r7, #28]
        break;
 8005eb4:	e005      	b.n	8005ec2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ec0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d077      	beq.n	8005fb8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	005a      	lsls	r2, r3, #1
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	085b      	lsrs	r3, r3, #1
 8005ed2:	441a      	add	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005edc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	2b0f      	cmp	r3, #15
 8005ee2:	d916      	bls.n	8005f12 <UART_SetConfig+0x4a6>
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eea:	d212      	bcs.n	8005f12 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	f023 030f 	bic.w	r3, r3, #15
 8005ef4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	085b      	lsrs	r3, r3, #1
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	8afb      	ldrh	r3, [r7, #22]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	8afa      	ldrh	r2, [r7, #22]
 8005f0e:	60da      	str	r2, [r3, #12]
 8005f10:	e052      	b.n	8005fb8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f18:	e04e      	b.n	8005fb8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f1a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f1e:	2b08      	cmp	r3, #8
 8005f20:	d827      	bhi.n	8005f72 <UART_SetConfig+0x506>
 8005f22:	a201      	add	r2, pc, #4	@ (adr r2, 8005f28 <UART_SetConfig+0x4bc>)
 8005f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f28:	08005f4d 	.word	0x08005f4d
 8005f2c:	08005f55 	.word	0x08005f55
 8005f30:	08005f5d 	.word	0x08005f5d
 8005f34:	08005f73 	.word	0x08005f73
 8005f38:	08005f63 	.word	0x08005f63
 8005f3c:	08005f73 	.word	0x08005f73
 8005f40:	08005f73 	.word	0x08005f73
 8005f44:	08005f73 	.word	0x08005f73
 8005f48:	08005f6b 	.word	0x08005f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f4c:	f7fe febc 	bl	8004cc8 <HAL_RCC_GetPCLK1Freq>
 8005f50:	61f8      	str	r0, [r7, #28]
        break;
 8005f52:	e014      	b.n	8005f7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f54:	f7fe fece 	bl	8004cf4 <HAL_RCC_GetPCLK2Freq>
 8005f58:	61f8      	str	r0, [r7, #28]
        break;
 8005f5a:	e010      	b.n	8005f7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8005fd8 <UART_SetConfig+0x56c>)
 8005f5e:	61fb      	str	r3, [r7, #28]
        break;
 8005f60:	e00d      	b.n	8005f7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f62:	f7fe fe19 	bl	8004b98 <HAL_RCC_GetSysClockFreq>
 8005f66:	61f8      	str	r0, [r7, #28]
        break;
 8005f68:	e009      	b.n	8005f7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f6e:	61fb      	str	r3, [r7, #28]
        break;
 8005f70:	e005      	b.n	8005f7e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f7c:	bf00      	nop
    }

    if (pclk != 0U)
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d019      	beq.n	8005fb8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	085a      	lsrs	r2, r3, #1
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	441a      	add	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f96:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	2b0f      	cmp	r3, #15
 8005f9c:	d909      	bls.n	8005fb2 <UART_SetConfig+0x546>
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fa4:	d205      	bcs.n	8005fb2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	60da      	str	r2, [r3, #12]
 8005fb0:	e002      	b.n	8005fb8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005fc4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3728      	adds	r7, #40	@ 0x28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fd2:	bf00      	nop
 8005fd4:	40008000 	.word	0x40008000
 8005fd8:	00f42400 	.word	0x00f42400

08005fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe8:	f003 0308 	and.w	r3, r3, #8
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00a      	beq.n	800604a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604e:	f003 0304 	and.w	r3, r3, #4
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00a      	beq.n	800606c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	430a      	orrs	r2, r1
 800606a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006070:	f003 0310 	and.w	r3, r3, #16
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00a      	beq.n	800608e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d01a      	beq.n	80060f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060da:	d10a      	bne.n	80060f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	605a      	str	r2, [r3, #4]
  }
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b098      	sub	sp, #96	@ 0x60
 8006124:	af02      	add	r7, sp, #8
 8006126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006130:	f7fc fa6a 	bl	8002608 <HAL_GetTick>
 8006134:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0308 	and.w	r3, r3, #8
 8006140:	2b08      	cmp	r3, #8
 8006142:	d12e      	bne.n	80061a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006144:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800614c:	2200      	movs	r2, #0
 800614e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f88c 	bl	8006270 <UART_WaitOnFlagUntilTimeout>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d021      	beq.n	80061a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006166:	e853 3f00 	ldrex	r3, [r3]
 800616a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800616c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800616e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006172:	653b      	str	r3, [r7, #80]	@ 0x50
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	461a      	mov	r2, r3
 800617a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800617c:	647b      	str	r3, [r7, #68]	@ 0x44
 800617e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006180:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006182:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006184:	e841 2300 	strex	r3, r2, [r1]
 8006188:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800618a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1e6      	bne.n	800615e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e062      	b.n	8006268 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d149      	bne.n	8006244 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061b8:	2200      	movs	r2, #0
 80061ba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f856 	bl	8006270 <UART_WaitOnFlagUntilTimeout>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d03c      	beq.n	8006244 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d2:	e853 3f00 	ldrex	r3, [r3]
 80061d6:	623b      	str	r3, [r7, #32]
   return(result);
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	461a      	mov	r2, r3
 80061e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80061ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061f0:	e841 2300 	strex	r3, r2, [r1]
 80061f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1e6      	bne.n	80061ca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3308      	adds	r3, #8
 8006202:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	e853 3f00 	ldrex	r3, [r3]
 800620a:	60fb      	str	r3, [r7, #12]
   return(result);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f023 0301 	bic.w	r3, r3, #1
 8006212:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3308      	adds	r3, #8
 800621a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800621c:	61fa      	str	r2, [r7, #28]
 800621e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006220:	69b9      	ldr	r1, [r7, #24]
 8006222:	69fa      	ldr	r2, [r7, #28]
 8006224:	e841 2300 	strex	r3, r2, [r1]
 8006228:	617b      	str	r3, [r7, #20]
   return(result);
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e5      	bne.n	80061fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2220      	movs	r2, #32
 8006234:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e011      	b.n	8006268 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2220      	movs	r2, #32
 8006248:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2220      	movs	r2, #32
 800624e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3758      	adds	r7, #88	@ 0x58
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	4613      	mov	r3, r2
 800627e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006280:	e04f      	b.n	8006322 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006288:	d04b      	beq.n	8006322 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800628a:	f7fc f9bd 	bl	8002608 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	429a      	cmp	r2, r3
 8006298:	d302      	bcc.n	80062a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e04e      	b.n	8006342 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0304 	and.w	r3, r3, #4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d037      	beq.n	8006322 <UART_WaitOnFlagUntilTimeout+0xb2>
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	2b80      	cmp	r3, #128	@ 0x80
 80062b6:	d034      	beq.n	8006322 <UART_WaitOnFlagUntilTimeout+0xb2>
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2b40      	cmp	r3, #64	@ 0x40
 80062bc:	d031      	beq.n	8006322 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d110      	bne.n	80062ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2208      	movs	r2, #8
 80062d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 f838 	bl	800634a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2208      	movs	r2, #8
 80062de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e029      	b.n	8006342 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062fc:	d111      	bne.n	8006322 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006306:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 f81e 	bl	800634a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2220      	movs	r2, #32
 8006312:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e00f      	b.n	8006342 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69da      	ldr	r2, [r3, #28]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4013      	ands	r3, r2
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	429a      	cmp	r2, r3
 8006330:	bf0c      	ite	eq
 8006332:	2301      	moveq	r3, #1
 8006334:	2300      	movne	r3, #0
 8006336:	b2db      	uxtb	r3, r3
 8006338:	461a      	mov	r2, r3
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	429a      	cmp	r2, r3
 800633e:	d0a0      	beq.n	8006282 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800634a:	b480      	push	{r7}
 800634c:	b095      	sub	sp, #84	@ 0x54
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006362:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	461a      	mov	r2, r3
 800636e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006370:	643b      	str	r3, [r7, #64]	@ 0x40
 8006372:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006376:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006378:	e841 2300 	strex	r3, r2, [r1]
 800637c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800637e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e6      	bne.n	8006352 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3308      	adds	r3, #8
 800638a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	e853 3f00 	ldrex	r3, [r3]
 8006392:	61fb      	str	r3, [r7, #28]
   return(result);
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	f023 0301 	bic.w	r3, r3, #1
 800639a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	3308      	adds	r3, #8
 80063a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063ac:	e841 2300 	strex	r3, r2, [r1]
 80063b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1e5      	bne.n	8006384 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d118      	bne.n	80063f2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f023 0310 	bic.w	r3, r3, #16
 80063d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063de:	61bb      	str	r3, [r7, #24]
 80063e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e2:	6979      	ldr	r1, [r7, #20]
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	613b      	str	r3, [r7, #16]
   return(result);
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e6      	bne.n	80063c0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2220      	movs	r2, #32
 80063f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006406:	bf00      	nop
 8006408:	3754      	adds	r7, #84	@ 0x54
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006412:	b084      	sub	sp, #16
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	f107 001c 	add.w	r0, r7, #28
 8006420:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fa69 	bl	8006908 <USB_CoreReset>
 8006436:	4603      	mov	r3, r0
 8006438:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800643a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800643e:	2b00      	cmp	r3, #0
 8006440:	d106      	bne.n	8006450 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006446:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	639a      	str	r2, [r3, #56]	@ 0x38
 800644e:	e005      	b.n	800645c <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006454:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006468:	b004      	add	sp, #16
 800646a:	4770      	bx	lr

0800646c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f023 0201 	bic.w	r2, r3, #1
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b084      	sub	sp, #16
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	460b      	mov	r3, r1
 8006498:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064aa:	78fb      	ldrb	r3, [r7, #3]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d115      	bne.n	80064dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064bc:	200a      	movs	r0, #10
 80064be:	f7fc f8af 	bl	8002620 <HAL_Delay>
      ms += 10U;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	330a      	adds	r3, #10
 80064c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fa0f 	bl	80068ec <USB_GetMode>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d01e      	beq.n	8006512 <USB_SetCurrentMode+0x84>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2bc7      	cmp	r3, #199	@ 0xc7
 80064d8:	d9f0      	bls.n	80064bc <USB_SetCurrentMode+0x2e>
 80064da:	e01a      	b.n	8006512 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064dc:	78fb      	ldrb	r3, [r7, #3]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d115      	bne.n	800650e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064ee:	200a      	movs	r0, #10
 80064f0:	f7fc f896 	bl	8002620 <HAL_Delay>
      ms += 10U;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	330a      	adds	r3, #10
 80064f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f9f6 	bl	80068ec <USB_GetMode>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d005      	beq.n	8006512 <USB_SetCurrentMode+0x84>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2bc7      	cmp	r3, #199	@ 0xc7
 800650a:	d9f0      	bls.n	80064ee <USB_SetCurrentMode+0x60>
 800650c:	e001      	b.n	8006512 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e005      	b.n	800651e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2bc8      	cmp	r3, #200	@ 0xc8
 8006516:	d101      	bne.n	800651c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e000      	b.n	800651e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006528:	b084      	sub	sp, #16
 800652a:	b580      	push	{r7, lr}
 800652c:	b086      	sub	sp, #24
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006536:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006542:	2300      	movs	r3, #0
 8006544:	613b      	str	r3, [r7, #16]
 8006546:	e009      	b.n	800655c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	3340      	adds	r3, #64	@ 0x40
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	2200      	movs	r2, #0
 8006554:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	3301      	adds	r3, #1
 800655a:	613b      	str	r3, [r7, #16]
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	2b0e      	cmp	r3, #14
 8006560:	d9f2      	bls.n	8006548 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006562:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006566:	2b00      	cmp	r3, #0
 8006568:	d11c      	bne.n	80065a4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006578:	f043 0302 	orr.w	r3, r3, #2
 800657c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006582:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	e005      	b.n	80065b0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065b6:	461a      	mov	r2, r3
 80065b8:	2300      	movs	r3, #0
 80065ba:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065bc:	2103      	movs	r1, #3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f95a 	bl	8006878 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065c4:	2110      	movs	r1, #16
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f8f6 	bl	80067b8 <USB_FlushTxFifo>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f920 	bl	800681c <USB_FlushRxFifo>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ec:	461a      	mov	r2, r3
 80065ee:	2300      	movs	r3, #0
 80065f0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065f8:	461a      	mov	r2, r3
 80065fa:	2300      	movs	r3, #0
 80065fc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006604:	461a      	mov	r2, r3
 8006606:	2300      	movs	r3, #0
 8006608:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800660a:	2300      	movs	r3, #0
 800660c:	613b      	str	r3, [r7, #16]
 800660e:	e043      	b.n	8006698 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006622:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006626:	d118      	bne.n	800665a <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10a      	bne.n	8006644 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4413      	add	r3, r2
 8006636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800663a:	461a      	mov	r2, r3
 800663c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006640:	6013      	str	r3, [r2, #0]
 8006642:	e013      	b.n	800666c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006650:	461a      	mov	r2, r3
 8006652:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	e008      	b.n	800666c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006666:	461a      	mov	r2, r3
 8006668:	2300      	movs	r3, #0
 800666a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006678:	461a      	mov	r2, r3
 800667a:	2300      	movs	r3, #0
 800667c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800668a:	461a      	mov	r2, r3
 800668c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006690:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	3301      	adds	r3, #1
 8006696:	613b      	str	r3, [r7, #16]
 8006698:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800669c:	461a      	mov	r2, r3
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d3b5      	bcc.n	8006610 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066a4:	2300      	movs	r3, #0
 80066a6:	613b      	str	r3, [r7, #16]
 80066a8:	e043      	b.n	8006732 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066c0:	d118      	bne.n	80066f4 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d4:	461a      	mov	r2, r3
 80066d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80066da:	6013      	str	r3, [r2, #0]
 80066dc:	e013      	b.n	8006706 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ea:	461a      	mov	r2, r3
 80066ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	e008      	b.n	8006706 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006700:	461a      	mov	r2, r3
 8006702:	2300      	movs	r3, #0
 8006704:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006712:	461a      	mov	r2, r3
 8006714:	2300      	movs	r3, #0
 8006716:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006724:	461a      	mov	r2, r3
 8006726:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800672a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	3301      	adds	r3, #1
 8006730:	613b      	str	r3, [r7, #16]
 8006732:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006736:	461a      	mov	r2, r3
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	4293      	cmp	r3, r2
 800673c:	d3b5      	bcc.n	80066aa <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800674c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006750:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800675e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	f043 0210 	orr.w	r2, r3, #16
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	699a      	ldr	r2, [r3, #24]
 8006770:	4b10      	ldr	r3, [pc, #64]	@ (80067b4 <USB_DevInit+0x28c>)
 8006772:	4313      	orrs	r3, r2
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006778:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	f043 0208 	orr.w	r2, r3, #8
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800678c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006790:	2b01      	cmp	r3, #1
 8006792:	d107      	bne.n	80067a4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800679c:	f043 0304 	orr.w	r3, r3, #4
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067b0:	b004      	add	sp, #16
 80067b2:	4770      	bx	lr
 80067b4:	803c3800 	.word	0x803c3800

080067b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	3301      	adds	r3, #1
 80067ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067d2:	d901      	bls.n	80067d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e01b      	b.n	8006810 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	daf2      	bge.n	80067c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	019b      	lsls	r3, r3, #6
 80067e8:	f043 0220 	orr.w	r2, r3, #32
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	3301      	adds	r3, #1
 80067f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067fc:	d901      	bls.n	8006802 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e006      	b.n	8006810 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b20      	cmp	r3, #32
 800680c:	d0f0      	beq.n	80067f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	3301      	adds	r3, #1
 800682c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006834:	d901      	bls.n	800683a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e018      	b.n	800686c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	2b00      	cmp	r3, #0
 8006840:	daf2      	bge.n	8006828 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2210      	movs	r2, #16
 800684a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3301      	adds	r3, #1
 8006850:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006858:	d901      	bls.n	800685e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e006      	b.n	800686c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	f003 0310 	and.w	r3, r3, #16
 8006866:	2b10      	cmp	r3, #16
 8006868:	d0f0      	beq.n	800684c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	460b      	mov	r3, r1
 8006882:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	78fb      	ldrb	r3, [r7, #3]
 8006892:	68f9      	ldr	r1, [r7, #12]
 8006894:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006898:	4313      	orrs	r3, r2
 800689a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b085      	sub	sp, #20
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80068c4:	f023 0303 	bic.w	r3, r3, #3
 80068c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068d8:	f043 0302 	orr.w	r3, r3, #2
 80068dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	f003 0301 	and.w	r3, r3, #1
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	3301      	adds	r3, #1
 8006918:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006920:	d901      	bls.n	8006926 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e01b      	b.n	800695e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	daf2      	bge.n	8006914 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f043 0201 	orr.w	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	3301      	adds	r3, #1
 8006942:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800694a:	d901      	bls.n	8006950 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e006      	b.n	800695e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b01      	cmp	r3, #1
 800695a:	d0f0      	beq.n	800693e <USB_CoreReset+0x36>

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
	...

0800696c <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	2101      	movs	r1, #1
 800697a:	4842      	ldr	r0, [pc, #264]	@ (8006a84 <network_configure_activations+0x118>)
 800697c:	f000 fb42 	bl	8007004 <ai_platform_get_activations_map>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d073      	beq.n	8006a6e <network_configure_activations+0x102>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 1396);
 8006986:	4b3f      	ldr	r3, [pc, #252]	@ (8006a84 <network_configure_activations+0x118>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f203 5374 	addw	r3, r3, #1396	@ 0x574
 800698e:	4a3e      	ldr	r2, [pc, #248]	@ (8006a88 <network_configure_activations+0x11c>)
 8006990:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1396);
 8006992:	4b3c      	ldr	r3, [pc, #240]	@ (8006a84 <network_configure_activations+0x118>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f203 5374 	addw	r3, r3, #1396	@ 0x574
 800699a:	4a3b      	ldr	r2, [pc, #236]	@ (8006a88 <network_configure_activations+0x11c>)
 800699c:	60d3      	str	r3, [r2, #12]
    conv1d_conv2d_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1708);
 800699e:	4b39      	ldr	r3, [pc, #228]	@ (8006a84 <network_configure_activations+0x118>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
 80069a6:	4a39      	ldr	r2, [pc, #228]	@ (8006a8c <network_configure_activations+0x120>)
 80069a8:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 1708);
 80069aa:	4b36      	ldr	r3, [pc, #216]	@ (8006a84 <network_configure_activations+0x118>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
 80069b2:	4a36      	ldr	r2, [pc, #216]	@ (8006a8c <network_configure_activations+0x120>)
 80069b4:	60d3      	str	r3, [r2, #12]
    conv1d_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 32);
 80069b6:	4b33      	ldr	r3, [pc, #204]	@ (8006a84 <network_configure_activations+0x118>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3320      	adds	r3, #32
 80069bc:	4a34      	ldr	r2, [pc, #208]	@ (8006a90 <network_configure_activations+0x124>)
 80069be:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 32);
 80069c0:	4b30      	ldr	r3, [pc, #192]	@ (8006a84 <network_configure_activations+0x118>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3320      	adds	r3, #32
 80069c6:	4a32      	ldr	r2, [pc, #200]	@ (8006a90 <network_configure_activations+0x124>)
 80069c8:	60d3      	str	r3, [r2, #12]
    conv1d_output_array.data = AI_PTR(g_network_activations_map[0] + 32);
 80069ca:	4b2e      	ldr	r3, [pc, #184]	@ (8006a84 <network_configure_activations+0x118>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3320      	adds	r3, #32
 80069d0:	4a30      	ldr	r2, [pc, #192]	@ (8006a94 <network_configure_activations+0x128>)
 80069d2:	6093      	str	r3, [r2, #8]
    conv1d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 32);
 80069d4:	4b2b      	ldr	r3, [pc, #172]	@ (8006a84 <network_configure_activations+0x118>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3320      	adds	r3, #32
 80069da:	4a2e      	ldr	r2, [pc, #184]	@ (8006a94 <network_configure_activations+0x128>)
 80069dc:	60d3      	str	r3, [r2, #12]
    conv1d_1_conv2d_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1568);
 80069de:	4b29      	ldr	r3, [pc, #164]	@ (8006a84 <network_configure_activations+0x118>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 80069e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006a98 <network_configure_activations+0x12c>)
 80069e8:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 1568);
 80069ea:	4b26      	ldr	r3, [pc, #152]	@ (8006a84 <network_configure_activations+0x118>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 80069f2:	4a29      	ldr	r2, [pc, #164]	@ (8006a98 <network_configure_activations+0x12c>)
 80069f4:	60d3      	str	r3, [r2, #12]
    conv1d_1_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80069f6:	4b23      	ldr	r3, [pc, #140]	@ (8006a84 <network_configure_activations+0x118>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a28      	ldr	r2, [pc, #160]	@ (8006a9c <network_configure_activations+0x130>)
 80069fc:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80069fe:	4b21      	ldr	r3, [pc, #132]	@ (8006a84 <network_configure_activations+0x118>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a26      	ldr	r2, [pc, #152]	@ (8006a9c <network_configure_activations+0x130>)
 8006a04:	60d3      	str	r3, [r2, #12]
    conv1d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 704);
 8006a06:	4b1f      	ldr	r3, [pc, #124]	@ (8006a84 <network_configure_activations+0x118>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8006a0e:	4a24      	ldr	r2, [pc, #144]	@ (8006aa0 <network_configure_activations+0x134>)
 8006a10:	6093      	str	r3, [r2, #8]
    conv1d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 704);
 8006a12:	4b1c      	ldr	r3, [pc, #112]	@ (8006a84 <network_configure_activations+0x118>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8006a1a:	4a21      	ldr	r2, [pc, #132]	@ (8006aa0 <network_configure_activations+0x134>)
 8006a1c:	60d3      	str	r3, [r2, #12]
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006a1e:	4b19      	ldr	r3, [pc, #100]	@ (8006a84 <network_configure_activations+0x118>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a20      	ldr	r2, [pc, #128]	@ (8006aa4 <network_configure_activations+0x138>)
 8006a24:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006a26:	4b17      	ldr	r3, [pc, #92]	@ (8006a84 <network_configure_activations+0x118>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8006aa4 <network_configure_activations+0x138>)
 8006a2c:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 8006a2e:	4b15      	ldr	r3, [pc, #84]	@ (8006a84 <network_configure_activations+0x118>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006a36:	4a1c      	ldr	r2, [pc, #112]	@ (8006aa8 <network_configure_activations+0x13c>)
 8006a38:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 8006a3a:	4b12      	ldr	r3, [pc, #72]	@ (8006a84 <network_configure_activations+0x118>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006a42:	4a19      	ldr	r2, [pc, #100]	@ (8006aa8 <network_configure_activations+0x13c>)
 8006a44:	60d3      	str	r3, [r2, #12]
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006a46:	4b0f      	ldr	r3, [pc, #60]	@ (8006a84 <network_configure_activations+0x118>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a18      	ldr	r2, [pc, #96]	@ (8006aac <network_configure_activations+0x140>)
 8006a4c:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a84 <network_configure_activations+0x118>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a16      	ldr	r2, [pc, #88]	@ (8006aac <network_configure_activations+0x140>)
 8006a54:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 8006a56:	4b0b      	ldr	r3, [pc, #44]	@ (8006a84 <network_configure_activations+0x118>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	330c      	adds	r3, #12
 8006a5c:	4a14      	ldr	r2, [pc, #80]	@ (8006ab0 <network_configure_activations+0x144>)
 8006a5e:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 8006a60:	4b08      	ldr	r3, [pc, #32]	@ (8006a84 <network_configure_activations+0x118>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	330c      	adds	r3, #12
 8006a66:	4a12      	ldr	r2, [pc, #72]	@ (8006ab0 <network_configure_activations+0x144>)
 8006a68:	60d3      	str	r3, [r2, #12]
    return true;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e005      	b.n	8006a7a <network_configure_activations+0x10e>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8006a6e:	2213      	movs	r2, #19
 8006a70:	2130      	movs	r1, #48	@ 0x30
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fb48 	bl	8007108 <ai_platform_network_set_error>
  return false;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20001c64 	.word	0x20001c64
 8006a88:	2000004c 	.word	0x2000004c
 8006a8c:	2000015c 	.word	0x2000015c
 8006a90:	2000005c 	.word	0x2000005c
 8006a94:	2000006c 	.word	0x2000006c
 8006a98:	2000016c 	.word	0x2000016c
 8006a9c:	2000007c 	.word	0x2000007c
 8006aa0:	2000008c 	.word	0x2000008c
 8006aa4:	2000009c 	.word	0x2000009c
 8006aa8:	200000ac 	.word	0x200000ac
 8006aac:	200000bc 	.word	0x200000bc
 8006ab0:	200000cc 	.word	0x200000cc

08006ab4 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	4852      	ldr	r0, [pc, #328]	@ (8006c0c <network_configure_weights+0x158>)
 8006ac4:	f000 fa4a 	bl	8006f5c <ai_platform_get_weights_map>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 8094 	beq.w	8006bf8 <network_configure_weights+0x144>
    /* Updating weights (byte) offsets */
    
    conv1d_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8006ad0:	4b4f      	ldr	r3, [pc, #316]	@ (8006c10 <network_configure_weights+0x15c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ad8:	4a4d      	ldr	r2, [pc, #308]	@ (8006c10 <network_configure_weights+0x15c>)
 8006ada:	6013      	str	r3, [r2, #0]
    conv1d_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8006adc:	4b4b      	ldr	r3, [pc, #300]	@ (8006c0c <network_configure_weights+0x158>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a4b      	ldr	r2, [pc, #300]	@ (8006c10 <network_configure_weights+0x15c>)
 8006ae2:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8006ae4:	4b49      	ldr	r3, [pc, #292]	@ (8006c0c <network_configure_weights+0x158>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a49      	ldr	r2, [pc, #292]	@ (8006c10 <network_configure_weights+0x15c>)
 8006aea:	60d3      	str	r3, [r2, #12]
    conv1d_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8006aec:	4b49      	ldr	r3, [pc, #292]	@ (8006c14 <network_configure_weights+0x160>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006af4:	4a47      	ldr	r2, [pc, #284]	@ (8006c14 <network_configure_weights+0x160>)
 8006af6:	6013      	str	r3, [r2, #0]
    conv1d_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 576);
 8006af8:	4b44      	ldr	r3, [pc, #272]	@ (8006c0c <network_configure_weights+0x158>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8006b00:	4a44      	ldr	r2, [pc, #272]	@ (8006c14 <network_configure_weights+0x160>)
 8006b02:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 576);
 8006b04:	4b41      	ldr	r3, [pc, #260]	@ (8006c0c <network_configure_weights+0x158>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8006b0c:	4a41      	ldr	r2, [pc, #260]	@ (8006c14 <network_configure_weights+0x160>)
 8006b0e:	60d3      	str	r3, [r2, #12]
    conv1d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8006b10:	4b41      	ldr	r3, [pc, #260]	@ (8006c18 <network_configure_weights+0x164>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b18:	4a3f      	ldr	r2, [pc, #252]	@ (8006c18 <network_configure_weights+0x164>)
 8006b1a:	6013      	str	r3, [r2, #0]
    conv1d_1_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 640);
 8006b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8006c0c <network_configure_weights+0x158>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8006b24:	4a3c      	ldr	r2, [pc, #240]	@ (8006c18 <network_configure_weights+0x164>)
 8006b26:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 640);
 8006b28:	4b38      	ldr	r3, [pc, #224]	@ (8006c0c <network_configure_weights+0x158>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8006b30:	4a39      	ldr	r2, [pc, #228]	@ (8006c18 <network_configure_weights+0x164>)
 8006b32:	60d3      	str	r3, [r2, #12]
    conv1d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8006b34:	4b39      	ldr	r3, [pc, #228]	@ (8006c1c <network_configure_weights+0x168>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b3c:	4a37      	ldr	r2, [pc, #220]	@ (8006c1c <network_configure_weights+0x168>)
 8006b3e:	6013      	str	r3, [r2, #0]
    conv1d_1_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 2176);
 8006b40:	4b32      	ldr	r3, [pc, #200]	@ (8006c0c <network_configure_weights+0x158>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f503 6308 	add.w	r3, r3, #2176	@ 0x880
 8006b48:	4a34      	ldr	r2, [pc, #208]	@ (8006c1c <network_configure_weights+0x168>)
 8006b4a:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2176);
 8006b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8006c0c <network_configure_weights+0x158>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f503 6308 	add.w	r3, r3, #2176	@ 0x880
 8006b54:	4a31      	ldr	r2, [pc, #196]	@ (8006c1c <network_configure_weights+0x168>)
 8006b56:	60d3      	str	r3, [r2, #12]
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006b58:	4b31      	ldr	r3, [pc, #196]	@ (8006c20 <network_configure_weights+0x16c>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b60:	4a2f      	ldr	r2, [pc, #188]	@ (8006c20 <network_configure_weights+0x16c>)
 8006b62:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 2208);
 8006b64:	4b29      	ldr	r3, [pc, #164]	@ (8006c0c <network_configure_weights+0x158>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8006b6c:	4a2c      	ldr	r2, [pc, #176]	@ (8006c20 <network_configure_weights+0x16c>)
 8006b6e:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2208);
 8006b70:	4b26      	ldr	r3, [pc, #152]	@ (8006c0c <network_configure_weights+0x158>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8006b78:	4a29      	ldr	r2, [pc, #164]	@ (8006c20 <network_configure_weights+0x16c>)
 8006b7a:	60d3      	str	r3, [r2, #12]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006b7c:	4b29      	ldr	r3, [pc, #164]	@ (8006c24 <network_configure_weights+0x170>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b84:	4a27      	ldr	r2, [pc, #156]	@ (8006c24 <network_configure_weights+0x170>)
 8006b86:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 47264);
 8006b88:	4b20      	ldr	r3, [pc, #128]	@ (8006c0c <network_configure_weights+0x158>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f503 4338 	add.w	r3, r3, #47104	@ 0xb800
 8006b90:	33a0      	adds	r3, #160	@ 0xa0
 8006b92:	4a24      	ldr	r2, [pc, #144]	@ (8006c24 <network_configure_weights+0x170>)
 8006b94:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 47264);
 8006b96:	4b1d      	ldr	r3, [pc, #116]	@ (8006c0c <network_configure_weights+0x158>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f503 4338 	add.w	r3, r3, #47104	@ 0xb800
 8006b9e:	33a0      	adds	r3, #160	@ 0xa0
 8006ba0:	4a20      	ldr	r2, [pc, #128]	@ (8006c24 <network_configure_weights+0x170>)
 8006ba2:	60d3      	str	r3, [r2, #12]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006ba4:	4b20      	ldr	r3, [pc, #128]	@ (8006c28 <network_configure_weights+0x174>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bac:	4a1e      	ldr	r2, [pc, #120]	@ (8006c28 <network_configure_weights+0x174>)
 8006bae:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 47520);
 8006bb0:	4b16      	ldr	r3, [pc, #88]	@ (8006c0c <network_configure_weights+0x158>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f503 4339 	add.w	r3, r3, #47360	@ 0xb900
 8006bb8:	33a0      	adds	r3, #160	@ 0xa0
 8006bba:	4a1b      	ldr	r2, [pc, #108]	@ (8006c28 <network_configure_weights+0x174>)
 8006bbc:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 47520);
 8006bbe:	4b13      	ldr	r3, [pc, #76]	@ (8006c0c <network_configure_weights+0x158>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f503 4339 	add.w	r3, r3, #47360	@ 0xb900
 8006bc6:	33a0      	adds	r3, #160	@ 0xa0
 8006bc8:	4a17      	ldr	r2, [pc, #92]	@ (8006c28 <network_configure_weights+0x174>)
 8006bca:	60d3      	str	r3, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006bcc:	4b17      	ldr	r3, [pc, #92]	@ (8006c2c <network_configure_weights+0x178>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bd4:	4a15      	ldr	r2, [pc, #84]	@ (8006c2c <network_configure_weights+0x178>)
 8006bd6:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 48288);
 8006bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8006c0c <network_configure_weights+0x158>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f503 433c 	add.w	r3, r3, #48128	@ 0xbc00
 8006be0:	33a0      	adds	r3, #160	@ 0xa0
 8006be2:	4a12      	ldr	r2, [pc, #72]	@ (8006c2c <network_configure_weights+0x178>)
 8006be4:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 48288);
 8006be6:	4b09      	ldr	r3, [pc, #36]	@ (8006c0c <network_configure_weights+0x158>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f503 433c 	add.w	r3, r3, #48128	@ 0xbc00
 8006bee:	33a0      	adds	r3, #160	@ 0xa0
 8006bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8006c2c <network_configure_weights+0x178>)
 8006bf2:	60d3      	str	r3, [r2, #12]
    return true;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e005      	b.n	8006c04 <network_configure_weights+0x150>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8006bf8:	2212      	movs	r2, #18
 8006bfa:	2130      	movs	r1, #48	@ 0x30
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fa83 	bl	8007108 <ai_platform_network_set_error>
  return false;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3708      	adds	r7, #8
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	20001c68 	.word	0x20001c68
 8006c10:	200000dc 	.word	0x200000dc
 8006c14:	200000ec 	.word	0x200000ec
 8006c18:	200000fc 	.word	0x200000fc
 8006c1c:	2000010c 	.word	0x2000010c
 8006c20:	2000011c 	.word	0x2000011c
 8006c24:	2000012c 	.word	0x2000012c
 8006c28:	2000013c 	.word	0x2000013c
 8006c2c:	2000014c 	.word	0x2000014c

08006c30 <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fa59 	bl	80070f0 <ai_platform_network_get_error>
 8006c3e:	4603      	mov	r3, r0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af02      	add	r7, sp, #8
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8006c52:	2300      	movs	r3, #0
 8006c54:	9301      	str	r3, [sp, #4]
 8006c56:	2305      	movs	r3, #5
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4a04      	ldr	r2, [pc, #16]	@ (8006c70 <ai_network_create+0x28>)
 8006c5e:	6839      	ldr	r1, [r7, #0]
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fb41 	bl	80072e8 <ai_platform_network_create>
 8006c66:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	200009f4 	.word	0x200009f4

08006c74 <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b094      	sub	sp, #80	@ 0x50
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8006c80:	2100      	movs	r1, #0
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f7ff ffe0 	bl	8006c48 <ai_network_create>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8006c8c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <ai_network_create_and_init+0x24>
    return err;
 8006c94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c96:	e067      	b.n	8006d68 <ai_network_create_and_init+0xf4>
  }
  
  if (ai_network_data_params_get(&params) != true) {
 8006c98:	f107 0310 	add.w	r3, r7, #16
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 f8e7 	bl	8006e70 <ai_network_data_params_get>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	f083 0301 	eor.w	r3, r3, #1
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d008      	beq.n	8006cc0 <ai_network_create_and_init+0x4c>
    err = ai_network_get_error(*network);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7ff ffbc 	bl	8006c30 <ai_network_get_error>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8006cbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cbe:	e053      	b.n	8006d68 <ai_network_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006cc6:	e012      	b.n	8006cee <ai_network_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8006cc8:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8006ccc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	f107 0310 	add.w	r3, r7, #16
 8006cdc:	330c      	adds	r3, #12
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 f92c 	bl	8006f3c <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8006ce4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006ce8:	3301      	adds	r3, #1
 8006cea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d004      	beq.n	8006cfe <ai_network_create_and_init+0x8a>
 8006cf4:	8bfb      	ldrh	r3, [r7, #30]
 8006cf6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d3e4      	bcc.n	8006cc8 <ai_network_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006d04:	e012      	b.n	8006d2c <ai_network_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8006d06:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 8006d0a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	4413      	add	r3, r2
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	f107 0310 	add.w	r3, r7, #16
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 f90d 	bl	8006f3c <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8006d22:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006d26:	3301      	adds	r3, #1
 8006d28:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d004      	beq.n	8006d3c <ai_network_create_and_init+0xc8>
 8006d32:	8afb      	ldrh	r3, [r7, #22]
 8006d34:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d3e4      	bcc.n	8006d06 <ai_network_create_and_init+0x92>
  }
#endif
  if (ai_network_init(*network, &params) != true) {
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f107 0210 	add.w	r2, r7, #16
 8006d44:	4611      	mov	r1, r2
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 f846 	bl	8006dd8 <ai_network_init>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f083 0301 	eor.w	r3, r3, #1
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d006      	beq.n	8006d66 <ai_network_create_and_init+0xf2>
    err = ai_network_get_error(*network);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7ff ff67 	bl	8006c30 <ai_network_get_error>
 8006d62:	4603      	mov	r3, r0
 8006d64:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 8006d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3750      	adds	r7, #80	@ 0x50
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d104      	bne.n	8006d8a <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8006d80:	4b06      	ldr	r3, [pc, #24]	@ (8006d9c <ai_network_inputs_get+0x2c>)
 8006d82:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a06      	ldr	r2, [pc, #24]	@ (8006da0 <ai_network_inputs_get+0x30>)
 8006d88:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f9c1 	bl	8007114 <ai_platform_inputs_get>
 8006d92:	4603      	mov	r3, r0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	200009f4 	.word	0x200009f4
 8006da0:	a1c00100 	.word	0xa1c00100

08006da4 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d104      	bne.n	8006dbe <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8006db4:	4b06      	ldr	r3, [pc, #24]	@ (8006dd0 <ai_network_outputs_get+0x2c>)
 8006db6:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a06      	ldr	r2, [pc, #24]	@ (8006dd4 <ai_network_outputs_get+0x30>)
 8006dbc:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fa1d 	bl	8007200 <ai_platform_outputs_get>
 8006dc6:	4603      	mov	r3, r0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	200009f4 	.word	0x200009f4
 8006dd4:	a1c00100 	.word	0xa1c00100

08006dd8 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fac1 	bl	800736c <ai_platform_network_init>
 8006dea:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 8006dec:	2301      	movs	r3, #1
 8006dee:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <ai_network_init+0x22>
 8006df6:	2300      	movs	r3, #0
 8006df8:	e026      	b.n	8006e48 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f7ff fe59 	bl	8006ab4 <network_configure_weights>
 8006e02:	4603      	mov	r3, r0
 8006e04:	461a      	mov	r2, r3
 8006e06:	7afb      	ldrb	r3, [r7, #11]
 8006e08:	4013      	ands	r3, r2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	bf14      	ite	ne
 8006e0e:	2301      	movne	r3, #1
 8006e10:	2300      	moveq	r3, #0
 8006e12:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f7ff fda8 	bl	800696c <network_configure_activations>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	461a      	mov	r2, r3
 8006e20:	7afb      	ldrb	r3, [r7, #11]
 8006e22:	4013      	ands	r3, r2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	bf14      	ite	ne
 8006e28:	2301      	movne	r3, #1
 8006e2a:	2300      	moveq	r3, #0
 8006e2c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fb6a 	bl	8007508 <ai_platform_network_post_init>
 8006e34:	4603      	mov	r3, r0
 8006e36:	461a      	mov	r2, r3
 8006e38:	7afb      	ldrb	r3, [r7, #11]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	bf14      	ite	ne
 8006e40:	2301      	movne	r3, #1
 8006e42:	2300      	moveq	r3, #0
 8006e44:	72fb      	strb	r3, [r7, #11]

  return ok;
 8006e46:	7afb      	ldrb	r3, [r7, #11]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	68b9      	ldr	r1, [r7, #8]
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 fb81 	bl	8007568 <ai_platform_network_process>
 8006e66:	4603      	mov	r3, r0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <ai_network_data_params_get+0x12>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	e016      	b.n	8006eb0 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8006e82:	4a0d      	ldr	r2, [pc, #52]	@ (8006eb8 <ai_network_data_params_get+0x48>)
 8006e84:	f107 0310 	add.w	r3, r7, #16
 8006e88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e8c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8006e90:	4a0a      	ldr	r2, [pc, #40]	@ (8006ebc <ai_network_data_params_get+0x4c>)
 8006e92:	f107 0308 	add.w	r3, r7, #8
 8006e96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e9a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8006e9e:	f107 0210 	add.w	r2, r7, #16
 8006ea2:	f107 0308 	add.w	r3, r7, #8
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f8ff 	bl	80070ac <ai_platform_bind_network_params>
 8006eae:	4603      	mov	r3, r0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	0800c2f0 	.word	0x0800c2f0
 8006ebc:	0800c2f8 	.word	0x0800c2f8

08006ec0 <ai_buffer_get_size>:
 8006ec0:	b378      	cbz	r0, 8006f22 <ai_buffer_get_size+0x62>
 8006ec2:	b410      	push	{r4}
 8006ec4:	6803      	ldr	r3, [r0, #0]
 8006ec6:	4a17      	ldr	r2, [pc, #92]	@ (8006f24 <ai_buffer_get_size+0x64>)
 8006ec8:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8006ecc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d01e      	beq.n	8006f12 <ai_buffer_get_size+0x52>
 8006ed4:	6984      	ldr	r4, [r0, #24]
 8006ed6:	6862      	ldr	r2, [r4, #4]
 8006ed8:	7d03      	ldrb	r3, [r0, #20]
 8006eda:	6941      	ldr	r1, [r0, #20]
 8006edc:	f1a3 0301 	sub.w	r3, r3, #1
 8006ee0:	fab3 f383 	clz	r3, r3
 8006ee4:	095b      	lsrs	r3, r3, #5
 8006ee6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8006eea:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8006eee:	da0b      	bge.n	8006f08 <ai_buffer_get_size+0x48>
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d102      	bne.n	8006efa <ai_buffer_get_size+0x3a>
 8006ef4:	2802      	cmp	r0, #2
 8006ef6:	d007      	beq.n	8006f08 <ai_buffer_get_size+0x48>
 8006ef8:	2302      	movs	r3, #2
 8006efa:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8006efe:	3301      	adds	r3, #1
 8006f00:	4298      	cmp	r0, r3
 8006f02:	fb01 f202 	mul.w	r2, r1, r2
 8006f06:	d1f3      	bne.n	8006ef0 <ai_buffer_get_size+0x30>
 8006f08:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8006f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	2900      	cmp	r1, #0
 8006f14:	d0de      	beq.n	8006ed4 <ai_buffer_get_size+0x14>
 8006f16:	6984      	ldr	r4, [r0, #24]
 8006f18:	6862      	ldr	r2, [r4, #4]
 8006f1a:	321f      	adds	r2, #31
 8006f1c:	f022 021f 	bic.w	r2, r2, #31
 8006f20:	e7da      	b.n	8006ed8 <ai_buffer_get_size+0x18>
 8006f22:	4770      	bx	lr
 8006f24:	000400c0 	.word	0x000400c0

08006f28 <ai_buffer_array_sane>:
 8006f28:	b138      	cbz	r0, 8006f3a <ai_buffer_array_sane+0x12>
 8006f2a:	6843      	ldr	r3, [r0, #4]
 8006f2c:	b123      	cbz	r3, 8006f38 <ai_buffer_array_sane+0x10>
 8006f2e:	8840      	ldrh	r0, [r0, #2]
 8006f30:	3800      	subs	r0, #0
 8006f32:	bf18      	it	ne
 8006f34:	2001      	movne	r0, #1
 8006f36:	4770      	bx	lr
 8006f38:	4618      	mov	r0, r3
 8006f3a:	4770      	bx	lr

08006f3c <ai_buffer_array_item_set_address>:
 8006f3c:	b150      	cbz	r0, 8006f54 <ai_buffer_array_item_set_address+0x18>
 8006f3e:	6843      	ldr	r3, [r0, #4]
 8006f40:	b14b      	cbz	r3, 8006f56 <ai_buffer_array_item_set_address+0x1a>
 8006f42:	8840      	ldrh	r0, [r0, #2]
 8006f44:	b900      	cbnz	r0, 8006f48 <ai_buffer_array_item_set_address+0xc>
 8006f46:	4770      	bx	lr
 8006f48:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006f4c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006f50:	2001      	movs	r0, #1
 8006f52:	605a      	str	r2, [r3, #4]
 8006f54:	4770      	bx	lr
 8006f56:	4618      	mov	r0, r3
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop

08006f5c <ai_platform_get_weights_map>:
 8006f5c:	2a00      	cmp	r2, #0
 8006f5e:	d037      	beq.n	8006fd0 <ai_platform_get_weights_map+0x74>
 8006f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f62:	4604      	mov	r4, r0
 8006f64:	b1a0      	cbz	r0, 8006f90 <ai_platform_get_weights_map+0x34>
 8006f66:	460f      	mov	r7, r1
 8006f68:	b191      	cbz	r1, 8006f90 <ai_platform_get_weights_map+0x34>
 8006f6a:	4b25      	ldr	r3, [pc, #148]	@ (8007000 <ai_platform_get_weights_map+0xa4>)
 8006f6c:	6810      	ldr	r0, [r2, #0]
 8006f6e:	4298      	cmp	r0, r3
 8006f70:	4615      	mov	r5, r2
 8006f72:	d00f      	beq.n	8006f94 <ai_platform_get_weights_map+0x38>
 8006f74:	6855      	ldr	r5, [r2, #4]
 8006f76:	b15d      	cbz	r5, 8006f90 <ai_platform_get_weights_map+0x34>
 8006f78:	682e      	ldr	r6, [r5, #0]
 8006f7a:	429e      	cmp	r6, r3
 8006f7c:	d02a      	beq.n	8006fd4 <ai_platform_get_weights_map+0x78>
 8006f7e:	f1a1 0001 	sub.w	r0, r1, #1
 8006f82:	6025      	str	r5, [r4, #0]
 8006f84:	fab0 f080 	clz	r0, r0
 8006f88:	0940      	lsrs	r0, r0, #5
 8006f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f8c:	42a7      	cmp	r7, r4
 8006f8e:	d034      	beq.n	8006ffa <ai_platform_get_weights_map+0x9e>
 8006f90:	2000      	movs	r0, #0
 8006f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f94:	1d10      	adds	r0, r2, #4
 8006f96:	f7ff ffc7 	bl	8006f28 <ai_buffer_array_sane>
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	d0f8      	beq.n	8006f90 <ai_platform_get_weights_map+0x34>
 8006f9e:	88eb      	ldrh	r3, [r5, #6]
 8006fa0:	429f      	cmp	r7, r3
 8006fa2:	d1f5      	bne.n	8006f90 <ai_platform_get_weights_map+0x34>
 8006fa4:	f04f 0c00 	mov.w	ip, #0
 8006fa8:	1f20      	subs	r0, r4, #4
 8006faa:	46e6      	mov	lr, ip
 8006fac:	68ab      	ldr	r3, [r5, #8]
 8006fae:	4463      	add	r3, ip
 8006fb0:	f10c 0c1c 	add.w	ip, ip, #28
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	b12b      	cbz	r3, 8006fc4 <ai_platform_get_weights_map+0x68>
 8006fb8:	f10e 0e01 	add.w	lr, lr, #1
 8006fbc:	4577      	cmp	r7, lr
 8006fbe:	f840 3f04 	str.w	r3, [r0, #4]!
 8006fc2:	d1f3      	bne.n	8006fac <ai_platform_get_weights_map+0x50>
 8006fc4:	eba7 000e 	sub.w	r0, r7, lr
 8006fc8:	fab0 f080 	clz	r0, r0
 8006fcc:	0940      	lsrs	r0, r0, #5
 8006fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	4770      	bx	lr
 8006fd4:	1f20      	subs	r0, r4, #4
 8006fd6:	462a      	mov	r2, r5
 8006fd8:	2400      	movs	r4, #0
 8006fda:	e000      	b.n	8006fde <ai_platform_get_weights_map+0x82>
 8006fdc:	461c      	mov	r4, r3
 8006fde:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8006fe2:	42b3      	cmp	r3, r6
 8006fe4:	d0d2      	beq.n	8006f8c <ai_platform_get_weights_map+0x30>
 8006fe6:	f840 3f04 	str.w	r3, [r0, #4]!
 8006fea:	1c63      	adds	r3, r4, #1
 8006fec:	429f      	cmp	r7, r3
 8006fee:	d1f5      	bne.n	8006fdc <ai_platform_get_weights_map+0x80>
 8006ff0:	3402      	adds	r4, #2
 8006ff2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006ff6:	42b3      	cmp	r3, r6
 8006ff8:	d1ca      	bne.n	8006f90 <ai_platform_get_weights_map+0x34>
 8006ffa:	2001      	movs	r0, #1
 8006ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ffe:	bf00      	nop
 8007000:	a1facade 	.word	0xa1facade

08007004 <ai_platform_get_activations_map>:
 8007004:	2a00      	cmp	r2, #0
 8007006:	d038      	beq.n	800707a <ai_platform_get_activations_map+0x76>
 8007008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700a:	4604      	mov	r4, r0
 800700c:	b1a0      	cbz	r0, 8007038 <ai_platform_get_activations_map+0x34>
 800700e:	460f      	mov	r7, r1
 8007010:	b191      	cbz	r1, 8007038 <ai_platform_get_activations_map+0x34>
 8007012:	4b25      	ldr	r3, [pc, #148]	@ (80070a8 <ai_platform_get_activations_map+0xa4>)
 8007014:	6810      	ldr	r0, [r2, #0]
 8007016:	4298      	cmp	r0, r3
 8007018:	4615      	mov	r5, r2
 800701a:	d00f      	beq.n	800703c <ai_platform_get_activations_map+0x38>
 800701c:	6a15      	ldr	r5, [r2, #32]
 800701e:	b15d      	cbz	r5, 8007038 <ai_platform_get_activations_map+0x34>
 8007020:	682e      	ldr	r6, [r5, #0]
 8007022:	429e      	cmp	r6, r3
 8007024:	d02b      	beq.n	800707e <ai_platform_get_activations_map+0x7a>
 8007026:	f1a1 0001 	sub.w	r0, r1, #1
 800702a:	6025      	str	r5, [r4, #0]
 800702c:	fab0 f080 	clz	r0, r0
 8007030:	0940      	lsrs	r0, r0, #5
 8007032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007034:	42a7      	cmp	r7, r4
 8007036:	d035      	beq.n	80070a4 <ai_platform_get_activations_map+0xa0>
 8007038:	2000      	movs	r0, #0
 800703a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800703c:	f102 000c 	add.w	r0, r2, #12
 8007040:	f7ff ff72 	bl	8006f28 <ai_buffer_array_sane>
 8007044:	2800      	cmp	r0, #0
 8007046:	d0f7      	beq.n	8007038 <ai_platform_get_activations_map+0x34>
 8007048:	89eb      	ldrh	r3, [r5, #14]
 800704a:	429f      	cmp	r7, r3
 800704c:	d1f4      	bne.n	8007038 <ai_platform_get_activations_map+0x34>
 800704e:	f04f 0c00 	mov.w	ip, #0
 8007052:	1f20      	subs	r0, r4, #4
 8007054:	46e6      	mov	lr, ip
 8007056:	692b      	ldr	r3, [r5, #16]
 8007058:	4463      	add	r3, ip
 800705a:	f10c 0c1c 	add.w	ip, ip, #28
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	b12b      	cbz	r3, 800706e <ai_platform_get_activations_map+0x6a>
 8007062:	f10e 0e01 	add.w	lr, lr, #1
 8007066:	4577      	cmp	r7, lr
 8007068:	f840 3f04 	str.w	r3, [r0, #4]!
 800706c:	d1f3      	bne.n	8007056 <ai_platform_get_activations_map+0x52>
 800706e:	eba7 000e 	sub.w	r0, r7, lr
 8007072:	fab0 f080 	clz	r0, r0
 8007076:	0940      	lsrs	r0, r0, #5
 8007078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800707a:	2000      	movs	r0, #0
 800707c:	4770      	bx	lr
 800707e:	1f20      	subs	r0, r4, #4
 8007080:	462a      	mov	r2, r5
 8007082:	2400      	movs	r4, #0
 8007084:	e000      	b.n	8007088 <ai_platform_get_activations_map+0x84>
 8007086:	461c      	mov	r4, r3
 8007088:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800708c:	42b3      	cmp	r3, r6
 800708e:	d0d1      	beq.n	8007034 <ai_platform_get_activations_map+0x30>
 8007090:	f840 3f04 	str.w	r3, [r0, #4]!
 8007094:	1c63      	adds	r3, r4, #1
 8007096:	429f      	cmp	r7, r3
 8007098:	d1f5      	bne.n	8007086 <ai_platform_get_activations_map+0x82>
 800709a:	3402      	adds	r4, #2
 800709c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80070a0:	42b3      	cmp	r3, r6
 80070a2:	d1c9      	bne.n	8007038 <ai_platform_get_activations_map+0x34>
 80070a4:	2001      	movs	r0, #1
 80070a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070a8:	a1facade 	.word	0xa1facade

080070ac <ai_platform_bind_network_params>:
 80070ac:	b1a0      	cbz	r0, 80070d8 <ai_platform_bind_network_params+0x2c>
 80070ae:	b1b1      	cbz	r1, 80070de <ai_platform_bind_network_params+0x32>
 80070b0:	b1c2      	cbz	r2, 80070e4 <ai_platform_bind_network_params+0x38>
 80070b2:	b410      	push	{r4}
 80070b4:	4603      	mov	r3, r0
 80070b6:	4c0d      	ldr	r4, [pc, #52]	@ (80070ec <ai_platform_bind_network_params+0x40>)
 80070b8:	f843 4b04 	str.w	r4, [r3], #4
 80070bc:	f100 0c0c 	add.w	ip, r0, #12
 80070c0:	c903      	ldmia	r1, {r0, r1}
 80070c2:	e883 0003 	stmia.w	r3, {r0, r1}
 80070c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80070ca:	e88c 0003 	stmia.w	ip, {r0, r1}
 80070ce:	2301      	movs	r3, #1
 80070d0:	4618      	mov	r0, r3
 80070d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	4603      	mov	r3, r0
 80070da:	4618      	mov	r0, r3
 80070dc:	4770      	bx	lr
 80070de:	460b      	mov	r3, r1
 80070e0:	4618      	mov	r0, r3
 80070e2:	4770      	bx	lr
 80070e4:	4613      	mov	r3, r2
 80070e6:	4618      	mov	r0, r3
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	a1facade 	.word	0xa1facade

080070f0 <ai_platform_network_get_error>:
 80070f0:	4b04      	ldr	r3, [pc, #16]	@ (8007104 <ai_platform_network_get_error+0x14>)
 80070f2:	6802      	ldr	r2, [r0, #0]
 80070f4:	4393      	bics	r3, r2
 80070f6:	d102      	bne.n	80070fe <ai_platform_network_get_error+0xe>
 80070f8:	300c      	adds	r0, #12
 80070fa:	f000 bc77 	b.w	80079ec <core_get_error>
 80070fe:	f241 0010 	movw	r0, #4112	@ 0x1010
 8007102:	4770      	bx	lr
 8007104:	a1c00100 	.word	0xa1c00100

08007108 <ai_platform_network_set_error>:
 8007108:	b110      	cbz	r0, 8007110 <ai_platform_network_set_error+0x8>
 800710a:	300c      	adds	r0, #12
 800710c:	f000 bc74 	b.w	80079f8 <core_set_error>
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop

08007114 <ai_platform_inputs_get>:
 8007114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007118:	4b38      	ldr	r3, [pc, #224]	@ (80071fc <ai_platform_inputs_get+0xe8>)
 800711a:	6802      	ldr	r2, [r0, #0]
 800711c:	b085      	sub	sp, #20
 800711e:	4393      	bics	r3, r2
 8007120:	9003      	str	r0, [sp, #12]
 8007122:	9102      	str	r1, [sp, #8]
 8007124:	d160      	bne.n	80071e8 <ai_platform_inputs_get+0xd4>
 8007126:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8007128:	2b00      	cmp	r3, #0
 800712a:	d04f      	beq.n	80071cc <ai_platform_inputs_get+0xb8>
 800712c:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8007130:	f1ba 0f00 	cmp.w	sl, #0
 8007134:	d04a      	beq.n	80071cc <ai_platform_inputs_get+0xb8>
 8007136:	f04f 0b00 	mov.w	fp, #0
 800713a:	465d      	mov	r5, fp
 800713c:	e016      	b.n	800716c <ai_platform_inputs_get+0x58>
 800713e:	9901      	ldr	r1, [sp, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	507a      	str	r2, [r7, r1]
 8007144:	69b1      	ldr	r1, [r6, #24]
 8007146:	684e      	ldr	r6, [r1, #4]
 8007148:	60a3      	str	r3, [r4, #8]
 800714a:	f04f 0201 	mov.w	r2, #1
 800714e:	7522      	strb	r2, [r4, #20]
 8007150:	6961      	ldr	r1, [r4, #20]
 8007152:	6020      	str	r0, [r4, #0]
 8007154:	f369 211f 	bfi	r1, r9, #8, #24
 8007158:	2300      	movs	r3, #0
 800715a:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800715e:	e9c4 1805 	strd	r1, r8, [r4, #20]
 8007162:	f8c4 c004 	str.w	ip, [r4, #4]
 8007166:	3501      	adds	r5, #1
 8007168:	f10b 0b1c 	add.w	fp, fp, #28
 800716c:	f8ba 3000 	ldrh.w	r3, [sl]
 8007170:	42ab      	cmp	r3, r5
 8007172:	b2aa      	uxth	r2, r5
 8007174:	d93c      	bls.n	80071f0 <ai_platform_inputs_get+0xdc>
 8007176:	f8da 3004 	ldr.w	r3, [sl, #4]
 800717a:	00e9      	lsls	r1, r5, #3
 800717c:	9101      	str	r1, [sp, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d036      	beq.n	80071f0 <ai_platform_inputs_get+0xdc>
 8007182:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8007186:	2e00      	cmp	r6, #0
 8007188:	d032      	beq.n	80071f0 <ai_platform_inputs_get+0xdc>
 800718a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800718e:	69b2      	ldr	r2, [r6, #24]
 8007190:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8007194:	6810      	ldr	r0, [r2, #0]
 8007196:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800719a:	68b3      	ldr	r3, [r6, #8]
 800719c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80071a0:	f001 ff32 	bl	8009008 <ai_array_to_buffer_fmt>
 80071a4:	69b1      	ldr	r1, [r6, #24]
 80071a6:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 80071aa:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80071ae:	445c      	add	r4, fp
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d0c8      	beq.n	8007146 <ai_platform_inputs_get+0x32>
 80071b4:	2100      	movs	r1, #0
 80071b6:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80071ba:	6831      	ldr	r1, [r6, #0]
 80071bc:	6059      	str	r1, [r3, #4]
 80071be:	b111      	cbz	r1, 80071c6 <ai_platform_inputs_get+0xb2>
 80071c0:	8849      	ldrh	r1, [r1, #2]
 80071c2:	2900      	cmp	r1, #0
 80071c4:	d1bb      	bne.n	800713e <ai_platform_inputs_get+0x2a>
 80071c6:	69b1      	ldr	r1, [r6, #24]
 80071c8:	2300      	movs	r3, #0
 80071ca:	e7bc      	b.n	8007146 <ai_platform_inputs_get+0x32>
 80071cc:	9803      	ldr	r0, [sp, #12]
 80071ce:	2218      	movs	r2, #24
 80071d0:	2111      	movs	r1, #17
 80071d2:	300c      	adds	r0, #12
 80071d4:	f000 fc10 	bl	80079f8 <core_set_error>
 80071d8:	2200      	movs	r2, #0
 80071da:	4610      	mov	r0, r2
 80071dc:	9b02      	ldr	r3, [sp, #8]
 80071de:	b103      	cbz	r3, 80071e2 <ai_platform_inputs_get+0xce>
 80071e0:	801a      	strh	r2, [r3, #0]
 80071e2:	b005      	add	sp, #20
 80071e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e8:	2000      	movs	r0, #0
 80071ea:	b005      	add	sp, #20
 80071ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f0:	2a00      	cmp	r2, #0
 80071f2:	d0eb      	beq.n	80071cc <ai_platform_inputs_get+0xb8>
 80071f4:	f8da 3008 	ldr.w	r3, [sl, #8]
 80071f8:	6858      	ldr	r0, [r3, #4]
 80071fa:	e7ef      	b.n	80071dc <ai_platform_inputs_get+0xc8>
 80071fc:	a1c00100 	.word	0xa1c00100

08007200 <ai_platform_outputs_get>:
 8007200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007204:	4b37      	ldr	r3, [pc, #220]	@ (80072e4 <ai_platform_outputs_get+0xe4>)
 8007206:	6802      	ldr	r2, [r0, #0]
 8007208:	b085      	sub	sp, #20
 800720a:	4393      	bics	r3, r2
 800720c:	9003      	str	r0, [sp, #12]
 800720e:	9102      	str	r1, [sp, #8]
 8007210:	d15d      	bne.n	80072ce <ai_platform_outputs_get+0xce>
 8007212:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8007214:	2b01      	cmp	r3, #1
 8007216:	d94c      	bls.n	80072b2 <ai_platform_outputs_get+0xb2>
 8007218:	f04f 0b00 	mov.w	fp, #0
 800721c:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8007220:	465d      	mov	r5, fp
 8007222:	46d8      	mov	r8, fp
 8007224:	e016      	b.n	8007254 <ai_platform_outputs_get+0x54>
 8007226:	9a01      	ldr	r2, [sp, #4]
 8007228:	2101      	movs	r1, #1
 800722a:	50b9      	str	r1, [r7, r2]
 800722c:	69b2      	ldr	r2, [r6, #24]
 800722e:	6856      	ldr	r6, [r2, #4]
 8007230:	6020      	str	r0, [r4, #0]
 8007232:	f04f 0201 	mov.w	r2, #1
 8007236:	7522      	strb	r2, [r4, #20]
 8007238:	6960      	ldr	r0, [r4, #20]
 800723a:	f8c4 c004 	str.w	ip, [r4, #4]
 800723e:	f369 201f 	bfi	r0, r9, #8, #24
 8007242:	e9c4 6004 	strd	r6, r0, [r4, #16]
 8007246:	e9c4 3802 	strd	r3, r8, [r4, #8]
 800724a:	9b00      	ldr	r3, [sp, #0]
 800724c:	61a3      	str	r3, [r4, #24]
 800724e:	3501      	adds	r5, #1
 8007250:	f10b 0b1c 	add.w	fp, fp, #28
 8007254:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8007258:	42ab      	cmp	r3, r5
 800725a:	b2aa      	uxth	r2, r5
 800725c:	d93b      	bls.n	80072d6 <ai_platform_outputs_get+0xd6>
 800725e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8007262:	00e9      	lsls	r1, r5, #3
 8007264:	9101      	str	r1, [sp, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d035      	beq.n	80072d6 <ai_platform_outputs_get+0xd6>
 800726a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800726e:	2e00      	cmp	r6, #0
 8007270:	d031      	beq.n	80072d6 <ai_platform_outputs_get+0xd6>
 8007272:	f8da 3014 	ldr.w	r3, [sl, #20]
 8007276:	69b2      	ldr	r2, [r6, #24]
 8007278:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800727c:	68b3      	ldr	r3, [r6, #8]
 800727e:	6810      	ldr	r0, [r2, #0]
 8007280:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8007284:	68f3      	ldr	r3, [r6, #12]
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	f001 febe 	bl	8009008 <ai_array_to_buffer_fmt>
 800728c:	69b2      	ldr	r2, [r6, #24]
 800728e:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8007292:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8007296:	445c      	add	r4, fp
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0c8      	beq.n	800722e <ai_platform_outputs_get+0x2e>
 800729c:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 80072a0:	6832      	ldr	r2, [r6, #0]
 80072a2:	605a      	str	r2, [r3, #4]
 80072a4:	b112      	cbz	r2, 80072ac <ai_platform_outputs_get+0xac>
 80072a6:	8852      	ldrh	r2, [r2, #2]
 80072a8:	2a00      	cmp	r2, #0
 80072aa:	d1bc      	bne.n	8007226 <ai_platform_outputs_get+0x26>
 80072ac:	69b2      	ldr	r2, [r6, #24]
 80072ae:	2300      	movs	r3, #0
 80072b0:	e7bd      	b.n	800722e <ai_platform_outputs_get+0x2e>
 80072b2:	9803      	ldr	r0, [sp, #12]
 80072b4:	2218      	movs	r2, #24
 80072b6:	2111      	movs	r1, #17
 80072b8:	300c      	adds	r0, #12
 80072ba:	f000 fb9d 	bl	80079f8 <core_set_error>
 80072be:	2200      	movs	r2, #0
 80072c0:	4610      	mov	r0, r2
 80072c2:	9b02      	ldr	r3, [sp, #8]
 80072c4:	b103      	cbz	r3, 80072c8 <ai_platform_outputs_get+0xc8>
 80072c6:	801a      	strh	r2, [r3, #0]
 80072c8:	b005      	add	sp, #20
 80072ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ce:	2000      	movs	r0, #0
 80072d0:	b005      	add	sp, #20
 80072d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d6:	2a00      	cmp	r2, #0
 80072d8:	d0eb      	beq.n	80072b2 <ai_platform_outputs_get+0xb2>
 80072da:	f8da 3014 	ldr.w	r3, [sl, #20]
 80072de:	6858      	ldr	r0, [r3, #4]
 80072e0:	e7ef      	b.n	80072c2 <ai_platform_outputs_get+0xc2>
 80072e2:	bf00      	nop
 80072e4:	a1c00100 	.word	0xa1c00100

080072e8 <ai_platform_network_create>:
 80072e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80072ec:	b083      	sub	sp, #12
 80072ee:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 80072f2:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80072f6:	b320      	cbz	r0, 8007342 <ai_platform_network_create+0x5a>
 80072f8:	6002      	str	r2, [r0, #0]
 80072fa:	4616      	mov	r6, r2
 80072fc:	461f      	mov	r7, r3
 80072fe:	4604      	mov	r4, r0
 8007300:	f000 fb72 	bl	80079e8 <core_init>
 8007304:	b970      	cbnz	r0, 8007324 <ai_platform_network_create+0x3c>
 8007306:	2530      	movs	r5, #48	@ 0x30
 8007308:	2300      	movs	r3, #0
 800730a:	6023      	str	r3, [r4, #0]
 800730c:	2410      	movs	r4, #16
 800730e:	4642      	mov	r2, r8
 8007310:	4649      	mov	r1, r9
 8007312:	4638      	mov	r0, r7
 8007314:	f001 fefa 	bl	800910c <ai_version_get>
 8007318:	60b0      	str	r0, [r6, #8]
 800731a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800731e:	b003      	add	sp, #12
 8007320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007324:	2200      	movs	r2, #0
 8007326:	4649      	mov	r1, r9
 8007328:	4638      	mov	r0, r7
 800732a:	f001 feef 	bl	800910c <ai_version_get>
 800732e:	2200      	movs	r2, #0
 8007330:	4605      	mov	r5, r0
 8007332:	2105      	movs	r1, #5
 8007334:	2001      	movs	r0, #1
 8007336:	f001 fee9 	bl	800910c <ai_version_get>
 800733a:	4285      	cmp	r5, r0
 800733c:	d008      	beq.n	8007350 <ai_platform_network_create+0x68>
 800733e:	2501      	movs	r5, #1
 8007340:	e7e2      	b.n	8007308 <ai_platform_network_create+0x20>
 8007342:	2510      	movs	r5, #16
 8007344:	462c      	mov	r4, r5
 8007346:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800734a:	b003      	add	sp, #12
 800734c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007350:	4b05      	ldr	r3, [pc, #20]	@ (8007368 <ai_platform_network_create+0x80>)
 8007352:	9301      	str	r3, [sp, #4]
 8007354:	a801      	add	r0, sp, #4
 8007356:	f000 fb5b 	bl	8007a10 <ai_check_custom_types>
 800735a:	b110      	cbz	r0, 8007362 <ai_platform_network_create+0x7a>
 800735c:	2400      	movs	r4, #0
 800735e:	4625      	mov	r5, r4
 8007360:	e7d5      	b.n	800730e <ai_platform_network_create+0x26>
 8007362:	2502      	movs	r5, #2
 8007364:	e7d0      	b.n	8007308 <ai_platform_network_create+0x20>
 8007366:	bf00      	nop
 8007368:	84048403 	.word	0x84048403

0800736c <ai_platform_network_init>:
 800736c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007370:	4b63      	ldr	r3, [pc, #396]	@ (8007500 <ai_platform_network_init+0x194>)
 8007372:	6802      	ldr	r2, [r0, #0]
 8007374:	4393      	bics	r3, r2
 8007376:	b083      	sub	sp, #12
 8007378:	d156      	bne.n	8007428 <ai_platform_network_init+0xbc>
 800737a:	4604      	mov	r4, r0
 800737c:	460f      	mov	r7, r1
 800737e:	2900      	cmp	r1, #0
 8007380:	f000 80a9 	beq.w	80074d6 <ai_platform_network_init+0x16a>
 8007384:	680b      	ldr	r3, [r1, #0]
 8007386:	495f      	ldr	r1, [pc, #380]	@ (8007504 <ai_platform_network_init+0x198>)
 8007388:	428b      	cmp	r3, r1
 800738a:	d113      	bne.n	80073b4 <ai_platform_network_init+0x48>
 800738c:	495c      	ldr	r1, [pc, #368]	@ (8007500 <ai_platform_network_init+0x194>)
 800738e:	89bd      	ldrh	r5, [r7, #12]
 8007390:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 8007394:	f8d7 8010 	ldr.w	r8, [r7, #16]
 8007398:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 800739c:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 80073a0:	68be      	ldr	r6, [r7, #8]
 80073a2:	428a      	cmp	r2, r1
 80073a4:	d02c      	beq.n	8007400 <ai_platform_network_init+0x94>
 80073a6:	2303      	movs	r3, #3
 80073a8:	6123      	str	r3, [r4, #16]
 80073aa:	4627      	mov	r7, r4
 80073ac:	4638      	mov	r0, r7
 80073ae:	b003      	add	sp, #12
 80073b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b4:	2101      	movs	r1, #1
 80073b6:	4638      	mov	r0, r7
 80073b8:	9301      	str	r3, [sp, #4]
 80073ba:	f8d7 b004 	ldr.w	fp, [r7, #4]
 80073be:	f7ff fd7f 	bl	8006ec0 <ai_buffer_get_size>
 80073c2:	f107 081c 	add.w	r8, r7, #28
 80073c6:	4605      	mov	r5, r0
 80073c8:	2101      	movs	r1, #1
 80073ca:	4640      	mov	r0, r8
 80073cc:	463e      	mov	r6, r7
 80073ce:	6a3f      	ldr	r7, [r7, #32]
 80073d0:	f7ff fd76 	bl	8006ec0 <ai_buffer_get_size>
 80073d4:	2d00      	cmp	r5, #0
 80073d6:	9b01      	ldr	r3, [sp, #4]
 80073d8:	bf0a      	itet	eq
 80073da:	46a9      	moveq	r9, r5
 80073dc:	f04f 0901 	movne.w	r9, #1
 80073e0:	462e      	moveq	r6, r5
 80073e2:	b330      	cbz	r0, 8007432 <ai_platform_network_init+0xc6>
 80073e4:	2f00      	cmp	r7, #0
 80073e6:	f000 8084 	beq.w	80074f2 <ai_platform_network_init+0x186>
 80073ea:	f04f 0a01 	mov.w	sl, #1
 80073ee:	f1bb 0f00 	cmp.w	fp, #0
 80073f2:	d021      	beq.n	8007438 <ai_platform_network_init+0xcc>
 80073f4:	2500      	movs	r5, #0
 80073f6:	6822      	ldr	r2, [r4, #0]
 80073f8:	4941      	ldr	r1, [pc, #260]	@ (8007500 <ai_platform_network_init+0x194>)
 80073fa:	428a      	cmp	r2, r1
 80073fc:	46ab      	mov	fp, r5
 80073fe:	d1d2      	bne.n	80073a6 <ai_platform_network_init+0x3a>
 8007400:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 8007402:	454a      	cmp	r2, r9
 8007404:	4a3f      	ldr	r2, [pc, #252]	@ (8007504 <ai_platform_network_init+0x198>)
 8007406:	d221      	bcs.n	800744c <ai_platform_network_init+0xe0>
 8007408:	4293      	cmp	r3, r2
 800740a:	d15c      	bne.n	80074c6 <ai_platform_network_init+0x15a>
 800740c:	6266      	str	r6, [r4, #36]	@ 0x24
 800740e:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8007412:	f8a4 b020 	strh.w	fp, [r4, #32]
 8007416:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 800741a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 800741e:	8525      	strh	r5, [r4, #40]	@ 0x28
 8007420:	4620      	mov	r0, r4
 8007422:	f000 fb1f 	bl	8007a64 <ai_layers_init_all>
 8007426:	e7be      	b.n	80073a6 <ai_platform_network_init+0x3a>
 8007428:	2700      	movs	r7, #0
 800742a:	4638      	mov	r0, r7
 800742c:	b003      	add	sp, #12
 800742e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007432:	4680      	mov	r8, r0
 8007434:	4682      	mov	sl, r0
 8007436:	e7da      	b.n	80073ee <ai_platform_network_init+0x82>
 8007438:	2d00      	cmp	r5, #0
 800743a:	d0dc      	beq.n	80073f6 <ai_platform_network_init+0x8a>
 800743c:	2212      	movs	r2, #18
 800743e:	2110      	movs	r1, #16
 8007440:	f104 000c 	add.w	r0, r4, #12
 8007444:	f000 fad8 	bl	80079f8 <core_set_error>
 8007448:	465f      	mov	r7, fp
 800744a:	e7af      	b.n	80073ac <ai_platform_network_init+0x40>
 800744c:	4293      	cmp	r3, r2
 800744e:	d0dd      	beq.n	800740c <ai_platform_network_init+0xa0>
 8007450:	f1b9 0f00 	cmp.w	r9, #0
 8007454:	d018      	beq.n	8007488 <ai_platform_network_init+0x11c>
 8007456:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007460:	2700      	movs	r7, #0
 8007462:	4699      	mov	r9, r3
 8007464:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007466:	eb06 0e07 	add.w	lr, r6, r7
 800746a:	eb03 0c07 	add.w	ip, r3, r7
 800746e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8007472:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007476:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800747a:	371c      	adds	r7, #28
 800747c:	45b9      	cmp	r9, r7
 800747e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8007482:	d1ef      	bne.n	8007464 <ai_platform_network_init+0xf8>
 8007484:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007488:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800748a:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 800748e:	4553      	cmp	r3, sl
 8007490:	f8a4 b020 	strh.w	fp, [r4, #32]
 8007494:	d325      	bcc.n	80074e2 <ai_platform_network_init+0x176>
 8007496:	f1ba 0f00 	cmp.w	sl, #0
 800749a:	d0be      	beq.n	800741a <ai_platform_network_init+0xae>
 800749c:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 80074a0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80074a4:	f04f 0c00 	mov.w	ip, #0
 80074a8:	eb08 070c 	add.w	r7, r8, ip
 80074ac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80074ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074b0:	4466      	add	r6, ip
 80074b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80074b4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80074b8:	f10c 0c1c 	add.w	ip, ip, #28
 80074bc:	45f4      	cmp	ip, lr
 80074be:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80074c2:	d1f1      	bne.n	80074a8 <ai_platform_network_init+0x13c>
 80074c4:	e7a9      	b.n	800741a <ai_platform_network_init+0xae>
 80074c6:	2212      	movs	r2, #18
 80074c8:	2116      	movs	r1, #22
 80074ca:	f104 000c 	add.w	r0, r4, #12
 80074ce:	f000 fa93 	bl	80079f8 <core_set_error>
 80074d2:	2700      	movs	r7, #0
 80074d4:	e76a      	b.n	80073ac <ai_platform_network_init+0x40>
 80074d6:	2211      	movs	r2, #17
 80074d8:	2110      	movs	r1, #16
 80074da:	300c      	adds	r0, #12
 80074dc:	f000 fa8c 	bl	80079f8 <core_set_error>
 80074e0:	e764      	b.n	80073ac <ai_platform_network_init+0x40>
 80074e2:	2213      	movs	r2, #19
 80074e4:	2116      	movs	r1, #22
 80074e6:	f104 000c 	add.w	r0, r4, #12
 80074ea:	f000 fa85 	bl	80079f8 <core_set_error>
 80074ee:	2700      	movs	r7, #0
 80074f0:	e75c      	b.n	80073ac <ai_platform_network_init+0x40>
 80074f2:	2213      	movs	r2, #19
 80074f4:	2110      	movs	r1, #16
 80074f6:	f104 000c 	add.w	r0, r4, #12
 80074fa:	f000 fa7d 	bl	80079f8 <core_set_error>
 80074fe:	e755      	b.n	80073ac <ai_platform_network_init+0x40>
 8007500:	a1c00100 	.word	0xa1c00100
 8007504:	a1facade 	.word	0xa1facade

08007508 <ai_platform_network_post_init>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	4b16      	ldr	r3, [pc, #88]	@ (8007564 <ai_platform_network_post_init+0x5c>)
 800750c:	6802      	ldr	r2, [r0, #0]
 800750e:	ea02 0103 	and.w	r1, r2, r3
 8007512:	4393      	bics	r3, r2
 8007514:	d108      	bne.n	8007528 <ai_platform_network_post_init+0x20>
 8007516:	6903      	ldr	r3, [r0, #16]
 8007518:	f013 0502 	ands.w	r5, r3, #2
 800751c:	4604      	mov	r4, r0
 800751e:	d005      	beq.n	800752c <ai_platform_network_post_init+0x24>
 8007520:	428a      	cmp	r2, r1
 8007522:	d00a      	beq.n	800753a <ai_platform_network_post_init+0x32>
 8007524:	2001      	movs	r0, #1
 8007526:	bd38      	pop	{r3, r4, r5, pc}
 8007528:	2000      	movs	r0, #0
 800752a:	bd38      	pop	{r3, r4, r5, pc}
 800752c:	2210      	movs	r2, #16
 800752e:	2111      	movs	r1, #17
 8007530:	300c      	adds	r0, #12
 8007532:	f000 fa61 	bl	80079f8 <core_set_error>
 8007536:	4628      	mov	r0, r5
 8007538:	bd38      	pop	{r3, r4, r5, pc}
 800753a:	f000 faa1 	bl	8007a80 <ai_layers_post_init_all>
 800753e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007540:	2b00      	cmp	r3, #0
 8007542:	d0ef      	beq.n	8007524 <ai_platform_network_post_init+0x1c>
 8007544:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8007546:	e008      	b.n	800755a <ai_platform_network_post_init+0x52>
 8007548:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 800754c:	4798      	blx	r3
 800754e:	692b      	ldr	r3, [r5, #16]
 8007550:	42ab      	cmp	r3, r5
 8007552:	d0e7      	beq.n	8007524 <ai_platform_network_post_init+0x1c>
 8007554:	2b00      	cmp	r3, #0
 8007556:	d0e5      	beq.n	8007524 <ai_platform_network_post_init+0x1c>
 8007558:	461d      	mov	r5, r3
 800755a:	4629      	mov	r1, r5
 800755c:	2000      	movs	r0, #0
 800755e:	2d00      	cmp	r5, #0
 8007560:	d1f2      	bne.n	8007548 <ai_platform_network_post_init+0x40>
 8007562:	e7df      	b.n	8007524 <ai_platform_network_post_init+0x1c>
 8007564:	a1c00100 	.word	0xa1c00100

08007568 <ai_platform_network_process>:
 8007568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756c:	4bb5      	ldr	r3, [pc, #724]	@ (8007844 <ai_platform_network_process+0x2dc>)
 800756e:	4605      	mov	r5, r0
 8007570:	6800      	ldr	r0, [r0, #0]
 8007572:	b085      	sub	sp, #20
 8007574:	4383      	bics	r3, r0
 8007576:	9202      	str	r2, [sp, #8]
 8007578:	f040 8140 	bne.w	80077fc <ai_platform_network_process+0x294>
 800757c:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 800757e:	2b00      	cmp	r3, #0
 8007580:	f000 8125 	beq.w	80077ce <ai_platform_network_process+0x266>
 8007584:	692b      	ldr	r3, [r5, #16]
 8007586:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 800758a:	f003 0303 	and.w	r3, r3, #3
 800758e:	2700      	movs	r7, #0
 8007590:	2b03      	cmp	r3, #3
 8007592:	61af      	str	r7, [r5, #24]
 8007594:	f040 8137 	bne.w	8007806 <ai_platform_network_process+0x29e>
 8007598:	2900      	cmp	r1, #0
 800759a:	f000 811e 	beq.w	80077da <ai_platform_network_process+0x272>
 800759e:	f1ba 0f00 	cmp.w	sl, #0
 80075a2:	f000 811a 	beq.w	80077da <ai_platform_network_process+0x272>
 80075a6:	f8ba 3000 	ldrh.w	r3, [sl]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f000 8115 	beq.w	80077da <ai_platform_network_process+0x272>
 80075b0:	698b      	ldr	r3, [r1, #24]
 80075b2:	9503      	str	r5, [sp, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	9301      	str	r3, [sp, #4]
 80075b8:	460e      	mov	r6, r1
 80075ba:	f8da 3004 	ldr.w	r3, [sl, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d072      	beq.n	80076a8 <ai_platform_network_process+0x140>
 80075c2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80075c6:	2c00      	cmp	r4, #0
 80075c8:	d06e      	beq.n	80076a8 <ai_platform_network_process+0x140>
 80075ca:	f8da 3008 	ldr.w	r3, [sl, #8]
 80075ce:	f8d3 9000 	ldr.w	r9, [r3]
 80075d2:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 80075d6:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80075da:	f000 81d3 	beq.w	8007984 <ai_platform_network_process+0x41c>
 80075de:	69a3      	ldr	r3, [r4, #24]
 80075e0:	2101      	movs	r1, #1
 80075e2:	4630      	mov	r0, r6
 80075e4:	685d      	ldr	r5, [r3, #4]
 80075e6:	f7ff fc6b 	bl	8006ec0 <ai_buffer_get_size>
 80075ea:	4285      	cmp	r5, r0
 80075ec:	f0c0 8116 	bcc.w	800781c <ai_platform_network_process+0x2b4>
 80075f0:	68e0      	ldr	r0, [r4, #12]
 80075f2:	69b1      	ldr	r1, [r6, #24]
 80075f4:	68c2      	ldr	r2, [r0, #12]
 80075f6:	68cb      	ldr	r3, [r1, #12]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	f040 810f 	bne.w	800781c <ai_platform_network_process+0x2b4>
 80075fe:	6882      	ldr	r2, [r0, #8]
 8007600:	688b      	ldr	r3, [r1, #8]
 8007602:	429a      	cmp	r2, r3
 8007604:	f040 810a 	bne.w	800781c <ai_platform_network_process+0x2b4>
 8007608:	6842      	ldr	r2, [r0, #4]
 800760a:	684b      	ldr	r3, [r1, #4]
 800760c:	429a      	cmp	r2, r3
 800760e:	f040 8105 	bne.w	800781c <ai_platform_network_process+0x2b4>
 8007612:	69a3      	ldr	r3, [r4, #24]
 8007614:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007618:	f001 fd66 	bl	80090e8 <ai_array_get_data_byte_size>
 800761c:	4605      	mov	r5, r0
 800761e:	4620      	mov	r0, r4
 8007620:	f001 fd7a 	bl	8009118 <get_tensor_byte_size>
 8007624:	4285      	cmp	r5, r0
 8007626:	f0c0 80f9 	bcc.w	800781c <ai_platform_network_process+0x2b4>
 800762a:	69a3      	ldr	r3, [r4, #24]
 800762c:	6818      	ldr	r0, [r3, #0]
 800762e:	f001 fceb 	bl	8009008 <ai_array_to_buffer_fmt>
 8007632:	6833      	ldr	r3, [r6, #0]
 8007634:	4058      	eors	r0, r3
 8007636:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800763a:	f040 81a5 	bne.w	8007988 <ai_platform_network_process+0x420>
 800763e:	6873      	ldr	r3, [r6, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 819f 	beq.w	8007984 <ai_platform_network_process+0x41c>
 8007646:	69b3      	ldr	r3, [r6, #24]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	f000 81a5 	beq.w	800799a <ai_platform_network_process+0x432>
 8007650:	9a01      	ldr	r2, [sp, #4]
 8007652:	429a      	cmp	r2, r3
 8007654:	bf38      	it	cc
 8007656:	461a      	movcc	r2, r3
 8007658:	4620      	mov	r0, r4
 800765a:	9201      	str	r2, [sp, #4]
 800765c:	f001 fd5c 	bl	8009118 <get_tensor_byte_size>
 8007660:	f8c8 0008 	str.w	r0, [r8, #8]
 8007664:	69b3      	ldr	r3, [r6, #24]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	fb00 f303 	mul.w	r3, r0, r3
 800766c:	f8c8 300c 	str.w	r3, [r8, #12]
 8007670:	6871      	ldr	r1, [r6, #4]
 8007672:	f8c8 1004 	str.w	r1, [r8, #4]
 8007676:	440b      	add	r3, r1
 8007678:	f849 300b 	str.w	r3, [r9, fp]
 800767c:	69a0      	ldr	r0, [r4, #24]
 800767e:	6803      	ldr	r3, [r0, #0]
 8007680:	009a      	lsls	r2, r3, #2
 8007682:	f107 0701 	add.w	r7, r7, #1
 8007686:	f106 061c 	add.w	r6, r6, #28
 800768a:	f100 80b1 	bmi.w	80077f0 <ai_platform_network_process+0x288>
 800768e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007692:	1a9b      	subs	r3, r3, r2
 8007694:	4419      	add	r1, r3
 8007696:	6081      	str	r1, [r0, #8]
 8007698:	69a3      	ldr	r3, [r4, #24]
 800769a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800769e:	60da      	str	r2, [r3, #12]
 80076a0:	f8ba 3000 	ldrh.w	r3, [sl]
 80076a4:	42bb      	cmp	r3, r7
 80076a6:	d888      	bhi.n	80075ba <ai_platform_network_process+0x52>
 80076a8:	9d03      	ldr	r5, [sp, #12]
 80076aa:	9b02      	ldr	r3, [sp, #8]
 80076ac:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 817c 	beq.w	80079ac <ai_platform_network_process+0x444>
 80076b4:	2a01      	cmp	r2, #1
 80076b6:	f240 80bd 	bls.w	8007834 <ai_platform_network_process+0x2cc>
 80076ba:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 80076be:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 80b6 	beq.w	8007834 <ai_platform_network_process+0x2cc>
 80076c8:	f8dd b008 	ldr.w	fp, [sp, #8]
 80076cc:	2700      	movs	r7, #0
 80076ce:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 80bd 	beq.w	8007852 <ai_platform_network_process+0x2ea>
 80076d8:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 80076dc:	2e00      	cmp	r6, #0
 80076de:	f000 80b8 	beq.w	8007852 <ai_platform_network_process+0x2ea>
 80076e2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80076e6:	681c      	ldr	r4, [r3, #0]
 80076e8:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 80076ec:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 80076f0:	f000 8160 	beq.w	80079b4 <ai_platform_network_process+0x44c>
 80076f4:	69b3      	ldr	r3, [r6, #24]
 80076f6:	2101      	movs	r1, #1
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	9302      	str	r3, [sp, #8]
 80076fc:	4658      	mov	r0, fp
 80076fe:	f7ff fbdf 	bl	8006ec0 <ai_buffer_get_size>
 8007702:	9b02      	ldr	r3, [sp, #8]
 8007704:	4283      	cmp	r3, r0
 8007706:	f0c0 8095 	bcc.w	8007834 <ai_platform_network_process+0x2cc>
 800770a:	68f0      	ldr	r0, [r6, #12]
 800770c:	f8db 1018 	ldr.w	r1, [fp, #24]
 8007710:	68c2      	ldr	r2, [r0, #12]
 8007712:	68cb      	ldr	r3, [r1, #12]
 8007714:	429a      	cmp	r2, r3
 8007716:	f040 808d 	bne.w	8007834 <ai_platform_network_process+0x2cc>
 800771a:	6882      	ldr	r2, [r0, #8]
 800771c:	688b      	ldr	r3, [r1, #8]
 800771e:	429a      	cmp	r2, r3
 8007720:	f040 8088 	bne.w	8007834 <ai_platform_network_process+0x2cc>
 8007724:	6842      	ldr	r2, [r0, #4]
 8007726:	684b      	ldr	r3, [r1, #4]
 8007728:	429a      	cmp	r2, r3
 800772a:	f040 8083 	bne.w	8007834 <ai_platform_network_process+0x2cc>
 800772e:	69b3      	ldr	r3, [r6, #24]
 8007730:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007734:	f001 fcd8 	bl	80090e8 <ai_array_get_data_byte_size>
 8007738:	9002      	str	r0, [sp, #8]
 800773a:	4630      	mov	r0, r6
 800773c:	f001 fcec 	bl	8009118 <get_tensor_byte_size>
 8007740:	9b02      	ldr	r3, [sp, #8]
 8007742:	4283      	cmp	r3, r0
 8007744:	d376      	bcc.n	8007834 <ai_platform_network_process+0x2cc>
 8007746:	69b3      	ldr	r3, [r6, #24]
 8007748:	6818      	ldr	r0, [r3, #0]
 800774a:	f001 fc5d 	bl	8009008 <ai_array_to_buffer_fmt>
 800774e:	f8db 3000 	ldr.w	r3, [fp]
 8007752:	4058      	eors	r0, r3
 8007754:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8007758:	f040 8134 	bne.w	80079c4 <ai_platform_network_process+0x45c>
 800775c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 8127 	beq.w	80079b4 <ai_platform_network_process+0x44c>
 8007766:	f8db 3018 	ldr.w	r3, [fp, #24]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 8133 	beq.w	80079d8 <ai_platform_network_process+0x470>
 8007772:	9a01      	ldr	r2, [sp, #4]
 8007774:	429a      	cmp	r2, r3
 8007776:	bf38      	it	cc
 8007778:	461a      	movcc	r2, r3
 800777a:	4630      	mov	r0, r6
 800777c:	9201      	str	r2, [sp, #4]
 800777e:	f001 fccb 	bl	8009118 <get_tensor_byte_size>
 8007782:	f8c9 0008 	str.w	r0, [r9, #8]
 8007786:	f8db 3018 	ldr.w	r3, [fp, #24]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	fb00 f303 	mul.w	r3, r0, r3
 8007790:	f8c9 300c 	str.w	r3, [r9, #12]
 8007794:	f8db 1004 	ldr.w	r1, [fp, #4]
 8007798:	f8c9 1004 	str.w	r1, [r9, #4]
 800779c:	440b      	add	r3, r1
 800779e:	f844 300a 	str.w	r3, [r4, sl]
 80077a2:	69b0      	ldr	r0, [r6, #24]
 80077a4:	6803      	ldr	r3, [r0, #0]
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	f107 0701 	add.w	r7, r7, #1
 80077ac:	f10b 0b1c 	add.w	fp, fp, #28
 80077b0:	d44a      	bmi.n	8007848 <ai_platform_network_process+0x2e0>
 80077b2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80077b6:	1a9b      	subs	r3, r3, r2
 80077b8:	4419      	add	r1, r3
 80077ba:	6081      	str	r1, [r0, #8]
 80077bc:	69b3      	ldr	r3, [r6, #24]
 80077be:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80077c2:	60da      	str	r2, [r3, #12]
 80077c4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80077c8:	42bb      	cmp	r3, r7
 80077ca:	d880      	bhi.n	80076ce <ai_platform_network_process+0x166>
 80077cc:	e041      	b.n	8007852 <ai_platform_network_process+0x2ea>
 80077ce:	692a      	ldr	r2, [r5, #16]
 80077d0:	61ab      	str	r3, [r5, #24]
 80077d2:	f002 0203 	and.w	r2, r2, #3
 80077d6:	2a03      	cmp	r2, #3
 80077d8:	d115      	bne.n	8007806 <ai_platform_network_process+0x29e>
 80077da:	2217      	movs	r2, #23
 80077dc:	2112      	movs	r1, #18
 80077de:	f105 000c 	add.w	r0, r5, #12
 80077e2:	f000 f909 	bl	80079f8 <core_set_error>
 80077e6:	2400      	movs	r4, #0
 80077e8:	4620      	mov	r0, r4
 80077ea:	b005      	add	sp, #20
 80077ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f0:	f8ba 3000 	ldrh.w	r3, [sl]
 80077f4:	429f      	cmp	r7, r3
 80077f6:	f4ff aee0 	bcc.w	80075ba <ai_platform_network_process+0x52>
 80077fa:	e755      	b.n	80076a8 <ai_platform_network_process+0x140>
 80077fc:	2400      	movs	r4, #0
 80077fe:	4620      	mov	r0, r4
 8007800:	b005      	add	sp, #20
 8007802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007806:	2230      	movs	r2, #48	@ 0x30
 8007808:	2111      	movs	r1, #17
 800780a:	f105 000c 	add.w	r0, r5, #12
 800780e:	f000 f8f3 	bl	80079f8 <core_set_error>
 8007812:	2400      	movs	r4, #0
 8007814:	4620      	mov	r0, r4
 8007816:	b005      	add	sp, #20
 8007818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800781c:	9d03      	ldr	r5, [sp, #12]
 800781e:	2218      	movs	r2, #24
 8007820:	2112      	movs	r1, #18
 8007822:	f105 000c 	add.w	r0, r5, #12
 8007826:	f000 f8e7 	bl	80079f8 <core_set_error>
 800782a:	2400      	movs	r4, #0
 800782c:	4620      	mov	r0, r4
 800782e:	b005      	add	sp, #20
 8007830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007834:	2218      	movs	r2, #24
 8007836:	2113      	movs	r1, #19
 8007838:	f105 000c 	add.w	r0, r5, #12
 800783c:	f000 f8dc 	bl	80079f8 <core_set_error>
 8007840:	2400      	movs	r4, #0
 8007842:	e7d1      	b.n	80077e8 <ai_platform_network_process+0x280>
 8007844:	a1c00100 	.word	0xa1c00100
 8007848:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800784c:	429f      	cmp	r7, r3
 800784e:	f4ff af3e 	bcc.w	80076ce <ai_platform_network_process+0x166>
 8007852:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007856:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8007858:	832b      	strh	r3, [r5, #24]
 800785a:	2a00      	cmp	r2, #0
 800785c:	f040 808c 	bne.w	8007978 <ai_platform_network_process+0x410>
 8007860:	4616      	mov	r6, r2
 8007862:	4617      	mov	r7, r2
 8007864:	8b6c      	ldrh	r4, [r5, #26]
 8007866:	429c      	cmp	r4, r3
 8007868:	bf38      	it	cc
 800786a:	46ab      	movcc	fp, r5
 800786c:	d2bc      	bcs.n	80077e8 <ai_platform_network_process+0x280>
 800786e:	2e00      	cmp	r6, #0
 8007870:	d030      	beq.n	80078d4 <ai_platform_network_process+0x36c>
 8007872:	f04f 0800 	mov.w	r8, #0
 8007876:	e014      	b.n	80078a2 <ai_platform_network_process+0x33a>
 8007878:	6882      	ldr	r2, [r0, #8]
 800787a:	68c5      	ldr	r5, [r0, #12]
 800787c:	6863      	ldr	r3, [r4, #4]
 800787e:	1b52      	subs	r2, r2, r5
 8007880:	4413      	add	r3, r2
 8007882:	6083      	str	r3, [r0, #8]
 8007884:	698b      	ldr	r3, [r1, #24]
 8007886:	6862      	ldr	r2, [r4, #4]
 8007888:	60da      	str	r2, [r3, #12]
 800788a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800788e:	f859 200a 	ldr.w	r2, [r9, sl]
 8007892:	440b      	add	r3, r1
 8007894:	4293      	cmp	r3, r2
 8007896:	bf24      	itt	cs
 8007898:	68e3      	ldrcs	r3, [r4, #12]
 800789a:	1ad3      	subcs	r3, r2, r3
 800789c:	6063      	str	r3, [r4, #4]
 800789e:	f108 0801 	add.w	r8, r8, #1
 80078a2:	8833      	ldrh	r3, [r6, #0]
 80078a4:	4543      	cmp	r3, r8
 80078a6:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80078aa:	d913      	bls.n	80078d4 <ai_platform_network_process+0x36c>
 80078ac:	6873      	ldr	r3, [r6, #4]
 80078ae:	b18b      	cbz	r3, 80078d4 <ai_platform_network_process+0x36c>
 80078b0:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80078b4:	b171      	cbz	r1, 80078d4 <ai_platform_network_process+0x36c>
 80078b6:	6988      	ldr	r0, [r1, #24]
 80078b8:	68b2      	ldr	r2, [r6, #8]
 80078ba:	6803      	ldr	r3, [r0, #0]
 80078bc:	f8d2 9000 	ldr.w	r9, [r2]
 80078c0:	009d      	lsls	r5, r3, #2
 80078c2:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80078c6:	d5d7      	bpl.n	8007878 <ai_platform_network_process+0x310>
 80078c8:	6881      	ldr	r1, [r0, #8]
 80078ca:	68a2      	ldr	r2, [r4, #8]
 80078cc:	6860      	ldr	r0, [r4, #4]
 80078ce:	f001 fb15 	bl	8008efc <st_int8_copy>
 80078d2:	e7da      	b.n	800788a <ai_platform_network_process+0x322>
 80078d4:	4658      	mov	r0, fp
 80078d6:	f000 f8e7 	bl	8007aa8 <ai_layers_forward_all>
 80078da:	2f00      	cmp	r7, #0
 80078dc:	d03d      	beq.n	800795a <ai_platform_network_process+0x3f2>
 80078de:	2400      	movs	r4, #0
 80078e0:	e016      	b.n	8007910 <ai_platform_network_process+0x3a8>
 80078e2:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80078e6:	f859 100a 	ldr.w	r1, [r9, sl]
 80078ea:	4413      	add	r3, r2
 80078ec:	428b      	cmp	r3, r1
 80078ee:	bf24      	itt	cs
 80078f0:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80078f4:	1acb      	subcs	r3, r1, r3
 80078f6:	f8c8 3004 	str.w	r3, [r8, #4]
 80078fa:	6981      	ldr	r1, [r0, #24]
 80078fc:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8007900:	1b52      	subs	r2, r2, r5
 8007902:	4413      	add	r3, r2
 8007904:	608b      	str	r3, [r1, #8]
 8007906:	6983      	ldr	r3, [r0, #24]
 8007908:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800790c:	60da      	str	r2, [r3, #12]
 800790e:	3401      	adds	r4, #1
 8007910:	883b      	ldrh	r3, [r7, #0]
 8007912:	42a3      	cmp	r3, r4
 8007914:	d921      	bls.n	800795a <ai_platform_network_process+0x3f2>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	b1fb      	cbz	r3, 800795a <ai_platform_network_process+0x3f2>
 800791a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800791e:	b1e0      	cbz	r0, 800795a <ai_platform_network_process+0x3f2>
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	6983      	ldr	r3, [r0, #24]
 8007924:	f8d2 9000 	ldr.w	r9, [r2]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	0092      	lsls	r2, r2, #2
 800792c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8007930:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8007934:	d5d5      	bpl.n	80078e2 <ai_platform_network_process+0x37a>
 8007936:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800793a:	6898      	ldr	r0, [r3, #8]
 800793c:	f001 fade 	bl	8008efc <st_int8_copy>
 8007940:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007944:	f859 200a 	ldr.w	r2, [r9, sl]
 8007948:	440b      	add	r3, r1
 800794a:	4293      	cmp	r3, r2
 800794c:	bf24      	itt	cs
 800794e:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8007952:	1ad3      	subcs	r3, r2, r3
 8007954:	f8c8 3004 	str.w	r3, [r8, #4]
 8007958:	e7d9      	b.n	800790e <ai_platform_network_process+0x3a6>
 800795a:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 800795e:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8007962:	3401      	adds	r4, #1
 8007964:	b2a4      	uxth	r4, r4
 8007966:	42a3      	cmp	r3, r4
 8007968:	f8ab 401a 	strh.w	r4, [fp, #26]
 800796c:	f63f af7f 	bhi.w	800786e <ai_platform_network_process+0x306>
 8007970:	4620      	mov	r0, r4
 8007972:	b005      	add	sp, #20
 8007974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007978:	2a01      	cmp	r2, #1
 800797a:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 800797c:	d02a      	beq.n	80079d4 <ai_platform_network_process+0x46c>
 800797e:	f106 070c 	add.w	r7, r6, #12
 8007982:	e76f      	b.n	8007864 <ai_platform_network_process+0x2fc>
 8007984:	9d03      	ldr	r5, [sp, #12]
 8007986:	e728      	b.n	80077da <ai_platform_network_process+0x272>
 8007988:	9d03      	ldr	r5, [sp, #12]
 800798a:	2219      	movs	r2, #25
 800798c:	2112      	movs	r1, #18
 800798e:	f105 000c 	add.w	r0, r5, #12
 8007992:	f000 f831 	bl	80079f8 <core_set_error>
 8007996:	2400      	movs	r4, #0
 8007998:	e726      	b.n	80077e8 <ai_platform_network_process+0x280>
 800799a:	9d03      	ldr	r5, [sp, #12]
 800799c:	4604      	mov	r4, r0
 800799e:	2221      	movs	r2, #33	@ 0x21
 80079a0:	2112      	movs	r1, #18
 80079a2:	f105 000c 	add.w	r0, r5, #12
 80079a6:	f000 f827 	bl	80079f8 <core_set_error>
 80079aa:	e71d      	b.n	80077e8 <ai_platform_network_process+0x280>
 80079ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80079b0:	832b      	strh	r3, [r5, #24]
 80079b2:	e752      	b.n	800785a <ai_platform_network_process+0x2f2>
 80079b4:	2217      	movs	r2, #23
 80079b6:	2113      	movs	r1, #19
 80079b8:	f105 000c 	add.w	r0, r5, #12
 80079bc:	f000 f81c 	bl	80079f8 <core_set_error>
 80079c0:	2400      	movs	r4, #0
 80079c2:	e711      	b.n	80077e8 <ai_platform_network_process+0x280>
 80079c4:	2219      	movs	r2, #25
 80079c6:	2113      	movs	r1, #19
 80079c8:	f105 000c 	add.w	r0, r5, #12
 80079cc:	f000 f814 	bl	80079f8 <core_set_error>
 80079d0:	2400      	movs	r4, #0
 80079d2:	e709      	b.n	80077e8 <ai_platform_network_process+0x280>
 80079d4:	2700      	movs	r7, #0
 80079d6:	e745      	b.n	8007864 <ai_platform_network_process+0x2fc>
 80079d8:	4604      	mov	r4, r0
 80079da:	2221      	movs	r2, #33	@ 0x21
 80079dc:	2113      	movs	r1, #19
 80079de:	f105 000c 	add.w	r0, r5, #12
 80079e2:	f000 f809 	bl	80079f8 <core_set_error>
 80079e6:	e6ff      	b.n	80077e8 <ai_platform_network_process+0x280>

080079e8 <core_init>:
 80079e8:	2001      	movs	r0, #1
 80079ea:	4770      	bx	lr

080079ec <core_get_error>:
 80079ec:	4603      	mov	r3, r0
 80079ee:	2200      	movs	r2, #0
 80079f0:	6800      	ldr	r0, [r0, #0]
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop

080079f8 <core_set_error>:
 80079f8:	4603      	mov	r3, r0
 80079fa:	7800      	ldrb	r0, [r0, #0]
 80079fc:	b108      	cbz	r0, 8007a02 <core_set_error+0xa>
 80079fe:	2000      	movs	r0, #0
 8007a00:	4770      	bx	lr
 8007a02:	7019      	strb	r1, [r3, #0]
 8007a04:	6819      	ldr	r1, [r3, #0]
 8007a06:	f362 211f 	bfi	r1, r2, #8, #24
 8007a0a:	2001      	movs	r0, #1
 8007a0c:	6019      	str	r1, [r3, #0]
 8007a0e:	4770      	bx	lr

08007a10 <ai_check_custom_types>:
 8007a10:	b082      	sub	sp, #8
 8007a12:	4b13      	ldr	r3, [pc, #76]	@ (8007a60 <ai_check_custom_types+0x50>)
 8007a14:	9301      	str	r3, [sp, #4]
 8007a16:	b118      	cbz	r0, 8007a20 <ai_check_custom_types+0x10>
 8007a18:	7803      	ldrb	r3, [r0, #0]
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d002      	beq.n	8007a24 <ai_check_custom_types+0x14>
 8007a1e:	2000      	movs	r0, #0
 8007a20:	b002      	add	sp, #8
 8007a22:	4770      	bx	lr
 8007a24:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d004      	beq.n	8007a36 <ai_check_custom_types+0x26>
 8007a2c:	2001      	movs	r0, #1
 8007a2e:	f080 0001 	eor.w	r0, r0, #1
 8007a32:	b002      	add	sp, #8
 8007a34:	4770      	bx	lr
 8007a36:	7842      	ldrb	r2, [r0, #1]
 8007a38:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	f100 0001 	add.w	r0, r0, #1
 8007a42:	d1f3      	bne.n	8007a2c <ai_check_custom_types+0x1c>
 8007a44:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007a48:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d1ed      	bne.n	8007a2c <ai_check_custom_types+0x1c>
 8007a50:	7842      	ldrb	r2, [r0, #1]
 8007a52:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d1e8      	bne.n	8007a2c <ai_check_custom_types+0x1c>
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	e7e7      	b.n	8007a2e <ai_check_custom_types+0x1e>
 8007a5e:	bf00      	nop
 8007a60:	84048403 	.word	0x84048403

08007a64 <ai_layers_init_all>:
 8007a64:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007a66:	2100      	movs	r1, #0
 8007a68:	b143      	cbz	r3, 8007a7c <ai_layers_init_all+0x18>
 8007a6a:	691a      	ldr	r2, [r3, #16]
 8007a6c:	60d8      	str	r0, [r3, #12]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	f101 0101 	add.w	r1, r1, #1
 8007a74:	d002      	beq.n	8007a7c <ai_layers_init_all+0x18>
 8007a76:	b10a      	cbz	r2, 8007a7c <ai_layers_init_all+0x18>
 8007a78:	4613      	mov	r3, r2
 8007a7a:	e7f5      	b.n	8007a68 <ai_layers_init_all+0x4>
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	4770      	bx	lr

08007a80 <ai_layers_post_init_all>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8007a84:	2500      	movs	r5, #0
 8007a86:	b16c      	cbz	r4, 8007aa4 <ai_layers_post_init_all+0x24>
 8007a88:	6863      	ldr	r3, [r4, #4]
 8007a8a:	07db      	lsls	r3, r3, #31
 8007a8c:	d504      	bpl.n	8007a98 <ai_layers_post_init_all+0x18>
 8007a8e:	6a23      	ldr	r3, [r4, #32]
 8007a90:	4620      	mov	r0, r4
 8007a92:	b10b      	cbz	r3, 8007a98 <ai_layers_post_init_all+0x18>
 8007a94:	4798      	blx	r3
 8007a96:	3501      	adds	r5, #1
 8007a98:	6923      	ldr	r3, [r4, #16]
 8007a9a:	42a3      	cmp	r3, r4
 8007a9c:	d002      	beq.n	8007aa4 <ai_layers_post_init_all+0x24>
 8007a9e:	b10b      	cbz	r3, 8007aa4 <ai_layers_post_init_all+0x24>
 8007aa0:	461c      	mov	r4, r3
 8007aa2:	e7f0      	b.n	8007a86 <ai_layers_post_init_all+0x6>
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	bd38      	pop	{r3, r4, r5, pc}

08007aa8 <ai_layers_forward_all>:
 8007aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aac:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	f1b8 0f00 	cmp.w	r8, #0
 8007ab6:	d02b      	beq.n	8007b10 <ai_layers_forward_all+0x68>
 8007ab8:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8007aba:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8007abc:	b321      	cbz	r1, 8007b08 <ai_layers_forward_all+0x60>
 8007abe:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8007ac0:	2001      	movs	r0, #1
 8007ac2:	47c0      	blx	r8
 8007ac4:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8007ac6:	b1fe      	cbz	r6, 8007b08 <ai_layers_forward_all+0x60>
 8007ac8:	2700      	movs	r7, #0
 8007aca:	4631      	mov	r1, r6
 8007acc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8007ace:	2002      	movs	r0, #2
 8007ad0:	47c0      	blx	r8
 8007ad2:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	696b      	ldr	r3, [r5, #20]
 8007ad8:	4798      	blx	r3
 8007ada:	692e      	ldr	r6, [r5, #16]
 8007adc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8007ade:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8007ae0:	42b5      	cmp	r5, r6
 8007ae2:	f04f 0003 	mov.w	r0, #3
 8007ae6:	d007      	beq.n	8007af8 <ai_layers_forward_all+0x50>
 8007ae8:	47c0      	blx	r8
 8007aea:	3701      	adds	r7, #1
 8007aec:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8007aee:	2e00      	cmp	r6, #0
 8007af0:	d1eb      	bne.n	8007aca <ai_layers_forward_all+0x22>
 8007af2:	4638      	mov	r0, r7
 8007af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007af8:	2003      	movs	r0, #3
 8007afa:	47c0      	blx	r8
 8007afc:	2300      	movs	r3, #0
 8007afe:	3701      	adds	r7, #1
 8007b00:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8007b02:	4638      	mov	r0, r7
 8007b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b08:	2700      	movs	r7, #0
 8007b0a:	4638      	mov	r0, r7
 8007b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b10:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8007b12:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8007b14:	2d00      	cmp	r5, #0
 8007b16:	d0f7      	beq.n	8007b08 <ai_layers_forward_all+0x60>
 8007b18:	4647      	mov	r7, r8
 8007b1a:	696b      	ldr	r3, [r5, #20]
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	4798      	blx	r3
 8007b20:	462b      	mov	r3, r5
 8007b22:	692d      	ldr	r5, [r5, #16]
 8007b24:	429d      	cmp	r5, r3
 8007b26:	d004      	beq.n	8007b32 <ai_layers_forward_all+0x8a>
 8007b28:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8007b2a:	3701      	adds	r7, #1
 8007b2c:	2d00      	cmp	r5, #0
 8007b2e:	d1f4      	bne.n	8007b1a <ai_layers_forward_all+0x72>
 8007b30:	e7df      	b.n	8007af2 <ai_layers_forward_all+0x4a>
 8007b32:	2300      	movs	r3, #0
 8007b34:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8007b36:	3701      	adds	r7, #1
 8007b38:	e7db      	b.n	8007af2 <ai_layers_forward_all+0x4a>
 8007b3a:	bf00      	nop

08007b3c <forward_conv2d_if32of32wf32>:
 8007b3c:	6983      	ldr	r3, [r0, #24]
 8007b3e:	881a      	ldrh	r2, [r3, #0]
 8007b40:	2a00      	cmp	r2, #0
 8007b42:	f000 80af 	beq.w	8007ca4 <forward_conv2d_if32of32wf32+0x168>
 8007b46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4a:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8007b4e:	f8de 3004 	ldr.w	r3, [lr, #4]
 8007b52:	b0a3      	sub	sp, #140	@ 0x8c
 8007b54:	4607      	mov	r7, r0
 8007b56:	b103      	cbz	r3, 8007b5a <forward_conv2d_if32of32wf32+0x1e>
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2a01      	cmp	r2, #1
 8007b5c:	f000 80dc 	beq.w	8007d18 <forward_conv2d_if32of32wf32+0x1dc>
 8007b60:	f8de 0010 	ldr.w	r0, [lr, #16]
 8007b64:	b100      	cbz	r0, 8007b68 <forward_conv2d_if32of32wf32+0x2c>
 8007b66:	6800      	ldr	r0, [r0, #0]
 8007b68:	2a02      	cmp	r2, #2
 8007b6a:	f000 809d 	beq.w	8007ca8 <forward_conv2d_if32of32wf32+0x16c>
 8007b6e:	f8de 501c 	ldr.w	r5, [lr, #28]
 8007b72:	2d00      	cmp	r5, #0
 8007b74:	f000 80c9 	beq.w	8007d0a <forward_conv2d_if32of32wf32+0x1ce>
 8007b78:	f8be 1018 	ldrh.w	r1, [lr, #24]
 8007b7c:	682c      	ldr	r4, [r5, #0]
 8007b7e:	2901      	cmp	r1, #1
 8007b80:	f240 80c5 	bls.w	8007d0e <forward_conv2d_if32of32wf32+0x1d2>
 8007b84:	686d      	ldr	r5, [r5, #4]
 8007b86:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8007b90:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8007b94:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007b98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007b9a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007b9e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007ba0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007ba4:	9316      	str	r3, [sp, #88]	@ 0x58
 8007ba6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007baa:	9317      	str	r3, [sp, #92]	@ 0x5c
 8007bac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007bb0:	9318      	str	r3, [sp, #96]	@ 0x60
 8007bb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007bb6:	9319      	str	r3, [sp, #100]	@ 0x64
 8007bb8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007bba:	6bfe      	ldr	r6, [r7, #60]	@ 0x3c
 8007bbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bbe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007bc0:	68e1      	ldr	r1, [r4, #12]
 8007bc2:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8007bc6:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007bc8:	e9d7 a40c 	ldrd	sl, r4, [r7, #48]	@ 0x30
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	9320      	str	r3, [sp, #128]	@ 0x80
 8007bd0:	8833      	ldrh	r3, [r6, #0]
 8007bd2:	931c      	str	r3, [sp, #112]	@ 0x70
 8007bd4:	88b3      	ldrh	r3, [r6, #4]
 8007bd6:	931d      	str	r3, [sp, #116]	@ 0x74
 8007bd8:	fa1f f38a 	uxth.w	r3, sl
 8007bdc:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
 8007be0:	931e      	str	r3, [sp, #120]	@ 0x78
 8007be2:	b2a3      	uxth	r3, r4
 8007be4:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8007be8:	931f      	str	r3, [sp, #124]	@ 0x7c
 8007bea:	b10d      	cbz	r5, 8007bf0 <forward_conv2d_if32of32wf32+0xb4>
 8007bec:	69ad      	ldr	r5, [r5, #24]
 8007bee:	68ad      	ldr	r5, [r5, #8]
 8007bf0:	6980      	ldr	r0, [r0, #24]
 8007bf2:	b2a4      	uxth	r4, r4
 8007bf4:	fa1f f38a 	uxth.w	r3, sl
 8007bf8:	3c01      	subs	r4, #1
 8007bfa:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8007bfe:	1e70      	subs	r0, r6, #1
 8007c00:	3b01      	subs	r3, #1
 8007c02:	fb00 6404 	mla	r4, r0, r4, r6
 8007c06:	1e78      	subs	r0, r7, #1
 8007c08:	fb00 7303 	mla	r3, r0, r3, r7
 8007c0c:	2a03      	cmp	r2, #3
 8007c0e:	9314      	str	r3, [sp, #80]	@ 0x50
 8007c10:	d07f      	beq.n	8007d12 <forward_conv2d_if32of32wf32+0x1d6>
 8007c12:	f8de 3028 	ldr.w	r3, [lr, #40]	@ 0x28
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d049      	beq.n	8007cae <forward_conv2d_if32of32wf32+0x172>
 8007c1a:	f8d3 8000 	ldr.w	r8, [r3]
 8007c1e:	f1b8 0f00 	cmp.w	r8, #0
 8007c22:	d003      	beq.n	8007c2c <forward_conv2d_if32of32wf32+0xf0>
 8007c24:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8007c28:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8007c2c:	6858      	ldr	r0, [r3, #4]
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	d03e      	beq.n	8007cb0 <forward_conv2d_if32of32wf32+0x174>
 8007c32:	6983      	ldr	r3, [r0, #24]
 8007c34:	f8dc e000 	ldr.w	lr, [ip]
 8007c38:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8007c3c:	f3ce 4243 	ubfx	r2, lr, #17, #4
 8007c40:	f46f 7388 	mvn.w	r3, #272	@ 0x110
 8007c44:	4113      	asrs	r3, r2
 8007c46:	07db      	lsls	r3, r3, #31
 8007c48:	d553      	bpl.n	8007cf2 <forward_conv2d_if32of32wf32+0x1b6>
 8007c4a:	f1b9 0f00 	cmp.w	r9, #0
 8007c4e:	bf18      	it	ne
 8007c50:	4649      	movne	r1, r9
 8007c52:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007c54:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c56:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007c58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c5a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8007c5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c5e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007c60:	940d      	str	r4, [sp, #52]	@ 0x34
 8007c62:	e9cd 6308 	strd	r6, r3, [sp, #32]
 8007c66:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007c68:	9306      	str	r3, [sp, #24]
 8007c6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c6c:	9305      	str	r3, [sp, #20]
 8007c6e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8007c70:	9304      	str	r3, [sp, #16]
 8007c72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c74:	9303      	str	r3, [sp, #12]
 8007c76:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007c78:	9302      	str	r3, [sp, #8]
 8007c7a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c7c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8007c7e:	9707      	str	r7, [sp, #28]
 8007c80:	e9cd 8300 	strd	r8, r3, [sp]
 8007c84:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c86:	9311      	str	r3, [sp, #68]	@ 0x44
 8007c88:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8007c8a:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c8c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007c8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c90:	460a      	mov	r2, r1
 8007c92:	462b      	mov	r3, r5
 8007c94:	4651      	mov	r1, sl
 8007c96:	4658      	mov	r0, fp
 8007c98:	940e      	str	r4, [sp, #56]	@ 0x38
 8007c9a:	f000 f997 	bl	8007fcc <forward_lite_conv2d_if32of32wf32>
 8007c9e:	b023      	add	sp, #140	@ 0x8c
 8007ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ca4:	6853      	ldr	r3, [r2, #4]
 8007ca6:	deff      	udf	#255	@ 0xff
 8007ca8:	2300      	movs	r3, #0
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	deff      	udf	#255	@ 0xff
 8007cae:	4698      	mov	r8, r3
 8007cb0:	f8dc e000 	ldr.w	lr, [ip]
 8007cb4:	f46f 7088 	mvn.w	r0, #272	@ 0x110
 8007cb8:	f3ce 4343 	ubfx	r3, lr, #17, #4
 8007cbc:	4118      	asrs	r0, r3
 8007cbe:	f010 0001 	ands.w	r0, r0, #1
 8007cc2:	d1c6      	bne.n	8007c52 <forward_conv2d_if32of32wf32+0x116>
 8007cc4:	f3ce 13c6 	ubfx	r3, lr, #7, #7
 8007cc8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8007ccc:	f3ce 5e41 	ubfx	lr, lr, #21, #2
 8007cd0:	fa43 f30e 	asr.w	r3, r3, lr
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	2a00      	cmp	r2, #0
 8007cd8:	d0bb      	beq.n	8007c52 <forward_conv2d_if32of32wf32+0x116>
 8007cda:	4681      	mov	r9, r0
 8007cdc:	6980      	ldr	r0, [r0, #24]
 8007cde:	9121      	str	r1, [sp, #132]	@ 0x84
 8007ce0:	6840      	ldr	r0, [r0, #4]
 8007ce2:	9001      	str	r0, [sp, #4]
 8007ce4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8007ce6:	9000      	str	r0, [sp, #0]
 8007ce8:	4648      	mov	r0, r9
 8007cea:	f000 fcfd 	bl	80086e8 <lite_decompress_ilutof32>
 8007cee:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8007cf0:	e7ab      	b.n	8007c4a <forward_conv2d_if32of32wf32+0x10e>
 8007cf2:	f3ce 13c6 	ubfx	r3, lr, #7, #7
 8007cf6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8007cfa:	f3ce 5e41 	ubfx	lr, lr, #21, #2
 8007cfe:	fa43 f30e 	asr.w	r3, r3, lr
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	2a00      	cmp	r2, #0
 8007d06:	d0a0      	beq.n	8007c4a <forward_conv2d_if32of32wf32+0x10e>
 8007d08:	e7e8      	b.n	8007cdc <forward_conv2d_if32of32wf32+0x1a0>
 8007d0a:	462c      	mov	r4, r5
 8007d0c:	e73b      	b.n	8007b86 <forward_conv2d_if32of32wf32+0x4a>
 8007d0e:	2500      	movs	r5, #0
 8007d10:	e739      	b.n	8007b86 <forward_conv2d_if32of32wf32+0x4a>
 8007d12:	2300      	movs	r3, #0
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	deff      	udf	#255	@ 0xff
 8007d18:	2300      	movs	r3, #0
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	deff      	udf	#255	@ 0xff
 8007d1e:	bf00      	nop

08007d20 <forward_dense>:
 8007d20:	6982      	ldr	r2, [r0, #24]
 8007d22:	8813      	ldrh	r3, [r2, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d043      	beq.n	8007db0 <forward_dense+0x90>
 8007d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d2c:	6855      	ldr	r5, [r2, #4]
 8007d2e:	6869      	ldr	r1, [r5, #4]
 8007d30:	b08e      	sub	sp, #56	@ 0x38
 8007d32:	b101      	cbz	r1, 8007d36 <forward_dense+0x16>
 8007d34:	6809      	ldr	r1, [r1, #0]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d069      	beq.n	8007e0e <forward_dense+0xee>
 8007d3a:	692a      	ldr	r2, [r5, #16]
 8007d3c:	b102      	cbz	r2, 8007d40 <forward_dense+0x20>
 8007d3e:	6812      	ldr	r2, [r2, #0]
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d061      	beq.n	8007e08 <forward_dense+0xe8>
 8007d44:	69ec      	ldr	r4, [r5, #28]
 8007d46:	2c00      	cmp	r4, #0
 8007d48:	d057      	beq.n	8007dfa <forward_dense+0xda>
 8007d4a:	8b2e      	ldrh	r6, [r5, #24]
 8007d4c:	6820      	ldr	r0, [r4, #0]
 8007d4e:	2e01      	cmp	r6, #1
 8007d50:	d955      	bls.n	8007dfe <forward_dense+0xde>
 8007d52:	6864      	ldr	r4, [r4, #4]
 8007d54:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8007d58:	68cf      	ldr	r7, [r1, #12]
 8007d5a:	68d0      	ldr	r0, [r2, #12]
 8007d5c:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8007d60:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8007d64:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 8007d68:	f8d9 0000 	ldr.w	r0, [r9]
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	fb06 f807 	mul.w	r8, r6, r7
 8007d72:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 8007d76:	d044      	beq.n	8007e02 <forward_dense+0xe2>
 8007d78:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 8007d7a:	b11d      	cbz	r5, 8007d84 <forward_dense+0x64>
 8007d7c:	682d      	ldr	r5, [r5, #0]
 8007d7e:	b10d      	cbz	r5, 8007d84 <forward_dense+0x64>
 8007d80:	69ab      	ldr	r3, [r5, #24]
 8007d82:	689d      	ldr	r5, [r3, #8]
 8007d84:	6992      	ldr	r2, [r2, #24]
 8007d86:	698b      	ldr	r3, [r1, #24]
 8007d88:	6890      	ldr	r0, [r2, #8]
 8007d8a:	6899      	ldr	r1, [r3, #8]
 8007d8c:	b10c      	cbz	r4, 8007d92 <forward_dense+0x72>
 8007d8e:	69a3      	ldr	r3, [r4, #24]
 8007d90:	689c      	ldr	r4, [r3, #8]
 8007d92:	4b20      	ldr	r3, [pc, #128]	@ (8007e14 <forward_dense+0xf4>)
 8007d94:	459c      	cmp	ip, r3
 8007d96:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 8007d9a:	d023      	beq.n	8007de4 <forward_dense+0xc4>
 8007d9c:	4e1e      	ldr	r6, [pc, #120]	@ (8007e18 <forward_dense+0xf8>)
 8007d9e:	45b4      	cmp	ip, r6
 8007da0:	d015      	beq.n	8007dce <forward_dense+0xae>
 8007da2:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 8007da6:	459c      	cmp	ip, r3
 8007da8:	d004      	beq.n	8007db4 <forward_dense+0x94>
 8007daa:	b00e      	add	sp, #56	@ 0x38
 8007dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	deff      	udf	#255	@ 0xff
 8007db4:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8007db8:	a807      	add	r0, sp, #28
 8007dba:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 8007dbe:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 8007dc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dc4:	f000 fcea 	bl	800879c <forward_lite_dense_if32of32wf32>
 8007dc8:	b00e      	add	sp, #56	@ 0x38
 8007dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dce:	e9cd e803 	strd	lr, r8, [sp, #12]
 8007dd2:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8007dd6:	9500      	str	r5, [sp, #0]
 8007dd8:	464b      	mov	r3, r9
 8007dda:	f000 fe39 	bl	8008a50 <forward_lite_dense_if32of32wf32_lut4>
 8007dde:	b00e      	add	sp, #56	@ 0x38
 8007de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007de4:	e9cd e803 	strd	lr, r8, [sp, #12]
 8007de8:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8007dec:	9500      	str	r5, [sp, #0]
 8007dee:	464b      	mov	r3, r9
 8007df0:	f000 ff56 	bl	8008ca0 <forward_lite_dense_if32of32wf32_lut8>
 8007df4:	b00e      	add	sp, #56	@ 0x38
 8007df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	e7aa      	b.n	8007d54 <forward_dense+0x34>
 8007dfe:	2400      	movs	r4, #0
 8007e00:	e7a8      	b.n	8007d54 <forward_dense+0x34>
 8007e02:	2300      	movs	r3, #0
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	deff      	udf	#255	@ 0xff
 8007e08:	2300      	movs	r3, #0
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	deff      	udf	#255	@ 0xff
 8007e0e:	2300      	movs	r3, #0
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	deff      	udf	#255	@ 0xff
 8007e14:	01d01040 	.word	0x01d01040
 8007e18:	01e81040 	.word	0x01e81040

08007e1c <forward_relu>:
 8007e1c:	6982      	ldr	r2, [r0, #24]
 8007e1e:	8813      	ldrh	r3, [r2, #0]
 8007e20:	b323      	cbz	r3, 8007e6c <forward_relu+0x50>
 8007e22:	6851      	ldr	r1, [r2, #4]
 8007e24:	684a      	ldr	r2, [r1, #4]
 8007e26:	b102      	cbz	r2, 8007e2a <forward_relu+0xe>
 8007e28:	6812      	ldr	r2, [r2, #0]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	f000 808d 	beq.w	8007f4a <forward_relu+0x12e>
 8007e30:	b470      	push	{r4, r5, r6}
 8007e32:	6909      	ldr	r1, [r1, #16]
 8007e34:	b101      	cbz	r1, 8007e38 <forward_relu+0x1c>
 8007e36:	6809      	ldr	r1, [r1, #0]
 8007e38:	69c6      	ldr	r6, [r0, #28]
 8007e3a:	b1ce      	cbz	r6, 8007e70 <forward_relu+0x54>
 8007e3c:	6873      	ldr	r3, [r6, #4]
 8007e3e:	6988      	ldr	r0, [r1, #24]
 8007e40:	6991      	ldr	r1, [r2, #24]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d044      	beq.n	8007ed0 <forward_relu+0xb4>
 8007e46:	6893      	ldr	r3, [r2, #8]
 8007e48:	6880      	ldr	r0, [r0, #8]
 8007e4a:	6889      	ldr	r1, [r1, #8]
 8007e4c:	0a1b      	lsrs	r3, r3, #8
 8007e4e:	d073      	beq.n	8007f38 <forward_relu+0x11c>
 8007e50:	68d5      	ldr	r5, [r2, #12]
 8007e52:	2201      	movs	r2, #1
 8007e54:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007e58:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8007e5c:	429d      	cmp	r5, r3
 8007e5e:	fb04 f202 	mul.w	r2, r4, r2
 8007e62:	d1f9      	bne.n	8007e58 <forward_relu+0x3c>
 8007e64:	68b3      	ldr	r3, [r6, #8]
 8007e66:	bc70      	pop	{r4, r5, r6}
 8007e68:	f000 bbc0 	b.w	80085ec <forward_lite_nl_relu_generic_if32of32_kernel>
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	deff      	udf	#255	@ 0xff
 8007e70:	6893      	ldr	r3, [r2, #8]
 8007e72:	6989      	ldr	r1, [r1, #24]
 8007e74:	6990      	ldr	r0, [r2, #24]
 8007e76:	6889      	ldr	r1, [r1, #8]
 8007e78:	6884      	ldr	r4, [r0, #8]
 8007e7a:	0a1b      	lsrs	r3, r3, #8
 8007e7c:	d05e      	beq.n	8007f3c <forward_relu+0x120>
 8007e7e:	68d5      	ldr	r5, [r2, #12]
 8007e80:	2201      	movs	r2, #1
 8007e82:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007e86:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8007e8a:	429d      	cmp	r5, r3
 8007e8c:	fb00 f202 	mul.w	r2, r0, r2
 8007e90:	d1f9      	bne.n	8007e86 <forward_relu+0x6a>
 8007e92:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 8007e96:	3b01      	subs	r3, #1
 8007e98:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007e9c:	4294      	cmp	r4, r2
 8007e9e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007ea2:	d813      	bhi.n	8007ecc <forward_relu+0xb0>
 8007ea4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8007f50 <forward_relu+0x134>
 8007ea8:	3204      	adds	r2, #4
 8007eaa:	3104      	adds	r1, #4
 8007eac:	4613      	mov	r3, r2
 8007eae:	ed72 7a01 	vldmdb	r2!, {s15}
 8007eb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eba:	f1a3 0308 	sub.w	r3, r3, #8
 8007ebe:	bfb8      	it	lt
 8007ec0:	eef0 7a47 	vmovlt.f32	s15, s14
 8007ec4:	429c      	cmp	r4, r3
 8007ec6:	ed61 7a01 	vstmdb	r1!, {s15}
 8007eca:	d9ef      	bls.n	8007eac <forward_relu+0x90>
 8007ecc:	bc70      	pop	{r4, r5, r6}
 8007ece:	4770      	bx	lr
 8007ed0:	688c      	ldr	r4, [r1, #8]
 8007ed2:	6891      	ldr	r1, [r2, #8]
 8007ed4:	6880      	ldr	r0, [r0, #8]
 8007ed6:	0a09      	lsrs	r1, r1, #8
 8007ed8:	d032      	beq.n	8007f40 <forward_relu+0x124>
 8007eda:	68d5      	ldr	r5, [r2, #12]
 8007edc:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8007ee0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007ee4:	4295      	cmp	r5, r2
 8007ee6:	fb01 f303 	mul.w	r3, r1, r3
 8007eea:	d1f9      	bne.n	8007ee0 <forward_relu+0xc4>
 8007eec:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8007ef0:	3a01      	subs	r2, #1
 8007ef2:	68b1      	ldr	r1, [r6, #8]
 8007ef4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ef8:	429c      	cmp	r4, r3
 8007efa:	ed91 7a00 	vldr	s14, [r1]
 8007efe:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007f02:	d8e3      	bhi.n	8007ecc <forward_relu+0xb0>
 8007f04:	2500      	movs	r5, #0
 8007f06:	3304      	adds	r3, #4
 8007f08:	1d02      	adds	r2, r0, #4
 8007f0a:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007f0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f16:	f1a3 0104 	sub.w	r1, r3, #4
 8007f1a:	f1a3 0308 	sub.w	r3, r3, #8
 8007f1e:	d405      	bmi.n	8007f2c <forward_relu+0x110>
 8007f20:	429c      	cmp	r4, r3
 8007f22:	f842 5d04 	str.w	r5, [r2, #-4]!
 8007f26:	d8d1      	bhi.n	8007ecc <forward_relu+0xb0>
 8007f28:	460b      	mov	r3, r1
 8007f2a:	e7ee      	b.n	8007f0a <forward_relu+0xee>
 8007f2c:	429c      	cmp	r4, r3
 8007f2e:	ed62 7a01 	vstmdb	r2!, {s15}
 8007f32:	d8cb      	bhi.n	8007ecc <forward_relu+0xb0>
 8007f34:	460b      	mov	r3, r1
 8007f36:	e7e8      	b.n	8007f0a <forward_relu+0xee>
 8007f38:	2201      	movs	r2, #1
 8007f3a:	e793      	b.n	8007e64 <forward_relu+0x48>
 8007f3c:	4622      	mov	r2, r4
 8007f3e:	e7b1      	b.n	8007ea4 <forward_relu+0x88>
 8007f40:	68b2      	ldr	r2, [r6, #8]
 8007f42:	4623      	mov	r3, r4
 8007f44:	ed92 7a00 	vldr	s14, [r2]
 8007f48:	e7dc      	b.n	8007f04 <forward_relu+0xe8>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	deff      	udf	#255	@ 0xff
 8007f50:	00000000 	.word	0x00000000

08007f54 <forward_sm>:
 8007f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f58:	6982      	ldr	r2, [r0, #24]
 8007f5a:	8813      	ldrh	r3, [r2, #0]
 8007f5c:	b383      	cbz	r3, 8007fc0 <forward_sm+0x6c>
 8007f5e:	6852      	ldr	r2, [r2, #4]
 8007f60:	6855      	ldr	r5, [r2, #4]
 8007f62:	b105      	cbz	r5, 8007f66 <forward_sm+0x12>
 8007f64:	682d      	ldr	r5, [r5, #0]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d029      	beq.n	8007fbe <forward_sm+0x6a>
 8007f6a:	6913      	ldr	r3, [r2, #16]
 8007f6c:	b363      	cbz	r3, 8007fc8 <forward_sm+0x74>
 8007f6e:	681e      	ldr	r6, [r3, #0]
 8007f70:	68a9      	ldr	r1, [r5, #8]
 8007f72:	68ec      	ldr	r4, [r5, #12]
 8007f74:	68f3      	ldr	r3, [r6, #12]
 8007f76:	6867      	ldr	r7, [r4, #4]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	0a09      	lsrs	r1, r1, #8
 8007f7c:	d022      	beq.n	8007fc4 <forward_sm+0x70>
 8007f7e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007f82:	2301      	movs	r3, #1
 8007f84:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 8007f88:	428c      	cmp	r4, r1
 8007f8a:	fb00 f303 	mul.w	r3, r0, r3
 8007f8e:	d1f9      	bne.n	8007f84 <forward_sm+0x30>
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	69a8      	ldr	r0, [r5, #24]
 8007f94:	69b1      	ldr	r1, [r6, #24]
 8007f96:	6884      	ldr	r4, [r0, #8]
 8007f98:	688e      	ldr	r6, [r1, #8]
 8007f9a:	18e5      	adds	r5, r4, r3
 8007f9c:	42ac      	cmp	r4, r5
 8007f9e:	d20c      	bcs.n	8007fba <forward_sm+0x66>
 8007fa0:	ea4f 0882 	mov.w	r8, r2, lsl #2
 8007fa4:	ea4f 0987 	mov.w	r9, r7, lsl #2
 8007fa8:	4621      	mov	r1, r4
 8007faa:	4630      	mov	r0, r6
 8007fac:	463a      	mov	r2, r7
 8007fae:	444c      	add	r4, r9
 8007fb0:	f000 fad2 	bl	8008558 <forward_lite_nl_softmax_if32of32_kernel>
 8007fb4:	42a5      	cmp	r5, r4
 8007fb6:	4446      	add	r6, r8
 8007fb8:	d8f6      	bhi.n	8007fa8 <forward_sm+0x54>
 8007fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	deff      	udf	#255	@ 0xff
 8007fc4:	2304      	movs	r3, #4
 8007fc6:	e7e4      	b.n	8007f92 <forward_sm+0x3e>
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	deff      	udf	#255	@ 0xff

08007fcc <forward_lite_conv2d_if32of32wf32>:
 8007fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd0:	ed2d 8b02 	vpush	{d8}
 8007fd4:	b0a1      	sub	sp, #132	@ 0x84
 8007fd6:	4686      	mov	lr, r0
 8007fd8:	910c      	str	r1, [sp, #48]	@ 0x30
 8007fda:	f8bd 10d8 	ldrh.w	r1, [sp, #216]	@ 0xd8
 8007fde:	901e      	str	r0, [sp, #120]	@ 0x78
 8007fe0:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8007fe2:	f8bd 40d4 	ldrh.w	r4, [sp, #212]	@ 0xd4
 8007fe6:	f8bd 50dc 	ldrh.w	r5, [sp, #220]	@ 0xdc
 8007fea:	f8bd 60e0 	ldrh.w	r6, [sp, #224]	@ 0xe0
 8007fee:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007ff0:	424f      	negs	r7, r1
 8007ff2:	4694      	mov	ip, r2
 8007ff4:	930e      	str	r3, [sp, #56]	@ 0x38
 8007ff6:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8007ff8:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8007ffa:	9418      	str	r4, [sp, #96]	@ 0x60
 8007ffc:	9508      	str	r5, [sp, #32]
 8007ffe:	961f      	str	r6, [sp, #124]	@ 0x7c
 8008000:	9711      	str	r7, [sp, #68]	@ 0x44
 8008002:	2800      	cmp	r0, #0
 8008004:	f000 8177 	beq.w	80082f6 <forward_lite_conv2d_if32of32wf32+0x32a>
 8008008:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 800800a:	910d      	str	r1, [sp, #52]	@ 0x34
 800800c:	fb00 f303 	mul.w	r3, r0, r3
 8008010:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8008012:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 8008014:	ed9f 8abf 	vldr	s16, [pc, #764]	@ 8008314 <forward_lite_conv2d_if32of32wf32+0x348>
 8008018:	fb00 f303 	mul.w	r3, r0, r3
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008020:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8008022:	fb01 f102 	mul.w	r1, r1, r2
 8008026:	fb00 f303 	mul.w	r3, r0, r3
 800802a:	0092      	lsls	r2, r2, #2
 800802c:	9205      	str	r2, [sp, #20]
 800802e:	fb06 f203 	mul.w	r2, r6, r3
 8008032:	fb07 f303 	mul.w	r3, r7, r3
 8008036:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 800803a:	9312      	str	r3, [sp, #72]	@ 0x48
 800803c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800803e:	fb05 f303 	mul.w	r3, r5, r3
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	9306      	str	r3, [sp, #24]
 8008046:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8008048:	0089      	lsls	r1, r1, #2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	911a      	str	r1, [sp, #104]	@ 0x68
 800804e:	4261      	negs	r1, r4
 8008050:	9307      	str	r3, [sp, #28]
 8008052:	fb03 f301 	mul.w	r3, r3, r1
 8008056:	0094      	lsls	r4, r2, #2
 8008058:	9316      	str	r3, [sp, #88]	@ 0x58
 800805a:	f10c 4278 	add.w	r2, ip, #4160749568	@ 0xf8000000
 800805e:	2300      	movs	r3, #0
 8008060:	9115      	str	r1, [sp, #84]	@ 0x54
 8008062:	941c      	str	r4, [sp, #112]	@ 0x70
 8008064:	9219      	str	r2, [sp, #100]	@ 0x64
 8008066:	9314      	str	r3, [sp, #80]	@ 0x50
 8008068:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800806a:	2b00      	cmp	r3, #0
 800806c:	f2c0 8270 	blt.w	8008550 <forward_lite_conv2d_if32of32wf32+0x584>
 8008070:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008072:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008074:	2300      	movs	r3, #0
 8008076:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008078:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 800807a:	440a      	add	r2, r1
 800807c:	9939      	ldr	r1, [sp, #228]	@ 0xe4
 800807e:	428a      	cmp	r2, r1
 8008080:	bf94      	ite	ls
 8008082:	ebc3 0b02 	rsbls	fp, r3, r2
 8008086:	ebc3 0b01 	rsbhi	fp, r3, r1
 800808a:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800808c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800808e:	2a00      	cmp	r2, #0
 8008090:	f000 8142 	beq.w	8008318 <forward_lite_conv2d_if32of32wf32+0x34c>
 8008094:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008096:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800809a:	f0c0 813d 	bcc.w	8008318 <forward_lite_conv2d_if32of32wf32+0x34c>
 800809e:	9a05      	ldr	r2, [sp, #20]
 80080a0:	188a      	adds	r2, r1, r2
 80080a2:	4291      	cmp	r1, r2
 80080a4:	921b      	str	r2, [sp, #108]	@ 0x6c
 80080a6:	f080 8110 	bcs.w	80082ca <forward_lite_conv2d_if32of32wf32+0x2fe>
 80080aa:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 80080ac:	fb02 f303 	mul.w	r3, r2, r3
 80080b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80080b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80080b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080b6:	4413      	add	r3, r2
 80080b8:	931d      	str	r3, [sp, #116]	@ 0x74
 80080ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80080bc:	9310      	str	r3, [sp, #64]	@ 0x40
 80080be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80080c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80080c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80080c6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80080c8:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80080ca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80080cc:	f000 ff16 	bl	8008efc <st_int8_copy>
 80080d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f000 811a 	beq.w	800830c <forward_lite_conv2d_if32of32wf32+0x340>
 80080d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80080da:	ecf3 1a01 	vldmia	r3!, {s3}
 80080de:	9313      	str	r3, [sp, #76]	@ 0x4c
 80080e0:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 80e6 	beq.w	80082b4 <forward_lite_conv2d_if32of32wf32+0x2e8>
 80080e8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80080ee:	9302      	str	r3, [sp, #8]
 80080f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80080f2:	9303      	str	r3, [sp, #12]
 80080f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	2300      	movs	r3, #0
 80080fa:	9304      	str	r3, [sp, #16]
 80080fc:	9b01      	ldr	r3, [sp, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f2c0 80fe 	blt.w	8008300 <forward_lite_conv2d_if32of32wf32+0x334>
 8008104:	9902      	ldr	r1, [sp, #8]
 8008106:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008108:	2600      	movs	r6, #0
 800810a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800810c:	9807      	ldr	r0, [sp, #28]
 800810e:	9c00      	ldr	r4, [sp, #0]
 8008110:	fb00 3202 	mla	r2, r0, r2, r3
 8008114:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8008116:	4423      	add	r3, r4
 8008118:	9c33      	ldr	r4, [sp, #204]	@ 0xcc
 800811a:	42a3      	cmp	r3, r4
 800811c:	bf94      	ite	ls
 800811e:	ebc6 0603 	rsbls	r6, r6, r3
 8008122:	ebc6 0604 	rsbhi	r6, r6, r4
 8008126:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8008128:	eba3 0a06 	sub.w	sl, r3, r6
 800812c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800812e:	f1bb 0f00 	cmp.w	fp, #0
 8008132:	eba4 0906 	sub.w	r9, r4, r6
 8008136:	eeb0 7a61 	vmov.f32	s14, s3
 800813a:	fb03 f606 	mul.w	r6, r3, r6
 800813e:	f340 80a1 	ble.w	8008284 <forward_lite_conv2d_if32of32wf32+0x2b8>
 8008142:	f026 070f 	bic.w	r7, r6, #15
 8008146:	f107 38ff 	add.w	r8, r7, #4294967295
 800814a:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800814e:	f108 0801 	add.w	r8, r8, #1
 8008152:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 8008156:	fb00 fa0a 	mul.w	sl, r0, sl
 800815a:	fb00 f909 	mul.w	r9, r0, r9
 800815e:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8008162:	f04f 0c00 	mov.w	ip, #0
 8008166:	2f00      	cmp	r7, #0
 8008168:	bfd8      	it	le
 800816a:	2000      	movle	r0, #0
 800816c:	dd70      	ble.n	8008250 <forward_lite_conv2d_if32of32wf32+0x284>
 800816e:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 8008172:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8008176:	2400      	movs	r4, #0
 8008178:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 800817c:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 8008180:	ed10 6a10 	vldr	s12, [r0, #-64]	@ 0xffffffc0
 8008184:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 8008188:	ed50 4a0d 	vldr	s9, [r0, #-52]	@ 0xffffffcc
 800818c:	ed10 5a0c 	vldr	s10, [r0, #-48]	@ 0xffffffd0
 8008190:	ed10 3a0a 	vldr	s6, [r0, #-40]	@ 0xffffffd8
 8008194:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 8008198:	ed10 4a09 	vldr	s8, [r0, #-36]	@ 0xffffffdc
 800819c:	ed50 0a06 	vldr	s1, [r0, #-24]	@ 0xffffffe8
 80081a0:	ed13 1a06 	vldr	s2, [r3, #-24]	@ 0xffffffe8
 80081a4:	ed10 2a05 	vldr	s4, [r0, #-20]	@ 0xffffffec
 80081a8:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 80081ac:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80081b0:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 80081b4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80081b8:	3410      	adds	r4, #16
 80081ba:	42bc      	cmp	r4, r7
 80081bc:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 80081c0:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 80081c4:	eee5 7a86 	vfma.f32	s15, s11, s12
 80081c8:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 80081cc:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80081d0:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 80081d4:	ed10 6a1b 	vldr	s12, [r0, #-108]	@ 0xffffff94
 80081d8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80081dc:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 80081e0:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 80081e4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80081e8:	ed10 5a18 	vldr	s10, [r0, #-96]	@ 0xffffffa0
 80081ec:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 80081f0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80081f4:	ed10 6a17 	vldr	s12, [r0, #-92]	@ 0xffffffa4
 80081f8:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 80081fc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008200:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 8008204:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8008208:	eee4 7a24 	vfma.f32	s15, s8, s9
 800820c:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 8008210:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8008214:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008218:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 800821c:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8008220:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008224:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 8008228:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 800822c:	eee0 7a81 	vfma.f32	s15, s1, s2
 8008230:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008234:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008238:	eee4 7a24 	vfma.f32	s15, s8, s9
 800823c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008240:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008244:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008248:	db96      	blt.n	8008178 <forward_lite_conv2d_if32of32wf32+0x1ac>
 800824a:	4471      	add	r1, lr
 800824c:	4472      	add	r2, lr
 800824e:	4640      	mov	r0, r8
 8008250:	4286      	cmp	r6, r0
 8008252:	dd10      	ble.n	8008276 <forward_lite_conv2d_if32of32wf32+0x2aa>
 8008254:	4603      	mov	r3, r0
 8008256:	460d      	mov	r5, r1
 8008258:	4614      	mov	r4, r2
 800825a:	ecf4 6a01 	vldmia	r4!, {s13}
 800825e:	ecf5 7a01 	vldmia	r5!, {s15}
 8008262:	3301      	adds	r3, #1
 8008264:	429e      	cmp	r6, r3
 8008266:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800826a:	d1f6      	bne.n	800825a <forward_lite_conv2d_if32of32wf32+0x28e>
 800826c:	1a30      	subs	r0, r6, r0
 800826e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8008272:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8008276:	f10c 0c01 	add.w	ip, ip, #1
 800827a:	45e3      	cmp	fp, ip
 800827c:	4451      	add	r1, sl
 800827e:	444a      	add	r2, r9
 8008280:	f47f af71 	bne.w	8008166 <forward_lite_conv2d_if32of32wf32+0x19a>
 8008284:	9901      	ldr	r1, [sp, #4]
 8008286:	9808      	ldr	r0, [sp, #32]
 8008288:	9a03      	ldr	r2, [sp, #12]
 800828a:	9b04      	ldr	r3, [sp, #16]
 800828c:	ed82 7a00 	vstr	s14, [r2]
 8008290:	4401      	add	r1, r0
 8008292:	9101      	str	r1, [sp, #4]
 8008294:	9905      	ldr	r1, [sp, #20]
 8008296:	440a      	add	r2, r1
 8008298:	9203      	str	r2, [sp, #12]
 800829a:	9a00      	ldr	r2, [sp, #0]
 800829c:	9906      	ldr	r1, [sp, #24]
 800829e:	1a12      	subs	r2, r2, r0
 80082a0:	9200      	str	r2, [sp, #0]
 80082a2:	9a02      	ldr	r2, [sp, #8]
 80082a4:	440a      	add	r2, r1
 80082a6:	9202      	str	r2, [sp, #8]
 80082a8:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 80082aa:	3301      	adds	r3, #1
 80082ac:	429a      	cmp	r2, r3
 80082ae:	9304      	str	r3, [sp, #16]
 80082b0:	f47f af24 	bne.w	80080fc <forward_lite_conv2d_if32of32wf32+0x130>
 80082b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80082b6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80082b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80082ba:	440a      	add	r2, r1
 80082bc:	920a      	str	r2, [sp, #40]	@ 0x28
 80082be:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80082c0:	3304      	adds	r3, #4
 80082c2:	4293      	cmp	r3, r2
 80082c4:	9310      	str	r3, [sp, #64]	@ 0x40
 80082c6:	f4ff aefe 	bcc.w	80080c6 <forward_lite_conv2d_if32of32wf32+0xfa>
 80082ca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80082cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80082d0:	440a      	add	r2, r1
 80082d2:	920c      	str	r2, [sp, #48]	@ 0x30
 80082d4:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 80082d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80082d8:	440a      	add	r2, r1
 80082da:	9211      	str	r2, [sp, #68]	@ 0x44
 80082dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80082de:	1a52      	subs	r2, r2, r1
 80082e0:	920d      	str	r2, [sp, #52]	@ 0x34
 80082e2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80082e4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80082e6:	440a      	add	r2, r1
 80082e8:	9212      	str	r2, [sp, #72]	@ 0x48
 80082ea:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 80082ec:	3301      	adds	r3, #1
 80082ee:	429a      	cmp	r2, r3
 80082f0:	9314      	str	r3, [sp, #80]	@ 0x50
 80082f2:	f47f aeb9 	bne.w	8008068 <forward_lite_conv2d_if32of32wf32+0x9c>
 80082f6:	b021      	add	sp, #132	@ 0x84
 80082f8:	ecbd 8b02 	vpop	{d8}
 80082fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008300:	9a00      	ldr	r2, [sp, #0]
 8008302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008304:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008306:	4616      	mov	r6, r2
 8008308:	189a      	adds	r2, r3, r2
 800830a:	e6fe      	b.n	800810a <forward_lite_conv2d_if32of32wf32+0x13e>
 800830c:	eef0 1a48 	vmov.f32	s3, s16
 8008310:	e6e6      	b.n	80080e0 <forward_lite_conv2d_if32of32wf32+0x114>
 8008312:	bf00      	nop
 8008314:	00000000 	.word	0x00000000
 8008318:	9a05      	ldr	r2, [sp, #20]
 800831a:	188a      	adds	r2, r1, r2
 800831c:	4291      	cmp	r1, r2
 800831e:	921b      	str	r2, [sp, #108]	@ 0x6c
 8008320:	d2d3      	bcs.n	80082ca <forward_lite_conv2d_if32of32wf32+0x2fe>
 8008322:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 8008324:	fb02 f303 	mul.w	r3, r2, r3
 8008328:	930a      	str	r3, [sp, #40]	@ 0x28
 800832a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800832c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800832e:	4413      	add	r3, r2
 8008330:	931d      	str	r3, [sp, #116]	@ 0x74
 8008332:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008334:	9310      	str	r3, [sp, #64]	@ 0x40
 8008336:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008338:	9313      	str	r3, [sp, #76]	@ 0x4c
 800833a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800833c:	9309      	str	r3, [sp, #36]	@ 0x24
 800833e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 80fc 	beq.w	800853e <forward_lite_conv2d_if32of32wf32+0x572>
 8008346:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008348:	ecf3 1a01 	vldmia	r3!, {s3}
 800834c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800834e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 80e5 	beq.w	8008520 <forward_lite_conv2d_if32of32wf32+0x554>
 8008356:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800835c:	9302      	str	r3, [sp, #8]
 800835e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008360:	9303      	str	r3, [sp, #12]
 8008362:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008364:	9301      	str	r3, [sp, #4]
 8008366:	2300      	movs	r3, #0
 8008368:	9304      	str	r3, [sp, #16]
 800836a:	9b01      	ldr	r3, [sp, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	f2c0 80e9 	blt.w	8008544 <forward_lite_conv2d_if32of32wf32+0x578>
 8008372:	9a02      	ldr	r2, [sp, #8]
 8008374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008376:	2400      	movs	r4, #0
 8008378:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800837a:	9807      	ldr	r0, [sp, #28]
 800837c:	9d00      	ldr	r5, [sp, #0]
 800837e:	fb03 1300 	mla	r3, r3, r0, r1
 8008382:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8008384:	4429      	add	r1, r5
 8008386:	9d33      	ldr	r5, [sp, #204]	@ 0xcc
 8008388:	42a9      	cmp	r1, r5
 800838a:	bf94      	ite	ls
 800838c:	ebc4 0401 	rsbls	r4, r4, r1
 8008390:	ebc4 0405 	rsbhi	r4, r4, r5
 8008394:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8008396:	eba1 0a04 	sub.w	sl, r1, r4
 800839a:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800839c:	f1bb 0f00 	cmp.w	fp, #0
 80083a0:	eba5 0904 	sub.w	r9, r5, r4
 80083a4:	eeb0 7a61 	vmov.f32	s14, s3
 80083a8:	fb01 f404 	mul.w	r4, r1, r4
 80083ac:	f340 80a0 	ble.w	80084f0 <forward_lite_conv2d_if32of32wf32+0x524>
 80083b0:	f024 0c0f 	bic.w	ip, r4, #15
 80083b4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80083b8:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80083bc:	f108 0801 	add.w	r8, r8, #1
 80083c0:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 80083c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80083c8:	fb00 f909 	mul.w	r9, r0, r9
 80083cc:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80083d0:	2700      	movs	r7, #0
 80083d2:	f1bc 0f00 	cmp.w	ip, #0
 80083d6:	bfd8      	it	le
 80083d8:	2100      	movle	r1, #0
 80083da:	dd70      	ble.n	80084be <forward_lite_conv2d_if32of32wf32+0x4f2>
 80083dc:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 80083e0:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80083e4:	2500      	movs	r5, #0
 80083e6:	ed51 5a0f 	vldr	s11, [r1, #-60]	@ 0xffffffc4
 80083ea:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 80083ee:	ed10 6a10 	vldr	s12, [r0, #-64]	@ 0xffffffc0
 80083f2:	ed51 6a10 	vldr	s13, [r1, #-64]	@ 0xffffffc0
 80083f6:	ed50 4a0d 	vldr	s9, [r0, #-52]	@ 0xffffffcc
 80083fa:	ed10 5a0c 	vldr	s10, [r0, #-48]	@ 0xffffffd0
 80083fe:	ed10 3a0a 	vldr	s6, [r0, #-40]	@ 0xffffffd8
 8008402:	ed51 3a0a 	vldr	s7, [r1, #-40]	@ 0xffffffd8
 8008406:	ed10 4a09 	vldr	s8, [r0, #-36]	@ 0xffffffdc
 800840a:	ed50 0a06 	vldr	s1, [r0, #-24]	@ 0xffffffe8
 800840e:	ed11 1a06 	vldr	s2, [r1, #-24]	@ 0xffffffe8
 8008412:	ed10 2a05 	vldr	s4, [r0, #-20]	@ 0xffffffec
 8008416:	ed51 2a05 	vldr	s5, [r1, #-20]	@ 0xffffffec
 800841a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800841e:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 8008422:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008426:	3510      	adds	r5, #16
 8008428:	4565      	cmp	r5, ip
 800842a:	ed11 6a0e 	vldr	s12, [r1, #-56]	@ 0xffffffc8
 800842e:	ed51 6a0d 	vldr	s13, [r1, #-52]	@ 0xffffffcc
 8008432:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008436:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800843a:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 800843e:	ed51 5a1c 	vldr	s11, [r1, #-112]	@ 0xffffff90
 8008442:	ed10 6a1b 	vldr	s12, [r0, #-108]	@ 0xffffff94
 8008446:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800844a:	ed51 6a1b 	vldr	s13, [r1, #-108]	@ 0xffffff94
 800844e:	ed51 4a19 	vldr	s9, [r1, #-100]	@ 0xffffff9c
 8008452:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008456:	ed10 5a18 	vldr	s10, [r0, #-96]	@ 0xffffffa0
 800845a:	ed51 5a18 	vldr	s11, [r1, #-96]	@ 0xffffffa0
 800845e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008462:	ed10 6a17 	vldr	s12, [r0, #-92]	@ 0xffffffa4
 8008466:	ed51 6a17 	vldr	s13, [r1, #-92]	@ 0xffffffa4
 800846a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800846e:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 8008472:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 8008476:	eee4 7a24 	vfma.f32	s15, s8, s9
 800847a:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 800847e:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 8008482:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008486:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 800848a:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 800848e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008492:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 8008496:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 800849a:	eee0 7a81 	vfma.f32	s15, s1, s2
 800849e:	eee2 7a22 	vfma.f32	s15, s4, s5
 80084a2:	eee3 7a23 	vfma.f32	s15, s6, s7
 80084a6:	eee4 7a24 	vfma.f32	s15, s8, s9
 80084aa:	eee5 7a25 	vfma.f32	s15, s10, s11
 80084ae:	eee6 7a26 	vfma.f32	s15, s12, s13
 80084b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80084b6:	db96      	blt.n	80083e6 <forward_lite_conv2d_if32of32wf32+0x41a>
 80084b8:	4472      	add	r2, lr
 80084ba:	4473      	add	r3, lr
 80084bc:	4641      	mov	r1, r8
 80084be:	428c      	cmp	r4, r1
 80084c0:	dd10      	ble.n	80084e4 <forward_lite_conv2d_if32of32wf32+0x518>
 80084c2:	4608      	mov	r0, r1
 80084c4:	4616      	mov	r6, r2
 80084c6:	461d      	mov	r5, r3
 80084c8:	ecf5 6a01 	vldmia	r5!, {s13}
 80084cc:	ecf6 7a01 	vldmia	r6!, {s15}
 80084d0:	3001      	adds	r0, #1
 80084d2:	4284      	cmp	r4, r0
 80084d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80084d8:	d1f6      	bne.n	80084c8 <forward_lite_conv2d_if32of32wf32+0x4fc>
 80084da:	1a61      	subs	r1, r4, r1
 80084dc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80084e0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80084e4:	3701      	adds	r7, #1
 80084e6:	45bb      	cmp	fp, r7
 80084e8:	4452      	add	r2, sl
 80084ea:	444b      	add	r3, r9
 80084ec:	f47f af71 	bne.w	80083d2 <forward_lite_conv2d_if32of32wf32+0x406>
 80084f0:	9901      	ldr	r1, [sp, #4]
 80084f2:	9808      	ldr	r0, [sp, #32]
 80084f4:	9a03      	ldr	r2, [sp, #12]
 80084f6:	9b04      	ldr	r3, [sp, #16]
 80084f8:	ed82 7a00 	vstr	s14, [r2]
 80084fc:	4401      	add	r1, r0
 80084fe:	9101      	str	r1, [sp, #4]
 8008500:	9905      	ldr	r1, [sp, #20]
 8008502:	440a      	add	r2, r1
 8008504:	9203      	str	r2, [sp, #12]
 8008506:	9a00      	ldr	r2, [sp, #0]
 8008508:	9906      	ldr	r1, [sp, #24]
 800850a:	1a12      	subs	r2, r2, r0
 800850c:	9200      	str	r2, [sp, #0]
 800850e:	9a02      	ldr	r2, [sp, #8]
 8008510:	440a      	add	r2, r1
 8008512:	9202      	str	r2, [sp, #8]
 8008514:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 8008516:	3301      	adds	r3, #1
 8008518:	429a      	cmp	r2, r3
 800851a:	9304      	str	r3, [sp, #16]
 800851c:	f47f af25 	bne.w	800836a <forward_lite_conv2d_if32of32wf32+0x39e>
 8008520:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008522:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008524:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008526:	440a      	add	r2, r1
 8008528:	9209      	str	r2, [sp, #36]	@ 0x24
 800852a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800852c:	3304      	adds	r3, #4
 800852e:	4293      	cmp	r3, r2
 8008530:	9310      	str	r3, [sp, #64]	@ 0x40
 8008532:	f4bf aeca 	bcs.w	80082ca <forward_lite_conv2d_if32of32wf32+0x2fe>
 8008536:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008538:	2b00      	cmp	r3, #0
 800853a:	f47f af04 	bne.w	8008346 <forward_lite_conv2d_if32of32wf32+0x37a>
 800853e:	eef0 1a48 	vmov.f32	s3, s16
 8008542:	e704      	b.n	800834e <forward_lite_conv2d_if32of32wf32+0x382>
 8008544:	9a00      	ldr	r2, [sp, #0]
 8008546:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008548:	4614      	mov	r4, r2
 800854a:	4413      	add	r3, r2
 800854c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800854e:	e713      	b.n	8008378 <forward_lite_conv2d_if32of32wf32+0x3ac>
 8008550:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8008552:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008554:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008556:	e58e      	b.n	8008076 <forward_lite_conv2d_if32of32wf32+0xaa>

08008558 <forward_lite_nl_softmax_if32of32_kernel>:
 8008558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800855c:	2a01      	cmp	r2, #1
 800855e:	ed2d 8b02 	vpush	{d8}
 8008562:	4617      	mov	r7, r2
 8008564:	ed91 8a00 	vldr	s16, [r1]
 8008568:	d937      	bls.n	80085da <forward_lite_nl_softmax_if32of32_kernel+0x82>
 800856a:	1d0b      	adds	r3, r1, #4
 800856c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8008570:	ecf3 7a01 	vldmia	r3!, {s15}
 8008574:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800857c:	bfb8      	it	lt
 800857e:	eeb0 8a67 	vmovlt.f32	s16, s15
 8008582:	429a      	cmp	r2, r3
 8008584:	d1f4      	bne.n	8008570 <forward_lite_nl_softmax_if32of32_kernel+0x18>
 8008586:	eddf 8a18 	vldr	s17, [pc, #96]	@ 80085e8 <forward_lite_nl_softmax_if32of32_kernel+0x90>
 800858a:	4606      	mov	r6, r0
 800858c:	460d      	mov	r5, r1
 800858e:	4680      	mov	r8, r0
 8008590:	2400      	movs	r4, #0
 8008592:	ecb5 0a01 	vldmia	r5!, {s0}
 8008596:	ee30 0a48 	vsub.f32	s0, s0, s16
 800859a:	f003 fca1 	bl	800bee0 <expf>
 800859e:	3401      	adds	r4, #1
 80085a0:	42a7      	cmp	r7, r4
 80085a2:	ee78 8a80 	vadd.f32	s17, s17, s0
 80085a6:	eca8 0a01 	vstmia	r8!, {s0}
 80085aa:	d8f2      	bhi.n	8008592 <forward_lite_nl_softmax_if32of32_kernel+0x3a>
 80085ac:	eef5 8a40 	vcmp.f32	s17, #0.0
 80085b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085b4:	d00d      	beq.n	80085d2 <forward_lite_nl_softmax_if32of32_kernel+0x7a>
 80085b6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80085ba:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 80085be:	2300      	movs	r3, #0
 80085c0:	3301      	adds	r3, #1
 80085c2:	429f      	cmp	r7, r3
 80085c4:	edd6 7a00 	vldr	s15, [r6]
 80085c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80085cc:	ece6 7a01 	vstmia	r6!, {s15}
 80085d0:	d8f6      	bhi.n	80085c0 <forward_lite_nl_softmax_if32of32_kernel+0x68>
 80085d2:	ecbd 8b02 	vpop	{d8}
 80085d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085da:	2a00      	cmp	r2, #0
 80085dc:	d1d3      	bne.n	8008586 <forward_lite_nl_softmax_if32of32_kernel+0x2e>
 80085de:	ecbd 8b02 	vpop	{d8}
 80085e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085e6:	bf00      	nop
 80085e8:	00000000 	.word	0x00000000

080085ec <forward_lite_nl_relu_generic_if32of32_kernel>:
 80085ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80085f0:	ed93 7a00 	vldr	s14, [r3]
 80085f4:	ed93 6a01 	vldr	s12, [r3, #4]
 80085f8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80085fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008600:	d42a      	bmi.n	8008658 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8008602:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8008606:	3a01      	subs	r2, #1
 8008608:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800860c:	4561      	cmp	r1, ip
 800860e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8008612:	d85d      	bhi.n	80086d0 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8008614:	1d11      	adds	r1, r2, #4
 8008616:	f10c 0304 	add.w	r3, ip, #4
 800861a:	4408      	add	r0, r1
 800861c:	ebac 0202 	sub.w	r2, ip, r2
 8008620:	e00c      	b.n	800863c <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8008622:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800862a:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800862e:	db01      	blt.n	8008634 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8008630:	ee65 7a86 	vmul.f32	s15, s11, s12
 8008634:	4293      	cmp	r3, r2
 8008636:	ed60 7a01 	vstmdb	r0!, {s15}
 800863a:	d00c      	beq.n	8008656 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 800863c:	ed73 7a01 	vldmdb	r3!, {s15}
 8008640:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008648:	daeb      	bge.n	8008622 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 800864a:	eef0 7a66 	vmov.f32	s15, s13
 800864e:	4293      	cmp	r3, r2
 8008650:	ed60 7a01 	vstmdb	r0!, {s15}
 8008654:	d1f2      	bne.n	800863c <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8008656:	4770      	bx	lr
 8008658:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800865c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8008660:	3a01      	subs	r2, #1
 8008662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008666:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800866a:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800866e:	d017      	beq.n	80086a0 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 8008670:	4561      	cmp	r1, ip
 8008672:	d82d      	bhi.n	80086d0 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8008674:	1d11      	adds	r1, r2, #4
 8008676:	f10c 0304 	add.w	r3, ip, #4
 800867a:	4401      	add	r1, r0
 800867c:	ebac 0202 	sub.w	r2, ip, r2
 8008680:	ed73 7a01 	vldmdb	r3!, {s15}
 8008684:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800868c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008690:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008694:	d81d      	bhi.n	80086d2 <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 8008696:	4293      	cmp	r3, r2
 8008698:	ed61 6a01 	vstmdb	r1!, {s13}
 800869c:	d1f0      	bne.n	8008680 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 800869e:	4770      	bx	lr
 80086a0:	4561      	cmp	r1, ip
 80086a2:	d815      	bhi.n	80086d0 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 80086a4:	1d11      	adds	r1, r2, #4
 80086a6:	b500      	push	{lr}
 80086a8:	f10c 0304 	add.w	r3, ip, #4
 80086ac:	f04f 0e00 	mov.w	lr, #0
 80086b0:	4401      	add	r1, r0
 80086b2:	ebac 0202 	sub.w	r2, ip, r2
 80086b6:	ed73 7a01 	vldmdb	r3!, {s15}
 80086ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80086be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086c2:	d40b      	bmi.n	80086dc <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 80086c4:	4293      	cmp	r3, r2
 80086c6:	f841 ed04 	str.w	lr, [r1, #-4]!
 80086ca:	d1f4      	bne.n	80086b6 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 80086cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	4293      	cmp	r3, r2
 80086d4:	ed61 7a01 	vstmdb	r1!, {s15}
 80086d8:	d1d2      	bne.n	8008680 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 80086da:	4770      	bx	lr
 80086dc:	4293      	cmp	r3, r2
 80086de:	ed61 7a01 	vstmdb	r1!, {s15}
 80086e2:	d1e8      	bne.n	80086b6 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 80086e4:	e7f2      	b.n	80086cc <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 80086e6:	bf00      	nop

080086e8 <lite_decompress_ilutof32>:
 80086e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086ec:	9d08      	ldr	r5, [sp, #32]
 80086ee:	2b04      	cmp	r3, #4
 80086f0:	ea4f 0685 	mov.w	r6, r5, lsl #2
 80086f4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80086f8:	d015      	beq.n	8008726 <lite_decompress_ilutof32+0x3e>
 80086fa:	2b08      	cmp	r3, #8
 80086fc:	d110      	bne.n	8008720 <lite_decompress_ilutof32+0x38>
 80086fe:	42a8      	cmp	r0, r5
 8008700:	bf38      	it	cc
 8008702:	460c      	movcc	r4, r1
 8008704:	d20c      	bcs.n	8008720 <lite_decompress_ilutof32+0x38>
 8008706:	f814 3b01 	ldrb.w	r3, [r4], #1
 800870a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f840 3b04 	str.w	r3, [r0], #4
 8008714:	4285      	cmp	r5, r0
 8008716:	d8f6      	bhi.n	8008706 <lite_decompress_ilutof32+0x1e>
 8008718:	3e01      	subs	r6, #1
 800871a:	eb01 0696 	add.w	r6, r1, r6, lsr #2
 800871e:	1c71      	adds	r1, r6, #1
 8008720:	4608      	mov	r0, r1
 8008722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008726:	9b07      	ldr	r3, [sp, #28]
 8008728:	085e      	lsrs	r6, r3, #1
 800872a:	f003 0701 	and.w	r7, r3, #1
 800872e:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8008732:	f106 38ff 	add.w	r8, r6, #4294967295
 8008736:	42a8      	cmp	r0, r5
 8008738:	d2f2      	bcs.n	8008720 <lite_decompress_ilutof32+0x38>
 800873a:	b33e      	cbz	r6, 800878c <lite_decompress_ilutof32+0xa4>
 800873c:	f100 0e08 	add.w	lr, r0, #8
 8008740:	f101 3cff 	add.w	ip, r1, #4294967295
 8008744:	eb01 0408 	add.w	r4, r1, r8
 8008748:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800874c:	091b      	lsrs	r3, r3, #4
 800874e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008752:	f10e 0e08 	add.w	lr, lr, #8
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f84e 3c10 	str.w	r3, [lr, #-16]
 800875c:	f89c 3000 	ldrb.w	r3, [ip]
 8008760:	f003 030f 	and.w	r3, r3, #15
 8008764:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008768:	4564      	cmp	r4, ip
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f84e 3c0c 	str.w	r3, [lr, #-12]
 8008770:	d1ea      	bne.n	8008748 <lite_decompress_ilutof32+0x60>
 8008772:	4431      	add	r1, r6
 8008774:	4448      	add	r0, r9
 8008776:	2f00      	cmp	r7, #0
 8008778:	d0dd      	beq.n	8008736 <lite_decompress_ilutof32+0x4e>
 800877a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800877e:	091b      	lsrs	r3, r3, #4
 8008780:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f840 3b04 	str.w	r3, [r0], #4
 800878a:	e7d4      	b.n	8008736 <lite_decompress_ilutof32+0x4e>
 800878c:	2f00      	cmp	r7, #0
 800878e:	d1f4      	bne.n	800877a <lite_decompress_ilutof32+0x92>
 8008790:	42a8      	cmp	r0, r5
 8008792:	d3fd      	bcc.n	8008790 <lite_decompress_ilutof32+0xa8>
 8008794:	4608      	mov	r0, r1
 8008796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800879a:	bf00      	nop

0800879c <forward_lite_dense_if32of32wf32>:
 800879c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a0:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 80087a4:	6801      	ldr	r1, [r0, #0]
 80087a6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80087aa:	fb02 f303 	mul.w	r3, r2, r3
 80087ae:	b083      	sub	sp, #12
 80087b0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80087b4:	4299      	cmp	r1, r3
 80087b6:	9100      	str	r1, [sp, #0]
 80087b8:	9301      	str	r3, [sp, #4]
 80087ba:	f080 811e 	bcs.w	80089fa <forward_lite_dense_if32of32wf32+0x25e>
 80087be:	6904      	ldr	r4, [r0, #16]
 80087c0:	4607      	mov	r7, r0
 80087c2:	0096      	lsls	r6, r2, #2
 80087c4:	9b00      	ldr	r3, [sp, #0]
 80087c6:	68bd      	ldr	r5, [r7, #8]
 80087c8:	eb03 0e06 	add.w	lr, r3, r6
 80087cc:	459e      	cmp	lr, r3
 80087ce:	461e      	mov	r6, r3
 80087d0:	f240 8104 	bls.w	80089dc <forward_lite_dense_if32of32wf32+0x240>
 80087d4:	f1a4 0c10 	sub.w	ip, r4, #16
 80087d8:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 80087dc:	f10c 0c01 	add.w	ip, ip, #1
 80087e0:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 80087e4:	ea4f 0984 	mov.w	r9, r4, lsl #2
 80087e8:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 80087ec:	2c0f      	cmp	r4, #15
 80087ee:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8008a4c <forward_lite_dense_if32of32wf32+0x2b0>
 80087f2:	f240 8105 	bls.w	8008a00 <forward_lite_dense_if32of32wf32+0x264>
 80087f6:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 80087fa:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 80087fe:	4621      	mov	r1, r4
 8008800:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 8008804:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8008808:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 800880c:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 8008810:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 8008814:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 8008818:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 800881c:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 8008820:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 8008824:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 8008828:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800882c:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 8008830:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 8008834:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008838:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 800883c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008840:	3910      	subs	r1, #16
 8008842:	290f      	cmp	r1, #15
 8008844:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 8008848:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 800884c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008850:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8008854:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8008858:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 800885c:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 8008860:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8008864:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 8008868:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 800886c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008870:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 8008874:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 8008878:	eee6 7a26 	vfma.f32	s15, s12, s13
 800887c:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 8008880:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 8008884:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008888:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 800888c:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8008890:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008894:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8008898:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 800889c:	eee5 7a25 	vfma.f32	s15, s10, s11
 80088a0:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 80088a4:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 80088a8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80088ac:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 80088b0:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 80088b4:	eee1 7a21 	vfma.f32	s15, s2, s3
 80088b8:	eee2 7a22 	vfma.f32	s15, s4, s5
 80088bc:	eee3 7a23 	vfma.f32	s15, s6, s7
 80088c0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80088c4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80088c8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80088cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80088d0:	d896      	bhi.n	8008800 <forward_lite_dense_if32of32wf32+0x64>
 80088d2:	eb05 020b 	add.w	r2, r5, fp
 80088d6:	f004 010f 	and.w	r1, r4, #15
 80088da:	4663      	mov	r3, ip
 80088dc:	2903      	cmp	r1, #3
 80088de:	d95f      	bls.n	80089a0 <forward_lite_dense_if32of32wf32+0x204>
 80088e0:	edd2 6a01 	vldr	s13, [r2, #4]
 80088e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80088e8:	ed93 6a00 	vldr	s12, [r3]
 80088ec:	ed93 5a02 	vldr	s10, [r3, #8]
 80088f0:	edd2 5a02 	vldr	s11, [r2, #8]
 80088f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80088f8:	edd2 6a00 	vldr	s13, [r2]
 80088fc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008900:	1f08      	subs	r0, r1, #4
 8008902:	2803      	cmp	r0, #3
 8008904:	ed93 6a03 	vldr	s12, [r3, #12]
 8008908:	edd2 6a03 	vldr	s13, [r2, #12]
 800890c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008910:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008914:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008918:	eeb0 7a67 	vmov.f32	s14, s15
 800891c:	d938      	bls.n	8008990 <forward_lite_dense_if32of32wf32+0x1f4>
 800891e:	edd2 6a05 	vldr	s13, [r2, #20]
 8008922:	edd3 7a05 	vldr	s15, [r3, #20]
 8008926:	ed93 6a04 	vldr	s12, [r3, #16]
 800892a:	ed93 5a06 	vldr	s10, [r3, #24]
 800892e:	edd2 5a06 	vldr	s11, [r2, #24]
 8008932:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008936:	edd2 6a04 	vldr	s13, [r2, #16]
 800893a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800893e:	f1a1 0a08 	sub.w	sl, r1, #8
 8008942:	f1ba 0f03 	cmp.w	sl, #3
 8008946:	ed93 6a07 	vldr	s12, [r3, #28]
 800894a:	edd2 6a07 	vldr	s13, [r2, #28]
 800894e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008952:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008956:	ee37 7a27 	vadd.f32	s14, s14, s15
 800895a:	d919      	bls.n	8008990 <forward_lite_dense_if32of32wf32+0x1f4>
 800895c:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8008960:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8008964:	ed92 6a08 	vldr	s12, [r2, #32]
 8008968:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 800896c:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8008970:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008974:	edd3 6a08 	vldr	s13, [r3, #32]
 8008978:	eee6 7a26 	vfma.f32	s15, s12, s13
 800897c:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 8008980:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8008984:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008988:	eee6 7a26 	vfma.f32	s15, s12, s13
 800898c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008990:	0880      	lsrs	r0, r0, #2
 8008992:	3001      	adds	r0, #1
 8008994:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8008998:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800899c:	f001 0103 	and.w	r1, r1, #3
 80089a0:	b1a9      	cbz	r1, 80089ce <forward_lite_dense_if32of32wf32+0x232>
 80089a2:	edd3 6a00 	vldr	s13, [r3]
 80089a6:	edd2 7a00 	vldr	s15, [r2]
 80089aa:	3901      	subs	r1, #1
 80089ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089b0:	d00d      	beq.n	80089ce <forward_lite_dense_if32of32wf32+0x232>
 80089b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80089b6:	edd2 7a01 	vldr	s15, [r2, #4]
 80089ba:	2901      	cmp	r1, #1
 80089bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089c0:	d005      	beq.n	80089ce <forward_lite_dense_if32of32wf32+0x232>
 80089c2:	edd2 6a02 	vldr	s13, [r2, #8]
 80089c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80089ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089ce:	444d      	add	r5, r9
 80089d0:	eca6 7a01 	vstmia	r6!, {s14}
 80089d4:	45b6      	cmp	lr, r6
 80089d6:	f63f af09 	bhi.w	80087ec <forward_lite_dense_if32of32wf32+0x50>
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	b99b      	cbnz	r3, 8008a08 <forward_lite_dense_if32of32wf32+0x26c>
 80089e0:	9b00      	ldr	r3, [sp, #0]
 80089e2:	9901      	ldr	r1, [sp, #4]
 80089e4:	693c      	ldr	r4, [r7, #16]
 80089e6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80089ea:	4299      	cmp	r1, r3
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 80089f2:	ea4f 0682 	mov.w	r6, r2, lsl #2
 80089f6:	f63f aee5 	bhi.w	80087c4 <forward_lite_dense_if32of32wf32+0x28>
 80089fa:	b003      	add	sp, #12
 80089fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a00:	4621      	mov	r1, r4
 8008a02:	462a      	mov	r2, r5
 8008a04:	4643      	mov	r3, r8
 8008a06:	e769      	b.n	80088dc <forward_lite_dense_if32of32wf32+0x140>
 8008a08:	2a00      	cmp	r2, #0
 8008a0a:	d0e9      	beq.n	80089e0 <forward_lite_dense_if32of32wf32+0x244>
 8008a0c:	9a00      	ldr	r2, [sp, #0]
 8008a0e:	ed93 7a00 	vldr	s14, [r3]
 8008a12:	edd2 7a00 	vldr	s15, [r2]
 8008a16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	edc2 7a00 	vstr	s15, [r2]
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	2a01      	cmp	r2, #1
 8008a24:	d9dc      	bls.n	80089e0 <forward_lite_dense_if32of32wf32+0x244>
 8008a26:	1d19      	adds	r1, r3, #4
 8008a28:	2301      	movs	r3, #1
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	ed91 7a00 	vldr	s14, [r1]
 8008a30:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008a34:	edd2 7a00 	vldr	s15, [r2]
 8008a38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	ece1 7a01 	vstmia	r1!, {s15}
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d8f0      	bhi.n	8008a2a <forward_lite_dense_if32of32wf32+0x28e>
 8008a48:	e7ca      	b.n	80089e0 <forward_lite_dense_if32of32wf32+0x244>
 8008a4a:	bf00      	nop
 8008a4c:	00000000 	.word	0x00000000

08008a50 <forward_lite_dense_if32of32wf32_lut4>:
 8008a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a54:	b08d      	sub	sp, #52	@ 0x34
 8008a56:	4605      	mov	r5, r0
 8008a58:	9005      	str	r0, [sp, #20]
 8008a5a:	920a      	str	r2, [sp, #40]	@ 0x28
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 8008a62:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8008a64:	fb02 f303 	mul.w	r3, r2, r3
 8008a68:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008a6c:	460c      	mov	r4, r1
 8008a6e:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8008a70:	9308      	str	r3, [sp, #32]
 8008a72:	b126      	cbz	r6, 8008a7e <forward_lite_dense_if32of32wf32_lut4+0x2e>
 8008a74:	2240      	movs	r2, #64	@ 0x40
 8008a76:	4631      	mov	r1, r6
 8008a78:	f000 fa40 	bl	8008efc <st_int8_copy>
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	9b05      	ldr	r3, [sp, #20]
 8008a80:	9a08      	ldr	r2, [sp, #32]
 8008a82:	4293      	cmp	r3, r2
 8008a84:	f080 80f5 	bcs.w	8008c72 <forward_lite_dense_if32of32wf32_lut4+0x222>
 8008a88:	08eb      	lsrs	r3, r5, #3
 8008a8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008a8c:	9301      	str	r3, [sp, #4]
 8008a8e:	f005 0101 	and.w	r1, r5, #1
 8008a92:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	0092      	lsls	r2, r2, #2
 8008a9a:	f025 0801 	bic.w	r8, r5, #1
 8008a9e:	9102      	str	r1, [sp, #8]
 8008aa0:	9304      	str	r3, [sp, #16]
 8008aa2:	00a9      	lsls	r1, r5, #2
 8008aa4:	9b05      	ldr	r3, [sp, #20]
 8008aa6:	9207      	str	r2, [sp, #28]
 8008aa8:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8008aac:	9109      	str	r1, [sp, #36]	@ 0x24
 8008aae:	f104 0b20 	add.w	fp, r4, #32
 8008ab2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008ab4:	9a07      	ldr	r2, [sp, #28]
 8008ab6:	eb03 0902 	add.w	r9, r3, r2
 8008aba:	4599      	cmp	r9, r3
 8008abc:	f1ab 0220 	sub.w	r2, fp, #32
 8008ac0:	9206      	str	r2, [sp, #24]
 8008ac2:	f240 80d9 	bls.w	8008c78 <forward_lite_dense_if32of32wf32_lut4+0x228>
 8008ac6:	469e      	mov	lr, r3
 8008ac8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008aca:	f108 33ff 	add.w	r3, r8, #4294967295
 8008ace:	9303      	str	r3, [sp, #12]
 8008ad0:	9b01      	ldr	r3, [sp, #4]
 8008ad2:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8008c9c <forward_lite_dense_if32of32wf32_lut4+0x24c>
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f000 80b2 	beq.w	8008c40 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8008adc:	9b04      	ldr	r3, [sp, #16]
 8008ade:	18d5      	adds	r5, r2, r3
 8008ae0:	465b      	mov	r3, fp
 8008ae2:	7814      	ldrb	r4, [r2, #0]
 8008ae4:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 8008ae8:	7851      	ldrb	r1, [r2, #1]
 8008aea:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 8008aee:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 8008af2:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 8008af6:	ed13 5a04 	vldr	s10, [r3, #-16]
 8008afa:	ed53 5a03 	vldr	s11, [r3, #-12]
 8008afe:	ed13 6a02 	vldr	s12, [r3, #-8]
 8008b02:	ed53 6a01 	vldr	s13, [r3, #-4]
 8008b06:	f004 060f 	and.w	r6, r4, #15
 8008b0a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008b0e:	edd6 7a00 	vldr	s15, [r6]
 8008b12:	0924      	lsrs	r4, r4, #4
 8008b14:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8008b18:	ed94 3a00 	vldr	s6, [r4]
 8008b1c:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8008b20:	090c      	lsrs	r4, r1, #4
 8008b22:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008b26:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8008b2a:	f001 010f 	and.w	r1, r1, #15
 8008b2e:	edd4 3a00 	vldr	s7, [r4]
 8008b32:	7894      	ldrb	r4, [r2, #2]
 8008b34:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008b38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008b3c:	0926      	lsrs	r6, r4, #4
 8008b3e:	ed91 4a00 	vldr	s8, [r1]
 8008b42:	78d1      	ldrb	r1, [r2, #3]
 8008b44:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008b48:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008b4c:	f004 040f 	and.w	r4, r4, #15
 8008b50:	edd6 4a00 	vldr	s9, [r6]
 8008b54:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008b58:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8008b5c:	3204      	adds	r2, #4
 8008b5e:	ed94 5a00 	vldr	s10, [r4]
 8008b62:	090c      	lsrs	r4, r1, #4
 8008b64:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008b68:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8008b6c:	f001 010f 	and.w	r1, r1, #15
 8008b70:	edd4 5a00 	vldr	s11, [r4]
 8008b74:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008b78:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008b7c:	42aa      	cmp	r2, r5
 8008b7e:	ed91 6a00 	vldr	s12, [r1]
 8008b82:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008b86:	f103 0320 	add.w	r3, r3, #32
 8008b8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008b8e:	d1a8      	bne.n	8008ae2 <forward_lite_dense_if32of32wf32_lut4+0x92>
 8008b90:	4656      	mov	r6, sl
 8008b92:	4546      	cmp	r6, r8
 8008b94:	d258      	bcs.n	8008c48 <forward_lite_dense_if32of32wf32_lut4+0x1f8>
 8008b96:	9b03      	ldr	r3, [sp, #12]
 8008b98:	1b9c      	subs	r4, r3, r6
 8008b9a:	08e7      	lsrs	r7, r4, #3
 8008b9c:	f106 0208 	add.w	r2, r6, #8
 8008ba0:	1e69      	subs	r1, r5, #1
 8008ba2:	eb05 04d4 	add.w	r4, r5, r4, lsr #3
 8008ba6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008baa:	ed52 5a01 	vldr	s11, [r2, #-4]
 8008bae:	ed52 6a02 	vldr	s13, [r2, #-8]
 8008bb2:	f003 0c0f 	and.w	ip, r3, #15
 8008bb6:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8008bba:	eddc 7a00 	vldr	s15, [ip]
 8008bbe:	091b      	lsrs	r3, r3, #4
 8008bc0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008bc4:	ed93 6a00 	vldr	s12, [r3]
 8008bc8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008bcc:	42a1      	cmp	r1, r4
 8008bce:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008bd2:	f102 0208 	add.w	r2, r2, #8
 8008bd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008bda:	d1e4      	bne.n	8008ba6 <forward_lite_dense_if32of32wf32_lut4+0x156>
 8008bdc:	3701      	adds	r7, #1
 8008bde:	19ea      	adds	r2, r5, r7
 8008be0:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8008be4:	9b02      	ldr	r3, [sp, #8]
 8008be6:	b30b      	cbz	r3, 8008c2c <forward_lite_dense_if32of32wf32_lut4+0x1dc>
 8008be8:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008bec:	edd6 7a00 	vldr	s15, [r6]
 8008bf0:	091b      	lsrs	r3, r3, #4
 8008bf2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008bf6:	edd3 6a00 	vldr	s13, [r3]
 8008bfa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008bfe:	ecae 7a01 	vstmia	lr!, {s14}
 8008c02:	45f1      	cmp	r9, lr
 8008c04:	f63f af64 	bhi.w	8008ad0 <forward_lite_dense_if32of32wf32_lut4+0x80>
 8008c08:	9b05      	ldr	r3, [sp, #20]
 8008c0a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008c0c:	1899      	adds	r1, r3, r2
 8008c0e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c10:	b9e3      	cbnz	r3, 8008c4c <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 8008c12:	9b08      	ldr	r3, [sp, #32]
 8008c14:	428b      	cmp	r3, r1
 8008c16:	d92c      	bls.n	8008c72 <forward_lite_dense_if32of32wf32_lut4+0x222>
 8008c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c1a:	4498      	add	r8, r3
 8008c1c:	449a      	add	sl, r3
 8008c1e:	449b      	add	fp, r3
 8008c20:	9b05      	ldr	r3, [sp, #20]
 8008c22:	4599      	cmp	r9, r3
 8008c24:	d92a      	bls.n	8008c7c <forward_lite_dense_if32of32wf32_lut4+0x22c>
 8008c26:	9105      	str	r1, [sp, #20]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	e743      	b.n	8008ab4 <forward_lite_dense_if32of32wf32_lut4+0x64>
 8008c2c:	ecae 7a01 	vstmia	lr!, {s14}
 8008c30:	45f1      	cmp	r9, lr
 8008c32:	d9e9      	bls.n	8008c08 <forward_lite_dense_if32of32wf32_lut4+0x1b8>
 8008c34:	9b01      	ldr	r3, [sp, #4]
 8008c36:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008c9c <forward_lite_dense_if32of32wf32_lut4+0x24c>
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f47f af4e 	bne.w	8008adc <forward_lite_dense_if32of32wf32_lut4+0x8c>
 8008c40:	9e06      	ldr	r6, [sp, #24]
 8008c42:	4546      	cmp	r6, r8
 8008c44:	4615      	mov	r5, r2
 8008c46:	d3a6      	bcc.n	8008b96 <forward_lite_dense_if32of32wf32_lut4+0x146>
 8008c48:	462a      	mov	r2, r5
 8008c4a:	e7cb      	b.n	8008be4 <forward_lite_dense_if32of32wf32_lut4+0x194>
 8008c4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d0df      	beq.n	8008c12 <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 8008c52:	9b07      	ldr	r3, [sp, #28]
 8008c54:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008c56:	1acb      	subs	r3, r1, r3
 8008c58:	edd3 7a00 	vldr	s15, [r3]
 8008c5c:	ecb2 7a01 	vldmia	r2!, {s14}
 8008c60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008c64:	ece3 7a01 	vstmia	r3!, {s15}
 8008c68:	428b      	cmp	r3, r1
 8008c6a:	d1f5      	bne.n	8008c58 <forward_lite_dense_if32of32wf32_lut4+0x208>
 8008c6c:	9b08      	ldr	r3, [sp, #32]
 8008c6e:	428b      	cmp	r3, r1
 8008c70:	d8d2      	bhi.n	8008c18 <forward_lite_dense_if32of32wf32_lut4+0x1c8>
 8008c72:	b00d      	add	sp, #52	@ 0x34
 8008c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c78:	4619      	mov	r1, r3
 8008c7a:	e7c8      	b.n	8008c0e <forward_lite_dense_if32of32wf32_lut4+0x1be>
 8008c7c:	9b07      	ldr	r3, [sp, #28]
 8008c7e:	1acb      	subs	r3, r1, r3
 8008c80:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8008c82:	461a      	mov	r2, r3
 8008c84:	ed92 7a00 	vldr	s14, [r2]
 8008c88:	ecf0 7a01 	vldmia	r0!, {s15}
 8008c8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008c90:	ece2 7a01 	vstmia	r2!, {s15}
 8008c94:	428a      	cmp	r2, r1
 8008c96:	d1f5      	bne.n	8008c84 <forward_lite_dense_if32of32wf32_lut4+0x234>
 8008c98:	e7f2      	b.n	8008c80 <forward_lite_dense_if32of32wf32_lut4+0x230>
 8008c9a:	bf00      	nop
 8008c9c:	00000000 	.word	0x00000000

08008ca0 <forward_lite_dense_if32of32wf32_lut8>:
 8008ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca4:	b087      	sub	sp, #28
 8008ca6:	460f      	mov	r7, r1
 8008ca8:	9204      	str	r2, [sp, #16]
 8008caa:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	@ 0x4c
 8008cae:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008cb0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8008cb2:	fb01 f202 	mul.w	r2, r1, r2
 8008cb6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008cba:	4605      	mov	r5, r0
 8008cbc:	9202      	str	r2, [sp, #8]
 8008cbe:	b136      	cbz	r6, 8008cce <forward_lite_dense_if32of32wf32_lut8+0x2e>
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	f000 f918 	bl	8008efc <st_int8_copy>
 8008ccc:	4633      	mov	r3, r6
 8008cce:	9a02      	ldr	r2, [sp, #8]
 8008cd0:	4295      	cmp	r5, r2
 8008cd2:	f080 80f9 	bcs.w	8008ec8 <forward_lite_dense_if32of32wf32_lut8+0x228>
 8008cd6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008cd8:	0092      	lsls	r2, r2, #2
 8008cda:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8008cde:	9201      	str	r2, [sp, #4]
 8008ce0:	9205      	str	r2, [sp, #20]
 8008ce2:	462a      	mov	r2, r5
 8008ce4:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 8008ce8:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 8008cec:	464d      	mov	r5, r9
 8008cee:	4691      	mov	r9, r2
 8008cf0:	9a01      	ldr	r2, [sp, #4]
 8008cf2:	eb09 0e02 	add.w	lr, r9, r2
 8008cf6:	00a1      	lsls	r1, r4, #2
 8008cf8:	3720      	adds	r7, #32
 8008cfa:	45ce      	cmp	lr, r9
 8008cfc:	f004 0007 	and.w	r0, r4, #7
 8008d00:	9103      	str	r1, [sp, #12]
 8008d02:	f1a7 0b20 	sub.w	fp, r7, #32
 8008d06:	f240 80c8 	bls.w	8008e9a <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 8008d0a:	9a04      	ldr	r2, [sp, #16]
 8008d0c:	46cc      	mov	ip, r9
 8008d0e:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8008ef8 <forward_lite_dense_if32of32wf32_lut8+0x258>
 8008d12:	2d00      	cmp	r5, #0
 8008d14:	f000 80dd 	beq.w	8008ed2 <forward_lite_dense_if32of32wf32_lut8+0x232>
 8008d18:	eb02 060a 	add.w	r6, r2, sl
 8008d1c:	4639      	mov	r1, r7
 8008d1e:	7854      	ldrb	r4, [r2, #1]
 8008d20:	ed11 3a07 	vldr	s6, [r1, #-28]	@ 0xffffffe4
 8008d24:	ed51 3a08 	vldr	s7, [r1, #-32]	@ 0xffffffe0
 8008d28:	ed11 4a06 	vldr	s8, [r1, #-24]	@ 0xffffffe8
 8008d2c:	ed51 4a05 	vldr	s9, [r1, #-20]	@ 0xffffffec
 8008d30:	ed11 5a04 	vldr	s10, [r1, #-16]
 8008d34:	ed51 5a03 	vldr	s11, [r1, #-12]
 8008d38:	ed11 6a02 	vldr	s12, [r1, #-8]
 8008d3c:	ed51 6a01 	vldr	s13, [r1, #-4]
 8008d40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d44:	edd4 7a00 	vldr	s15, [r4]
 8008d48:	7814      	ldrb	r4, [r2, #0]
 8008d4a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d4e:	ee67 7a83 	vmul.f32	s15, s15, s6
 8008d52:	ed94 3a00 	vldr	s6, [r4]
 8008d56:	7894      	ldrb	r4, [r2, #2]
 8008d58:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008d5c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d60:	3208      	adds	r2, #8
 8008d62:	edd4 3a00 	vldr	s7, [r4]
 8008d66:	f812 4c05 	ldrb.w	r4, [r2, #-5]
 8008d6a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008d6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d72:	3120      	adds	r1, #32
 8008d74:	ed94 4a00 	vldr	s8, [r4]
 8008d78:	f812 4c04 	ldrb.w	r4, [r2, #-4]
 8008d7c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008d80:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d84:	edd4 4a00 	vldr	s9, [r4]
 8008d88:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 8008d8c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008d90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d94:	ed94 5a00 	vldr	s10, [r4]
 8008d98:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 8008d9c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008da0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008da4:	edd4 5a00 	vldr	s11, [r4]
 8008da8:	f812 4c01 	ldrb.w	r4, [r2, #-1]
 8008dac:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008db0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008db4:	42b2      	cmp	r2, r6
 8008db6:	ed94 6a00 	vldr	s12, [r4]
 8008dba:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008dbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008dc2:	d1ac      	bne.n	8008d1e <forward_lite_dense_if32of32wf32_lut8+0x7e>
 8008dc4:	4642      	mov	r2, r8
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	f000 8081 	beq.w	8008ece <forward_lite_dense_if32of32wf32_lut8+0x22e>
 8008dcc:	7831      	ldrb	r1, [r6, #0]
 8008dce:	edd2 7a00 	vldr	s15, [r2]
 8008dd2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008dd6:	edd1 6a00 	vldr	s13, [r1]
 8008dda:	2801      	cmp	r0, #1
 8008ddc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008de0:	d03f      	beq.n	8008e62 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8008de2:	7871      	ldrb	r1, [r6, #1]
 8008de4:	edd2 7a01 	vldr	s15, [r2, #4]
 8008de8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008dec:	edd1 6a00 	vldr	s13, [r1]
 8008df0:	2802      	cmp	r0, #2
 8008df2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008df6:	d034      	beq.n	8008e62 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8008df8:	78b1      	ldrb	r1, [r6, #2]
 8008dfa:	edd2 7a02 	vldr	s15, [r2, #8]
 8008dfe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008e02:	edd1 6a00 	vldr	s13, [r1]
 8008e06:	2803      	cmp	r0, #3
 8008e08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008e0c:	d029      	beq.n	8008e62 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8008e0e:	78f1      	ldrb	r1, [r6, #3]
 8008e10:	edd2 6a03 	vldr	s13, [r2, #12]
 8008e14:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008e18:	edd1 7a00 	vldr	s15, [r1]
 8008e1c:	2804      	cmp	r0, #4
 8008e1e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008e22:	d01e      	beq.n	8008e62 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8008e24:	7931      	ldrb	r1, [r6, #4]
 8008e26:	edd2 6a04 	vldr	s13, [r2, #16]
 8008e2a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008e2e:	edd1 7a00 	vldr	s15, [r1]
 8008e32:	2805      	cmp	r0, #5
 8008e34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008e38:	d013      	beq.n	8008e62 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8008e3a:	7971      	ldrb	r1, [r6, #5]
 8008e3c:	edd2 6a05 	vldr	s13, [r2, #20]
 8008e40:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008e44:	edd1 7a00 	vldr	s15, [r1]
 8008e48:	2806      	cmp	r0, #6
 8008e4a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008e4e:	d008      	beq.n	8008e62 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8008e50:	edd2 7a06 	vldr	s15, [r2, #24]
 8008e54:	79b2      	ldrb	r2, [r6, #6]
 8008e56:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8008e5a:	edd2 6a00 	vldr	s13, [r2]
 8008e5e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008e62:	1832      	adds	r2, r6, r0
 8008e64:	ecac 7a01 	vstmia	ip!, {s14}
 8008e68:	45e6      	cmp	lr, ip
 8008e6a:	f63f af50 	bhi.w	8008d0e <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8008e6e:	9a05      	ldr	r2, [sp, #20]
 8008e70:	eb09 0402 	add.w	r4, r9, r2
 8008e74:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008e76:	b9a2      	cbnz	r2, 8008ea2 <forward_lite_dense_if32of32wf32_lut8+0x202>
 8008e78:	9a02      	ldr	r2, [sp, #8]
 8008e7a:	42a2      	cmp	r2, r4
 8008e7c:	d924      	bls.n	8008ec8 <forward_lite_dense_if32of32wf32_lut8+0x228>
 8008e7e:	9a03      	ldr	r2, [sp, #12]
 8008e80:	45ce      	cmp	lr, r9
 8008e82:	4490      	add	r8, r2
 8008e84:	4417      	add	r7, r2
 8008e86:	d927      	bls.n	8008ed8 <forward_lite_dense_if32of32wf32_lut8+0x238>
 8008e88:	9a01      	ldr	r2, [sp, #4]
 8008e8a:	46a1      	mov	r9, r4
 8008e8c:	eb09 0e02 	add.w	lr, r9, r2
 8008e90:	45ce      	cmp	lr, r9
 8008e92:	f1a7 0b20 	sub.w	fp, r7, #32
 8008e96:	f63f af38 	bhi.w	8008d0a <forward_lite_dense_if32of32wf32_lut8+0x6a>
 8008e9a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008e9c:	464c      	mov	r4, r9
 8008e9e:	2a00      	cmp	r2, #0
 8008ea0:	d0ea      	beq.n	8008e78 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 8008ea2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008ea4:	2a00      	cmp	r2, #0
 8008ea6:	d0e7      	beq.n	8008e78 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 8008ea8:	9a01      	ldr	r2, [sp, #4]
 8008eaa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008eac:	1aa2      	subs	r2, r4, r2
 8008eae:	edd2 7a00 	vldr	s15, [r2]
 8008eb2:	ecb1 7a01 	vldmia	r1!, {s14}
 8008eb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008eba:	ece2 7a01 	vstmia	r2!, {s15}
 8008ebe:	4294      	cmp	r4, r2
 8008ec0:	d1f5      	bne.n	8008eae <forward_lite_dense_if32of32wf32_lut8+0x20e>
 8008ec2:	9a02      	ldr	r2, [sp, #8]
 8008ec4:	42a2      	cmp	r2, r4
 8008ec6:	d8da      	bhi.n	8008e7e <forward_lite_dense_if32of32wf32_lut8+0x1de>
 8008ec8:	b007      	add	sp, #28
 8008eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ece:	4632      	mov	r2, r6
 8008ed0:	e7c8      	b.n	8008e64 <forward_lite_dense_if32of32wf32_lut8+0x1c4>
 8008ed2:	4616      	mov	r6, r2
 8008ed4:	465a      	mov	r2, fp
 8008ed6:	e776      	b.n	8008dc6 <forward_lite_dense_if32of32wf32_lut8+0x126>
 8008ed8:	9b01      	ldr	r3, [sp, #4]
 8008eda:	1ae3      	subs	r3, r4, r3
 8008edc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008ede:	461a      	mov	r2, r3
 8008ee0:	ed92 7a00 	vldr	s14, [r2]
 8008ee4:	ecf1 7a01 	vldmia	r1!, {s15}
 8008ee8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008eec:	ece2 7a01 	vstmia	r2!, {s15}
 8008ef0:	42a2      	cmp	r2, r4
 8008ef2:	d1f5      	bne.n	8008ee0 <forward_lite_dense_if32of32wf32_lut8+0x240>
 8008ef4:	e7f2      	b.n	8008edc <forward_lite_dense_if32of32wf32_lut8+0x23c>
 8008ef6:	bf00      	nop
 8008ef8:	00000000 	.word	0x00000000

08008efc <st_int8_copy>:
 8008efc:	4288      	cmp	r0, r1
 8008efe:	d056      	beq.n	8008fae <st_int8_copy+0xb2>
 8008f00:	2a00      	cmp	r2, #0
 8008f02:	d054      	beq.n	8008fae <st_int8_copy+0xb2>
 8008f04:	4288      	cmp	r0, r1
 8008f06:	d353      	bcc.n	8008fb0 <st_int8_copy+0xb4>
 8008f08:	078b      	lsls	r3, r1, #30
 8008f0a:	d102      	bne.n	8008f12 <st_int8_copy+0x16>
 8008f0c:	e009      	b.n	8008f22 <st_int8_copy+0x26>
 8008f0e:	2a00      	cmp	r2, #0
 8008f10:	d05b      	beq.n	8008fca <st_int8_copy+0xce>
 8008f12:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8008f16:	f801 3b01 	strb.w	r3, [r1], #1
 8008f1a:	078b      	lsls	r3, r1, #30
 8008f1c:	f102 32ff 	add.w	r2, r2, #4294967295
 8008f20:	d1f5      	bne.n	8008f0e <st_int8_copy+0x12>
 8008f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f26:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8008f2a:	d068      	beq.n	8008ffe <st_int8_copy+0x102>
 8008f2c:	ea40 0301 	orr.w	r3, r0, r1
 8008f30:	075b      	lsls	r3, r3, #29
 8008f32:	d14b      	bne.n	8008fcc <st_int8_copy+0xd0>
 8008f34:	f1be 0f01 	cmp.w	lr, #1
 8008f38:	d048      	beq.n	8008fcc <st_int8_copy+0xd0>
 8008f3a:	f100 0310 	add.w	r3, r0, #16
 8008f3e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008f42:	f101 0c10 	add.w	ip, r1, #16
 8008f46:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8008f4a:	ed13 6b04 	vldr	d6, [r3, #-16]
 8008f4e:	ed13 7b02 	vldr	d7, [r3, #-8]
 8008f52:	3310      	adds	r3, #16
 8008f54:	4573      	cmp	r3, lr
 8008f56:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8008f5a:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8008f5e:	f10c 0c10 	add.w	ip, ip, #16
 8008f62:	d1f2      	bne.n	8008f4a <st_int8_copy+0x4e>
 8008f64:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8008f68:	4421      	add	r1, r4
 8008f6a:	4420      	add	r0, r4
 8008f6c:	f002 0203 	and.w	r2, r2, #3
 8008f70:	b16b      	cbz	r3, 8008f8e <st_int8_copy+0x92>
 8008f72:	6804      	ldr	r4, [r0, #0]
 8008f74:	600c      	str	r4, [r1, #0]
 8008f76:	1e5c      	subs	r4, r3, #1
 8008f78:	d005      	beq.n	8008f86 <st_int8_copy+0x8a>
 8008f7a:	6845      	ldr	r5, [r0, #4]
 8008f7c:	604d      	str	r5, [r1, #4]
 8008f7e:	2c01      	cmp	r4, #1
 8008f80:	bf1c      	itt	ne
 8008f82:	6884      	ldrne	r4, [r0, #8]
 8008f84:	608c      	strne	r4, [r1, #8]
 8008f86:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008f8a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008f8e:	b162      	cbz	r2, 8008faa <st_int8_copy+0xae>
 8008f90:	f990 3000 	ldrsb.w	r3, [r0]
 8008f94:	700b      	strb	r3, [r1, #0]
 8008f96:	3a01      	subs	r2, #1
 8008f98:	d007      	beq.n	8008faa <st_int8_copy+0xae>
 8008f9a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8008f9e:	704b      	strb	r3, [r1, #1]
 8008fa0:	2a01      	cmp	r2, #1
 8008fa2:	bf1c      	itt	ne
 8008fa4:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8008fa8:	708b      	strbne	r3, [r1, #2]
 8008faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fae:	4770      	bx	lr
 8008fb0:	1883      	adds	r3, r0, r2
 8008fb2:	428b      	cmp	r3, r1
 8008fb4:	d9a8      	bls.n	8008f08 <st_int8_copy+0xc>
 8008fb6:	4283      	cmp	r3, r0
 8008fb8:	440a      	add	r2, r1
 8008fba:	d9f8      	bls.n	8008fae <st_int8_copy+0xb2>
 8008fbc:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8008fc0:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8008fc4:	4283      	cmp	r3, r0
 8008fc6:	d1f9      	bne.n	8008fbc <st_int8_copy+0xc0>
 8008fc8:	4770      	bx	lr
 8008fca:	4770      	bx	lr
 8008fcc:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8008fd6:	4684      	mov	ip, r0
 8008fd8:	f8dc 7000 	ldr.w	r7, [ip]
 8008fdc:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8008fe0:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8008fe4:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8008fe8:	f8c3 800c 	str.w	r8, [r3, #12]
 8008fec:	601f      	str	r7, [r3, #0]
 8008fee:	605e      	str	r6, [r3, #4]
 8008ff0:	609d      	str	r5, [r3, #8]
 8008ff2:	3310      	adds	r3, #16
 8008ff4:	459e      	cmp	lr, r3
 8008ff6:	f10c 0c10 	add.w	ip, ip, #16
 8008ffa:	d1ed      	bne.n	8008fd8 <st_int8_copy+0xdc>
 8008ffc:	e7b2      	b.n	8008f64 <st_int8_copy+0x68>
 8008ffe:	0893      	lsrs	r3, r2, #2
 8009000:	f002 0203 	and.w	r2, r2, #3
 8009004:	e7b4      	b.n	8008f70 <st_int8_copy+0x74>
 8009006:	bf00      	nop

08009008 <ai_array_to_buffer_fmt>:
 8009008:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800900c:	2b02      	cmp	r3, #2
 800900e:	d053      	beq.n	80090b8 <ai_array_to_buffer_fmt+0xb0>
 8009010:	4a2c      	ldr	r2, [pc, #176]	@ (80090c4 <ai_array_to_buffer_fmt+0xbc>)
 8009012:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8009016:	4293      	cmp	r3, r2
 8009018:	d010      	beq.n	800903c <ai_array_to_buffer_fmt+0x34>
 800901a:	dc21      	bgt.n	8009060 <ai_array_to_buffer_fmt+0x58>
 800901c:	4a2a      	ldr	r2, [pc, #168]	@ (80090c8 <ai_array_to_buffer_fmt+0xc0>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d00c      	beq.n	800903c <ai_array_to_buffer_fmt+0x34>
 8009022:	dd0f      	ble.n	8009044 <ai_array_to_buffer_fmt+0x3c>
 8009024:	4a29      	ldr	r2, [pc, #164]	@ (80090cc <ai_array_to_buffer_fmt+0xc4>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d008      	beq.n	800903c <ai_array_to_buffer_fmt+0x34>
 800902a:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 800902e:	4293      	cmp	r3, r2
 8009030:	d004      	beq.n	800903c <ai_array_to_buffer_fmt+0x34>
 8009032:	4a27      	ldr	r2, [pc, #156]	@ (80090d0 <ai_array_to_buffer_fmt+0xc8>)
 8009034:	4293      	cmp	r3, r2
 8009036:	bf0c      	ite	eq
 8009038:	4613      	moveq	r3, r2
 800903a:	2340      	movne	r3, #64	@ 0x40
 800903c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8009040:	4318      	orrs	r0, r3
 8009042:	4770      	bx	lr
 8009044:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8009048:	4293      	cmp	r3, r2
 800904a:	d0f7      	beq.n	800903c <ai_array_to_buffer_fmt+0x34>
 800904c:	dd2a      	ble.n	80090a4 <ai_array_to_buffer_fmt+0x9c>
 800904e:	4a21      	ldr	r2, [pc, #132]	@ (80090d4 <ai_array_to_buffer_fmt+0xcc>)
 8009050:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8009054:	4293      	cmp	r3, r2
 8009056:	bf0c      	ite	eq
 8009058:	4613      	moveq	r3, r2
 800905a:	2340      	movne	r3, #64	@ 0x40
 800905c:	4318      	orrs	r0, r3
 800905e:	4770      	bx	lr
 8009060:	4a1d      	ldr	r2, [pc, #116]	@ (80090d8 <ai_array_to_buffer_fmt+0xd0>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d0ea      	beq.n	800903c <ai_array_to_buffer_fmt+0x34>
 8009066:	dd0f      	ble.n	8009088 <ai_array_to_buffer_fmt+0x80>
 8009068:	4a1c      	ldr	r2, [pc, #112]	@ (80090dc <ai_array_to_buffer_fmt+0xd4>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d0e6      	beq.n	800903c <ai_array_to_buffer_fmt+0x34>
 800906e:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 8009072:	4293      	cmp	r3, r2
 8009074:	d0e2      	beq.n	800903c <ai_array_to_buffer_fmt+0x34>
 8009076:	4a1a      	ldr	r2, [pc, #104]	@ (80090e0 <ai_array_to_buffer_fmt+0xd8>)
 8009078:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800907c:	4293      	cmp	r3, r2
 800907e:	bf0c      	ite	eq
 8009080:	4613      	moveq	r3, r2
 8009082:	2340      	movne	r3, #64	@ 0x40
 8009084:	4318      	orrs	r0, r3
 8009086:	4770      	bx	lr
 8009088:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800908c:	4293      	cmp	r3, r2
 800908e:	d0d5      	beq.n	800903c <ai_array_to_buffer_fmt+0x34>
 8009090:	3207      	adds	r2, #7
 8009092:	4293      	cmp	r3, r2
 8009094:	d0d2      	beq.n	800903c <ai_array_to_buffer_fmt+0x34>
 8009096:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 800909a:	4293      	cmp	r3, r2
 800909c:	bf0c      	ite	eq
 800909e:	4613      	moveq	r3, r2
 80090a0:	2340      	movne	r3, #64	@ 0x40
 80090a2:	e7cb      	b.n	800903c <ai_array_to_buffer_fmt+0x34>
 80090a4:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d0c7      	beq.n	800903c <ai_array_to_buffer_fmt+0x34>
 80090ac:	3280      	adds	r2, #128	@ 0x80
 80090ae:	4293      	cmp	r3, r2
 80090b0:	bf0c      	ite	eq
 80090b2:	4613      	moveq	r3, r2
 80090b4:	2340      	movne	r3, #64	@ 0x40
 80090b6:	e7c1      	b.n	800903c <ai_array_to_buffer_fmt+0x34>
 80090b8:	4b0a      	ldr	r3, [pc, #40]	@ (80090e4 <ai_array_to_buffer_fmt+0xdc>)
 80090ba:	4003      	ands	r3, r0
 80090bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80090c0:	e7bc      	b.n	800903c <ai_array_to_buffer_fmt+0x34>
 80090c2:	bf00      	nop
 80090c4:	00840040 	.word	0x00840040
 80090c8:	00040840 	.word	0x00040840
 80090cc:	00041040 	.word	0x00041040
 80090d0:	0004084f 	.word	0x0004084f
 80090d4:	00040447 	.word	0x00040447
 80090d8:	00840840 	.word	0x00840840
 80090dc:	00841040 	.word	0x00841040
 80090e0:	0084084f 	.word	0x0084084f
 80090e4:	00803fff 	.word	0x00803fff

080090e8 <ai_array_get_data_byte_size>:
 80090e8:	b169      	cbz	r1, 8009106 <ai_array_get_data_byte_size+0x1e>
 80090ea:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80090ee:	fb03 f101 	mul.w	r1, r3, r1
 80090f2:	1dcb      	adds	r3, r1, #7
 80090f4:	f023 0307 	bic.w	r3, r3, #7
 80090f8:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80090fc:	fa23 f000 	lsr.w	r0, r3, r0
 8009100:	3007      	adds	r0, #7
 8009102:	08c0      	lsrs	r0, r0, #3
 8009104:	4770      	bx	lr
 8009106:	4608      	mov	r0, r1
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop

0800910c <ai_version_get>:
 800910c:	0212      	lsls	r2, r2, #8
 800910e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009112:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8009116:	4770      	bx	lr

08009118 <get_tensor_byte_size>:
 8009118:	b410      	push	{r4}
 800911a:	6983      	ldr	r3, [r0, #24]
 800911c:	68c4      	ldr	r4, [r0, #12]
 800911e:	6941      	ldr	r1, [r0, #20]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68e0      	ldr	r0, [r4, #12]
 8009124:	4a07      	ldr	r2, [pc, #28]	@ (8009144 <get_tensor_byte_size+0x2c>)
 8009126:	68c9      	ldr	r1, [r1, #12]
 8009128:	f85d 4b04 	ldr.w	r4, [sp], #4
 800912c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8009130:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009134:	fb01 f000 	mul.w	r0, r1, r0
 8009138:	4293      	cmp	r3, r2
 800913a:	bf04      	itt	eq
 800913c:	3007      	addeq	r0, #7
 800913e:	08c0      	lsreq	r0, r0, #3
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	000400c0 	.word	0x000400c0

08009148 <malloc>:
 8009148:	4b02      	ldr	r3, [pc, #8]	@ (8009154 <malloc+0xc>)
 800914a:	4601      	mov	r1, r0
 800914c:	6818      	ldr	r0, [r3, #0]
 800914e:	f000 b825 	b.w	800919c <_malloc_r>
 8009152:	bf00      	nop
 8009154:	20000aa4 	.word	0x20000aa4

08009158 <sbrk_aligned>:
 8009158:	b570      	push	{r4, r5, r6, lr}
 800915a:	4e0f      	ldr	r6, [pc, #60]	@ (8009198 <sbrk_aligned+0x40>)
 800915c:	460c      	mov	r4, r1
 800915e:	6831      	ldr	r1, [r6, #0]
 8009160:	4605      	mov	r5, r0
 8009162:	b911      	cbnz	r1, 800916a <sbrk_aligned+0x12>
 8009164:	f000 ffaa 	bl	800a0bc <_sbrk_r>
 8009168:	6030      	str	r0, [r6, #0]
 800916a:	4621      	mov	r1, r4
 800916c:	4628      	mov	r0, r5
 800916e:	f000 ffa5 	bl	800a0bc <_sbrk_r>
 8009172:	1c43      	adds	r3, r0, #1
 8009174:	d103      	bne.n	800917e <sbrk_aligned+0x26>
 8009176:	f04f 34ff 	mov.w	r4, #4294967295
 800917a:	4620      	mov	r0, r4
 800917c:	bd70      	pop	{r4, r5, r6, pc}
 800917e:	1cc4      	adds	r4, r0, #3
 8009180:	f024 0403 	bic.w	r4, r4, #3
 8009184:	42a0      	cmp	r0, r4
 8009186:	d0f8      	beq.n	800917a <sbrk_aligned+0x22>
 8009188:	1a21      	subs	r1, r4, r0
 800918a:	4628      	mov	r0, r5
 800918c:	f000 ff96 	bl	800a0bc <_sbrk_r>
 8009190:	3001      	adds	r0, #1
 8009192:	d1f2      	bne.n	800917a <sbrk_aligned+0x22>
 8009194:	e7ef      	b.n	8009176 <sbrk_aligned+0x1e>
 8009196:	bf00      	nop
 8009198:	20001d1c 	.word	0x20001d1c

0800919c <_malloc_r>:
 800919c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091a0:	1ccd      	adds	r5, r1, #3
 80091a2:	f025 0503 	bic.w	r5, r5, #3
 80091a6:	3508      	adds	r5, #8
 80091a8:	2d0c      	cmp	r5, #12
 80091aa:	bf38      	it	cc
 80091ac:	250c      	movcc	r5, #12
 80091ae:	2d00      	cmp	r5, #0
 80091b0:	4606      	mov	r6, r0
 80091b2:	db01      	blt.n	80091b8 <_malloc_r+0x1c>
 80091b4:	42a9      	cmp	r1, r5
 80091b6:	d904      	bls.n	80091c2 <_malloc_r+0x26>
 80091b8:	230c      	movs	r3, #12
 80091ba:	6033      	str	r3, [r6, #0]
 80091bc:	2000      	movs	r0, #0
 80091be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009298 <_malloc_r+0xfc>
 80091c6:	f000 f869 	bl	800929c <__malloc_lock>
 80091ca:	f8d8 3000 	ldr.w	r3, [r8]
 80091ce:	461c      	mov	r4, r3
 80091d0:	bb44      	cbnz	r4, 8009224 <_malloc_r+0x88>
 80091d2:	4629      	mov	r1, r5
 80091d4:	4630      	mov	r0, r6
 80091d6:	f7ff ffbf 	bl	8009158 <sbrk_aligned>
 80091da:	1c43      	adds	r3, r0, #1
 80091dc:	4604      	mov	r4, r0
 80091de:	d158      	bne.n	8009292 <_malloc_r+0xf6>
 80091e0:	f8d8 4000 	ldr.w	r4, [r8]
 80091e4:	4627      	mov	r7, r4
 80091e6:	2f00      	cmp	r7, #0
 80091e8:	d143      	bne.n	8009272 <_malloc_r+0xd6>
 80091ea:	2c00      	cmp	r4, #0
 80091ec:	d04b      	beq.n	8009286 <_malloc_r+0xea>
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	4639      	mov	r1, r7
 80091f2:	4630      	mov	r0, r6
 80091f4:	eb04 0903 	add.w	r9, r4, r3
 80091f8:	f000 ff60 	bl	800a0bc <_sbrk_r>
 80091fc:	4581      	cmp	r9, r0
 80091fe:	d142      	bne.n	8009286 <_malloc_r+0xea>
 8009200:	6821      	ldr	r1, [r4, #0]
 8009202:	1a6d      	subs	r5, r5, r1
 8009204:	4629      	mov	r1, r5
 8009206:	4630      	mov	r0, r6
 8009208:	f7ff ffa6 	bl	8009158 <sbrk_aligned>
 800920c:	3001      	adds	r0, #1
 800920e:	d03a      	beq.n	8009286 <_malloc_r+0xea>
 8009210:	6823      	ldr	r3, [r4, #0]
 8009212:	442b      	add	r3, r5
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	f8d8 3000 	ldr.w	r3, [r8]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	bb62      	cbnz	r2, 8009278 <_malloc_r+0xdc>
 800921e:	f8c8 7000 	str.w	r7, [r8]
 8009222:	e00f      	b.n	8009244 <_malloc_r+0xa8>
 8009224:	6822      	ldr	r2, [r4, #0]
 8009226:	1b52      	subs	r2, r2, r5
 8009228:	d420      	bmi.n	800926c <_malloc_r+0xd0>
 800922a:	2a0b      	cmp	r2, #11
 800922c:	d917      	bls.n	800925e <_malloc_r+0xc2>
 800922e:	1961      	adds	r1, r4, r5
 8009230:	42a3      	cmp	r3, r4
 8009232:	6025      	str	r5, [r4, #0]
 8009234:	bf18      	it	ne
 8009236:	6059      	strne	r1, [r3, #4]
 8009238:	6863      	ldr	r3, [r4, #4]
 800923a:	bf08      	it	eq
 800923c:	f8c8 1000 	streq.w	r1, [r8]
 8009240:	5162      	str	r2, [r4, r5]
 8009242:	604b      	str	r3, [r1, #4]
 8009244:	4630      	mov	r0, r6
 8009246:	f000 f82f 	bl	80092a8 <__malloc_unlock>
 800924a:	f104 000b 	add.w	r0, r4, #11
 800924e:	1d23      	adds	r3, r4, #4
 8009250:	f020 0007 	bic.w	r0, r0, #7
 8009254:	1ac2      	subs	r2, r0, r3
 8009256:	bf1c      	itt	ne
 8009258:	1a1b      	subne	r3, r3, r0
 800925a:	50a3      	strne	r3, [r4, r2]
 800925c:	e7af      	b.n	80091be <_malloc_r+0x22>
 800925e:	6862      	ldr	r2, [r4, #4]
 8009260:	42a3      	cmp	r3, r4
 8009262:	bf0c      	ite	eq
 8009264:	f8c8 2000 	streq.w	r2, [r8]
 8009268:	605a      	strne	r2, [r3, #4]
 800926a:	e7eb      	b.n	8009244 <_malloc_r+0xa8>
 800926c:	4623      	mov	r3, r4
 800926e:	6864      	ldr	r4, [r4, #4]
 8009270:	e7ae      	b.n	80091d0 <_malloc_r+0x34>
 8009272:	463c      	mov	r4, r7
 8009274:	687f      	ldr	r7, [r7, #4]
 8009276:	e7b6      	b.n	80091e6 <_malloc_r+0x4a>
 8009278:	461a      	mov	r2, r3
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	42a3      	cmp	r3, r4
 800927e:	d1fb      	bne.n	8009278 <_malloc_r+0xdc>
 8009280:	2300      	movs	r3, #0
 8009282:	6053      	str	r3, [r2, #4]
 8009284:	e7de      	b.n	8009244 <_malloc_r+0xa8>
 8009286:	230c      	movs	r3, #12
 8009288:	6033      	str	r3, [r6, #0]
 800928a:	4630      	mov	r0, r6
 800928c:	f000 f80c 	bl	80092a8 <__malloc_unlock>
 8009290:	e794      	b.n	80091bc <_malloc_r+0x20>
 8009292:	6005      	str	r5, [r0, #0]
 8009294:	e7d6      	b.n	8009244 <_malloc_r+0xa8>
 8009296:	bf00      	nop
 8009298:	20001d20 	.word	0x20001d20

0800929c <__malloc_lock>:
 800929c:	4801      	ldr	r0, [pc, #4]	@ (80092a4 <__malloc_lock+0x8>)
 800929e:	f000 bf5a 	b.w	800a156 <__retarget_lock_acquire_recursive>
 80092a2:	bf00      	nop
 80092a4:	20001e64 	.word	0x20001e64

080092a8 <__malloc_unlock>:
 80092a8:	4801      	ldr	r0, [pc, #4]	@ (80092b0 <__malloc_unlock+0x8>)
 80092aa:	f000 bf55 	b.w	800a158 <__retarget_lock_release_recursive>
 80092ae:	bf00      	nop
 80092b0:	20001e64 	.word	0x20001e64

080092b4 <_realloc_r>:
 80092b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092b8:	4680      	mov	r8, r0
 80092ba:	4615      	mov	r5, r2
 80092bc:	460c      	mov	r4, r1
 80092be:	b921      	cbnz	r1, 80092ca <_realloc_r+0x16>
 80092c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092c4:	4611      	mov	r1, r2
 80092c6:	f7ff bf69 	b.w	800919c <_malloc_r>
 80092ca:	b92a      	cbnz	r2, 80092d8 <_realloc_r+0x24>
 80092cc:	f001 fda0 	bl	800ae10 <_free_r>
 80092d0:	2400      	movs	r4, #0
 80092d2:	4620      	mov	r0, r4
 80092d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092d8:	f002 f966 	bl	800b5a8 <_malloc_usable_size_r>
 80092dc:	4285      	cmp	r5, r0
 80092de:	4606      	mov	r6, r0
 80092e0:	d802      	bhi.n	80092e8 <_realloc_r+0x34>
 80092e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80092e6:	d8f4      	bhi.n	80092d2 <_realloc_r+0x1e>
 80092e8:	4629      	mov	r1, r5
 80092ea:	4640      	mov	r0, r8
 80092ec:	f7ff ff56 	bl	800919c <_malloc_r>
 80092f0:	4607      	mov	r7, r0
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d0ec      	beq.n	80092d0 <_realloc_r+0x1c>
 80092f6:	42b5      	cmp	r5, r6
 80092f8:	462a      	mov	r2, r5
 80092fa:	4621      	mov	r1, r4
 80092fc:	bf28      	it	cs
 80092fe:	4632      	movcs	r2, r6
 8009300:	f000 ff2b 	bl	800a15a <memcpy>
 8009304:	4621      	mov	r1, r4
 8009306:	4640      	mov	r0, r8
 8009308:	f001 fd82 	bl	800ae10 <_free_r>
 800930c:	463c      	mov	r4, r7
 800930e:	e7e0      	b.n	80092d2 <_realloc_r+0x1e>

08009310 <__cvt>:
 8009310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009314:	ec57 6b10 	vmov	r6, r7, d0
 8009318:	2f00      	cmp	r7, #0
 800931a:	460c      	mov	r4, r1
 800931c:	4619      	mov	r1, r3
 800931e:	463b      	mov	r3, r7
 8009320:	bfbb      	ittet	lt
 8009322:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009326:	461f      	movlt	r7, r3
 8009328:	2300      	movge	r3, #0
 800932a:	232d      	movlt	r3, #45	@ 0x2d
 800932c:	700b      	strb	r3, [r1, #0]
 800932e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009330:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009334:	4691      	mov	r9, r2
 8009336:	f023 0820 	bic.w	r8, r3, #32
 800933a:	bfbc      	itt	lt
 800933c:	4632      	movlt	r2, r6
 800933e:	4616      	movlt	r6, r2
 8009340:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009344:	d005      	beq.n	8009352 <__cvt+0x42>
 8009346:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800934a:	d100      	bne.n	800934e <__cvt+0x3e>
 800934c:	3401      	adds	r4, #1
 800934e:	2102      	movs	r1, #2
 8009350:	e000      	b.n	8009354 <__cvt+0x44>
 8009352:	2103      	movs	r1, #3
 8009354:	ab03      	add	r3, sp, #12
 8009356:	9301      	str	r3, [sp, #4]
 8009358:	ab02      	add	r3, sp, #8
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	ec47 6b10 	vmov	d0, r6, r7
 8009360:	4653      	mov	r3, sl
 8009362:	4622      	mov	r2, r4
 8009364:	f000 ff90 	bl	800a288 <_dtoa_r>
 8009368:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800936c:	4605      	mov	r5, r0
 800936e:	d119      	bne.n	80093a4 <__cvt+0x94>
 8009370:	f019 0f01 	tst.w	r9, #1
 8009374:	d00e      	beq.n	8009394 <__cvt+0x84>
 8009376:	eb00 0904 	add.w	r9, r0, r4
 800937a:	2200      	movs	r2, #0
 800937c:	2300      	movs	r3, #0
 800937e:	4630      	mov	r0, r6
 8009380:	4639      	mov	r1, r7
 8009382:	f7f7 fba1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009386:	b108      	cbz	r0, 800938c <__cvt+0x7c>
 8009388:	f8cd 900c 	str.w	r9, [sp, #12]
 800938c:	2230      	movs	r2, #48	@ 0x30
 800938e:	9b03      	ldr	r3, [sp, #12]
 8009390:	454b      	cmp	r3, r9
 8009392:	d31e      	bcc.n	80093d2 <__cvt+0xc2>
 8009394:	9b03      	ldr	r3, [sp, #12]
 8009396:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009398:	1b5b      	subs	r3, r3, r5
 800939a:	4628      	mov	r0, r5
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	b004      	add	sp, #16
 80093a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80093a8:	eb00 0904 	add.w	r9, r0, r4
 80093ac:	d1e5      	bne.n	800937a <__cvt+0x6a>
 80093ae:	7803      	ldrb	r3, [r0, #0]
 80093b0:	2b30      	cmp	r3, #48	@ 0x30
 80093b2:	d10a      	bne.n	80093ca <__cvt+0xba>
 80093b4:	2200      	movs	r2, #0
 80093b6:	2300      	movs	r3, #0
 80093b8:	4630      	mov	r0, r6
 80093ba:	4639      	mov	r1, r7
 80093bc:	f7f7 fb84 	bl	8000ac8 <__aeabi_dcmpeq>
 80093c0:	b918      	cbnz	r0, 80093ca <__cvt+0xba>
 80093c2:	f1c4 0401 	rsb	r4, r4, #1
 80093c6:	f8ca 4000 	str.w	r4, [sl]
 80093ca:	f8da 3000 	ldr.w	r3, [sl]
 80093ce:	4499      	add	r9, r3
 80093d0:	e7d3      	b.n	800937a <__cvt+0x6a>
 80093d2:	1c59      	adds	r1, r3, #1
 80093d4:	9103      	str	r1, [sp, #12]
 80093d6:	701a      	strb	r2, [r3, #0]
 80093d8:	e7d9      	b.n	800938e <__cvt+0x7e>

080093da <__exponent>:
 80093da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093dc:	2900      	cmp	r1, #0
 80093de:	bfba      	itte	lt
 80093e0:	4249      	neglt	r1, r1
 80093e2:	232d      	movlt	r3, #45	@ 0x2d
 80093e4:	232b      	movge	r3, #43	@ 0x2b
 80093e6:	2909      	cmp	r1, #9
 80093e8:	7002      	strb	r2, [r0, #0]
 80093ea:	7043      	strb	r3, [r0, #1]
 80093ec:	dd29      	ble.n	8009442 <__exponent+0x68>
 80093ee:	f10d 0307 	add.w	r3, sp, #7
 80093f2:	461d      	mov	r5, r3
 80093f4:	270a      	movs	r7, #10
 80093f6:	461a      	mov	r2, r3
 80093f8:	fbb1 f6f7 	udiv	r6, r1, r7
 80093fc:	fb07 1416 	mls	r4, r7, r6, r1
 8009400:	3430      	adds	r4, #48	@ 0x30
 8009402:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009406:	460c      	mov	r4, r1
 8009408:	2c63      	cmp	r4, #99	@ 0x63
 800940a:	f103 33ff 	add.w	r3, r3, #4294967295
 800940e:	4631      	mov	r1, r6
 8009410:	dcf1      	bgt.n	80093f6 <__exponent+0x1c>
 8009412:	3130      	adds	r1, #48	@ 0x30
 8009414:	1e94      	subs	r4, r2, #2
 8009416:	f803 1c01 	strb.w	r1, [r3, #-1]
 800941a:	1c41      	adds	r1, r0, #1
 800941c:	4623      	mov	r3, r4
 800941e:	42ab      	cmp	r3, r5
 8009420:	d30a      	bcc.n	8009438 <__exponent+0x5e>
 8009422:	f10d 0309 	add.w	r3, sp, #9
 8009426:	1a9b      	subs	r3, r3, r2
 8009428:	42ac      	cmp	r4, r5
 800942a:	bf88      	it	hi
 800942c:	2300      	movhi	r3, #0
 800942e:	3302      	adds	r3, #2
 8009430:	4403      	add	r3, r0
 8009432:	1a18      	subs	r0, r3, r0
 8009434:	b003      	add	sp, #12
 8009436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009438:	f813 6b01 	ldrb.w	r6, [r3], #1
 800943c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009440:	e7ed      	b.n	800941e <__exponent+0x44>
 8009442:	2330      	movs	r3, #48	@ 0x30
 8009444:	3130      	adds	r1, #48	@ 0x30
 8009446:	7083      	strb	r3, [r0, #2]
 8009448:	70c1      	strb	r1, [r0, #3]
 800944a:	1d03      	adds	r3, r0, #4
 800944c:	e7f1      	b.n	8009432 <__exponent+0x58>
	...

08009450 <_printf_float>:
 8009450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	b08d      	sub	sp, #52	@ 0x34
 8009456:	460c      	mov	r4, r1
 8009458:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800945c:	4616      	mov	r6, r2
 800945e:	461f      	mov	r7, r3
 8009460:	4605      	mov	r5, r0
 8009462:	f000 fdf3 	bl	800a04c <_localeconv_r>
 8009466:	6803      	ldr	r3, [r0, #0]
 8009468:	9304      	str	r3, [sp, #16]
 800946a:	4618      	mov	r0, r3
 800946c:	f7f6 ff00 	bl	8000270 <strlen>
 8009470:	2300      	movs	r3, #0
 8009472:	930a      	str	r3, [sp, #40]	@ 0x28
 8009474:	f8d8 3000 	ldr.w	r3, [r8]
 8009478:	9005      	str	r0, [sp, #20]
 800947a:	3307      	adds	r3, #7
 800947c:	f023 0307 	bic.w	r3, r3, #7
 8009480:	f103 0208 	add.w	r2, r3, #8
 8009484:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009488:	f8d4 b000 	ldr.w	fp, [r4]
 800948c:	f8c8 2000 	str.w	r2, [r8]
 8009490:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009494:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009498:	9307      	str	r3, [sp, #28]
 800949a:	f8cd 8018 	str.w	r8, [sp, #24]
 800949e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80094a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094a6:	4b9c      	ldr	r3, [pc, #624]	@ (8009718 <_printf_float+0x2c8>)
 80094a8:	f04f 32ff 	mov.w	r2, #4294967295
 80094ac:	f7f7 fb3e 	bl	8000b2c <__aeabi_dcmpun>
 80094b0:	bb70      	cbnz	r0, 8009510 <_printf_float+0xc0>
 80094b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094b6:	4b98      	ldr	r3, [pc, #608]	@ (8009718 <_printf_float+0x2c8>)
 80094b8:	f04f 32ff 	mov.w	r2, #4294967295
 80094bc:	f7f7 fb18 	bl	8000af0 <__aeabi_dcmple>
 80094c0:	bb30      	cbnz	r0, 8009510 <_printf_float+0xc0>
 80094c2:	2200      	movs	r2, #0
 80094c4:	2300      	movs	r3, #0
 80094c6:	4640      	mov	r0, r8
 80094c8:	4649      	mov	r1, r9
 80094ca:	f7f7 fb07 	bl	8000adc <__aeabi_dcmplt>
 80094ce:	b110      	cbz	r0, 80094d6 <_printf_float+0x86>
 80094d0:	232d      	movs	r3, #45	@ 0x2d
 80094d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094d6:	4a91      	ldr	r2, [pc, #580]	@ (800971c <_printf_float+0x2cc>)
 80094d8:	4b91      	ldr	r3, [pc, #580]	@ (8009720 <_printf_float+0x2d0>)
 80094da:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80094de:	bf94      	ite	ls
 80094e0:	4690      	movls	r8, r2
 80094e2:	4698      	movhi	r8, r3
 80094e4:	2303      	movs	r3, #3
 80094e6:	6123      	str	r3, [r4, #16]
 80094e8:	f02b 0304 	bic.w	r3, fp, #4
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	f04f 0900 	mov.w	r9, #0
 80094f2:	9700      	str	r7, [sp, #0]
 80094f4:	4633      	mov	r3, r6
 80094f6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80094f8:	4621      	mov	r1, r4
 80094fa:	4628      	mov	r0, r5
 80094fc:	f000 f9d2 	bl	80098a4 <_printf_common>
 8009500:	3001      	adds	r0, #1
 8009502:	f040 808d 	bne.w	8009620 <_printf_float+0x1d0>
 8009506:	f04f 30ff 	mov.w	r0, #4294967295
 800950a:	b00d      	add	sp, #52	@ 0x34
 800950c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009510:	4642      	mov	r2, r8
 8009512:	464b      	mov	r3, r9
 8009514:	4640      	mov	r0, r8
 8009516:	4649      	mov	r1, r9
 8009518:	f7f7 fb08 	bl	8000b2c <__aeabi_dcmpun>
 800951c:	b140      	cbz	r0, 8009530 <_printf_float+0xe0>
 800951e:	464b      	mov	r3, r9
 8009520:	2b00      	cmp	r3, #0
 8009522:	bfbc      	itt	lt
 8009524:	232d      	movlt	r3, #45	@ 0x2d
 8009526:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800952a:	4a7e      	ldr	r2, [pc, #504]	@ (8009724 <_printf_float+0x2d4>)
 800952c:	4b7e      	ldr	r3, [pc, #504]	@ (8009728 <_printf_float+0x2d8>)
 800952e:	e7d4      	b.n	80094da <_printf_float+0x8a>
 8009530:	6863      	ldr	r3, [r4, #4]
 8009532:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009536:	9206      	str	r2, [sp, #24]
 8009538:	1c5a      	adds	r2, r3, #1
 800953a:	d13b      	bne.n	80095b4 <_printf_float+0x164>
 800953c:	2306      	movs	r3, #6
 800953e:	6063      	str	r3, [r4, #4]
 8009540:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009544:	2300      	movs	r3, #0
 8009546:	6022      	str	r2, [r4, #0]
 8009548:	9303      	str	r3, [sp, #12]
 800954a:	ab0a      	add	r3, sp, #40	@ 0x28
 800954c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009550:	ab09      	add	r3, sp, #36	@ 0x24
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	6861      	ldr	r1, [r4, #4]
 8009556:	ec49 8b10 	vmov	d0, r8, r9
 800955a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800955e:	4628      	mov	r0, r5
 8009560:	f7ff fed6 	bl	8009310 <__cvt>
 8009564:	9b06      	ldr	r3, [sp, #24]
 8009566:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009568:	2b47      	cmp	r3, #71	@ 0x47
 800956a:	4680      	mov	r8, r0
 800956c:	d129      	bne.n	80095c2 <_printf_float+0x172>
 800956e:	1cc8      	adds	r0, r1, #3
 8009570:	db02      	blt.n	8009578 <_printf_float+0x128>
 8009572:	6863      	ldr	r3, [r4, #4]
 8009574:	4299      	cmp	r1, r3
 8009576:	dd41      	ble.n	80095fc <_printf_float+0x1ac>
 8009578:	f1aa 0a02 	sub.w	sl, sl, #2
 800957c:	fa5f fa8a 	uxtb.w	sl, sl
 8009580:	3901      	subs	r1, #1
 8009582:	4652      	mov	r2, sl
 8009584:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009588:	9109      	str	r1, [sp, #36]	@ 0x24
 800958a:	f7ff ff26 	bl	80093da <__exponent>
 800958e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009590:	1813      	adds	r3, r2, r0
 8009592:	2a01      	cmp	r2, #1
 8009594:	4681      	mov	r9, r0
 8009596:	6123      	str	r3, [r4, #16]
 8009598:	dc02      	bgt.n	80095a0 <_printf_float+0x150>
 800959a:	6822      	ldr	r2, [r4, #0]
 800959c:	07d2      	lsls	r2, r2, #31
 800959e:	d501      	bpl.n	80095a4 <_printf_float+0x154>
 80095a0:	3301      	adds	r3, #1
 80095a2:	6123      	str	r3, [r4, #16]
 80095a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0a2      	beq.n	80094f2 <_printf_float+0xa2>
 80095ac:	232d      	movs	r3, #45	@ 0x2d
 80095ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095b2:	e79e      	b.n	80094f2 <_printf_float+0xa2>
 80095b4:	9a06      	ldr	r2, [sp, #24]
 80095b6:	2a47      	cmp	r2, #71	@ 0x47
 80095b8:	d1c2      	bne.n	8009540 <_printf_float+0xf0>
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1c0      	bne.n	8009540 <_printf_float+0xf0>
 80095be:	2301      	movs	r3, #1
 80095c0:	e7bd      	b.n	800953e <_printf_float+0xee>
 80095c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80095c6:	d9db      	bls.n	8009580 <_printf_float+0x130>
 80095c8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80095cc:	d118      	bne.n	8009600 <_printf_float+0x1b0>
 80095ce:	2900      	cmp	r1, #0
 80095d0:	6863      	ldr	r3, [r4, #4]
 80095d2:	dd0b      	ble.n	80095ec <_printf_float+0x19c>
 80095d4:	6121      	str	r1, [r4, #16]
 80095d6:	b913      	cbnz	r3, 80095de <_printf_float+0x18e>
 80095d8:	6822      	ldr	r2, [r4, #0]
 80095da:	07d0      	lsls	r0, r2, #31
 80095dc:	d502      	bpl.n	80095e4 <_printf_float+0x194>
 80095de:	3301      	adds	r3, #1
 80095e0:	440b      	add	r3, r1
 80095e2:	6123      	str	r3, [r4, #16]
 80095e4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80095e6:	f04f 0900 	mov.w	r9, #0
 80095ea:	e7db      	b.n	80095a4 <_printf_float+0x154>
 80095ec:	b913      	cbnz	r3, 80095f4 <_printf_float+0x1a4>
 80095ee:	6822      	ldr	r2, [r4, #0]
 80095f0:	07d2      	lsls	r2, r2, #31
 80095f2:	d501      	bpl.n	80095f8 <_printf_float+0x1a8>
 80095f4:	3302      	adds	r3, #2
 80095f6:	e7f4      	b.n	80095e2 <_printf_float+0x192>
 80095f8:	2301      	movs	r3, #1
 80095fa:	e7f2      	b.n	80095e2 <_printf_float+0x192>
 80095fc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009600:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009602:	4299      	cmp	r1, r3
 8009604:	db05      	blt.n	8009612 <_printf_float+0x1c2>
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	6121      	str	r1, [r4, #16]
 800960a:	07d8      	lsls	r0, r3, #31
 800960c:	d5ea      	bpl.n	80095e4 <_printf_float+0x194>
 800960e:	1c4b      	adds	r3, r1, #1
 8009610:	e7e7      	b.n	80095e2 <_printf_float+0x192>
 8009612:	2900      	cmp	r1, #0
 8009614:	bfd4      	ite	le
 8009616:	f1c1 0202 	rsble	r2, r1, #2
 800961a:	2201      	movgt	r2, #1
 800961c:	4413      	add	r3, r2
 800961e:	e7e0      	b.n	80095e2 <_printf_float+0x192>
 8009620:	6823      	ldr	r3, [r4, #0]
 8009622:	055a      	lsls	r2, r3, #21
 8009624:	d407      	bmi.n	8009636 <_printf_float+0x1e6>
 8009626:	6923      	ldr	r3, [r4, #16]
 8009628:	4642      	mov	r2, r8
 800962a:	4631      	mov	r1, r6
 800962c:	4628      	mov	r0, r5
 800962e:	47b8      	blx	r7
 8009630:	3001      	adds	r0, #1
 8009632:	d12b      	bne.n	800968c <_printf_float+0x23c>
 8009634:	e767      	b.n	8009506 <_printf_float+0xb6>
 8009636:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800963a:	f240 80dd 	bls.w	80097f8 <_printf_float+0x3a8>
 800963e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009642:	2200      	movs	r2, #0
 8009644:	2300      	movs	r3, #0
 8009646:	f7f7 fa3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800964a:	2800      	cmp	r0, #0
 800964c:	d033      	beq.n	80096b6 <_printf_float+0x266>
 800964e:	4a37      	ldr	r2, [pc, #220]	@ (800972c <_printf_float+0x2dc>)
 8009650:	2301      	movs	r3, #1
 8009652:	4631      	mov	r1, r6
 8009654:	4628      	mov	r0, r5
 8009656:	47b8      	blx	r7
 8009658:	3001      	adds	r0, #1
 800965a:	f43f af54 	beq.w	8009506 <_printf_float+0xb6>
 800965e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009662:	4543      	cmp	r3, r8
 8009664:	db02      	blt.n	800966c <_printf_float+0x21c>
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	07d8      	lsls	r0, r3, #31
 800966a:	d50f      	bpl.n	800968c <_printf_float+0x23c>
 800966c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009670:	4631      	mov	r1, r6
 8009672:	4628      	mov	r0, r5
 8009674:	47b8      	blx	r7
 8009676:	3001      	adds	r0, #1
 8009678:	f43f af45 	beq.w	8009506 <_printf_float+0xb6>
 800967c:	f04f 0900 	mov.w	r9, #0
 8009680:	f108 38ff 	add.w	r8, r8, #4294967295
 8009684:	f104 0a1a 	add.w	sl, r4, #26
 8009688:	45c8      	cmp	r8, r9
 800968a:	dc09      	bgt.n	80096a0 <_printf_float+0x250>
 800968c:	6823      	ldr	r3, [r4, #0]
 800968e:	079b      	lsls	r3, r3, #30
 8009690:	f100 8103 	bmi.w	800989a <_printf_float+0x44a>
 8009694:	68e0      	ldr	r0, [r4, #12]
 8009696:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009698:	4298      	cmp	r0, r3
 800969a:	bfb8      	it	lt
 800969c:	4618      	movlt	r0, r3
 800969e:	e734      	b.n	800950a <_printf_float+0xba>
 80096a0:	2301      	movs	r3, #1
 80096a2:	4652      	mov	r2, sl
 80096a4:	4631      	mov	r1, r6
 80096a6:	4628      	mov	r0, r5
 80096a8:	47b8      	blx	r7
 80096aa:	3001      	adds	r0, #1
 80096ac:	f43f af2b 	beq.w	8009506 <_printf_float+0xb6>
 80096b0:	f109 0901 	add.w	r9, r9, #1
 80096b4:	e7e8      	b.n	8009688 <_printf_float+0x238>
 80096b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	dc39      	bgt.n	8009730 <_printf_float+0x2e0>
 80096bc:	4a1b      	ldr	r2, [pc, #108]	@ (800972c <_printf_float+0x2dc>)
 80096be:	2301      	movs	r3, #1
 80096c0:	4631      	mov	r1, r6
 80096c2:	4628      	mov	r0, r5
 80096c4:	47b8      	blx	r7
 80096c6:	3001      	adds	r0, #1
 80096c8:	f43f af1d 	beq.w	8009506 <_printf_float+0xb6>
 80096cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80096d0:	ea59 0303 	orrs.w	r3, r9, r3
 80096d4:	d102      	bne.n	80096dc <_printf_float+0x28c>
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	07d9      	lsls	r1, r3, #31
 80096da:	d5d7      	bpl.n	800968c <_printf_float+0x23c>
 80096dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096e0:	4631      	mov	r1, r6
 80096e2:	4628      	mov	r0, r5
 80096e4:	47b8      	blx	r7
 80096e6:	3001      	adds	r0, #1
 80096e8:	f43f af0d 	beq.w	8009506 <_printf_float+0xb6>
 80096ec:	f04f 0a00 	mov.w	sl, #0
 80096f0:	f104 0b1a 	add.w	fp, r4, #26
 80096f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096f6:	425b      	negs	r3, r3
 80096f8:	4553      	cmp	r3, sl
 80096fa:	dc01      	bgt.n	8009700 <_printf_float+0x2b0>
 80096fc:	464b      	mov	r3, r9
 80096fe:	e793      	b.n	8009628 <_printf_float+0x1d8>
 8009700:	2301      	movs	r3, #1
 8009702:	465a      	mov	r2, fp
 8009704:	4631      	mov	r1, r6
 8009706:	4628      	mov	r0, r5
 8009708:	47b8      	blx	r7
 800970a:	3001      	adds	r0, #1
 800970c:	f43f aefb 	beq.w	8009506 <_printf_float+0xb6>
 8009710:	f10a 0a01 	add.w	sl, sl, #1
 8009714:	e7ee      	b.n	80096f4 <_printf_float+0x2a4>
 8009716:	bf00      	nop
 8009718:	7fefffff 	.word	0x7fefffff
 800971c:	08018050 	.word	0x08018050
 8009720:	08018054 	.word	0x08018054
 8009724:	08018058 	.word	0x08018058
 8009728:	0801805c 	.word	0x0801805c
 800972c:	08018060 	.word	0x08018060
 8009730:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009732:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009736:	4553      	cmp	r3, sl
 8009738:	bfa8      	it	ge
 800973a:	4653      	movge	r3, sl
 800973c:	2b00      	cmp	r3, #0
 800973e:	4699      	mov	r9, r3
 8009740:	dc36      	bgt.n	80097b0 <_printf_float+0x360>
 8009742:	f04f 0b00 	mov.w	fp, #0
 8009746:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800974a:	f104 021a 	add.w	r2, r4, #26
 800974e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009750:	9306      	str	r3, [sp, #24]
 8009752:	eba3 0309 	sub.w	r3, r3, r9
 8009756:	455b      	cmp	r3, fp
 8009758:	dc31      	bgt.n	80097be <_printf_float+0x36e>
 800975a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800975c:	459a      	cmp	sl, r3
 800975e:	dc3a      	bgt.n	80097d6 <_printf_float+0x386>
 8009760:	6823      	ldr	r3, [r4, #0]
 8009762:	07da      	lsls	r2, r3, #31
 8009764:	d437      	bmi.n	80097d6 <_printf_float+0x386>
 8009766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009768:	ebaa 0903 	sub.w	r9, sl, r3
 800976c:	9b06      	ldr	r3, [sp, #24]
 800976e:	ebaa 0303 	sub.w	r3, sl, r3
 8009772:	4599      	cmp	r9, r3
 8009774:	bfa8      	it	ge
 8009776:	4699      	movge	r9, r3
 8009778:	f1b9 0f00 	cmp.w	r9, #0
 800977c:	dc33      	bgt.n	80097e6 <_printf_float+0x396>
 800977e:	f04f 0800 	mov.w	r8, #0
 8009782:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009786:	f104 0b1a 	add.w	fp, r4, #26
 800978a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800978c:	ebaa 0303 	sub.w	r3, sl, r3
 8009790:	eba3 0309 	sub.w	r3, r3, r9
 8009794:	4543      	cmp	r3, r8
 8009796:	f77f af79 	ble.w	800968c <_printf_float+0x23c>
 800979a:	2301      	movs	r3, #1
 800979c:	465a      	mov	r2, fp
 800979e:	4631      	mov	r1, r6
 80097a0:	4628      	mov	r0, r5
 80097a2:	47b8      	blx	r7
 80097a4:	3001      	adds	r0, #1
 80097a6:	f43f aeae 	beq.w	8009506 <_printf_float+0xb6>
 80097aa:	f108 0801 	add.w	r8, r8, #1
 80097ae:	e7ec      	b.n	800978a <_printf_float+0x33a>
 80097b0:	4642      	mov	r2, r8
 80097b2:	4631      	mov	r1, r6
 80097b4:	4628      	mov	r0, r5
 80097b6:	47b8      	blx	r7
 80097b8:	3001      	adds	r0, #1
 80097ba:	d1c2      	bne.n	8009742 <_printf_float+0x2f2>
 80097bc:	e6a3      	b.n	8009506 <_printf_float+0xb6>
 80097be:	2301      	movs	r3, #1
 80097c0:	4631      	mov	r1, r6
 80097c2:	4628      	mov	r0, r5
 80097c4:	9206      	str	r2, [sp, #24]
 80097c6:	47b8      	blx	r7
 80097c8:	3001      	adds	r0, #1
 80097ca:	f43f ae9c 	beq.w	8009506 <_printf_float+0xb6>
 80097ce:	9a06      	ldr	r2, [sp, #24]
 80097d0:	f10b 0b01 	add.w	fp, fp, #1
 80097d4:	e7bb      	b.n	800974e <_printf_float+0x2fe>
 80097d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097da:	4631      	mov	r1, r6
 80097dc:	4628      	mov	r0, r5
 80097de:	47b8      	blx	r7
 80097e0:	3001      	adds	r0, #1
 80097e2:	d1c0      	bne.n	8009766 <_printf_float+0x316>
 80097e4:	e68f      	b.n	8009506 <_printf_float+0xb6>
 80097e6:	9a06      	ldr	r2, [sp, #24]
 80097e8:	464b      	mov	r3, r9
 80097ea:	4442      	add	r2, r8
 80097ec:	4631      	mov	r1, r6
 80097ee:	4628      	mov	r0, r5
 80097f0:	47b8      	blx	r7
 80097f2:	3001      	adds	r0, #1
 80097f4:	d1c3      	bne.n	800977e <_printf_float+0x32e>
 80097f6:	e686      	b.n	8009506 <_printf_float+0xb6>
 80097f8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80097fc:	f1ba 0f01 	cmp.w	sl, #1
 8009800:	dc01      	bgt.n	8009806 <_printf_float+0x3b6>
 8009802:	07db      	lsls	r3, r3, #31
 8009804:	d536      	bpl.n	8009874 <_printf_float+0x424>
 8009806:	2301      	movs	r3, #1
 8009808:	4642      	mov	r2, r8
 800980a:	4631      	mov	r1, r6
 800980c:	4628      	mov	r0, r5
 800980e:	47b8      	blx	r7
 8009810:	3001      	adds	r0, #1
 8009812:	f43f ae78 	beq.w	8009506 <_printf_float+0xb6>
 8009816:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800981a:	4631      	mov	r1, r6
 800981c:	4628      	mov	r0, r5
 800981e:	47b8      	blx	r7
 8009820:	3001      	adds	r0, #1
 8009822:	f43f ae70 	beq.w	8009506 <_printf_float+0xb6>
 8009826:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800982a:	2200      	movs	r2, #0
 800982c:	2300      	movs	r3, #0
 800982e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009832:	f7f7 f949 	bl	8000ac8 <__aeabi_dcmpeq>
 8009836:	b9c0      	cbnz	r0, 800986a <_printf_float+0x41a>
 8009838:	4653      	mov	r3, sl
 800983a:	f108 0201 	add.w	r2, r8, #1
 800983e:	4631      	mov	r1, r6
 8009840:	4628      	mov	r0, r5
 8009842:	47b8      	blx	r7
 8009844:	3001      	adds	r0, #1
 8009846:	d10c      	bne.n	8009862 <_printf_float+0x412>
 8009848:	e65d      	b.n	8009506 <_printf_float+0xb6>
 800984a:	2301      	movs	r3, #1
 800984c:	465a      	mov	r2, fp
 800984e:	4631      	mov	r1, r6
 8009850:	4628      	mov	r0, r5
 8009852:	47b8      	blx	r7
 8009854:	3001      	adds	r0, #1
 8009856:	f43f ae56 	beq.w	8009506 <_printf_float+0xb6>
 800985a:	f108 0801 	add.w	r8, r8, #1
 800985e:	45d0      	cmp	r8, sl
 8009860:	dbf3      	blt.n	800984a <_printf_float+0x3fa>
 8009862:	464b      	mov	r3, r9
 8009864:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009868:	e6df      	b.n	800962a <_printf_float+0x1da>
 800986a:	f04f 0800 	mov.w	r8, #0
 800986e:	f104 0b1a 	add.w	fp, r4, #26
 8009872:	e7f4      	b.n	800985e <_printf_float+0x40e>
 8009874:	2301      	movs	r3, #1
 8009876:	4642      	mov	r2, r8
 8009878:	e7e1      	b.n	800983e <_printf_float+0x3ee>
 800987a:	2301      	movs	r3, #1
 800987c:	464a      	mov	r2, r9
 800987e:	4631      	mov	r1, r6
 8009880:	4628      	mov	r0, r5
 8009882:	47b8      	blx	r7
 8009884:	3001      	adds	r0, #1
 8009886:	f43f ae3e 	beq.w	8009506 <_printf_float+0xb6>
 800988a:	f108 0801 	add.w	r8, r8, #1
 800988e:	68e3      	ldr	r3, [r4, #12]
 8009890:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009892:	1a5b      	subs	r3, r3, r1
 8009894:	4543      	cmp	r3, r8
 8009896:	dcf0      	bgt.n	800987a <_printf_float+0x42a>
 8009898:	e6fc      	b.n	8009694 <_printf_float+0x244>
 800989a:	f04f 0800 	mov.w	r8, #0
 800989e:	f104 0919 	add.w	r9, r4, #25
 80098a2:	e7f4      	b.n	800988e <_printf_float+0x43e>

080098a4 <_printf_common>:
 80098a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098a8:	4616      	mov	r6, r2
 80098aa:	4698      	mov	r8, r3
 80098ac:	688a      	ldr	r2, [r1, #8]
 80098ae:	690b      	ldr	r3, [r1, #16]
 80098b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80098b4:	4293      	cmp	r3, r2
 80098b6:	bfb8      	it	lt
 80098b8:	4613      	movlt	r3, r2
 80098ba:	6033      	str	r3, [r6, #0]
 80098bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80098c0:	4607      	mov	r7, r0
 80098c2:	460c      	mov	r4, r1
 80098c4:	b10a      	cbz	r2, 80098ca <_printf_common+0x26>
 80098c6:	3301      	adds	r3, #1
 80098c8:	6033      	str	r3, [r6, #0]
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	0699      	lsls	r1, r3, #26
 80098ce:	bf42      	ittt	mi
 80098d0:	6833      	ldrmi	r3, [r6, #0]
 80098d2:	3302      	addmi	r3, #2
 80098d4:	6033      	strmi	r3, [r6, #0]
 80098d6:	6825      	ldr	r5, [r4, #0]
 80098d8:	f015 0506 	ands.w	r5, r5, #6
 80098dc:	d106      	bne.n	80098ec <_printf_common+0x48>
 80098de:	f104 0a19 	add.w	sl, r4, #25
 80098e2:	68e3      	ldr	r3, [r4, #12]
 80098e4:	6832      	ldr	r2, [r6, #0]
 80098e6:	1a9b      	subs	r3, r3, r2
 80098e8:	42ab      	cmp	r3, r5
 80098ea:	dc26      	bgt.n	800993a <_printf_common+0x96>
 80098ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098f0:	6822      	ldr	r2, [r4, #0]
 80098f2:	3b00      	subs	r3, #0
 80098f4:	bf18      	it	ne
 80098f6:	2301      	movne	r3, #1
 80098f8:	0692      	lsls	r2, r2, #26
 80098fa:	d42b      	bmi.n	8009954 <_printf_common+0xb0>
 80098fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009900:	4641      	mov	r1, r8
 8009902:	4638      	mov	r0, r7
 8009904:	47c8      	blx	r9
 8009906:	3001      	adds	r0, #1
 8009908:	d01e      	beq.n	8009948 <_printf_common+0xa4>
 800990a:	6823      	ldr	r3, [r4, #0]
 800990c:	6922      	ldr	r2, [r4, #16]
 800990e:	f003 0306 	and.w	r3, r3, #6
 8009912:	2b04      	cmp	r3, #4
 8009914:	bf02      	ittt	eq
 8009916:	68e5      	ldreq	r5, [r4, #12]
 8009918:	6833      	ldreq	r3, [r6, #0]
 800991a:	1aed      	subeq	r5, r5, r3
 800991c:	68a3      	ldr	r3, [r4, #8]
 800991e:	bf0c      	ite	eq
 8009920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009924:	2500      	movne	r5, #0
 8009926:	4293      	cmp	r3, r2
 8009928:	bfc4      	itt	gt
 800992a:	1a9b      	subgt	r3, r3, r2
 800992c:	18ed      	addgt	r5, r5, r3
 800992e:	2600      	movs	r6, #0
 8009930:	341a      	adds	r4, #26
 8009932:	42b5      	cmp	r5, r6
 8009934:	d11a      	bne.n	800996c <_printf_common+0xc8>
 8009936:	2000      	movs	r0, #0
 8009938:	e008      	b.n	800994c <_printf_common+0xa8>
 800993a:	2301      	movs	r3, #1
 800993c:	4652      	mov	r2, sl
 800993e:	4641      	mov	r1, r8
 8009940:	4638      	mov	r0, r7
 8009942:	47c8      	blx	r9
 8009944:	3001      	adds	r0, #1
 8009946:	d103      	bne.n	8009950 <_printf_common+0xac>
 8009948:	f04f 30ff 	mov.w	r0, #4294967295
 800994c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009950:	3501      	adds	r5, #1
 8009952:	e7c6      	b.n	80098e2 <_printf_common+0x3e>
 8009954:	18e1      	adds	r1, r4, r3
 8009956:	1c5a      	adds	r2, r3, #1
 8009958:	2030      	movs	r0, #48	@ 0x30
 800995a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800995e:	4422      	add	r2, r4
 8009960:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009964:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009968:	3302      	adds	r3, #2
 800996a:	e7c7      	b.n	80098fc <_printf_common+0x58>
 800996c:	2301      	movs	r3, #1
 800996e:	4622      	mov	r2, r4
 8009970:	4641      	mov	r1, r8
 8009972:	4638      	mov	r0, r7
 8009974:	47c8      	blx	r9
 8009976:	3001      	adds	r0, #1
 8009978:	d0e6      	beq.n	8009948 <_printf_common+0xa4>
 800997a:	3601      	adds	r6, #1
 800997c:	e7d9      	b.n	8009932 <_printf_common+0x8e>
	...

08009980 <_printf_i>:
 8009980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009984:	7e0f      	ldrb	r7, [r1, #24]
 8009986:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009988:	2f78      	cmp	r7, #120	@ 0x78
 800998a:	4691      	mov	r9, r2
 800998c:	4680      	mov	r8, r0
 800998e:	460c      	mov	r4, r1
 8009990:	469a      	mov	sl, r3
 8009992:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009996:	d807      	bhi.n	80099a8 <_printf_i+0x28>
 8009998:	2f62      	cmp	r7, #98	@ 0x62
 800999a:	d80a      	bhi.n	80099b2 <_printf_i+0x32>
 800999c:	2f00      	cmp	r7, #0
 800999e:	f000 80d2 	beq.w	8009b46 <_printf_i+0x1c6>
 80099a2:	2f58      	cmp	r7, #88	@ 0x58
 80099a4:	f000 80b9 	beq.w	8009b1a <_printf_i+0x19a>
 80099a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80099b0:	e03a      	b.n	8009a28 <_printf_i+0xa8>
 80099b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80099b6:	2b15      	cmp	r3, #21
 80099b8:	d8f6      	bhi.n	80099a8 <_printf_i+0x28>
 80099ba:	a101      	add	r1, pc, #4	@ (adr r1, 80099c0 <_printf_i+0x40>)
 80099bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099c0:	08009a19 	.word	0x08009a19
 80099c4:	08009a2d 	.word	0x08009a2d
 80099c8:	080099a9 	.word	0x080099a9
 80099cc:	080099a9 	.word	0x080099a9
 80099d0:	080099a9 	.word	0x080099a9
 80099d4:	080099a9 	.word	0x080099a9
 80099d8:	08009a2d 	.word	0x08009a2d
 80099dc:	080099a9 	.word	0x080099a9
 80099e0:	080099a9 	.word	0x080099a9
 80099e4:	080099a9 	.word	0x080099a9
 80099e8:	080099a9 	.word	0x080099a9
 80099ec:	08009b2d 	.word	0x08009b2d
 80099f0:	08009a57 	.word	0x08009a57
 80099f4:	08009ae7 	.word	0x08009ae7
 80099f8:	080099a9 	.word	0x080099a9
 80099fc:	080099a9 	.word	0x080099a9
 8009a00:	08009b4f 	.word	0x08009b4f
 8009a04:	080099a9 	.word	0x080099a9
 8009a08:	08009a57 	.word	0x08009a57
 8009a0c:	080099a9 	.word	0x080099a9
 8009a10:	080099a9 	.word	0x080099a9
 8009a14:	08009aef 	.word	0x08009aef
 8009a18:	6833      	ldr	r3, [r6, #0]
 8009a1a:	1d1a      	adds	r2, r3, #4
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	6032      	str	r2, [r6, #0]
 8009a20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e09d      	b.n	8009b68 <_printf_i+0x1e8>
 8009a2c:	6833      	ldr	r3, [r6, #0]
 8009a2e:	6820      	ldr	r0, [r4, #0]
 8009a30:	1d19      	adds	r1, r3, #4
 8009a32:	6031      	str	r1, [r6, #0]
 8009a34:	0606      	lsls	r6, r0, #24
 8009a36:	d501      	bpl.n	8009a3c <_printf_i+0xbc>
 8009a38:	681d      	ldr	r5, [r3, #0]
 8009a3a:	e003      	b.n	8009a44 <_printf_i+0xc4>
 8009a3c:	0645      	lsls	r5, r0, #25
 8009a3e:	d5fb      	bpl.n	8009a38 <_printf_i+0xb8>
 8009a40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a44:	2d00      	cmp	r5, #0
 8009a46:	da03      	bge.n	8009a50 <_printf_i+0xd0>
 8009a48:	232d      	movs	r3, #45	@ 0x2d
 8009a4a:	426d      	negs	r5, r5
 8009a4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a50:	4859      	ldr	r0, [pc, #356]	@ (8009bb8 <_printf_i+0x238>)
 8009a52:	230a      	movs	r3, #10
 8009a54:	e011      	b.n	8009a7a <_printf_i+0xfa>
 8009a56:	6821      	ldr	r1, [r4, #0]
 8009a58:	6833      	ldr	r3, [r6, #0]
 8009a5a:	0608      	lsls	r0, r1, #24
 8009a5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a60:	d402      	bmi.n	8009a68 <_printf_i+0xe8>
 8009a62:	0649      	lsls	r1, r1, #25
 8009a64:	bf48      	it	mi
 8009a66:	b2ad      	uxthmi	r5, r5
 8009a68:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a6a:	4853      	ldr	r0, [pc, #332]	@ (8009bb8 <_printf_i+0x238>)
 8009a6c:	6033      	str	r3, [r6, #0]
 8009a6e:	bf14      	ite	ne
 8009a70:	230a      	movne	r3, #10
 8009a72:	2308      	moveq	r3, #8
 8009a74:	2100      	movs	r1, #0
 8009a76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a7a:	6866      	ldr	r6, [r4, #4]
 8009a7c:	60a6      	str	r6, [r4, #8]
 8009a7e:	2e00      	cmp	r6, #0
 8009a80:	bfa2      	ittt	ge
 8009a82:	6821      	ldrge	r1, [r4, #0]
 8009a84:	f021 0104 	bicge.w	r1, r1, #4
 8009a88:	6021      	strge	r1, [r4, #0]
 8009a8a:	b90d      	cbnz	r5, 8009a90 <_printf_i+0x110>
 8009a8c:	2e00      	cmp	r6, #0
 8009a8e:	d04b      	beq.n	8009b28 <_printf_i+0x1a8>
 8009a90:	4616      	mov	r6, r2
 8009a92:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a96:	fb03 5711 	mls	r7, r3, r1, r5
 8009a9a:	5dc7      	ldrb	r7, [r0, r7]
 8009a9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009aa0:	462f      	mov	r7, r5
 8009aa2:	42bb      	cmp	r3, r7
 8009aa4:	460d      	mov	r5, r1
 8009aa6:	d9f4      	bls.n	8009a92 <_printf_i+0x112>
 8009aa8:	2b08      	cmp	r3, #8
 8009aaa:	d10b      	bne.n	8009ac4 <_printf_i+0x144>
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	07df      	lsls	r7, r3, #31
 8009ab0:	d508      	bpl.n	8009ac4 <_printf_i+0x144>
 8009ab2:	6923      	ldr	r3, [r4, #16]
 8009ab4:	6861      	ldr	r1, [r4, #4]
 8009ab6:	4299      	cmp	r1, r3
 8009ab8:	bfde      	ittt	le
 8009aba:	2330      	movle	r3, #48	@ 0x30
 8009abc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ac0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ac4:	1b92      	subs	r2, r2, r6
 8009ac6:	6122      	str	r2, [r4, #16]
 8009ac8:	f8cd a000 	str.w	sl, [sp]
 8009acc:	464b      	mov	r3, r9
 8009ace:	aa03      	add	r2, sp, #12
 8009ad0:	4621      	mov	r1, r4
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	f7ff fee6 	bl	80098a4 <_printf_common>
 8009ad8:	3001      	adds	r0, #1
 8009ada:	d14a      	bne.n	8009b72 <_printf_i+0x1f2>
 8009adc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae0:	b004      	add	sp, #16
 8009ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	f043 0320 	orr.w	r3, r3, #32
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	4833      	ldr	r0, [pc, #204]	@ (8009bbc <_printf_i+0x23c>)
 8009af0:	2778      	movs	r7, #120	@ 0x78
 8009af2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009af6:	6823      	ldr	r3, [r4, #0]
 8009af8:	6831      	ldr	r1, [r6, #0]
 8009afa:	061f      	lsls	r7, r3, #24
 8009afc:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b00:	d402      	bmi.n	8009b08 <_printf_i+0x188>
 8009b02:	065f      	lsls	r7, r3, #25
 8009b04:	bf48      	it	mi
 8009b06:	b2ad      	uxthmi	r5, r5
 8009b08:	6031      	str	r1, [r6, #0]
 8009b0a:	07d9      	lsls	r1, r3, #31
 8009b0c:	bf44      	itt	mi
 8009b0e:	f043 0320 	orrmi.w	r3, r3, #32
 8009b12:	6023      	strmi	r3, [r4, #0]
 8009b14:	b11d      	cbz	r5, 8009b1e <_printf_i+0x19e>
 8009b16:	2310      	movs	r3, #16
 8009b18:	e7ac      	b.n	8009a74 <_printf_i+0xf4>
 8009b1a:	4827      	ldr	r0, [pc, #156]	@ (8009bb8 <_printf_i+0x238>)
 8009b1c:	e7e9      	b.n	8009af2 <_printf_i+0x172>
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	f023 0320 	bic.w	r3, r3, #32
 8009b24:	6023      	str	r3, [r4, #0]
 8009b26:	e7f6      	b.n	8009b16 <_printf_i+0x196>
 8009b28:	4616      	mov	r6, r2
 8009b2a:	e7bd      	b.n	8009aa8 <_printf_i+0x128>
 8009b2c:	6833      	ldr	r3, [r6, #0]
 8009b2e:	6825      	ldr	r5, [r4, #0]
 8009b30:	6961      	ldr	r1, [r4, #20]
 8009b32:	1d18      	adds	r0, r3, #4
 8009b34:	6030      	str	r0, [r6, #0]
 8009b36:	062e      	lsls	r6, r5, #24
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	d501      	bpl.n	8009b40 <_printf_i+0x1c0>
 8009b3c:	6019      	str	r1, [r3, #0]
 8009b3e:	e002      	b.n	8009b46 <_printf_i+0x1c6>
 8009b40:	0668      	lsls	r0, r5, #25
 8009b42:	d5fb      	bpl.n	8009b3c <_printf_i+0x1bc>
 8009b44:	8019      	strh	r1, [r3, #0]
 8009b46:	2300      	movs	r3, #0
 8009b48:	6123      	str	r3, [r4, #16]
 8009b4a:	4616      	mov	r6, r2
 8009b4c:	e7bc      	b.n	8009ac8 <_printf_i+0x148>
 8009b4e:	6833      	ldr	r3, [r6, #0]
 8009b50:	1d1a      	adds	r2, r3, #4
 8009b52:	6032      	str	r2, [r6, #0]
 8009b54:	681e      	ldr	r6, [r3, #0]
 8009b56:	6862      	ldr	r2, [r4, #4]
 8009b58:	2100      	movs	r1, #0
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	f7f6 fb38 	bl	80001d0 <memchr>
 8009b60:	b108      	cbz	r0, 8009b66 <_printf_i+0x1e6>
 8009b62:	1b80      	subs	r0, r0, r6
 8009b64:	6060      	str	r0, [r4, #4]
 8009b66:	6863      	ldr	r3, [r4, #4]
 8009b68:	6123      	str	r3, [r4, #16]
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b70:	e7aa      	b.n	8009ac8 <_printf_i+0x148>
 8009b72:	6923      	ldr	r3, [r4, #16]
 8009b74:	4632      	mov	r2, r6
 8009b76:	4649      	mov	r1, r9
 8009b78:	4640      	mov	r0, r8
 8009b7a:	47d0      	blx	sl
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	d0ad      	beq.n	8009adc <_printf_i+0x15c>
 8009b80:	6823      	ldr	r3, [r4, #0]
 8009b82:	079b      	lsls	r3, r3, #30
 8009b84:	d413      	bmi.n	8009bae <_printf_i+0x22e>
 8009b86:	68e0      	ldr	r0, [r4, #12]
 8009b88:	9b03      	ldr	r3, [sp, #12]
 8009b8a:	4298      	cmp	r0, r3
 8009b8c:	bfb8      	it	lt
 8009b8e:	4618      	movlt	r0, r3
 8009b90:	e7a6      	b.n	8009ae0 <_printf_i+0x160>
 8009b92:	2301      	movs	r3, #1
 8009b94:	4632      	mov	r2, r6
 8009b96:	4649      	mov	r1, r9
 8009b98:	4640      	mov	r0, r8
 8009b9a:	47d0      	blx	sl
 8009b9c:	3001      	adds	r0, #1
 8009b9e:	d09d      	beq.n	8009adc <_printf_i+0x15c>
 8009ba0:	3501      	adds	r5, #1
 8009ba2:	68e3      	ldr	r3, [r4, #12]
 8009ba4:	9903      	ldr	r1, [sp, #12]
 8009ba6:	1a5b      	subs	r3, r3, r1
 8009ba8:	42ab      	cmp	r3, r5
 8009baa:	dcf2      	bgt.n	8009b92 <_printf_i+0x212>
 8009bac:	e7eb      	b.n	8009b86 <_printf_i+0x206>
 8009bae:	2500      	movs	r5, #0
 8009bb0:	f104 0619 	add.w	r6, r4, #25
 8009bb4:	e7f5      	b.n	8009ba2 <_printf_i+0x222>
 8009bb6:	bf00      	nop
 8009bb8:	08018062 	.word	0x08018062
 8009bbc:	08018073 	.word	0x08018073

08009bc0 <std>:
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	b510      	push	{r4, lr}
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	e9c0 3300 	strd	r3, r3, [r0]
 8009bca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bce:	6083      	str	r3, [r0, #8]
 8009bd0:	8181      	strh	r1, [r0, #12]
 8009bd2:	6643      	str	r3, [r0, #100]	@ 0x64
 8009bd4:	81c2      	strh	r2, [r0, #14]
 8009bd6:	6183      	str	r3, [r0, #24]
 8009bd8:	4619      	mov	r1, r3
 8009bda:	2208      	movs	r2, #8
 8009bdc:	305c      	adds	r0, #92	@ 0x5c
 8009bde:	f000 fa2d 	bl	800a03c <memset>
 8009be2:	4b0d      	ldr	r3, [pc, #52]	@ (8009c18 <std+0x58>)
 8009be4:	6263      	str	r3, [r4, #36]	@ 0x24
 8009be6:	4b0d      	ldr	r3, [pc, #52]	@ (8009c1c <std+0x5c>)
 8009be8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009bea:	4b0d      	ldr	r3, [pc, #52]	@ (8009c20 <std+0x60>)
 8009bec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009bee:	4b0d      	ldr	r3, [pc, #52]	@ (8009c24 <std+0x64>)
 8009bf0:	6323      	str	r3, [r4, #48]	@ 0x30
 8009bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8009c28 <std+0x68>)
 8009bf4:	6224      	str	r4, [r4, #32]
 8009bf6:	429c      	cmp	r4, r3
 8009bf8:	d006      	beq.n	8009c08 <std+0x48>
 8009bfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009bfe:	4294      	cmp	r4, r2
 8009c00:	d002      	beq.n	8009c08 <std+0x48>
 8009c02:	33d0      	adds	r3, #208	@ 0xd0
 8009c04:	429c      	cmp	r4, r3
 8009c06:	d105      	bne.n	8009c14 <std+0x54>
 8009c08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c10:	f000 baa0 	b.w	800a154 <__retarget_lock_init_recursive>
 8009c14:	bd10      	pop	{r4, pc}
 8009c16:	bf00      	nop
 8009c18:	08009e8d 	.word	0x08009e8d
 8009c1c:	08009eaf 	.word	0x08009eaf
 8009c20:	08009ee7 	.word	0x08009ee7
 8009c24:	08009f0b 	.word	0x08009f0b
 8009c28:	20001d24 	.word	0x20001d24

08009c2c <stdio_exit_handler>:
 8009c2c:	4a02      	ldr	r2, [pc, #8]	@ (8009c38 <stdio_exit_handler+0xc>)
 8009c2e:	4903      	ldr	r1, [pc, #12]	@ (8009c3c <stdio_exit_handler+0x10>)
 8009c30:	4803      	ldr	r0, [pc, #12]	@ (8009c40 <stdio_exit_handler+0x14>)
 8009c32:	f000 b869 	b.w	8009d08 <_fwalk_sglue>
 8009c36:	bf00      	nop
 8009c38:	20000a98 	.word	0x20000a98
 8009c3c:	0800bbf5 	.word	0x0800bbf5
 8009c40:	20000aa8 	.word	0x20000aa8

08009c44 <cleanup_stdio>:
 8009c44:	6841      	ldr	r1, [r0, #4]
 8009c46:	4b0c      	ldr	r3, [pc, #48]	@ (8009c78 <cleanup_stdio+0x34>)
 8009c48:	4299      	cmp	r1, r3
 8009c4a:	b510      	push	{r4, lr}
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	d001      	beq.n	8009c54 <cleanup_stdio+0x10>
 8009c50:	f001 ffd0 	bl	800bbf4 <_fflush_r>
 8009c54:	68a1      	ldr	r1, [r4, #8]
 8009c56:	4b09      	ldr	r3, [pc, #36]	@ (8009c7c <cleanup_stdio+0x38>)
 8009c58:	4299      	cmp	r1, r3
 8009c5a:	d002      	beq.n	8009c62 <cleanup_stdio+0x1e>
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	f001 ffc9 	bl	800bbf4 <_fflush_r>
 8009c62:	68e1      	ldr	r1, [r4, #12]
 8009c64:	4b06      	ldr	r3, [pc, #24]	@ (8009c80 <cleanup_stdio+0x3c>)
 8009c66:	4299      	cmp	r1, r3
 8009c68:	d004      	beq.n	8009c74 <cleanup_stdio+0x30>
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c70:	f001 bfc0 	b.w	800bbf4 <_fflush_r>
 8009c74:	bd10      	pop	{r4, pc}
 8009c76:	bf00      	nop
 8009c78:	20001d24 	.word	0x20001d24
 8009c7c:	20001d8c 	.word	0x20001d8c
 8009c80:	20001df4 	.word	0x20001df4

08009c84 <global_stdio_init.part.0>:
 8009c84:	b510      	push	{r4, lr}
 8009c86:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb4 <global_stdio_init.part.0+0x30>)
 8009c88:	4c0b      	ldr	r4, [pc, #44]	@ (8009cb8 <global_stdio_init.part.0+0x34>)
 8009c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8009cbc <global_stdio_init.part.0+0x38>)
 8009c8c:	601a      	str	r2, [r3, #0]
 8009c8e:	4620      	mov	r0, r4
 8009c90:	2200      	movs	r2, #0
 8009c92:	2104      	movs	r1, #4
 8009c94:	f7ff ff94 	bl	8009bc0 <std>
 8009c98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	2109      	movs	r1, #9
 8009ca0:	f7ff ff8e 	bl	8009bc0 <std>
 8009ca4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009ca8:	2202      	movs	r2, #2
 8009caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cae:	2112      	movs	r1, #18
 8009cb0:	f7ff bf86 	b.w	8009bc0 <std>
 8009cb4:	20001e5c 	.word	0x20001e5c
 8009cb8:	20001d24 	.word	0x20001d24
 8009cbc:	08009c2d 	.word	0x08009c2d

08009cc0 <__sfp_lock_acquire>:
 8009cc0:	4801      	ldr	r0, [pc, #4]	@ (8009cc8 <__sfp_lock_acquire+0x8>)
 8009cc2:	f000 ba48 	b.w	800a156 <__retarget_lock_acquire_recursive>
 8009cc6:	bf00      	nop
 8009cc8:	20001e65 	.word	0x20001e65

08009ccc <__sfp_lock_release>:
 8009ccc:	4801      	ldr	r0, [pc, #4]	@ (8009cd4 <__sfp_lock_release+0x8>)
 8009cce:	f000 ba43 	b.w	800a158 <__retarget_lock_release_recursive>
 8009cd2:	bf00      	nop
 8009cd4:	20001e65 	.word	0x20001e65

08009cd8 <__sinit>:
 8009cd8:	b510      	push	{r4, lr}
 8009cda:	4604      	mov	r4, r0
 8009cdc:	f7ff fff0 	bl	8009cc0 <__sfp_lock_acquire>
 8009ce0:	6a23      	ldr	r3, [r4, #32]
 8009ce2:	b11b      	cbz	r3, 8009cec <__sinit+0x14>
 8009ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ce8:	f7ff bff0 	b.w	8009ccc <__sfp_lock_release>
 8009cec:	4b04      	ldr	r3, [pc, #16]	@ (8009d00 <__sinit+0x28>)
 8009cee:	6223      	str	r3, [r4, #32]
 8009cf0:	4b04      	ldr	r3, [pc, #16]	@ (8009d04 <__sinit+0x2c>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1f5      	bne.n	8009ce4 <__sinit+0xc>
 8009cf8:	f7ff ffc4 	bl	8009c84 <global_stdio_init.part.0>
 8009cfc:	e7f2      	b.n	8009ce4 <__sinit+0xc>
 8009cfe:	bf00      	nop
 8009d00:	08009c45 	.word	0x08009c45
 8009d04:	20001e5c 	.word	0x20001e5c

08009d08 <_fwalk_sglue>:
 8009d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d0c:	4607      	mov	r7, r0
 8009d0e:	4688      	mov	r8, r1
 8009d10:	4614      	mov	r4, r2
 8009d12:	2600      	movs	r6, #0
 8009d14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d18:	f1b9 0901 	subs.w	r9, r9, #1
 8009d1c:	d505      	bpl.n	8009d2a <_fwalk_sglue+0x22>
 8009d1e:	6824      	ldr	r4, [r4, #0]
 8009d20:	2c00      	cmp	r4, #0
 8009d22:	d1f7      	bne.n	8009d14 <_fwalk_sglue+0xc>
 8009d24:	4630      	mov	r0, r6
 8009d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d2a:	89ab      	ldrh	r3, [r5, #12]
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d907      	bls.n	8009d40 <_fwalk_sglue+0x38>
 8009d30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d34:	3301      	adds	r3, #1
 8009d36:	d003      	beq.n	8009d40 <_fwalk_sglue+0x38>
 8009d38:	4629      	mov	r1, r5
 8009d3a:	4638      	mov	r0, r7
 8009d3c:	47c0      	blx	r8
 8009d3e:	4306      	orrs	r6, r0
 8009d40:	3568      	adds	r5, #104	@ 0x68
 8009d42:	e7e9      	b.n	8009d18 <_fwalk_sglue+0x10>

08009d44 <iprintf>:
 8009d44:	b40f      	push	{r0, r1, r2, r3}
 8009d46:	b507      	push	{r0, r1, r2, lr}
 8009d48:	4906      	ldr	r1, [pc, #24]	@ (8009d64 <iprintf+0x20>)
 8009d4a:	ab04      	add	r3, sp, #16
 8009d4c:	6808      	ldr	r0, [r1, #0]
 8009d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d52:	6881      	ldr	r1, [r0, #8]
 8009d54:	9301      	str	r3, [sp, #4]
 8009d56:	f001 fdb1 	bl	800b8bc <_vfiprintf_r>
 8009d5a:	b003      	add	sp, #12
 8009d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d60:	b004      	add	sp, #16
 8009d62:	4770      	bx	lr
 8009d64:	20000aa4 	.word	0x20000aa4

08009d68 <_puts_r>:
 8009d68:	6a03      	ldr	r3, [r0, #32]
 8009d6a:	b570      	push	{r4, r5, r6, lr}
 8009d6c:	6884      	ldr	r4, [r0, #8]
 8009d6e:	4605      	mov	r5, r0
 8009d70:	460e      	mov	r6, r1
 8009d72:	b90b      	cbnz	r3, 8009d78 <_puts_r+0x10>
 8009d74:	f7ff ffb0 	bl	8009cd8 <__sinit>
 8009d78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d7a:	07db      	lsls	r3, r3, #31
 8009d7c:	d405      	bmi.n	8009d8a <_puts_r+0x22>
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	0598      	lsls	r0, r3, #22
 8009d82:	d402      	bmi.n	8009d8a <_puts_r+0x22>
 8009d84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d86:	f000 f9e6 	bl	800a156 <__retarget_lock_acquire_recursive>
 8009d8a:	89a3      	ldrh	r3, [r4, #12]
 8009d8c:	0719      	lsls	r1, r3, #28
 8009d8e:	d502      	bpl.n	8009d96 <_puts_r+0x2e>
 8009d90:	6923      	ldr	r3, [r4, #16]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d135      	bne.n	8009e02 <_puts_r+0x9a>
 8009d96:	4621      	mov	r1, r4
 8009d98:	4628      	mov	r0, r5
 8009d9a:	f000 f8f9 	bl	8009f90 <__swsetup_r>
 8009d9e:	b380      	cbz	r0, 8009e02 <_puts_r+0x9a>
 8009da0:	f04f 35ff 	mov.w	r5, #4294967295
 8009da4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009da6:	07da      	lsls	r2, r3, #31
 8009da8:	d405      	bmi.n	8009db6 <_puts_r+0x4e>
 8009daa:	89a3      	ldrh	r3, [r4, #12]
 8009dac:	059b      	lsls	r3, r3, #22
 8009dae:	d402      	bmi.n	8009db6 <_puts_r+0x4e>
 8009db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009db2:	f000 f9d1 	bl	800a158 <__retarget_lock_release_recursive>
 8009db6:	4628      	mov	r0, r5
 8009db8:	bd70      	pop	{r4, r5, r6, pc}
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	da04      	bge.n	8009dc8 <_puts_r+0x60>
 8009dbe:	69a2      	ldr	r2, [r4, #24]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	dc17      	bgt.n	8009df4 <_puts_r+0x8c>
 8009dc4:	290a      	cmp	r1, #10
 8009dc6:	d015      	beq.n	8009df4 <_puts_r+0x8c>
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	1c5a      	adds	r2, r3, #1
 8009dcc:	6022      	str	r2, [r4, #0]
 8009dce:	7019      	strb	r1, [r3, #0]
 8009dd0:	68a3      	ldr	r3, [r4, #8]
 8009dd2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	60a3      	str	r3, [r4, #8]
 8009dda:	2900      	cmp	r1, #0
 8009ddc:	d1ed      	bne.n	8009dba <_puts_r+0x52>
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	da11      	bge.n	8009e06 <_puts_r+0x9e>
 8009de2:	4622      	mov	r2, r4
 8009de4:	210a      	movs	r1, #10
 8009de6:	4628      	mov	r0, r5
 8009de8:	f000 f893 	bl	8009f12 <__swbuf_r>
 8009dec:	3001      	adds	r0, #1
 8009dee:	d0d7      	beq.n	8009da0 <_puts_r+0x38>
 8009df0:	250a      	movs	r5, #10
 8009df2:	e7d7      	b.n	8009da4 <_puts_r+0x3c>
 8009df4:	4622      	mov	r2, r4
 8009df6:	4628      	mov	r0, r5
 8009df8:	f000 f88b 	bl	8009f12 <__swbuf_r>
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d1e7      	bne.n	8009dd0 <_puts_r+0x68>
 8009e00:	e7ce      	b.n	8009da0 <_puts_r+0x38>
 8009e02:	3e01      	subs	r6, #1
 8009e04:	e7e4      	b.n	8009dd0 <_puts_r+0x68>
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	1c5a      	adds	r2, r3, #1
 8009e0a:	6022      	str	r2, [r4, #0]
 8009e0c:	220a      	movs	r2, #10
 8009e0e:	701a      	strb	r2, [r3, #0]
 8009e10:	e7ee      	b.n	8009df0 <_puts_r+0x88>
	...

08009e14 <puts>:
 8009e14:	4b02      	ldr	r3, [pc, #8]	@ (8009e20 <puts+0xc>)
 8009e16:	4601      	mov	r1, r0
 8009e18:	6818      	ldr	r0, [r3, #0]
 8009e1a:	f7ff bfa5 	b.w	8009d68 <_puts_r>
 8009e1e:	bf00      	nop
 8009e20:	20000aa4 	.word	0x20000aa4

08009e24 <sniprintf>:
 8009e24:	b40c      	push	{r2, r3}
 8009e26:	b530      	push	{r4, r5, lr}
 8009e28:	4b17      	ldr	r3, [pc, #92]	@ (8009e88 <sniprintf+0x64>)
 8009e2a:	1e0c      	subs	r4, r1, #0
 8009e2c:	681d      	ldr	r5, [r3, #0]
 8009e2e:	b09d      	sub	sp, #116	@ 0x74
 8009e30:	da08      	bge.n	8009e44 <sniprintf+0x20>
 8009e32:	238b      	movs	r3, #139	@ 0x8b
 8009e34:	602b      	str	r3, [r5, #0]
 8009e36:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3a:	b01d      	add	sp, #116	@ 0x74
 8009e3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e40:	b002      	add	sp, #8
 8009e42:	4770      	bx	lr
 8009e44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009e48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009e4c:	bf14      	ite	ne
 8009e4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009e52:	4623      	moveq	r3, r4
 8009e54:	9304      	str	r3, [sp, #16]
 8009e56:	9307      	str	r3, [sp, #28]
 8009e58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009e5c:	9002      	str	r0, [sp, #8]
 8009e5e:	9006      	str	r0, [sp, #24]
 8009e60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009e64:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009e66:	ab21      	add	r3, sp, #132	@ 0x84
 8009e68:	a902      	add	r1, sp, #8
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	9301      	str	r3, [sp, #4]
 8009e6e:	f001 fbff 	bl	800b670 <_svfiprintf_r>
 8009e72:	1c43      	adds	r3, r0, #1
 8009e74:	bfbc      	itt	lt
 8009e76:	238b      	movlt	r3, #139	@ 0x8b
 8009e78:	602b      	strlt	r3, [r5, #0]
 8009e7a:	2c00      	cmp	r4, #0
 8009e7c:	d0dd      	beq.n	8009e3a <sniprintf+0x16>
 8009e7e:	9b02      	ldr	r3, [sp, #8]
 8009e80:	2200      	movs	r2, #0
 8009e82:	701a      	strb	r2, [r3, #0]
 8009e84:	e7d9      	b.n	8009e3a <sniprintf+0x16>
 8009e86:	bf00      	nop
 8009e88:	20000aa4 	.word	0x20000aa4

08009e8c <__sread>:
 8009e8c:	b510      	push	{r4, lr}
 8009e8e:	460c      	mov	r4, r1
 8009e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e94:	f000 f900 	bl	800a098 <_read_r>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	bfab      	itete	ge
 8009e9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8009ea0:	181b      	addge	r3, r3, r0
 8009ea2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009ea6:	bfac      	ite	ge
 8009ea8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009eaa:	81a3      	strhlt	r3, [r4, #12]
 8009eac:	bd10      	pop	{r4, pc}

08009eae <__swrite>:
 8009eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb2:	461f      	mov	r7, r3
 8009eb4:	898b      	ldrh	r3, [r1, #12]
 8009eb6:	05db      	lsls	r3, r3, #23
 8009eb8:	4605      	mov	r5, r0
 8009eba:	460c      	mov	r4, r1
 8009ebc:	4616      	mov	r6, r2
 8009ebe:	d505      	bpl.n	8009ecc <__swrite+0x1e>
 8009ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f000 f8d4 	bl	800a074 <_lseek_r>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ed2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ed6:	81a3      	strh	r3, [r4, #12]
 8009ed8:	4632      	mov	r2, r6
 8009eda:	463b      	mov	r3, r7
 8009edc:	4628      	mov	r0, r5
 8009ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee2:	f000 b8fb 	b.w	800a0dc <_write_r>

08009ee6 <__sseek>:
 8009ee6:	b510      	push	{r4, lr}
 8009ee8:	460c      	mov	r4, r1
 8009eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eee:	f000 f8c1 	bl	800a074 <_lseek_r>
 8009ef2:	1c43      	adds	r3, r0, #1
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	bf15      	itete	ne
 8009ef8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009efa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009efe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009f02:	81a3      	strheq	r3, [r4, #12]
 8009f04:	bf18      	it	ne
 8009f06:	81a3      	strhne	r3, [r4, #12]
 8009f08:	bd10      	pop	{r4, pc}

08009f0a <__sclose>:
 8009f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f0e:	f000 b8a1 	b.w	800a054 <_close_r>

08009f12 <__swbuf_r>:
 8009f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f14:	460e      	mov	r6, r1
 8009f16:	4614      	mov	r4, r2
 8009f18:	4605      	mov	r5, r0
 8009f1a:	b118      	cbz	r0, 8009f24 <__swbuf_r+0x12>
 8009f1c:	6a03      	ldr	r3, [r0, #32]
 8009f1e:	b90b      	cbnz	r3, 8009f24 <__swbuf_r+0x12>
 8009f20:	f7ff feda 	bl	8009cd8 <__sinit>
 8009f24:	69a3      	ldr	r3, [r4, #24]
 8009f26:	60a3      	str	r3, [r4, #8]
 8009f28:	89a3      	ldrh	r3, [r4, #12]
 8009f2a:	071a      	lsls	r2, r3, #28
 8009f2c:	d501      	bpl.n	8009f32 <__swbuf_r+0x20>
 8009f2e:	6923      	ldr	r3, [r4, #16]
 8009f30:	b943      	cbnz	r3, 8009f44 <__swbuf_r+0x32>
 8009f32:	4621      	mov	r1, r4
 8009f34:	4628      	mov	r0, r5
 8009f36:	f000 f82b 	bl	8009f90 <__swsetup_r>
 8009f3a:	b118      	cbz	r0, 8009f44 <__swbuf_r+0x32>
 8009f3c:	f04f 37ff 	mov.w	r7, #4294967295
 8009f40:	4638      	mov	r0, r7
 8009f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f44:	6823      	ldr	r3, [r4, #0]
 8009f46:	6922      	ldr	r2, [r4, #16]
 8009f48:	1a98      	subs	r0, r3, r2
 8009f4a:	6963      	ldr	r3, [r4, #20]
 8009f4c:	b2f6      	uxtb	r6, r6
 8009f4e:	4283      	cmp	r3, r0
 8009f50:	4637      	mov	r7, r6
 8009f52:	dc05      	bgt.n	8009f60 <__swbuf_r+0x4e>
 8009f54:	4621      	mov	r1, r4
 8009f56:	4628      	mov	r0, r5
 8009f58:	f001 fe4c 	bl	800bbf4 <_fflush_r>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d1ed      	bne.n	8009f3c <__swbuf_r+0x2a>
 8009f60:	68a3      	ldr	r3, [r4, #8]
 8009f62:	3b01      	subs	r3, #1
 8009f64:	60a3      	str	r3, [r4, #8]
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	1c5a      	adds	r2, r3, #1
 8009f6a:	6022      	str	r2, [r4, #0]
 8009f6c:	701e      	strb	r6, [r3, #0]
 8009f6e:	6962      	ldr	r2, [r4, #20]
 8009f70:	1c43      	adds	r3, r0, #1
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d004      	beq.n	8009f80 <__swbuf_r+0x6e>
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	07db      	lsls	r3, r3, #31
 8009f7a:	d5e1      	bpl.n	8009f40 <__swbuf_r+0x2e>
 8009f7c:	2e0a      	cmp	r6, #10
 8009f7e:	d1df      	bne.n	8009f40 <__swbuf_r+0x2e>
 8009f80:	4621      	mov	r1, r4
 8009f82:	4628      	mov	r0, r5
 8009f84:	f001 fe36 	bl	800bbf4 <_fflush_r>
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	d0d9      	beq.n	8009f40 <__swbuf_r+0x2e>
 8009f8c:	e7d6      	b.n	8009f3c <__swbuf_r+0x2a>
	...

08009f90 <__swsetup_r>:
 8009f90:	b538      	push	{r3, r4, r5, lr}
 8009f92:	4b29      	ldr	r3, [pc, #164]	@ (800a038 <__swsetup_r+0xa8>)
 8009f94:	4605      	mov	r5, r0
 8009f96:	6818      	ldr	r0, [r3, #0]
 8009f98:	460c      	mov	r4, r1
 8009f9a:	b118      	cbz	r0, 8009fa4 <__swsetup_r+0x14>
 8009f9c:	6a03      	ldr	r3, [r0, #32]
 8009f9e:	b90b      	cbnz	r3, 8009fa4 <__swsetup_r+0x14>
 8009fa0:	f7ff fe9a 	bl	8009cd8 <__sinit>
 8009fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fa8:	0719      	lsls	r1, r3, #28
 8009faa:	d422      	bmi.n	8009ff2 <__swsetup_r+0x62>
 8009fac:	06da      	lsls	r2, r3, #27
 8009fae:	d407      	bmi.n	8009fc0 <__swsetup_r+0x30>
 8009fb0:	2209      	movs	r2, #9
 8009fb2:	602a      	str	r2, [r5, #0]
 8009fb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fb8:	81a3      	strh	r3, [r4, #12]
 8009fba:	f04f 30ff 	mov.w	r0, #4294967295
 8009fbe:	e033      	b.n	800a028 <__swsetup_r+0x98>
 8009fc0:	0758      	lsls	r0, r3, #29
 8009fc2:	d512      	bpl.n	8009fea <__swsetup_r+0x5a>
 8009fc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fc6:	b141      	cbz	r1, 8009fda <__swsetup_r+0x4a>
 8009fc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fcc:	4299      	cmp	r1, r3
 8009fce:	d002      	beq.n	8009fd6 <__swsetup_r+0x46>
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	f000 ff1d 	bl	800ae10 <_free_r>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009fe0:	81a3      	strh	r3, [r4, #12]
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	6063      	str	r3, [r4, #4]
 8009fe6:	6923      	ldr	r3, [r4, #16]
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	89a3      	ldrh	r3, [r4, #12]
 8009fec:	f043 0308 	orr.w	r3, r3, #8
 8009ff0:	81a3      	strh	r3, [r4, #12]
 8009ff2:	6923      	ldr	r3, [r4, #16]
 8009ff4:	b94b      	cbnz	r3, 800a00a <__swsetup_r+0x7a>
 8009ff6:	89a3      	ldrh	r3, [r4, #12]
 8009ff8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a000:	d003      	beq.n	800a00a <__swsetup_r+0x7a>
 800a002:	4621      	mov	r1, r4
 800a004:	4628      	mov	r0, r5
 800a006:	f001 fe43 	bl	800bc90 <__smakebuf_r>
 800a00a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a00e:	f013 0201 	ands.w	r2, r3, #1
 800a012:	d00a      	beq.n	800a02a <__swsetup_r+0x9a>
 800a014:	2200      	movs	r2, #0
 800a016:	60a2      	str	r2, [r4, #8]
 800a018:	6962      	ldr	r2, [r4, #20]
 800a01a:	4252      	negs	r2, r2
 800a01c:	61a2      	str	r2, [r4, #24]
 800a01e:	6922      	ldr	r2, [r4, #16]
 800a020:	b942      	cbnz	r2, 800a034 <__swsetup_r+0xa4>
 800a022:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a026:	d1c5      	bne.n	8009fb4 <__swsetup_r+0x24>
 800a028:	bd38      	pop	{r3, r4, r5, pc}
 800a02a:	0799      	lsls	r1, r3, #30
 800a02c:	bf58      	it	pl
 800a02e:	6962      	ldrpl	r2, [r4, #20]
 800a030:	60a2      	str	r2, [r4, #8]
 800a032:	e7f4      	b.n	800a01e <__swsetup_r+0x8e>
 800a034:	2000      	movs	r0, #0
 800a036:	e7f7      	b.n	800a028 <__swsetup_r+0x98>
 800a038:	20000aa4 	.word	0x20000aa4

0800a03c <memset>:
 800a03c:	4402      	add	r2, r0
 800a03e:	4603      	mov	r3, r0
 800a040:	4293      	cmp	r3, r2
 800a042:	d100      	bne.n	800a046 <memset+0xa>
 800a044:	4770      	bx	lr
 800a046:	f803 1b01 	strb.w	r1, [r3], #1
 800a04a:	e7f9      	b.n	800a040 <memset+0x4>

0800a04c <_localeconv_r>:
 800a04c:	4800      	ldr	r0, [pc, #0]	@ (800a050 <_localeconv_r+0x4>)
 800a04e:	4770      	bx	lr
 800a050:	20000be4 	.word	0x20000be4

0800a054 <_close_r>:
 800a054:	b538      	push	{r3, r4, r5, lr}
 800a056:	4d06      	ldr	r5, [pc, #24]	@ (800a070 <_close_r+0x1c>)
 800a058:	2300      	movs	r3, #0
 800a05a:	4604      	mov	r4, r0
 800a05c:	4608      	mov	r0, r1
 800a05e:	602b      	str	r3, [r5, #0]
 800a060:	f002 f872 	bl	800c148 <_close>
 800a064:	1c43      	adds	r3, r0, #1
 800a066:	d102      	bne.n	800a06e <_close_r+0x1a>
 800a068:	682b      	ldr	r3, [r5, #0]
 800a06a:	b103      	cbz	r3, 800a06e <_close_r+0x1a>
 800a06c:	6023      	str	r3, [r4, #0]
 800a06e:	bd38      	pop	{r3, r4, r5, pc}
 800a070:	20001e60 	.word	0x20001e60

0800a074 <_lseek_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	4d07      	ldr	r5, [pc, #28]	@ (800a094 <_lseek_r+0x20>)
 800a078:	4604      	mov	r4, r0
 800a07a:	4608      	mov	r0, r1
 800a07c:	4611      	mov	r1, r2
 800a07e:	2200      	movs	r2, #0
 800a080:	602a      	str	r2, [r5, #0]
 800a082:	461a      	mov	r2, r3
 800a084:	f002 f888 	bl	800c198 <_lseek>
 800a088:	1c43      	adds	r3, r0, #1
 800a08a:	d102      	bne.n	800a092 <_lseek_r+0x1e>
 800a08c:	682b      	ldr	r3, [r5, #0]
 800a08e:	b103      	cbz	r3, 800a092 <_lseek_r+0x1e>
 800a090:	6023      	str	r3, [r4, #0]
 800a092:	bd38      	pop	{r3, r4, r5, pc}
 800a094:	20001e60 	.word	0x20001e60

0800a098 <_read_r>:
 800a098:	b538      	push	{r3, r4, r5, lr}
 800a09a:	4d07      	ldr	r5, [pc, #28]	@ (800a0b8 <_read_r+0x20>)
 800a09c:	4604      	mov	r4, r0
 800a09e:	4608      	mov	r0, r1
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	602a      	str	r2, [r5, #0]
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	f002 f87e 	bl	800c1a8 <_read>
 800a0ac:	1c43      	adds	r3, r0, #1
 800a0ae:	d102      	bne.n	800a0b6 <_read_r+0x1e>
 800a0b0:	682b      	ldr	r3, [r5, #0]
 800a0b2:	b103      	cbz	r3, 800a0b6 <_read_r+0x1e>
 800a0b4:	6023      	str	r3, [r4, #0]
 800a0b6:	bd38      	pop	{r3, r4, r5, pc}
 800a0b8:	20001e60 	.word	0x20001e60

0800a0bc <_sbrk_r>:
 800a0bc:	b538      	push	{r3, r4, r5, lr}
 800a0be:	4d06      	ldr	r5, [pc, #24]	@ (800a0d8 <_sbrk_r+0x1c>)
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	4608      	mov	r0, r1
 800a0c6:	602b      	str	r3, [r5, #0]
 800a0c8:	f7f7 ff08 	bl	8001edc <_sbrk>
 800a0cc:	1c43      	adds	r3, r0, #1
 800a0ce:	d102      	bne.n	800a0d6 <_sbrk_r+0x1a>
 800a0d0:	682b      	ldr	r3, [r5, #0]
 800a0d2:	b103      	cbz	r3, 800a0d6 <_sbrk_r+0x1a>
 800a0d4:	6023      	str	r3, [r4, #0]
 800a0d6:	bd38      	pop	{r3, r4, r5, pc}
 800a0d8:	20001e60 	.word	0x20001e60

0800a0dc <_write_r>:
 800a0dc:	b538      	push	{r3, r4, r5, lr}
 800a0de:	4d07      	ldr	r5, [pc, #28]	@ (800a0fc <_write_r+0x20>)
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	4608      	mov	r0, r1
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	602a      	str	r2, [r5, #0]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	f002 f864 	bl	800c1b8 <_write>
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	d102      	bne.n	800a0fa <_write_r+0x1e>
 800a0f4:	682b      	ldr	r3, [r5, #0]
 800a0f6:	b103      	cbz	r3, 800a0fa <_write_r+0x1e>
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	20001e60 	.word	0x20001e60

0800a100 <__errno>:
 800a100:	4b01      	ldr	r3, [pc, #4]	@ (800a108 <__errno+0x8>)
 800a102:	6818      	ldr	r0, [r3, #0]
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	20000aa4 	.word	0x20000aa4

0800a10c <__libc_init_array>:
 800a10c:	b570      	push	{r4, r5, r6, lr}
 800a10e:	4d0d      	ldr	r5, [pc, #52]	@ (800a144 <__libc_init_array+0x38>)
 800a110:	4c0d      	ldr	r4, [pc, #52]	@ (800a148 <__libc_init_array+0x3c>)
 800a112:	1b64      	subs	r4, r4, r5
 800a114:	10a4      	asrs	r4, r4, #2
 800a116:	2600      	movs	r6, #0
 800a118:	42a6      	cmp	r6, r4
 800a11a:	d109      	bne.n	800a130 <__libc_init_array+0x24>
 800a11c:	4d0b      	ldr	r5, [pc, #44]	@ (800a14c <__libc_init_array+0x40>)
 800a11e:	4c0c      	ldr	r4, [pc, #48]	@ (800a150 <__libc_init_array+0x44>)
 800a120:	f002 f854 	bl	800c1cc <_init>
 800a124:	1b64      	subs	r4, r4, r5
 800a126:	10a4      	asrs	r4, r4, #2
 800a128:	2600      	movs	r6, #0
 800a12a:	42a6      	cmp	r6, r4
 800a12c:	d105      	bne.n	800a13a <__libc_init_array+0x2e>
 800a12e:	bd70      	pop	{r4, r5, r6, pc}
 800a130:	f855 3b04 	ldr.w	r3, [r5], #4
 800a134:	4798      	blx	r3
 800a136:	3601      	adds	r6, #1
 800a138:	e7ee      	b.n	800a118 <__libc_init_array+0xc>
 800a13a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a13e:	4798      	blx	r3
 800a140:	3601      	adds	r6, #1
 800a142:	e7f2      	b.n	800a12a <__libc_init_array+0x1e>
 800a144:	080183e0 	.word	0x080183e0
 800a148:	080183e0 	.word	0x080183e0
 800a14c:	080183e0 	.word	0x080183e0
 800a150:	080183e4 	.word	0x080183e4

0800a154 <__retarget_lock_init_recursive>:
 800a154:	4770      	bx	lr

0800a156 <__retarget_lock_acquire_recursive>:
 800a156:	4770      	bx	lr

0800a158 <__retarget_lock_release_recursive>:
 800a158:	4770      	bx	lr

0800a15a <memcpy>:
 800a15a:	440a      	add	r2, r1
 800a15c:	4291      	cmp	r1, r2
 800a15e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a162:	d100      	bne.n	800a166 <memcpy+0xc>
 800a164:	4770      	bx	lr
 800a166:	b510      	push	{r4, lr}
 800a168:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a16c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a170:	4291      	cmp	r1, r2
 800a172:	d1f9      	bne.n	800a168 <memcpy+0xe>
 800a174:	bd10      	pop	{r4, pc}

0800a176 <quorem>:
 800a176:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a17a:	6903      	ldr	r3, [r0, #16]
 800a17c:	690c      	ldr	r4, [r1, #16]
 800a17e:	42a3      	cmp	r3, r4
 800a180:	4607      	mov	r7, r0
 800a182:	db7e      	blt.n	800a282 <quorem+0x10c>
 800a184:	3c01      	subs	r4, #1
 800a186:	f101 0814 	add.w	r8, r1, #20
 800a18a:	00a3      	lsls	r3, r4, #2
 800a18c:	f100 0514 	add.w	r5, r0, #20
 800a190:	9300      	str	r3, [sp, #0]
 800a192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a196:	9301      	str	r3, [sp, #4]
 800a198:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a19c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1a8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1ac:	d32e      	bcc.n	800a20c <quorem+0x96>
 800a1ae:	f04f 0a00 	mov.w	sl, #0
 800a1b2:	46c4      	mov	ip, r8
 800a1b4:	46ae      	mov	lr, r5
 800a1b6:	46d3      	mov	fp, sl
 800a1b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a1bc:	b298      	uxth	r0, r3
 800a1be:	fb06 a000 	mla	r0, r6, r0, sl
 800a1c2:	0c02      	lsrs	r2, r0, #16
 800a1c4:	0c1b      	lsrs	r3, r3, #16
 800a1c6:	fb06 2303 	mla	r3, r6, r3, r2
 800a1ca:	f8de 2000 	ldr.w	r2, [lr]
 800a1ce:	b280      	uxth	r0, r0
 800a1d0:	b292      	uxth	r2, r2
 800a1d2:	1a12      	subs	r2, r2, r0
 800a1d4:	445a      	add	r2, fp
 800a1d6:	f8de 0000 	ldr.w	r0, [lr]
 800a1da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a1e4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a1e8:	b292      	uxth	r2, r2
 800a1ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a1ee:	45e1      	cmp	r9, ip
 800a1f0:	f84e 2b04 	str.w	r2, [lr], #4
 800a1f4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a1f8:	d2de      	bcs.n	800a1b8 <quorem+0x42>
 800a1fa:	9b00      	ldr	r3, [sp, #0]
 800a1fc:	58eb      	ldr	r3, [r5, r3]
 800a1fe:	b92b      	cbnz	r3, 800a20c <quorem+0x96>
 800a200:	9b01      	ldr	r3, [sp, #4]
 800a202:	3b04      	subs	r3, #4
 800a204:	429d      	cmp	r5, r3
 800a206:	461a      	mov	r2, r3
 800a208:	d32f      	bcc.n	800a26a <quorem+0xf4>
 800a20a:	613c      	str	r4, [r7, #16]
 800a20c:	4638      	mov	r0, r7
 800a20e:	f001 f8c3 	bl	800b398 <__mcmp>
 800a212:	2800      	cmp	r0, #0
 800a214:	db25      	blt.n	800a262 <quorem+0xec>
 800a216:	4629      	mov	r1, r5
 800a218:	2000      	movs	r0, #0
 800a21a:	f858 2b04 	ldr.w	r2, [r8], #4
 800a21e:	f8d1 c000 	ldr.w	ip, [r1]
 800a222:	fa1f fe82 	uxth.w	lr, r2
 800a226:	fa1f f38c 	uxth.w	r3, ip
 800a22a:	eba3 030e 	sub.w	r3, r3, lr
 800a22e:	4403      	add	r3, r0
 800a230:	0c12      	lsrs	r2, r2, #16
 800a232:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a236:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a240:	45c1      	cmp	r9, r8
 800a242:	f841 3b04 	str.w	r3, [r1], #4
 800a246:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a24a:	d2e6      	bcs.n	800a21a <quorem+0xa4>
 800a24c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a250:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a254:	b922      	cbnz	r2, 800a260 <quorem+0xea>
 800a256:	3b04      	subs	r3, #4
 800a258:	429d      	cmp	r5, r3
 800a25a:	461a      	mov	r2, r3
 800a25c:	d30b      	bcc.n	800a276 <quorem+0x100>
 800a25e:	613c      	str	r4, [r7, #16]
 800a260:	3601      	adds	r6, #1
 800a262:	4630      	mov	r0, r6
 800a264:	b003      	add	sp, #12
 800a266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26a:	6812      	ldr	r2, [r2, #0]
 800a26c:	3b04      	subs	r3, #4
 800a26e:	2a00      	cmp	r2, #0
 800a270:	d1cb      	bne.n	800a20a <quorem+0x94>
 800a272:	3c01      	subs	r4, #1
 800a274:	e7c6      	b.n	800a204 <quorem+0x8e>
 800a276:	6812      	ldr	r2, [r2, #0]
 800a278:	3b04      	subs	r3, #4
 800a27a:	2a00      	cmp	r2, #0
 800a27c:	d1ef      	bne.n	800a25e <quorem+0xe8>
 800a27e:	3c01      	subs	r4, #1
 800a280:	e7ea      	b.n	800a258 <quorem+0xe2>
 800a282:	2000      	movs	r0, #0
 800a284:	e7ee      	b.n	800a264 <quorem+0xee>
	...

0800a288 <_dtoa_r>:
 800a288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a28c:	69c7      	ldr	r7, [r0, #28]
 800a28e:	b099      	sub	sp, #100	@ 0x64
 800a290:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a294:	ec55 4b10 	vmov	r4, r5, d0
 800a298:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a29a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a29c:	4683      	mov	fp, r0
 800a29e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a2a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a2a2:	b97f      	cbnz	r7, 800a2c4 <_dtoa_r+0x3c>
 800a2a4:	2010      	movs	r0, #16
 800a2a6:	f7fe ff4f 	bl	8009148 <malloc>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	f8cb 001c 	str.w	r0, [fp, #28]
 800a2b0:	b920      	cbnz	r0, 800a2bc <_dtoa_r+0x34>
 800a2b2:	4ba7      	ldr	r3, [pc, #668]	@ (800a550 <_dtoa_r+0x2c8>)
 800a2b4:	21ef      	movs	r1, #239	@ 0xef
 800a2b6:	48a7      	ldr	r0, [pc, #668]	@ (800a554 <_dtoa_r+0x2cc>)
 800a2b8:	f001 fd62 	bl	800bd80 <__assert_func>
 800a2bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a2c0:	6007      	str	r7, [r0, #0]
 800a2c2:	60c7      	str	r7, [r0, #12]
 800a2c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a2c8:	6819      	ldr	r1, [r3, #0]
 800a2ca:	b159      	cbz	r1, 800a2e4 <_dtoa_r+0x5c>
 800a2cc:	685a      	ldr	r2, [r3, #4]
 800a2ce:	604a      	str	r2, [r1, #4]
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	4093      	lsls	r3, r2
 800a2d4:	608b      	str	r3, [r1, #8]
 800a2d6:	4658      	mov	r0, fp
 800a2d8:	f000 fe24 	bl	800af24 <_Bfree>
 800a2dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	601a      	str	r2, [r3, #0]
 800a2e4:	1e2b      	subs	r3, r5, #0
 800a2e6:	bfb9      	ittee	lt
 800a2e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a2ec:	9303      	strlt	r3, [sp, #12]
 800a2ee:	2300      	movge	r3, #0
 800a2f0:	6033      	strge	r3, [r6, #0]
 800a2f2:	9f03      	ldr	r7, [sp, #12]
 800a2f4:	4b98      	ldr	r3, [pc, #608]	@ (800a558 <_dtoa_r+0x2d0>)
 800a2f6:	bfbc      	itt	lt
 800a2f8:	2201      	movlt	r2, #1
 800a2fa:	6032      	strlt	r2, [r6, #0]
 800a2fc:	43bb      	bics	r3, r7
 800a2fe:	d112      	bne.n	800a326 <_dtoa_r+0x9e>
 800a300:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a302:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a306:	6013      	str	r3, [r2, #0]
 800a308:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a30c:	4323      	orrs	r3, r4
 800a30e:	f000 854d 	beq.w	800adac <_dtoa_r+0xb24>
 800a312:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a314:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a56c <_dtoa_r+0x2e4>
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f000 854f 	beq.w	800adbc <_dtoa_r+0xb34>
 800a31e:	f10a 0303 	add.w	r3, sl, #3
 800a322:	f000 bd49 	b.w	800adb8 <_dtoa_r+0xb30>
 800a326:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a32a:	2200      	movs	r2, #0
 800a32c:	ec51 0b17 	vmov	r0, r1, d7
 800a330:	2300      	movs	r3, #0
 800a332:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a336:	f7f6 fbc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a33a:	4680      	mov	r8, r0
 800a33c:	b158      	cbz	r0, 800a356 <_dtoa_r+0xce>
 800a33e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a340:	2301      	movs	r3, #1
 800a342:	6013      	str	r3, [r2, #0]
 800a344:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a346:	b113      	cbz	r3, 800a34e <_dtoa_r+0xc6>
 800a348:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a34a:	4b84      	ldr	r3, [pc, #528]	@ (800a55c <_dtoa_r+0x2d4>)
 800a34c:	6013      	str	r3, [r2, #0]
 800a34e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a570 <_dtoa_r+0x2e8>
 800a352:	f000 bd33 	b.w	800adbc <_dtoa_r+0xb34>
 800a356:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a35a:	aa16      	add	r2, sp, #88	@ 0x58
 800a35c:	a917      	add	r1, sp, #92	@ 0x5c
 800a35e:	4658      	mov	r0, fp
 800a360:	f001 f8ca 	bl	800b4f8 <__d2b>
 800a364:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a368:	4681      	mov	r9, r0
 800a36a:	2e00      	cmp	r6, #0
 800a36c:	d077      	beq.n	800a45e <_dtoa_r+0x1d6>
 800a36e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a370:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a378:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a37c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a380:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a384:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a388:	4619      	mov	r1, r3
 800a38a:	2200      	movs	r2, #0
 800a38c:	4b74      	ldr	r3, [pc, #464]	@ (800a560 <_dtoa_r+0x2d8>)
 800a38e:	f7f5 ff7b 	bl	8000288 <__aeabi_dsub>
 800a392:	a369      	add	r3, pc, #420	@ (adr r3, 800a538 <_dtoa_r+0x2b0>)
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	f7f6 f92e 	bl	80005f8 <__aeabi_dmul>
 800a39c:	a368      	add	r3, pc, #416	@ (adr r3, 800a540 <_dtoa_r+0x2b8>)
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	f7f5 ff73 	bl	800028c <__adddf3>
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	460d      	mov	r5, r1
 800a3ac:	f7f6 f8ba 	bl	8000524 <__aeabi_i2d>
 800a3b0:	a365      	add	r3, pc, #404	@ (adr r3, 800a548 <_dtoa_r+0x2c0>)
 800a3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b6:	f7f6 f91f 	bl	80005f8 <__aeabi_dmul>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	460b      	mov	r3, r1
 800a3be:	4620      	mov	r0, r4
 800a3c0:	4629      	mov	r1, r5
 800a3c2:	f7f5 ff63 	bl	800028c <__adddf3>
 800a3c6:	4604      	mov	r4, r0
 800a3c8:	460d      	mov	r5, r1
 800a3ca:	f7f6 fbc5 	bl	8000b58 <__aeabi_d2iz>
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	4607      	mov	r7, r0
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	f7f6 fb80 	bl	8000adc <__aeabi_dcmplt>
 800a3dc:	b140      	cbz	r0, 800a3f0 <_dtoa_r+0x168>
 800a3de:	4638      	mov	r0, r7
 800a3e0:	f7f6 f8a0 	bl	8000524 <__aeabi_i2d>
 800a3e4:	4622      	mov	r2, r4
 800a3e6:	462b      	mov	r3, r5
 800a3e8:	f7f6 fb6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3ec:	b900      	cbnz	r0, 800a3f0 <_dtoa_r+0x168>
 800a3ee:	3f01      	subs	r7, #1
 800a3f0:	2f16      	cmp	r7, #22
 800a3f2:	d851      	bhi.n	800a498 <_dtoa_r+0x210>
 800a3f4:	4b5b      	ldr	r3, [pc, #364]	@ (800a564 <_dtoa_r+0x2dc>)
 800a3f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a402:	f7f6 fb6b 	bl	8000adc <__aeabi_dcmplt>
 800a406:	2800      	cmp	r0, #0
 800a408:	d048      	beq.n	800a49c <_dtoa_r+0x214>
 800a40a:	3f01      	subs	r7, #1
 800a40c:	2300      	movs	r3, #0
 800a40e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a410:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a412:	1b9b      	subs	r3, r3, r6
 800a414:	1e5a      	subs	r2, r3, #1
 800a416:	bf44      	itt	mi
 800a418:	f1c3 0801 	rsbmi	r8, r3, #1
 800a41c:	2300      	movmi	r3, #0
 800a41e:	9208      	str	r2, [sp, #32]
 800a420:	bf54      	ite	pl
 800a422:	f04f 0800 	movpl.w	r8, #0
 800a426:	9308      	strmi	r3, [sp, #32]
 800a428:	2f00      	cmp	r7, #0
 800a42a:	db39      	blt.n	800a4a0 <_dtoa_r+0x218>
 800a42c:	9b08      	ldr	r3, [sp, #32]
 800a42e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a430:	443b      	add	r3, r7
 800a432:	9308      	str	r3, [sp, #32]
 800a434:	2300      	movs	r3, #0
 800a436:	930a      	str	r3, [sp, #40]	@ 0x28
 800a438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a43a:	2b09      	cmp	r3, #9
 800a43c:	d864      	bhi.n	800a508 <_dtoa_r+0x280>
 800a43e:	2b05      	cmp	r3, #5
 800a440:	bfc4      	itt	gt
 800a442:	3b04      	subgt	r3, #4
 800a444:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a448:	f1a3 0302 	sub.w	r3, r3, #2
 800a44c:	bfcc      	ite	gt
 800a44e:	2400      	movgt	r4, #0
 800a450:	2401      	movle	r4, #1
 800a452:	2b03      	cmp	r3, #3
 800a454:	d863      	bhi.n	800a51e <_dtoa_r+0x296>
 800a456:	e8df f003 	tbb	[pc, r3]
 800a45a:	372a      	.short	0x372a
 800a45c:	5535      	.short	0x5535
 800a45e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a462:	441e      	add	r6, r3
 800a464:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a468:	2b20      	cmp	r3, #32
 800a46a:	bfc1      	itttt	gt
 800a46c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a470:	409f      	lslgt	r7, r3
 800a472:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a476:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a47a:	bfd6      	itet	le
 800a47c:	f1c3 0320 	rsble	r3, r3, #32
 800a480:	ea47 0003 	orrgt.w	r0, r7, r3
 800a484:	fa04 f003 	lslle.w	r0, r4, r3
 800a488:	f7f6 f83c 	bl	8000504 <__aeabi_ui2d>
 800a48c:	2201      	movs	r2, #1
 800a48e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a492:	3e01      	subs	r6, #1
 800a494:	9214      	str	r2, [sp, #80]	@ 0x50
 800a496:	e777      	b.n	800a388 <_dtoa_r+0x100>
 800a498:	2301      	movs	r3, #1
 800a49a:	e7b8      	b.n	800a40e <_dtoa_r+0x186>
 800a49c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a49e:	e7b7      	b.n	800a410 <_dtoa_r+0x188>
 800a4a0:	427b      	negs	r3, r7
 800a4a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	eba8 0807 	sub.w	r8, r8, r7
 800a4aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a4ac:	e7c4      	b.n	800a438 <_dtoa_r+0x1b0>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	dc35      	bgt.n	800a524 <_dtoa_r+0x29c>
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	9300      	str	r3, [sp, #0]
 800a4bc:	9307      	str	r3, [sp, #28]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a4c2:	e00b      	b.n	800a4dc <_dtoa_r+0x254>
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e7f3      	b.n	800a4b0 <_dtoa_r+0x228>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4ce:	18fb      	adds	r3, r7, r3
 800a4d0:	9300      	str	r3, [sp, #0]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	9307      	str	r3, [sp, #28]
 800a4d8:	bfb8      	it	lt
 800a4da:	2301      	movlt	r3, #1
 800a4dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	2204      	movs	r2, #4
 800a4e4:	f102 0514 	add.w	r5, r2, #20
 800a4e8:	429d      	cmp	r5, r3
 800a4ea:	d91f      	bls.n	800a52c <_dtoa_r+0x2a4>
 800a4ec:	6041      	str	r1, [r0, #4]
 800a4ee:	4658      	mov	r0, fp
 800a4f0:	f000 fcd8 	bl	800aea4 <_Balloc>
 800a4f4:	4682      	mov	sl, r0
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	d13c      	bne.n	800a574 <_dtoa_r+0x2ec>
 800a4fa:	4b1b      	ldr	r3, [pc, #108]	@ (800a568 <_dtoa_r+0x2e0>)
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	f240 11af 	movw	r1, #431	@ 0x1af
 800a502:	e6d8      	b.n	800a2b6 <_dtoa_r+0x2e>
 800a504:	2301      	movs	r3, #1
 800a506:	e7e0      	b.n	800a4ca <_dtoa_r+0x242>
 800a508:	2401      	movs	r4, #1
 800a50a:	2300      	movs	r3, #0
 800a50c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a50e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a510:	f04f 33ff 	mov.w	r3, #4294967295
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	9307      	str	r3, [sp, #28]
 800a518:	2200      	movs	r2, #0
 800a51a:	2312      	movs	r3, #18
 800a51c:	e7d0      	b.n	800a4c0 <_dtoa_r+0x238>
 800a51e:	2301      	movs	r3, #1
 800a520:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a522:	e7f5      	b.n	800a510 <_dtoa_r+0x288>
 800a524:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a526:	9300      	str	r3, [sp, #0]
 800a528:	9307      	str	r3, [sp, #28]
 800a52a:	e7d7      	b.n	800a4dc <_dtoa_r+0x254>
 800a52c:	3101      	adds	r1, #1
 800a52e:	0052      	lsls	r2, r2, #1
 800a530:	e7d8      	b.n	800a4e4 <_dtoa_r+0x25c>
 800a532:	bf00      	nop
 800a534:	f3af 8000 	nop.w
 800a538:	636f4361 	.word	0x636f4361
 800a53c:	3fd287a7 	.word	0x3fd287a7
 800a540:	8b60c8b3 	.word	0x8b60c8b3
 800a544:	3fc68a28 	.word	0x3fc68a28
 800a548:	509f79fb 	.word	0x509f79fb
 800a54c:	3fd34413 	.word	0x3fd34413
 800a550:	08018091 	.word	0x08018091
 800a554:	080180a8 	.word	0x080180a8
 800a558:	7ff00000 	.word	0x7ff00000
 800a55c:	08018061 	.word	0x08018061
 800a560:	3ff80000 	.word	0x3ff80000
 800a564:	080181a0 	.word	0x080181a0
 800a568:	08018100 	.word	0x08018100
 800a56c:	0801808d 	.word	0x0801808d
 800a570:	08018060 	.word	0x08018060
 800a574:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a578:	6018      	str	r0, [r3, #0]
 800a57a:	9b07      	ldr	r3, [sp, #28]
 800a57c:	2b0e      	cmp	r3, #14
 800a57e:	f200 80a4 	bhi.w	800a6ca <_dtoa_r+0x442>
 800a582:	2c00      	cmp	r4, #0
 800a584:	f000 80a1 	beq.w	800a6ca <_dtoa_r+0x442>
 800a588:	2f00      	cmp	r7, #0
 800a58a:	dd33      	ble.n	800a5f4 <_dtoa_r+0x36c>
 800a58c:	4bad      	ldr	r3, [pc, #692]	@ (800a844 <_dtoa_r+0x5bc>)
 800a58e:	f007 020f 	and.w	r2, r7, #15
 800a592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a596:	ed93 7b00 	vldr	d7, [r3]
 800a59a:	05f8      	lsls	r0, r7, #23
 800a59c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a5a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a5a4:	d516      	bpl.n	800a5d4 <_dtoa_r+0x34c>
 800a5a6:	4ba8      	ldr	r3, [pc, #672]	@ (800a848 <_dtoa_r+0x5c0>)
 800a5a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5b0:	f7f6 f94c 	bl	800084c <__aeabi_ddiv>
 800a5b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5b8:	f004 040f 	and.w	r4, r4, #15
 800a5bc:	2603      	movs	r6, #3
 800a5be:	4da2      	ldr	r5, [pc, #648]	@ (800a848 <_dtoa_r+0x5c0>)
 800a5c0:	b954      	cbnz	r4, 800a5d8 <_dtoa_r+0x350>
 800a5c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5ca:	f7f6 f93f 	bl	800084c <__aeabi_ddiv>
 800a5ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5d2:	e028      	b.n	800a626 <_dtoa_r+0x39e>
 800a5d4:	2602      	movs	r6, #2
 800a5d6:	e7f2      	b.n	800a5be <_dtoa_r+0x336>
 800a5d8:	07e1      	lsls	r1, r4, #31
 800a5da:	d508      	bpl.n	800a5ee <_dtoa_r+0x366>
 800a5dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5e4:	f7f6 f808 	bl	80005f8 <__aeabi_dmul>
 800a5e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5ec:	3601      	adds	r6, #1
 800a5ee:	1064      	asrs	r4, r4, #1
 800a5f0:	3508      	adds	r5, #8
 800a5f2:	e7e5      	b.n	800a5c0 <_dtoa_r+0x338>
 800a5f4:	f000 80d2 	beq.w	800a79c <_dtoa_r+0x514>
 800a5f8:	427c      	negs	r4, r7
 800a5fa:	4b92      	ldr	r3, [pc, #584]	@ (800a844 <_dtoa_r+0x5bc>)
 800a5fc:	4d92      	ldr	r5, [pc, #584]	@ (800a848 <_dtoa_r+0x5c0>)
 800a5fe:	f004 020f 	and.w	r2, r4, #15
 800a602:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a60e:	f7f5 fff3 	bl	80005f8 <__aeabi_dmul>
 800a612:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a616:	1124      	asrs	r4, r4, #4
 800a618:	2300      	movs	r3, #0
 800a61a:	2602      	movs	r6, #2
 800a61c:	2c00      	cmp	r4, #0
 800a61e:	f040 80b2 	bne.w	800a786 <_dtoa_r+0x4fe>
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1d3      	bne.n	800a5ce <_dtoa_r+0x346>
 800a626:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a628:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f000 80b7 	beq.w	800a7a0 <_dtoa_r+0x518>
 800a632:	4b86      	ldr	r3, [pc, #536]	@ (800a84c <_dtoa_r+0x5c4>)
 800a634:	2200      	movs	r2, #0
 800a636:	4620      	mov	r0, r4
 800a638:	4629      	mov	r1, r5
 800a63a:	f7f6 fa4f 	bl	8000adc <__aeabi_dcmplt>
 800a63e:	2800      	cmp	r0, #0
 800a640:	f000 80ae 	beq.w	800a7a0 <_dtoa_r+0x518>
 800a644:	9b07      	ldr	r3, [sp, #28]
 800a646:	2b00      	cmp	r3, #0
 800a648:	f000 80aa 	beq.w	800a7a0 <_dtoa_r+0x518>
 800a64c:	9b00      	ldr	r3, [sp, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	dd37      	ble.n	800a6c2 <_dtoa_r+0x43a>
 800a652:	1e7b      	subs	r3, r7, #1
 800a654:	9304      	str	r3, [sp, #16]
 800a656:	4620      	mov	r0, r4
 800a658:	4b7d      	ldr	r3, [pc, #500]	@ (800a850 <_dtoa_r+0x5c8>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	4629      	mov	r1, r5
 800a65e:	f7f5 ffcb 	bl	80005f8 <__aeabi_dmul>
 800a662:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a666:	9c00      	ldr	r4, [sp, #0]
 800a668:	3601      	adds	r6, #1
 800a66a:	4630      	mov	r0, r6
 800a66c:	f7f5 ff5a 	bl	8000524 <__aeabi_i2d>
 800a670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a674:	f7f5 ffc0 	bl	80005f8 <__aeabi_dmul>
 800a678:	4b76      	ldr	r3, [pc, #472]	@ (800a854 <_dtoa_r+0x5cc>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	f7f5 fe06 	bl	800028c <__adddf3>
 800a680:	4605      	mov	r5, r0
 800a682:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a686:	2c00      	cmp	r4, #0
 800a688:	f040 808d 	bne.w	800a7a6 <_dtoa_r+0x51e>
 800a68c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a690:	4b71      	ldr	r3, [pc, #452]	@ (800a858 <_dtoa_r+0x5d0>)
 800a692:	2200      	movs	r2, #0
 800a694:	f7f5 fdf8 	bl	8000288 <__aeabi_dsub>
 800a698:	4602      	mov	r2, r0
 800a69a:	460b      	mov	r3, r1
 800a69c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6a0:	462a      	mov	r2, r5
 800a6a2:	4633      	mov	r3, r6
 800a6a4:	f7f6 fa38 	bl	8000b18 <__aeabi_dcmpgt>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	f040 828b 	bne.w	800abc4 <_dtoa_r+0x93c>
 800a6ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6b2:	462a      	mov	r2, r5
 800a6b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a6b8:	f7f6 fa10 	bl	8000adc <__aeabi_dcmplt>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	f040 8128 	bne.w	800a912 <_dtoa_r+0x68a>
 800a6c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a6c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a6ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f2c0 815a 	blt.w	800a986 <_dtoa_r+0x6fe>
 800a6d2:	2f0e      	cmp	r7, #14
 800a6d4:	f300 8157 	bgt.w	800a986 <_dtoa_r+0x6fe>
 800a6d8:	4b5a      	ldr	r3, [pc, #360]	@ (800a844 <_dtoa_r+0x5bc>)
 800a6da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a6de:	ed93 7b00 	vldr	d7, [r3]
 800a6e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	ed8d 7b00 	vstr	d7, [sp]
 800a6ea:	da03      	bge.n	800a6f4 <_dtoa_r+0x46c>
 800a6ec:	9b07      	ldr	r3, [sp, #28]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f340 8101 	ble.w	800a8f6 <_dtoa_r+0x66e>
 800a6f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a6f8:	4656      	mov	r6, sl
 800a6fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6fe:	4620      	mov	r0, r4
 800a700:	4629      	mov	r1, r5
 800a702:	f7f6 f8a3 	bl	800084c <__aeabi_ddiv>
 800a706:	f7f6 fa27 	bl	8000b58 <__aeabi_d2iz>
 800a70a:	4680      	mov	r8, r0
 800a70c:	f7f5 ff0a 	bl	8000524 <__aeabi_i2d>
 800a710:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a714:	f7f5 ff70 	bl	80005f8 <__aeabi_dmul>
 800a718:	4602      	mov	r2, r0
 800a71a:	460b      	mov	r3, r1
 800a71c:	4620      	mov	r0, r4
 800a71e:	4629      	mov	r1, r5
 800a720:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a724:	f7f5 fdb0 	bl	8000288 <__aeabi_dsub>
 800a728:	f806 4b01 	strb.w	r4, [r6], #1
 800a72c:	9d07      	ldr	r5, [sp, #28]
 800a72e:	eba6 040a 	sub.w	r4, r6, sl
 800a732:	42a5      	cmp	r5, r4
 800a734:	4602      	mov	r2, r0
 800a736:	460b      	mov	r3, r1
 800a738:	f040 8117 	bne.w	800a96a <_dtoa_r+0x6e2>
 800a73c:	f7f5 fda6 	bl	800028c <__adddf3>
 800a740:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a744:	4604      	mov	r4, r0
 800a746:	460d      	mov	r5, r1
 800a748:	f7f6 f9e6 	bl	8000b18 <__aeabi_dcmpgt>
 800a74c:	2800      	cmp	r0, #0
 800a74e:	f040 80f9 	bne.w	800a944 <_dtoa_r+0x6bc>
 800a752:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a756:	4620      	mov	r0, r4
 800a758:	4629      	mov	r1, r5
 800a75a:	f7f6 f9b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a75e:	b118      	cbz	r0, 800a768 <_dtoa_r+0x4e0>
 800a760:	f018 0f01 	tst.w	r8, #1
 800a764:	f040 80ee 	bne.w	800a944 <_dtoa_r+0x6bc>
 800a768:	4649      	mov	r1, r9
 800a76a:	4658      	mov	r0, fp
 800a76c:	f000 fbda 	bl	800af24 <_Bfree>
 800a770:	2300      	movs	r3, #0
 800a772:	7033      	strb	r3, [r6, #0]
 800a774:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a776:	3701      	adds	r7, #1
 800a778:	601f      	str	r7, [r3, #0]
 800a77a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f000 831d 	beq.w	800adbc <_dtoa_r+0xb34>
 800a782:	601e      	str	r6, [r3, #0]
 800a784:	e31a      	b.n	800adbc <_dtoa_r+0xb34>
 800a786:	07e2      	lsls	r2, r4, #31
 800a788:	d505      	bpl.n	800a796 <_dtoa_r+0x50e>
 800a78a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a78e:	f7f5 ff33 	bl	80005f8 <__aeabi_dmul>
 800a792:	3601      	adds	r6, #1
 800a794:	2301      	movs	r3, #1
 800a796:	1064      	asrs	r4, r4, #1
 800a798:	3508      	adds	r5, #8
 800a79a:	e73f      	b.n	800a61c <_dtoa_r+0x394>
 800a79c:	2602      	movs	r6, #2
 800a79e:	e742      	b.n	800a626 <_dtoa_r+0x39e>
 800a7a0:	9c07      	ldr	r4, [sp, #28]
 800a7a2:	9704      	str	r7, [sp, #16]
 800a7a4:	e761      	b.n	800a66a <_dtoa_r+0x3e2>
 800a7a6:	4b27      	ldr	r3, [pc, #156]	@ (800a844 <_dtoa_r+0x5bc>)
 800a7a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a7aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a7ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7b2:	4454      	add	r4, sl
 800a7b4:	2900      	cmp	r1, #0
 800a7b6:	d053      	beq.n	800a860 <_dtoa_r+0x5d8>
 800a7b8:	4928      	ldr	r1, [pc, #160]	@ (800a85c <_dtoa_r+0x5d4>)
 800a7ba:	2000      	movs	r0, #0
 800a7bc:	f7f6 f846 	bl	800084c <__aeabi_ddiv>
 800a7c0:	4633      	mov	r3, r6
 800a7c2:	462a      	mov	r2, r5
 800a7c4:	f7f5 fd60 	bl	8000288 <__aeabi_dsub>
 800a7c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a7cc:	4656      	mov	r6, sl
 800a7ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7d2:	f7f6 f9c1 	bl	8000b58 <__aeabi_d2iz>
 800a7d6:	4605      	mov	r5, r0
 800a7d8:	f7f5 fea4 	bl	8000524 <__aeabi_i2d>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	460b      	mov	r3, r1
 800a7e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7e4:	f7f5 fd50 	bl	8000288 <__aeabi_dsub>
 800a7e8:	3530      	adds	r5, #48	@ 0x30
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7f2:	f806 5b01 	strb.w	r5, [r6], #1
 800a7f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a7fa:	f7f6 f96f 	bl	8000adc <__aeabi_dcmplt>
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d171      	bne.n	800a8e6 <_dtoa_r+0x65e>
 800a802:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a806:	4911      	ldr	r1, [pc, #68]	@ (800a84c <_dtoa_r+0x5c4>)
 800a808:	2000      	movs	r0, #0
 800a80a:	f7f5 fd3d 	bl	8000288 <__aeabi_dsub>
 800a80e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a812:	f7f6 f963 	bl	8000adc <__aeabi_dcmplt>
 800a816:	2800      	cmp	r0, #0
 800a818:	f040 8095 	bne.w	800a946 <_dtoa_r+0x6be>
 800a81c:	42a6      	cmp	r6, r4
 800a81e:	f43f af50 	beq.w	800a6c2 <_dtoa_r+0x43a>
 800a822:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a826:	4b0a      	ldr	r3, [pc, #40]	@ (800a850 <_dtoa_r+0x5c8>)
 800a828:	2200      	movs	r2, #0
 800a82a:	f7f5 fee5 	bl	80005f8 <__aeabi_dmul>
 800a82e:	4b08      	ldr	r3, [pc, #32]	@ (800a850 <_dtoa_r+0x5c8>)
 800a830:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a834:	2200      	movs	r2, #0
 800a836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a83a:	f7f5 fedd 	bl	80005f8 <__aeabi_dmul>
 800a83e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a842:	e7c4      	b.n	800a7ce <_dtoa_r+0x546>
 800a844:	080181a0 	.word	0x080181a0
 800a848:	08018178 	.word	0x08018178
 800a84c:	3ff00000 	.word	0x3ff00000
 800a850:	40240000 	.word	0x40240000
 800a854:	401c0000 	.word	0x401c0000
 800a858:	40140000 	.word	0x40140000
 800a85c:	3fe00000 	.word	0x3fe00000
 800a860:	4631      	mov	r1, r6
 800a862:	4628      	mov	r0, r5
 800a864:	f7f5 fec8 	bl	80005f8 <__aeabi_dmul>
 800a868:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a86c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a86e:	4656      	mov	r6, sl
 800a870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a874:	f7f6 f970 	bl	8000b58 <__aeabi_d2iz>
 800a878:	4605      	mov	r5, r0
 800a87a:	f7f5 fe53 	bl	8000524 <__aeabi_i2d>
 800a87e:	4602      	mov	r2, r0
 800a880:	460b      	mov	r3, r1
 800a882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a886:	f7f5 fcff 	bl	8000288 <__aeabi_dsub>
 800a88a:	3530      	adds	r5, #48	@ 0x30
 800a88c:	f806 5b01 	strb.w	r5, [r6], #1
 800a890:	4602      	mov	r2, r0
 800a892:	460b      	mov	r3, r1
 800a894:	42a6      	cmp	r6, r4
 800a896:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a89a:	f04f 0200 	mov.w	r2, #0
 800a89e:	d124      	bne.n	800a8ea <_dtoa_r+0x662>
 800a8a0:	4bac      	ldr	r3, [pc, #688]	@ (800ab54 <_dtoa_r+0x8cc>)
 800a8a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a8a6:	f7f5 fcf1 	bl	800028c <__adddf3>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8b2:	f7f6 f931 	bl	8000b18 <__aeabi_dcmpgt>
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d145      	bne.n	800a946 <_dtoa_r+0x6be>
 800a8ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a8be:	49a5      	ldr	r1, [pc, #660]	@ (800ab54 <_dtoa_r+0x8cc>)
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	f7f5 fce1 	bl	8000288 <__aeabi_dsub>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8ce:	f7f6 f905 	bl	8000adc <__aeabi_dcmplt>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	f43f aef5 	beq.w	800a6c2 <_dtoa_r+0x43a>
 800a8d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a8da:	1e73      	subs	r3, r6, #1
 800a8dc:	9315      	str	r3, [sp, #84]	@ 0x54
 800a8de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a8e2:	2b30      	cmp	r3, #48	@ 0x30
 800a8e4:	d0f8      	beq.n	800a8d8 <_dtoa_r+0x650>
 800a8e6:	9f04      	ldr	r7, [sp, #16]
 800a8e8:	e73e      	b.n	800a768 <_dtoa_r+0x4e0>
 800a8ea:	4b9b      	ldr	r3, [pc, #620]	@ (800ab58 <_dtoa_r+0x8d0>)
 800a8ec:	f7f5 fe84 	bl	80005f8 <__aeabi_dmul>
 800a8f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8f4:	e7bc      	b.n	800a870 <_dtoa_r+0x5e8>
 800a8f6:	d10c      	bne.n	800a912 <_dtoa_r+0x68a>
 800a8f8:	4b98      	ldr	r3, [pc, #608]	@ (800ab5c <_dtoa_r+0x8d4>)
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a900:	f7f5 fe7a 	bl	80005f8 <__aeabi_dmul>
 800a904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a908:	f7f6 f8fc 	bl	8000b04 <__aeabi_dcmpge>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	f000 8157 	beq.w	800abc0 <_dtoa_r+0x938>
 800a912:	2400      	movs	r4, #0
 800a914:	4625      	mov	r5, r4
 800a916:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a918:	43db      	mvns	r3, r3
 800a91a:	9304      	str	r3, [sp, #16]
 800a91c:	4656      	mov	r6, sl
 800a91e:	2700      	movs	r7, #0
 800a920:	4621      	mov	r1, r4
 800a922:	4658      	mov	r0, fp
 800a924:	f000 fafe 	bl	800af24 <_Bfree>
 800a928:	2d00      	cmp	r5, #0
 800a92a:	d0dc      	beq.n	800a8e6 <_dtoa_r+0x65e>
 800a92c:	b12f      	cbz	r7, 800a93a <_dtoa_r+0x6b2>
 800a92e:	42af      	cmp	r7, r5
 800a930:	d003      	beq.n	800a93a <_dtoa_r+0x6b2>
 800a932:	4639      	mov	r1, r7
 800a934:	4658      	mov	r0, fp
 800a936:	f000 faf5 	bl	800af24 <_Bfree>
 800a93a:	4629      	mov	r1, r5
 800a93c:	4658      	mov	r0, fp
 800a93e:	f000 faf1 	bl	800af24 <_Bfree>
 800a942:	e7d0      	b.n	800a8e6 <_dtoa_r+0x65e>
 800a944:	9704      	str	r7, [sp, #16]
 800a946:	4633      	mov	r3, r6
 800a948:	461e      	mov	r6, r3
 800a94a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a94e:	2a39      	cmp	r2, #57	@ 0x39
 800a950:	d107      	bne.n	800a962 <_dtoa_r+0x6da>
 800a952:	459a      	cmp	sl, r3
 800a954:	d1f8      	bne.n	800a948 <_dtoa_r+0x6c0>
 800a956:	9a04      	ldr	r2, [sp, #16]
 800a958:	3201      	adds	r2, #1
 800a95a:	9204      	str	r2, [sp, #16]
 800a95c:	2230      	movs	r2, #48	@ 0x30
 800a95e:	f88a 2000 	strb.w	r2, [sl]
 800a962:	781a      	ldrb	r2, [r3, #0]
 800a964:	3201      	adds	r2, #1
 800a966:	701a      	strb	r2, [r3, #0]
 800a968:	e7bd      	b.n	800a8e6 <_dtoa_r+0x65e>
 800a96a:	4b7b      	ldr	r3, [pc, #492]	@ (800ab58 <_dtoa_r+0x8d0>)
 800a96c:	2200      	movs	r2, #0
 800a96e:	f7f5 fe43 	bl	80005f8 <__aeabi_dmul>
 800a972:	2200      	movs	r2, #0
 800a974:	2300      	movs	r3, #0
 800a976:	4604      	mov	r4, r0
 800a978:	460d      	mov	r5, r1
 800a97a:	f7f6 f8a5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a97e:	2800      	cmp	r0, #0
 800a980:	f43f aebb 	beq.w	800a6fa <_dtoa_r+0x472>
 800a984:	e6f0      	b.n	800a768 <_dtoa_r+0x4e0>
 800a986:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a988:	2a00      	cmp	r2, #0
 800a98a:	f000 80db 	beq.w	800ab44 <_dtoa_r+0x8bc>
 800a98e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a990:	2a01      	cmp	r2, #1
 800a992:	f300 80bf 	bgt.w	800ab14 <_dtoa_r+0x88c>
 800a996:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a998:	2a00      	cmp	r2, #0
 800a99a:	f000 80b7 	beq.w	800ab0c <_dtoa_r+0x884>
 800a99e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a9a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a9a4:	4646      	mov	r6, r8
 800a9a6:	9a08      	ldr	r2, [sp, #32]
 800a9a8:	2101      	movs	r1, #1
 800a9aa:	441a      	add	r2, r3
 800a9ac:	4658      	mov	r0, fp
 800a9ae:	4498      	add	r8, r3
 800a9b0:	9208      	str	r2, [sp, #32]
 800a9b2:	f000 fb6b 	bl	800b08c <__i2b>
 800a9b6:	4605      	mov	r5, r0
 800a9b8:	b15e      	cbz	r6, 800a9d2 <_dtoa_r+0x74a>
 800a9ba:	9b08      	ldr	r3, [sp, #32]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	dd08      	ble.n	800a9d2 <_dtoa_r+0x74a>
 800a9c0:	42b3      	cmp	r3, r6
 800a9c2:	9a08      	ldr	r2, [sp, #32]
 800a9c4:	bfa8      	it	ge
 800a9c6:	4633      	movge	r3, r6
 800a9c8:	eba8 0803 	sub.w	r8, r8, r3
 800a9cc:	1af6      	subs	r6, r6, r3
 800a9ce:	1ad3      	subs	r3, r2, r3
 800a9d0:	9308      	str	r3, [sp, #32]
 800a9d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9d4:	b1f3      	cbz	r3, 800aa14 <_dtoa_r+0x78c>
 800a9d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f000 80b7 	beq.w	800ab4c <_dtoa_r+0x8c4>
 800a9de:	b18c      	cbz	r4, 800aa04 <_dtoa_r+0x77c>
 800a9e0:	4629      	mov	r1, r5
 800a9e2:	4622      	mov	r2, r4
 800a9e4:	4658      	mov	r0, fp
 800a9e6:	f000 fc11 	bl	800b20c <__pow5mult>
 800a9ea:	464a      	mov	r2, r9
 800a9ec:	4601      	mov	r1, r0
 800a9ee:	4605      	mov	r5, r0
 800a9f0:	4658      	mov	r0, fp
 800a9f2:	f000 fb61 	bl	800b0b8 <__multiply>
 800a9f6:	4649      	mov	r1, r9
 800a9f8:	9004      	str	r0, [sp, #16]
 800a9fa:	4658      	mov	r0, fp
 800a9fc:	f000 fa92 	bl	800af24 <_Bfree>
 800aa00:	9b04      	ldr	r3, [sp, #16]
 800aa02:	4699      	mov	r9, r3
 800aa04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa06:	1b1a      	subs	r2, r3, r4
 800aa08:	d004      	beq.n	800aa14 <_dtoa_r+0x78c>
 800aa0a:	4649      	mov	r1, r9
 800aa0c:	4658      	mov	r0, fp
 800aa0e:	f000 fbfd 	bl	800b20c <__pow5mult>
 800aa12:	4681      	mov	r9, r0
 800aa14:	2101      	movs	r1, #1
 800aa16:	4658      	mov	r0, fp
 800aa18:	f000 fb38 	bl	800b08c <__i2b>
 800aa1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa1e:	4604      	mov	r4, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f000 81cf 	beq.w	800adc4 <_dtoa_r+0xb3c>
 800aa26:	461a      	mov	r2, r3
 800aa28:	4601      	mov	r1, r0
 800aa2a:	4658      	mov	r0, fp
 800aa2c:	f000 fbee 	bl	800b20c <__pow5mult>
 800aa30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	4604      	mov	r4, r0
 800aa36:	f300 8095 	bgt.w	800ab64 <_dtoa_r+0x8dc>
 800aa3a:	9b02      	ldr	r3, [sp, #8]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f040 8087 	bne.w	800ab50 <_dtoa_r+0x8c8>
 800aa42:	9b03      	ldr	r3, [sp, #12]
 800aa44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f040 8089 	bne.w	800ab60 <_dtoa_r+0x8d8>
 800aa4e:	9b03      	ldr	r3, [sp, #12]
 800aa50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aa54:	0d1b      	lsrs	r3, r3, #20
 800aa56:	051b      	lsls	r3, r3, #20
 800aa58:	b12b      	cbz	r3, 800aa66 <_dtoa_r+0x7de>
 800aa5a:	9b08      	ldr	r3, [sp, #32]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	9308      	str	r3, [sp, #32]
 800aa60:	f108 0801 	add.w	r8, r8, #1
 800aa64:	2301      	movs	r3, #1
 800aa66:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f000 81b0 	beq.w	800add0 <_dtoa_r+0xb48>
 800aa70:	6923      	ldr	r3, [r4, #16]
 800aa72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa76:	6918      	ldr	r0, [r3, #16]
 800aa78:	f000 fabc 	bl	800aff4 <__hi0bits>
 800aa7c:	f1c0 0020 	rsb	r0, r0, #32
 800aa80:	9b08      	ldr	r3, [sp, #32]
 800aa82:	4418      	add	r0, r3
 800aa84:	f010 001f 	ands.w	r0, r0, #31
 800aa88:	d077      	beq.n	800ab7a <_dtoa_r+0x8f2>
 800aa8a:	f1c0 0320 	rsb	r3, r0, #32
 800aa8e:	2b04      	cmp	r3, #4
 800aa90:	dd6b      	ble.n	800ab6a <_dtoa_r+0x8e2>
 800aa92:	9b08      	ldr	r3, [sp, #32]
 800aa94:	f1c0 001c 	rsb	r0, r0, #28
 800aa98:	4403      	add	r3, r0
 800aa9a:	4480      	add	r8, r0
 800aa9c:	4406      	add	r6, r0
 800aa9e:	9308      	str	r3, [sp, #32]
 800aaa0:	f1b8 0f00 	cmp.w	r8, #0
 800aaa4:	dd05      	ble.n	800aab2 <_dtoa_r+0x82a>
 800aaa6:	4649      	mov	r1, r9
 800aaa8:	4642      	mov	r2, r8
 800aaaa:	4658      	mov	r0, fp
 800aaac:	f000 fc08 	bl	800b2c0 <__lshift>
 800aab0:	4681      	mov	r9, r0
 800aab2:	9b08      	ldr	r3, [sp, #32]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	dd05      	ble.n	800aac4 <_dtoa_r+0x83c>
 800aab8:	4621      	mov	r1, r4
 800aaba:	461a      	mov	r2, r3
 800aabc:	4658      	mov	r0, fp
 800aabe:	f000 fbff 	bl	800b2c0 <__lshift>
 800aac2:	4604      	mov	r4, r0
 800aac4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d059      	beq.n	800ab7e <_dtoa_r+0x8f6>
 800aaca:	4621      	mov	r1, r4
 800aacc:	4648      	mov	r0, r9
 800aace:	f000 fc63 	bl	800b398 <__mcmp>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	da53      	bge.n	800ab7e <_dtoa_r+0x8f6>
 800aad6:	1e7b      	subs	r3, r7, #1
 800aad8:	9304      	str	r3, [sp, #16]
 800aada:	4649      	mov	r1, r9
 800aadc:	2300      	movs	r3, #0
 800aade:	220a      	movs	r2, #10
 800aae0:	4658      	mov	r0, fp
 800aae2:	f000 fa41 	bl	800af68 <__multadd>
 800aae6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aae8:	4681      	mov	r9, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	f000 8172 	beq.w	800add4 <_dtoa_r+0xb4c>
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	4629      	mov	r1, r5
 800aaf4:	220a      	movs	r2, #10
 800aaf6:	4658      	mov	r0, fp
 800aaf8:	f000 fa36 	bl	800af68 <__multadd>
 800aafc:	9b00      	ldr	r3, [sp, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	4605      	mov	r5, r0
 800ab02:	dc67      	bgt.n	800abd4 <_dtoa_r+0x94c>
 800ab04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	dc41      	bgt.n	800ab8e <_dtoa_r+0x906>
 800ab0a:	e063      	b.n	800abd4 <_dtoa_r+0x94c>
 800ab0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ab0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ab12:	e746      	b.n	800a9a2 <_dtoa_r+0x71a>
 800ab14:	9b07      	ldr	r3, [sp, #28]
 800ab16:	1e5c      	subs	r4, r3, #1
 800ab18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab1a:	42a3      	cmp	r3, r4
 800ab1c:	bfbf      	itttt	lt
 800ab1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ab20:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ab22:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ab24:	1ae3      	sublt	r3, r4, r3
 800ab26:	bfb4      	ite	lt
 800ab28:	18d2      	addlt	r2, r2, r3
 800ab2a:	1b1c      	subge	r4, r3, r4
 800ab2c:	9b07      	ldr	r3, [sp, #28]
 800ab2e:	bfbc      	itt	lt
 800ab30:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ab32:	2400      	movlt	r4, #0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	bfb5      	itete	lt
 800ab38:	eba8 0603 	sublt.w	r6, r8, r3
 800ab3c:	9b07      	ldrge	r3, [sp, #28]
 800ab3e:	2300      	movlt	r3, #0
 800ab40:	4646      	movge	r6, r8
 800ab42:	e730      	b.n	800a9a6 <_dtoa_r+0x71e>
 800ab44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ab46:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ab48:	4646      	mov	r6, r8
 800ab4a:	e735      	b.n	800a9b8 <_dtoa_r+0x730>
 800ab4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab4e:	e75c      	b.n	800aa0a <_dtoa_r+0x782>
 800ab50:	2300      	movs	r3, #0
 800ab52:	e788      	b.n	800aa66 <_dtoa_r+0x7de>
 800ab54:	3fe00000 	.word	0x3fe00000
 800ab58:	40240000 	.word	0x40240000
 800ab5c:	40140000 	.word	0x40140000
 800ab60:	9b02      	ldr	r3, [sp, #8]
 800ab62:	e780      	b.n	800aa66 <_dtoa_r+0x7de>
 800ab64:	2300      	movs	r3, #0
 800ab66:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab68:	e782      	b.n	800aa70 <_dtoa_r+0x7e8>
 800ab6a:	d099      	beq.n	800aaa0 <_dtoa_r+0x818>
 800ab6c:	9a08      	ldr	r2, [sp, #32]
 800ab6e:	331c      	adds	r3, #28
 800ab70:	441a      	add	r2, r3
 800ab72:	4498      	add	r8, r3
 800ab74:	441e      	add	r6, r3
 800ab76:	9208      	str	r2, [sp, #32]
 800ab78:	e792      	b.n	800aaa0 <_dtoa_r+0x818>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	e7f6      	b.n	800ab6c <_dtoa_r+0x8e4>
 800ab7e:	9b07      	ldr	r3, [sp, #28]
 800ab80:	9704      	str	r7, [sp, #16]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	dc20      	bgt.n	800abc8 <_dtoa_r+0x940>
 800ab86:	9300      	str	r3, [sp, #0]
 800ab88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	dd1e      	ble.n	800abcc <_dtoa_r+0x944>
 800ab8e:	9b00      	ldr	r3, [sp, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f47f aec0 	bne.w	800a916 <_dtoa_r+0x68e>
 800ab96:	4621      	mov	r1, r4
 800ab98:	2205      	movs	r2, #5
 800ab9a:	4658      	mov	r0, fp
 800ab9c:	f000 f9e4 	bl	800af68 <__multadd>
 800aba0:	4601      	mov	r1, r0
 800aba2:	4604      	mov	r4, r0
 800aba4:	4648      	mov	r0, r9
 800aba6:	f000 fbf7 	bl	800b398 <__mcmp>
 800abaa:	2800      	cmp	r0, #0
 800abac:	f77f aeb3 	ble.w	800a916 <_dtoa_r+0x68e>
 800abb0:	4656      	mov	r6, sl
 800abb2:	2331      	movs	r3, #49	@ 0x31
 800abb4:	f806 3b01 	strb.w	r3, [r6], #1
 800abb8:	9b04      	ldr	r3, [sp, #16]
 800abba:	3301      	adds	r3, #1
 800abbc:	9304      	str	r3, [sp, #16]
 800abbe:	e6ae      	b.n	800a91e <_dtoa_r+0x696>
 800abc0:	9c07      	ldr	r4, [sp, #28]
 800abc2:	9704      	str	r7, [sp, #16]
 800abc4:	4625      	mov	r5, r4
 800abc6:	e7f3      	b.n	800abb0 <_dtoa_r+0x928>
 800abc8:	9b07      	ldr	r3, [sp, #28]
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abce:	2b00      	cmp	r3, #0
 800abd0:	f000 8104 	beq.w	800addc <_dtoa_r+0xb54>
 800abd4:	2e00      	cmp	r6, #0
 800abd6:	dd05      	ble.n	800abe4 <_dtoa_r+0x95c>
 800abd8:	4629      	mov	r1, r5
 800abda:	4632      	mov	r2, r6
 800abdc:	4658      	mov	r0, fp
 800abde:	f000 fb6f 	bl	800b2c0 <__lshift>
 800abe2:	4605      	mov	r5, r0
 800abe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d05a      	beq.n	800aca0 <_dtoa_r+0xa18>
 800abea:	6869      	ldr	r1, [r5, #4]
 800abec:	4658      	mov	r0, fp
 800abee:	f000 f959 	bl	800aea4 <_Balloc>
 800abf2:	4606      	mov	r6, r0
 800abf4:	b928      	cbnz	r0, 800ac02 <_dtoa_r+0x97a>
 800abf6:	4b84      	ldr	r3, [pc, #528]	@ (800ae08 <_dtoa_r+0xb80>)
 800abf8:	4602      	mov	r2, r0
 800abfa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800abfe:	f7ff bb5a 	b.w	800a2b6 <_dtoa_r+0x2e>
 800ac02:	692a      	ldr	r2, [r5, #16]
 800ac04:	3202      	adds	r2, #2
 800ac06:	0092      	lsls	r2, r2, #2
 800ac08:	f105 010c 	add.w	r1, r5, #12
 800ac0c:	300c      	adds	r0, #12
 800ac0e:	f7ff faa4 	bl	800a15a <memcpy>
 800ac12:	2201      	movs	r2, #1
 800ac14:	4631      	mov	r1, r6
 800ac16:	4658      	mov	r0, fp
 800ac18:	f000 fb52 	bl	800b2c0 <__lshift>
 800ac1c:	f10a 0301 	add.w	r3, sl, #1
 800ac20:	9307      	str	r3, [sp, #28]
 800ac22:	9b00      	ldr	r3, [sp, #0]
 800ac24:	4453      	add	r3, sl
 800ac26:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac28:	9b02      	ldr	r3, [sp, #8]
 800ac2a:	f003 0301 	and.w	r3, r3, #1
 800ac2e:	462f      	mov	r7, r5
 800ac30:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac32:	4605      	mov	r5, r0
 800ac34:	9b07      	ldr	r3, [sp, #28]
 800ac36:	4621      	mov	r1, r4
 800ac38:	3b01      	subs	r3, #1
 800ac3a:	4648      	mov	r0, r9
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	f7ff fa9a 	bl	800a176 <quorem>
 800ac42:	4639      	mov	r1, r7
 800ac44:	9002      	str	r0, [sp, #8]
 800ac46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ac4a:	4648      	mov	r0, r9
 800ac4c:	f000 fba4 	bl	800b398 <__mcmp>
 800ac50:	462a      	mov	r2, r5
 800ac52:	9008      	str	r0, [sp, #32]
 800ac54:	4621      	mov	r1, r4
 800ac56:	4658      	mov	r0, fp
 800ac58:	f000 fbba 	bl	800b3d0 <__mdiff>
 800ac5c:	68c2      	ldr	r2, [r0, #12]
 800ac5e:	4606      	mov	r6, r0
 800ac60:	bb02      	cbnz	r2, 800aca4 <_dtoa_r+0xa1c>
 800ac62:	4601      	mov	r1, r0
 800ac64:	4648      	mov	r0, r9
 800ac66:	f000 fb97 	bl	800b398 <__mcmp>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	4631      	mov	r1, r6
 800ac6e:	4658      	mov	r0, fp
 800ac70:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac72:	f000 f957 	bl	800af24 <_Bfree>
 800ac76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac7a:	9e07      	ldr	r6, [sp, #28]
 800ac7c:	ea43 0102 	orr.w	r1, r3, r2
 800ac80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac82:	4319      	orrs	r1, r3
 800ac84:	d110      	bne.n	800aca8 <_dtoa_r+0xa20>
 800ac86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac8a:	d029      	beq.n	800ace0 <_dtoa_r+0xa58>
 800ac8c:	9b08      	ldr	r3, [sp, #32]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	dd02      	ble.n	800ac98 <_dtoa_r+0xa10>
 800ac92:	9b02      	ldr	r3, [sp, #8]
 800ac94:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ac98:	9b00      	ldr	r3, [sp, #0]
 800ac9a:	f883 8000 	strb.w	r8, [r3]
 800ac9e:	e63f      	b.n	800a920 <_dtoa_r+0x698>
 800aca0:	4628      	mov	r0, r5
 800aca2:	e7bb      	b.n	800ac1c <_dtoa_r+0x994>
 800aca4:	2201      	movs	r2, #1
 800aca6:	e7e1      	b.n	800ac6c <_dtoa_r+0x9e4>
 800aca8:	9b08      	ldr	r3, [sp, #32]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	db04      	blt.n	800acb8 <_dtoa_r+0xa30>
 800acae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800acb0:	430b      	orrs	r3, r1
 800acb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800acb4:	430b      	orrs	r3, r1
 800acb6:	d120      	bne.n	800acfa <_dtoa_r+0xa72>
 800acb8:	2a00      	cmp	r2, #0
 800acba:	dded      	ble.n	800ac98 <_dtoa_r+0xa10>
 800acbc:	4649      	mov	r1, r9
 800acbe:	2201      	movs	r2, #1
 800acc0:	4658      	mov	r0, fp
 800acc2:	f000 fafd 	bl	800b2c0 <__lshift>
 800acc6:	4621      	mov	r1, r4
 800acc8:	4681      	mov	r9, r0
 800acca:	f000 fb65 	bl	800b398 <__mcmp>
 800acce:	2800      	cmp	r0, #0
 800acd0:	dc03      	bgt.n	800acda <_dtoa_r+0xa52>
 800acd2:	d1e1      	bne.n	800ac98 <_dtoa_r+0xa10>
 800acd4:	f018 0f01 	tst.w	r8, #1
 800acd8:	d0de      	beq.n	800ac98 <_dtoa_r+0xa10>
 800acda:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800acde:	d1d8      	bne.n	800ac92 <_dtoa_r+0xa0a>
 800ace0:	9a00      	ldr	r2, [sp, #0]
 800ace2:	2339      	movs	r3, #57	@ 0x39
 800ace4:	7013      	strb	r3, [r2, #0]
 800ace6:	4633      	mov	r3, r6
 800ace8:	461e      	mov	r6, r3
 800acea:	3b01      	subs	r3, #1
 800acec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800acf0:	2a39      	cmp	r2, #57	@ 0x39
 800acf2:	d052      	beq.n	800ad9a <_dtoa_r+0xb12>
 800acf4:	3201      	adds	r2, #1
 800acf6:	701a      	strb	r2, [r3, #0]
 800acf8:	e612      	b.n	800a920 <_dtoa_r+0x698>
 800acfa:	2a00      	cmp	r2, #0
 800acfc:	dd07      	ble.n	800ad0e <_dtoa_r+0xa86>
 800acfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ad02:	d0ed      	beq.n	800ace0 <_dtoa_r+0xa58>
 800ad04:	9a00      	ldr	r2, [sp, #0]
 800ad06:	f108 0301 	add.w	r3, r8, #1
 800ad0a:	7013      	strb	r3, [r2, #0]
 800ad0c:	e608      	b.n	800a920 <_dtoa_r+0x698>
 800ad0e:	9b07      	ldr	r3, [sp, #28]
 800ad10:	9a07      	ldr	r2, [sp, #28]
 800ad12:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ad16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d028      	beq.n	800ad6e <_dtoa_r+0xae6>
 800ad1c:	4649      	mov	r1, r9
 800ad1e:	2300      	movs	r3, #0
 800ad20:	220a      	movs	r2, #10
 800ad22:	4658      	mov	r0, fp
 800ad24:	f000 f920 	bl	800af68 <__multadd>
 800ad28:	42af      	cmp	r7, r5
 800ad2a:	4681      	mov	r9, r0
 800ad2c:	f04f 0300 	mov.w	r3, #0
 800ad30:	f04f 020a 	mov.w	r2, #10
 800ad34:	4639      	mov	r1, r7
 800ad36:	4658      	mov	r0, fp
 800ad38:	d107      	bne.n	800ad4a <_dtoa_r+0xac2>
 800ad3a:	f000 f915 	bl	800af68 <__multadd>
 800ad3e:	4607      	mov	r7, r0
 800ad40:	4605      	mov	r5, r0
 800ad42:	9b07      	ldr	r3, [sp, #28]
 800ad44:	3301      	adds	r3, #1
 800ad46:	9307      	str	r3, [sp, #28]
 800ad48:	e774      	b.n	800ac34 <_dtoa_r+0x9ac>
 800ad4a:	f000 f90d 	bl	800af68 <__multadd>
 800ad4e:	4629      	mov	r1, r5
 800ad50:	4607      	mov	r7, r0
 800ad52:	2300      	movs	r3, #0
 800ad54:	220a      	movs	r2, #10
 800ad56:	4658      	mov	r0, fp
 800ad58:	f000 f906 	bl	800af68 <__multadd>
 800ad5c:	4605      	mov	r5, r0
 800ad5e:	e7f0      	b.n	800ad42 <_dtoa_r+0xaba>
 800ad60:	9b00      	ldr	r3, [sp, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	bfcc      	ite	gt
 800ad66:	461e      	movgt	r6, r3
 800ad68:	2601      	movle	r6, #1
 800ad6a:	4456      	add	r6, sl
 800ad6c:	2700      	movs	r7, #0
 800ad6e:	4649      	mov	r1, r9
 800ad70:	2201      	movs	r2, #1
 800ad72:	4658      	mov	r0, fp
 800ad74:	f000 faa4 	bl	800b2c0 <__lshift>
 800ad78:	4621      	mov	r1, r4
 800ad7a:	4681      	mov	r9, r0
 800ad7c:	f000 fb0c 	bl	800b398 <__mcmp>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	dcb0      	bgt.n	800ace6 <_dtoa_r+0xa5e>
 800ad84:	d102      	bne.n	800ad8c <_dtoa_r+0xb04>
 800ad86:	f018 0f01 	tst.w	r8, #1
 800ad8a:	d1ac      	bne.n	800ace6 <_dtoa_r+0xa5e>
 800ad8c:	4633      	mov	r3, r6
 800ad8e:	461e      	mov	r6, r3
 800ad90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad94:	2a30      	cmp	r2, #48	@ 0x30
 800ad96:	d0fa      	beq.n	800ad8e <_dtoa_r+0xb06>
 800ad98:	e5c2      	b.n	800a920 <_dtoa_r+0x698>
 800ad9a:	459a      	cmp	sl, r3
 800ad9c:	d1a4      	bne.n	800ace8 <_dtoa_r+0xa60>
 800ad9e:	9b04      	ldr	r3, [sp, #16]
 800ada0:	3301      	adds	r3, #1
 800ada2:	9304      	str	r3, [sp, #16]
 800ada4:	2331      	movs	r3, #49	@ 0x31
 800ada6:	f88a 3000 	strb.w	r3, [sl]
 800adaa:	e5b9      	b.n	800a920 <_dtoa_r+0x698>
 800adac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800adae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ae0c <_dtoa_r+0xb84>
 800adb2:	b11b      	cbz	r3, 800adbc <_dtoa_r+0xb34>
 800adb4:	f10a 0308 	add.w	r3, sl, #8
 800adb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800adba:	6013      	str	r3, [r2, #0]
 800adbc:	4650      	mov	r0, sl
 800adbe:	b019      	add	sp, #100	@ 0x64
 800adc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	f77f ae37 	ble.w	800aa3a <_dtoa_r+0x7b2>
 800adcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adce:	930a      	str	r3, [sp, #40]	@ 0x28
 800add0:	2001      	movs	r0, #1
 800add2:	e655      	b.n	800aa80 <_dtoa_r+0x7f8>
 800add4:	9b00      	ldr	r3, [sp, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	f77f aed6 	ble.w	800ab88 <_dtoa_r+0x900>
 800addc:	4656      	mov	r6, sl
 800adde:	4621      	mov	r1, r4
 800ade0:	4648      	mov	r0, r9
 800ade2:	f7ff f9c8 	bl	800a176 <quorem>
 800ade6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800adea:	f806 8b01 	strb.w	r8, [r6], #1
 800adee:	9b00      	ldr	r3, [sp, #0]
 800adf0:	eba6 020a 	sub.w	r2, r6, sl
 800adf4:	4293      	cmp	r3, r2
 800adf6:	ddb3      	ble.n	800ad60 <_dtoa_r+0xad8>
 800adf8:	4649      	mov	r1, r9
 800adfa:	2300      	movs	r3, #0
 800adfc:	220a      	movs	r2, #10
 800adfe:	4658      	mov	r0, fp
 800ae00:	f000 f8b2 	bl	800af68 <__multadd>
 800ae04:	4681      	mov	r9, r0
 800ae06:	e7ea      	b.n	800adde <_dtoa_r+0xb56>
 800ae08:	08018100 	.word	0x08018100
 800ae0c:	08018084 	.word	0x08018084

0800ae10 <_free_r>:
 800ae10:	b538      	push	{r3, r4, r5, lr}
 800ae12:	4605      	mov	r5, r0
 800ae14:	2900      	cmp	r1, #0
 800ae16:	d041      	beq.n	800ae9c <_free_r+0x8c>
 800ae18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae1c:	1f0c      	subs	r4, r1, #4
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	bfb8      	it	lt
 800ae22:	18e4      	addlt	r4, r4, r3
 800ae24:	f7fe fa3a 	bl	800929c <__malloc_lock>
 800ae28:	4a1d      	ldr	r2, [pc, #116]	@ (800aea0 <_free_r+0x90>)
 800ae2a:	6813      	ldr	r3, [r2, #0]
 800ae2c:	b933      	cbnz	r3, 800ae3c <_free_r+0x2c>
 800ae2e:	6063      	str	r3, [r4, #4]
 800ae30:	6014      	str	r4, [r2, #0]
 800ae32:	4628      	mov	r0, r5
 800ae34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae38:	f7fe ba36 	b.w	80092a8 <__malloc_unlock>
 800ae3c:	42a3      	cmp	r3, r4
 800ae3e:	d908      	bls.n	800ae52 <_free_r+0x42>
 800ae40:	6820      	ldr	r0, [r4, #0]
 800ae42:	1821      	adds	r1, r4, r0
 800ae44:	428b      	cmp	r3, r1
 800ae46:	bf01      	itttt	eq
 800ae48:	6819      	ldreq	r1, [r3, #0]
 800ae4a:	685b      	ldreq	r3, [r3, #4]
 800ae4c:	1809      	addeq	r1, r1, r0
 800ae4e:	6021      	streq	r1, [r4, #0]
 800ae50:	e7ed      	b.n	800ae2e <_free_r+0x1e>
 800ae52:	461a      	mov	r2, r3
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	b10b      	cbz	r3, 800ae5c <_free_r+0x4c>
 800ae58:	42a3      	cmp	r3, r4
 800ae5a:	d9fa      	bls.n	800ae52 <_free_r+0x42>
 800ae5c:	6811      	ldr	r1, [r2, #0]
 800ae5e:	1850      	adds	r0, r2, r1
 800ae60:	42a0      	cmp	r0, r4
 800ae62:	d10b      	bne.n	800ae7c <_free_r+0x6c>
 800ae64:	6820      	ldr	r0, [r4, #0]
 800ae66:	4401      	add	r1, r0
 800ae68:	1850      	adds	r0, r2, r1
 800ae6a:	4283      	cmp	r3, r0
 800ae6c:	6011      	str	r1, [r2, #0]
 800ae6e:	d1e0      	bne.n	800ae32 <_free_r+0x22>
 800ae70:	6818      	ldr	r0, [r3, #0]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	6053      	str	r3, [r2, #4]
 800ae76:	4408      	add	r0, r1
 800ae78:	6010      	str	r0, [r2, #0]
 800ae7a:	e7da      	b.n	800ae32 <_free_r+0x22>
 800ae7c:	d902      	bls.n	800ae84 <_free_r+0x74>
 800ae7e:	230c      	movs	r3, #12
 800ae80:	602b      	str	r3, [r5, #0]
 800ae82:	e7d6      	b.n	800ae32 <_free_r+0x22>
 800ae84:	6820      	ldr	r0, [r4, #0]
 800ae86:	1821      	adds	r1, r4, r0
 800ae88:	428b      	cmp	r3, r1
 800ae8a:	bf04      	itt	eq
 800ae8c:	6819      	ldreq	r1, [r3, #0]
 800ae8e:	685b      	ldreq	r3, [r3, #4]
 800ae90:	6063      	str	r3, [r4, #4]
 800ae92:	bf04      	itt	eq
 800ae94:	1809      	addeq	r1, r1, r0
 800ae96:	6021      	streq	r1, [r4, #0]
 800ae98:	6054      	str	r4, [r2, #4]
 800ae9a:	e7ca      	b.n	800ae32 <_free_r+0x22>
 800ae9c:	bd38      	pop	{r3, r4, r5, pc}
 800ae9e:	bf00      	nop
 800aea0:	20001d20 	.word	0x20001d20

0800aea4 <_Balloc>:
 800aea4:	b570      	push	{r4, r5, r6, lr}
 800aea6:	69c6      	ldr	r6, [r0, #28]
 800aea8:	4604      	mov	r4, r0
 800aeaa:	460d      	mov	r5, r1
 800aeac:	b976      	cbnz	r6, 800aecc <_Balloc+0x28>
 800aeae:	2010      	movs	r0, #16
 800aeb0:	f7fe f94a 	bl	8009148 <malloc>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	61e0      	str	r0, [r4, #28]
 800aeb8:	b920      	cbnz	r0, 800aec4 <_Balloc+0x20>
 800aeba:	4b18      	ldr	r3, [pc, #96]	@ (800af1c <_Balloc+0x78>)
 800aebc:	4818      	ldr	r0, [pc, #96]	@ (800af20 <_Balloc+0x7c>)
 800aebe:	216b      	movs	r1, #107	@ 0x6b
 800aec0:	f000 ff5e 	bl	800bd80 <__assert_func>
 800aec4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aec8:	6006      	str	r6, [r0, #0]
 800aeca:	60c6      	str	r6, [r0, #12]
 800aecc:	69e6      	ldr	r6, [r4, #28]
 800aece:	68f3      	ldr	r3, [r6, #12]
 800aed0:	b183      	cbz	r3, 800aef4 <_Balloc+0x50>
 800aed2:	69e3      	ldr	r3, [r4, #28]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aeda:	b9b8      	cbnz	r0, 800af0c <_Balloc+0x68>
 800aedc:	2101      	movs	r1, #1
 800aede:	fa01 f605 	lsl.w	r6, r1, r5
 800aee2:	1d72      	adds	r2, r6, #5
 800aee4:	0092      	lsls	r2, r2, #2
 800aee6:	4620      	mov	r0, r4
 800aee8:	f000 ff68 	bl	800bdbc <_calloc_r>
 800aeec:	b160      	cbz	r0, 800af08 <_Balloc+0x64>
 800aeee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aef2:	e00e      	b.n	800af12 <_Balloc+0x6e>
 800aef4:	2221      	movs	r2, #33	@ 0x21
 800aef6:	2104      	movs	r1, #4
 800aef8:	4620      	mov	r0, r4
 800aefa:	f000 ff5f 	bl	800bdbc <_calloc_r>
 800aefe:	69e3      	ldr	r3, [r4, #28]
 800af00:	60f0      	str	r0, [r6, #12]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d1e4      	bne.n	800aed2 <_Balloc+0x2e>
 800af08:	2000      	movs	r0, #0
 800af0a:	bd70      	pop	{r4, r5, r6, pc}
 800af0c:	6802      	ldr	r2, [r0, #0]
 800af0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af12:	2300      	movs	r3, #0
 800af14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af18:	e7f7      	b.n	800af0a <_Balloc+0x66>
 800af1a:	bf00      	nop
 800af1c:	08018091 	.word	0x08018091
 800af20:	08018111 	.word	0x08018111

0800af24 <_Bfree>:
 800af24:	b570      	push	{r4, r5, r6, lr}
 800af26:	69c6      	ldr	r6, [r0, #28]
 800af28:	4605      	mov	r5, r0
 800af2a:	460c      	mov	r4, r1
 800af2c:	b976      	cbnz	r6, 800af4c <_Bfree+0x28>
 800af2e:	2010      	movs	r0, #16
 800af30:	f7fe f90a 	bl	8009148 <malloc>
 800af34:	4602      	mov	r2, r0
 800af36:	61e8      	str	r0, [r5, #28]
 800af38:	b920      	cbnz	r0, 800af44 <_Bfree+0x20>
 800af3a:	4b09      	ldr	r3, [pc, #36]	@ (800af60 <_Bfree+0x3c>)
 800af3c:	4809      	ldr	r0, [pc, #36]	@ (800af64 <_Bfree+0x40>)
 800af3e:	218f      	movs	r1, #143	@ 0x8f
 800af40:	f000 ff1e 	bl	800bd80 <__assert_func>
 800af44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af48:	6006      	str	r6, [r0, #0]
 800af4a:	60c6      	str	r6, [r0, #12]
 800af4c:	b13c      	cbz	r4, 800af5e <_Bfree+0x3a>
 800af4e:	69eb      	ldr	r3, [r5, #28]
 800af50:	6862      	ldr	r2, [r4, #4]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af58:	6021      	str	r1, [r4, #0]
 800af5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af5e:	bd70      	pop	{r4, r5, r6, pc}
 800af60:	08018091 	.word	0x08018091
 800af64:	08018111 	.word	0x08018111

0800af68 <__multadd>:
 800af68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af6c:	690d      	ldr	r5, [r1, #16]
 800af6e:	4607      	mov	r7, r0
 800af70:	460c      	mov	r4, r1
 800af72:	461e      	mov	r6, r3
 800af74:	f101 0c14 	add.w	ip, r1, #20
 800af78:	2000      	movs	r0, #0
 800af7a:	f8dc 3000 	ldr.w	r3, [ip]
 800af7e:	b299      	uxth	r1, r3
 800af80:	fb02 6101 	mla	r1, r2, r1, r6
 800af84:	0c1e      	lsrs	r6, r3, #16
 800af86:	0c0b      	lsrs	r3, r1, #16
 800af88:	fb02 3306 	mla	r3, r2, r6, r3
 800af8c:	b289      	uxth	r1, r1
 800af8e:	3001      	adds	r0, #1
 800af90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af94:	4285      	cmp	r5, r0
 800af96:	f84c 1b04 	str.w	r1, [ip], #4
 800af9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af9e:	dcec      	bgt.n	800af7a <__multadd+0x12>
 800afa0:	b30e      	cbz	r6, 800afe6 <__multadd+0x7e>
 800afa2:	68a3      	ldr	r3, [r4, #8]
 800afa4:	42ab      	cmp	r3, r5
 800afa6:	dc19      	bgt.n	800afdc <__multadd+0x74>
 800afa8:	6861      	ldr	r1, [r4, #4]
 800afaa:	4638      	mov	r0, r7
 800afac:	3101      	adds	r1, #1
 800afae:	f7ff ff79 	bl	800aea4 <_Balloc>
 800afb2:	4680      	mov	r8, r0
 800afb4:	b928      	cbnz	r0, 800afc2 <__multadd+0x5a>
 800afb6:	4602      	mov	r2, r0
 800afb8:	4b0c      	ldr	r3, [pc, #48]	@ (800afec <__multadd+0x84>)
 800afba:	480d      	ldr	r0, [pc, #52]	@ (800aff0 <__multadd+0x88>)
 800afbc:	21ba      	movs	r1, #186	@ 0xba
 800afbe:	f000 fedf 	bl	800bd80 <__assert_func>
 800afc2:	6922      	ldr	r2, [r4, #16]
 800afc4:	3202      	adds	r2, #2
 800afc6:	f104 010c 	add.w	r1, r4, #12
 800afca:	0092      	lsls	r2, r2, #2
 800afcc:	300c      	adds	r0, #12
 800afce:	f7ff f8c4 	bl	800a15a <memcpy>
 800afd2:	4621      	mov	r1, r4
 800afd4:	4638      	mov	r0, r7
 800afd6:	f7ff ffa5 	bl	800af24 <_Bfree>
 800afda:	4644      	mov	r4, r8
 800afdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800afe0:	3501      	adds	r5, #1
 800afe2:	615e      	str	r6, [r3, #20]
 800afe4:	6125      	str	r5, [r4, #16]
 800afe6:	4620      	mov	r0, r4
 800afe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afec:	08018100 	.word	0x08018100
 800aff0:	08018111 	.word	0x08018111

0800aff4 <__hi0bits>:
 800aff4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aff8:	4603      	mov	r3, r0
 800affa:	bf36      	itet	cc
 800affc:	0403      	lslcc	r3, r0, #16
 800affe:	2000      	movcs	r0, #0
 800b000:	2010      	movcc	r0, #16
 800b002:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b006:	bf3c      	itt	cc
 800b008:	021b      	lslcc	r3, r3, #8
 800b00a:	3008      	addcc	r0, #8
 800b00c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b010:	bf3c      	itt	cc
 800b012:	011b      	lslcc	r3, r3, #4
 800b014:	3004      	addcc	r0, #4
 800b016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b01a:	bf3c      	itt	cc
 800b01c:	009b      	lslcc	r3, r3, #2
 800b01e:	3002      	addcc	r0, #2
 800b020:	2b00      	cmp	r3, #0
 800b022:	db05      	blt.n	800b030 <__hi0bits+0x3c>
 800b024:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b028:	f100 0001 	add.w	r0, r0, #1
 800b02c:	bf08      	it	eq
 800b02e:	2020      	moveq	r0, #32
 800b030:	4770      	bx	lr

0800b032 <__lo0bits>:
 800b032:	6803      	ldr	r3, [r0, #0]
 800b034:	4602      	mov	r2, r0
 800b036:	f013 0007 	ands.w	r0, r3, #7
 800b03a:	d00b      	beq.n	800b054 <__lo0bits+0x22>
 800b03c:	07d9      	lsls	r1, r3, #31
 800b03e:	d421      	bmi.n	800b084 <__lo0bits+0x52>
 800b040:	0798      	lsls	r0, r3, #30
 800b042:	bf49      	itett	mi
 800b044:	085b      	lsrmi	r3, r3, #1
 800b046:	089b      	lsrpl	r3, r3, #2
 800b048:	2001      	movmi	r0, #1
 800b04a:	6013      	strmi	r3, [r2, #0]
 800b04c:	bf5c      	itt	pl
 800b04e:	6013      	strpl	r3, [r2, #0]
 800b050:	2002      	movpl	r0, #2
 800b052:	4770      	bx	lr
 800b054:	b299      	uxth	r1, r3
 800b056:	b909      	cbnz	r1, 800b05c <__lo0bits+0x2a>
 800b058:	0c1b      	lsrs	r3, r3, #16
 800b05a:	2010      	movs	r0, #16
 800b05c:	b2d9      	uxtb	r1, r3
 800b05e:	b909      	cbnz	r1, 800b064 <__lo0bits+0x32>
 800b060:	3008      	adds	r0, #8
 800b062:	0a1b      	lsrs	r3, r3, #8
 800b064:	0719      	lsls	r1, r3, #28
 800b066:	bf04      	itt	eq
 800b068:	091b      	lsreq	r3, r3, #4
 800b06a:	3004      	addeq	r0, #4
 800b06c:	0799      	lsls	r1, r3, #30
 800b06e:	bf04      	itt	eq
 800b070:	089b      	lsreq	r3, r3, #2
 800b072:	3002      	addeq	r0, #2
 800b074:	07d9      	lsls	r1, r3, #31
 800b076:	d403      	bmi.n	800b080 <__lo0bits+0x4e>
 800b078:	085b      	lsrs	r3, r3, #1
 800b07a:	f100 0001 	add.w	r0, r0, #1
 800b07e:	d003      	beq.n	800b088 <__lo0bits+0x56>
 800b080:	6013      	str	r3, [r2, #0]
 800b082:	4770      	bx	lr
 800b084:	2000      	movs	r0, #0
 800b086:	4770      	bx	lr
 800b088:	2020      	movs	r0, #32
 800b08a:	4770      	bx	lr

0800b08c <__i2b>:
 800b08c:	b510      	push	{r4, lr}
 800b08e:	460c      	mov	r4, r1
 800b090:	2101      	movs	r1, #1
 800b092:	f7ff ff07 	bl	800aea4 <_Balloc>
 800b096:	4602      	mov	r2, r0
 800b098:	b928      	cbnz	r0, 800b0a6 <__i2b+0x1a>
 800b09a:	4b05      	ldr	r3, [pc, #20]	@ (800b0b0 <__i2b+0x24>)
 800b09c:	4805      	ldr	r0, [pc, #20]	@ (800b0b4 <__i2b+0x28>)
 800b09e:	f240 1145 	movw	r1, #325	@ 0x145
 800b0a2:	f000 fe6d 	bl	800bd80 <__assert_func>
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	6144      	str	r4, [r0, #20]
 800b0aa:	6103      	str	r3, [r0, #16]
 800b0ac:	bd10      	pop	{r4, pc}
 800b0ae:	bf00      	nop
 800b0b0:	08018100 	.word	0x08018100
 800b0b4:	08018111 	.word	0x08018111

0800b0b8 <__multiply>:
 800b0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0bc:	4614      	mov	r4, r2
 800b0be:	690a      	ldr	r2, [r1, #16]
 800b0c0:	6923      	ldr	r3, [r4, #16]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	bfa8      	it	ge
 800b0c6:	4623      	movge	r3, r4
 800b0c8:	460f      	mov	r7, r1
 800b0ca:	bfa4      	itt	ge
 800b0cc:	460c      	movge	r4, r1
 800b0ce:	461f      	movge	r7, r3
 800b0d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b0d4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b0d8:	68a3      	ldr	r3, [r4, #8]
 800b0da:	6861      	ldr	r1, [r4, #4]
 800b0dc:	eb0a 0609 	add.w	r6, sl, r9
 800b0e0:	42b3      	cmp	r3, r6
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	bfb8      	it	lt
 800b0e6:	3101      	addlt	r1, #1
 800b0e8:	f7ff fedc 	bl	800aea4 <_Balloc>
 800b0ec:	b930      	cbnz	r0, 800b0fc <__multiply+0x44>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	4b44      	ldr	r3, [pc, #272]	@ (800b204 <__multiply+0x14c>)
 800b0f2:	4845      	ldr	r0, [pc, #276]	@ (800b208 <__multiply+0x150>)
 800b0f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b0f8:	f000 fe42 	bl	800bd80 <__assert_func>
 800b0fc:	f100 0514 	add.w	r5, r0, #20
 800b100:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b104:	462b      	mov	r3, r5
 800b106:	2200      	movs	r2, #0
 800b108:	4543      	cmp	r3, r8
 800b10a:	d321      	bcc.n	800b150 <__multiply+0x98>
 800b10c:	f107 0114 	add.w	r1, r7, #20
 800b110:	f104 0214 	add.w	r2, r4, #20
 800b114:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b118:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b11c:	9302      	str	r3, [sp, #8]
 800b11e:	1b13      	subs	r3, r2, r4
 800b120:	3b15      	subs	r3, #21
 800b122:	f023 0303 	bic.w	r3, r3, #3
 800b126:	3304      	adds	r3, #4
 800b128:	f104 0715 	add.w	r7, r4, #21
 800b12c:	42ba      	cmp	r2, r7
 800b12e:	bf38      	it	cc
 800b130:	2304      	movcc	r3, #4
 800b132:	9301      	str	r3, [sp, #4]
 800b134:	9b02      	ldr	r3, [sp, #8]
 800b136:	9103      	str	r1, [sp, #12]
 800b138:	428b      	cmp	r3, r1
 800b13a:	d80c      	bhi.n	800b156 <__multiply+0x9e>
 800b13c:	2e00      	cmp	r6, #0
 800b13e:	dd03      	ble.n	800b148 <__multiply+0x90>
 800b140:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b144:	2b00      	cmp	r3, #0
 800b146:	d05b      	beq.n	800b200 <__multiply+0x148>
 800b148:	6106      	str	r6, [r0, #16]
 800b14a:	b005      	add	sp, #20
 800b14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b150:	f843 2b04 	str.w	r2, [r3], #4
 800b154:	e7d8      	b.n	800b108 <__multiply+0x50>
 800b156:	f8b1 a000 	ldrh.w	sl, [r1]
 800b15a:	f1ba 0f00 	cmp.w	sl, #0
 800b15e:	d024      	beq.n	800b1aa <__multiply+0xf2>
 800b160:	f104 0e14 	add.w	lr, r4, #20
 800b164:	46a9      	mov	r9, r5
 800b166:	f04f 0c00 	mov.w	ip, #0
 800b16a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b16e:	f8d9 3000 	ldr.w	r3, [r9]
 800b172:	fa1f fb87 	uxth.w	fp, r7
 800b176:	b29b      	uxth	r3, r3
 800b178:	fb0a 330b 	mla	r3, sl, fp, r3
 800b17c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b180:	f8d9 7000 	ldr.w	r7, [r9]
 800b184:	4463      	add	r3, ip
 800b186:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b18a:	fb0a c70b 	mla	r7, sl, fp, ip
 800b18e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b192:	b29b      	uxth	r3, r3
 800b194:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b198:	4572      	cmp	r2, lr
 800b19a:	f849 3b04 	str.w	r3, [r9], #4
 800b19e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b1a2:	d8e2      	bhi.n	800b16a <__multiply+0xb2>
 800b1a4:	9b01      	ldr	r3, [sp, #4]
 800b1a6:	f845 c003 	str.w	ip, [r5, r3]
 800b1aa:	9b03      	ldr	r3, [sp, #12]
 800b1ac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b1b0:	3104      	adds	r1, #4
 800b1b2:	f1b9 0f00 	cmp.w	r9, #0
 800b1b6:	d021      	beq.n	800b1fc <__multiply+0x144>
 800b1b8:	682b      	ldr	r3, [r5, #0]
 800b1ba:	f104 0c14 	add.w	ip, r4, #20
 800b1be:	46ae      	mov	lr, r5
 800b1c0:	f04f 0a00 	mov.w	sl, #0
 800b1c4:	f8bc b000 	ldrh.w	fp, [ip]
 800b1c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b1cc:	fb09 770b 	mla	r7, r9, fp, r7
 800b1d0:	4457      	add	r7, sl
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b1d8:	f84e 3b04 	str.w	r3, [lr], #4
 800b1dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b1e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1e4:	f8be 3000 	ldrh.w	r3, [lr]
 800b1e8:	fb09 330a 	mla	r3, r9, sl, r3
 800b1ec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b1f0:	4562      	cmp	r2, ip
 800b1f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1f6:	d8e5      	bhi.n	800b1c4 <__multiply+0x10c>
 800b1f8:	9f01      	ldr	r7, [sp, #4]
 800b1fa:	51eb      	str	r3, [r5, r7]
 800b1fc:	3504      	adds	r5, #4
 800b1fe:	e799      	b.n	800b134 <__multiply+0x7c>
 800b200:	3e01      	subs	r6, #1
 800b202:	e79b      	b.n	800b13c <__multiply+0x84>
 800b204:	08018100 	.word	0x08018100
 800b208:	08018111 	.word	0x08018111

0800b20c <__pow5mult>:
 800b20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b210:	4615      	mov	r5, r2
 800b212:	f012 0203 	ands.w	r2, r2, #3
 800b216:	4607      	mov	r7, r0
 800b218:	460e      	mov	r6, r1
 800b21a:	d007      	beq.n	800b22c <__pow5mult+0x20>
 800b21c:	4c25      	ldr	r4, [pc, #148]	@ (800b2b4 <__pow5mult+0xa8>)
 800b21e:	3a01      	subs	r2, #1
 800b220:	2300      	movs	r3, #0
 800b222:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b226:	f7ff fe9f 	bl	800af68 <__multadd>
 800b22a:	4606      	mov	r6, r0
 800b22c:	10ad      	asrs	r5, r5, #2
 800b22e:	d03d      	beq.n	800b2ac <__pow5mult+0xa0>
 800b230:	69fc      	ldr	r4, [r7, #28]
 800b232:	b97c      	cbnz	r4, 800b254 <__pow5mult+0x48>
 800b234:	2010      	movs	r0, #16
 800b236:	f7fd ff87 	bl	8009148 <malloc>
 800b23a:	4602      	mov	r2, r0
 800b23c:	61f8      	str	r0, [r7, #28]
 800b23e:	b928      	cbnz	r0, 800b24c <__pow5mult+0x40>
 800b240:	4b1d      	ldr	r3, [pc, #116]	@ (800b2b8 <__pow5mult+0xac>)
 800b242:	481e      	ldr	r0, [pc, #120]	@ (800b2bc <__pow5mult+0xb0>)
 800b244:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b248:	f000 fd9a 	bl	800bd80 <__assert_func>
 800b24c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b250:	6004      	str	r4, [r0, #0]
 800b252:	60c4      	str	r4, [r0, #12]
 800b254:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b258:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b25c:	b94c      	cbnz	r4, 800b272 <__pow5mult+0x66>
 800b25e:	f240 2171 	movw	r1, #625	@ 0x271
 800b262:	4638      	mov	r0, r7
 800b264:	f7ff ff12 	bl	800b08c <__i2b>
 800b268:	2300      	movs	r3, #0
 800b26a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b26e:	4604      	mov	r4, r0
 800b270:	6003      	str	r3, [r0, #0]
 800b272:	f04f 0900 	mov.w	r9, #0
 800b276:	07eb      	lsls	r3, r5, #31
 800b278:	d50a      	bpl.n	800b290 <__pow5mult+0x84>
 800b27a:	4631      	mov	r1, r6
 800b27c:	4622      	mov	r2, r4
 800b27e:	4638      	mov	r0, r7
 800b280:	f7ff ff1a 	bl	800b0b8 <__multiply>
 800b284:	4631      	mov	r1, r6
 800b286:	4680      	mov	r8, r0
 800b288:	4638      	mov	r0, r7
 800b28a:	f7ff fe4b 	bl	800af24 <_Bfree>
 800b28e:	4646      	mov	r6, r8
 800b290:	106d      	asrs	r5, r5, #1
 800b292:	d00b      	beq.n	800b2ac <__pow5mult+0xa0>
 800b294:	6820      	ldr	r0, [r4, #0]
 800b296:	b938      	cbnz	r0, 800b2a8 <__pow5mult+0x9c>
 800b298:	4622      	mov	r2, r4
 800b29a:	4621      	mov	r1, r4
 800b29c:	4638      	mov	r0, r7
 800b29e:	f7ff ff0b 	bl	800b0b8 <__multiply>
 800b2a2:	6020      	str	r0, [r4, #0]
 800b2a4:	f8c0 9000 	str.w	r9, [r0]
 800b2a8:	4604      	mov	r4, r0
 800b2aa:	e7e4      	b.n	800b276 <__pow5mult+0x6a>
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2b2:	bf00      	nop
 800b2b4:	0801816c 	.word	0x0801816c
 800b2b8:	08018091 	.word	0x08018091
 800b2bc:	08018111 	.word	0x08018111

0800b2c0 <__lshift>:
 800b2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c4:	460c      	mov	r4, r1
 800b2c6:	6849      	ldr	r1, [r1, #4]
 800b2c8:	6923      	ldr	r3, [r4, #16]
 800b2ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b2ce:	68a3      	ldr	r3, [r4, #8]
 800b2d0:	4607      	mov	r7, r0
 800b2d2:	4691      	mov	r9, r2
 800b2d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2d8:	f108 0601 	add.w	r6, r8, #1
 800b2dc:	42b3      	cmp	r3, r6
 800b2de:	db0b      	blt.n	800b2f8 <__lshift+0x38>
 800b2e0:	4638      	mov	r0, r7
 800b2e2:	f7ff fddf 	bl	800aea4 <_Balloc>
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	b948      	cbnz	r0, 800b2fe <__lshift+0x3e>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	4b28      	ldr	r3, [pc, #160]	@ (800b390 <__lshift+0xd0>)
 800b2ee:	4829      	ldr	r0, [pc, #164]	@ (800b394 <__lshift+0xd4>)
 800b2f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b2f4:	f000 fd44 	bl	800bd80 <__assert_func>
 800b2f8:	3101      	adds	r1, #1
 800b2fa:	005b      	lsls	r3, r3, #1
 800b2fc:	e7ee      	b.n	800b2dc <__lshift+0x1c>
 800b2fe:	2300      	movs	r3, #0
 800b300:	f100 0114 	add.w	r1, r0, #20
 800b304:	f100 0210 	add.w	r2, r0, #16
 800b308:	4618      	mov	r0, r3
 800b30a:	4553      	cmp	r3, sl
 800b30c:	db33      	blt.n	800b376 <__lshift+0xb6>
 800b30e:	6920      	ldr	r0, [r4, #16]
 800b310:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b314:	f104 0314 	add.w	r3, r4, #20
 800b318:	f019 091f 	ands.w	r9, r9, #31
 800b31c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b320:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b324:	d02b      	beq.n	800b37e <__lshift+0xbe>
 800b326:	f1c9 0e20 	rsb	lr, r9, #32
 800b32a:	468a      	mov	sl, r1
 800b32c:	2200      	movs	r2, #0
 800b32e:	6818      	ldr	r0, [r3, #0]
 800b330:	fa00 f009 	lsl.w	r0, r0, r9
 800b334:	4310      	orrs	r0, r2
 800b336:	f84a 0b04 	str.w	r0, [sl], #4
 800b33a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b33e:	459c      	cmp	ip, r3
 800b340:	fa22 f20e 	lsr.w	r2, r2, lr
 800b344:	d8f3      	bhi.n	800b32e <__lshift+0x6e>
 800b346:	ebac 0304 	sub.w	r3, ip, r4
 800b34a:	3b15      	subs	r3, #21
 800b34c:	f023 0303 	bic.w	r3, r3, #3
 800b350:	3304      	adds	r3, #4
 800b352:	f104 0015 	add.w	r0, r4, #21
 800b356:	4584      	cmp	ip, r0
 800b358:	bf38      	it	cc
 800b35a:	2304      	movcc	r3, #4
 800b35c:	50ca      	str	r2, [r1, r3]
 800b35e:	b10a      	cbz	r2, 800b364 <__lshift+0xa4>
 800b360:	f108 0602 	add.w	r6, r8, #2
 800b364:	3e01      	subs	r6, #1
 800b366:	4638      	mov	r0, r7
 800b368:	612e      	str	r6, [r5, #16]
 800b36a:	4621      	mov	r1, r4
 800b36c:	f7ff fdda 	bl	800af24 <_Bfree>
 800b370:	4628      	mov	r0, r5
 800b372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b376:	f842 0f04 	str.w	r0, [r2, #4]!
 800b37a:	3301      	adds	r3, #1
 800b37c:	e7c5      	b.n	800b30a <__lshift+0x4a>
 800b37e:	3904      	subs	r1, #4
 800b380:	f853 2b04 	ldr.w	r2, [r3], #4
 800b384:	f841 2f04 	str.w	r2, [r1, #4]!
 800b388:	459c      	cmp	ip, r3
 800b38a:	d8f9      	bhi.n	800b380 <__lshift+0xc0>
 800b38c:	e7ea      	b.n	800b364 <__lshift+0xa4>
 800b38e:	bf00      	nop
 800b390:	08018100 	.word	0x08018100
 800b394:	08018111 	.word	0x08018111

0800b398 <__mcmp>:
 800b398:	690a      	ldr	r2, [r1, #16]
 800b39a:	4603      	mov	r3, r0
 800b39c:	6900      	ldr	r0, [r0, #16]
 800b39e:	1a80      	subs	r0, r0, r2
 800b3a0:	b530      	push	{r4, r5, lr}
 800b3a2:	d10e      	bne.n	800b3c2 <__mcmp+0x2a>
 800b3a4:	3314      	adds	r3, #20
 800b3a6:	3114      	adds	r1, #20
 800b3a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b3ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b3b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b3b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b3b8:	4295      	cmp	r5, r2
 800b3ba:	d003      	beq.n	800b3c4 <__mcmp+0x2c>
 800b3bc:	d205      	bcs.n	800b3ca <__mcmp+0x32>
 800b3be:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c2:	bd30      	pop	{r4, r5, pc}
 800b3c4:	42a3      	cmp	r3, r4
 800b3c6:	d3f3      	bcc.n	800b3b0 <__mcmp+0x18>
 800b3c8:	e7fb      	b.n	800b3c2 <__mcmp+0x2a>
 800b3ca:	2001      	movs	r0, #1
 800b3cc:	e7f9      	b.n	800b3c2 <__mcmp+0x2a>
	...

0800b3d0 <__mdiff>:
 800b3d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d4:	4689      	mov	r9, r1
 800b3d6:	4606      	mov	r6, r0
 800b3d8:	4611      	mov	r1, r2
 800b3da:	4648      	mov	r0, r9
 800b3dc:	4614      	mov	r4, r2
 800b3de:	f7ff ffdb 	bl	800b398 <__mcmp>
 800b3e2:	1e05      	subs	r5, r0, #0
 800b3e4:	d112      	bne.n	800b40c <__mdiff+0x3c>
 800b3e6:	4629      	mov	r1, r5
 800b3e8:	4630      	mov	r0, r6
 800b3ea:	f7ff fd5b 	bl	800aea4 <_Balloc>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	b928      	cbnz	r0, 800b3fe <__mdiff+0x2e>
 800b3f2:	4b3f      	ldr	r3, [pc, #252]	@ (800b4f0 <__mdiff+0x120>)
 800b3f4:	f240 2137 	movw	r1, #567	@ 0x237
 800b3f8:	483e      	ldr	r0, [pc, #248]	@ (800b4f4 <__mdiff+0x124>)
 800b3fa:	f000 fcc1 	bl	800bd80 <__assert_func>
 800b3fe:	2301      	movs	r3, #1
 800b400:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b404:	4610      	mov	r0, r2
 800b406:	b003      	add	sp, #12
 800b408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b40c:	bfbc      	itt	lt
 800b40e:	464b      	movlt	r3, r9
 800b410:	46a1      	movlt	r9, r4
 800b412:	4630      	mov	r0, r6
 800b414:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b418:	bfba      	itte	lt
 800b41a:	461c      	movlt	r4, r3
 800b41c:	2501      	movlt	r5, #1
 800b41e:	2500      	movge	r5, #0
 800b420:	f7ff fd40 	bl	800aea4 <_Balloc>
 800b424:	4602      	mov	r2, r0
 800b426:	b918      	cbnz	r0, 800b430 <__mdiff+0x60>
 800b428:	4b31      	ldr	r3, [pc, #196]	@ (800b4f0 <__mdiff+0x120>)
 800b42a:	f240 2145 	movw	r1, #581	@ 0x245
 800b42e:	e7e3      	b.n	800b3f8 <__mdiff+0x28>
 800b430:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b434:	6926      	ldr	r6, [r4, #16]
 800b436:	60c5      	str	r5, [r0, #12]
 800b438:	f109 0310 	add.w	r3, r9, #16
 800b43c:	f109 0514 	add.w	r5, r9, #20
 800b440:	f104 0e14 	add.w	lr, r4, #20
 800b444:	f100 0b14 	add.w	fp, r0, #20
 800b448:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b44c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b450:	9301      	str	r3, [sp, #4]
 800b452:	46d9      	mov	r9, fp
 800b454:	f04f 0c00 	mov.w	ip, #0
 800b458:	9b01      	ldr	r3, [sp, #4]
 800b45a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b45e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b462:	9301      	str	r3, [sp, #4]
 800b464:	fa1f f38a 	uxth.w	r3, sl
 800b468:	4619      	mov	r1, r3
 800b46a:	b283      	uxth	r3, r0
 800b46c:	1acb      	subs	r3, r1, r3
 800b46e:	0c00      	lsrs	r0, r0, #16
 800b470:	4463      	add	r3, ip
 800b472:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b476:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b480:	4576      	cmp	r6, lr
 800b482:	f849 3b04 	str.w	r3, [r9], #4
 800b486:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b48a:	d8e5      	bhi.n	800b458 <__mdiff+0x88>
 800b48c:	1b33      	subs	r3, r6, r4
 800b48e:	3b15      	subs	r3, #21
 800b490:	f023 0303 	bic.w	r3, r3, #3
 800b494:	3415      	adds	r4, #21
 800b496:	3304      	adds	r3, #4
 800b498:	42a6      	cmp	r6, r4
 800b49a:	bf38      	it	cc
 800b49c:	2304      	movcc	r3, #4
 800b49e:	441d      	add	r5, r3
 800b4a0:	445b      	add	r3, fp
 800b4a2:	461e      	mov	r6, r3
 800b4a4:	462c      	mov	r4, r5
 800b4a6:	4544      	cmp	r4, r8
 800b4a8:	d30e      	bcc.n	800b4c8 <__mdiff+0xf8>
 800b4aa:	f108 0103 	add.w	r1, r8, #3
 800b4ae:	1b49      	subs	r1, r1, r5
 800b4b0:	f021 0103 	bic.w	r1, r1, #3
 800b4b4:	3d03      	subs	r5, #3
 800b4b6:	45a8      	cmp	r8, r5
 800b4b8:	bf38      	it	cc
 800b4ba:	2100      	movcc	r1, #0
 800b4bc:	440b      	add	r3, r1
 800b4be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b4c2:	b191      	cbz	r1, 800b4ea <__mdiff+0x11a>
 800b4c4:	6117      	str	r7, [r2, #16]
 800b4c6:	e79d      	b.n	800b404 <__mdiff+0x34>
 800b4c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800b4cc:	46e6      	mov	lr, ip
 800b4ce:	0c08      	lsrs	r0, r1, #16
 800b4d0:	fa1c fc81 	uxtah	ip, ip, r1
 800b4d4:	4471      	add	r1, lr
 800b4d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b4da:	b289      	uxth	r1, r1
 800b4dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b4e0:	f846 1b04 	str.w	r1, [r6], #4
 800b4e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b4e8:	e7dd      	b.n	800b4a6 <__mdiff+0xd6>
 800b4ea:	3f01      	subs	r7, #1
 800b4ec:	e7e7      	b.n	800b4be <__mdiff+0xee>
 800b4ee:	bf00      	nop
 800b4f0:	08018100 	.word	0x08018100
 800b4f4:	08018111 	.word	0x08018111

0800b4f8 <__d2b>:
 800b4f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b4fc:	460f      	mov	r7, r1
 800b4fe:	2101      	movs	r1, #1
 800b500:	ec59 8b10 	vmov	r8, r9, d0
 800b504:	4616      	mov	r6, r2
 800b506:	f7ff fccd 	bl	800aea4 <_Balloc>
 800b50a:	4604      	mov	r4, r0
 800b50c:	b930      	cbnz	r0, 800b51c <__d2b+0x24>
 800b50e:	4602      	mov	r2, r0
 800b510:	4b23      	ldr	r3, [pc, #140]	@ (800b5a0 <__d2b+0xa8>)
 800b512:	4824      	ldr	r0, [pc, #144]	@ (800b5a4 <__d2b+0xac>)
 800b514:	f240 310f 	movw	r1, #783	@ 0x30f
 800b518:	f000 fc32 	bl	800bd80 <__assert_func>
 800b51c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b520:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b524:	b10d      	cbz	r5, 800b52a <__d2b+0x32>
 800b526:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b52a:	9301      	str	r3, [sp, #4]
 800b52c:	f1b8 0300 	subs.w	r3, r8, #0
 800b530:	d023      	beq.n	800b57a <__d2b+0x82>
 800b532:	4668      	mov	r0, sp
 800b534:	9300      	str	r3, [sp, #0]
 800b536:	f7ff fd7c 	bl	800b032 <__lo0bits>
 800b53a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b53e:	b1d0      	cbz	r0, 800b576 <__d2b+0x7e>
 800b540:	f1c0 0320 	rsb	r3, r0, #32
 800b544:	fa02 f303 	lsl.w	r3, r2, r3
 800b548:	430b      	orrs	r3, r1
 800b54a:	40c2      	lsrs	r2, r0
 800b54c:	6163      	str	r3, [r4, #20]
 800b54e:	9201      	str	r2, [sp, #4]
 800b550:	9b01      	ldr	r3, [sp, #4]
 800b552:	61a3      	str	r3, [r4, #24]
 800b554:	2b00      	cmp	r3, #0
 800b556:	bf0c      	ite	eq
 800b558:	2201      	moveq	r2, #1
 800b55a:	2202      	movne	r2, #2
 800b55c:	6122      	str	r2, [r4, #16]
 800b55e:	b1a5      	cbz	r5, 800b58a <__d2b+0x92>
 800b560:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b564:	4405      	add	r5, r0
 800b566:	603d      	str	r5, [r7, #0]
 800b568:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b56c:	6030      	str	r0, [r6, #0]
 800b56e:	4620      	mov	r0, r4
 800b570:	b003      	add	sp, #12
 800b572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b576:	6161      	str	r1, [r4, #20]
 800b578:	e7ea      	b.n	800b550 <__d2b+0x58>
 800b57a:	a801      	add	r0, sp, #4
 800b57c:	f7ff fd59 	bl	800b032 <__lo0bits>
 800b580:	9b01      	ldr	r3, [sp, #4]
 800b582:	6163      	str	r3, [r4, #20]
 800b584:	3020      	adds	r0, #32
 800b586:	2201      	movs	r2, #1
 800b588:	e7e8      	b.n	800b55c <__d2b+0x64>
 800b58a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b58e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b592:	6038      	str	r0, [r7, #0]
 800b594:	6918      	ldr	r0, [r3, #16]
 800b596:	f7ff fd2d 	bl	800aff4 <__hi0bits>
 800b59a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b59e:	e7e5      	b.n	800b56c <__d2b+0x74>
 800b5a0:	08018100 	.word	0x08018100
 800b5a4:	08018111 	.word	0x08018111

0800b5a8 <_malloc_usable_size_r>:
 800b5a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5ac:	1f18      	subs	r0, r3, #4
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	bfbc      	itt	lt
 800b5b2:	580b      	ldrlt	r3, [r1, r0]
 800b5b4:	18c0      	addlt	r0, r0, r3
 800b5b6:	4770      	bx	lr

0800b5b8 <__ssputs_r>:
 800b5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5bc:	688e      	ldr	r6, [r1, #8]
 800b5be:	461f      	mov	r7, r3
 800b5c0:	42be      	cmp	r6, r7
 800b5c2:	680b      	ldr	r3, [r1, #0]
 800b5c4:	4682      	mov	sl, r0
 800b5c6:	460c      	mov	r4, r1
 800b5c8:	4690      	mov	r8, r2
 800b5ca:	d82d      	bhi.n	800b628 <__ssputs_r+0x70>
 800b5cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b5d4:	d026      	beq.n	800b624 <__ssputs_r+0x6c>
 800b5d6:	6965      	ldr	r5, [r4, #20]
 800b5d8:	6909      	ldr	r1, [r1, #16]
 800b5da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5de:	eba3 0901 	sub.w	r9, r3, r1
 800b5e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5e6:	1c7b      	adds	r3, r7, #1
 800b5e8:	444b      	add	r3, r9
 800b5ea:	106d      	asrs	r5, r5, #1
 800b5ec:	429d      	cmp	r5, r3
 800b5ee:	bf38      	it	cc
 800b5f0:	461d      	movcc	r5, r3
 800b5f2:	0553      	lsls	r3, r2, #21
 800b5f4:	d527      	bpl.n	800b646 <__ssputs_r+0x8e>
 800b5f6:	4629      	mov	r1, r5
 800b5f8:	f7fd fdd0 	bl	800919c <_malloc_r>
 800b5fc:	4606      	mov	r6, r0
 800b5fe:	b360      	cbz	r0, 800b65a <__ssputs_r+0xa2>
 800b600:	6921      	ldr	r1, [r4, #16]
 800b602:	464a      	mov	r2, r9
 800b604:	f7fe fda9 	bl	800a15a <memcpy>
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b60e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b612:	81a3      	strh	r3, [r4, #12]
 800b614:	6126      	str	r6, [r4, #16]
 800b616:	6165      	str	r5, [r4, #20]
 800b618:	444e      	add	r6, r9
 800b61a:	eba5 0509 	sub.w	r5, r5, r9
 800b61e:	6026      	str	r6, [r4, #0]
 800b620:	60a5      	str	r5, [r4, #8]
 800b622:	463e      	mov	r6, r7
 800b624:	42be      	cmp	r6, r7
 800b626:	d900      	bls.n	800b62a <__ssputs_r+0x72>
 800b628:	463e      	mov	r6, r7
 800b62a:	6820      	ldr	r0, [r4, #0]
 800b62c:	4632      	mov	r2, r6
 800b62e:	4641      	mov	r1, r8
 800b630:	f000 fb6a 	bl	800bd08 <memmove>
 800b634:	68a3      	ldr	r3, [r4, #8]
 800b636:	1b9b      	subs	r3, r3, r6
 800b638:	60a3      	str	r3, [r4, #8]
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	4433      	add	r3, r6
 800b63e:	6023      	str	r3, [r4, #0]
 800b640:	2000      	movs	r0, #0
 800b642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b646:	462a      	mov	r2, r5
 800b648:	f7fd fe34 	bl	80092b4 <_realloc_r>
 800b64c:	4606      	mov	r6, r0
 800b64e:	2800      	cmp	r0, #0
 800b650:	d1e0      	bne.n	800b614 <__ssputs_r+0x5c>
 800b652:	6921      	ldr	r1, [r4, #16]
 800b654:	4650      	mov	r0, sl
 800b656:	f7ff fbdb 	bl	800ae10 <_free_r>
 800b65a:	230c      	movs	r3, #12
 800b65c:	f8ca 3000 	str.w	r3, [sl]
 800b660:	89a3      	ldrh	r3, [r4, #12]
 800b662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b666:	81a3      	strh	r3, [r4, #12]
 800b668:	f04f 30ff 	mov.w	r0, #4294967295
 800b66c:	e7e9      	b.n	800b642 <__ssputs_r+0x8a>
	...

0800b670 <_svfiprintf_r>:
 800b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b674:	4698      	mov	r8, r3
 800b676:	898b      	ldrh	r3, [r1, #12]
 800b678:	061b      	lsls	r3, r3, #24
 800b67a:	b09d      	sub	sp, #116	@ 0x74
 800b67c:	4607      	mov	r7, r0
 800b67e:	460d      	mov	r5, r1
 800b680:	4614      	mov	r4, r2
 800b682:	d510      	bpl.n	800b6a6 <_svfiprintf_r+0x36>
 800b684:	690b      	ldr	r3, [r1, #16]
 800b686:	b973      	cbnz	r3, 800b6a6 <_svfiprintf_r+0x36>
 800b688:	2140      	movs	r1, #64	@ 0x40
 800b68a:	f7fd fd87 	bl	800919c <_malloc_r>
 800b68e:	6028      	str	r0, [r5, #0]
 800b690:	6128      	str	r0, [r5, #16]
 800b692:	b930      	cbnz	r0, 800b6a2 <_svfiprintf_r+0x32>
 800b694:	230c      	movs	r3, #12
 800b696:	603b      	str	r3, [r7, #0]
 800b698:	f04f 30ff 	mov.w	r0, #4294967295
 800b69c:	b01d      	add	sp, #116	@ 0x74
 800b69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a2:	2340      	movs	r3, #64	@ 0x40
 800b6a4:	616b      	str	r3, [r5, #20]
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6aa:	2320      	movs	r3, #32
 800b6ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b6b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6b4:	2330      	movs	r3, #48	@ 0x30
 800b6b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b854 <_svfiprintf_r+0x1e4>
 800b6ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b6be:	f04f 0901 	mov.w	r9, #1
 800b6c2:	4623      	mov	r3, r4
 800b6c4:	469a      	mov	sl, r3
 800b6c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6ca:	b10a      	cbz	r2, 800b6d0 <_svfiprintf_r+0x60>
 800b6cc:	2a25      	cmp	r2, #37	@ 0x25
 800b6ce:	d1f9      	bne.n	800b6c4 <_svfiprintf_r+0x54>
 800b6d0:	ebba 0b04 	subs.w	fp, sl, r4
 800b6d4:	d00b      	beq.n	800b6ee <_svfiprintf_r+0x7e>
 800b6d6:	465b      	mov	r3, fp
 800b6d8:	4622      	mov	r2, r4
 800b6da:	4629      	mov	r1, r5
 800b6dc:	4638      	mov	r0, r7
 800b6de:	f7ff ff6b 	bl	800b5b8 <__ssputs_r>
 800b6e2:	3001      	adds	r0, #1
 800b6e4:	f000 80a7 	beq.w	800b836 <_svfiprintf_r+0x1c6>
 800b6e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6ea:	445a      	add	r2, fp
 800b6ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	f000 809f 	beq.w	800b836 <_svfiprintf_r+0x1c6>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b6fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b702:	f10a 0a01 	add.w	sl, sl, #1
 800b706:	9304      	str	r3, [sp, #16]
 800b708:	9307      	str	r3, [sp, #28]
 800b70a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b70e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b710:	4654      	mov	r4, sl
 800b712:	2205      	movs	r2, #5
 800b714:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b718:	484e      	ldr	r0, [pc, #312]	@ (800b854 <_svfiprintf_r+0x1e4>)
 800b71a:	f7f4 fd59 	bl	80001d0 <memchr>
 800b71e:	9a04      	ldr	r2, [sp, #16]
 800b720:	b9d8      	cbnz	r0, 800b75a <_svfiprintf_r+0xea>
 800b722:	06d0      	lsls	r0, r2, #27
 800b724:	bf44      	itt	mi
 800b726:	2320      	movmi	r3, #32
 800b728:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b72c:	0711      	lsls	r1, r2, #28
 800b72e:	bf44      	itt	mi
 800b730:	232b      	movmi	r3, #43	@ 0x2b
 800b732:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b736:	f89a 3000 	ldrb.w	r3, [sl]
 800b73a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b73c:	d015      	beq.n	800b76a <_svfiprintf_r+0xfa>
 800b73e:	9a07      	ldr	r2, [sp, #28]
 800b740:	4654      	mov	r4, sl
 800b742:	2000      	movs	r0, #0
 800b744:	f04f 0c0a 	mov.w	ip, #10
 800b748:	4621      	mov	r1, r4
 800b74a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b74e:	3b30      	subs	r3, #48	@ 0x30
 800b750:	2b09      	cmp	r3, #9
 800b752:	d94b      	bls.n	800b7ec <_svfiprintf_r+0x17c>
 800b754:	b1b0      	cbz	r0, 800b784 <_svfiprintf_r+0x114>
 800b756:	9207      	str	r2, [sp, #28]
 800b758:	e014      	b.n	800b784 <_svfiprintf_r+0x114>
 800b75a:	eba0 0308 	sub.w	r3, r0, r8
 800b75e:	fa09 f303 	lsl.w	r3, r9, r3
 800b762:	4313      	orrs	r3, r2
 800b764:	9304      	str	r3, [sp, #16]
 800b766:	46a2      	mov	sl, r4
 800b768:	e7d2      	b.n	800b710 <_svfiprintf_r+0xa0>
 800b76a:	9b03      	ldr	r3, [sp, #12]
 800b76c:	1d19      	adds	r1, r3, #4
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	9103      	str	r1, [sp, #12]
 800b772:	2b00      	cmp	r3, #0
 800b774:	bfbb      	ittet	lt
 800b776:	425b      	neglt	r3, r3
 800b778:	f042 0202 	orrlt.w	r2, r2, #2
 800b77c:	9307      	strge	r3, [sp, #28]
 800b77e:	9307      	strlt	r3, [sp, #28]
 800b780:	bfb8      	it	lt
 800b782:	9204      	strlt	r2, [sp, #16]
 800b784:	7823      	ldrb	r3, [r4, #0]
 800b786:	2b2e      	cmp	r3, #46	@ 0x2e
 800b788:	d10a      	bne.n	800b7a0 <_svfiprintf_r+0x130>
 800b78a:	7863      	ldrb	r3, [r4, #1]
 800b78c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b78e:	d132      	bne.n	800b7f6 <_svfiprintf_r+0x186>
 800b790:	9b03      	ldr	r3, [sp, #12]
 800b792:	1d1a      	adds	r2, r3, #4
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	9203      	str	r2, [sp, #12]
 800b798:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b79c:	3402      	adds	r4, #2
 800b79e:	9305      	str	r3, [sp, #20]
 800b7a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b864 <_svfiprintf_r+0x1f4>
 800b7a4:	7821      	ldrb	r1, [r4, #0]
 800b7a6:	2203      	movs	r2, #3
 800b7a8:	4650      	mov	r0, sl
 800b7aa:	f7f4 fd11 	bl	80001d0 <memchr>
 800b7ae:	b138      	cbz	r0, 800b7c0 <_svfiprintf_r+0x150>
 800b7b0:	9b04      	ldr	r3, [sp, #16]
 800b7b2:	eba0 000a 	sub.w	r0, r0, sl
 800b7b6:	2240      	movs	r2, #64	@ 0x40
 800b7b8:	4082      	lsls	r2, r0
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	3401      	adds	r4, #1
 800b7be:	9304      	str	r3, [sp, #16]
 800b7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7c4:	4824      	ldr	r0, [pc, #144]	@ (800b858 <_svfiprintf_r+0x1e8>)
 800b7c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b7ca:	2206      	movs	r2, #6
 800b7cc:	f7f4 fd00 	bl	80001d0 <memchr>
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	d036      	beq.n	800b842 <_svfiprintf_r+0x1d2>
 800b7d4:	4b21      	ldr	r3, [pc, #132]	@ (800b85c <_svfiprintf_r+0x1ec>)
 800b7d6:	bb1b      	cbnz	r3, 800b820 <_svfiprintf_r+0x1b0>
 800b7d8:	9b03      	ldr	r3, [sp, #12]
 800b7da:	3307      	adds	r3, #7
 800b7dc:	f023 0307 	bic.w	r3, r3, #7
 800b7e0:	3308      	adds	r3, #8
 800b7e2:	9303      	str	r3, [sp, #12]
 800b7e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7e6:	4433      	add	r3, r6
 800b7e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7ea:	e76a      	b.n	800b6c2 <_svfiprintf_r+0x52>
 800b7ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7f0:	460c      	mov	r4, r1
 800b7f2:	2001      	movs	r0, #1
 800b7f4:	e7a8      	b.n	800b748 <_svfiprintf_r+0xd8>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	3401      	adds	r4, #1
 800b7fa:	9305      	str	r3, [sp, #20]
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	f04f 0c0a 	mov.w	ip, #10
 800b802:	4620      	mov	r0, r4
 800b804:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b808:	3a30      	subs	r2, #48	@ 0x30
 800b80a:	2a09      	cmp	r2, #9
 800b80c:	d903      	bls.n	800b816 <_svfiprintf_r+0x1a6>
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d0c6      	beq.n	800b7a0 <_svfiprintf_r+0x130>
 800b812:	9105      	str	r1, [sp, #20]
 800b814:	e7c4      	b.n	800b7a0 <_svfiprintf_r+0x130>
 800b816:	fb0c 2101 	mla	r1, ip, r1, r2
 800b81a:	4604      	mov	r4, r0
 800b81c:	2301      	movs	r3, #1
 800b81e:	e7f0      	b.n	800b802 <_svfiprintf_r+0x192>
 800b820:	ab03      	add	r3, sp, #12
 800b822:	9300      	str	r3, [sp, #0]
 800b824:	462a      	mov	r2, r5
 800b826:	4b0e      	ldr	r3, [pc, #56]	@ (800b860 <_svfiprintf_r+0x1f0>)
 800b828:	a904      	add	r1, sp, #16
 800b82a:	4638      	mov	r0, r7
 800b82c:	f7fd fe10 	bl	8009450 <_printf_float>
 800b830:	1c42      	adds	r2, r0, #1
 800b832:	4606      	mov	r6, r0
 800b834:	d1d6      	bne.n	800b7e4 <_svfiprintf_r+0x174>
 800b836:	89ab      	ldrh	r3, [r5, #12]
 800b838:	065b      	lsls	r3, r3, #25
 800b83a:	f53f af2d 	bmi.w	800b698 <_svfiprintf_r+0x28>
 800b83e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b840:	e72c      	b.n	800b69c <_svfiprintf_r+0x2c>
 800b842:	ab03      	add	r3, sp, #12
 800b844:	9300      	str	r3, [sp, #0]
 800b846:	462a      	mov	r2, r5
 800b848:	4b05      	ldr	r3, [pc, #20]	@ (800b860 <_svfiprintf_r+0x1f0>)
 800b84a:	a904      	add	r1, sp, #16
 800b84c:	4638      	mov	r0, r7
 800b84e:	f7fe f897 	bl	8009980 <_printf_i>
 800b852:	e7ed      	b.n	800b830 <_svfiprintf_r+0x1c0>
 800b854:	08018268 	.word	0x08018268
 800b858:	08018272 	.word	0x08018272
 800b85c:	08009451 	.word	0x08009451
 800b860:	0800b5b9 	.word	0x0800b5b9
 800b864:	0801826e 	.word	0x0801826e

0800b868 <__sfputc_r>:
 800b868:	6893      	ldr	r3, [r2, #8]
 800b86a:	3b01      	subs	r3, #1
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	b410      	push	{r4}
 800b870:	6093      	str	r3, [r2, #8]
 800b872:	da08      	bge.n	800b886 <__sfputc_r+0x1e>
 800b874:	6994      	ldr	r4, [r2, #24]
 800b876:	42a3      	cmp	r3, r4
 800b878:	db01      	blt.n	800b87e <__sfputc_r+0x16>
 800b87a:	290a      	cmp	r1, #10
 800b87c:	d103      	bne.n	800b886 <__sfputc_r+0x1e>
 800b87e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b882:	f7fe bb46 	b.w	8009f12 <__swbuf_r>
 800b886:	6813      	ldr	r3, [r2, #0]
 800b888:	1c58      	adds	r0, r3, #1
 800b88a:	6010      	str	r0, [r2, #0]
 800b88c:	7019      	strb	r1, [r3, #0]
 800b88e:	4608      	mov	r0, r1
 800b890:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b894:	4770      	bx	lr

0800b896 <__sfputs_r>:
 800b896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b898:	4606      	mov	r6, r0
 800b89a:	460f      	mov	r7, r1
 800b89c:	4614      	mov	r4, r2
 800b89e:	18d5      	adds	r5, r2, r3
 800b8a0:	42ac      	cmp	r4, r5
 800b8a2:	d101      	bne.n	800b8a8 <__sfputs_r+0x12>
 800b8a4:	2000      	movs	r0, #0
 800b8a6:	e007      	b.n	800b8b8 <__sfputs_r+0x22>
 800b8a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ac:	463a      	mov	r2, r7
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	f7ff ffda 	bl	800b868 <__sfputc_r>
 800b8b4:	1c43      	adds	r3, r0, #1
 800b8b6:	d1f3      	bne.n	800b8a0 <__sfputs_r+0xa>
 800b8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b8bc <_vfiprintf_r>:
 800b8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c0:	460d      	mov	r5, r1
 800b8c2:	b09d      	sub	sp, #116	@ 0x74
 800b8c4:	4614      	mov	r4, r2
 800b8c6:	4698      	mov	r8, r3
 800b8c8:	4606      	mov	r6, r0
 800b8ca:	b118      	cbz	r0, 800b8d4 <_vfiprintf_r+0x18>
 800b8cc:	6a03      	ldr	r3, [r0, #32]
 800b8ce:	b90b      	cbnz	r3, 800b8d4 <_vfiprintf_r+0x18>
 800b8d0:	f7fe fa02 	bl	8009cd8 <__sinit>
 800b8d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8d6:	07d9      	lsls	r1, r3, #31
 800b8d8:	d405      	bmi.n	800b8e6 <_vfiprintf_r+0x2a>
 800b8da:	89ab      	ldrh	r3, [r5, #12]
 800b8dc:	059a      	lsls	r2, r3, #22
 800b8de:	d402      	bmi.n	800b8e6 <_vfiprintf_r+0x2a>
 800b8e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8e2:	f7fe fc38 	bl	800a156 <__retarget_lock_acquire_recursive>
 800b8e6:	89ab      	ldrh	r3, [r5, #12]
 800b8e8:	071b      	lsls	r3, r3, #28
 800b8ea:	d501      	bpl.n	800b8f0 <_vfiprintf_r+0x34>
 800b8ec:	692b      	ldr	r3, [r5, #16]
 800b8ee:	b99b      	cbnz	r3, 800b918 <_vfiprintf_r+0x5c>
 800b8f0:	4629      	mov	r1, r5
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	f7fe fb4c 	bl	8009f90 <__swsetup_r>
 800b8f8:	b170      	cbz	r0, 800b918 <_vfiprintf_r+0x5c>
 800b8fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8fc:	07dc      	lsls	r4, r3, #31
 800b8fe:	d504      	bpl.n	800b90a <_vfiprintf_r+0x4e>
 800b900:	f04f 30ff 	mov.w	r0, #4294967295
 800b904:	b01d      	add	sp, #116	@ 0x74
 800b906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b90a:	89ab      	ldrh	r3, [r5, #12]
 800b90c:	0598      	lsls	r0, r3, #22
 800b90e:	d4f7      	bmi.n	800b900 <_vfiprintf_r+0x44>
 800b910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b912:	f7fe fc21 	bl	800a158 <__retarget_lock_release_recursive>
 800b916:	e7f3      	b.n	800b900 <_vfiprintf_r+0x44>
 800b918:	2300      	movs	r3, #0
 800b91a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b91c:	2320      	movs	r3, #32
 800b91e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b922:	f8cd 800c 	str.w	r8, [sp, #12]
 800b926:	2330      	movs	r3, #48	@ 0x30
 800b928:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bad8 <_vfiprintf_r+0x21c>
 800b92c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b930:	f04f 0901 	mov.w	r9, #1
 800b934:	4623      	mov	r3, r4
 800b936:	469a      	mov	sl, r3
 800b938:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b93c:	b10a      	cbz	r2, 800b942 <_vfiprintf_r+0x86>
 800b93e:	2a25      	cmp	r2, #37	@ 0x25
 800b940:	d1f9      	bne.n	800b936 <_vfiprintf_r+0x7a>
 800b942:	ebba 0b04 	subs.w	fp, sl, r4
 800b946:	d00b      	beq.n	800b960 <_vfiprintf_r+0xa4>
 800b948:	465b      	mov	r3, fp
 800b94a:	4622      	mov	r2, r4
 800b94c:	4629      	mov	r1, r5
 800b94e:	4630      	mov	r0, r6
 800b950:	f7ff ffa1 	bl	800b896 <__sfputs_r>
 800b954:	3001      	adds	r0, #1
 800b956:	f000 80a7 	beq.w	800baa8 <_vfiprintf_r+0x1ec>
 800b95a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b95c:	445a      	add	r2, fp
 800b95e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b960:	f89a 3000 	ldrb.w	r3, [sl]
 800b964:	2b00      	cmp	r3, #0
 800b966:	f000 809f 	beq.w	800baa8 <_vfiprintf_r+0x1ec>
 800b96a:	2300      	movs	r3, #0
 800b96c:	f04f 32ff 	mov.w	r2, #4294967295
 800b970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b974:	f10a 0a01 	add.w	sl, sl, #1
 800b978:	9304      	str	r3, [sp, #16]
 800b97a:	9307      	str	r3, [sp, #28]
 800b97c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b980:	931a      	str	r3, [sp, #104]	@ 0x68
 800b982:	4654      	mov	r4, sl
 800b984:	2205      	movs	r2, #5
 800b986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b98a:	4853      	ldr	r0, [pc, #332]	@ (800bad8 <_vfiprintf_r+0x21c>)
 800b98c:	f7f4 fc20 	bl	80001d0 <memchr>
 800b990:	9a04      	ldr	r2, [sp, #16]
 800b992:	b9d8      	cbnz	r0, 800b9cc <_vfiprintf_r+0x110>
 800b994:	06d1      	lsls	r1, r2, #27
 800b996:	bf44      	itt	mi
 800b998:	2320      	movmi	r3, #32
 800b99a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b99e:	0713      	lsls	r3, r2, #28
 800b9a0:	bf44      	itt	mi
 800b9a2:	232b      	movmi	r3, #43	@ 0x2b
 800b9a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9a8:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9ae:	d015      	beq.n	800b9dc <_vfiprintf_r+0x120>
 800b9b0:	9a07      	ldr	r2, [sp, #28]
 800b9b2:	4654      	mov	r4, sl
 800b9b4:	2000      	movs	r0, #0
 800b9b6:	f04f 0c0a 	mov.w	ip, #10
 800b9ba:	4621      	mov	r1, r4
 800b9bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9c0:	3b30      	subs	r3, #48	@ 0x30
 800b9c2:	2b09      	cmp	r3, #9
 800b9c4:	d94b      	bls.n	800ba5e <_vfiprintf_r+0x1a2>
 800b9c6:	b1b0      	cbz	r0, 800b9f6 <_vfiprintf_r+0x13a>
 800b9c8:	9207      	str	r2, [sp, #28]
 800b9ca:	e014      	b.n	800b9f6 <_vfiprintf_r+0x13a>
 800b9cc:	eba0 0308 	sub.w	r3, r0, r8
 800b9d0:	fa09 f303 	lsl.w	r3, r9, r3
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	9304      	str	r3, [sp, #16]
 800b9d8:	46a2      	mov	sl, r4
 800b9da:	e7d2      	b.n	800b982 <_vfiprintf_r+0xc6>
 800b9dc:	9b03      	ldr	r3, [sp, #12]
 800b9de:	1d19      	adds	r1, r3, #4
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	9103      	str	r1, [sp, #12]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	bfbb      	ittet	lt
 800b9e8:	425b      	neglt	r3, r3
 800b9ea:	f042 0202 	orrlt.w	r2, r2, #2
 800b9ee:	9307      	strge	r3, [sp, #28]
 800b9f0:	9307      	strlt	r3, [sp, #28]
 800b9f2:	bfb8      	it	lt
 800b9f4:	9204      	strlt	r2, [sp, #16]
 800b9f6:	7823      	ldrb	r3, [r4, #0]
 800b9f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9fa:	d10a      	bne.n	800ba12 <_vfiprintf_r+0x156>
 800b9fc:	7863      	ldrb	r3, [r4, #1]
 800b9fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba00:	d132      	bne.n	800ba68 <_vfiprintf_r+0x1ac>
 800ba02:	9b03      	ldr	r3, [sp, #12]
 800ba04:	1d1a      	adds	r2, r3, #4
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	9203      	str	r2, [sp, #12]
 800ba0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba0e:	3402      	adds	r4, #2
 800ba10:	9305      	str	r3, [sp, #20]
 800ba12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bae8 <_vfiprintf_r+0x22c>
 800ba16:	7821      	ldrb	r1, [r4, #0]
 800ba18:	2203      	movs	r2, #3
 800ba1a:	4650      	mov	r0, sl
 800ba1c:	f7f4 fbd8 	bl	80001d0 <memchr>
 800ba20:	b138      	cbz	r0, 800ba32 <_vfiprintf_r+0x176>
 800ba22:	9b04      	ldr	r3, [sp, #16]
 800ba24:	eba0 000a 	sub.w	r0, r0, sl
 800ba28:	2240      	movs	r2, #64	@ 0x40
 800ba2a:	4082      	lsls	r2, r0
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	3401      	adds	r4, #1
 800ba30:	9304      	str	r3, [sp, #16]
 800ba32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba36:	4829      	ldr	r0, [pc, #164]	@ (800badc <_vfiprintf_r+0x220>)
 800ba38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba3c:	2206      	movs	r2, #6
 800ba3e:	f7f4 fbc7 	bl	80001d0 <memchr>
 800ba42:	2800      	cmp	r0, #0
 800ba44:	d03f      	beq.n	800bac6 <_vfiprintf_r+0x20a>
 800ba46:	4b26      	ldr	r3, [pc, #152]	@ (800bae0 <_vfiprintf_r+0x224>)
 800ba48:	bb1b      	cbnz	r3, 800ba92 <_vfiprintf_r+0x1d6>
 800ba4a:	9b03      	ldr	r3, [sp, #12]
 800ba4c:	3307      	adds	r3, #7
 800ba4e:	f023 0307 	bic.w	r3, r3, #7
 800ba52:	3308      	adds	r3, #8
 800ba54:	9303      	str	r3, [sp, #12]
 800ba56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba58:	443b      	add	r3, r7
 800ba5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba5c:	e76a      	b.n	800b934 <_vfiprintf_r+0x78>
 800ba5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba62:	460c      	mov	r4, r1
 800ba64:	2001      	movs	r0, #1
 800ba66:	e7a8      	b.n	800b9ba <_vfiprintf_r+0xfe>
 800ba68:	2300      	movs	r3, #0
 800ba6a:	3401      	adds	r4, #1
 800ba6c:	9305      	str	r3, [sp, #20]
 800ba6e:	4619      	mov	r1, r3
 800ba70:	f04f 0c0a 	mov.w	ip, #10
 800ba74:	4620      	mov	r0, r4
 800ba76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba7a:	3a30      	subs	r2, #48	@ 0x30
 800ba7c:	2a09      	cmp	r2, #9
 800ba7e:	d903      	bls.n	800ba88 <_vfiprintf_r+0x1cc>
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d0c6      	beq.n	800ba12 <_vfiprintf_r+0x156>
 800ba84:	9105      	str	r1, [sp, #20]
 800ba86:	e7c4      	b.n	800ba12 <_vfiprintf_r+0x156>
 800ba88:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e7f0      	b.n	800ba74 <_vfiprintf_r+0x1b8>
 800ba92:	ab03      	add	r3, sp, #12
 800ba94:	9300      	str	r3, [sp, #0]
 800ba96:	462a      	mov	r2, r5
 800ba98:	4b12      	ldr	r3, [pc, #72]	@ (800bae4 <_vfiprintf_r+0x228>)
 800ba9a:	a904      	add	r1, sp, #16
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	f7fd fcd7 	bl	8009450 <_printf_float>
 800baa2:	4607      	mov	r7, r0
 800baa4:	1c78      	adds	r0, r7, #1
 800baa6:	d1d6      	bne.n	800ba56 <_vfiprintf_r+0x19a>
 800baa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800baaa:	07d9      	lsls	r1, r3, #31
 800baac:	d405      	bmi.n	800baba <_vfiprintf_r+0x1fe>
 800baae:	89ab      	ldrh	r3, [r5, #12]
 800bab0:	059a      	lsls	r2, r3, #22
 800bab2:	d402      	bmi.n	800baba <_vfiprintf_r+0x1fe>
 800bab4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bab6:	f7fe fb4f 	bl	800a158 <__retarget_lock_release_recursive>
 800baba:	89ab      	ldrh	r3, [r5, #12]
 800babc:	065b      	lsls	r3, r3, #25
 800babe:	f53f af1f 	bmi.w	800b900 <_vfiprintf_r+0x44>
 800bac2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bac4:	e71e      	b.n	800b904 <_vfiprintf_r+0x48>
 800bac6:	ab03      	add	r3, sp, #12
 800bac8:	9300      	str	r3, [sp, #0]
 800baca:	462a      	mov	r2, r5
 800bacc:	4b05      	ldr	r3, [pc, #20]	@ (800bae4 <_vfiprintf_r+0x228>)
 800bace:	a904      	add	r1, sp, #16
 800bad0:	4630      	mov	r0, r6
 800bad2:	f7fd ff55 	bl	8009980 <_printf_i>
 800bad6:	e7e4      	b.n	800baa2 <_vfiprintf_r+0x1e6>
 800bad8:	08018268 	.word	0x08018268
 800badc:	08018272 	.word	0x08018272
 800bae0:	08009451 	.word	0x08009451
 800bae4:	0800b897 	.word	0x0800b897
 800bae8:	0801826e 	.word	0x0801826e

0800baec <__sflush_r>:
 800baec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800baf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baf4:	0716      	lsls	r6, r2, #28
 800baf6:	4605      	mov	r5, r0
 800baf8:	460c      	mov	r4, r1
 800bafa:	d454      	bmi.n	800bba6 <__sflush_r+0xba>
 800bafc:	684b      	ldr	r3, [r1, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	dc02      	bgt.n	800bb08 <__sflush_r+0x1c>
 800bb02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	dd48      	ble.n	800bb9a <__sflush_r+0xae>
 800bb08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb0a:	2e00      	cmp	r6, #0
 800bb0c:	d045      	beq.n	800bb9a <__sflush_r+0xae>
 800bb0e:	2300      	movs	r3, #0
 800bb10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bb14:	682f      	ldr	r7, [r5, #0]
 800bb16:	6a21      	ldr	r1, [r4, #32]
 800bb18:	602b      	str	r3, [r5, #0]
 800bb1a:	d030      	beq.n	800bb7e <__sflush_r+0x92>
 800bb1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb1e:	89a3      	ldrh	r3, [r4, #12]
 800bb20:	0759      	lsls	r1, r3, #29
 800bb22:	d505      	bpl.n	800bb30 <__sflush_r+0x44>
 800bb24:	6863      	ldr	r3, [r4, #4]
 800bb26:	1ad2      	subs	r2, r2, r3
 800bb28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb2a:	b10b      	cbz	r3, 800bb30 <__sflush_r+0x44>
 800bb2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb2e:	1ad2      	subs	r2, r2, r3
 800bb30:	2300      	movs	r3, #0
 800bb32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb34:	6a21      	ldr	r1, [r4, #32]
 800bb36:	4628      	mov	r0, r5
 800bb38:	47b0      	blx	r6
 800bb3a:	1c43      	adds	r3, r0, #1
 800bb3c:	89a3      	ldrh	r3, [r4, #12]
 800bb3e:	d106      	bne.n	800bb4e <__sflush_r+0x62>
 800bb40:	6829      	ldr	r1, [r5, #0]
 800bb42:	291d      	cmp	r1, #29
 800bb44:	d82b      	bhi.n	800bb9e <__sflush_r+0xb2>
 800bb46:	4a2a      	ldr	r2, [pc, #168]	@ (800bbf0 <__sflush_r+0x104>)
 800bb48:	410a      	asrs	r2, r1
 800bb4a:	07d6      	lsls	r6, r2, #31
 800bb4c:	d427      	bmi.n	800bb9e <__sflush_r+0xb2>
 800bb4e:	2200      	movs	r2, #0
 800bb50:	6062      	str	r2, [r4, #4]
 800bb52:	04d9      	lsls	r1, r3, #19
 800bb54:	6922      	ldr	r2, [r4, #16]
 800bb56:	6022      	str	r2, [r4, #0]
 800bb58:	d504      	bpl.n	800bb64 <__sflush_r+0x78>
 800bb5a:	1c42      	adds	r2, r0, #1
 800bb5c:	d101      	bne.n	800bb62 <__sflush_r+0x76>
 800bb5e:	682b      	ldr	r3, [r5, #0]
 800bb60:	b903      	cbnz	r3, 800bb64 <__sflush_r+0x78>
 800bb62:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb66:	602f      	str	r7, [r5, #0]
 800bb68:	b1b9      	cbz	r1, 800bb9a <__sflush_r+0xae>
 800bb6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb6e:	4299      	cmp	r1, r3
 800bb70:	d002      	beq.n	800bb78 <__sflush_r+0x8c>
 800bb72:	4628      	mov	r0, r5
 800bb74:	f7ff f94c 	bl	800ae10 <_free_r>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb7c:	e00d      	b.n	800bb9a <__sflush_r+0xae>
 800bb7e:	2301      	movs	r3, #1
 800bb80:	4628      	mov	r0, r5
 800bb82:	47b0      	blx	r6
 800bb84:	4602      	mov	r2, r0
 800bb86:	1c50      	adds	r0, r2, #1
 800bb88:	d1c9      	bne.n	800bb1e <__sflush_r+0x32>
 800bb8a:	682b      	ldr	r3, [r5, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d0c6      	beq.n	800bb1e <__sflush_r+0x32>
 800bb90:	2b1d      	cmp	r3, #29
 800bb92:	d001      	beq.n	800bb98 <__sflush_r+0xac>
 800bb94:	2b16      	cmp	r3, #22
 800bb96:	d11e      	bne.n	800bbd6 <__sflush_r+0xea>
 800bb98:	602f      	str	r7, [r5, #0]
 800bb9a:	2000      	movs	r0, #0
 800bb9c:	e022      	b.n	800bbe4 <__sflush_r+0xf8>
 800bb9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bba2:	b21b      	sxth	r3, r3
 800bba4:	e01b      	b.n	800bbde <__sflush_r+0xf2>
 800bba6:	690f      	ldr	r7, [r1, #16]
 800bba8:	2f00      	cmp	r7, #0
 800bbaa:	d0f6      	beq.n	800bb9a <__sflush_r+0xae>
 800bbac:	0793      	lsls	r3, r2, #30
 800bbae:	680e      	ldr	r6, [r1, #0]
 800bbb0:	bf08      	it	eq
 800bbb2:	694b      	ldreq	r3, [r1, #20]
 800bbb4:	600f      	str	r7, [r1, #0]
 800bbb6:	bf18      	it	ne
 800bbb8:	2300      	movne	r3, #0
 800bbba:	eba6 0807 	sub.w	r8, r6, r7
 800bbbe:	608b      	str	r3, [r1, #8]
 800bbc0:	f1b8 0f00 	cmp.w	r8, #0
 800bbc4:	dde9      	ble.n	800bb9a <__sflush_r+0xae>
 800bbc6:	6a21      	ldr	r1, [r4, #32]
 800bbc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bbca:	4643      	mov	r3, r8
 800bbcc:	463a      	mov	r2, r7
 800bbce:	4628      	mov	r0, r5
 800bbd0:	47b0      	blx	r6
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	dc08      	bgt.n	800bbe8 <__sflush_r+0xfc>
 800bbd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbde:	81a3      	strh	r3, [r4, #12]
 800bbe0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe8:	4407      	add	r7, r0
 800bbea:	eba8 0800 	sub.w	r8, r8, r0
 800bbee:	e7e7      	b.n	800bbc0 <__sflush_r+0xd4>
 800bbf0:	dfbffffe 	.word	0xdfbffffe

0800bbf4 <_fflush_r>:
 800bbf4:	b538      	push	{r3, r4, r5, lr}
 800bbf6:	690b      	ldr	r3, [r1, #16]
 800bbf8:	4605      	mov	r5, r0
 800bbfa:	460c      	mov	r4, r1
 800bbfc:	b913      	cbnz	r3, 800bc04 <_fflush_r+0x10>
 800bbfe:	2500      	movs	r5, #0
 800bc00:	4628      	mov	r0, r5
 800bc02:	bd38      	pop	{r3, r4, r5, pc}
 800bc04:	b118      	cbz	r0, 800bc0e <_fflush_r+0x1a>
 800bc06:	6a03      	ldr	r3, [r0, #32]
 800bc08:	b90b      	cbnz	r3, 800bc0e <_fflush_r+0x1a>
 800bc0a:	f7fe f865 	bl	8009cd8 <__sinit>
 800bc0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d0f3      	beq.n	800bbfe <_fflush_r+0xa>
 800bc16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bc18:	07d0      	lsls	r0, r2, #31
 800bc1a:	d404      	bmi.n	800bc26 <_fflush_r+0x32>
 800bc1c:	0599      	lsls	r1, r3, #22
 800bc1e:	d402      	bmi.n	800bc26 <_fflush_r+0x32>
 800bc20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc22:	f7fe fa98 	bl	800a156 <__retarget_lock_acquire_recursive>
 800bc26:	4628      	mov	r0, r5
 800bc28:	4621      	mov	r1, r4
 800bc2a:	f7ff ff5f 	bl	800baec <__sflush_r>
 800bc2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc30:	07da      	lsls	r2, r3, #31
 800bc32:	4605      	mov	r5, r0
 800bc34:	d4e4      	bmi.n	800bc00 <_fflush_r+0xc>
 800bc36:	89a3      	ldrh	r3, [r4, #12]
 800bc38:	059b      	lsls	r3, r3, #22
 800bc3a:	d4e1      	bmi.n	800bc00 <_fflush_r+0xc>
 800bc3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc3e:	f7fe fa8b 	bl	800a158 <__retarget_lock_release_recursive>
 800bc42:	e7dd      	b.n	800bc00 <_fflush_r+0xc>

0800bc44 <__swhatbuf_r>:
 800bc44:	b570      	push	{r4, r5, r6, lr}
 800bc46:	460c      	mov	r4, r1
 800bc48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc4c:	2900      	cmp	r1, #0
 800bc4e:	b096      	sub	sp, #88	@ 0x58
 800bc50:	4615      	mov	r5, r2
 800bc52:	461e      	mov	r6, r3
 800bc54:	da0d      	bge.n	800bc72 <__swhatbuf_r+0x2e>
 800bc56:	89a3      	ldrh	r3, [r4, #12]
 800bc58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bc5c:	f04f 0100 	mov.w	r1, #0
 800bc60:	bf14      	ite	ne
 800bc62:	2340      	movne	r3, #64	@ 0x40
 800bc64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bc68:	2000      	movs	r0, #0
 800bc6a:	6031      	str	r1, [r6, #0]
 800bc6c:	602b      	str	r3, [r5, #0]
 800bc6e:	b016      	add	sp, #88	@ 0x58
 800bc70:	bd70      	pop	{r4, r5, r6, pc}
 800bc72:	466a      	mov	r2, sp
 800bc74:	f000 f862 	bl	800bd3c <_fstat_r>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	dbec      	blt.n	800bc56 <__swhatbuf_r+0x12>
 800bc7c:	9901      	ldr	r1, [sp, #4]
 800bc7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bc82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bc86:	4259      	negs	r1, r3
 800bc88:	4159      	adcs	r1, r3
 800bc8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc8e:	e7eb      	b.n	800bc68 <__swhatbuf_r+0x24>

0800bc90 <__smakebuf_r>:
 800bc90:	898b      	ldrh	r3, [r1, #12]
 800bc92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc94:	079d      	lsls	r5, r3, #30
 800bc96:	4606      	mov	r6, r0
 800bc98:	460c      	mov	r4, r1
 800bc9a:	d507      	bpl.n	800bcac <__smakebuf_r+0x1c>
 800bc9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bca0:	6023      	str	r3, [r4, #0]
 800bca2:	6123      	str	r3, [r4, #16]
 800bca4:	2301      	movs	r3, #1
 800bca6:	6163      	str	r3, [r4, #20]
 800bca8:	b003      	add	sp, #12
 800bcaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcac:	ab01      	add	r3, sp, #4
 800bcae:	466a      	mov	r2, sp
 800bcb0:	f7ff ffc8 	bl	800bc44 <__swhatbuf_r>
 800bcb4:	9f00      	ldr	r7, [sp, #0]
 800bcb6:	4605      	mov	r5, r0
 800bcb8:	4639      	mov	r1, r7
 800bcba:	4630      	mov	r0, r6
 800bcbc:	f7fd fa6e 	bl	800919c <_malloc_r>
 800bcc0:	b948      	cbnz	r0, 800bcd6 <__smakebuf_r+0x46>
 800bcc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcc6:	059a      	lsls	r2, r3, #22
 800bcc8:	d4ee      	bmi.n	800bca8 <__smakebuf_r+0x18>
 800bcca:	f023 0303 	bic.w	r3, r3, #3
 800bcce:	f043 0302 	orr.w	r3, r3, #2
 800bcd2:	81a3      	strh	r3, [r4, #12]
 800bcd4:	e7e2      	b.n	800bc9c <__smakebuf_r+0xc>
 800bcd6:	89a3      	ldrh	r3, [r4, #12]
 800bcd8:	6020      	str	r0, [r4, #0]
 800bcda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcde:	81a3      	strh	r3, [r4, #12]
 800bce0:	9b01      	ldr	r3, [sp, #4]
 800bce2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bce6:	b15b      	cbz	r3, 800bd00 <__smakebuf_r+0x70>
 800bce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcec:	4630      	mov	r0, r6
 800bcee:	f000 f837 	bl	800bd60 <_isatty_r>
 800bcf2:	b128      	cbz	r0, 800bd00 <__smakebuf_r+0x70>
 800bcf4:	89a3      	ldrh	r3, [r4, #12]
 800bcf6:	f023 0303 	bic.w	r3, r3, #3
 800bcfa:	f043 0301 	orr.w	r3, r3, #1
 800bcfe:	81a3      	strh	r3, [r4, #12]
 800bd00:	89a3      	ldrh	r3, [r4, #12]
 800bd02:	431d      	orrs	r5, r3
 800bd04:	81a5      	strh	r5, [r4, #12]
 800bd06:	e7cf      	b.n	800bca8 <__smakebuf_r+0x18>

0800bd08 <memmove>:
 800bd08:	4288      	cmp	r0, r1
 800bd0a:	b510      	push	{r4, lr}
 800bd0c:	eb01 0402 	add.w	r4, r1, r2
 800bd10:	d902      	bls.n	800bd18 <memmove+0x10>
 800bd12:	4284      	cmp	r4, r0
 800bd14:	4623      	mov	r3, r4
 800bd16:	d807      	bhi.n	800bd28 <memmove+0x20>
 800bd18:	1e43      	subs	r3, r0, #1
 800bd1a:	42a1      	cmp	r1, r4
 800bd1c:	d008      	beq.n	800bd30 <memmove+0x28>
 800bd1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd22:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd26:	e7f8      	b.n	800bd1a <memmove+0x12>
 800bd28:	4402      	add	r2, r0
 800bd2a:	4601      	mov	r1, r0
 800bd2c:	428a      	cmp	r2, r1
 800bd2e:	d100      	bne.n	800bd32 <memmove+0x2a>
 800bd30:	bd10      	pop	{r4, pc}
 800bd32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd3a:	e7f7      	b.n	800bd2c <memmove+0x24>

0800bd3c <_fstat_r>:
 800bd3c:	b538      	push	{r3, r4, r5, lr}
 800bd3e:	4d07      	ldr	r5, [pc, #28]	@ (800bd5c <_fstat_r+0x20>)
 800bd40:	2300      	movs	r3, #0
 800bd42:	4604      	mov	r4, r0
 800bd44:	4608      	mov	r0, r1
 800bd46:	4611      	mov	r1, r2
 800bd48:	602b      	str	r3, [r5, #0]
 800bd4a:	f000 fa05 	bl	800c158 <_fstat>
 800bd4e:	1c43      	adds	r3, r0, #1
 800bd50:	d102      	bne.n	800bd58 <_fstat_r+0x1c>
 800bd52:	682b      	ldr	r3, [r5, #0]
 800bd54:	b103      	cbz	r3, 800bd58 <_fstat_r+0x1c>
 800bd56:	6023      	str	r3, [r4, #0]
 800bd58:	bd38      	pop	{r3, r4, r5, pc}
 800bd5a:	bf00      	nop
 800bd5c:	20001e60 	.word	0x20001e60

0800bd60 <_isatty_r>:
 800bd60:	b538      	push	{r3, r4, r5, lr}
 800bd62:	4d06      	ldr	r5, [pc, #24]	@ (800bd7c <_isatty_r+0x1c>)
 800bd64:	2300      	movs	r3, #0
 800bd66:	4604      	mov	r4, r0
 800bd68:	4608      	mov	r0, r1
 800bd6a:	602b      	str	r3, [r5, #0]
 800bd6c:	f000 fa04 	bl	800c178 <_isatty>
 800bd70:	1c43      	adds	r3, r0, #1
 800bd72:	d102      	bne.n	800bd7a <_isatty_r+0x1a>
 800bd74:	682b      	ldr	r3, [r5, #0]
 800bd76:	b103      	cbz	r3, 800bd7a <_isatty_r+0x1a>
 800bd78:	6023      	str	r3, [r4, #0]
 800bd7a:	bd38      	pop	{r3, r4, r5, pc}
 800bd7c:	20001e60 	.word	0x20001e60

0800bd80 <__assert_func>:
 800bd80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd82:	4614      	mov	r4, r2
 800bd84:	461a      	mov	r2, r3
 800bd86:	4b09      	ldr	r3, [pc, #36]	@ (800bdac <__assert_func+0x2c>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4605      	mov	r5, r0
 800bd8c:	68d8      	ldr	r0, [r3, #12]
 800bd8e:	b954      	cbnz	r4, 800bda6 <__assert_func+0x26>
 800bd90:	4b07      	ldr	r3, [pc, #28]	@ (800bdb0 <__assert_func+0x30>)
 800bd92:	461c      	mov	r4, r3
 800bd94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd98:	9100      	str	r1, [sp, #0]
 800bd9a:	462b      	mov	r3, r5
 800bd9c:	4905      	ldr	r1, [pc, #20]	@ (800bdb4 <__assert_func+0x34>)
 800bd9e:	f000 f841 	bl	800be24 <fiprintf>
 800bda2:	f000 f851 	bl	800be48 <abort>
 800bda6:	4b04      	ldr	r3, [pc, #16]	@ (800bdb8 <__assert_func+0x38>)
 800bda8:	e7f4      	b.n	800bd94 <__assert_func+0x14>
 800bdaa:	bf00      	nop
 800bdac:	20000aa4 	.word	0x20000aa4
 800bdb0:	080182be 	.word	0x080182be
 800bdb4:	08018290 	.word	0x08018290
 800bdb8:	08018283 	.word	0x08018283

0800bdbc <_calloc_r>:
 800bdbc:	b570      	push	{r4, r5, r6, lr}
 800bdbe:	fba1 5402 	umull	r5, r4, r1, r2
 800bdc2:	b93c      	cbnz	r4, 800bdd4 <_calloc_r+0x18>
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	f7fd f9e9 	bl	800919c <_malloc_r>
 800bdca:	4606      	mov	r6, r0
 800bdcc:	b928      	cbnz	r0, 800bdda <_calloc_r+0x1e>
 800bdce:	2600      	movs	r6, #0
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	bd70      	pop	{r4, r5, r6, pc}
 800bdd4:	220c      	movs	r2, #12
 800bdd6:	6002      	str	r2, [r0, #0]
 800bdd8:	e7f9      	b.n	800bdce <_calloc_r+0x12>
 800bdda:	462a      	mov	r2, r5
 800bddc:	4621      	mov	r1, r4
 800bdde:	f7fe f92d 	bl	800a03c <memset>
 800bde2:	e7f5      	b.n	800bdd0 <_calloc_r+0x14>

0800bde4 <__ascii_mbtowc>:
 800bde4:	b082      	sub	sp, #8
 800bde6:	b901      	cbnz	r1, 800bdea <__ascii_mbtowc+0x6>
 800bde8:	a901      	add	r1, sp, #4
 800bdea:	b142      	cbz	r2, 800bdfe <__ascii_mbtowc+0x1a>
 800bdec:	b14b      	cbz	r3, 800be02 <__ascii_mbtowc+0x1e>
 800bdee:	7813      	ldrb	r3, [r2, #0]
 800bdf0:	600b      	str	r3, [r1, #0]
 800bdf2:	7812      	ldrb	r2, [r2, #0]
 800bdf4:	1e10      	subs	r0, r2, #0
 800bdf6:	bf18      	it	ne
 800bdf8:	2001      	movne	r0, #1
 800bdfa:	b002      	add	sp, #8
 800bdfc:	4770      	bx	lr
 800bdfe:	4610      	mov	r0, r2
 800be00:	e7fb      	b.n	800bdfa <__ascii_mbtowc+0x16>
 800be02:	f06f 0001 	mvn.w	r0, #1
 800be06:	e7f8      	b.n	800bdfa <__ascii_mbtowc+0x16>

0800be08 <__ascii_wctomb>:
 800be08:	4603      	mov	r3, r0
 800be0a:	4608      	mov	r0, r1
 800be0c:	b141      	cbz	r1, 800be20 <__ascii_wctomb+0x18>
 800be0e:	2aff      	cmp	r2, #255	@ 0xff
 800be10:	d904      	bls.n	800be1c <__ascii_wctomb+0x14>
 800be12:	228a      	movs	r2, #138	@ 0x8a
 800be14:	601a      	str	r2, [r3, #0]
 800be16:	f04f 30ff 	mov.w	r0, #4294967295
 800be1a:	4770      	bx	lr
 800be1c:	700a      	strb	r2, [r1, #0]
 800be1e:	2001      	movs	r0, #1
 800be20:	4770      	bx	lr
	...

0800be24 <fiprintf>:
 800be24:	b40e      	push	{r1, r2, r3}
 800be26:	b503      	push	{r0, r1, lr}
 800be28:	4601      	mov	r1, r0
 800be2a:	ab03      	add	r3, sp, #12
 800be2c:	4805      	ldr	r0, [pc, #20]	@ (800be44 <fiprintf+0x20>)
 800be2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800be32:	6800      	ldr	r0, [r0, #0]
 800be34:	9301      	str	r3, [sp, #4]
 800be36:	f7ff fd41 	bl	800b8bc <_vfiprintf_r>
 800be3a:	b002      	add	sp, #8
 800be3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800be40:	b003      	add	sp, #12
 800be42:	4770      	bx	lr
 800be44:	20000aa4 	.word	0x20000aa4

0800be48 <abort>:
 800be48:	b508      	push	{r3, lr}
 800be4a:	2006      	movs	r0, #6
 800be4c:	f000 f82c 	bl	800bea8 <raise>
 800be50:	2001      	movs	r0, #1
 800be52:	f000 f9b9 	bl	800c1c8 <_exit>

0800be56 <_raise_r>:
 800be56:	291f      	cmp	r1, #31
 800be58:	b538      	push	{r3, r4, r5, lr}
 800be5a:	4605      	mov	r5, r0
 800be5c:	460c      	mov	r4, r1
 800be5e:	d904      	bls.n	800be6a <_raise_r+0x14>
 800be60:	2316      	movs	r3, #22
 800be62:	6003      	str	r3, [r0, #0]
 800be64:	f04f 30ff 	mov.w	r0, #4294967295
 800be68:	bd38      	pop	{r3, r4, r5, pc}
 800be6a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800be6c:	b112      	cbz	r2, 800be74 <_raise_r+0x1e>
 800be6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be72:	b94b      	cbnz	r3, 800be88 <_raise_r+0x32>
 800be74:	4628      	mov	r0, r5
 800be76:	f000 f831 	bl	800bedc <_getpid_r>
 800be7a:	4622      	mov	r2, r4
 800be7c:	4601      	mov	r1, r0
 800be7e:	4628      	mov	r0, r5
 800be80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be84:	f000 b818 	b.w	800beb8 <_kill_r>
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d00a      	beq.n	800bea2 <_raise_r+0x4c>
 800be8c:	1c59      	adds	r1, r3, #1
 800be8e:	d103      	bne.n	800be98 <_raise_r+0x42>
 800be90:	2316      	movs	r3, #22
 800be92:	6003      	str	r3, [r0, #0]
 800be94:	2001      	movs	r0, #1
 800be96:	e7e7      	b.n	800be68 <_raise_r+0x12>
 800be98:	2100      	movs	r1, #0
 800be9a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800be9e:	4620      	mov	r0, r4
 800bea0:	4798      	blx	r3
 800bea2:	2000      	movs	r0, #0
 800bea4:	e7e0      	b.n	800be68 <_raise_r+0x12>
	...

0800bea8 <raise>:
 800bea8:	4b02      	ldr	r3, [pc, #8]	@ (800beb4 <raise+0xc>)
 800beaa:	4601      	mov	r1, r0
 800beac:	6818      	ldr	r0, [r3, #0]
 800beae:	f7ff bfd2 	b.w	800be56 <_raise_r>
 800beb2:	bf00      	nop
 800beb4:	20000aa4 	.word	0x20000aa4

0800beb8 <_kill_r>:
 800beb8:	b538      	push	{r3, r4, r5, lr}
 800beba:	4d07      	ldr	r5, [pc, #28]	@ (800bed8 <_kill_r+0x20>)
 800bebc:	2300      	movs	r3, #0
 800bebe:	4604      	mov	r4, r0
 800bec0:	4608      	mov	r0, r1
 800bec2:	4611      	mov	r1, r2
 800bec4:	602b      	str	r3, [r5, #0]
 800bec6:	f000 f95f 	bl	800c188 <_kill>
 800beca:	1c43      	adds	r3, r0, #1
 800becc:	d102      	bne.n	800bed4 <_kill_r+0x1c>
 800bece:	682b      	ldr	r3, [r5, #0]
 800bed0:	b103      	cbz	r3, 800bed4 <_kill_r+0x1c>
 800bed2:	6023      	str	r3, [r4, #0]
 800bed4:	bd38      	pop	{r3, r4, r5, pc}
 800bed6:	bf00      	nop
 800bed8:	20001e60 	.word	0x20001e60

0800bedc <_getpid_r>:
 800bedc:	f000 b944 	b.w	800c168 <_getpid>

0800bee0 <expf>:
 800bee0:	b508      	push	{r3, lr}
 800bee2:	ed2d 8b02 	vpush	{d8}
 800bee6:	eef0 8a40 	vmov.f32	s17, s0
 800beea:	f000 f85f 	bl	800bfac <__ieee754_expf>
 800beee:	eeb0 8a40 	vmov.f32	s16, s0
 800bef2:	eeb0 0a68 	vmov.f32	s0, s17
 800bef6:	f000 f829 	bl	800bf4c <finitef>
 800befa:	b160      	cbz	r0, 800bf16 <expf+0x36>
 800befc:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800bf3c <expf+0x5c>
 800bf00:	eef4 8ae7 	vcmpe.f32	s17, s15
 800bf04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf08:	dd0a      	ble.n	800bf20 <expf+0x40>
 800bf0a:	f7fe f8f9 	bl	800a100 <__errno>
 800bf0e:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800bf40 <expf+0x60>
 800bf12:	2322      	movs	r3, #34	@ 0x22
 800bf14:	6003      	str	r3, [r0, #0]
 800bf16:	eeb0 0a48 	vmov.f32	s0, s16
 800bf1a:	ecbd 8b02 	vpop	{d8}
 800bf1e:	bd08      	pop	{r3, pc}
 800bf20:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800bf44 <expf+0x64>
 800bf24:	eef4 8ae7 	vcmpe.f32	s17, s15
 800bf28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf2c:	d5f3      	bpl.n	800bf16 <expf+0x36>
 800bf2e:	f7fe f8e7 	bl	800a100 <__errno>
 800bf32:	2322      	movs	r3, #34	@ 0x22
 800bf34:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800bf48 <expf+0x68>
 800bf38:	6003      	str	r3, [r0, #0]
 800bf3a:	e7ec      	b.n	800bf16 <expf+0x36>
 800bf3c:	42b17217 	.word	0x42b17217
 800bf40:	7f800000 	.word	0x7f800000
 800bf44:	c2cff1b5 	.word	0xc2cff1b5
 800bf48:	00000000 	.word	0x00000000

0800bf4c <finitef>:
 800bf4c:	ee10 3a10 	vmov	r3, s0
 800bf50:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800bf54:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800bf58:	bfac      	ite	ge
 800bf5a:	2000      	movge	r0, #0
 800bf5c:	2001      	movlt	r0, #1
 800bf5e:	4770      	bx	lr

0800bf60 <with_errnof>:
 800bf60:	b510      	push	{r4, lr}
 800bf62:	ed2d 8b02 	vpush	{d8}
 800bf66:	eeb0 8a40 	vmov.f32	s16, s0
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	f7fe f8c8 	bl	800a100 <__errno>
 800bf70:	eeb0 0a48 	vmov.f32	s0, s16
 800bf74:	ecbd 8b02 	vpop	{d8}
 800bf78:	6004      	str	r4, [r0, #0]
 800bf7a:	bd10      	pop	{r4, pc}

0800bf7c <xflowf>:
 800bf7c:	b130      	cbz	r0, 800bf8c <xflowf+0x10>
 800bf7e:	eef1 7a40 	vneg.f32	s15, s0
 800bf82:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bf86:	2022      	movs	r0, #34	@ 0x22
 800bf88:	f7ff bfea 	b.w	800bf60 <with_errnof>
 800bf8c:	eef0 7a40 	vmov.f32	s15, s0
 800bf90:	e7f7      	b.n	800bf82 <xflowf+0x6>
	...

0800bf94 <__math_uflowf>:
 800bf94:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bf9c <__math_uflowf+0x8>
 800bf98:	f7ff bff0 	b.w	800bf7c <xflowf>
 800bf9c:	10000000 	.word	0x10000000

0800bfa0 <__math_oflowf>:
 800bfa0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bfa8 <__math_oflowf+0x8>
 800bfa4:	f7ff bfea 	b.w	800bf7c <xflowf>
 800bfa8:	70000000 	.word	0x70000000

0800bfac <__ieee754_expf>:
 800bfac:	ee10 2a10 	vmov	r2, s0
 800bfb0:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800bfb4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bfb8:	d902      	bls.n	800bfc0 <__ieee754_expf+0x14>
 800bfba:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bfbe:	4770      	bx	lr
 800bfc0:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800bfc4:	d106      	bne.n	800bfd4 <__ieee754_expf+0x28>
 800bfc6:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800c100 <__ieee754_expf+0x154>
 800bfca:	2900      	cmp	r1, #0
 800bfcc:	bf18      	it	ne
 800bfce:	eeb0 0a67 	vmovne.f32	s0, s15
 800bfd2:	4770      	bx	lr
 800bfd4:	484b      	ldr	r0, [pc, #300]	@ (800c104 <__ieee754_expf+0x158>)
 800bfd6:	4282      	cmp	r2, r0
 800bfd8:	dd02      	ble.n	800bfe0 <__ieee754_expf+0x34>
 800bfda:	2000      	movs	r0, #0
 800bfdc:	f7ff bfe0 	b.w	800bfa0 <__math_oflowf>
 800bfe0:	2a00      	cmp	r2, #0
 800bfe2:	da05      	bge.n	800bff0 <__ieee754_expf+0x44>
 800bfe4:	4a48      	ldr	r2, [pc, #288]	@ (800c108 <__ieee754_expf+0x15c>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d902      	bls.n	800bff0 <__ieee754_expf+0x44>
 800bfea:	2000      	movs	r0, #0
 800bfec:	f7ff bfd2 	b.w	800bf94 <__math_uflowf>
 800bff0:	4a46      	ldr	r2, [pc, #280]	@ (800c10c <__ieee754_expf+0x160>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800bff8:	d952      	bls.n	800c0a0 <__ieee754_expf+0xf4>
 800bffa:	4a45      	ldr	r2, [pc, #276]	@ (800c110 <__ieee754_expf+0x164>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800c002:	d834      	bhi.n	800c06e <__ieee754_expf+0xc2>
 800c004:	4b43      	ldr	r3, [pc, #268]	@ (800c114 <__ieee754_expf+0x168>)
 800c006:	4413      	add	r3, r2
 800c008:	ed93 7a00 	vldr	s14, [r3]
 800c00c:	4b42      	ldr	r3, [pc, #264]	@ (800c118 <__ieee754_expf+0x16c>)
 800c00e:	4413      	add	r3, r2
 800c010:	ee30 7a47 	vsub.f32	s14, s0, s14
 800c014:	f1c1 0201 	rsb	r2, r1, #1
 800c018:	edd3 7a00 	vldr	s15, [r3]
 800c01c:	1a52      	subs	r2, r2, r1
 800c01e:	ee37 0a67 	vsub.f32	s0, s14, s15
 800c022:	ee20 6a00 	vmul.f32	s12, s0, s0
 800c026:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800c11c <__ieee754_expf+0x170>
 800c02a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c120 <__ieee754_expf+0x174>
 800c02e:	eee6 6a05 	vfma.f32	s13, s12, s10
 800c032:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800c124 <__ieee754_expf+0x178>
 800c036:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c03a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c128 <__ieee754_expf+0x17c>
 800c03e:	eee5 6a06 	vfma.f32	s13, s10, s12
 800c042:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800c12c <__ieee754_expf+0x180>
 800c046:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c04a:	eef0 6a40 	vmov.f32	s13, s0
 800c04e:	eee5 6a46 	vfms.f32	s13, s10, s12
 800c052:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800c056:	ee20 5a26 	vmul.f32	s10, s0, s13
 800c05a:	bb92      	cbnz	r2, 800c0c2 <__ieee754_expf+0x116>
 800c05c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800c060:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800c064:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c068:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800c06c:	4770      	bx	lr
 800c06e:	4b30      	ldr	r3, [pc, #192]	@ (800c130 <__ieee754_expf+0x184>)
 800c070:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800c134 <__ieee754_expf+0x188>
 800c074:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800c138 <__ieee754_expf+0x18c>
 800c078:	4413      	add	r3, r2
 800c07a:	edd3 7a00 	vldr	s15, [r3]
 800c07e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c082:	eeb0 7a40 	vmov.f32	s14, s0
 800c086:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c08a:	ee17 2a90 	vmov	r2, s15
 800c08e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c092:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c096:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800c13c <__ieee754_expf+0x190>
 800c09a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c09e:	e7be      	b.n	800c01e <__ieee754_expf+0x72>
 800c0a0:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800c0a4:	d20b      	bcs.n	800c0be <__ieee754_expf+0x112>
 800c0a6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c140 <__ieee754_expf+0x194>
 800c0aa:	ee70 6a26 	vadd.f32	s13, s0, s13
 800c0ae:	eef4 6ae5 	vcmpe.f32	s13, s11
 800c0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0b6:	dd02      	ble.n	800c0be <__ieee754_expf+0x112>
 800c0b8:	ee30 0a25 	vadd.f32	s0, s0, s11
 800c0bc:	4770      	bx	lr
 800c0be:	2200      	movs	r2, #0
 800c0c0:	e7af      	b.n	800c022 <__ieee754_expf+0x76>
 800c0c2:	ee36 6a66 	vsub.f32	s12, s12, s13
 800c0c6:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800c0ca:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800c0ce:	bfb8      	it	lt
 800c0d0:	3264      	addlt	r2, #100	@ 0x64
 800c0d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c0d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c0da:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c0de:	ee17 3a90 	vmov	r3, s15
 800c0e2:	bfab      	itete	ge
 800c0e4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800c0e8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800c0ec:	ee00 3a10 	vmovge	s0, r3
 800c0f0:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800c144 <__ieee754_expf+0x198>
 800c0f4:	bfbc      	itt	lt
 800c0f6:	ee00 3a10 	vmovlt	s0, r3
 800c0fa:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800c0fe:	4770      	bx	lr
 800c100:	00000000 	.word	0x00000000
 800c104:	42b17217 	.word	0x42b17217
 800c108:	42cff1b5 	.word	0x42cff1b5
 800c10c:	3eb17218 	.word	0x3eb17218
 800c110:	3f851591 	.word	0x3f851591
 800c114:	080183c8 	.word	0x080183c8
 800c118:	080183c0 	.word	0x080183c0
 800c11c:	3331bb4c 	.word	0x3331bb4c
 800c120:	b5ddea0e 	.word	0xb5ddea0e
 800c124:	388ab355 	.word	0x388ab355
 800c128:	bb360b61 	.word	0xbb360b61
 800c12c:	3e2aaaab 	.word	0x3e2aaaab
 800c130:	080183d0 	.word	0x080183d0
 800c134:	3fb8aa3b 	.word	0x3fb8aa3b
 800c138:	3f317180 	.word	0x3f317180
 800c13c:	3717f7d1 	.word	0x3717f7d1
 800c140:	7149f2ca 	.word	0x7149f2ca
 800c144:	0d800000 	.word	0x0d800000

0800c148 <_close>:
 800c148:	4b02      	ldr	r3, [pc, #8]	@ (800c154 <_close+0xc>)
 800c14a:	2258      	movs	r2, #88	@ 0x58
 800c14c:	601a      	str	r2, [r3, #0]
 800c14e:	f04f 30ff 	mov.w	r0, #4294967295
 800c152:	4770      	bx	lr
 800c154:	20001e60 	.word	0x20001e60

0800c158 <_fstat>:
 800c158:	4b02      	ldr	r3, [pc, #8]	@ (800c164 <_fstat+0xc>)
 800c15a:	2258      	movs	r2, #88	@ 0x58
 800c15c:	601a      	str	r2, [r3, #0]
 800c15e:	f04f 30ff 	mov.w	r0, #4294967295
 800c162:	4770      	bx	lr
 800c164:	20001e60 	.word	0x20001e60

0800c168 <_getpid>:
 800c168:	4b02      	ldr	r3, [pc, #8]	@ (800c174 <_getpid+0xc>)
 800c16a:	2258      	movs	r2, #88	@ 0x58
 800c16c:	601a      	str	r2, [r3, #0]
 800c16e:	f04f 30ff 	mov.w	r0, #4294967295
 800c172:	4770      	bx	lr
 800c174:	20001e60 	.word	0x20001e60

0800c178 <_isatty>:
 800c178:	4b02      	ldr	r3, [pc, #8]	@ (800c184 <_isatty+0xc>)
 800c17a:	2258      	movs	r2, #88	@ 0x58
 800c17c:	601a      	str	r2, [r3, #0]
 800c17e:	2000      	movs	r0, #0
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	20001e60 	.word	0x20001e60

0800c188 <_kill>:
 800c188:	4b02      	ldr	r3, [pc, #8]	@ (800c194 <_kill+0xc>)
 800c18a:	2258      	movs	r2, #88	@ 0x58
 800c18c:	601a      	str	r2, [r3, #0]
 800c18e:	f04f 30ff 	mov.w	r0, #4294967295
 800c192:	4770      	bx	lr
 800c194:	20001e60 	.word	0x20001e60

0800c198 <_lseek>:
 800c198:	4b02      	ldr	r3, [pc, #8]	@ (800c1a4 <_lseek+0xc>)
 800c19a:	2258      	movs	r2, #88	@ 0x58
 800c19c:	601a      	str	r2, [r3, #0]
 800c19e:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a2:	4770      	bx	lr
 800c1a4:	20001e60 	.word	0x20001e60

0800c1a8 <_read>:
 800c1a8:	4b02      	ldr	r3, [pc, #8]	@ (800c1b4 <_read+0xc>)
 800c1aa:	2258      	movs	r2, #88	@ 0x58
 800c1ac:	601a      	str	r2, [r3, #0]
 800c1ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b2:	4770      	bx	lr
 800c1b4:	20001e60 	.word	0x20001e60

0800c1b8 <_write>:
 800c1b8:	4b02      	ldr	r3, [pc, #8]	@ (800c1c4 <_write+0xc>)
 800c1ba:	2258      	movs	r2, #88	@ 0x58
 800c1bc:	601a      	str	r2, [r3, #0]
 800c1be:	f04f 30ff 	mov.w	r0, #4294967295
 800c1c2:	4770      	bx	lr
 800c1c4:	20001e60 	.word	0x20001e60

0800c1c8 <_exit>:
 800c1c8:	e7fe      	b.n	800c1c8 <_exit>
	...

0800c1cc <_init>:
 800c1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ce:	bf00      	nop
 800c1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1d2:	bc08      	pop	{r3}
 800c1d4:	469e      	mov	lr, r3
 800c1d6:	4770      	bx	lr

0800c1d8 <_fini>:
 800c1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1da:	bf00      	nop
 800c1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1de:	bc08      	pop	{r3}
 800c1e0:	469e      	mov	lr, r3
 800c1e2:	4770      	bx	lr
