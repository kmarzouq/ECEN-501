
Lab2p2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005280  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005408  08005408  00006408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005450  08005450  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005450  08005450  00006450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005458  08005458  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005458  08005458  00006458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800545c  0800545c  0000645c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005460  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000550c  2000000c  0800546c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005518  0800546c  00007518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f11  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003381  00000000  00000000  0001ff4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  000232d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001167  00000000  00000000  00024938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000281fb  00000000  00000000  00025a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b16f  00000000  00000000  0004dc9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f365b  00000000  00000000  00068e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015c464  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006004  00000000  00000000  0015c4a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001624ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080053f0 	.word	0x080053f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080053f0 	.word	0x080053f0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fed4 	bl	800126a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f84d 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f9e7 	bl	8000898 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004ca:	f000 f8ab 	bl	8000624 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004ce:	f000 f8e1 	bl	8000694 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004d2:	f000 f91f 	bl	8000714 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004d6:	f000 f943 	bl	8000760 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004da:	f000 f97f 	bl	80007dc <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004de:	f000 f9ad 	bl	800083c <MX_USB_OTG_FS_PCD_Init>
  BSP_PSENSOR_Init();
  BSP_ACCELERO_Init();
  BSP_GYRO_Init();
  BSP_MAGNETO_Init();
#else
  for(int count = 0, letter = 33; count < sizeof(data); count++, letter++) {
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	2321      	movs	r3, #33	@ 0x21
 80004e8:	603b      	str	r3, [r7, #0]
 80004ea:	e011      	b.n	8000510 <main+0x58>
	  if (letter > 125) {
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	2b7d      	cmp	r3, #125	@ 0x7d
 80004f0:	dd01      	ble.n	80004f6 <main+0x3e>
		  letter = 33;
 80004f2:	2321      	movs	r3, #33	@ 0x21
 80004f4:	603b      	str	r3, [r7, #0]
	  }
	  data[count] = letter;
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	b2d9      	uxtb	r1, r3
 80004fa:	4a15      	ldr	r2, [pc, #84]	@ (8000550 <main+0x98>)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4413      	add	r3, r2
 8000500:	460a      	mov	r2, r1
 8000502:	701a      	strb	r2, [r3, #0]
  for(int count = 0, letter = 33; count < sizeof(data); count++, letter++) {
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	3301      	adds	r3, #1
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	3301      	adds	r3, #1
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000516:	4293      	cmp	r3, r2
 8000518:	d9e8      	bls.n	80004ec <main+0x34>
  }

  status = HAL_UART_Transmit_IT(&huart1, data, sizeof(data));
 800051a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800051e:	490c      	ldr	r1, [pc, #48]	@ (8000550 <main+0x98>)
 8000520:	480c      	ldr	r0, [pc, #48]	@ (8000554 <main+0x9c>)
 8000522:	f003 fb3b 	bl	8003b9c <HAL_UART_Transmit_IT>
 8000526:	4603      	mov	r3, r0
 8000528:	461a      	mov	r2, r3
 800052a:	4b0b      	ldr	r3, [pc, #44]	@ (8000558 <main+0xa0>)
 800052c:	701a      	strb	r2, [r3, #0]
  if (status != HAL_OK) {
 800052e:	4b0a      	ldr	r3, [pc, #40]	@ (8000558 <main+0xa0>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <main+0x82>
	  Error_Handler();
 8000536:	f000 fb85 	bl	8000c44 <Error_Handler>
	  sprintf(message, "Humidity: %.2f | Temp: %.2f\r\nPressure: %.2f\r\nMagnet: %d %d %d\r\nAccel: %d %d %d\r\nGyro: %.2f %.2f %.2f\r\n\n\0", humidity, temp, barometer, magnetometer[0], magnetometer[1], magnetometer[2], accel[0], accel[1], accel[2], gyro[0], gyro[1], gyro[2]);

	  HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
	  HAL_Delay(1000);
#else
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800053a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800053e:	4807      	ldr	r0, [pc, #28]	@ (800055c <main+0xa4>)
 8000540:	f001 fb8c 	bl	8001c5c <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8000544:	20fa      	movs	r0, #250	@ 0xfa
 8000546:	f000 ff05 	bl	8001354 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800054a:	bf00      	nop
 800054c:	e7f5      	b.n	800053a <main+0x82>
 800054e:	bf00      	nop
 8000550:	200006cc 	.word	0x200006cc
 8000554:	2000015c 	.word	0x2000015c
 8000558:	200006c8 	.word	0x200006c8
 800055c:	48000400 	.word	0x48000400

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b096      	sub	sp, #88	@ 0x58
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2244      	movs	r2, #68	@ 0x44
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f004 ff11 	bl	8005396 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	463b      	mov	r3, r7
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000582:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000586:	f001 fe29 	bl	80021dc <HAL_PWREx_ControlVoltageScaling>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000590:	f000 fb58 	bl	8000c44 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000594:	f001 fe04 	bl	80021a0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000598:	4b21      	ldr	r3, [pc, #132]	@ (8000620 <SystemClock_Config+0xc0>)
 800059a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800059e:	4a20      	ldr	r2, [pc, #128]	@ (8000620 <SystemClock_Config+0xc0>)
 80005a0:	f023 0318 	bic.w	r3, r3, #24
 80005a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005a8:	2314      	movs	r3, #20
 80005aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005b8:	2360      	movs	r3, #96	@ 0x60
 80005ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005bc:	2302      	movs	r3, #2
 80005be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005c0:	2301      	movs	r3, #1
 80005c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005c8:	2328      	movs	r3, #40	@ 0x28
 80005ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005cc:	2307      	movs	r3, #7
 80005ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 ff1f 	bl	8002420 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005e8:	f000 fb2c 	bl	8000c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2303      	movs	r3, #3
 80005f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	2104      	movs	r1, #4
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fae7 	bl	8002bd8 <HAL_RCC_ClockConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000610:	f000 fb18 	bl	8000c44 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000614:	f002 ffee 	bl	80035f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000618:	bf00      	nop
 800061a:	3758      	adds	r7, #88	@ 0x58
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40021000 	.word	0x40021000

08000624 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000628:	4b18      	ldr	r3, [pc, #96]	@ (800068c <MX_DFSDM1_Init+0x68>)
 800062a:	4a19      	ldr	r2, [pc, #100]	@ (8000690 <MX_DFSDM1_Init+0x6c>)
 800062c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800062e:	4b17      	ldr	r3, [pc, #92]	@ (800068c <MX_DFSDM1_Init+0x68>)
 8000630:	2201      	movs	r2, #1
 8000632:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000634:	4b15      	ldr	r3, [pc, #84]	@ (800068c <MX_DFSDM1_Init+0x68>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800063a:	4b14      	ldr	r3, [pc, #80]	@ (800068c <MX_DFSDM1_Init+0x68>)
 800063c:	2202      	movs	r2, #2
 800063e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000640:	4b12      	ldr	r3, [pc, #72]	@ (800068c <MX_DFSDM1_Init+0x68>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000646:	4b11      	ldr	r3, [pc, #68]	@ (800068c <MX_DFSDM1_Init+0x68>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800064c:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <MX_DFSDM1_Init+0x68>)
 800064e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000652:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000654:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <MX_DFSDM1_Init+0x68>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800065a:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <MX_DFSDM1_Init+0x68>)
 800065c:	2204      	movs	r2, #4
 800065e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000660:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <MX_DFSDM1_Init+0x68>)
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000666:	4b09      	ldr	r3, [pc, #36]	@ (800068c <MX_DFSDM1_Init+0x68>)
 8000668:	2201      	movs	r2, #1
 800066a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800066c:	4b07      	ldr	r3, [pc, #28]	@ (800068c <MX_DFSDM1_Init+0x68>)
 800066e:	2200      	movs	r2, #0
 8000670:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000672:	4b06      	ldr	r3, [pc, #24]	@ (800068c <MX_DFSDM1_Init+0x68>)
 8000674:	2200      	movs	r2, #0
 8000676:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000678:	4804      	ldr	r0, [pc, #16]	@ (800068c <MX_DFSDM1_Init+0x68>)
 800067a:	f000 ffa1 	bl	80015c0 <HAL_DFSDM_ChannelInit>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000684:	f000 fade 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000028 	.word	0x20000028
 8000690:	40016020 	.word	0x40016020

08000694 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000698:	4b1b      	ldr	r3, [pc, #108]	@ (8000708 <MX_I2C2_Init+0x74>)
 800069a:	4a1c      	ldr	r2, [pc, #112]	@ (800070c <MX_I2C2_Init+0x78>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800069e:	4b1a      	ldr	r3, [pc, #104]	@ (8000708 <MX_I2C2_Init+0x74>)
 80006a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000710 <MX_I2C2_Init+0x7c>)
 80006a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006a4:	4b18      	ldr	r3, [pc, #96]	@ (8000708 <MX_I2C2_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006aa:	4b17      	ldr	r3, [pc, #92]	@ (8000708 <MX_I2C2_Init+0x74>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b0:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <MX_I2C2_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006b6:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <MX_I2C2_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <MX_I2C2_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_I2C2_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_I2C2_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006ce:	480e      	ldr	r0, [pc, #56]	@ (8000708 <MX_I2C2_Init+0x74>)
 80006d0:	f001 fb01 	bl	8001cd6 <HAL_I2C_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006da:	f000 fab3 	bl	8000c44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006de:	2100      	movs	r1, #0
 80006e0:	4809      	ldr	r0, [pc, #36]	@ (8000708 <MX_I2C2_Init+0x74>)
 80006e2:	f001 fb93 	bl	8001e0c <HAL_I2CEx_ConfigAnalogFilter>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006ec:	f000 faaa 	bl	8000c44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006f0:	2100      	movs	r1, #0
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <MX_I2C2_Init+0x74>)
 80006f4:	f001 fbd5 	bl	8001ea2 <HAL_I2CEx_ConfigDigitalFilter>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006fe:	f000 faa1 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000060 	.word	0x20000060
 800070c:	40005800 	.word	0x40005800
 8000710:	10909cec 	.word	0x10909cec

08000714 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_QUADSPI_Init+0x44>)
 800071a:	4a10      	ldr	r2, [pc, #64]	@ (800075c <MX_QUADSPI_Init+0x48>)
 800071c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800071e:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <MX_QUADSPI_Init+0x44>)
 8000720:	2202      	movs	r2, #2
 8000722:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000724:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_QUADSPI_Init+0x44>)
 8000726:	2204      	movs	r2, #4
 8000728:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <MX_QUADSPI_Init+0x44>)
 800072c:	2210      	movs	r2, #16
 800072e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000730:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_QUADSPI_Init+0x44>)
 8000732:	2217      	movs	r2, #23
 8000734:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <MX_QUADSPI_Init+0x44>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <MX_QUADSPI_Init+0x44>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	@ (8000758 <MX_QUADSPI_Init+0x44>)
 8000744:	f001 fdb0 	bl	80022a8 <HAL_QSPI_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800074e:	f000 fa79 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200000b4 	.word	0x200000b4
 800075c:	a0001000 	.word	0xa0001000

08000760 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000764:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <MX_SPI3_Init+0x74>)
 8000766:	4a1c      	ldr	r2, [pc, #112]	@ (80007d8 <MX_SPI3_Init+0x78>)
 8000768:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800076a:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <MX_SPI3_Init+0x74>)
 800076c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000770:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000772:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <MX_SPI3_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000778:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <MX_SPI3_Init+0x74>)
 800077a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800077e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000780:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <MX_SPI3_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000786:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <MX_SPI3_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800078c:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_SPI3_Init+0x74>)
 800078e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000792:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000794:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <MX_SPI3_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800079a:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <MX_SPI3_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <MX_SPI3_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <MX_SPI3_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007ac:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <MX_SPI3_Init+0x74>)
 80007ae:	2207      	movs	r2, #7
 80007b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <MX_SPI3_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007b8:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <MX_SPI3_Init+0x74>)
 80007ba:	2208      	movs	r2, #8
 80007bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_SPI3_Init+0x74>)
 80007c0:	f003 f8fa 	bl	80039b8 <HAL_SPI_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007ca:	f000 fa3b 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200000f8 	.word	0x200000f8
 80007d8:	40003c00 	.word	0x40003c00

080007dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_USART1_UART_Init+0x58>)
 80007e2:	4a15      	ldr	r2, [pc, #84]	@ (8000838 <MX_USART1_UART_Init+0x5c>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007e6:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <MX_USART1_UART_Init+0x58>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_USART1_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_USART1_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <MX_USART1_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <MX_USART1_UART_Init+0x58>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <MX_USART1_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <MX_USART1_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <MX_USART1_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <MX_USART1_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_USART1_UART_Init+0x58>)
 8000820:	f003 f96d 	bl	8003afe <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800082a:	f000 fa0b 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000015c 	.word	0x2000015c
 8000838:	40013800 	.word	0x40013800

0800083c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000840:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000842:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000846:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084a:	2206      	movs	r2, #6
 800084c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000850:	2202      	movs	r2, #2
 8000852:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000856:	2202      	movs	r2, #2
 8000858:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800086c:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000880:	f001 fb5b 	bl	8001f3a <HAL_PCD_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800088a:	f000 f9db 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200001e4 	.word	0x200001e4

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	@ 0x28
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ae:	4bbd      	ldr	r3, [pc, #756]	@ (8000ba4 <MX_GPIO_Init+0x30c>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	4abc      	ldr	r2, [pc, #752]	@ (8000ba4 <MX_GPIO_Init+0x30c>)
 80008b4:	f043 0310 	orr.w	r3, r3, #16
 80008b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ba:	4bba      	ldr	r3, [pc, #744]	@ (8000ba4 <MX_GPIO_Init+0x30c>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	f003 0310 	and.w	r3, r3, #16
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	4bb7      	ldr	r3, [pc, #732]	@ (8000ba4 <MX_GPIO_Init+0x30c>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	4ab6      	ldr	r2, [pc, #728]	@ (8000ba4 <MX_GPIO_Init+0x30c>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d2:	4bb4      	ldr	r3, [pc, #720]	@ (8000ba4 <MX_GPIO_Init+0x30c>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4bb1      	ldr	r3, [pc, #708]	@ (8000ba4 <MX_GPIO_Init+0x30c>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	4ab0      	ldr	r2, [pc, #704]	@ (8000ba4 <MX_GPIO_Init+0x30c>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ea:	4bae      	ldr	r3, [pc, #696]	@ (8000ba4 <MX_GPIO_Init+0x30c>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4bab      	ldr	r3, [pc, #684]	@ (8000ba4 <MX_GPIO_Init+0x30c>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	4aaa      	ldr	r2, [pc, #680]	@ (8000ba4 <MX_GPIO_Init+0x30c>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000902:	4ba8      	ldr	r3, [pc, #672]	@ (8000ba4 <MX_GPIO_Init+0x30c>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	4ba5      	ldr	r3, [pc, #660]	@ (8000ba4 <MX_GPIO_Init+0x30c>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	4aa4      	ldr	r2, [pc, #656]	@ (8000ba4 <MX_GPIO_Init+0x30c>)
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091a:	4ba2      	ldr	r3, [pc, #648]	@ (8000ba4 <MX_GPIO_Init+0x30c>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800092c:	489e      	ldr	r0, [pc, #632]	@ (8000ba8 <MX_GPIO_Init+0x310>)
 800092e:	f001 f97d 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000938:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800093c:	f001 f976 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000940:	2200      	movs	r2, #0
 8000942:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000946:	4899      	ldr	r0, [pc, #612]	@ (8000bac <MX_GPIO_Init+0x314>)
 8000948:	f001 f970 	bl	8001c2c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000952:	4897      	ldr	r0, [pc, #604]	@ (8000bb0 <MX_GPIO_Init+0x318>)
 8000954:	f001 f96a 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800095e:	4894      	ldr	r0, [pc, #592]	@ (8000bb0 <MX_GPIO_Init+0x318>)
 8000960:	f001 f964 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 7110 	mov.w	r1, #576	@ 0x240
 800096a:	4892      	ldr	r0, [pc, #584]	@ (8000bb4 <MX_GPIO_Init+0x31c>)
 800096c:	f001 f95e 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000970:	2201      	movs	r2, #1
 8000972:	2120      	movs	r1, #32
 8000974:	488d      	ldr	r0, [pc, #564]	@ (8000bac <MX_GPIO_Init+0x314>)
 8000976:	f001 f959 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	2101      	movs	r1, #1
 800097e:	488a      	ldr	r0, [pc, #552]	@ (8000ba8 <MX_GPIO_Init+0x310>)
 8000980:	f001 f954 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000984:	f240 1315 	movw	r3, #277	@ 0x115
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4882      	ldr	r0, [pc, #520]	@ (8000ba8 <MX_GPIO_Init+0x310>)
 800099e:	f000 ff9b 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80009a2:	236a      	movs	r3, #106	@ 0x6a
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	487c      	ldr	r0, [pc, #496]	@ (8000ba8 <MX_GPIO_Init+0x310>)
 80009b8:	f000 ff8e 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80009bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009c2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	4878      	ldr	r0, [pc, #480]	@ (8000bb4 <MX_GPIO_Init+0x31c>)
 80009d4:	f000 ff80 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80009d8:	233f      	movs	r3, #63	@ 0x3f
 80009da:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009dc:	230b      	movs	r3, #11
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	4872      	ldr	r0, [pc, #456]	@ (8000bb4 <MX_GPIO_Init+0x31c>)
 80009ec:	f000 ff74 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80009f0:	2303      	movs	r3, #3
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a00:	2308      	movs	r3, #8
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a0e:	f000 ff63 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a12:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2e:	f000 ff53 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000a32:	2308      	movs	r3, #8
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a42:	2301      	movs	r3, #1
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a50:	f000 ff42 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000a54:	2310      	movs	r3, #16
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a58:	230b      	movs	r3, #11
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6a:	f000 ff35 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000a6e:	23e0      	movs	r3, #224	@ 0xe0
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a7e:	2305      	movs	r3, #5
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8c:	f000 ff24 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000a90:	2301      	movs	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a94:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4841      	ldr	r0, [pc, #260]	@ (8000bac <MX_GPIO_Init+0x314>)
 8000aa6:	f000 ff17 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000aae:	230b      	movs	r3, #11
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	483b      	ldr	r0, [pc, #236]	@ (8000bac <MX_GPIO_Init+0x314>)
 8000abe:	f000 ff0b 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ac2:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000ac6:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4834      	ldr	r0, [pc, #208]	@ (8000bac <MX_GPIO_Init+0x314>)
 8000adc:	f000 fefc 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000ae0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000af2:	2307      	movs	r3, #7
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	482c      	ldr	r0, [pc, #176]	@ (8000bb0 <MX_GPIO_Init+0x318>)
 8000afe:	f000 feeb 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b02:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000b06:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b08:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	4825      	ldr	r0, [pc, #148]	@ (8000bb0 <MX_GPIO_Init+0x318>)
 8000b1a:	f000 fedd 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b1e:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	481e      	ldr	r0, [pc, #120]	@ (8000bb0 <MX_GPIO_Init+0x318>)
 8000b38:	f000 fece 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b3c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4817      	ldr	r0, [pc, #92]	@ (8000bb4 <MX_GPIO_Init+0x31c>)
 8000b56:	f000 febf 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000b5a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4810      	ldr	r0, [pc, #64]	@ (8000bb4 <MX_GPIO_Init+0x31c>)
 8000b72:	f000 feb1 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000b76:	2302      	movs	r3, #2
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b86:	2305      	movs	r3, #5
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4807      	ldr	r0, [pc, #28]	@ (8000bb0 <MX_GPIO_Init+0x318>)
 8000b92:	f000 fea1 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000b96:	2378      	movs	r3, #120	@ 0x78
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e00a      	b.n	8000bb8 <MX_GPIO_Init+0x320>
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	48001000 	.word	0x48001000
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	48000c00 	.word	0x48000c00
 8000bb4:	48000800 	.word	0x48000800
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bbe:	2307      	movs	r3, #7
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4813      	ldr	r0, [pc, #76]	@ (8000c18 <MX_GPIO_Init+0x380>)
 8000bca:	f000 fe85 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000bce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd4:	2312      	movs	r3, #18
 8000bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be0:	2304      	movs	r3, #4
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	480c      	ldr	r0, [pc, #48]	@ (8000c1c <MX_GPIO_Init+0x384>)
 8000bec:	f000 fe74 	bl	80018d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2017      	movs	r0, #23
 8000bf6:	f000 fcac 	bl	8001552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bfa:	2017      	movs	r0, #23
 8000bfc:	f000 fcc5 	bl	800158a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2100      	movs	r1, #0
 8000c04:	2028      	movs	r0, #40	@ 0x28
 8000c06:	f000 fca4 	bl	8001552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c0a:	2028      	movs	r0, #40	@ 0x28
 8000c0c:	f000 fcbd 	bl	800158a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	@ 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	48000c00 	.word	0x48000c00
 8000c1c:	48000400 	.word	0x48000400

08000c20 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	// do something with the data
	HAL_UART_Transmit_IT(&huart1, data, sizeof(data));
 8000c28:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000c2c:	4903      	ldr	r1, [pc, #12]	@ (8000c3c <HAL_UART_TxCpltCallback+0x1c>)
 8000c2e:	4804      	ldr	r0, [pc, #16]	@ (8000c40 <HAL_UART_TxCpltCallback+0x20>)
 8000c30:	f002 ffb4 	bl	8003b9c <HAL_UART_Transmit_IT>
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200006cc 	.word	0x200006cc
 8000c40:	2000015c 	.word	0x2000015c

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <Error_Handler+0x8>

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <HAL_MspInit+0x44>)
 8000c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c94 <HAL_MspInit+0x44>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c62:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <HAL_MspInit+0x44>)
 8000c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <HAL_MspInit+0x44>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c72:	4a08      	ldr	r2, [pc, #32]	@ (8000c94 <HAL_MspInit+0x44>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_MspInit+0x44>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40021000 	.word	0x40021000

08000c98 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b0ac      	sub	sp, #176	@ 0xb0
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2288      	movs	r2, #136	@ 0x88
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f004 fb6c 	bl	8005396 <memset>
  if(DFSDM1_Init == 0)
 8000cbe:	4b25      	ldr	r3, [pc, #148]	@ (8000d54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d142      	bne.n	8000d4c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000cc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f002 f9a2 	bl	8003020 <HAL_RCCEx_PeriphCLKConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000ce2:	f7ff ffaf 	bl	8000c44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cea:	4a1b      	ldr	r2, [pc, #108]	@ (8000d58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000cf0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cf2:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cfe:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	4a15      	ldr	r2, [pc, #84]	@ (8000d58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d04:	f043 0310 	orr.w	r3, r3, #16
 8000d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0a:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	f003 0310 	and.w	r3, r3, #16
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000d16:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000d1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d30:	2306      	movs	r3, #6
 8000d32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d36:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4807      	ldr	r0, [pc, #28]	@ (8000d5c <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000d3e:	f000 fdcb 	bl	80018d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000d42:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	3301      	adds	r3, #1
 8000d48:	4a02      	ldr	r2, [pc, #8]	@ (8000d54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d4a:	6013      	str	r3, [r2, #0]
  }

}
 8000d4c:	bf00      	nop
 8000d4e:	37b0      	adds	r7, #176	@ 0xb0
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	200054ec 	.word	0x200054ec
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	48001000 	.word	0x48001000

08000d60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0ac      	sub	sp, #176	@ 0xb0
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2288      	movs	r2, #136	@ 0x88
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f004 fb08 	bl	8005396 <memset>
  if(hi2c->Instance==I2C2)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a21      	ldr	r2, [pc, #132]	@ (8000e10 <HAL_I2C_MspInit+0xb0>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d13b      	bne.n	8000e08 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d90:	2380      	movs	r3, #128	@ 0x80
 8000d92:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 f93f 	bl	8003020 <HAL_RCCEx_PeriphCLKConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000da8:	f7ff ff4c 	bl	8000c44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dac:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <HAL_I2C_MspInit+0xb4>)
 8000dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db0:	4a18      	ldr	r2, [pc, #96]	@ (8000e14 <HAL_I2C_MspInit+0xb4>)
 8000db2:	f043 0302 	orr.w	r3, r3, #2
 8000db6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db8:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <HAL_I2C_MspInit+0xb4>)
 8000dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000dc4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000dc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dcc:	2312      	movs	r3, #18
 8000dce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dde:	2304      	movs	r3, #4
 8000de0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000de8:	4619      	mov	r1, r3
 8000dea:	480b      	ldr	r0, [pc, #44]	@ (8000e18 <HAL_I2C_MspInit+0xb8>)
 8000dec:	f000 fd74 	bl	80018d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <HAL_I2C_MspInit+0xb4>)
 8000df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df4:	4a07      	ldr	r2, [pc, #28]	@ (8000e14 <HAL_I2C_MspInit+0xb4>)
 8000df6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dfc:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <HAL_I2C_MspInit+0xb4>)
 8000dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000e08:	bf00      	nop
 8000e0a:	37b0      	adds	r7, #176	@ 0xb0
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40005800 	.word	0x40005800
 8000e14:	40021000 	.word	0x40021000
 8000e18:	48000400 	.word	0x48000400

08000e1c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	@ 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a17      	ldr	r2, [pc, #92]	@ (8000e98 <HAL_QSPI_MspInit+0x7c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d128      	bne.n	8000e90 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000e3e:	4b17      	ldr	r3, [pc, #92]	@ (8000e9c <HAL_QSPI_MspInit+0x80>)
 8000e40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e42:	4a16      	ldr	r2, [pc, #88]	@ (8000e9c <HAL_QSPI_MspInit+0x80>)
 8000e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e48:	6513      	str	r3, [r2, #80]	@ 0x50
 8000e4a:	4b14      	ldr	r3, [pc, #80]	@ (8000e9c <HAL_QSPI_MspInit+0x80>)
 8000e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e56:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <HAL_QSPI_MspInit+0x80>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5a:	4a10      	ldr	r2, [pc, #64]	@ (8000e9c <HAL_QSPI_MspInit+0x80>)
 8000e5c:	f043 0310 	orr.w	r3, r3, #16
 8000e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e62:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <HAL_QSPI_MspInit+0x80>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e66:	f003 0310 	and.w	r3, r3, #16
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000e6e:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000e72:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e80:	230a      	movs	r3, #10
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <HAL_QSPI_MspInit+0x84>)
 8000e8c:	f000 fd24 	bl	80018d8 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8000e90:	bf00      	nop
 8000e92:	3728      	adds	r7, #40	@ 0x28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	a0001000 	.word	0xa0001000
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	48001000 	.word	0x48001000

08000ea4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	@ 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a17      	ldr	r2, [pc, #92]	@ (8000f20 <HAL_SPI_MspInit+0x7c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d128      	bne.n	8000f18 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ec6:	4b17      	ldr	r3, [pc, #92]	@ (8000f24 <HAL_SPI_MspInit+0x80>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eca:	4a16      	ldr	r2, [pc, #88]	@ (8000f24 <HAL_SPI_MspInit+0x80>)
 8000ecc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ed0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ed2:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <HAL_SPI_MspInit+0x80>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <HAL_SPI_MspInit+0x80>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee2:	4a10      	ldr	r2, [pc, #64]	@ (8000f24 <HAL_SPI_MspInit+0x80>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eea:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <HAL_SPI_MspInit+0x80>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000ef6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f08:	2306      	movs	r3, #6
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4619      	mov	r1, r3
 8000f12:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <HAL_SPI_MspInit+0x84>)
 8000f14:	f000 fce0 	bl	80018d8 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000f18:	bf00      	nop
 8000f1a:	3728      	adds	r7, #40	@ 0x28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40003c00 	.word	0x40003c00
 8000f24:	40021000 	.word	0x40021000
 8000f28:	48000800 	.word	0x48000800

08000f2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b0ac      	sub	sp, #176	@ 0xb0
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2288      	movs	r2, #136	@ 0x88
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f004 fa22 	bl	8005396 <memset>
  if(huart->Instance==USART1)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a25      	ldr	r2, [pc, #148]	@ (8000fec <HAL_UART_MspInit+0xc0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d142      	bne.n	8000fe2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f60:	2300      	movs	r3, #0
 8000f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f002 f859 	bl	8003020 <HAL_RCCEx_PeriphCLKConfig>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f74:	f7ff fe66 	bl	8000c44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <HAL_UART_MspInit+0xc4>)
 8000f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff0 <HAL_UART_MspInit+0xc4>)
 8000f7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f82:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff0 <HAL_UART_MspInit+0xc4>)
 8000f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f90:	4b17      	ldr	r3, [pc, #92]	@ (8000ff0 <HAL_UART_MspInit+0xc4>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f94:	4a16      	ldr	r2, [pc, #88]	@ (8000ff0 <HAL_UART_MspInit+0xc4>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <HAL_UART_MspInit+0xc4>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000fa8:	23c0      	movs	r3, #192	@ 0xc0
 8000faa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4809      	ldr	r0, [pc, #36]	@ (8000ff4 <HAL_UART_MspInit+0xc8>)
 8000fce:	f000 fc83 	bl	80018d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2025      	movs	r0, #37	@ 0x25
 8000fd8:	f000 fabb 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fdc:	2025      	movs	r0, #37	@ 0x25
 8000fde:	f000 fad4 	bl	800158a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000fe2:	bf00      	nop
 8000fe4:	37b0      	adds	r7, #176	@ 0xb0
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40013800 	.word	0x40013800
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	48000400 	.word	0x48000400

08000ff8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b0ac      	sub	sp, #176	@ 0xb0
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2288      	movs	r2, #136	@ 0x88
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f004 f9bc 	bl	8005396 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001026:	d17c      	bne.n	8001122 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001028:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800102c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800102e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001032:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001036:	2301      	movs	r3, #1
 8001038:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800103a:	2301      	movs	r3, #1
 800103c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800103e:	2318      	movs	r3, #24
 8001040:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001042:	2307      	movs	r3, #7
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001046:	2302      	movs	r3, #2
 8001048:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800104a:	2302      	movs	r3, #2
 800104c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800104e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001052:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4618      	mov	r0, r3
 800105a:	f001 ffe1 	bl	8003020 <HAL_RCCEx_PeriphCLKConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001064:	f7ff fdee 	bl	8000c44 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001068:	4b30      	ldr	r3, [pc, #192]	@ (800112c <HAL_PCD_MspInit+0x134>)
 800106a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106c:	4a2f      	ldr	r2, [pc, #188]	@ (800112c <HAL_PCD_MspInit+0x134>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001074:	4b2d      	ldr	r3, [pc, #180]	@ (800112c <HAL_PCD_MspInit+0x134>)
 8001076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001080:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001084:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800109e:	f000 fc1b 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80010a2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80010a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010bc:	230a      	movs	r3, #10
 80010be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010c6:	4619      	mov	r1, r3
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010cc:	f000 fc04 	bl	80018d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010d0:	4b16      	ldr	r3, [pc, #88]	@ (800112c <HAL_PCD_MspInit+0x134>)
 80010d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d4:	4a15      	ldr	r2, [pc, #84]	@ (800112c <HAL_PCD_MspInit+0x134>)
 80010d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010dc:	4b13      	ldr	r3, [pc, #76]	@ (800112c <HAL_PCD_MspInit+0x134>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010e8:	4b10      	ldr	r3, [pc, #64]	@ (800112c <HAL_PCD_MspInit+0x134>)
 80010ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d114      	bne.n	800111e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010f4:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <HAL_PCD_MspInit+0x134>)
 80010f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f8:	4a0c      	ldr	r2, [pc, #48]	@ (800112c <HAL_PCD_MspInit+0x134>)
 80010fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001100:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <HAL_PCD_MspInit+0x134>)
 8001102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800110c:	f001 f8bc 	bl	8002288 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_PCD_MspInit+0x134>)
 8001112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001114:	4a05      	ldr	r2, [pc, #20]	@ (800112c <HAL_PCD_MspInit+0x134>)
 8001116:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800111a:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800111c:	e001      	b.n	8001122 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800111e:	f001 f8b3 	bl	8002288 <HAL_PWREx_EnableVddUSB>
}
 8001122:	bf00      	nop
 8001124:	37b0      	adds	r7, #176	@ 0xb0
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <NMI_Handler+0x4>

08001138 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <MemManage_Handler+0x4>

08001148 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <BusFault_Handler+0x4>

08001150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <UsageFault_Handler+0x4>

08001158 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001186:	f000 f8c5 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}

0800118e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001192:	2020      	movs	r0, #32
 8001194:	f000 fd7c 	bl	8001c90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001198:	2040      	movs	r0, #64	@ 0x40
 800119a:	f000 fd79 	bl	8001c90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800119e:	2080      	movs	r0, #128	@ 0x80
 80011a0:	f000 fd76 	bl	8001c90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80011a4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80011a8:	f000 fd72 	bl	8001c90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011b4:	4802      	ldr	r0, [pc, #8]	@ (80011c0 <USART1_IRQHandler+0x10>)
 80011b6:	f002 fd4f 	bl	8003c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	2000015c 	.word	0x2000015c

080011c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
//			  sprintf(message, "%d \r\n\n\0",buff[i]); //Data to send
//			  HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY); // Using HAL library function
//	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80011c8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80011cc:	f000 fd60 	bl	8001c90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80011d0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80011d4:	f000 fd5c 	bl	8001c90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80011d8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80011dc:	f000 fd58 	bl	8001c90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80011e0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80011e4:	f000 fd54 	bl	8001c90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80011e8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80011ec:	f000 fd50 	bl	8001c90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <SystemInit+0x20>)
 80011fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011fe:	4a05      	ldr	r2, [pc, #20]	@ (8001214 <SystemInit+0x20>)
 8001200:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001204:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001218:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001250 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800121c:	f7ff ffea 	bl	80011f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001220:	480c      	ldr	r0, [pc, #48]	@ (8001254 <LoopForever+0x6>)
  ldr r1, =_edata
 8001222:	490d      	ldr	r1, [pc, #52]	@ (8001258 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001224:	4a0d      	ldr	r2, [pc, #52]	@ (800125c <LoopForever+0xe>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001228:	e002      	b.n	8001230 <LoopCopyDataInit>

0800122a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800122c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122e:	3304      	adds	r3, #4

08001230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001234:	d3f9      	bcc.n	800122a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001236:	4a0a      	ldr	r2, [pc, #40]	@ (8001260 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001238:	4c0a      	ldr	r4, [pc, #40]	@ (8001264 <LoopForever+0x16>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800123c:	e001      	b.n	8001242 <LoopFillZerobss>

0800123e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001240:	3204      	adds	r2, #4

08001242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001244:	d3fb      	bcc.n	800123e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001246:	f004 f8af 	bl	80053a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800124a:	f7ff f935 	bl	80004b8 <main>

0800124e <LoopForever>:

LoopForever:
    b LoopForever
 800124e:	e7fe      	b.n	800124e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001250:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001258:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800125c:	08005460 	.word	0x08005460
  ldr r2, =_sbss
 8001260:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001264:	20005518 	.word	0x20005518

08001268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC1_2_IRQHandler>

0800126a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001274:	2003      	movs	r0, #3
 8001276:	f000 f961 	bl	800153c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800127a:	2000      	movs	r0, #0
 800127c:	f000 f80e 	bl	800129c <HAL_InitTick>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	71fb      	strb	r3, [r7, #7]
 800128a:	e001      	b.n	8001290 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800128c:	f7ff fce0 	bl	8000c50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001290:	79fb      	ldrb	r3, [r7, #7]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012a8:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <HAL_InitTick+0x6c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d023      	beq.n	80012f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012b0:	4b16      	ldr	r3, [pc, #88]	@ (800130c <HAL_InitTick+0x70>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <HAL_InitTick+0x6c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012be:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f96d 	bl	80015a6 <HAL_SYSTICK_Config>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10f      	bne.n	80012f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b0f      	cmp	r3, #15
 80012d6:	d809      	bhi.n	80012ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d8:	2200      	movs	r2, #0
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	f000 f937 	bl	8001552 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <HAL_InitTick+0x74>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e007      	b.n	80012fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	73fb      	strb	r3, [r7, #15]
 80012f0:	e004      	b.n	80012fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	73fb      	strb	r3, [r7, #15]
 80012f6:	e001      	b.n	80012fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000008 	.word	0x20000008
 800130c:	20000000 	.word	0x20000000
 8001310:	20000004 	.word	0x20000004

08001314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001318:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <HAL_IncTick+0x20>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HAL_IncTick+0x24>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a04      	ldr	r2, [pc, #16]	@ (8001338 <HAL_IncTick+0x24>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000008 	.word	0x20000008
 8001338:	200054f0 	.word	0x200054f0

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b03      	ldr	r3, [pc, #12]	@ (8001350 <HAL_GetTick+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	200054f0 	.word	0x200054f0

08001354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff ffee 	bl	800133c <HAL_GetTick>
 8001360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136c:	d005      	beq.n	800137a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800136e:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <HAL_Delay+0x44>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800137a:	bf00      	nop
 800137c:	f7ff ffde 	bl	800133c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	d8f7      	bhi.n	800137c <HAL_Delay+0x28>
  {
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000008 	.word	0x20000008

0800139c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ce:	4a04      	ldr	r2, [pc, #16]	@ (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	60d3      	str	r3, [r2, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e8:	4b04      	ldr	r3, [pc, #16]	@ (80013fc <__NVIC_GetPriorityGrouping+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f003 0307 	and.w	r3, r3, #7
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db0b      	blt.n	800142a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	f003 021f 	and.w	r2, r3, #31
 8001418:	4907      	ldr	r1, [pc, #28]	@ (8001438 <__NVIC_EnableIRQ+0x38>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	2001      	movs	r0, #1
 8001422:	fa00 f202 	lsl.w	r2, r0, r2
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100

0800143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	@ (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	@ (800148c <__NVIC_SetPriority+0x50>)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	@ 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	@ 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001508:	d301      	bcc.n	800150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <SysTick_Config+0x40>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	210f      	movs	r1, #15
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f7ff ff8e 	bl	800143c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001520:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <SysTick_Config+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <SysTick_Config+0x40>)
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff29 	bl	800139c <__NVIC_SetPriorityGrouping>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001564:	f7ff ff3e 	bl	80013e4 <__NVIC_GetPriorityGrouping>
 8001568:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff8e 	bl	8001490 <NVIC_EncodePriority>
 8001574:	4602      	mov	r2, r0
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff5d 	bl	800143c <__NVIC_SetPriority>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff31 	bl	8001400 <__NVIC_EnableIRQ>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ffa2 	bl	80014f8 <SysTick_Config>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e0ac      	b.n	800172c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f8b2 	bl	8001740 <DFSDM_GetChannelFromInstance>
 80015dc:	4603      	mov	r3, r0
 80015de:	4a55      	ldr	r2, [pc, #340]	@ (8001734 <HAL_DFSDM_ChannelInit+0x174>)
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e09f      	b.n	800172c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff fb53 	bl	8000c98 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80015f2:	4b51      	ldr	r3, [pc, #324]	@ (8001738 <HAL_DFSDM_ChannelInit+0x178>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001738 <HAL_DFSDM_ChannelInit+0x178>)
 80015fa:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80015fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001738 <HAL_DFSDM_ChannelInit+0x178>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d125      	bne.n	8001650 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001604:	4b4d      	ldr	r3, [pc, #308]	@ (800173c <HAL_DFSDM_ChannelInit+0x17c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a4c      	ldr	r2, [pc, #304]	@ (800173c <HAL_DFSDM_ChannelInit+0x17c>)
 800160a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800160e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001610:	4b4a      	ldr	r3, [pc, #296]	@ (800173c <HAL_DFSDM_ChannelInit+0x17c>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	4948      	ldr	r1, [pc, #288]	@ (800173c <HAL_DFSDM_ChannelInit+0x17c>)
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800161e:	4b47      	ldr	r3, [pc, #284]	@ (800173c <HAL_DFSDM_ChannelInit+0x17c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a46      	ldr	r2, [pc, #280]	@ (800173c <HAL_DFSDM_ChannelInit+0x17c>)
 8001624:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001628:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	791b      	ldrb	r3, [r3, #4]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d108      	bne.n	8001644 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001632:	4b42      	ldr	r3, [pc, #264]	@ (800173c <HAL_DFSDM_ChannelInit+0x17c>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	3b01      	subs	r3, #1
 800163c:	041b      	lsls	r3, r3, #16
 800163e:	493f      	ldr	r1, [pc, #252]	@ (800173c <HAL_DFSDM_ChannelInit+0x17c>)
 8001640:	4313      	orrs	r3, r2
 8001642:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001644:	4b3d      	ldr	r3, [pc, #244]	@ (800173c <HAL_DFSDM_ChannelInit+0x17c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a3c      	ldr	r2, [pc, #240]	@ (800173c <HAL_DFSDM_ChannelInit+0x17c>)
 800164a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800164e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800165e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6819      	ldr	r1, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800166e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001674:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 020f 	bic.w	r2, r2, #15
 800168c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6819      	ldr	r1, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80016b4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6899      	ldr	r1, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c4:	3b01      	subs	r3, #1
 80016c6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80016c8:	431a      	orrs	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f002 0207 	and.w	r2, r2, #7
 80016e0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6859      	ldr	r1, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ec:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800170c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f000 f810 	bl	8001740 <DFSDM_GetChannelFromInstance>
 8001720:	4602      	mov	r2, r0
 8001722:	4904      	ldr	r1, [pc, #16]	@ (8001734 <HAL_DFSDM_ChannelInit+0x174>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200054f8 	.word	0x200054f8
 8001738:	200054f4 	.word	0x200054f4
 800173c:	40016000 	.word	0x40016000

08001740 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a1c      	ldr	r2, [pc, #112]	@ (80017bc <DFSDM_GetChannelFromInstance+0x7c>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d102      	bne.n	8001756 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	e02b      	b.n	80017ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a19      	ldr	r2, [pc, #100]	@ (80017c0 <DFSDM_GetChannelFromInstance+0x80>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d102      	bne.n	8001764 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800175e:	2301      	movs	r3, #1
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	e024      	b.n	80017ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <DFSDM_GetChannelFromInstance+0x84>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d102      	bne.n	8001772 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800176c:	2302      	movs	r3, #2
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	e01d      	b.n	80017ae <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a14      	ldr	r2, [pc, #80]	@ (80017c8 <DFSDM_GetChannelFromInstance+0x88>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d102      	bne.n	8001780 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800177a:	2304      	movs	r3, #4
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	e016      	b.n	80017ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a12      	ldr	r2, [pc, #72]	@ (80017cc <DFSDM_GetChannelFromInstance+0x8c>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d102      	bne.n	800178e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001788:	2305      	movs	r3, #5
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	e00f      	b.n	80017ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a0f      	ldr	r2, [pc, #60]	@ (80017d0 <DFSDM_GetChannelFromInstance+0x90>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d102      	bne.n	800179c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001796:	2306      	movs	r3, #6
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	e008      	b.n	80017ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a0d      	ldr	r2, [pc, #52]	@ (80017d4 <DFSDM_GetChannelFromInstance+0x94>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d102      	bne.n	80017aa <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80017a4:	2307      	movs	r3, #7
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	e001      	b.n	80017ae <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80017aa:	2303      	movs	r3, #3
 80017ac:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80017ae:	68fb      	ldr	r3, [r7, #12]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	40016000 	.word	0x40016000
 80017c0:	40016020 	.word	0x40016020
 80017c4:	40016040 	.word	0x40016040
 80017c8:	40016080 	.word	0x40016080
 80017cc:	400160a0 	.word	0x400160a0
 80017d0:	400160c0 	.word	0x400160c0
 80017d4:	400160e0 	.word	0x400160e0

080017d8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d008      	beq.n	8001802 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2204      	movs	r2, #4
 80017f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e022      	b.n	8001848 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 020e 	bic.w	r2, r2, #14
 8001810:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 0201 	bic.w	r2, r2, #1
 8001820:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	f003 021c 	and.w	r2, r3, #28
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	2101      	movs	r1, #1
 8001830:	fa01 f202 	lsl.w	r2, r1, r2
 8001834:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001846:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001848:	4618      	mov	r0, r3
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d005      	beq.n	8001878 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2204      	movs	r2, #4
 8001870:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	73fb      	strb	r3, [r7, #15]
 8001876:	e029      	b.n	80018cc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 020e 	bic.w	r2, r2, #14
 8001886:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0201 	bic.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189c:	f003 021c 	and.w	r2, r3, #28
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a4:	2101      	movs	r1, #1
 80018a6:	fa01 f202 	lsl.w	r2, r1, r2
 80018aa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	4798      	blx	r3
    }
  }
  return status;
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d8:	b480      	push	{r7}
 80018da:	b087      	sub	sp, #28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e6:	e17f      	b.n	8001be8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	2101      	movs	r1, #1
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	fa01 f303 	lsl.w	r3, r1, r3
 80018f4:	4013      	ands	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8171 	beq.w	8001be2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	2b01      	cmp	r3, #1
 800190a:	d005      	beq.n	8001918 <HAL_GPIO_Init+0x40>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d130      	bne.n	800197a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800194e:	2201      	movs	r2, #1
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	f003 0201 	and.w	r2, r3, #1
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	2b03      	cmp	r3, #3
 8001984:	d118      	bne.n	80019b8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800198c:	2201      	movs	r2, #1
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	08db      	lsrs	r3, r3, #3
 80019a2:	f003 0201 	and.w	r2, r3, #1
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d017      	beq.n	80019f4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d123      	bne.n	8001a48 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	08da      	lsrs	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3208      	adds	r2, #8
 8001a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	08da      	lsrs	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3208      	adds	r2, #8
 8001a42:	6939      	ldr	r1, [r7, #16]
 8001a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0203 	and.w	r2, r3, #3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80ac 	beq.w	8001be2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	4b5f      	ldr	r3, [pc, #380]	@ (8001c08 <HAL_GPIO_Init+0x330>)
 8001a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a8e:	4a5e      	ldr	r2, [pc, #376]	@ (8001c08 <HAL_GPIO_Init+0x330>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a96:	4b5c      	ldr	r3, [pc, #368]	@ (8001c08 <HAL_GPIO_Init+0x330>)
 8001a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aa2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c0c <HAL_GPIO_Init+0x334>)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	089b      	lsrs	r3, r3, #2
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	220f      	movs	r2, #15
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001acc:	d025      	beq.n	8001b1a <HAL_GPIO_Init+0x242>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a4f      	ldr	r2, [pc, #316]	@ (8001c10 <HAL_GPIO_Init+0x338>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d01f      	beq.n	8001b16 <HAL_GPIO_Init+0x23e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a4e      	ldr	r2, [pc, #312]	@ (8001c14 <HAL_GPIO_Init+0x33c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d019      	beq.n	8001b12 <HAL_GPIO_Init+0x23a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a4d      	ldr	r2, [pc, #308]	@ (8001c18 <HAL_GPIO_Init+0x340>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d013      	beq.n	8001b0e <HAL_GPIO_Init+0x236>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4c      	ldr	r2, [pc, #304]	@ (8001c1c <HAL_GPIO_Init+0x344>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00d      	beq.n	8001b0a <HAL_GPIO_Init+0x232>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a4b      	ldr	r2, [pc, #300]	@ (8001c20 <HAL_GPIO_Init+0x348>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d007      	beq.n	8001b06 <HAL_GPIO_Init+0x22e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4a      	ldr	r2, [pc, #296]	@ (8001c24 <HAL_GPIO_Init+0x34c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d101      	bne.n	8001b02 <HAL_GPIO_Init+0x22a>
 8001afe:	2306      	movs	r3, #6
 8001b00:	e00c      	b.n	8001b1c <HAL_GPIO_Init+0x244>
 8001b02:	2307      	movs	r3, #7
 8001b04:	e00a      	b.n	8001b1c <HAL_GPIO_Init+0x244>
 8001b06:	2305      	movs	r3, #5
 8001b08:	e008      	b.n	8001b1c <HAL_GPIO_Init+0x244>
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x244>
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e004      	b.n	8001b1c <HAL_GPIO_Init+0x244>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e002      	b.n	8001b1c <HAL_GPIO_Init+0x244>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_GPIO_Init+0x244>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	f002 0203 	and.w	r2, r2, #3
 8001b22:	0092      	lsls	r2, r2, #2
 8001b24:	4093      	lsls	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b2c:	4937      	ldr	r1, [pc, #220]	@ (8001c0c <HAL_GPIO_Init+0x334>)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c28 <HAL_GPIO_Init+0x350>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b5e:	4a32      	ldr	r2, [pc, #200]	@ (8001c28 <HAL_GPIO_Init+0x350>)
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b64:	4b30      	ldr	r3, [pc, #192]	@ (8001c28 <HAL_GPIO_Init+0x350>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b88:	4a27      	ldr	r2, [pc, #156]	@ (8001c28 <HAL_GPIO_Init+0x350>)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b8e:	4b26      	ldr	r3, [pc, #152]	@ (8001c28 <HAL_GPIO_Init+0x350>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c28 <HAL_GPIO_Init+0x350>)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c28 <HAL_GPIO_Init+0x350>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bdc:	4a12      	ldr	r2, [pc, #72]	@ (8001c28 <HAL_GPIO_Init+0x350>)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	3301      	adds	r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f47f ae78 	bne.w	80018e8 <HAL_GPIO_Init+0x10>
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	371c      	adds	r7, #28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40010000 	.word	0x40010000
 8001c10:	48000400 	.word	0x48000400
 8001c14:	48000800 	.word	0x48000800
 8001c18:	48000c00 	.word	0x48000c00
 8001c1c:	48001000 	.word	0x48001000
 8001c20:	48001400 	.word	0x48001400
 8001c24:	48001800 	.word	0x48001800
 8001c28:	40010400 	.word	0x40010400

08001c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c3c:	787b      	ldrb	r3, [r7, #1]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c42:	887a      	ldrh	r2, [r7, #2]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c48:	e002      	b.n	8001c50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c6e:	887a      	ldrh	r2, [r7, #2]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4013      	ands	r3, r2
 8001c74:	041a      	lsls	r2, r3, #16
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	43d9      	mvns	r1, r3
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	400b      	ands	r3, r1
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	619a      	str	r2, [r3, #24]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c9a:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d006      	beq.n	8001cb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ca6:	4a05      	ldr	r2, [pc, #20]	@ (8001cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 f806 	bl	8001cc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40010400 	.word	0x40010400

08001cc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e08d      	b.n	8001e04 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d106      	bne.n	8001d02 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff f82f 	bl	8000d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2224      	movs	r2, #36	@ 0x24
 8001d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0201 	bic.w	r2, r2, #1
 8001d18:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d26:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d36:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d107      	bne.n	8001d50 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	e006      	b.n	8001d5e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001d5c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d108      	bne.n	8001d78 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	e007      	b.n	8001d88 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d86:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d9a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001daa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69d9      	ldr	r1, [r3, #28]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a1a      	ldr	r2, [r3, #32]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f042 0201 	orr.w	r2, r2, #1
 8001de4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2220      	movs	r2, #32
 8001df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b20      	cmp	r3, #32
 8001e20:	d138      	bne.n	8001e94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e032      	b.n	8001e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2224      	movs	r2, #36	@ 0x24
 8001e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0201 	bic.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6819      	ldr	r1, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	e000      	b.n	8001e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e94:	2302      	movs	r3, #2
  }
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b085      	sub	sp, #20
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d139      	bne.n	8001f2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e033      	b.n	8001f2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2224      	movs	r2, #36	@ 0x24
 8001ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0201 	bic.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ef4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	021b      	lsls	r3, r3, #8
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e000      	b.n	8001f2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f2c:	2302      	movs	r3, #2
  }
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af02      	add	r7, sp, #8
 8001f40:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e101      	b.n	8002150 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d106      	bne.n	8001f66 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff f849 	bl	8000ff8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2203      	movs	r2, #3
 8001f6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f002 ff8e 	bl	8004e9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7c1a      	ldrb	r2, [r3, #16]
 8001f86:	f88d 2000 	strb.w	r2, [sp]
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f8e:	f002 ff57 	bl	8004e40 <USB_CoreInit>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0d5      	b.n	8002150 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f002 ff86 	bl	8004ebc <USB_SetCurrentMode>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d005      	beq.n	8001fc2 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e0c6      	b.n	8002150 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	73fb      	strb	r3, [r7, #15]
 8001fc6:	e04a      	b.n	800205e <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fc8:	7bfa      	ldrb	r2, [r7, #15]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3315      	adds	r3, #21
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fdc:	7bfa      	ldrb	r2, [r7, #15]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	3314      	adds	r3, #20
 8001fec:	7bfa      	ldrb	r2, [r7, #15]
 8001fee:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	b298      	uxth	r0, r3
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	332e      	adds	r3, #46	@ 0x2e
 8002004:	4602      	mov	r2, r0
 8002006:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	3318      	adds	r3, #24
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	331c      	adds	r3, #28
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	3320      	adds	r3, #32
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002044:	7bfa      	ldrb	r2, [r7, #15]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	3324      	adds	r3, #36	@ 0x24
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	3301      	adds	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	791b      	ldrb	r3, [r3, #4]
 8002062:	7bfa      	ldrb	r2, [r7, #15]
 8002064:	429a      	cmp	r2, r3
 8002066:	d3af      	bcc.n	8001fc8 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002068:	2300      	movs	r3, #0
 800206a:	73fb      	strb	r3, [r7, #15]
 800206c:	e044      	b.n	80020f8 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	3301      	adds	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	791b      	ldrb	r3, [r3, #4]
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d3b5      	bcc.n	800206e <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	7c1a      	ldrb	r2, [r3, #16]
 800210a:	f88d 2000 	strb.w	r2, [sp]
 800210e:	3304      	adds	r3, #4
 8002110:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002112:	f002 ff1f 	bl	8004f54 <USB_DevInit>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e013      	b.n	8002150 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	7b1b      	ldrb	r3, [r3, #12]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d102      	bne.n	8002144 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f80a 	bl	8002158 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f003 f8c4 	bl	80052d6 <USB_DevDisconnect>

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002186:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800218a:	f043 0303 	orr.w	r3, r3, #3
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a4:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a04      	ldr	r2, [pc, #16]	@ (80021bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ae:	6013      	str	r3, [r2, #0]
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40007000 	.word	0x40007000

080021c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021c4:	4b04      	ldr	r3, [pc, #16]	@ (80021d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40007000 	.word	0x40007000

080021dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021ea:	d130      	bne.n	800224e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ec:	4b23      	ldr	r3, [pc, #140]	@ (800227c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021f8:	d038      	beq.n	800226c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021fa:	4b20      	ldr	r3, [pc, #128]	@ (800227c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002202:	4a1e      	ldr	r2, [pc, #120]	@ (800227c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002204:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002208:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800220a:	4b1d      	ldr	r3, [pc, #116]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2232      	movs	r2, #50	@ 0x32
 8002210:	fb02 f303 	mul.w	r3, r2, r3
 8002214:	4a1b      	ldr	r2, [pc, #108]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	0c9b      	lsrs	r3, r3, #18
 800221c:	3301      	adds	r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002220:	e002      	b.n	8002228 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	3b01      	subs	r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002228:	4b14      	ldr	r3, [pc, #80]	@ (800227c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002234:	d102      	bne.n	800223c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f2      	bne.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800223c:	4b0f      	ldr	r3, [pc, #60]	@ (800227c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002248:	d110      	bne.n	800226c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e00f      	b.n	800226e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800224e:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800225a:	d007      	beq.n	800226c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800225c:	4b07      	ldr	r3, [pc, #28]	@ (800227c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002264:	4a05      	ldr	r2, [pc, #20]	@ (800227c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002266:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800226a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40007000 	.word	0x40007000
 8002280:	20000000 	.word	0x20000000
 8002284:	431bde83 	.word	0x431bde83

08002288 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800228c:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	4a04      	ldr	r2, [pc, #16]	@ (80022a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002292:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002296:	6053      	str	r3, [r2, #4]
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40007000 	.word	0x40007000

080022a8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80022b0:	f7ff f844 	bl	800133c <HAL_GetTick>
 80022b4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e063      	b.n	8002388 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10b      	bne.n	80022e4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7fe fda1 	bl	8000e1c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80022da:	f241 3188 	movw	r1, #5000	@ 0x1388
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f858 	bl	8002394 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	021a      	lsls	r2, r3, #8
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	2120      	movs	r1, #32
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f850 	bl	80023b0 <QSPI_WaitFlagStateUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002314:	7afb      	ldrb	r3, [r7, #11]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d131      	bne.n	800237e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002324:	f023 0310 	bic.w	r3, r3, #16
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6852      	ldr	r2, [r2, #4]
 800232c:	0611      	lsls	r1, r2, #24
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68d2      	ldr	r2, [r2, #12]
 8002332:	4311      	orrs	r1, r2
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	430b      	orrs	r3, r1
 800233a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	4b13      	ldr	r3, [pc, #76]	@ (8002390 <HAL_QSPI_Init+0xe8>)
 8002344:	4013      	ands	r3, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6912      	ldr	r2, [r2, #16]
 800234a:	0411      	lsls	r1, r2, #16
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6952      	ldr	r2, [r2, #20]
 8002350:	4311      	orrs	r1, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6992      	ldr	r2, [r2, #24]
 8002356:	4311      	orrs	r1, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	430b      	orrs	r3, r1
 800235e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8002386:	7afb      	ldrb	r3, [r7, #11]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	ffe0f8fe 	.word	0xffe0f8fe

08002394 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	4613      	mov	r3, r2
 80023be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80023c0:	e01a      	b.n	80023f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d016      	beq.n	80023f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ca:	f7fe ffb7 	bl	800133c <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d302      	bcc.n	80023e0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10b      	bne.n	80023f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2204      	movs	r2, #4
 80023e4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ec:	f043 0201 	orr.w	r2, r3, #1
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e00e      	b.n	8002416 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	4013      	ands	r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	bf14      	ite	ne
 8002406:	2301      	movne	r3, #1
 8002408:	2300      	moveq	r3, #0
 800240a:	b2db      	uxtb	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	429a      	cmp	r2, r3
 8002412:	d1d6      	bne.n	80023c2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e3ca      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002432:	4b97      	ldr	r3, [pc, #604]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800243c:	4b94      	ldr	r3, [pc, #592]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 80e4 	beq.w	800261c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d007      	beq.n	800246a <HAL_RCC_OscConfig+0x4a>
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	2b0c      	cmp	r3, #12
 800245e:	f040 808b 	bne.w	8002578 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2b01      	cmp	r3, #1
 8002466:	f040 8087 	bne.w	8002578 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800246a:	4b89      	ldr	r3, [pc, #548]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <HAL_RCC_OscConfig+0x62>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e3a2      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1a      	ldr	r2, [r3, #32]
 8002486:	4b82      	ldr	r3, [pc, #520]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d004      	beq.n	800249c <HAL_RCC_OscConfig+0x7c>
 8002492:	4b7f      	ldr	r3, [pc, #508]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800249a:	e005      	b.n	80024a8 <HAL_RCC_OscConfig+0x88>
 800249c:	4b7c      	ldr	r3, [pc, #496]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 800249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a2:	091b      	lsrs	r3, r3, #4
 80024a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d223      	bcs.n	80024f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fd55 	bl	8002f60 <RCC_SetFlashLatencyFromMSIRange>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e383      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024c0:	4b73      	ldr	r3, [pc, #460]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a72      	ldr	r2, [pc, #456]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80024c6:	f043 0308 	orr.w	r3, r3, #8
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b70      	ldr	r3, [pc, #448]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	496d      	ldr	r1, [pc, #436]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024de:	4b6c      	ldr	r3, [pc, #432]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	4968      	ldr	r1, [pc, #416]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	604b      	str	r3, [r1, #4]
 80024f2:	e025      	b.n	8002540 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024f4:	4b66      	ldr	r3, [pc, #408]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a65      	ldr	r2, [pc, #404]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80024fa:	f043 0308 	orr.w	r3, r3, #8
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	4b63      	ldr	r3, [pc, #396]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4960      	ldr	r1, [pc, #384]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002512:	4b5f      	ldr	r3, [pc, #380]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	021b      	lsls	r3, r3, #8
 8002520:	495b      	ldr	r1, [pc, #364]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d109      	bne.n	8002540 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fd15 	bl	8002f60 <RCC_SetFlashLatencyFromMSIRange>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e343      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002540:	f000 fc4a 	bl	8002dd8 <HAL_RCC_GetSysClockFreq>
 8002544:	4602      	mov	r2, r0
 8002546:	4b52      	ldr	r3, [pc, #328]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	4950      	ldr	r1, [pc, #320]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 8002552:	5ccb      	ldrb	r3, [r1, r3]
 8002554:	f003 031f 	and.w	r3, r3, #31
 8002558:	fa22 f303 	lsr.w	r3, r2, r3
 800255c:	4a4e      	ldr	r2, [pc, #312]	@ (8002698 <HAL_RCC_OscConfig+0x278>)
 800255e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002560:	4b4e      	ldr	r3, [pc, #312]	@ (800269c <HAL_RCC_OscConfig+0x27c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fe99 	bl	800129c <HAL_InitTick>
 800256a:	4603      	mov	r3, r0
 800256c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d052      	beq.n	800261a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	e327      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d032      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002580:	4b43      	ldr	r3, [pc, #268]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a42      	ldr	r2, [pc, #264]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800258c:	f7fe fed6 	bl	800133c <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002594:	f7fe fed2 	bl	800133c <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e310      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b2:	4b37      	ldr	r3, [pc, #220]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a36      	ldr	r2, [pc, #216]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80025b8:	f043 0308 	orr.w	r3, r3, #8
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	4b34      	ldr	r3, [pc, #208]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4931      	ldr	r1, [pc, #196]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	492c      	ldr	r1, [pc, #176]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
 80025e4:	e01a      	b.n	800261c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a29      	ldr	r2, [pc, #164]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80025ec:	f023 0301 	bic.w	r3, r3, #1
 80025f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025f2:	f7fe fea3 	bl	800133c <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025fa:	f7fe fe9f 	bl	800133c <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e2dd      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800260c:	4b20      	ldr	r3, [pc, #128]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f0      	bne.n	80025fa <HAL_RCC_OscConfig+0x1da>
 8002618:	e000      	b.n	800261c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800261a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	d074      	beq.n	8002712 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2b08      	cmp	r3, #8
 800262c:	d005      	beq.n	800263a <HAL_RCC_OscConfig+0x21a>
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	2b0c      	cmp	r3, #12
 8002632:	d10e      	bne.n	8002652 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2b03      	cmp	r3, #3
 8002638:	d10b      	bne.n	8002652 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263a:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d064      	beq.n	8002710 <HAL_RCC_OscConfig+0x2f0>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d160      	bne.n	8002710 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e2ba      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x24a>
 800265c:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0b      	ldr	r2, [pc, #44]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	e026      	b.n	80026b8 <HAL_RCC_OscConfig+0x298>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002672:	d115      	bne.n	80026a0 <HAL_RCC_OscConfig+0x280>
 8002674:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a05      	ldr	r2, [pc, #20]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 800267a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	4b03      	ldr	r3, [pc, #12]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a02      	ldr	r2, [pc, #8]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	e014      	b.n	80026b8 <HAL_RCC_OscConfig+0x298>
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
 8002694:	08005408 	.word	0x08005408
 8002698:	20000000 	.word	0x20000000
 800269c:	20000004 	.word	0x20000004
 80026a0:	4ba0      	ldr	r3, [pc, #640]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a9f      	ldr	r2, [pc, #636]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80026a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b9d      	ldr	r3, [pc, #628]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a9c      	ldr	r2, [pc, #624]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80026b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe fe3c 	bl	800133c <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c8:	f7fe fe38 	bl	800133c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	@ 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e276      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026da:	4b92      	ldr	r3, [pc, #584]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x2a8>
 80026e6:	e014      	b.n	8002712 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7fe fe28 	bl	800133c <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f0:	f7fe fe24 	bl	800133c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	@ 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e262      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002702:	4b88      	ldr	r3, [pc, #544]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x2d0>
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d060      	beq.n	80027e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b04      	cmp	r3, #4
 8002722:	d005      	beq.n	8002730 <HAL_RCC_OscConfig+0x310>
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	2b0c      	cmp	r3, #12
 8002728:	d119      	bne.n	800275e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d116      	bne.n	800275e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002730:	4b7c      	ldr	r3, [pc, #496]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_OscConfig+0x328>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e23f      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002748:	4b76      	ldr	r3, [pc, #472]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	061b      	lsls	r3, r3, #24
 8002756:	4973      	ldr	r1, [pc, #460]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800275c:	e040      	b.n	80027e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d023      	beq.n	80027ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002766:	4b6f      	ldr	r3, [pc, #444]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6e      	ldr	r2, [pc, #440]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 800276c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002772:	f7fe fde3 	bl	800133c <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800277a:	f7fe fddf 	bl	800133c <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e21d      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800278c:	4b65      	ldr	r3, [pc, #404]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002798:	4b62      	ldr	r3, [pc, #392]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	061b      	lsls	r3, r3, #24
 80027a6:	495f      	ldr	r1, [pc, #380]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]
 80027ac:	e018      	b.n	80027e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a5c      	ldr	r2, [pc, #368]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80027b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ba:	f7fe fdbf 	bl	800133c <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c2:	f7fe fdbb 	bl	800133c <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e1f9      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027d4:	4b53      	ldr	r3, [pc, #332]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f0      	bne.n	80027c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d03c      	beq.n	8002866 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d01c      	beq.n	800282e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80027f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027fa:	4a4a      	ldr	r2, [pc, #296]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7fe fd9a 	bl	800133c <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800280c:	f7fe fd96 	bl	800133c <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e1d4      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800281e:	4b41      	ldr	r3, [pc, #260]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002820:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ef      	beq.n	800280c <HAL_RCC_OscConfig+0x3ec>
 800282c:	e01b      	b.n	8002866 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800282e:	4b3d      	ldr	r3, [pc, #244]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002834:	4a3b      	ldr	r2, [pc, #236]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002836:	f023 0301 	bic.w	r3, r3, #1
 800283a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283e:	f7fe fd7d 	bl	800133c <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002846:	f7fe fd79 	bl	800133c <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e1b7      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002858:	4b32      	ldr	r3, [pc, #200]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 800285a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1ef      	bne.n	8002846 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 80a6 	beq.w	80029c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002874:	2300      	movs	r3, #0
 8002876:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002878:	4b2a      	ldr	r3, [pc, #168]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 800287a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10d      	bne.n	80028a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002884:	4b27      	ldr	r3, [pc, #156]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002888:	4a26      	ldr	r2, [pc, #152]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 800288a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800288e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002890:	4b24      	ldr	r3, [pc, #144]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289c:	2301      	movs	r3, #1
 800289e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028a0:	4b21      	ldr	r3, [pc, #132]	@ (8002928 <HAL_RCC_OscConfig+0x508>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d118      	bne.n	80028de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002928 <HAL_RCC_OscConfig+0x508>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002928 <HAL_RCC_OscConfig+0x508>)
 80028b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b8:	f7fe fd40 	bl	800133c <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c0:	f7fe fd3c 	bl	800133c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e17a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028d2:	4b15      	ldr	r3, [pc, #84]	@ (8002928 <HAL_RCC_OscConfig+0x508>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d108      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4d8>
 80028e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80028e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028f6:	e029      	b.n	800294c <HAL_RCC_OscConfig+0x52c>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b05      	cmp	r3, #5
 80028fe:	d115      	bne.n	800292c <HAL_RCC_OscConfig+0x50c>
 8002900:	4b08      	ldr	r3, [pc, #32]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002906:	4a07      	ldr	r2, [pc, #28]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002908:	f043 0304 	orr.w	r3, r3, #4
 800290c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002910:	4b04      	ldr	r3, [pc, #16]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002916:	4a03      	ldr	r2, [pc, #12]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002920:	e014      	b.n	800294c <HAL_RCC_OscConfig+0x52c>
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000
 8002928:	40007000 	.word	0x40007000
 800292c:	4b9c      	ldr	r3, [pc, #624]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002932:	4a9b      	ldr	r2, [pc, #620]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800293c:	4b98      	ldr	r3, [pc, #608]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002942:	4a97      	ldr	r2, [pc, #604]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d016      	beq.n	8002982 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002954:	f7fe fcf2 	bl	800133c <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800295a:	e00a      	b.n	8002972 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295c:	f7fe fcee 	bl	800133c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800296a:	4293      	cmp	r3, r2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e12a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002972:	4b8b      	ldr	r3, [pc, #556]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0ed      	beq.n	800295c <HAL_RCC_OscConfig+0x53c>
 8002980:	e015      	b.n	80029ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002982:	f7fe fcdb 	bl	800133c <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298a:	f7fe fcd7 	bl	800133c <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e113      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029a0:	4b7f      	ldr	r3, [pc, #508]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 80029a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1ed      	bne.n	800298a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ae:	7ffb      	ldrb	r3, [r7, #31]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d105      	bne.n	80029c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b4:	4b7a      	ldr	r3, [pc, #488]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 80029b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b8:	4a79      	ldr	r2, [pc, #484]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 80029ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029be:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80fe 	beq.w	8002bc6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	f040 80d0 	bne.w	8002b74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029d4:	4b72      	ldr	r3, [pc, #456]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f003 0203 	and.w	r2, r3, #3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d130      	bne.n	8002a4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	3b01      	subs	r3, #1
 80029f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d127      	bne.n	8002a4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d11f      	bne.n	8002a4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a14:	2a07      	cmp	r2, #7
 8002a16:	bf14      	ite	ne
 8002a18:	2201      	movne	r2, #1
 8002a1a:	2200      	moveq	r2, #0
 8002a1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d113      	bne.n	8002a4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2c:	085b      	lsrs	r3, r3, #1
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d109      	bne.n	8002a4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a40:	085b      	lsrs	r3, r3, #1
 8002a42:	3b01      	subs	r3, #1
 8002a44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d06e      	beq.n	8002b28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	2b0c      	cmp	r3, #12
 8002a4e:	d069      	beq.n	8002b24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a50:	4b53      	ldr	r3, [pc, #332]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d105      	bne.n	8002a68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a5c:	4b50      	ldr	r3, [pc, #320]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0ad      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a6c:	4b4c      	ldr	r3, [pc, #304]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a4b      	ldr	r2, [pc, #300]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002a72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a78:	f7fe fc60 	bl	800133c <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a80:	f7fe fc5c 	bl	800133c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e09a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a92:	4b43      	ldr	r3, [pc, #268]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a9e:	4b40      	ldr	r3, [pc, #256]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	4b40      	ldr	r3, [pc, #256]	@ (8002ba4 <HAL_RCC_OscConfig+0x784>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002aae:	3a01      	subs	r2, #1
 8002ab0:	0112      	lsls	r2, r2, #4
 8002ab2:	4311      	orrs	r1, r2
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ab8:	0212      	lsls	r2, r2, #8
 8002aba:	4311      	orrs	r1, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ac0:	0852      	lsrs	r2, r2, #1
 8002ac2:	3a01      	subs	r2, #1
 8002ac4:	0552      	lsls	r2, r2, #21
 8002ac6:	4311      	orrs	r1, r2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002acc:	0852      	lsrs	r2, r2, #1
 8002ace:	3a01      	subs	r2, #1
 8002ad0:	0652      	lsls	r2, r2, #25
 8002ad2:	4311      	orrs	r1, r2
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ad8:	0912      	lsrs	r2, r2, #4
 8002ada:	0452      	lsls	r2, r2, #17
 8002adc:	430a      	orrs	r2, r1
 8002ade:	4930      	ldr	r1, [pc, #192]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ae4:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a2d      	ldr	r2, [pc, #180]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002aea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002af0:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a2a      	ldr	r2, [pc, #168]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002af6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002afa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002afc:	f7fe fc1e 	bl	800133c <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b04:	f7fe fc1a 	bl	800133c <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e058      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b16:	4b22      	ldr	r3, [pc, #136]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b22:	e050      	b.n	8002bc6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e04f      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b28:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d148      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b34:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a19      	ldr	r2, [pc, #100]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002b3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b40:	4b17      	ldr	r3, [pc, #92]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4a16      	ldr	r2, [pc, #88]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002b46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b4c:	f7fe fbf6 	bl	800133c <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b54:	f7fe fbf2 	bl	800133c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e030      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0x734>
 8002b72:	e028      	b.n	8002bc6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2b0c      	cmp	r3, #12
 8002b78:	d023      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002b80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b86:	f7fe fbd9 	bl	800133c <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b8c:	e00c      	b.n	8002ba8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8e:	f7fe fbd5 	bl	800133c <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d905      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e013      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba8:	4b09      	ldr	r3, [pc, #36]	@ (8002bd0 <HAL_RCC_OscConfig+0x7b0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1ec      	bne.n	8002b8e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002bb4:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <HAL_RCC_OscConfig+0x7b0>)
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	4905      	ldr	r1, [pc, #20]	@ (8002bd0 <HAL_RCC_OscConfig+0x7b0>)
 8002bba:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <HAL_RCC_OscConfig+0x7b4>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60cb      	str	r3, [r1, #12]
 8002bc0:	e001      	b.n	8002bc6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3720      	adds	r7, #32
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	feeefffc 	.word	0xfeeefffc

08002bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0e7      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bec:	4b75      	ldr	r3, [pc, #468]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d910      	bls.n	8002c1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b72      	ldr	r3, [pc, #456]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 0207 	bic.w	r2, r3, #7
 8002c02:	4970      	ldr	r1, [pc, #448]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0a:	4b6e      	ldr	r3, [pc, #440]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0cf      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d010      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	4b66      	ldr	r3, [pc, #408]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d908      	bls.n	8002c4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c38:	4b63      	ldr	r3, [pc, #396]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	4960      	ldr	r1, [pc, #384]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d04c      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d107      	bne.n	8002c6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c5e:	4b5a      	ldr	r3, [pc, #360]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d121      	bne.n	8002cae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e0a6      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c76:	4b54      	ldr	r3, [pc, #336]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d115      	bne.n	8002cae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e09a      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d107      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c8e:	4b4e      	ldr	r3, [pc, #312]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e08e      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e086      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cae:	4b46      	ldr	r3, [pc, #280]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f023 0203 	bic.w	r2, r3, #3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	4943      	ldr	r1, [pc, #268]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc0:	f7fe fb3c 	bl	800133c <HAL_GetTick>
 8002cc4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc6:	e00a      	b.n	8002cde <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc8:	f7fe fb38 	bl	800133c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e06e      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	4b3a      	ldr	r3, [pc, #232]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 020c 	and.w	r2, r3, #12
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d1eb      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d010      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	4b31      	ldr	r3, [pc, #196]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d208      	bcs.n	8002d1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d0c:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	492b      	ldr	r1, [pc, #172]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d1e:	4b29      	ldr	r3, [pc, #164]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d210      	bcs.n	8002d4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2c:	4b25      	ldr	r3, [pc, #148]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f023 0207 	bic.w	r2, r3, #7
 8002d34:	4923      	ldr	r1, [pc, #140]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3c:	4b21      	ldr	r3, [pc, #132]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d001      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e036      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d008      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	4918      	ldr	r1, [pc, #96]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d009      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d78:	4b13      	ldr	r3, [pc, #76]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4910      	ldr	r1, [pc, #64]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d8c:	f000 f824 	bl	8002dd8 <HAL_RCC_GetSysClockFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	091b      	lsrs	r3, r3, #4
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	490b      	ldr	r1, [pc, #44]	@ (8002dcc <HAL_RCC_ClockConfig+0x1f4>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
 8002da8:	4a09      	ldr	r2, [pc, #36]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1f8>)
 8002daa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dac:	4b09      	ldr	r3, [pc, #36]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1fc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe fa73 	bl	800129c <HAL_InitTick>
 8002db6:	4603      	mov	r3, r0
 8002db8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dba:	7afb      	ldrb	r3, [r7, #11]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40022000 	.word	0x40022000
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	08005408 	.word	0x08005408
 8002dd0:	20000000 	.word	0x20000000
 8002dd4:	20000004 	.word	0x20000004

08002dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b089      	sub	sp, #36	@ 0x24
 8002ddc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	2300      	movs	r3, #0
 8002de4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002de6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002df0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_RCC_GetSysClockFreq+0x34>
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	2b0c      	cmp	r3, #12
 8002e04:	d121      	bne.n	8002e4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d11e      	bne.n	8002e4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e0c:	4b34      	ldr	r3, [pc, #208]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e18:	4b31      	ldr	r3, [pc, #196]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e1e:	0a1b      	lsrs	r3, r3, #8
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	e005      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e28:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e34:	4a2b      	ldr	r2, [pc, #172]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10d      	bne.n	8002e60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e48:	e00a      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d102      	bne.n	8002e56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e50:	4b25      	ldr	r3, [pc, #148]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e52:	61bb      	str	r3, [r7, #24]
 8002e54:	e004      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d101      	bne.n	8002e60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e5c:	4b23      	ldr	r3, [pc, #140]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x114>)
 8002e5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d134      	bne.n	8002ed0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e66:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d003      	beq.n	8002e7e <HAL_RCC_GetSysClockFreq+0xa6>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d003      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0xac>
 8002e7c:	e005      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e80:	617b      	str	r3, [r7, #20]
      break;
 8002e82:	e005      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e84:	4b19      	ldr	r3, [pc, #100]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x114>)
 8002e86:	617b      	str	r3, [r7, #20]
      break;
 8002e88:	e002      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	617b      	str	r3, [r7, #20]
      break;
 8002e8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e90:	4b13      	ldr	r3, [pc, #76]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	fb03 f202 	mul.w	r2, r3, r2
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	0e5b      	lsrs	r3, r3, #25
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ece:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ed0:	69bb      	ldr	r3, [r7, #24]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3724      	adds	r7, #36	@ 0x24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	08005420 	.word	0x08005420
 8002ee8:	00f42400 	.word	0x00f42400
 8002eec:	007a1200 	.word	0x007a1200

08002ef0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ef4:	4b03      	ldr	r3, [pc, #12]	@ (8002f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	20000000 	.word	0x20000000

08002f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f0c:	f7ff fff0 	bl	8002ef0 <HAL_RCC_GetHCLKFreq>
 8002f10:	4602      	mov	r2, r0
 8002f12:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	0a1b      	lsrs	r3, r3, #8
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	4904      	ldr	r1, [pc, #16]	@ (8002f30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f1e:	5ccb      	ldrb	r3, [r1, r3]
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	08005418 	.word	0x08005418

08002f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f38:	f7ff ffda 	bl	8002ef0 <HAL_RCC_GetHCLKFreq>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	0adb      	lsrs	r3, r3, #11
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	4904      	ldr	r1, [pc, #16]	@ (8002f5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f4a:	5ccb      	ldrb	r3, [r1, r3]
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	08005418 	.word	0x08005418

08002f60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f68:	2300      	movs	r3, #0
 8002f6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8003018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f78:	f7ff f922 	bl	80021c0 <HAL_PWREx_GetVoltageRange>
 8002f7c:	6178      	str	r0, [r7, #20]
 8002f7e:	e014      	b.n	8002faa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f80:	4b25      	ldr	r3, [pc, #148]	@ (8003018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f84:	4a24      	ldr	r2, [pc, #144]	@ (8003018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f8c:	4b22      	ldr	r3, [pc, #136]	@ (8003018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f98:	f7ff f912 	bl	80021c0 <HAL_PWREx_GetVoltageRange>
 8002f9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8003018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fa8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fb0:	d10b      	bne.n	8002fca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b80      	cmp	r3, #128	@ 0x80
 8002fb6:	d919      	bls.n	8002fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2ba0      	cmp	r3, #160	@ 0xa0
 8002fbc:	d902      	bls.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	e013      	b.n	8002fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	e010      	b.n	8002fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b80      	cmp	r3, #128	@ 0x80
 8002fce:	d902      	bls.n	8002fd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	613b      	str	r3, [r7, #16]
 8002fd4:	e00a      	b.n	8002fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b80      	cmp	r3, #128	@ 0x80
 8002fda:	d102      	bne.n	8002fe2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fdc:	2302      	movs	r3, #2
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	e004      	b.n	8002fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b70      	cmp	r3, #112	@ 0x70
 8002fe6:	d101      	bne.n	8002fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fe8:	2301      	movs	r3, #1
 8002fea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fec:	4b0b      	ldr	r3, [pc, #44]	@ (800301c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 0207 	bic.w	r2, r3, #7
 8002ff4:	4909      	ldr	r1, [pc, #36]	@ (800301c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ffc:	4b07      	ldr	r3, [pc, #28]	@ (800301c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	429a      	cmp	r2, r3
 8003008:	d001      	beq.n	800300e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40021000 	.word	0x40021000
 800301c:	40022000 	.word	0x40022000

08003020 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003028:	2300      	movs	r3, #0
 800302a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800302c:	2300      	movs	r3, #0
 800302e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003038:	2b00      	cmp	r3, #0
 800303a:	d041      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003040:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003044:	d02a      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003046:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800304a:	d824      	bhi.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800304c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003050:	d008      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003052:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003056:	d81e      	bhi.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800305c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003060:	d010      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003062:	e018      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003064:	4b86      	ldr	r3, [pc, #536]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4a85      	ldr	r2, [pc, #532]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800306e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003070:	e015      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3304      	adds	r3, #4
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f000 facb 	bl	8003614 <RCCEx_PLLSAI1_Config>
 800307e:	4603      	mov	r3, r0
 8003080:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003082:	e00c      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3320      	adds	r3, #32
 8003088:	2100      	movs	r1, #0
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fbb6 	bl	80037fc <RCCEx_PLLSAI2_Config>
 8003090:	4603      	mov	r3, r0
 8003092:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003094:	e003      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	74fb      	strb	r3, [r7, #19]
      break;
 800309a:	e000      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800309c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800309e:	7cfb      	ldrb	r3, [r7, #19]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10b      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030a4:	4b76      	ldr	r3, [pc, #472]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030b2:	4973      	ldr	r1, [pc, #460]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80030ba:	e001      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d041      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030d4:	d02a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80030d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030da:	d824      	bhi.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030e0:	d008      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030e6:	d81e      	bhi.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80030ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030f0:	d010      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030f2:	e018      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030f4:	4b62      	ldr	r3, [pc, #392]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	4a61      	ldr	r2, [pc, #388]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003100:	e015      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3304      	adds	r3, #4
 8003106:	2100      	movs	r1, #0
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fa83 	bl	8003614 <RCCEx_PLLSAI1_Config>
 800310e:	4603      	mov	r3, r0
 8003110:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003112:	e00c      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3320      	adds	r3, #32
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fb6e 	bl	80037fc <RCCEx_PLLSAI2_Config>
 8003120:	4603      	mov	r3, r0
 8003122:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003124:	e003      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	74fb      	strb	r3, [r7, #19]
      break;
 800312a:	e000      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800312c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800312e:	7cfb      	ldrb	r3, [r7, #19]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10b      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003134:	4b52      	ldr	r3, [pc, #328]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003142:	494f      	ldr	r1, [pc, #316]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003144:	4313      	orrs	r3, r2
 8003146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800314a:	e001      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800314c:	7cfb      	ldrb	r3, [r7, #19]
 800314e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80a0 	beq.w	800329e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800315e:	2300      	movs	r3, #0
 8003160:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003162:	4b47      	ldr	r3, [pc, #284]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003172:	2300      	movs	r3, #0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00d      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003178:	4b41      	ldr	r3, [pc, #260]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317c:	4a40      	ldr	r2, [pc, #256]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003182:	6593      	str	r3, [r2, #88]	@ 0x58
 8003184:	4b3e      	ldr	r3, [pc, #248]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003190:	2301      	movs	r3, #1
 8003192:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003194:	4b3b      	ldr	r3, [pc, #236]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a3a      	ldr	r2, [pc, #232]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800319a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800319e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031a0:	f7fe f8cc 	bl	800133c <HAL_GetTick>
 80031a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031a6:	e009      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a8:	f7fe f8c8 	bl	800133c <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d902      	bls.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	74fb      	strb	r3, [r7, #19]
        break;
 80031ba:	e005      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031bc:	4b31      	ldr	r3, [pc, #196]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0ef      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80031c8:	7cfb      	ldrb	r3, [r7, #19]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d15c      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d01f      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d019      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031ec:	4b24      	ldr	r3, [pc, #144]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031f8:	4b21      	ldr	r3, [pc, #132]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031fe:	4a20      	ldr	r2, [pc, #128]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003204:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003208:	4b1d      	ldr	r3, [pc, #116]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320e:	4a1c      	ldr	r2, [pc, #112]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003214:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003218:	4a19      	ldr	r2, [pc, #100]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d016      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7fe f887 	bl	800133c <HAL_GetTick>
 800322e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003230:	e00b      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fe f883 	bl	800133c <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d902      	bls.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	74fb      	strb	r3, [r7, #19]
            break;
 8003248:	e006      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800324a:	4b0d      	ldr	r3, [pc, #52]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0ec      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003258:	7cfb      	ldrb	r3, [r7, #19]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10c      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800325e:	4b08      	ldr	r3, [pc, #32]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003264:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800326e:	4904      	ldr	r1, [pc, #16]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003276:	e009      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003278:	7cfb      	ldrb	r3, [r7, #19]
 800327a:	74bb      	strb	r3, [r7, #18]
 800327c:	e006      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800328c:	7c7b      	ldrb	r3, [r7, #17]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d105      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003292:	4b9e      	ldr	r3, [pc, #632]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003296:	4a9d      	ldr	r2, [pc, #628]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003298:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800329c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032aa:	4b98      	ldr	r3, [pc, #608]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b0:	f023 0203 	bic.w	r2, r3, #3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b8:	4994      	ldr	r1, [pc, #592]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00a      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032cc:	4b8f      	ldr	r3, [pc, #572]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d2:	f023 020c 	bic.w	r2, r3, #12
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032da:	498c      	ldr	r1, [pc, #560]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032ee:	4b87      	ldr	r3, [pc, #540]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fc:	4983      	ldr	r1, [pc, #524]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003310:	4b7e      	ldr	r3, [pc, #504]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003316:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331e:	497b      	ldr	r1, [pc, #492]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003332:	4b76      	ldr	r3, [pc, #472]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003338:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003340:	4972      	ldr	r1, [pc, #456]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003354:	4b6d      	ldr	r3, [pc, #436]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003362:	496a      	ldr	r1, [pc, #424]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003376:	4b65      	ldr	r3, [pc, #404]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003384:	4961      	ldr	r1, [pc, #388]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003398:	4b5c      	ldr	r3, [pc, #368]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a6:	4959      	ldr	r1, [pc, #356]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ba:	4b54      	ldr	r3, [pc, #336]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c8:	4950      	ldr	r1, [pc, #320]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033dc:	4b4b      	ldr	r3, [pc, #300]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ea:	4948      	ldr	r1, [pc, #288]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033fe:	4b43      	ldr	r3, [pc, #268]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003404:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340c:	493f      	ldr	r1, [pc, #252]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d028      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003420:	4b3a      	ldr	r3, [pc, #232]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003426:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800342e:	4937      	ldr	r1, [pc, #220]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800343a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800343e:	d106      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003440:	4b32      	ldr	r3, [pc, #200]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4a31      	ldr	r2, [pc, #196]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003446:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800344a:	60d3      	str	r3, [r2, #12]
 800344c:	e011      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003452:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003456:	d10c      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3304      	adds	r3, #4
 800345c:	2101      	movs	r1, #1
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f8d8 	bl	8003614 <RCCEx_PLLSAI1_Config>
 8003464:	4603      	mov	r3, r0
 8003466:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003468:	7cfb      	ldrb	r3, [r7, #19]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800346e:	7cfb      	ldrb	r3, [r7, #19]
 8003470:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d028      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800347e:	4b23      	ldr	r3, [pc, #140]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003484:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348c:	491f      	ldr	r1, [pc, #124]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003498:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800349c:	d106      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800349e:	4b1b      	ldr	r3, [pc, #108]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	4a1a      	ldr	r2, [pc, #104]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034a8:	60d3      	str	r3, [r2, #12]
 80034aa:	e011      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3304      	adds	r3, #4
 80034ba:	2101      	movs	r1, #1
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 f8a9 	bl	8003614 <RCCEx_PLLSAI1_Config>
 80034c2:	4603      	mov	r3, r0
 80034c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034c6:	7cfb      	ldrb	r3, [r7, #19]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80034cc:	7cfb      	ldrb	r3, [r7, #19]
 80034ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d02b      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034dc:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ea:	4908      	ldr	r1, [pc, #32]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034fa:	d109      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034fc:	4b03      	ldr	r3, [pc, #12]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4a02      	ldr	r2, [pc, #8]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003502:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003506:	60d3      	str	r3, [r2, #12]
 8003508:	e014      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003514:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003518:	d10c      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3304      	adds	r3, #4
 800351e:	2101      	movs	r1, #1
 8003520:	4618      	mov	r0, r3
 8003522:	f000 f877 	bl	8003614 <RCCEx_PLLSAI1_Config>
 8003526:	4603      	mov	r3, r0
 8003528:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800352a:	7cfb      	ldrb	r3, [r7, #19]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003530:	7cfb      	ldrb	r3, [r7, #19]
 8003532:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d02f      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003540:	4b2b      	ldr	r3, [pc, #172]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003546:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800354e:	4928      	ldr	r1, [pc, #160]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800355a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800355e:	d10d      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3304      	adds	r3, #4
 8003564:	2102      	movs	r1, #2
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f854 	bl	8003614 <RCCEx_PLLSAI1_Config>
 800356c:	4603      	mov	r3, r0
 800356e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003570:	7cfb      	ldrb	r3, [r7, #19]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d014      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	74bb      	strb	r3, [r7, #18]
 800357a:	e011      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003580:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003584:	d10c      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3320      	adds	r3, #32
 800358a:	2102      	movs	r1, #2
 800358c:	4618      	mov	r0, r3
 800358e:	f000 f935 	bl	80037fc <RCCEx_PLLSAI2_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003596:	7cfb      	ldrb	r3, [r7, #19]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800359c:	7cfb      	ldrb	r3, [r7, #19]
 800359e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035ac:	4b10      	ldr	r3, [pc, #64]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035ba:	490d      	ldr	r1, [pc, #52]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00b      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035ce:	4b08      	ldr	r3, [pc, #32]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035de:	4904      	ldr	r1, [pc, #16]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40021000 	.word	0x40021000

080035f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80035f8:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a04      	ldr	r2, [pc, #16]	@ (8003610 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80035fe:	f043 0304 	orr.w	r3, r3, #4
 8003602:	6013      	str	r3, [r2, #0]
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40021000 	.word	0x40021000

08003614 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003622:	4b75      	ldr	r3, [pc, #468]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d018      	beq.n	8003660 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800362e:	4b72      	ldr	r3, [pc, #456]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f003 0203 	and.w	r2, r3, #3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d10d      	bne.n	800365a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
       ||
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003646:	4b6c      	ldr	r3, [pc, #432]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
       ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d047      	beq.n	80036ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	73fb      	strb	r3, [r7, #15]
 800365e:	e044      	b.n	80036ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d018      	beq.n	800369a <RCCEx_PLLSAI1_Config+0x86>
 8003668:	2b03      	cmp	r3, #3
 800366a:	d825      	bhi.n	80036b8 <RCCEx_PLLSAI1_Config+0xa4>
 800366c:	2b01      	cmp	r3, #1
 800366e:	d002      	beq.n	8003676 <RCCEx_PLLSAI1_Config+0x62>
 8003670:	2b02      	cmp	r3, #2
 8003672:	d009      	beq.n	8003688 <RCCEx_PLLSAI1_Config+0x74>
 8003674:	e020      	b.n	80036b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003676:	4b60      	ldr	r3, [pc, #384]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d11d      	bne.n	80036be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003686:	e01a      	b.n	80036be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003688:	4b5b      	ldr	r3, [pc, #364]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003690:	2b00      	cmp	r3, #0
 8003692:	d116      	bne.n	80036c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003698:	e013      	b.n	80036c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800369a:	4b57      	ldr	r3, [pc, #348]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10f      	bne.n	80036c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036a6:	4b54      	ldr	r3, [pc, #336]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d109      	bne.n	80036c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036b6:	e006      	b.n	80036c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
      break;
 80036bc:	e004      	b.n	80036c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036be:	bf00      	nop
 80036c0:	e002      	b.n	80036c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036c2:	bf00      	nop
 80036c4:	e000      	b.n	80036c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10d      	bne.n	80036ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036ce:	4b4a      	ldr	r3, [pc, #296]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6819      	ldr	r1, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	3b01      	subs	r3, #1
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	430b      	orrs	r3, r1
 80036e4:	4944      	ldr	r1, [pc, #272]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d17d      	bne.n	80037ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036f0:	4b41      	ldr	r3, [pc, #260]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a40      	ldr	r2, [pc, #256]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80036fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036fc:	f7fd fe1e 	bl	800133c <HAL_GetTick>
 8003700:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003702:	e009      	b.n	8003718 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003704:	f7fd fe1a 	bl	800133c <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d902      	bls.n	8003718 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	73fb      	strb	r3, [r7, #15]
        break;
 8003716:	e005      	b.n	8003724 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003718:	4b37      	ldr	r3, [pc, #220]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1ef      	bne.n	8003704 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d160      	bne.n	80037ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d111      	bne.n	8003754 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003730:	4b31      	ldr	r3, [pc, #196]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003738:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6892      	ldr	r2, [r2, #8]
 8003740:	0211      	lsls	r1, r2, #8
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	68d2      	ldr	r2, [r2, #12]
 8003746:	0912      	lsrs	r2, r2, #4
 8003748:	0452      	lsls	r2, r2, #17
 800374a:	430a      	orrs	r2, r1
 800374c:	492a      	ldr	r1, [pc, #168]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800374e:	4313      	orrs	r3, r2
 8003750:	610b      	str	r3, [r1, #16]
 8003752:	e027      	b.n	80037a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d112      	bne.n	8003780 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800375a:	4b27      	ldr	r3, [pc, #156]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003762:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6892      	ldr	r2, [r2, #8]
 800376a:	0211      	lsls	r1, r2, #8
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6912      	ldr	r2, [r2, #16]
 8003770:	0852      	lsrs	r2, r2, #1
 8003772:	3a01      	subs	r2, #1
 8003774:	0552      	lsls	r2, r2, #21
 8003776:	430a      	orrs	r2, r1
 8003778:	491f      	ldr	r1, [pc, #124]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800377a:	4313      	orrs	r3, r2
 800377c:	610b      	str	r3, [r1, #16]
 800377e:	e011      	b.n	80037a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003780:	4b1d      	ldr	r3, [pc, #116]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003788:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6892      	ldr	r2, [r2, #8]
 8003790:	0211      	lsls	r1, r2, #8
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6952      	ldr	r2, [r2, #20]
 8003796:	0852      	lsrs	r2, r2, #1
 8003798:	3a01      	subs	r2, #1
 800379a:	0652      	lsls	r2, r2, #25
 800379c:	430a      	orrs	r2, r1
 800379e:	4916      	ldr	r1, [pc, #88]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037a4:	4b14      	ldr	r3, [pc, #80]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a13      	ldr	r2, [pc, #76]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b0:	f7fd fdc4 	bl	800133c <HAL_GetTick>
 80037b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037b6:	e009      	b.n	80037cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037b8:	f7fd fdc0 	bl	800133c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d902      	bls.n	80037cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	73fb      	strb	r3, [r7, #15]
          break;
 80037ca:	e005      	b.n	80037d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037cc:	4b0a      	ldr	r3, [pc, #40]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0ef      	beq.n	80037b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037de:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e0:	691a      	ldr	r2, [r3, #16]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	4904      	ldr	r1, [pc, #16]	@ (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40021000 	.word	0x40021000

080037fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800380a:	4b6a      	ldr	r3, [pc, #424]	@ (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d018      	beq.n	8003848 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003816:	4b67      	ldr	r3, [pc, #412]	@ (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f003 0203 	and.w	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d10d      	bne.n	8003842 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
       ||
 800382a:	2b00      	cmp	r3, #0
 800382c:	d009      	beq.n	8003842 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800382e:	4b61      	ldr	r3, [pc, #388]	@ (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	091b      	lsrs	r3, r3, #4
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
       ||
 800383e:	429a      	cmp	r2, r3
 8003840:	d047      	beq.n	80038d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	73fb      	strb	r3, [r7, #15]
 8003846:	e044      	b.n	80038d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b03      	cmp	r3, #3
 800384e:	d018      	beq.n	8003882 <RCCEx_PLLSAI2_Config+0x86>
 8003850:	2b03      	cmp	r3, #3
 8003852:	d825      	bhi.n	80038a0 <RCCEx_PLLSAI2_Config+0xa4>
 8003854:	2b01      	cmp	r3, #1
 8003856:	d002      	beq.n	800385e <RCCEx_PLLSAI2_Config+0x62>
 8003858:	2b02      	cmp	r3, #2
 800385a:	d009      	beq.n	8003870 <RCCEx_PLLSAI2_Config+0x74>
 800385c:	e020      	b.n	80038a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800385e:	4b55      	ldr	r3, [pc, #340]	@ (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d11d      	bne.n	80038a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800386e:	e01a      	b.n	80038a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003870:	4b50      	ldr	r3, [pc, #320]	@ (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003878:	2b00      	cmp	r3, #0
 800387a:	d116      	bne.n	80038aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003880:	e013      	b.n	80038aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003882:	4b4c      	ldr	r3, [pc, #304]	@ (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10f      	bne.n	80038ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800388e:	4b49      	ldr	r3, [pc, #292]	@ (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800389e:	e006      	b.n	80038ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
      break;
 80038a4:	e004      	b.n	80038b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038a6:	bf00      	nop
 80038a8:	e002      	b.n	80038b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038aa:	bf00      	nop
 80038ac:	e000      	b.n	80038b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10d      	bne.n	80038d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038b6:	4b3f      	ldr	r3, [pc, #252]	@ (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6819      	ldr	r1, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	430b      	orrs	r3, r1
 80038cc:	4939      	ldr	r1, [pc, #228]	@ (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d167      	bne.n	80039a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038d8:	4b36      	ldr	r3, [pc, #216]	@ (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a35      	ldr	r2, [pc, #212]	@ (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038e4:	f7fd fd2a 	bl	800133c <HAL_GetTick>
 80038e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038ea:	e009      	b.n	8003900 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038ec:	f7fd fd26 	bl	800133c <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d902      	bls.n	8003900 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	73fb      	strb	r3, [r7, #15]
        break;
 80038fe:	e005      	b.n	800390c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003900:	4b2c      	ldr	r3, [pc, #176]	@ (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1ef      	bne.n	80038ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d14a      	bne.n	80039a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d111      	bne.n	800393c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003918:	4b26      	ldr	r3, [pc, #152]	@ (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003920:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6892      	ldr	r2, [r2, #8]
 8003928:	0211      	lsls	r1, r2, #8
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68d2      	ldr	r2, [r2, #12]
 800392e:	0912      	lsrs	r2, r2, #4
 8003930:	0452      	lsls	r2, r2, #17
 8003932:	430a      	orrs	r2, r1
 8003934:	491f      	ldr	r1, [pc, #124]	@ (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003936:	4313      	orrs	r3, r2
 8003938:	614b      	str	r3, [r1, #20]
 800393a:	e011      	b.n	8003960 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800393c:	4b1d      	ldr	r3, [pc, #116]	@ (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003944:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6892      	ldr	r2, [r2, #8]
 800394c:	0211      	lsls	r1, r2, #8
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6912      	ldr	r2, [r2, #16]
 8003952:	0852      	lsrs	r2, r2, #1
 8003954:	3a01      	subs	r2, #1
 8003956:	0652      	lsls	r2, r2, #25
 8003958:	430a      	orrs	r2, r1
 800395a:	4916      	ldr	r1, [pc, #88]	@ (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800395c:	4313      	orrs	r3, r2
 800395e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003960:	4b14      	ldr	r3, [pc, #80]	@ (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a13      	ldr	r2, [pc, #76]	@ (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800396a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396c:	f7fd fce6 	bl	800133c <HAL_GetTick>
 8003970:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003972:	e009      	b.n	8003988 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003974:	f7fd fce2 	bl	800133c <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d902      	bls.n	8003988 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	73fb      	strb	r3, [r7, #15]
          break;
 8003986:	e005      	b.n	8003994 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003988:	4b0a      	ldr	r3, [pc, #40]	@ (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0ef      	beq.n	8003974 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800399a:	4b06      	ldr	r3, [pc, #24]	@ (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	4904      	ldr	r1, [pc, #16]	@ (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40021000 	.word	0x40021000

080039b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e095      	b.n	8003af6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d108      	bne.n	80039e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039da:	d009      	beq.n	80039f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	61da      	str	r2, [r3, #28]
 80039e2:	e005      	b.n	80039f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d106      	bne.n	8003a10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fd fa4a 	bl	8000ea4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a30:	d902      	bls.n	8003a38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	e002      	b.n	8003a3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003a46:	d007      	beq.n	8003a58 <HAL_SPI_Init+0xa0>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a50:	d002      	beq.n	8003a58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a9a:	ea42 0103 	orr.w	r1, r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	0c1b      	lsrs	r3, r3, #16
 8003ab4:	f003 0204 	and.w	r2, r3, #4
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003ad4:	ea42 0103 	orr.w	r1, r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e040      	b.n	8003b92 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7fd fa03 	bl	8000f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2224      	movs	r2, #36	@ 0x24
 8003b2a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0201 	bic.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fe5b 	bl	8004800 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fba0 	bl	8004290 <UART_SetConfig>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e01b      	b.n	8003b92 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0201 	orr.w	r2, r2, #1
 8003b88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 feda 	bl	8004944 <UART_CheckIdleState>
 8003b90:	4603      	mov	r3, r0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b08b      	sub	sp, #44	@ 0x2c
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d147      	bne.n	8003c42 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <HAL_UART_Transmit_IT+0x22>
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e040      	b.n	8003c44 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	88fa      	ldrh	r2, [r7, #6]
 8003bcc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	88fa      	ldrh	r2, [r7, #6]
 8003bd4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2221      	movs	r2, #33	@ 0x21
 8003bea:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bf4:	d107      	bne.n	8003c06 <HAL_UART_Transmit_IT+0x6a>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d103      	bne.n	8003c06 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4a13      	ldr	r2, [pc, #76]	@ (8003c50 <HAL_UART_Transmit_IT+0xb4>)
 8003c02:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003c04:	e002      	b.n	8003c0c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4a12      	ldr	r2, [pc, #72]	@ (8003c54 <HAL_UART_Transmit_IT+0xb8>)
 8003c0a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	613b      	str	r3, [r7, #16]
   return(result);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	623b      	str	r3, [r7, #32]
 8003c2c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	69f9      	ldr	r1, [r7, #28]
 8003c30:	6a3a      	ldr	r2, [r7, #32]
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e6      	bne.n	8003c0c <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e000      	b.n	8003c44 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003c42:	2302      	movs	r3, #2
  }
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	372c      	adds	r7, #44	@ 0x2c
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	08004d19 	.word	0x08004d19
 8003c54:	08004c63 	.word	0x08004c63

08003c58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b0ba      	sub	sp, #232	@ 0xe8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003c82:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003c86:	4013      	ands	r3, r2
 8003c88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003c8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d115      	bne.n	8003cc0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00f      	beq.n	8003cc0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d009      	beq.n	8003cc0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 82ca 	beq.w	800424a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	4798      	blx	r3
      }
      return;
 8003cbe:	e2c4      	b.n	800424a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003cc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 8117 	beq.w	8003ef8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003cd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003cda:	4b85      	ldr	r3, [pc, #532]	@ (8003ef0 <HAL_UART_IRQHandler+0x298>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 810a 	beq.w	8003ef8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d011      	beq.n	8003d14 <HAL_UART_IRQHandler+0xbc>
 8003cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00b      	beq.n	8003d14 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2201      	movs	r2, #1
 8003d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d0a:	f043 0201 	orr.w	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d011      	beq.n	8003d44 <HAL_UART_IRQHandler+0xec>
 8003d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00b      	beq.n	8003d44 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2202      	movs	r2, #2
 8003d32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d3a:	f043 0204 	orr.w	r2, r3, #4
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d011      	beq.n	8003d74 <HAL_UART_IRQHandler+0x11c>
 8003d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00b      	beq.n	8003d74 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2204      	movs	r2, #4
 8003d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d6a:	f043 0202 	orr.w	r2, r3, #2
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d017      	beq.n	8003db0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d105      	bne.n	8003d98 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d90:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00b      	beq.n	8003db0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2208      	movs	r2, #8
 8003d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003da6:	f043 0208 	orr.w	r2, r3, #8
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d012      	beq.n	8003de2 <HAL_UART_IRQHandler+0x18a>
 8003dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dc0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00c      	beq.n	8003de2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dd8:	f043 0220 	orr.w	r2, r3, #32
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8230 	beq.w	800424e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00d      	beq.n	8003e16 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d007      	beq.n	8003e16 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e2a:	2b40      	cmp	r3, #64	@ 0x40
 8003e2c:	d005      	beq.n	8003e3a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d04f      	beq.n	8003eda <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fe97 	bl	8004b6e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e4a:	2b40      	cmp	r3, #64	@ 0x40
 8003e4c:	d141      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3308      	adds	r3, #8
 8003e54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e5c:	e853 3f00 	ldrex	r3, [r3]
 8003e60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3308      	adds	r3, #8
 8003e76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1d9      	bne.n	8003e4e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d013      	beq.n	8003eca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ea6:	4a13      	ldr	r2, [pc, #76]	@ (8003ef4 <HAL_UART_IRQHandler+0x29c>)
 8003ea8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fd fcd0 	bl	8001854 <HAL_DMA_Abort_IT>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d017      	beq.n	8003eea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec8:	e00f      	b.n	8003eea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f9ca 	bl	8004264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed0:	e00b      	b.n	8003eea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f9c6 	bl	8004264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed8:	e007      	b.n	8003eea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f9c2 	bl	8004264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003ee8:	e1b1      	b.n	800424e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eea:	bf00      	nop
    return;
 8003eec:	e1af      	b.n	800424e <HAL_UART_IRQHandler+0x5f6>
 8003eee:	bf00      	nop
 8003ef0:	04000120 	.word	0x04000120
 8003ef4:	08004c37 	.word	0x08004c37

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	f040 816a 	bne.w	80041d6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 8163 	beq.w	80041d6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 815c 	beq.w	80041d6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2210      	movs	r2, #16
 8003f24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f30:	2b40      	cmp	r3, #64	@ 0x40
 8003f32:	f040 80d4 	bne.w	80040de <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f42:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80ad 	beq.w	80040a6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003f52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f56:	429a      	cmp	r2, r3
 8003f58:	f080 80a5 	bcs.w	80040a6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f62:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f040 8086 	bne.w	8004084 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f84:	e853 3f00 	ldrex	r3, [r3]
 8003f88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003fa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003fa6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003fae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1da      	bne.n	8003f78 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003fd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fd4:	f023 0301 	bic.w	r3, r3, #1
 8003fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003fe6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003fea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003fee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ff8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e1      	bne.n	8003fc2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3308      	adds	r3, #8
 8004004:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800400e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004010:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004014:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3308      	adds	r3, #8
 800401e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004022:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004024:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004026:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004028:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800402a:	e841 2300 	strex	r3, r2, [r1]
 800402e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004030:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e3      	bne.n	8003ffe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800404c:	e853 3f00 	ldrex	r3, [r3]
 8004050:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004052:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004054:	f023 0310 	bic.w	r3, r3, #16
 8004058:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004066:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004068:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800406c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e4      	bne.n	8004044 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800407e:	4618      	mov	r0, r3
 8004080:	f7fd fbaa 	bl	80017d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004096:	b29b      	uxth	r3, r3
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	b29b      	uxth	r3, r3
 800409c:	4619      	mov	r1, r3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f8ea 	bl	8004278 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80040a4:	e0d5      	b.n	8004252 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80040ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040b0:	429a      	cmp	r2, r3
 80040b2:	f040 80ce 	bne.w	8004252 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b20      	cmp	r3, #32
 80040c4:	f040 80c5 	bne.w	8004252 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80040d4:	4619      	mov	r1, r3
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f8ce 	bl	8004278 <HAL_UARTEx_RxEventCallback>
      return;
 80040dc:	e0b9      	b.n	8004252 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 80ab 	beq.w	8004256 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004100:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 80a6 	beq.w	8004256 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800411a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800411e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800412c:	647b      	str	r3, [r7, #68]	@ 0x44
 800412e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004132:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004134:	e841 2300 	strex	r3, r2, [r1]
 8004138:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800413a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e4      	bne.n	800410a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3308      	adds	r3, #8
 8004146:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	e853 3f00 	ldrex	r3, [r3]
 800414e:	623b      	str	r3, [r7, #32]
   return(result);
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	f023 0301 	bic.w	r3, r3, #1
 8004156:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3308      	adds	r3, #8
 8004160:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004164:	633a      	str	r2, [r7, #48]	@ 0x30
 8004166:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800416a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800416c:	e841 2300 	strex	r3, r2, [r1]
 8004170:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1e3      	bne.n	8004140 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	60fb      	str	r3, [r7, #12]
   return(result);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f023 0310 	bic.w	r3, r3, #16
 80041a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041ae:	61fb      	str	r3, [r7, #28]
 80041b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b2:	69b9      	ldr	r1, [r7, #24]
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	617b      	str	r3, [r7, #20]
   return(result);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1e4      	bne.n	800418c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2202      	movs	r2, #2
 80041c6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041cc:	4619      	mov	r1, r3
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f852 	bl	8004278 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041d4:	e03f      	b.n	8004256 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00e      	beq.n	8004200 <HAL_UART_IRQHandler+0x5a8>
 80041e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d008      	beq.n	8004200 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80041f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 fe17 	bl	8004e2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041fe:	e02d      	b.n	800425c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00e      	beq.n	800422a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800420c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01c      	beq.n	800425a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	4798      	blx	r3
    }
    return;
 8004228:	e017      	b.n	800425a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800422e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004232:	2b00      	cmp	r3, #0
 8004234:	d012      	beq.n	800425c <HAL_UART_IRQHandler+0x604>
 8004236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800423a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00c      	beq.n	800425c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fdc8 	bl	8004dd8 <UART_EndTransmit_IT>
    return;
 8004248:	e008      	b.n	800425c <HAL_UART_IRQHandler+0x604>
      return;
 800424a:	bf00      	nop
 800424c:	e006      	b.n	800425c <HAL_UART_IRQHandler+0x604>
    return;
 800424e:	bf00      	nop
 8004250:	e004      	b.n	800425c <HAL_UART_IRQHandler+0x604>
      return;
 8004252:	bf00      	nop
 8004254:	e002      	b.n	800425c <HAL_UART_IRQHandler+0x604>
      return;
 8004256:	bf00      	nop
 8004258:	e000      	b.n	800425c <HAL_UART_IRQHandler+0x604>
    return;
 800425a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800425c:	37e8      	adds	r7, #232	@ 0xe8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop

08004264 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004294:	b08a      	sub	sp, #40	@ 0x28
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	431a      	orrs	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4ba4      	ldr	r3, [pc, #656]	@ (8004550 <UART_SetConfig+0x2c0>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	6812      	ldr	r2, [r2, #0]
 80042c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042c8:	430b      	orrs	r3, r1
 80042ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a99      	ldr	r2, [pc, #612]	@ (8004554 <UART_SetConfig+0x2c4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d004      	beq.n	80042fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f8:	4313      	orrs	r3, r2
 80042fa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800430c:	430a      	orrs	r2, r1
 800430e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a90      	ldr	r2, [pc, #576]	@ (8004558 <UART_SetConfig+0x2c8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d126      	bne.n	8004368 <UART_SetConfig+0xd8>
 800431a:	4b90      	ldr	r3, [pc, #576]	@ (800455c <UART_SetConfig+0x2cc>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	2b03      	cmp	r3, #3
 8004326:	d81b      	bhi.n	8004360 <UART_SetConfig+0xd0>
 8004328:	a201      	add	r2, pc, #4	@ (adr r2, 8004330 <UART_SetConfig+0xa0>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004341 	.word	0x08004341
 8004334:	08004351 	.word	0x08004351
 8004338:	08004349 	.word	0x08004349
 800433c:	08004359 	.word	0x08004359
 8004340:	2301      	movs	r3, #1
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004346:	e116      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004348:	2302      	movs	r3, #2
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800434e:	e112      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004350:	2304      	movs	r3, #4
 8004352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004356:	e10e      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004358:	2308      	movs	r3, #8
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800435e:	e10a      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004360:	2310      	movs	r3, #16
 8004362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004366:	e106      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a7c      	ldr	r2, [pc, #496]	@ (8004560 <UART_SetConfig+0x2d0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d138      	bne.n	80043e4 <UART_SetConfig+0x154>
 8004372:	4b7a      	ldr	r3, [pc, #488]	@ (800455c <UART_SetConfig+0x2cc>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004378:	f003 030c 	and.w	r3, r3, #12
 800437c:	2b0c      	cmp	r3, #12
 800437e:	d82d      	bhi.n	80043dc <UART_SetConfig+0x14c>
 8004380:	a201      	add	r2, pc, #4	@ (adr r2, 8004388 <UART_SetConfig+0xf8>)
 8004382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004386:	bf00      	nop
 8004388:	080043bd 	.word	0x080043bd
 800438c:	080043dd 	.word	0x080043dd
 8004390:	080043dd 	.word	0x080043dd
 8004394:	080043dd 	.word	0x080043dd
 8004398:	080043cd 	.word	0x080043cd
 800439c:	080043dd 	.word	0x080043dd
 80043a0:	080043dd 	.word	0x080043dd
 80043a4:	080043dd 	.word	0x080043dd
 80043a8:	080043c5 	.word	0x080043c5
 80043ac:	080043dd 	.word	0x080043dd
 80043b0:	080043dd 	.word	0x080043dd
 80043b4:	080043dd 	.word	0x080043dd
 80043b8:	080043d5 	.word	0x080043d5
 80043bc:	2300      	movs	r3, #0
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043c2:	e0d8      	b.n	8004576 <UART_SetConfig+0x2e6>
 80043c4:	2302      	movs	r3, #2
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ca:	e0d4      	b.n	8004576 <UART_SetConfig+0x2e6>
 80043cc:	2304      	movs	r3, #4
 80043ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043d2:	e0d0      	b.n	8004576 <UART_SetConfig+0x2e6>
 80043d4:	2308      	movs	r3, #8
 80043d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043da:	e0cc      	b.n	8004576 <UART_SetConfig+0x2e6>
 80043dc:	2310      	movs	r3, #16
 80043de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043e2:	e0c8      	b.n	8004576 <UART_SetConfig+0x2e6>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a5e      	ldr	r2, [pc, #376]	@ (8004564 <UART_SetConfig+0x2d4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d125      	bne.n	800443a <UART_SetConfig+0x1aa>
 80043ee:	4b5b      	ldr	r3, [pc, #364]	@ (800455c <UART_SetConfig+0x2cc>)
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80043f8:	2b30      	cmp	r3, #48	@ 0x30
 80043fa:	d016      	beq.n	800442a <UART_SetConfig+0x19a>
 80043fc:	2b30      	cmp	r3, #48	@ 0x30
 80043fe:	d818      	bhi.n	8004432 <UART_SetConfig+0x1a2>
 8004400:	2b20      	cmp	r3, #32
 8004402:	d00a      	beq.n	800441a <UART_SetConfig+0x18a>
 8004404:	2b20      	cmp	r3, #32
 8004406:	d814      	bhi.n	8004432 <UART_SetConfig+0x1a2>
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <UART_SetConfig+0x182>
 800440c:	2b10      	cmp	r3, #16
 800440e:	d008      	beq.n	8004422 <UART_SetConfig+0x192>
 8004410:	e00f      	b.n	8004432 <UART_SetConfig+0x1a2>
 8004412:	2300      	movs	r3, #0
 8004414:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004418:	e0ad      	b.n	8004576 <UART_SetConfig+0x2e6>
 800441a:	2302      	movs	r3, #2
 800441c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004420:	e0a9      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004422:	2304      	movs	r3, #4
 8004424:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004428:	e0a5      	b.n	8004576 <UART_SetConfig+0x2e6>
 800442a:	2308      	movs	r3, #8
 800442c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004430:	e0a1      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004432:	2310      	movs	r3, #16
 8004434:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004438:	e09d      	b.n	8004576 <UART_SetConfig+0x2e6>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a4a      	ldr	r2, [pc, #296]	@ (8004568 <UART_SetConfig+0x2d8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d125      	bne.n	8004490 <UART_SetConfig+0x200>
 8004444:	4b45      	ldr	r3, [pc, #276]	@ (800455c <UART_SetConfig+0x2cc>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800444a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800444e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004450:	d016      	beq.n	8004480 <UART_SetConfig+0x1f0>
 8004452:	2bc0      	cmp	r3, #192	@ 0xc0
 8004454:	d818      	bhi.n	8004488 <UART_SetConfig+0x1f8>
 8004456:	2b80      	cmp	r3, #128	@ 0x80
 8004458:	d00a      	beq.n	8004470 <UART_SetConfig+0x1e0>
 800445a:	2b80      	cmp	r3, #128	@ 0x80
 800445c:	d814      	bhi.n	8004488 <UART_SetConfig+0x1f8>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <UART_SetConfig+0x1d8>
 8004462:	2b40      	cmp	r3, #64	@ 0x40
 8004464:	d008      	beq.n	8004478 <UART_SetConfig+0x1e8>
 8004466:	e00f      	b.n	8004488 <UART_SetConfig+0x1f8>
 8004468:	2300      	movs	r3, #0
 800446a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800446e:	e082      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004470:	2302      	movs	r3, #2
 8004472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004476:	e07e      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004478:	2304      	movs	r3, #4
 800447a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800447e:	e07a      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004480:	2308      	movs	r3, #8
 8004482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004486:	e076      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004488:	2310      	movs	r3, #16
 800448a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800448e:	e072      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a35      	ldr	r2, [pc, #212]	@ (800456c <UART_SetConfig+0x2dc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d12a      	bne.n	80044f0 <UART_SetConfig+0x260>
 800449a:	4b30      	ldr	r3, [pc, #192]	@ (800455c <UART_SetConfig+0x2cc>)
 800449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044a8:	d01a      	beq.n	80044e0 <UART_SetConfig+0x250>
 80044aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044ae:	d81b      	bhi.n	80044e8 <UART_SetConfig+0x258>
 80044b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044b4:	d00c      	beq.n	80044d0 <UART_SetConfig+0x240>
 80044b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ba:	d815      	bhi.n	80044e8 <UART_SetConfig+0x258>
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <UART_SetConfig+0x238>
 80044c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044c4:	d008      	beq.n	80044d8 <UART_SetConfig+0x248>
 80044c6:	e00f      	b.n	80044e8 <UART_SetConfig+0x258>
 80044c8:	2300      	movs	r3, #0
 80044ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ce:	e052      	b.n	8004576 <UART_SetConfig+0x2e6>
 80044d0:	2302      	movs	r3, #2
 80044d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044d6:	e04e      	b.n	8004576 <UART_SetConfig+0x2e6>
 80044d8:	2304      	movs	r3, #4
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044de:	e04a      	b.n	8004576 <UART_SetConfig+0x2e6>
 80044e0:	2308      	movs	r3, #8
 80044e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044e6:	e046      	b.n	8004576 <UART_SetConfig+0x2e6>
 80044e8:	2310      	movs	r3, #16
 80044ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ee:	e042      	b.n	8004576 <UART_SetConfig+0x2e6>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a17      	ldr	r2, [pc, #92]	@ (8004554 <UART_SetConfig+0x2c4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d13a      	bne.n	8004570 <UART_SetConfig+0x2e0>
 80044fa:	4b18      	ldr	r3, [pc, #96]	@ (800455c <UART_SetConfig+0x2cc>)
 80044fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004500:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004504:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004508:	d01a      	beq.n	8004540 <UART_SetConfig+0x2b0>
 800450a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800450e:	d81b      	bhi.n	8004548 <UART_SetConfig+0x2b8>
 8004510:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004514:	d00c      	beq.n	8004530 <UART_SetConfig+0x2a0>
 8004516:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800451a:	d815      	bhi.n	8004548 <UART_SetConfig+0x2b8>
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <UART_SetConfig+0x298>
 8004520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004524:	d008      	beq.n	8004538 <UART_SetConfig+0x2a8>
 8004526:	e00f      	b.n	8004548 <UART_SetConfig+0x2b8>
 8004528:	2300      	movs	r3, #0
 800452a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800452e:	e022      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004530:	2302      	movs	r3, #2
 8004532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004536:	e01e      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004538:	2304      	movs	r3, #4
 800453a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800453e:	e01a      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004540:	2308      	movs	r3, #8
 8004542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004546:	e016      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004548:	2310      	movs	r3, #16
 800454a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800454e:	e012      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004550:	efff69f3 	.word	0xefff69f3
 8004554:	40008000 	.word	0x40008000
 8004558:	40013800 	.word	0x40013800
 800455c:	40021000 	.word	0x40021000
 8004560:	40004400 	.word	0x40004400
 8004564:	40004800 	.word	0x40004800
 8004568:	40004c00 	.word	0x40004c00
 800456c:	40005000 	.word	0x40005000
 8004570:	2310      	movs	r3, #16
 8004572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a9f      	ldr	r2, [pc, #636]	@ (80047f8 <UART_SetConfig+0x568>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d17a      	bne.n	8004676 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004580:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004584:	2b08      	cmp	r3, #8
 8004586:	d824      	bhi.n	80045d2 <UART_SetConfig+0x342>
 8004588:	a201      	add	r2, pc, #4	@ (adr r2, 8004590 <UART_SetConfig+0x300>)
 800458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458e:	bf00      	nop
 8004590:	080045b5 	.word	0x080045b5
 8004594:	080045d3 	.word	0x080045d3
 8004598:	080045bd 	.word	0x080045bd
 800459c:	080045d3 	.word	0x080045d3
 80045a0:	080045c3 	.word	0x080045c3
 80045a4:	080045d3 	.word	0x080045d3
 80045a8:	080045d3 	.word	0x080045d3
 80045ac:	080045d3 	.word	0x080045d3
 80045b0:	080045cb 	.word	0x080045cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b4:	f7fe fca8 	bl	8002f08 <HAL_RCC_GetPCLK1Freq>
 80045b8:	61f8      	str	r0, [r7, #28]
        break;
 80045ba:	e010      	b.n	80045de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045bc:	4b8f      	ldr	r3, [pc, #572]	@ (80047fc <UART_SetConfig+0x56c>)
 80045be:	61fb      	str	r3, [r7, #28]
        break;
 80045c0:	e00d      	b.n	80045de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045c2:	f7fe fc09 	bl	8002dd8 <HAL_RCC_GetSysClockFreq>
 80045c6:	61f8      	str	r0, [r7, #28]
        break;
 80045c8:	e009      	b.n	80045de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045ce:	61fb      	str	r3, [r7, #28]
        break;
 80045d0:	e005      	b.n	80045de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 80fb 	beq.w	80047dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	4413      	add	r3, r2
 80045f0:	69fa      	ldr	r2, [r7, #28]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d305      	bcc.n	8004602 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d903      	bls.n	800460a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004608:	e0e8      	b.n	80047dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	2200      	movs	r2, #0
 800460e:	461c      	mov	r4, r3
 8004610:	4615      	mov	r5, r2
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	f04f 0300 	mov.w	r3, #0
 800461a:	022b      	lsls	r3, r5, #8
 800461c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004620:	0222      	lsls	r2, r4, #8
 8004622:	68f9      	ldr	r1, [r7, #12]
 8004624:	6849      	ldr	r1, [r1, #4]
 8004626:	0849      	lsrs	r1, r1, #1
 8004628:	2000      	movs	r0, #0
 800462a:	4688      	mov	r8, r1
 800462c:	4681      	mov	r9, r0
 800462e:	eb12 0a08 	adds.w	sl, r2, r8
 8004632:	eb43 0b09 	adc.w	fp, r3, r9
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004644:	4650      	mov	r0, sl
 8004646:	4659      	mov	r1, fp
 8004648:	f7fb fdbe 	bl	80001c8 <__aeabi_uldivmod>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4613      	mov	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800465a:	d308      	bcc.n	800466e <UART_SetConfig+0x3de>
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004662:	d204      	bcs.n	800466e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	60da      	str	r2, [r3, #12]
 800466c:	e0b6      	b.n	80047dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004674:	e0b2      	b.n	80047dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800467e:	d15e      	bne.n	800473e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004680:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004684:	2b08      	cmp	r3, #8
 8004686:	d828      	bhi.n	80046da <UART_SetConfig+0x44a>
 8004688:	a201      	add	r2, pc, #4	@ (adr r2, 8004690 <UART_SetConfig+0x400>)
 800468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468e:	bf00      	nop
 8004690:	080046b5 	.word	0x080046b5
 8004694:	080046bd 	.word	0x080046bd
 8004698:	080046c5 	.word	0x080046c5
 800469c:	080046db 	.word	0x080046db
 80046a0:	080046cb 	.word	0x080046cb
 80046a4:	080046db 	.word	0x080046db
 80046a8:	080046db 	.word	0x080046db
 80046ac:	080046db 	.word	0x080046db
 80046b0:	080046d3 	.word	0x080046d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b4:	f7fe fc28 	bl	8002f08 <HAL_RCC_GetPCLK1Freq>
 80046b8:	61f8      	str	r0, [r7, #28]
        break;
 80046ba:	e014      	b.n	80046e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046bc:	f7fe fc3a 	bl	8002f34 <HAL_RCC_GetPCLK2Freq>
 80046c0:	61f8      	str	r0, [r7, #28]
        break;
 80046c2:	e010      	b.n	80046e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c4:	4b4d      	ldr	r3, [pc, #308]	@ (80047fc <UART_SetConfig+0x56c>)
 80046c6:	61fb      	str	r3, [r7, #28]
        break;
 80046c8:	e00d      	b.n	80046e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ca:	f7fe fb85 	bl	8002dd8 <HAL_RCC_GetSysClockFreq>
 80046ce:	61f8      	str	r0, [r7, #28]
        break;
 80046d0:	e009      	b.n	80046e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046d6:	61fb      	str	r3, [r7, #28]
        break;
 80046d8:	e005      	b.n	80046e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d077      	beq.n	80047dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	005a      	lsls	r2, r3, #1
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	085b      	lsrs	r3, r3, #1
 80046f6:	441a      	add	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	2b0f      	cmp	r3, #15
 8004706:	d916      	bls.n	8004736 <UART_SetConfig+0x4a6>
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800470e:	d212      	bcs.n	8004736 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f023 030f 	bic.w	r3, r3, #15
 8004718:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	085b      	lsrs	r3, r3, #1
 800471e:	b29b      	uxth	r3, r3
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	b29a      	uxth	r2, r3
 8004726:	8afb      	ldrh	r3, [r7, #22]
 8004728:	4313      	orrs	r3, r2
 800472a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	8afa      	ldrh	r2, [r7, #22]
 8004732:	60da      	str	r2, [r3, #12]
 8004734:	e052      	b.n	80047dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800473c:	e04e      	b.n	80047dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800473e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004742:	2b08      	cmp	r3, #8
 8004744:	d827      	bhi.n	8004796 <UART_SetConfig+0x506>
 8004746:	a201      	add	r2, pc, #4	@ (adr r2, 800474c <UART_SetConfig+0x4bc>)
 8004748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474c:	08004771 	.word	0x08004771
 8004750:	08004779 	.word	0x08004779
 8004754:	08004781 	.word	0x08004781
 8004758:	08004797 	.word	0x08004797
 800475c:	08004787 	.word	0x08004787
 8004760:	08004797 	.word	0x08004797
 8004764:	08004797 	.word	0x08004797
 8004768:	08004797 	.word	0x08004797
 800476c:	0800478f 	.word	0x0800478f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004770:	f7fe fbca 	bl	8002f08 <HAL_RCC_GetPCLK1Freq>
 8004774:	61f8      	str	r0, [r7, #28]
        break;
 8004776:	e014      	b.n	80047a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004778:	f7fe fbdc 	bl	8002f34 <HAL_RCC_GetPCLK2Freq>
 800477c:	61f8      	str	r0, [r7, #28]
        break;
 800477e:	e010      	b.n	80047a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004780:	4b1e      	ldr	r3, [pc, #120]	@ (80047fc <UART_SetConfig+0x56c>)
 8004782:	61fb      	str	r3, [r7, #28]
        break;
 8004784:	e00d      	b.n	80047a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004786:	f7fe fb27 	bl	8002dd8 <HAL_RCC_GetSysClockFreq>
 800478a:	61f8      	str	r0, [r7, #28]
        break;
 800478c:	e009      	b.n	80047a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800478e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004792:	61fb      	str	r3, [r7, #28]
        break;
 8004794:	e005      	b.n	80047a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80047a0:	bf00      	nop
    }

    if (pclk != 0U)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d019      	beq.n	80047dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	085a      	lsrs	r2, r3, #1
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	441a      	add	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	2b0f      	cmp	r3, #15
 80047c0:	d909      	bls.n	80047d6 <UART_SetConfig+0x546>
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047c8:	d205      	bcs.n	80047d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60da      	str	r2, [r3, #12]
 80047d4:	e002      	b.n	80047dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80047e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3728      	adds	r7, #40	@ 0x28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047f6:	bf00      	nop
 80047f8:	40008000 	.word	0x40008000
 80047fc:	00f42400 	.word	0x00f42400

08004800 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480c:	f003 0308 	and.w	r3, r3, #8
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01a      	beq.n	8004916 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048fe:	d10a      	bne.n	8004916 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	605a      	str	r2, [r3, #4]
  }
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b098      	sub	sp, #96	@ 0x60
 8004948:	af02      	add	r7, sp, #8
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004954:	f7fc fcf2 	bl	800133c <HAL_GetTick>
 8004958:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b08      	cmp	r3, #8
 8004966:	d12e      	bne.n	80049c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004968:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004970:	2200      	movs	r2, #0
 8004972:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f88c 	bl	8004a94 <UART_WaitOnFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d021      	beq.n	80049c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800498a:	e853 3f00 	ldrex	r3, [r3]
 800498e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004992:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004996:	653b      	str	r3, [r7, #80]	@ 0x50
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80049a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049a8:	e841 2300 	strex	r3, r2, [r1]
 80049ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1e6      	bne.n	8004982 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2220      	movs	r2, #32
 80049b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e062      	b.n	8004a8c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d149      	bne.n	8004a68 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049dc:	2200      	movs	r2, #0
 80049de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f856 	bl	8004a94 <UART_WaitOnFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d03c      	beq.n	8004a68 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	623b      	str	r3, [r7, #32]
   return(result);
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e6      	bne.n	80049ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3308      	adds	r3, #8
 8004a26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0301 	bic.w	r3, r3, #1
 8004a36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3308      	adds	r3, #8
 8004a3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a40:	61fa      	str	r2, [r7, #28]
 8004a42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a44:	69b9      	ldr	r1, [r7, #24]
 8004a46:	69fa      	ldr	r2, [r7, #28]
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e5      	bne.n	8004a20 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e011      	b.n	8004a8c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3758      	adds	r7, #88	@ 0x58
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa4:	e04f      	b.n	8004b46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aac:	d04b      	beq.n	8004b46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aae:	f7fc fc45 	bl	800133c <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d302      	bcc.n	8004ac4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e04e      	b.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d037      	beq.n	8004b46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2b80      	cmp	r3, #128	@ 0x80
 8004ada:	d034      	beq.n	8004b46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b40      	cmp	r3, #64	@ 0x40
 8004ae0:	d031      	beq.n	8004b46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d110      	bne.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2208      	movs	r2, #8
 8004af6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 f838 	bl	8004b6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2208      	movs	r2, #8
 8004b02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e029      	b.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b20:	d111      	bne.n	8004b46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 f81e 	bl	8004b6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e00f      	b.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69da      	ldr	r2, [r3, #28]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	bf0c      	ite	eq
 8004b56:	2301      	moveq	r3, #1
 8004b58:	2300      	movne	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	79fb      	ldrb	r3, [r7, #7]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d0a0      	beq.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b095      	sub	sp, #84	@ 0x54
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b94:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b96:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e6      	bne.n	8004b76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3308      	adds	r3, #8
 8004bae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	e853 3f00 	ldrex	r3, [r3]
 8004bb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	f023 0301 	bic.w	r3, r3, #1
 8004bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bd0:	e841 2300 	strex	r3, r2, [r1]
 8004bd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e5      	bne.n	8004ba8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d118      	bne.n	8004c16 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	e853 3f00 	ldrex	r3, [r3]
 8004bf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f023 0310 	bic.w	r3, r3, #16
 8004bf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c02:	61bb      	str	r3, [r7, #24]
 8004c04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c06:	6979      	ldr	r1, [r7, #20]
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	e841 2300 	strex	r3, r2, [r1]
 8004c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1e6      	bne.n	8004be4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c2a:	bf00      	nop
 8004c2c:	3754      	adds	r7, #84	@ 0x54
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f7ff fb05 	bl	8004264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c5a:	bf00      	nop
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b08f      	sub	sp, #60	@ 0x3c
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c6e:	2b21      	cmp	r3, #33	@ 0x21
 8004c70:	d14c      	bne.n	8004d0c <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d132      	bne.n	8004ce4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c92:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c9e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e6      	bne.n	8004c7e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	e853 3f00 	ldrex	r3, [r3]
 8004cbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd2:	6979      	ldr	r1, [r7, #20]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	e841 2300 	strex	r3, r2, [r1]
 8004cda:	613b      	str	r3, [r7, #16]
   return(result);
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1e6      	bne.n	8004cb0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004ce2:	e013      	b.n	8004d0c <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ce8:	781a      	ldrb	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004d0c:	bf00      	nop
 8004d0e:	373c      	adds	r7, #60	@ 0x3c
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b091      	sub	sp, #68	@ 0x44
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d24:	2b21      	cmp	r3, #33	@ 0x21
 8004d26:	d151      	bne.n	8004dcc <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d132      	bne.n	8004d9a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	623b      	str	r3, [r7, #32]
   return(result);
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d52:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d54:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e6      	bne.n	8004d34 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	461a      	mov	r2, r3
 8004d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	69b9      	ldr	r1, [r7, #24]
 8004d8a:	69fa      	ldr	r2, [r7, #28]
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	617b      	str	r3, [r7, #20]
   return(result);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e6      	bne.n	8004d66 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004d98:	e018      	b.n	8004dcc <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004da2:	881a      	ldrh	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dac:	b292      	uxth	r2, r2
 8004dae:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004db4:	1c9a      	adds	r2, r3, #2
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004dcc:	bf00      	nop
 8004dce:	3744      	adds	r7, #68	@ 0x44
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004df4:	61fb      	str	r3, [r7, #28]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	61bb      	str	r3, [r7, #24]
 8004e00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6979      	ldr	r1, [r7, #20]
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e6      	bne.n	8004de0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fb fefe 	bl	8000c20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e24:	bf00      	nop
 8004e26:	3720      	adds	r7, #32
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e40:	b084      	sub	sp, #16
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b084      	sub	sp, #16
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
 8004e4a:	f107 001c 	add.w	r0, r7, #28
 8004e4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fa68 	bl	8005334 <USB_CoreReset>
 8004e64:	4603      	mov	r3, r0
 8004e66:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004e68:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d106      	bne.n	8004e7e <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e7c:	e005      	b.n	8004e8a <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e82:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e96:	b004      	add	sp, #16
 8004e98:	4770      	bx	lr

08004e9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f023 0201 	bic.w	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d115      	bne.n	8004f0a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004eea:	200a      	movs	r0, #10
 8004eec:	f7fc fa32 	bl	8001354 <HAL_Delay>
      ms += 10U;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	330a      	adds	r3, #10
 8004ef4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fa0e 	bl	8005318 <USB_GetMode>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d01e      	beq.n	8004f40 <USB_SetCurrentMode+0x84>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f06:	d9f0      	bls.n	8004eea <USB_SetCurrentMode+0x2e>
 8004f08:	e01a      	b.n	8004f40 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d115      	bne.n	8004f3c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f1c:	200a      	movs	r0, #10
 8004f1e:	f7fc fa19 	bl	8001354 <HAL_Delay>
      ms += 10U;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	330a      	adds	r3, #10
 8004f26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f9f5 	bl	8005318 <USB_GetMode>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d005      	beq.n	8004f40 <USB_SetCurrentMode+0x84>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f38:	d9f0      	bls.n	8004f1c <USB_SetCurrentMode+0x60>
 8004f3a:	e001      	b.n	8004f40 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e005      	b.n	8004f4c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2bc8      	cmp	r3, #200	@ 0xc8
 8004f44:	d101      	bne.n	8004f4a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f54:	b084      	sub	sp, #16
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b086      	sub	sp, #24
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f6e:	2300      	movs	r3, #0
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	e009      	b.n	8004f88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	3340      	adds	r3, #64	@ 0x40
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	2200      	movs	r2, #0
 8004f80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	3301      	adds	r3, #1
 8004f86:	613b      	str	r3, [r7, #16]
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	2b0e      	cmp	r3, #14
 8004f8c:	d9f2      	bls.n	8004f74 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f8e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d11c      	bne.n	8004fd0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fa4:	f043 0302 	orr.w	r3, r3, #2
 8004fa8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fae:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	e005      	b.n	8004fdc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004fe8:	2103      	movs	r1, #3
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f95a 	bl	80052a4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ff0:	2110      	movs	r1, #16
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f8f6 	bl	80051e4 <USB_FlushTxFifo>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f920 	bl	8005248 <USB_FlushRxFifo>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005018:	461a      	mov	r2, r3
 800501a:	2300      	movs	r3, #0
 800501c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005024:	461a      	mov	r2, r3
 8005026:	2300      	movs	r3, #0
 8005028:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005030:	461a      	mov	r2, r3
 8005032:	2300      	movs	r3, #0
 8005034:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005036:	2300      	movs	r3, #0
 8005038:	613b      	str	r3, [r7, #16]
 800503a:	e043      	b.n	80050c4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800504e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005052:	d118      	bne.n	8005086 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10a      	bne.n	8005070 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005066:	461a      	mov	r2, r3
 8005068:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	e013      	b.n	8005098 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800507c:	461a      	mov	r2, r3
 800507e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	e008      	b.n	8005098 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4413      	add	r3, r2
 800508e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005092:	461a      	mov	r2, r3
 8005094:	2300      	movs	r3, #0
 8005096:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050a4:	461a      	mov	r2, r3
 80050a6:	2300      	movs	r3, #0
 80050a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050b6:	461a      	mov	r2, r3
 80050b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80050bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	3301      	adds	r3, #1
 80050c2:	613b      	str	r3, [r7, #16]
 80050c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80050c8:	461a      	mov	r2, r3
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d3b5      	bcc.n	800503c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050d0:	2300      	movs	r3, #0
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	e043      	b.n	800515e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050ec:	d118      	bne.n	8005120 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10a      	bne.n	800510a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005100:	461a      	mov	r2, r3
 8005102:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005106:	6013      	str	r3, [r2, #0]
 8005108:	e013      	b.n	8005132 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005116:	461a      	mov	r2, r3
 8005118:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	e008      	b.n	8005132 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800512c:	461a      	mov	r2, r3
 800512e:	2300      	movs	r3, #0
 8005130:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800513e:	461a      	mov	r2, r3
 8005140:	2300      	movs	r3, #0
 8005142:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005150:	461a      	mov	r2, r3
 8005152:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005156:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	3301      	adds	r3, #1
 800515c:	613b      	str	r3, [r7, #16]
 800515e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005162:	461a      	mov	r2, r3
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	4293      	cmp	r3, r2
 8005168:	d3b5      	bcc.n	80050d6 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005178:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800517c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800518a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	f043 0210 	orr.w	r2, r3, #16
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699a      	ldr	r2, [r3, #24]
 800519c:	4b10      	ldr	r3, [pc, #64]	@ (80051e0 <USB_DevInit+0x28c>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d005      	beq.n	80051b8 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f043 0208 	orr.w	r2, r3, #8
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051b8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d107      	bne.n	80051d0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051c8:	f043 0304 	orr.w	r3, r3, #4
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3718      	adds	r7, #24
 80051d6:	46bd      	mov	sp, r7
 80051d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051dc:	b004      	add	sp, #16
 80051de:	4770      	bx	lr
 80051e0:	803c3800 	.word	0x803c3800

080051e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3301      	adds	r3, #1
 80051f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051fe:	d901      	bls.n	8005204 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e01b      	b.n	800523c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	daf2      	bge.n	80051f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	019b      	lsls	r3, r3, #6
 8005214:	f043 0220 	orr.w	r2, r3, #32
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	3301      	adds	r3, #1
 8005220:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005228:	d901      	bls.n	800522e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e006      	b.n	800523c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f003 0320 	and.w	r3, r3, #32
 8005236:	2b20      	cmp	r3, #32
 8005238:	d0f0      	beq.n	800521c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	3301      	adds	r3, #1
 8005258:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005260:	d901      	bls.n	8005266 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e018      	b.n	8005298 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	daf2      	bge.n	8005254 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2210      	movs	r2, #16
 8005276:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	3301      	adds	r3, #1
 800527c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005284:	d901      	bls.n	800528a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e006      	b.n	8005298 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0310 	and.w	r3, r3, #16
 8005292:	2b10      	cmp	r3, #16
 8005294:	d0f0      	beq.n	8005278 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	78fb      	ldrb	r3, [r7, #3]
 80052be:	68f9      	ldr	r1, [r7, #12]
 80052c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052c4:	4313      	orrs	r3, r2
 80052c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b085      	sub	sp, #20
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80052f0:	f023 0303 	bic.w	r3, r3, #3
 80052f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005304:	f043 0302 	orr.w	r3, r3, #2
 8005308:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	f003 0301 	and.w	r3, r3, #1
}
 8005328:	4618      	mov	r0, r3
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3301      	adds	r3, #1
 8005344:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800534c:	d901      	bls.n	8005352 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e01b      	b.n	800538a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	2b00      	cmp	r3, #0
 8005358:	daf2      	bge.n	8005340 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f043 0201 	orr.w	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3301      	adds	r3, #1
 800536e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005376:	d901      	bls.n	800537c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e006      	b.n	800538a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b01      	cmp	r3, #1
 8005386:	d0f0      	beq.n	800536a <USB_CoreReset+0x36>

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <memset>:
 8005396:	4402      	add	r2, r0
 8005398:	4603      	mov	r3, r0
 800539a:	4293      	cmp	r3, r2
 800539c:	d100      	bne.n	80053a0 <memset+0xa>
 800539e:	4770      	bx	lr
 80053a0:	f803 1b01 	strb.w	r1, [r3], #1
 80053a4:	e7f9      	b.n	800539a <memset+0x4>
	...

080053a8 <__libc_init_array>:
 80053a8:	b570      	push	{r4, r5, r6, lr}
 80053aa:	4d0d      	ldr	r5, [pc, #52]	@ (80053e0 <__libc_init_array+0x38>)
 80053ac:	4c0d      	ldr	r4, [pc, #52]	@ (80053e4 <__libc_init_array+0x3c>)
 80053ae:	1b64      	subs	r4, r4, r5
 80053b0:	10a4      	asrs	r4, r4, #2
 80053b2:	2600      	movs	r6, #0
 80053b4:	42a6      	cmp	r6, r4
 80053b6:	d109      	bne.n	80053cc <__libc_init_array+0x24>
 80053b8:	4d0b      	ldr	r5, [pc, #44]	@ (80053e8 <__libc_init_array+0x40>)
 80053ba:	4c0c      	ldr	r4, [pc, #48]	@ (80053ec <__libc_init_array+0x44>)
 80053bc:	f000 f818 	bl	80053f0 <_init>
 80053c0:	1b64      	subs	r4, r4, r5
 80053c2:	10a4      	asrs	r4, r4, #2
 80053c4:	2600      	movs	r6, #0
 80053c6:	42a6      	cmp	r6, r4
 80053c8:	d105      	bne.n	80053d6 <__libc_init_array+0x2e>
 80053ca:	bd70      	pop	{r4, r5, r6, pc}
 80053cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d0:	4798      	blx	r3
 80053d2:	3601      	adds	r6, #1
 80053d4:	e7ee      	b.n	80053b4 <__libc_init_array+0xc>
 80053d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053da:	4798      	blx	r3
 80053dc:	3601      	adds	r6, #1
 80053de:	e7f2      	b.n	80053c6 <__libc_init_array+0x1e>
 80053e0:	08005458 	.word	0x08005458
 80053e4:	08005458 	.word	0x08005458
 80053e8:	08005458 	.word	0x08005458
 80053ec:	0800545c 	.word	0x0800545c

080053f0 <_init>:
 80053f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f2:	bf00      	nop
 80053f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f6:	bc08      	pop	{r3}
 80053f8:	469e      	mov	lr, r3
 80053fa:	4770      	bx	lr

080053fc <_fini>:
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fe:	bf00      	nop
 8005400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005402:	bc08      	pop	{r3}
 8005404:	469e      	mov	lr, r3
 8005406:	4770      	bx	lr
