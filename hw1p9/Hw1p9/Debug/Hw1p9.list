
Hw1p9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a94  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08007c24  08007c24  00008c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ce8  08007ce8  00009034  2**0
                  CONTENTS
  4 .ARM          00000008  08007ce8  08007ce8  00008ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cf0  08007cf0  00009034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cf0  08007cf0  00008cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007cf4  08007cf4  00008cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08007cf8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020d4  20000034  08007d2c  00009034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002108  08007d2c  00009108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009034  2**0
                  CONTENTS, READONLY
 12 .debug_info   000267aa  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004af5  00000000  00000000  0002f80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002318  00000000  00000000  00034308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b66  00000000  00000000  00036620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000563a  00000000  00000000  00038186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000281da  00000000  00000000  0003d7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010888c  00000000  00000000  0006599a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016e226  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097e4  00000000  00000000  0016e26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00177a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000034 	.word	0x20000034
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c0c 	.word	0x08007c0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000038 	.word	0x20000038
 80001cc:	08007c0c 	.word	0x08007c0c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 ffcf 	bl	8001466 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f840 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 fa08 	bl	80008e0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004d0:	f000 f89e 	bl	8000610 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004d4:	f000 f8d4 	bl	8000680 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004d8:	f000 f910 	bl	80006fc <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004dc:	f000 f934 	bl	8000748 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 f970 	bl	80007c4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004e4:	f000 f99e 	bl	8000824 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004e8:	f000 f9cc 	bl	8000884 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004ec:	f004 fe22 	bl	8005134 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000528 <main+0x68>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	480d      	ldr	r0, [pc, #52]	@ (800052c <main+0x6c>)
 80004f6:	f004 fe67 	bl	80051c8 <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000530 <main+0x70>)
 80004fe:	6013      	str	r3, [r2, #0]
  task3handle = osThreadNew(myTask03, NULL, &task3_attributes);
 8000500:	4a0c      	ldr	r2, [pc, #48]	@ (8000534 <main+0x74>)
 8000502:	2100      	movs	r1, #0
 8000504:	480c      	ldr	r0, [pc, #48]	@ (8000538 <main+0x78>)
 8000506:	f004 fe5f 	bl	80051c8 <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a0b      	ldr	r2, [pc, #44]	@ (800053c <main+0x7c>)
 800050e:	6013      	str	r3, [r2, #0]
  task2handle = osThreadNew(myTask02, NULL, &task2_attributes);
 8000510:	4a0b      	ldr	r2, [pc, #44]	@ (8000540 <main+0x80>)
 8000512:	2100      	movs	r1, #0
 8000514:	480b      	ldr	r0, [pc, #44]	@ (8000544 <main+0x84>)
 8000516:	f004 fe57 	bl	80051c8 <osThreadNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a0a      	ldr	r2, [pc, #40]	@ (8000548 <main+0x88>)
 800051e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000520:	f004 fe2c 	bl	800517c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <main+0x64>
 8000528:	08007c58 	.word	0x08007c58
 800052c:	08000c9d 	.word	0x08000c9d
 8000530:	20000778 	.word	0x20000778
 8000534:	20000000 	.word	0x20000000
 8000538:	08000c79 	.word	0x08000c79
 800053c:	20000780 	.word	0x20000780
 8000540:	08007c7c 	.word	0x08007c7c
 8000544:	08000c45 	.word	0x08000c45
 8000548:	20000784 	.word	0x20000784

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b096      	sub	sp, #88	@ 0x58
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	2244      	movs	r2, #68	@ 0x44
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f007 fb1c 	bl	8007b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	463b      	mov	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800056e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000572:	f001 fe45 	bl	8002200 <HAL_PWREx_ControlVoltageScaling>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800057c:	f000 fbb8 	bl	8000cf0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000580:	f001 fe20 	bl	80021c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000584:	4b21      	ldr	r3, [pc, #132]	@ (800060c <SystemClock_Config+0xc0>)
 8000586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800058a:	4a20      	ldr	r2, [pc, #128]	@ (800060c <SystemClock_Config+0xc0>)
 800058c:	f023 0318 	bic.w	r3, r3, #24
 8000590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000594:	2314      	movs	r3, #20
 8000596:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005a4:	2360      	movs	r3, #96	@ 0x60
 80005a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2302      	movs	r3, #2
 80005aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005ac:	2301      	movs	r3, #1
 80005ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005b0:	2301      	movs	r3, #1
 80005b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005b4:	2328      	movs	r3, #40	@ 0x28
 80005b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005b8:	2307      	movs	r3, #7
 80005ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 ff3b 	bl	8002444 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005d4:	f000 fb8c 	bl	8000cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	2303      	movs	r3, #3
 80005de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	2104      	movs	r1, #4
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 fb03 	bl	8002bfc <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005fc:	f000 fb78 	bl	8000cf0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000600:	f003 f83c 	bl	800367c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000604:	bf00      	nop
 8000606:	3758      	adds	r7, #88	@ 0x58
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40021000 	.word	0x40021000

08000610 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000614:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <MX_DFSDM1_Init+0x68>)
 8000616:	4a19      	ldr	r2, [pc, #100]	@ (800067c <MX_DFSDM1_Init+0x6c>)
 8000618:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800061a:	4b17      	ldr	r3, [pc, #92]	@ (8000678 <MX_DFSDM1_Init+0x68>)
 800061c:	2201      	movs	r2, #1
 800061e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000620:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <MX_DFSDM1_Init+0x68>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000626:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <MX_DFSDM1_Init+0x68>)
 8000628:	2202      	movs	r2, #2
 800062a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800062c:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <MX_DFSDM1_Init+0x68>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000632:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <MX_DFSDM1_Init+0x68>)
 8000634:	2200      	movs	r2, #0
 8000636:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000638:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <MX_DFSDM1_Init+0x68>)
 800063a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800063e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000640:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <MX_DFSDM1_Init+0x68>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000646:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <MX_DFSDM1_Init+0x68>)
 8000648:	2204      	movs	r2, #4
 800064a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800064c:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <MX_DFSDM1_Init+0x68>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000652:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <MX_DFSDM1_Init+0x68>)
 8000654:	2201      	movs	r2, #1
 8000656:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000658:	4b07      	ldr	r3, [pc, #28]	@ (8000678 <MX_DFSDM1_Init+0x68>)
 800065a:	2200      	movs	r2, #0
 800065c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800065e:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <MX_DFSDM1_Init+0x68>)
 8000660:	2200      	movs	r2, #0
 8000662:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000664:	4804      	ldr	r0, [pc, #16]	@ (8000678 <MX_DFSDM1_Init+0x68>)
 8000666:	f001 f83d 	bl	80016e4 <HAL_DFSDM_ChannelInit>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000670:	f000 fb3e 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000050 	.word	0x20000050
 800067c:	40016020 	.word	0x40016020

08000680 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000684:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <MX_I2C2_Init+0x74>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	@ (80006f8 <MX_I2C2_Init+0x78>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800068a:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <MX_I2C2_Init+0x74>)
 800068c:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000690:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000692:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <MX_I2C2_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000698:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <MX_I2C2_Init+0x74>)
 800069a:	2201      	movs	r2, #1
 800069c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069e:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <MX_I2C2_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006a4:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <MX_I2C2_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006aa:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <MX_I2C2_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b0:	4b10      	ldr	r3, [pc, #64]	@ (80006f4 <MX_I2C2_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_I2C2_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006bc:	480d      	ldr	r0, [pc, #52]	@ (80006f4 <MX_I2C2_Init+0x74>)
 80006be:	f001 fb1c 	bl	8001cfa <HAL_I2C_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006c8:	f000 fb12 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006cc:	2100      	movs	r1, #0
 80006ce:	4809      	ldr	r0, [pc, #36]	@ (80006f4 <MX_I2C2_Init+0x74>)
 80006d0:	f001 fbae 	bl	8001e30 <HAL_I2CEx_ConfigAnalogFilter>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80006da:	f000 fb09 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006de:	2100      	movs	r1, #0
 80006e0:	4804      	ldr	r0, [pc, #16]	@ (80006f4 <MX_I2C2_Init+0x74>)
 80006e2:	f001 fbf0 	bl	8001ec6 <HAL_I2CEx_ConfigDigitalFilter>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80006ec:	f000 fb00 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000088 	.word	0x20000088
 80006f8:	40005800 	.word	0x40005800

080006fc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000700:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <MX_QUADSPI_Init+0x44>)
 8000702:	4a10      	ldr	r2, [pc, #64]	@ (8000744 <MX_QUADSPI_Init+0x48>)
 8000704:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <MX_QUADSPI_Init+0x44>)
 8000708:	2202      	movs	r2, #2
 800070a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800070c:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <MX_QUADSPI_Init+0x44>)
 800070e:	2204      	movs	r2, #4
 8000710:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <MX_QUADSPI_Init+0x44>)
 8000714:	2210      	movs	r2, #16
 8000716:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000718:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <MX_QUADSPI_Init+0x44>)
 800071a:	2217      	movs	r2, #23
 800071c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800071e:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <MX_QUADSPI_Init+0x44>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <MX_QUADSPI_Init+0x44>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	@ (8000740 <MX_QUADSPI_Init+0x44>)
 800072c:	f001 fdce 	bl	80022cc <HAL_QSPI_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000736:	f000 fadb 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200000dc 	.word	0x200000dc
 8000744:	a0001000 	.word	0xa0001000

08000748 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800074c:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <MX_SPI3_Init+0x74>)
 800074e:	4a1c      	ldr	r2, [pc, #112]	@ (80007c0 <MX_SPI3_Init+0x78>)
 8000750:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000752:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <MX_SPI3_Init+0x74>)
 8000754:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000758:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800075a:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <MX_SPI3_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000760:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <MX_SPI3_Init+0x74>)
 8000762:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000766:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000768:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <MX_SPI3_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800076e:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <MX_SPI3_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000774:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_SPI3_Init+0x74>)
 8000776:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800077a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_SPI3_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_SPI3_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_SPI3_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_SPI3_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_SPI3_Init+0x74>)
 8000796:	2207      	movs	r2, #7
 8000798:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_SPI3_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_SPI3_Init+0x74>)
 80007a2:	2208      	movs	r2, #8
 80007a4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_SPI3_Init+0x74>)
 80007a8:	f003 f94a 	bl	8003a40 <HAL_SPI_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007b2:	f000 fa9d 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000120 	.word	0x20000120
 80007c0:	40003c00 	.word	0x40003c00

080007c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c8:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_USART1_UART_Init+0x58>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	@ (8000820 <MX_USART1_UART_Init+0x5c>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ce:	4b13      	ldr	r3, [pc, #76]	@ (800081c <MX_USART1_UART_Init+0x58>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b11      	ldr	r3, [pc, #68]	@ (800081c <MX_USART1_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <MX_USART1_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <MX_USART1_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <MX_USART1_UART_Init+0x58>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <MX_USART1_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b09      	ldr	r3, [pc, #36]	@ (800081c <MX_USART1_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	@ (800081c <MX_USART1_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <MX_USART1_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	@ (800081c <MX_USART1_UART_Init+0x58>)
 8000808:	f003 fc82 	bl	8004110 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000812:	f000 fa6d 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000184 	.word	0x20000184
 8000820:	40013800 	.word	0x40013800

08000824 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000828:	4b14      	ldr	r3, [pc, #80]	@ (800087c <MX_USART3_UART_Init+0x58>)
 800082a:	4a15      	ldr	r2, [pc, #84]	@ (8000880 <MX_USART3_UART_Init+0x5c>)
 800082c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800082e:	4b13      	ldr	r3, [pc, #76]	@ (800087c <MX_USART3_UART_Init+0x58>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b11      	ldr	r3, [pc, #68]	@ (800087c <MX_USART3_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <MX_USART3_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <MX_USART3_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <MX_USART3_UART_Init+0x58>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <MX_USART3_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b09      	ldr	r3, [pc, #36]	@ (800087c <MX_USART3_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <MX_USART3_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <MX_USART3_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	@ (800087c <MX_USART3_UART_Init+0x58>)
 8000868:	f003 fc52 	bl	8004110 <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000872:	f000 fa3d 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2000020c 	.word	0x2000020c
 8000880:	40004800 	.word	0x40004800

08000884 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000888:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800088e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000892:	2206      	movs	r2, #6
 8000894:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000898:	2202      	movs	r2, #2
 800089a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089e:	2202      	movs	r2, #2
 80008a0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c8:	f001 fb49 	bl	8001f5e <HAL_PCD_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008d2:	f000 fa0d 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000294 	.word	0x20000294

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	@ 0x28
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008f6:	4bbd      	ldr	r3, [pc, #756]	@ (8000bec <MX_GPIO_Init+0x30c>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	4abc      	ldr	r2, [pc, #752]	@ (8000bec <MX_GPIO_Init+0x30c>)
 80008fc:	f043 0310 	orr.w	r3, r3, #16
 8000900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000902:	4bba      	ldr	r3, [pc, #744]	@ (8000bec <MX_GPIO_Init+0x30c>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	f003 0310 	and.w	r3, r3, #16
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	4bb7      	ldr	r3, [pc, #732]	@ (8000bec <MX_GPIO_Init+0x30c>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	4ab6      	ldr	r2, [pc, #728]	@ (8000bec <MX_GPIO_Init+0x30c>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091a:	4bb4      	ldr	r3, [pc, #720]	@ (8000bec <MX_GPIO_Init+0x30c>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4bb1      	ldr	r3, [pc, #708]	@ (8000bec <MX_GPIO_Init+0x30c>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092a:	4ab0      	ldr	r2, [pc, #704]	@ (8000bec <MX_GPIO_Init+0x30c>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000932:	4bae      	ldr	r3, [pc, #696]	@ (8000bec <MX_GPIO_Init+0x30c>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	4bab      	ldr	r3, [pc, #684]	@ (8000bec <MX_GPIO_Init+0x30c>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000942:	4aaa      	ldr	r2, [pc, #680]	@ (8000bec <MX_GPIO_Init+0x30c>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800094a:	4ba8      	ldr	r3, [pc, #672]	@ (8000bec <MX_GPIO_Init+0x30c>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000956:	4ba5      	ldr	r3, [pc, #660]	@ (8000bec <MX_GPIO_Init+0x30c>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095a:	4aa4      	ldr	r2, [pc, #656]	@ (8000bec <MX_GPIO_Init+0x30c>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000962:	4ba2      	ldr	r3, [pc, #648]	@ (8000bec <MX_GPIO_Init+0x30c>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000974:	489e      	ldr	r0, [pc, #632]	@ (8000bf0 <MX_GPIO_Init+0x310>)
 8000976:	f001 f96b 	bl	8001c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000980:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000984:	f001 f964 	bl	8001c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000988:	2200      	movs	r2, #0
 800098a:	f24f 0114 	movw	r1, #61460	@ 0xf014
 800098e:	4899      	ldr	r0, [pc, #612]	@ (8000bf4 <MX_GPIO_Init+0x314>)
 8000990:	f001 f95e 	bl	8001c50 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f241 0181 	movw	r1, #4225	@ 0x1081
 800099a:	4897      	ldr	r0, [pc, #604]	@ (8000bf8 <MX_GPIO_Init+0x318>)
 800099c:	f001 f958 	bl	8001c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009a6:	4894      	ldr	r0, [pc, #592]	@ (8000bf8 <MX_GPIO_Init+0x318>)
 80009a8:	f001 f952 	bl	8001c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80009b2:	4892      	ldr	r0, [pc, #584]	@ (8000bfc <MX_GPIO_Init+0x31c>)
 80009b4:	f001 f94c 	bl	8001c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2120      	movs	r1, #32
 80009bc:	488d      	ldr	r0, [pc, #564]	@ (8000bf4 <MX_GPIO_Init+0x314>)
 80009be:	f001 f947 	bl	8001c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2101      	movs	r1, #1
 80009c6:	488a      	ldr	r0, [pc, #552]	@ (8000bf0 <MX_GPIO_Init+0x310>)
 80009c8:	f001 f942 	bl	8001c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80009cc:	f240 1315 	movw	r3, #277	@ 0x115
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	4882      	ldr	r0, [pc, #520]	@ (8000bf0 <MX_GPIO_Init+0x310>)
 80009e6:	f000 ff89 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80009ea:	236a      	movs	r3, #106	@ 0x6a
 80009ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	487c      	ldr	r0, [pc, #496]	@ (8000bf0 <MX_GPIO_Init+0x310>)
 8000a00:	f000 ff7c 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000a04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a0a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4878      	ldr	r0, [pc, #480]	@ (8000bfc <MX_GPIO_Init+0x31c>)
 8000a1c:	f000 ff6e 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000a20:	233f      	movs	r3, #63	@ 0x3f
 8000a22:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a24:	230b      	movs	r3, #11
 8000a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	4872      	ldr	r0, [pc, #456]	@ (8000bfc <MX_GPIO_Init+0x31c>)
 8000a34:	f000 ff62 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a56:	f000 ff51 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a5a:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a76:	f000 ff41 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000a7a:	2308      	movs	r3, #8
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a98:	f000 ff30 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000a9c:	2310      	movs	r3, #16
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000aa0:	230b      	movs	r3, #11
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab2:	f000 ff23 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000ab6:	23e0      	movs	r3, #224	@ 0xe0
 8000ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad4:	f000 ff12 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000adc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	4841      	ldr	r0, [pc, #260]	@ (8000bf4 <MX_GPIO_Init+0x314>)
 8000aee:	f000 ff05 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000af2:	2302      	movs	r3, #2
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000af6:	230b      	movs	r3, #11
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	483b      	ldr	r0, [pc, #236]	@ (8000bf4 <MX_GPIO_Init+0x314>)
 8000b06:	f000 fef9 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b0a:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000b0e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4834      	ldr	r0, [pc, #208]	@ (8000bf4 <MX_GPIO_Init+0x314>)
 8000b24:	f000 feea 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b28:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000b2c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b2e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	482e      	ldr	r0, [pc, #184]	@ (8000bf8 <MX_GPIO_Init+0x318>)
 8000b40:	f000 fedc 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b44:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4826      	ldr	r0, [pc, #152]	@ (8000bf8 <MX_GPIO_Init+0x318>)
 8000b5e:	f000 fecd 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b62:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4820      	ldr	r0, [pc, #128]	@ (8000bfc <MX_GPIO_Init+0x31c>)
 8000b7c:	f000 febe 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000b80:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b86:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	4819      	ldr	r0, [pc, #100]	@ (8000bfc <MX_GPIO_Init+0x31c>)
 8000b98:	f000 feb0 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bac:	2305      	movs	r3, #5
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4810      	ldr	r0, [pc, #64]	@ (8000bf8 <MX_GPIO_Init+0x318>)
 8000bb8:	f000 fea0 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000bbc:	2378      	movs	r3, #120	@ 0x78
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bcc:	2307      	movs	r3, #7
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4808      	ldr	r0, [pc, #32]	@ (8000bf8 <MX_GPIO_Init+0x318>)
 8000bd8:	f000 fe90 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000bdc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be2:	2312      	movs	r3, #18
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e00a      	b.n	8000c00 <MX_GPIO_Init+0x320>
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	48001000 	.word	0x48001000
 8000bf4:	48000400 	.word	0x48000400
 8000bf8:	48000c00 	.word	0x48000c00
 8000bfc:	48000800 	.word	0x48000800
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c06:	2304      	movs	r3, #4
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480b      	ldr	r0, [pc, #44]	@ (8000c40 <MX_GPIO_Init+0x360>)
 8000c12:	f000 fe73 	bl	80018fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2105      	movs	r1, #5
 8000c1a:	2017      	movs	r0, #23
 8000c1c:	f000 fd38 	bl	8001690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c20:	2017      	movs	r0, #23
 8000c22:	f000 fd51 	bl	80016c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2105      	movs	r1, #5
 8000c2a:	2028      	movs	r0, #40	@ 0x28
 8000c2c:	f000 fd30 	bl	8001690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c30:	2028      	movs	r0, #40	@ 0x28
 8000c32:	f000 fd49 	bl	80016c8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c36:	bf00      	nop
 8000c38:	3728      	adds	r7, #40	@ 0x28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	48000400 	.word	0x48000400

08000c44 <myTask02>:

/* USER CODE BEGIN 4 */
void myTask02(void *arguement){
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	  for(;;)
	  {
		if (tick==0){
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <myTask02+0x2c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d106      	bne.n	8000c62 <myTask02+0x1e>
			tick=1;
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <myTask02+0x2c>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	601a      	str	r2, [r3, #0]
			task3_attributes.priority=(osPriority_t) abv;
 8000c5a:	2220      	movs	r2, #32
 8000c5c:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <myTask02+0x30>)
 8000c5e:	619a      	str	r2, [r3, #24]
 8000c60:	e7f4      	b.n	8000c4c <myTask02+0x8>
		}
		else{
			tick=0;
 8000c62:	4b03      	ldr	r3, [pc, #12]	@ (8000c70 <myTask02+0x2c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
			task3_attributes.priority=(osPriority_t) norm;
 8000c68:	2218      	movs	r2, #24
 8000c6a:	4b02      	ldr	r3, [pc, #8]	@ (8000c74 <myTask02+0x30>)
 8000c6c:	619a      	str	r2, [r3, #24]
		if (tick==0){
 8000c6e:	e7ed      	b.n	8000c4c <myTask02+0x8>
 8000c70:	2000077c 	.word	0x2000077c
 8000c74:	20000000 	.word	0x20000000

08000c78 <myTask03>:
	  }



}
void myTask03(void *arguement){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	  for(;;)
	  {
		HAL_GPIO_TogglePin (LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin);
 8000c80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c84:	4804      	ldr	r0, [pc, #16]	@ (8000c98 <myTask03+0x20>)
 8000c86:	f000 fffb 	bl	8001c80 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000c8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c8e:	f000 fc23 	bl	80014d8 <HAL_Delay>
		HAL_GPIO_TogglePin (LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin);
 8000c92:	bf00      	nop
 8000c94:	e7f4      	b.n	8000c80 <myTask03+0x8>
 8000c96:	bf00      	nop
 8000c98:	48000800 	.word	0x48000800

08000c9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14);
 8000ca4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ca8:	4806      	ldr	r0, [pc, #24]	@ (8000cc4 <StartDefaultTask+0x28>)
 8000caa:	f000 ffe9 	bl	8001c80 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_3);
 8000cae:	2108      	movs	r1, #8
 8000cb0:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <StartDefaultTask+0x2c>)
 8000cb2:	f000 ffe5 	bl	8001c80 <HAL_GPIO_TogglePin>
	//HAL_GPIO_TogglePin (LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin);
    HAL_Delay(1000);
 8000cb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cba:	f000 fc0d 	bl	80014d8 <HAL_Delay>
	HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14);
 8000cbe:	bf00      	nop
 8000cc0:	e7f0      	b.n	8000ca4 <StartDefaultTask+0x8>
 8000cc2:	bf00      	nop
 8000cc4:	48000400 	.word	0x48000400
 8000cc8:	48001000 	.word	0x48001000

08000ccc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a04      	ldr	r2, [pc, #16]	@ (8000cec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d101      	bne.n	8000ce2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cde:	f000 fbdb 	bl	8001498 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40001000 	.word	0x40001000

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <Error_Handler+0x8>

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d06:	4a10      	ldr	r2, [pc, #64]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d24:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d26:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	210f      	movs	r1, #15
 8000d36:	f06f 0001 	mvn.w	r0, #1
 8000d3a:	f000 fca9 	bl	8001690 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000

08000d4c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b0ac      	sub	sp, #176	@ 0xb0
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2288      	movs	r2, #136	@ 0x88
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f006 ff13 	bl	8007b98 <memset>
  if(DFSDM1_Init == 0)
 8000d72:	4b25      	ldr	r3, [pc, #148]	@ (8000e08 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d142      	bne.n	8000e00 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000d7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d7e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 f98c 	bl	80030a8 <HAL_RCCEx_PeriphCLKConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000d96:	f7ff ffab 	bl	8000cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d9e:	4a1b      	ldr	r2, [pc, #108]	@ (8000e0c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000da0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000da4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000da6:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000daa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db2:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db6:	4a15      	ldr	r2, [pc, #84]	@ (8000e0c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000db8:	f043 0310 	orr.w	r3, r3, #16
 8000dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dbe:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc2:	f003 0310 	and.w	r3, r3, #16
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000dca:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000dce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000de4:	2306      	movs	r3, #6
 8000de6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dee:	4619      	mov	r1, r3
 8000df0:	4807      	ldr	r0, [pc, #28]	@ (8000e10 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000df2:	f000 fd83 	bl	80018fc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000df6:	4b04      	ldr	r3, [pc, #16]	@ (8000e08 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	4a02      	ldr	r2, [pc, #8]	@ (8000e08 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000dfe:	6013      	str	r3, [r2, #0]
  }

}
 8000e00:	bf00      	nop
 8000e02:	37b0      	adds	r7, #176	@ 0xb0
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000788 	.word	0x20000788
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	48001000 	.word	0x48001000

08000e14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b0ac      	sub	sp, #176	@ 0xb0
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2288      	movs	r2, #136	@ 0x88
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f006 feaf 	bl	8007b98 <memset>
  if(hi2c->Instance==I2C2)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a21      	ldr	r2, [pc, #132]	@ (8000ec4 <HAL_I2C_MspInit+0xb0>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d13b      	bne.n	8000ebc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e44:	2380      	movs	r3, #128	@ 0x80
 8000e46:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4618      	mov	r0, r3
 8000e52:	f002 f929 	bl	80030a8 <HAL_RCCEx_PeriphCLKConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e5c:	f7ff ff48 	bl	8000cf0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e60:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <HAL_I2C_MspInit+0xb4>)
 8000e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e64:	4a18      	ldr	r2, [pc, #96]	@ (8000ec8 <HAL_I2C_MspInit+0xb4>)
 8000e66:	f043 0302 	orr.w	r3, r3, #2
 8000e6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ec8 <HAL_I2C_MspInit+0xb4>)
 8000e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000e78:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e80:	2312      	movs	r3, #18
 8000e82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e92:	2304      	movs	r3, #4
 8000e94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e98:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480b      	ldr	r0, [pc, #44]	@ (8000ecc <HAL_I2C_MspInit+0xb8>)
 8000ea0:	f000 fd2c 	bl	80018fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ea4:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <HAL_I2C_MspInit+0xb4>)
 8000ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea8:	4a07      	ldr	r2, [pc, #28]	@ (8000ec8 <HAL_I2C_MspInit+0xb4>)
 8000eaa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000eae:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eb0:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <HAL_I2C_MspInit+0xb4>)
 8000eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000ebc:	bf00      	nop
 8000ebe:	37b0      	adds	r7, #176	@ 0xb0
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40005800 	.word	0x40005800
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	48000400 	.word	0x48000400

08000ed0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	@ 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a17      	ldr	r2, [pc, #92]	@ (8000f4c <HAL_QSPI_MspInit+0x7c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d128      	bne.n	8000f44 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000ef2:	4b17      	ldr	r3, [pc, #92]	@ (8000f50 <HAL_QSPI_MspInit+0x80>)
 8000ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ef6:	4a16      	ldr	r2, [pc, #88]	@ (8000f50 <HAL_QSPI_MspInit+0x80>)
 8000ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000efc:	6513      	str	r3, [r2, #80]	@ 0x50
 8000efe:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <HAL_QSPI_MspInit+0x80>)
 8000f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f0a:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <HAL_QSPI_MspInit+0x80>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0e:	4a10      	ldr	r2, [pc, #64]	@ (8000f50 <HAL_QSPI_MspInit+0x80>)
 8000f10:	f043 0310 	orr.w	r3, r3, #16
 8000f14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f16:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <HAL_QSPI_MspInit+0x80>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1a:	f003 0310 	and.w	r3, r3, #16
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000f22:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000f26:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f30:	2303      	movs	r3, #3
 8000f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f34:	230a      	movs	r3, #10
 8000f36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <HAL_QSPI_MspInit+0x84>)
 8000f40:	f000 fcdc 	bl	80018fc <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8000f44:	bf00      	nop
 8000f46:	3728      	adds	r7, #40	@ 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	a0001000 	.word	0xa0001000
 8000f50:	40021000 	.word	0x40021000
 8000f54:	48001000 	.word	0x48001000

08000f58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	@ 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a17      	ldr	r2, [pc, #92]	@ (8000fd4 <HAL_SPI_MspInit+0x7c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d128      	bne.n	8000fcc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f7a:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7e:	4a16      	ldr	r2, [pc, #88]	@ (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000f80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f86:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f96:	4a10      	ldr	r2, [pc, #64]	@ (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000faa:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fbc:	2306      	movs	r3, #6
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4805      	ldr	r0, [pc, #20]	@ (8000fdc <HAL_SPI_MspInit+0x84>)
 8000fc8:	f000 fc98 	bl	80018fc <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000fcc:	bf00      	nop
 8000fce:	3728      	adds	r7, #40	@ 0x28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40003c00 	.word	0x40003c00
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	48000800 	.word	0x48000800

08000fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0ae      	sub	sp, #184	@ 0xb8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	2288      	movs	r2, #136	@ 0x88
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f006 fdc9 	bl	8007b98 <memset>
  if(huart->Instance==USART1)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a42      	ldr	r2, [pc, #264]	@ (8001114 <HAL_UART_MspInit+0x134>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d13b      	bne.n	8001088 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001010:	2301      	movs	r3, #1
 8001012:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001014:	2300      	movs	r3, #0
 8001016:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4618      	mov	r0, r3
 800101e:	f002 f843 	bl	80030a8 <HAL_RCCEx_PeriphCLKConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001028:	f7ff fe62 	bl	8000cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800102c:	4b3a      	ldr	r3, [pc, #232]	@ (8001118 <HAL_UART_MspInit+0x138>)
 800102e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001030:	4a39      	ldr	r2, [pc, #228]	@ (8001118 <HAL_UART_MspInit+0x138>)
 8001032:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001036:	6613      	str	r3, [r2, #96]	@ 0x60
 8001038:	4b37      	ldr	r3, [pc, #220]	@ (8001118 <HAL_UART_MspInit+0x138>)
 800103a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800103c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001040:	61bb      	str	r3, [r7, #24]
 8001042:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	4b34      	ldr	r3, [pc, #208]	@ (8001118 <HAL_UART_MspInit+0x138>)
 8001046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001048:	4a33      	ldr	r2, [pc, #204]	@ (8001118 <HAL_UART_MspInit+0x138>)
 800104a:	f043 0302 	orr.w	r3, r3, #2
 800104e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001050:	4b31      	ldr	r3, [pc, #196]	@ (8001118 <HAL_UART_MspInit+0x138>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800105c:	23c0      	movs	r3, #192	@ 0xc0
 800105e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001074:	2307      	movs	r3, #7
 8001076:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800107e:	4619      	mov	r1, r3
 8001080:	4826      	ldr	r0, [pc, #152]	@ (800111c <HAL_UART_MspInit+0x13c>)
 8001082:	f000 fc3b 	bl	80018fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001086:	e040      	b.n	800110a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a24      	ldr	r2, [pc, #144]	@ (8001120 <HAL_UART_MspInit+0x140>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d13b      	bne.n	800110a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001092:	2304      	movs	r3, #4
 8001094:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001096:	2300      	movs	r3, #0
 8001098:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4618      	mov	r0, r3
 80010a0:	f002 f802 	bl	80030a8 <HAL_RCCEx_PeriphCLKConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_UART_MspInit+0xce>
      Error_Handler();
 80010aa:	f7ff fe21 	bl	8000cf0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <HAL_UART_MspInit+0x138>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b2:	4a19      	ldr	r2, [pc, #100]	@ (8001118 <HAL_UART_MspInit+0x138>)
 80010b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <HAL_UART_MspInit+0x138>)
 80010bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c6:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <HAL_UART_MspInit+0x138>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ca:	4a13      	ldr	r2, [pc, #76]	@ (8001118 <HAL_UART_MspInit+0x138>)
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <HAL_UART_MspInit+0x138>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80010de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010f8:	2307      	movs	r3, #7
 80010fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010fe:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001102:	4619      	mov	r1, r3
 8001104:	4807      	ldr	r0, [pc, #28]	@ (8001124 <HAL_UART_MspInit+0x144>)
 8001106:	f000 fbf9 	bl	80018fc <HAL_GPIO_Init>
}
 800110a:	bf00      	nop
 800110c:	37b8      	adds	r7, #184	@ 0xb8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40013800 	.word	0x40013800
 8001118:	40021000 	.word	0x40021000
 800111c:	48000400 	.word	0x48000400
 8001120:	40004800 	.word	0x40004800
 8001124:	48000c00 	.word	0x48000c00

08001128 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b0ac      	sub	sp, #176	@ 0xb0
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2288      	movs	r2, #136	@ 0x88
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f006 fd25 	bl	8007b98 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001156:	d17c      	bne.n	8001252 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001158:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800115c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800115e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001162:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001166:	2301      	movs	r3, #1
 8001168:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800116a:	2301      	movs	r3, #1
 800116c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800116e:	2318      	movs	r3, #24
 8001170:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001172:	2307      	movs	r3, #7
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001176:	2302      	movs	r3, #2
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800117a:	2302      	movs	r3, #2
 800117c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800117e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001182:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4618      	mov	r0, r3
 800118a:	f001 ff8d 	bl	80030a8 <HAL_RCCEx_PeriphCLKConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001194:	f7ff fdac 	bl	8000cf0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	4b30      	ldr	r3, [pc, #192]	@ (800125c <HAL_PCD_MspInit+0x134>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119c:	4a2f      	ldr	r2, [pc, #188]	@ (800125c <HAL_PCD_MspInit+0x134>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a4:	4b2d      	ldr	r3, [pc, #180]	@ (800125c <HAL_PCD_MspInit+0x134>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80011b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011c8:	4619      	mov	r1, r3
 80011ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ce:	f000 fb95 	bl	80018fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80011d2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80011d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011ec:	230a      	movs	r3, #10
 80011ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011fc:	f000 fb7e 	bl	80018fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001200:	4b16      	ldr	r3, [pc, #88]	@ (800125c <HAL_PCD_MspInit+0x134>)
 8001202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001204:	4a15      	ldr	r2, [pc, #84]	@ (800125c <HAL_PCD_MspInit+0x134>)
 8001206:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800120a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800120c:	4b13      	ldr	r3, [pc, #76]	@ (800125c <HAL_PCD_MspInit+0x134>)
 800120e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001210:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001218:	4b10      	ldr	r3, [pc, #64]	@ (800125c <HAL_PCD_MspInit+0x134>)
 800121a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d114      	bne.n	800124e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001224:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <HAL_PCD_MspInit+0x134>)
 8001226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001228:	4a0c      	ldr	r2, [pc, #48]	@ (800125c <HAL_PCD_MspInit+0x134>)
 800122a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800122e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001230:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <HAL_PCD_MspInit+0x134>)
 8001232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001234:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800123c:	f001 f836 	bl	80022ac <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_PCD_MspInit+0x134>)
 8001242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001244:	4a05      	ldr	r2, [pc, #20]	@ (800125c <HAL_PCD_MspInit+0x134>)
 8001246:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800124a:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800124c:	e001      	b.n	8001252 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800124e:	f001 f82d 	bl	80022ac <HAL_PWREx_EnableVddUSB>
}
 8001252:	bf00      	nop
 8001254:	37b0      	adds	r7, #176	@ 0xb0
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000

08001260 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08e      	sub	sp, #56	@ 0x38
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800126e:	4b34      	ldr	r3, [pc, #208]	@ (8001340 <HAL_InitTick+0xe0>)
 8001270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001272:	4a33      	ldr	r2, [pc, #204]	@ (8001340 <HAL_InitTick+0xe0>)
 8001274:	f043 0310 	orr.w	r3, r3, #16
 8001278:	6593      	str	r3, [r2, #88]	@ 0x58
 800127a:	4b31      	ldr	r3, [pc, #196]	@ (8001340 <HAL_InitTick+0xe0>)
 800127c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127e:	f003 0310 	and.w	r3, r3, #16
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001286:	f107 0210 	add.w	r2, r7, #16
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f001 fe77 	bl	8002f84 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800129a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800129c:	2b00      	cmp	r3, #0
 800129e:	d103      	bne.n	80012a8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012a0:	f001 fe44 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 80012a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80012a6:	e004      	b.n	80012b2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012a8:	f001 fe40 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 80012ac:	4603      	mov	r3, r0
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012b4:	4a23      	ldr	r2, [pc, #140]	@ (8001344 <HAL_InitTick+0xe4>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0c9b      	lsrs	r3, r3, #18
 80012bc:	3b01      	subs	r3, #1
 80012be:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012c0:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <HAL_InitTick+0xe8>)
 80012c2:	4a22      	ldr	r2, [pc, #136]	@ (800134c <HAL_InitTick+0xec>)
 80012c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012c6:	4b20      	ldr	r3, [pc, #128]	@ (8001348 <HAL_InitTick+0xe8>)
 80012c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012cc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001348 <HAL_InitTick+0xe8>)
 80012d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001348 <HAL_InitTick+0xe8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012da:	4b1b      	ldr	r3, [pc, #108]	@ (8001348 <HAL_InitTick+0xe8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e0:	4b19      	ldr	r3, [pc, #100]	@ (8001348 <HAL_InitTick+0xe8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80012e6:	4818      	ldr	r0, [pc, #96]	@ (8001348 <HAL_InitTick+0xe8>)
 80012e8:	f002 fc4d 	bl	8003b86 <HAL_TIM_Base_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80012f2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d11b      	bne.n	8001332 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80012fa:	4813      	ldr	r0, [pc, #76]	@ (8001348 <HAL_InitTick+0xe8>)
 80012fc:	f002 fca4 	bl	8003c48 <HAL_TIM_Base_Start_IT>
 8001300:	4603      	mov	r3, r0
 8001302:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001306:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800130a:	2b00      	cmp	r3, #0
 800130c:	d111      	bne.n	8001332 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800130e:	2036      	movs	r0, #54	@ 0x36
 8001310:	f000 f9da 	bl	80016c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b0f      	cmp	r3, #15
 8001318:	d808      	bhi.n	800132c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800131a:	2200      	movs	r2, #0
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	2036      	movs	r0, #54	@ 0x36
 8001320:	f000 f9b6 	bl	8001690 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001324:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <HAL_InitTick+0xf0>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e002      	b.n	8001332 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001332:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001336:	4618      	mov	r0, r3
 8001338:	3738      	adds	r7, #56	@ 0x38
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	431bde83 	.word	0x431bde83
 8001348:	2000078c 	.word	0x2000078c
 800134c:	40001000 	.word	0x40001000
 8001350:	20000028 	.word	0x20000028

08001354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <NMI_Handler+0x4>

0800135c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <HardFault_Handler+0x4>

08001364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <MemManage_Handler+0x4>

0800136c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <UsageFault_Handler+0x4>

0800137c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800138e:	2020      	movs	r0, #32
 8001390:	f000 fc90 	bl	8001cb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001394:	2040      	movs	r0, #64	@ 0x40
 8001396:	f000 fc8d 	bl	8001cb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800139a:	2080      	movs	r0, #128	@ 0x80
 800139c:	f000 fc8a 	bl	8001cb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80013a0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80013a4:	f000 fc86 	bl	8001cb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}

080013ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80013b0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80013b4:	f000 fc7e 	bl	8001cb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80013b8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80013bc:	f000 fc7a 	bl	8001cb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80013c0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013c4:	f000 fc76 	bl	8001cb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80013c8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80013cc:	f000 fc72 	bl	8001cb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80013d0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80013d4:	f000 fc6e 	bl	8001cb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}

080013dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013e0:	4802      	ldr	r0, [pc, #8]	@ (80013ec <TIM6_DAC_IRQHandler+0x10>)
 80013e2:	f002 fca1 	bl	8003d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000078c 	.word	0x2000078c

080013f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <SystemInit+0x20>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013fa:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <SystemInit+0x20>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001414:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800144c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001418:	f7ff ffea 	bl	80013f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800141c:	480c      	ldr	r0, [pc, #48]	@ (8001450 <LoopForever+0x6>)
  ldr r1, =_edata
 800141e:	490d      	ldr	r1, [pc, #52]	@ (8001454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001420:	4a0d      	ldr	r2, [pc, #52]	@ (8001458 <LoopForever+0xe>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0a      	ldr	r2, [pc, #40]	@ (800145c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001434:	4c0a      	ldr	r4, [pc, #40]	@ (8001460 <LoopForever+0x16>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001442:	f006 fbb1 	bl	8007ba8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001446:	f7ff f83b 	bl	80004c0 <main>

0800144a <LoopForever>:

LoopForever:
    b LoopForever
 800144a:	e7fe      	b.n	800144a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800144c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001454:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001458:	08007cf8 	.word	0x08007cf8
  ldr r2, =_sbss
 800145c:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001460:	20002108 	.word	0x20002108

08001464 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC1_2_IRQHandler>

08001466 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001470:	2003      	movs	r0, #3
 8001472:	f000 f902 	bl	800167a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001476:	200f      	movs	r0, #15
 8001478:	f7ff fef2 	bl	8001260 <HAL_InitTick>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d002      	beq.n	8001488 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	71fb      	strb	r3, [r7, #7]
 8001486:	e001      	b.n	800148c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001488:	f7ff fc38 	bl	8000cfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800148c:	79fb      	ldrb	r3, [r7, #7]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_IncTick+0x20>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_IncTick+0x24>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a04      	ldr	r2, [pc, #16]	@ (80014bc <HAL_IncTick+0x24>)
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	2000002c 	.word	0x2000002c
 80014bc:	200007d8 	.word	0x200007d8

080014c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return uwTick;
 80014c4:	4b03      	ldr	r3, [pc, #12]	@ (80014d4 <HAL_GetTick+0x14>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	200007d8 	.word	0x200007d8

080014d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e0:	f7ff ffee 	bl	80014c0 <HAL_GetTick>
 80014e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f0:	d005      	beq.n	80014fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014f2:	4b0a      	ldr	r3, [pc, #40]	@ (800151c <HAL_Delay+0x44>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4413      	add	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014fe:	bf00      	nop
 8001500:	f7ff ffde 	bl	80014c0 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	429a      	cmp	r2, r3
 800150e:	d8f7      	bhi.n	8001500 <HAL_Delay+0x28>
  {
  }
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000002c 	.word	0x2000002c

08001520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001530:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800153c:	4013      	ands	r3, r2
 800153e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001548:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800154c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001552:	4a04      	ldr	r2, [pc, #16]	@ (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	60d3      	str	r3, [r2, #12]
}
 8001558:	bf00      	nop
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800156c:	4b04      	ldr	r3, [pc, #16]	@ (8001580 <__NVIC_GetPriorityGrouping+0x18>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f003 0307 	and.w	r3, r3, #7
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	2b00      	cmp	r3, #0
 8001594:	db0b      	blt.n	80015ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	f003 021f 	and.w	r2, r3, #31
 800159c:	4907      	ldr	r1, [pc, #28]	@ (80015bc <__NVIC_EnableIRQ+0x38>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	095b      	lsrs	r3, r3, #5
 80015a4:	2001      	movs	r0, #1
 80015a6:	fa00 f202 	lsl.w	r2, r0, r2
 80015aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000e100 	.word	0xe000e100

080015c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db0a      	blt.n	80015ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	490c      	ldr	r1, [pc, #48]	@ (800160c <__NVIC_SetPriority+0x4c>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	0112      	lsls	r2, r2, #4
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	440b      	add	r3, r1
 80015e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e8:	e00a      	b.n	8001600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4908      	ldr	r1, [pc, #32]	@ (8001610 <__NVIC_SetPriority+0x50>)
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	3b04      	subs	r3, #4
 80015f8:	0112      	lsls	r2, r2, #4
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	440b      	add	r3, r1
 80015fe:	761a      	strb	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000e100 	.word	0xe000e100
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	@ 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f1c3 0307 	rsb	r3, r3, #7
 800162e:	2b04      	cmp	r3, #4
 8001630:	bf28      	it	cs
 8001632:	2304      	movcs	r3, #4
 8001634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3304      	adds	r3, #4
 800163a:	2b06      	cmp	r3, #6
 800163c:	d902      	bls.n	8001644 <NVIC_EncodePriority+0x30>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3b03      	subs	r3, #3
 8001642:	e000      	b.n	8001646 <NVIC_EncodePriority+0x32>
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	401a      	ands	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800165c:	f04f 31ff 	mov.w	r1, #4294967295
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	43d9      	mvns	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	4313      	orrs	r3, r2
         );
}
 800166e:	4618      	mov	r0, r3
 8001670:	3724      	adds	r7, #36	@ 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ff4c 	bl	8001520 <__NVIC_SetPriorityGrouping>
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016a2:	f7ff ff61 	bl	8001568 <__NVIC_GetPriorityGrouping>
 80016a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	68b9      	ldr	r1, [r7, #8]
 80016ac:	6978      	ldr	r0, [r7, #20]
 80016ae:	f7ff ffb1 	bl	8001614 <NVIC_EncodePriority>
 80016b2:	4602      	mov	r2, r0
 80016b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ff80 	bl	80015c0 <__NVIC_SetPriority>
}
 80016c0:	bf00      	nop
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ff54 	bl	8001584 <__NVIC_EnableIRQ>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e0ac      	b.n	8001850 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f8b2 	bl	8001864 <DFSDM_GetChannelFromInstance>
 8001700:	4603      	mov	r3, r0
 8001702:	4a55      	ldr	r2, [pc, #340]	@ (8001858 <HAL_DFSDM_ChannelInit+0x174>)
 8001704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e09f      	b.n	8001850 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fb1b 	bl	8000d4c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001716:	4b51      	ldr	r3, [pc, #324]	@ (800185c <HAL_DFSDM_ChannelInit+0x178>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	4a4f      	ldr	r2, [pc, #316]	@ (800185c <HAL_DFSDM_ChannelInit+0x178>)
 800171e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001720:	4b4e      	ldr	r3, [pc, #312]	@ (800185c <HAL_DFSDM_ChannelInit+0x178>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d125      	bne.n	8001774 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001728:	4b4d      	ldr	r3, [pc, #308]	@ (8001860 <HAL_DFSDM_ChannelInit+0x17c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a4c      	ldr	r2, [pc, #304]	@ (8001860 <HAL_DFSDM_ChannelInit+0x17c>)
 800172e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001732:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001734:	4b4a      	ldr	r3, [pc, #296]	@ (8001860 <HAL_DFSDM_ChannelInit+0x17c>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4948      	ldr	r1, [pc, #288]	@ (8001860 <HAL_DFSDM_ChannelInit+0x17c>)
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001742:	4b47      	ldr	r3, [pc, #284]	@ (8001860 <HAL_DFSDM_ChannelInit+0x17c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a46      	ldr	r2, [pc, #280]	@ (8001860 <HAL_DFSDM_ChannelInit+0x17c>)
 8001748:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800174c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	791b      	ldrb	r3, [r3, #4]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d108      	bne.n	8001768 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001756:	4b42      	ldr	r3, [pc, #264]	@ (8001860 <HAL_DFSDM_ChannelInit+0x17c>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	3b01      	subs	r3, #1
 8001760:	041b      	lsls	r3, r3, #16
 8001762:	493f      	ldr	r1, [pc, #252]	@ (8001860 <HAL_DFSDM_ChannelInit+0x17c>)
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001768:	4b3d      	ldr	r3, [pc, #244]	@ (8001860 <HAL_DFSDM_ChannelInit+0x17c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a3c      	ldr	r2, [pc, #240]	@ (8001860 <HAL_DFSDM_ChannelInit+0x17c>)
 800176e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001772:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001782:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6819      	ldr	r1, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001792:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001798:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 020f 	bic.w	r2, r2, #15
 80017b0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6819      	ldr	r1, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80017d8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6899      	ldr	r1, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e8:	3b01      	subs	r3, #1
 80017ea:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f002 0207 	and.w	r2, r2, #7
 8001804:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6859      	ldr	r1, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001810:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001830:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f000 f810 	bl	8001864 <DFSDM_GetChannelFromInstance>
 8001844:	4602      	mov	r2, r0
 8001846:	4904      	ldr	r1, [pc, #16]	@ (8001858 <HAL_DFSDM_ChannelInit+0x174>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	200007e0 	.word	0x200007e0
 800185c:	200007dc 	.word	0x200007dc
 8001860:	40016000 	.word	0x40016000

08001864 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a1c      	ldr	r2, [pc, #112]	@ (80018e0 <DFSDM_GetChannelFromInstance+0x7c>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d102      	bne.n	800187a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	e02b      	b.n	80018d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a19      	ldr	r2, [pc, #100]	@ (80018e4 <DFSDM_GetChannelFromInstance+0x80>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d102      	bne.n	8001888 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001882:	2301      	movs	r3, #1
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	e024      	b.n	80018d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a17      	ldr	r2, [pc, #92]	@ (80018e8 <DFSDM_GetChannelFromInstance+0x84>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d102      	bne.n	8001896 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001890:	2302      	movs	r3, #2
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	e01d      	b.n	80018d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a14      	ldr	r2, [pc, #80]	@ (80018ec <DFSDM_GetChannelFromInstance+0x88>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d102      	bne.n	80018a4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800189e:	2304      	movs	r3, #4
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	e016      	b.n	80018d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a12      	ldr	r2, [pc, #72]	@ (80018f0 <DFSDM_GetChannelFromInstance+0x8c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d102      	bne.n	80018b2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80018ac:	2305      	movs	r3, #5
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	e00f      	b.n	80018d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a0f      	ldr	r2, [pc, #60]	@ (80018f4 <DFSDM_GetChannelFromInstance+0x90>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d102      	bne.n	80018c0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80018ba:	2306      	movs	r3, #6
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	e008      	b.n	80018d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a0d      	ldr	r2, [pc, #52]	@ (80018f8 <DFSDM_GetChannelFromInstance+0x94>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d102      	bne.n	80018ce <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80018c8:	2307      	movs	r3, #7
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	e001      	b.n	80018d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80018ce:	2303      	movs	r3, #3
 80018d0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80018d2:	68fb      	ldr	r3, [r7, #12]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40016000 	.word	0x40016000
 80018e4:	40016020 	.word	0x40016020
 80018e8:	40016040 	.word	0x40016040
 80018ec:	40016080 	.word	0x40016080
 80018f0:	400160a0 	.word	0x400160a0
 80018f4:	400160c0 	.word	0x400160c0
 80018f8:	400160e0 	.word	0x400160e0

080018fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190a:	e17f      	b.n	8001c0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2101      	movs	r1, #1
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	4013      	ands	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8171 	beq.w	8001c06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b01      	cmp	r3, #1
 800192e:	d005      	beq.n	800193c <HAL_GPIO_Init+0x40>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d130      	bne.n	800199e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2203      	movs	r2, #3
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001972:	2201      	movs	r2, #1
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	f003 0201 	and.w	r2, r3, #1
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d118      	bne.n	80019dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019b0:	2201      	movs	r2, #1
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	08db      	lsrs	r3, r3, #3
 80019c6:	f003 0201 	and.w	r2, r3, #1
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d017      	beq.n	8001a18 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d123      	bne.n	8001a6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	08da      	lsrs	r2, r3, #3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3208      	adds	r2, #8
 8001a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	220f      	movs	r2, #15
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	08da      	lsrs	r2, r3, #3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3208      	adds	r2, #8
 8001a66:	6939      	ldr	r1, [r7, #16]
 8001a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	2203      	movs	r2, #3
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0203 	and.w	r2, r3, #3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 80ac 	beq.w	8001c06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aae:	4b5f      	ldr	r3, [pc, #380]	@ (8001c2c <HAL_GPIO_Init+0x330>)
 8001ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab2:	4a5e      	ldr	r2, [pc, #376]	@ (8001c2c <HAL_GPIO_Init+0x330>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aba:	4b5c      	ldr	r3, [pc, #368]	@ (8001c2c <HAL_GPIO_Init+0x330>)
 8001abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ac6:	4a5a      	ldr	r2, [pc, #360]	@ (8001c30 <HAL_GPIO_Init+0x334>)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	3302      	adds	r3, #2
 8001ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	220f      	movs	r2, #15
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001af0:	d025      	beq.n	8001b3e <HAL_GPIO_Init+0x242>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4f      	ldr	r2, [pc, #316]	@ (8001c34 <HAL_GPIO_Init+0x338>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d01f      	beq.n	8001b3a <HAL_GPIO_Init+0x23e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4e      	ldr	r2, [pc, #312]	@ (8001c38 <HAL_GPIO_Init+0x33c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d019      	beq.n	8001b36 <HAL_GPIO_Init+0x23a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a4d      	ldr	r2, [pc, #308]	@ (8001c3c <HAL_GPIO_Init+0x340>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d013      	beq.n	8001b32 <HAL_GPIO_Init+0x236>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4c      	ldr	r2, [pc, #304]	@ (8001c40 <HAL_GPIO_Init+0x344>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d00d      	beq.n	8001b2e <HAL_GPIO_Init+0x232>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4b      	ldr	r2, [pc, #300]	@ (8001c44 <HAL_GPIO_Init+0x348>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d007      	beq.n	8001b2a <HAL_GPIO_Init+0x22e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a4a      	ldr	r2, [pc, #296]	@ (8001c48 <HAL_GPIO_Init+0x34c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d101      	bne.n	8001b26 <HAL_GPIO_Init+0x22a>
 8001b22:	2306      	movs	r3, #6
 8001b24:	e00c      	b.n	8001b40 <HAL_GPIO_Init+0x244>
 8001b26:	2307      	movs	r3, #7
 8001b28:	e00a      	b.n	8001b40 <HAL_GPIO_Init+0x244>
 8001b2a:	2305      	movs	r3, #5
 8001b2c:	e008      	b.n	8001b40 <HAL_GPIO_Init+0x244>
 8001b2e:	2304      	movs	r3, #4
 8001b30:	e006      	b.n	8001b40 <HAL_GPIO_Init+0x244>
 8001b32:	2303      	movs	r3, #3
 8001b34:	e004      	b.n	8001b40 <HAL_GPIO_Init+0x244>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e002      	b.n	8001b40 <HAL_GPIO_Init+0x244>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <HAL_GPIO_Init+0x244>
 8001b3e:	2300      	movs	r3, #0
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	f002 0203 	and.w	r2, r2, #3
 8001b46:	0092      	lsls	r2, r2, #2
 8001b48:	4093      	lsls	r3, r2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b50:	4937      	ldr	r1, [pc, #220]	@ (8001c30 <HAL_GPIO_Init+0x334>)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	089b      	lsrs	r3, r3, #2
 8001b56:	3302      	adds	r3, #2
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c4c <HAL_GPIO_Init+0x350>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b82:	4a32      	ldr	r2, [pc, #200]	@ (8001c4c <HAL_GPIO_Init+0x350>)
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b88:	4b30      	ldr	r3, [pc, #192]	@ (8001c4c <HAL_GPIO_Init+0x350>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bac:	4a27      	ldr	r2, [pc, #156]	@ (8001c4c <HAL_GPIO_Init+0x350>)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bb2:	4b26      	ldr	r3, [pc, #152]	@ (8001c4c <HAL_GPIO_Init+0x350>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bd6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c4c <HAL_GPIO_Init+0x350>)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c4c <HAL_GPIO_Init+0x350>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c00:	4a12      	ldr	r2, [pc, #72]	@ (8001c4c <HAL_GPIO_Init+0x350>)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa22 f303 	lsr.w	r3, r2, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f47f ae78 	bne.w	800190c <HAL_GPIO_Init+0x10>
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	bf00      	nop
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40010000 	.word	0x40010000
 8001c34:	48000400 	.word	0x48000400
 8001c38:	48000800 	.word	0x48000800
 8001c3c:	48000c00 	.word	0x48000c00
 8001c40:	48001000 	.word	0x48001000
 8001c44:	48001400 	.word	0x48001400
 8001c48:	48001800 	.word	0x48001800
 8001c4c:	40010400 	.word	0x40010400

08001c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	807b      	strh	r3, [r7, #2]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c60:	787b      	ldrb	r3, [r7, #1]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c66:	887a      	ldrh	r2, [r7, #2]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c6c:	e002      	b.n	8001c74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c6e:	887a      	ldrh	r2, [r7, #2]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c92:	887a      	ldrh	r2, [r7, #2]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4013      	ands	r3, r2
 8001c98:	041a      	lsls	r2, r3, #16
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	43d9      	mvns	r1, r3
 8001c9e:	887b      	ldrh	r3, [r7, #2]
 8001ca0:	400b      	ands	r3, r1
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	619a      	str	r2, [r3, #24]
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cbe:	4b08      	ldr	r3, [pc, #32]	@ (8001ce0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cc0:	695a      	ldr	r2, [r3, #20]
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d006      	beq.n	8001cd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cca:	4a05      	ldr	r2, [pc, #20]	@ (8001ce0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 f806 	bl	8001ce4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40010400 	.word	0x40010400

08001ce4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e08d      	b.n	8001e28 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d106      	bne.n	8001d26 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff f877 	bl	8000e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2224      	movs	r2, #36	@ 0x24
 8001d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0201 	bic.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d4a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d5a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d107      	bne.n	8001d74 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	e006      	b.n	8001d82 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001d80:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d108      	bne.n	8001d9c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	e007      	b.n	8001dac <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001daa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dbe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69d9      	ldr	r1, [r3, #28]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1a      	ldr	r2, [r3, #32]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 0201 	orr.w	r2, r2, #1
 8001e08:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2220      	movs	r2, #32
 8001e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b20      	cmp	r3, #32
 8001e44:	d138      	bne.n	8001eb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e032      	b.n	8001eba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2224      	movs	r2, #36	@ 0x24
 8001e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6819      	ldr	r1, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e000      	b.n	8001eba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001eb8:	2302      	movs	r3, #2
  }
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b085      	sub	sp, #20
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d139      	bne.n	8001f50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e033      	b.n	8001f52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2224      	movs	r2, #36	@ 0x24
 8001ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0201 	bic.w	r2, r2, #1
 8001f08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e000      	b.n	8001f52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f50:	2302      	movs	r3, #2
  }
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af02      	add	r7, sp, #8
 8001f64:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e101      	b.n	8002174 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d106      	bne.n	8001f8a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff f8cf 	bl	8001128 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f002 fe05 	bl	8004bac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7c1a      	ldrb	r2, [r3, #16]
 8001faa:	f88d 2000 	strb.w	r2, [sp]
 8001fae:	3304      	adds	r3, #4
 8001fb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fb2:	f002 fdce 	bl	8004b52 <USB_CoreInit>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0d5      	b.n	8002174 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f002 fdfd 	bl	8004bce <USB_SetCurrentMode>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d005      	beq.n	8001fe6 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e0c6      	b.n	8002174 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73fb      	strb	r3, [r7, #15]
 8001fea:	e04a      	b.n	8002082 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fec:	7bfa      	ldrb	r2, [r7, #15]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	3315      	adds	r3, #21
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	3314      	adds	r3, #20
 8002010:	7bfa      	ldrb	r2, [r7, #15]
 8002012:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	b298      	uxth	r0, r3
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	332e      	adds	r3, #46	@ 0x2e
 8002028:	4602      	mov	r2, r0
 800202a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	3318      	adds	r3, #24
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002040:	7bfa      	ldrb	r2, [r7, #15]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	331c      	adds	r3, #28
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	3320      	adds	r3, #32
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	3324      	adds	r3, #36	@ 0x24
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	3301      	adds	r3, #1
 8002080:	73fb      	strb	r3, [r7, #15]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	791b      	ldrb	r3, [r3, #4]
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	429a      	cmp	r2, r3
 800208a:	d3af      	bcc.n	8001fec <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800208c:	2300      	movs	r3, #0
 800208e:	73fb      	strb	r3, [r7, #15]
 8002090:	e044      	b.n	800211c <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020a8:	7bfa      	ldrb	r2, [r7, #15]
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020d4:	7bfa      	ldrb	r2, [r7, #15]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	3301      	adds	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	791b      	ldrb	r3, [r3, #4]
 8002120:	7bfa      	ldrb	r2, [r7, #15]
 8002122:	429a      	cmp	r2, r3
 8002124:	d3b5      	bcc.n	8002092 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	7c1a      	ldrb	r2, [r3, #16]
 800212e:	f88d 2000 	strb.w	r2, [sp]
 8002132:	3304      	adds	r3, #4
 8002134:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002136:	f002 fd97 	bl	8004c68 <USB_DevInit>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e013      	b.n	8002174 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	7b1b      	ldrb	r3, [r3, #12]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d102      	bne.n	8002168 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f80a 	bl	800217c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f002 ff3c 	bl	8004fea <USB_DevDisconnect>

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ae:	f043 0303 	orr.w	r3, r3, #3
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021c8:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a04      	ldr	r2, [pc, #16]	@ (80021e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d2:	6013      	str	r3, [r2, #0]
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40007000 	.word	0x40007000

080021e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021e8:	4b04      	ldr	r3, [pc, #16]	@ (80021fc <HAL_PWREx_GetVoltageRange+0x18>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40007000 	.word	0x40007000

08002200 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800220e:	d130      	bne.n	8002272 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002210:	4b23      	ldr	r3, [pc, #140]	@ (80022a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002218:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800221c:	d038      	beq.n	8002290 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800221e:	4b20      	ldr	r3, [pc, #128]	@ (80022a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002226:	4a1e      	ldr	r2, [pc, #120]	@ (80022a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002228:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800222c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800222e:	4b1d      	ldr	r3, [pc, #116]	@ (80022a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2232      	movs	r2, #50	@ 0x32
 8002234:	fb02 f303 	mul.w	r3, r2, r3
 8002238:	4a1b      	ldr	r2, [pc, #108]	@ (80022a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	0c9b      	lsrs	r3, r3, #18
 8002240:	3301      	adds	r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002244:	e002      	b.n	800224c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3b01      	subs	r3, #1
 800224a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800224c:	4b14      	ldr	r3, [pc, #80]	@ (80022a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002258:	d102      	bne.n	8002260 <HAL_PWREx_ControlVoltageScaling+0x60>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f2      	bne.n	8002246 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002260:	4b0f      	ldr	r3, [pc, #60]	@ (80022a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800226c:	d110      	bne.n	8002290 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e00f      	b.n	8002292 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002272:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800227a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800227e:	d007      	beq.n	8002290 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002280:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002288:	4a05      	ldr	r2, [pc, #20]	@ (80022a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800228a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800228e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40007000 	.word	0x40007000
 80022a4:	20000024 	.word	0x20000024
 80022a8:	431bde83 	.word	0x431bde83

080022ac <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80022b0:	4b05      	ldr	r3, [pc, #20]	@ (80022c8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	4a04      	ldr	r2, [pc, #16]	@ (80022c8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80022b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022ba:	6053      	str	r3, [r2, #4]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40007000 	.word	0x40007000

080022cc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80022d4:	f7ff f8f4 	bl	80014c0 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e063      	b.n	80023ac <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10b      	bne.n	8002308 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7fe fde9 	bl	8000ed0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80022fe:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f858 	bl	80023b8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	3b01      	subs	r3, #1
 8002318:	021a      	lsls	r2, r3, #8
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	2120      	movs	r1, #32
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f850 	bl	80023d4 <QSPI_WaitFlagStateUntilTimeout>
 8002334:	4603      	mov	r3, r0
 8002336:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002338:	7afb      	ldrb	r3, [r7, #11]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d131      	bne.n	80023a2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002348:	f023 0310 	bic.w	r3, r3, #16
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6852      	ldr	r2, [r2, #4]
 8002350:	0611      	lsls	r1, r2, #24
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68d2      	ldr	r2, [r2, #12]
 8002356:	4311      	orrs	r1, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	430b      	orrs	r3, r1
 800235e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	4b13      	ldr	r3, [pc, #76]	@ (80023b4 <HAL_QSPI_Init+0xe8>)
 8002368:	4013      	ands	r3, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6912      	ldr	r2, [r2, #16]
 800236e:	0411      	lsls	r1, r2, #16
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6952      	ldr	r2, [r2, #20]
 8002374:	4311      	orrs	r1, r2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6992      	ldr	r2, [r2, #24]
 800237a:	4311      	orrs	r1, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	430b      	orrs	r3, r1
 8002382:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80023aa:	7afb      	ldrb	r3, [r7, #11]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	ffe0f8fe 	.word	0xffe0f8fe

080023b8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	4613      	mov	r3, r2
 80023e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80023e4:	e01a      	b.n	800241c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ec:	d016      	beq.n	800241c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ee:	f7ff f867 	bl	80014c0 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d302      	bcc.n	8002404 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10b      	bne.n	800241c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2204      	movs	r2, #4
 8002408:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002410:	f043 0201 	orr.w	r2, r3, #1
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e00e      	b.n	800243a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	4013      	ands	r3, r2
 8002426:	2b00      	cmp	r3, #0
 8002428:	bf14      	ite	ne
 800242a:	2301      	movne	r3, #1
 800242c:	2300      	moveq	r3, #0
 800242e:	b2db      	uxtb	r3, r3
 8002430:	461a      	mov	r2, r3
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	429a      	cmp	r2, r3
 8002436:	d1d6      	bne.n	80023e6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e3ca      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002456:	4b97      	ldr	r3, [pc, #604]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002460:	4b94      	ldr	r3, [pc, #592]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 80e4 	beq.w	8002640 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <HAL_RCC_OscConfig+0x4a>
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	2b0c      	cmp	r3, #12
 8002482:	f040 808b 	bne.w	800259c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2b01      	cmp	r3, #1
 800248a:	f040 8087 	bne.w	800259c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800248e:	4b89      	ldr	r3, [pc, #548]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_RCC_OscConfig+0x62>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e3a2      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1a      	ldr	r2, [r3, #32]
 80024aa:	4b82      	ldr	r3, [pc, #520]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d004      	beq.n	80024c0 <HAL_RCC_OscConfig+0x7c>
 80024b6:	4b7f      	ldr	r3, [pc, #508]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024be:	e005      	b.n	80024cc <HAL_RCC_OscConfig+0x88>
 80024c0:	4b7c      	ldr	r3, [pc, #496]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80024c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024c6:	091b      	lsrs	r3, r3, #4
 80024c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d223      	bcs.n	8002518 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 fd87 	bl	8002fe8 <RCC_SetFlashLatencyFromMSIRange>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e383      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024e4:	4b73      	ldr	r3, [pc, #460]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a72      	ldr	r2, [pc, #456]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80024ea:	f043 0308 	orr.w	r3, r3, #8
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4b70      	ldr	r3, [pc, #448]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	496d      	ldr	r1, [pc, #436]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002502:	4b6c      	ldr	r3, [pc, #432]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	4968      	ldr	r1, [pc, #416]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
 8002516:	e025      	b.n	8002564 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002518:	4b66      	ldr	r3, [pc, #408]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a65      	ldr	r2, [pc, #404]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 800251e:	f043 0308 	orr.w	r3, r3, #8
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	4b63      	ldr	r3, [pc, #396]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4960      	ldr	r1, [pc, #384]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002536:	4b5f      	ldr	r3, [pc, #380]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	495b      	ldr	r1, [pc, #364]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d109      	bne.n	8002564 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fd47 	bl	8002fe8 <RCC_SetFlashLatencyFromMSIRange>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e343      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002564:	f000 fc4a 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8002568:	4602      	mov	r2, r0
 800256a:	4b52      	ldr	r3, [pc, #328]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	4950      	ldr	r1, [pc, #320]	@ (80026b8 <HAL_RCC_OscConfig+0x274>)
 8002576:	5ccb      	ldrb	r3, [r1, r3]
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
 8002580:	4a4e      	ldr	r2, [pc, #312]	@ (80026bc <HAL_RCC_OscConfig+0x278>)
 8002582:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002584:	4b4e      	ldr	r3, [pc, #312]	@ (80026c0 <HAL_RCC_OscConfig+0x27c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe fe69 	bl	8001260 <HAL_InitTick>
 800258e:	4603      	mov	r3, r0
 8002590:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d052      	beq.n	800263e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	e327      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d032      	beq.n	800260a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025a4:	4b43      	ldr	r3, [pc, #268]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a42      	ldr	r2, [pc, #264]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025b0:	f7fe ff86 	bl	80014c0 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025b8:	f7fe ff82 	bl	80014c0 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e310      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025ca:	4b3a      	ldr	r3, [pc, #232]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d6:	4b37      	ldr	r3, [pc, #220]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a36      	ldr	r2, [pc, #216]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80025dc:	f043 0308 	orr.w	r3, r3, #8
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4b34      	ldr	r3, [pc, #208]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4931      	ldr	r1, [pc, #196]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025f4:	4b2f      	ldr	r3, [pc, #188]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	492c      	ldr	r1, [pc, #176]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
 8002608:	e01a      	b.n	8002640 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800260a:	4b2a      	ldr	r3, [pc, #168]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a29      	ldr	r2, [pc, #164]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002616:	f7fe ff53 	bl	80014c0 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800261e:	f7fe ff4f 	bl	80014c0 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e2dd      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002630:	4b20      	ldr	r3, [pc, #128]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f0      	bne.n	800261e <HAL_RCC_OscConfig+0x1da>
 800263c:	e000      	b.n	8002640 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800263e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	d074      	beq.n	8002736 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2b08      	cmp	r3, #8
 8002650:	d005      	beq.n	800265e <HAL_RCC_OscConfig+0x21a>
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	2b0c      	cmp	r3, #12
 8002656:	d10e      	bne.n	8002676 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b03      	cmp	r3, #3
 800265c:	d10b      	bne.n	8002676 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265e:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d064      	beq.n	8002734 <HAL_RCC_OscConfig+0x2f0>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d160      	bne.n	8002734 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e2ba      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x24a>
 8002680:	4b0c      	ldr	r3, [pc, #48]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0b      	ldr	r2, [pc, #44]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	e026      	b.n	80026dc <HAL_RCC_OscConfig+0x298>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002696:	d115      	bne.n	80026c4 <HAL_RCC_OscConfig+0x280>
 8002698:	4b06      	ldr	r3, [pc, #24]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a05      	ldr	r2, [pc, #20]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 800269e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b03      	ldr	r3, [pc, #12]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a02      	ldr	r2, [pc, #8]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80026aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	e014      	b.n	80026dc <HAL_RCC_OscConfig+0x298>
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
 80026b8:	08007ca0 	.word	0x08007ca0
 80026bc:	20000024 	.word	0x20000024
 80026c0:	20000028 	.word	0x20000028
 80026c4:	4ba0      	ldr	r3, [pc, #640]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a9f      	ldr	r2, [pc, #636]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80026ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	4b9d      	ldr	r3, [pc, #628]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a9c      	ldr	r2, [pc, #624]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80026d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d013      	beq.n	800270c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7fe feec 	bl	80014c0 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ec:	f7fe fee8 	bl	80014c0 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	@ 0x64
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e276      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026fe:	4b92      	ldr	r3, [pc, #584]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x2a8>
 800270a:	e014      	b.n	8002736 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe fed8 	bl	80014c0 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002714:	f7fe fed4 	bl	80014c0 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b64      	cmp	r3, #100	@ 0x64
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e262      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002726:	4b88      	ldr	r3, [pc, #544]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x2d0>
 8002732:	e000      	b.n	8002736 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d060      	beq.n	8002804 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	2b04      	cmp	r3, #4
 8002746:	d005      	beq.n	8002754 <HAL_RCC_OscConfig+0x310>
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b0c      	cmp	r3, #12
 800274c:	d119      	bne.n	8002782 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d116      	bne.n	8002782 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002754:	4b7c      	ldr	r3, [pc, #496]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_RCC_OscConfig+0x328>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e23f      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276c:	4b76      	ldr	r3, [pc, #472]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	061b      	lsls	r3, r3, #24
 800277a:	4973      	ldr	r1, [pc, #460]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002780:	e040      	b.n	8002804 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d023      	beq.n	80027d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800278a:	4b6f      	ldr	r3, [pc, #444]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a6e      	ldr	r2, [pc, #440]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 8002790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7fe fe93 	bl	80014c0 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279e:	f7fe fe8f 	bl	80014c0 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e21d      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027b0:	4b65      	ldr	r3, [pc, #404]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027bc:	4b62      	ldr	r3, [pc, #392]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	061b      	lsls	r3, r3, #24
 80027ca:	495f      	ldr	r1, [pc, #380]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
 80027d0:	e018      	b.n	8002804 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a5c      	ldr	r2, [pc, #368]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80027d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027de:	f7fe fe6f 	bl	80014c0 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e6:	f7fe fe6b 	bl	80014c0 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e1f9      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027f8:	4b53      	ldr	r3, [pc, #332]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f0      	bne.n	80027e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d03c      	beq.n	800288a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01c      	beq.n	8002852 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002818:	4b4b      	ldr	r3, [pc, #300]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 800281a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800281e:	4a4a      	ldr	r2, [pc, #296]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002828:	f7fe fe4a 	bl	80014c0 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002830:	f7fe fe46 	bl	80014c0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e1d4      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002842:	4b41      	ldr	r3, [pc, #260]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 8002844:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0ef      	beq.n	8002830 <HAL_RCC_OscConfig+0x3ec>
 8002850:	e01b      	b.n	800288a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002852:	4b3d      	ldr	r3, [pc, #244]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 8002854:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002858:	4a3b      	ldr	r2, [pc, #236]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002862:	f7fe fe2d 	bl	80014c0 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286a:	f7fe fe29 	bl	80014c0 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e1b7      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800287c:	4b32      	ldr	r3, [pc, #200]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 800287e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1ef      	bne.n	800286a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 80a6 	beq.w	80029e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002898:	2300      	movs	r3, #0
 800289a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800289c:	4b2a      	ldr	r3, [pc, #168]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10d      	bne.n	80028c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a8:	4b27      	ldr	r3, [pc, #156]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80028aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ac:	4a26      	ldr	r2, [pc, #152]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80028ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80028b4:	4b24      	ldr	r3, [pc, #144]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80028b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c0:	2301      	movs	r3, #1
 80028c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c4:	4b21      	ldr	r3, [pc, #132]	@ (800294c <HAL_RCC_OscConfig+0x508>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d118      	bne.n	8002902 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028d0:	4b1e      	ldr	r3, [pc, #120]	@ (800294c <HAL_RCC_OscConfig+0x508>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1d      	ldr	r2, [pc, #116]	@ (800294c <HAL_RCC_OscConfig+0x508>)
 80028d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028dc:	f7fe fdf0 	bl	80014c0 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e4:	f7fe fdec 	bl	80014c0 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e17a      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028f6:	4b15      	ldr	r3, [pc, #84]	@ (800294c <HAL_RCC_OscConfig+0x508>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d108      	bne.n	800291c <HAL_RCC_OscConfig+0x4d8>
 800290a:	4b0f      	ldr	r3, [pc, #60]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002910:	4a0d      	ldr	r2, [pc, #52]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800291a:	e029      	b.n	8002970 <HAL_RCC_OscConfig+0x52c>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b05      	cmp	r3, #5
 8002922:	d115      	bne.n	8002950 <HAL_RCC_OscConfig+0x50c>
 8002924:	4b08      	ldr	r3, [pc, #32]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292a:	4a07      	ldr	r2, [pc, #28]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 800292c:	f043 0304 	orr.w	r3, r3, #4
 8002930:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002934:	4b04      	ldr	r3, [pc, #16]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800293a:	4a03      	ldr	r2, [pc, #12]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002944:	e014      	b.n	8002970 <HAL_RCC_OscConfig+0x52c>
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000
 800294c:	40007000 	.word	0x40007000
 8002950:	4b9c      	ldr	r3, [pc, #624]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002956:	4a9b      	ldr	r2, [pc, #620]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002958:	f023 0301 	bic.w	r3, r3, #1
 800295c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002960:	4b98      	ldr	r3, [pc, #608]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002966:	4a97      	ldr	r2, [pc, #604]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002968:	f023 0304 	bic.w	r3, r3, #4
 800296c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d016      	beq.n	80029a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002978:	f7fe fda2 	bl	80014c0 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800297e:	e00a      	b.n	8002996 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002980:	f7fe fd9e 	bl	80014c0 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e12a      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002996:	4b8b      	ldr	r3, [pc, #556]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ed      	beq.n	8002980 <HAL_RCC_OscConfig+0x53c>
 80029a4:	e015      	b.n	80029d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a6:	f7fe fd8b 	bl	80014c0 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029ac:	e00a      	b.n	80029c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ae:	f7fe fd87 	bl	80014c0 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029bc:	4293      	cmp	r3, r2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e113      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029c4:	4b7f      	ldr	r3, [pc, #508]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 80029c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1ed      	bne.n	80029ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029d2:	7ffb      	ldrb	r3, [r7, #31]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d105      	bne.n	80029e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d8:	4b7a      	ldr	r3, [pc, #488]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 80029da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029dc:	4a79      	ldr	r2, [pc, #484]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 80029de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029e2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80fe 	beq.w	8002bea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	f040 80d0 	bne.w	8002b98 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029f8:	4b72      	ldr	r3, [pc, #456]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f003 0203 	and.w	r2, r3, #3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d130      	bne.n	8002a6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	3b01      	subs	r3, #1
 8002a18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d127      	bne.n	8002a6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a28:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d11f      	bne.n	8002a6e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a38:	2a07      	cmp	r2, #7
 8002a3a:	bf14      	ite	ne
 8002a3c:	2201      	movne	r2, #1
 8002a3e:	2200      	moveq	r2, #0
 8002a40:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d113      	bne.n	8002a6e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a50:	085b      	lsrs	r3, r3, #1
 8002a52:	3b01      	subs	r3, #1
 8002a54:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d109      	bne.n	8002a6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a64:	085b      	lsrs	r3, r3, #1
 8002a66:	3b01      	subs	r3, #1
 8002a68:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d06e      	beq.n	8002b4c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2b0c      	cmp	r3, #12
 8002a72:	d069      	beq.n	8002b48 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a74:	4b53      	ldr	r3, [pc, #332]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a80:	4b50      	ldr	r3, [pc, #320]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0ad      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a90:	4b4c      	ldr	r3, [pc, #304]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a4b      	ldr	r2, [pc, #300]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002a96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a9a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a9c:	f7fe fd10 	bl	80014c0 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7fe fd0c 	bl	80014c0 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e09a      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab6:	4b43      	ldr	r3, [pc, #268]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ac2:	4b40      	ldr	r3, [pc, #256]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	4b40      	ldr	r3, [pc, #256]	@ (8002bc8 <HAL_RCC_OscConfig+0x784>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002ad2:	3a01      	subs	r2, #1
 8002ad4:	0112      	lsls	r2, r2, #4
 8002ad6:	4311      	orrs	r1, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002adc:	0212      	lsls	r2, r2, #8
 8002ade:	4311      	orrs	r1, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ae4:	0852      	lsrs	r2, r2, #1
 8002ae6:	3a01      	subs	r2, #1
 8002ae8:	0552      	lsls	r2, r2, #21
 8002aea:	4311      	orrs	r1, r2
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002af0:	0852      	lsrs	r2, r2, #1
 8002af2:	3a01      	subs	r2, #1
 8002af4:	0652      	lsls	r2, r2, #25
 8002af6:	4311      	orrs	r1, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002afc:	0912      	lsrs	r2, r2, #4
 8002afe:	0452      	lsls	r2, r2, #17
 8002b00:	430a      	orrs	r2, r1
 8002b02:	4930      	ldr	r1, [pc, #192]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b14:	4b2b      	ldr	r3, [pc, #172]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4a2a      	ldr	r2, [pc, #168]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b20:	f7fe fcce 	bl	80014c0 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b28:	f7fe fcca 	bl	80014c0 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e058      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b3a:	4b22      	ldr	r3, [pc, #136]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b46:	e050      	b.n	8002bea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e04f      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d148      	bne.n	8002bea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b58:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a19      	ldr	r2, [pc, #100]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b64:	4b17      	ldr	r3, [pc, #92]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4a16      	ldr	r2, [pc, #88]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b70:	f7fe fca6 	bl	80014c0 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe fca2 	bl	80014c0 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e030      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x734>
 8002b96:	e028      	b.n	8002bea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2b0c      	cmp	r3, #12
 8002b9c:	d023      	beq.n	8002be6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9e:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a08      	ldr	r2, [pc, #32]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002ba4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002baa:	f7fe fc89 	bl	80014c0 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb0:	e00c      	b.n	8002bcc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb2:	f7fe fc85 	bl	80014c0 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d905      	bls.n	8002bcc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e013      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bcc:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <HAL_RCC_OscConfig+0x7b0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1ec      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002bd8:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <HAL_RCC_OscConfig+0x7b0>)
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	4905      	ldr	r1, [pc, #20]	@ (8002bf4 <HAL_RCC_OscConfig+0x7b0>)
 8002bde:	4b06      	ldr	r3, [pc, #24]	@ (8002bf8 <HAL_RCC_OscConfig+0x7b4>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	60cb      	str	r3, [r1, #12]
 8002be4:	e001      	b.n	8002bea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3720      	adds	r7, #32
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	feeefffc 	.word	0xfeeefffc

08002bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0e7      	b.n	8002de0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c10:	4b75      	ldr	r3, [pc, #468]	@ (8002de8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d910      	bls.n	8002c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1e:	4b72      	ldr	r3, [pc, #456]	@ (8002de8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 0207 	bic.w	r2, r3, #7
 8002c26:	4970      	ldr	r1, [pc, #448]	@ (8002de8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b6e      	ldr	r3, [pc, #440]	@ (8002de8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0cf      	b.n	8002de0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d010      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	4b66      	ldr	r3, [pc, #408]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d908      	bls.n	8002c6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c5c:	4b63      	ldr	r3, [pc, #396]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4960      	ldr	r1, [pc, #384]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d04c      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d107      	bne.n	8002c92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c82:	4b5a      	ldr	r3, [pc, #360]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d121      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0a6      	b.n	8002de0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d107      	bne.n	8002caa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c9a:	4b54      	ldr	r3, [pc, #336]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d115      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e09a      	b.n	8002de0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d107      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cb2:	4b4e      	ldr	r3, [pc, #312]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e08e      	b.n	8002de0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cc2:	4b4a      	ldr	r3, [pc, #296]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e086      	b.n	8002de0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cd2:	4b46      	ldr	r3, [pc, #280]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f023 0203 	bic.w	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	4943      	ldr	r1, [pc, #268]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce4:	f7fe fbec 	bl	80014c0 <HAL_GetTick>
 8002ce8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cea:	e00a      	b.n	8002d02 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cec:	f7fe fbe8 	bl	80014c0 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e06e      	b.n	8002de0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d02:	4b3a      	ldr	r3, [pc, #232]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 020c 	and.w	r2, r3, #12
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d1eb      	bne.n	8002cec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d010      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	4b31      	ldr	r3, [pc, #196]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d208      	bcs.n	8002d42 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d30:	4b2e      	ldr	r3, [pc, #184]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	492b      	ldr	r1, [pc, #172]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d42:	4b29      	ldr	r3, [pc, #164]	@ (8002de8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d210      	bcs.n	8002d72 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d50:	4b25      	ldr	r3, [pc, #148]	@ (8002de8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f023 0207 	bic.w	r2, r3, #7
 8002d58:	4923      	ldr	r1, [pc, #140]	@ (8002de8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d60:	4b21      	ldr	r3, [pc, #132]	@ (8002de8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d001      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e036      	b.n	8002de0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d008      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	4918      	ldr	r1, [pc, #96]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d009      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d9c:	4b13      	ldr	r3, [pc, #76]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4910      	ldr	r1, [pc, #64]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002db0:	f000 f824 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8002db4:	4602      	mov	r2, r0
 8002db6:	4b0d      	ldr	r3, [pc, #52]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	091b      	lsrs	r3, r3, #4
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	490b      	ldr	r1, [pc, #44]	@ (8002df0 <HAL_RCC_ClockConfig+0x1f4>)
 8002dc2:	5ccb      	ldrb	r3, [r1, r3]
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dcc:	4a09      	ldr	r2, [pc, #36]	@ (8002df4 <HAL_RCC_ClockConfig+0x1f8>)
 8002dce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dd0:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <HAL_RCC_ClockConfig+0x1fc>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fe fa43 	bl	8001260 <HAL_InitTick>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dde:	7afb      	ldrb	r3, [r7, #11]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40022000 	.word	0x40022000
 8002dec:	40021000 	.word	0x40021000
 8002df0:	08007ca0 	.word	0x08007ca0
 8002df4:	20000024 	.word	0x20000024
 8002df8:	20000028 	.word	0x20000028

08002dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	@ 0x24
 8002e00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	2300      	movs	r3, #0
 8002e08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e14:	4b3b      	ldr	r3, [pc, #236]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x34>
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	2b0c      	cmp	r3, #12
 8002e28:	d121      	bne.n	8002e6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d11e      	bne.n	8002e6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e30:	4b34      	ldr	r3, [pc, #208]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e3c:	4b31      	ldr	r3, [pc, #196]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e42:	0a1b      	lsrs	r3, r3, #8
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	e005      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e58:	4a2b      	ldr	r2, [pc, #172]	@ (8002f08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10d      	bne.n	8002e84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e6c:	e00a      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d102      	bne.n	8002e7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e74:	4b25      	ldr	r3, [pc, #148]	@ (8002f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002e76:	61bb      	str	r3, [r7, #24]
 8002e78:	e004      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e80:	4b23      	ldr	r3, [pc, #140]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	2b0c      	cmp	r3, #12
 8002e88:	d134      	bne.n	8002ef4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d003      	beq.n	8002ea2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d003      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0xac>
 8002ea0:	e005      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ea4:	617b      	str	r3, [r7, #20]
      break;
 8002ea6:	e005      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ea8:	4b19      	ldr	r3, [pc, #100]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eaa:	617b      	str	r3, [r7, #20]
      break;
 8002eac:	e002      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	617b      	str	r3, [r7, #20]
      break;
 8002eb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002eb4:	4b13      	ldr	r3, [pc, #76]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ec2:	4b10      	ldr	r3, [pc, #64]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	fb03 f202 	mul.w	r2, r3, r2
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002eda:	4b0a      	ldr	r3, [pc, #40]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	0e5b      	lsrs	r3, r3, #25
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3724      	adds	r7, #36	@ 0x24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	08007cb8 	.word	0x08007cb8
 8002f0c:	00f42400 	.word	0x00f42400
 8002f10:	007a1200 	.word	0x007a1200

08002f14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f18:	4b03      	ldr	r3, [pc, #12]	@ (8002f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20000024 	.word	0x20000024

08002f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f30:	f7ff fff0 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f34:	4602      	mov	r2, r0
 8002f36:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	0a1b      	lsrs	r3, r3, #8
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	4904      	ldr	r1, [pc, #16]	@ (8002f54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f42:	5ccb      	ldrb	r3, [r1, r3]
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40021000 	.word	0x40021000
 8002f54:	08007cb0 	.word	0x08007cb0

08002f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f5c:	f7ff ffda 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b06      	ldr	r3, [pc, #24]	@ (8002f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	0adb      	lsrs	r3, r3, #11
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	4904      	ldr	r1, [pc, #16]	@ (8002f80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f6e:	5ccb      	ldrb	r3, [r1, r3]
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	08007cb0 	.word	0x08007cb0

08002f84 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	220f      	movs	r2, #15
 8002f92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002f94:	4b12      	ldr	r3, [pc, #72]	@ (8002fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0203 	and.w	r2, r3, #3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002fac:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002fb8:	4b09      	ldr	r3, [pc, #36]	@ (8002fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	08db      	lsrs	r3, r3, #3
 8002fbe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002fc6:	4b07      	ldr	r3, [pc, #28]	@ (8002fe4 <HAL_RCC_GetClockConfig+0x60>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0207 	and.w	r2, r3, #7
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	601a      	str	r2, [r3, #0]
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40022000 	.word	0x40022000

08002fe8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ff4:	4b2a      	ldr	r3, [pc, #168]	@ (80030a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003000:	f7ff f8f0 	bl	80021e4 <HAL_PWREx_GetVoltageRange>
 8003004:	6178      	str	r0, [r7, #20]
 8003006:	e014      	b.n	8003032 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003008:	4b25      	ldr	r3, [pc, #148]	@ (80030a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800300a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300c:	4a24      	ldr	r2, [pc, #144]	@ (80030a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800300e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003012:	6593      	str	r3, [r2, #88]	@ 0x58
 8003014:	4b22      	ldr	r3, [pc, #136]	@ (80030a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003020:	f7ff f8e0 	bl	80021e4 <HAL_PWREx_GetVoltageRange>
 8003024:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003026:	4b1e      	ldr	r3, [pc, #120]	@ (80030a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302a:	4a1d      	ldr	r2, [pc, #116]	@ (80030a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800302c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003030:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003038:	d10b      	bne.n	8003052 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b80      	cmp	r3, #128	@ 0x80
 800303e:	d919      	bls.n	8003074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2ba0      	cmp	r3, #160	@ 0xa0
 8003044:	d902      	bls.n	800304c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003046:	2302      	movs	r3, #2
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	e013      	b.n	8003074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800304c:	2301      	movs	r3, #1
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	e010      	b.n	8003074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b80      	cmp	r3, #128	@ 0x80
 8003056:	d902      	bls.n	800305e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003058:	2303      	movs	r3, #3
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	e00a      	b.n	8003074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b80      	cmp	r3, #128	@ 0x80
 8003062:	d102      	bne.n	800306a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003064:	2302      	movs	r3, #2
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	e004      	b.n	8003074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b70      	cmp	r3, #112	@ 0x70
 800306e:	d101      	bne.n	8003074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003070:	2301      	movs	r3, #1
 8003072:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003074:	4b0b      	ldr	r3, [pc, #44]	@ (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f023 0207 	bic.w	r2, r3, #7
 800307c:	4909      	ldr	r1, [pc, #36]	@ (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003084:	4b07      	ldr	r3, [pc, #28]	@ (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	429a      	cmp	r2, r3
 8003090:	d001      	beq.n	8003096 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40022000 	.word	0x40022000

080030a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030b0:	2300      	movs	r3, #0
 80030b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030b4:	2300      	movs	r3, #0
 80030b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d041      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80030cc:	d02a      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80030d2:	d824      	bhi.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030d8:	d008      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030de:	d81e      	bhi.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030e8:	d010      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030ea:	e018      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030ec:	4b86      	ldr	r3, [pc, #536]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a85      	ldr	r2, [pc, #532]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030f8:	e015      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3304      	adds	r3, #4
 80030fe:	2100      	movs	r1, #0
 8003100:	4618      	mov	r0, r3
 8003102:	f000 facb 	bl	800369c <RCCEx_PLLSAI1_Config>
 8003106:	4603      	mov	r3, r0
 8003108:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800310a:	e00c      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3320      	adds	r3, #32
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fbb6 	bl	8003884 <RCCEx_PLLSAI2_Config>
 8003118:	4603      	mov	r3, r0
 800311a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800311c:	e003      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	74fb      	strb	r3, [r7, #19]
      break;
 8003122:	e000      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003126:	7cfb      	ldrb	r3, [r7, #19]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10b      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800312c:	4b76      	ldr	r3, [pc, #472]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003132:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800313a:	4973      	ldr	r1, [pc, #460]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003142:	e001      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003144:	7cfb      	ldrb	r3, [r7, #19]
 8003146:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d041      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003158:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800315c:	d02a      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800315e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003162:	d824      	bhi.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003164:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003168:	d008      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800316a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800316e:	d81e      	bhi.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003174:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003178:	d010      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800317a:	e018      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800317c:	4b62      	ldr	r3, [pc, #392]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4a61      	ldr	r2, [pc, #388]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003186:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003188:	e015      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3304      	adds	r3, #4
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f000 fa83 	bl	800369c <RCCEx_PLLSAI1_Config>
 8003196:	4603      	mov	r3, r0
 8003198:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800319a:	e00c      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3320      	adds	r3, #32
 80031a0:	2100      	movs	r1, #0
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fb6e 	bl	8003884 <RCCEx_PLLSAI2_Config>
 80031a8:	4603      	mov	r3, r0
 80031aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031ac:	e003      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	74fb      	strb	r3, [r7, #19]
      break;
 80031b2:	e000      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80031b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031b6:	7cfb      	ldrb	r3, [r7, #19]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10b      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031bc:	4b52      	ldr	r3, [pc, #328]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031ca:	494f      	ldr	r1, [pc, #316]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80031d2:	e001      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d4:	7cfb      	ldrb	r3, [r7, #19]
 80031d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 80a0 	beq.w	8003326 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e6:	2300      	movs	r3, #0
 80031e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031ea:	4b47      	ldr	r3, [pc, #284]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80031fa:	2300      	movs	r3, #0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00d      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003200:	4b41      	ldr	r3, [pc, #260]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003204:	4a40      	ldr	r2, [pc, #256]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800320a:	6593      	str	r3, [r2, #88]	@ 0x58
 800320c:	4b3e      	ldr	r3, [pc, #248]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003218:	2301      	movs	r3, #1
 800321a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800321c:	4b3b      	ldr	r3, [pc, #236]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a3a      	ldr	r2, [pc, #232]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003226:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003228:	f7fe f94a 	bl	80014c0 <HAL_GetTick>
 800322c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800322e:	e009      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003230:	f7fe f946 	bl	80014c0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d902      	bls.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	74fb      	strb	r3, [r7, #19]
        break;
 8003242:	e005      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003244:	4b31      	ldr	r3, [pc, #196]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0ef      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003250:	7cfb      	ldrb	r3, [r7, #19]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d15c      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003256:	4b2c      	ldr	r3, [pc, #176]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800325c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003260:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01f      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	429a      	cmp	r2, r3
 8003272:	d019      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003274:	4b24      	ldr	r3, [pc, #144]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800327e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003280:	4b21      	ldr	r3, [pc, #132]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003286:	4a20      	ldr	r2, [pc, #128]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800328c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003290:	4b1d      	ldr	r3, [pc, #116]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003296:	4a1c      	ldr	r2, [pc, #112]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003298:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800329c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032a0:	4a19      	ldr	r2, [pc, #100]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d016      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b2:	f7fe f905 	bl	80014c0 <HAL_GetTick>
 80032b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b8:	e00b      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ba:	f7fe f901 	bl	80014c0 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d902      	bls.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	74fb      	strb	r3, [r7, #19]
            break;
 80032d0:	e006      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0ec      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80032e0:	7cfb      	ldrb	r3, [r7, #19]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10c      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032e6:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032f6:	4904      	ldr	r1, [pc, #16]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80032fe:	e009      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	74bb      	strb	r3, [r7, #18]
 8003304:	e006      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003310:	7cfb      	ldrb	r3, [r7, #19]
 8003312:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003314:	7c7b      	ldrb	r3, [r7, #17]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d105      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800331a:	4b9e      	ldr	r3, [pc, #632]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331e:	4a9d      	ldr	r2, [pc, #628]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003320:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003324:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003332:	4b98      	ldr	r3, [pc, #608]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003338:	f023 0203 	bic.w	r2, r3, #3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003340:	4994      	ldr	r1, [pc, #592]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003354:	4b8f      	ldr	r3, [pc, #572]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335a:	f023 020c 	bic.w	r2, r3, #12
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003362:	498c      	ldr	r1, [pc, #560]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003376:	4b87      	ldr	r3, [pc, #540]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	4983      	ldr	r1, [pc, #524]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003398:	4b7e      	ldr	r3, [pc, #504]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a6:	497b      	ldr	r1, [pc, #492]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033ba:	4b76      	ldr	r3, [pc, #472]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033c8:	4972      	ldr	r1, [pc, #456]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033dc:	4b6d      	ldr	r3, [pc, #436]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ea:	496a      	ldr	r1, [pc, #424]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033fe:	4b65      	ldr	r3, [pc, #404]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003404:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340c:	4961      	ldr	r1, [pc, #388]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003420:	4b5c      	ldr	r3, [pc, #368]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003426:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800342e:	4959      	ldr	r1, [pc, #356]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003442:	4b54      	ldr	r3, [pc, #336]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003448:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003450:	4950      	ldr	r1, [pc, #320]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003464:	4b4b      	ldr	r3, [pc, #300]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003472:	4948      	ldr	r1, [pc, #288]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003486:	4b43      	ldr	r3, [pc, #268]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003494:	493f      	ldr	r1, [pc, #252]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d028      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034a8:	4b3a      	ldr	r3, [pc, #232]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034b6:	4937      	ldr	r1, [pc, #220]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034c6:	d106      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034c8:	4b32      	ldr	r3, [pc, #200]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4a31      	ldr	r2, [pc, #196]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034d2:	60d3      	str	r3, [r2, #12]
 80034d4:	e011      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034de:	d10c      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3304      	adds	r3, #4
 80034e4:	2101      	movs	r1, #1
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 f8d8 	bl	800369c <RCCEx_PLLSAI1_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034f0:	7cfb      	ldrb	r3, [r7, #19]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80034f6:	7cfb      	ldrb	r3, [r7, #19]
 80034f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d028      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003506:	4b23      	ldr	r3, [pc, #140]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800350c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003514:	491f      	ldr	r1, [pc, #124]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003520:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003524:	d106      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003526:	4b1b      	ldr	r3, [pc, #108]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	4a1a      	ldr	r2, [pc, #104]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003530:	60d3      	str	r3, [r2, #12]
 8003532:	e011      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003538:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800353c:	d10c      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3304      	adds	r3, #4
 8003542:	2101      	movs	r1, #1
 8003544:	4618      	mov	r0, r3
 8003546:	f000 f8a9 	bl	800369c <RCCEx_PLLSAI1_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800354e:	7cfb      	ldrb	r3, [r7, #19]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d02b      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003564:	4b0b      	ldr	r3, [pc, #44]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003572:	4908      	ldr	r1, [pc, #32]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800357e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003582:	d109      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003584:	4b03      	ldr	r3, [pc, #12]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4a02      	ldr	r2, [pc, #8]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800358e:	60d3      	str	r3, [r2, #12]
 8003590:	e014      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800359c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035a0:	d10c      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3304      	adds	r3, #4
 80035a6:	2101      	movs	r1, #1
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 f877 	bl	800369c <RCCEx_PLLSAI1_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035b2:	7cfb      	ldrb	r3, [r7, #19]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80035b8:	7cfb      	ldrb	r3, [r7, #19]
 80035ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d02f      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035d6:	4928      	ldr	r1, [pc, #160]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035e6:	d10d      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3304      	adds	r3, #4
 80035ec:	2102      	movs	r1, #2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 f854 	bl	800369c <RCCEx_PLLSAI1_Config>
 80035f4:	4603      	mov	r3, r0
 80035f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035f8:	7cfb      	ldrb	r3, [r7, #19]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d014      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035fe:	7cfb      	ldrb	r3, [r7, #19]
 8003600:	74bb      	strb	r3, [r7, #18]
 8003602:	e011      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003608:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800360c:	d10c      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3320      	adds	r3, #32
 8003612:	2102      	movs	r1, #2
 8003614:	4618      	mov	r0, r3
 8003616:	f000 f935 	bl	8003884 <RCCEx_PLLSAI2_Config>
 800361a:	4603      	mov	r3, r0
 800361c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800361e:	7cfb      	ldrb	r3, [r7, #19]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003624:	7cfb      	ldrb	r3, [r7, #19]
 8003626:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003634:	4b10      	ldr	r3, [pc, #64]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800363a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003642:	490d      	ldr	r1, [pc, #52]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00b      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003656:	4b08      	ldr	r3, [pc, #32]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003666:	4904      	ldr	r1, [pc, #16]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800366e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40021000 	.word	0x40021000

0800367c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003680:	4b05      	ldr	r3, [pc, #20]	@ (8003698 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a04      	ldr	r2, [pc, #16]	@ (8003698 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003686:	f043 0304 	orr.w	r3, r3, #4
 800368a:	6013      	str	r3, [r2, #0]
}
 800368c:	bf00      	nop
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40021000 	.word	0x40021000

0800369c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036aa:	4b75      	ldr	r3, [pc, #468]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d018      	beq.n	80036e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036b6:	4b72      	ldr	r3, [pc, #456]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f003 0203 	and.w	r2, r3, #3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d10d      	bne.n	80036e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
       ||
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036ce:	4b6c      	ldr	r3, [pc, #432]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	091b      	lsrs	r3, r3, #4
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
       ||
 80036de:	429a      	cmp	r2, r3
 80036e0:	d047      	beq.n	8003772 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
 80036e6:	e044      	b.n	8003772 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d018      	beq.n	8003722 <RCCEx_PLLSAI1_Config+0x86>
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d825      	bhi.n	8003740 <RCCEx_PLLSAI1_Config+0xa4>
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d002      	beq.n	80036fe <RCCEx_PLLSAI1_Config+0x62>
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d009      	beq.n	8003710 <RCCEx_PLLSAI1_Config+0x74>
 80036fc:	e020      	b.n	8003740 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036fe:	4b60      	ldr	r3, [pc, #384]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d11d      	bne.n	8003746 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800370e:	e01a      	b.n	8003746 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003710:	4b5b      	ldr	r3, [pc, #364]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003718:	2b00      	cmp	r3, #0
 800371a:	d116      	bne.n	800374a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003720:	e013      	b.n	800374a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003722:	4b57      	ldr	r3, [pc, #348]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10f      	bne.n	800374e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800372e:	4b54      	ldr	r3, [pc, #336]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800373e:	e006      	b.n	800374e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
      break;
 8003744:	e004      	b.n	8003750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003746:	bf00      	nop
 8003748:	e002      	b.n	8003750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800374a:	bf00      	nop
 800374c:	e000      	b.n	8003750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800374e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10d      	bne.n	8003772 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003756:	4b4a      	ldr	r3, [pc, #296]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6819      	ldr	r1, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	3b01      	subs	r3, #1
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	430b      	orrs	r3, r1
 800376c:	4944      	ldr	r1, [pc, #272]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376e:	4313      	orrs	r3, r2
 8003770:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d17d      	bne.n	8003874 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003778:	4b41      	ldr	r3, [pc, #260]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a40      	ldr	r2, [pc, #256]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 800377e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003784:	f7fd fe9c 	bl	80014c0 <HAL_GetTick>
 8003788:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800378a:	e009      	b.n	80037a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800378c:	f7fd fe98 	bl	80014c0 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d902      	bls.n	80037a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	73fb      	strb	r3, [r7, #15]
        break;
 800379e:	e005      	b.n	80037ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037a0:	4b37      	ldr	r3, [pc, #220]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1ef      	bne.n	800378c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d160      	bne.n	8003874 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d111      	bne.n	80037dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037b8:	4b31      	ldr	r3, [pc, #196]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80037c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6892      	ldr	r2, [r2, #8]
 80037c8:	0211      	lsls	r1, r2, #8
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	68d2      	ldr	r2, [r2, #12]
 80037ce:	0912      	lsrs	r2, r2, #4
 80037d0:	0452      	lsls	r2, r2, #17
 80037d2:	430a      	orrs	r2, r1
 80037d4:	492a      	ldr	r1, [pc, #168]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	610b      	str	r3, [r1, #16]
 80037da:	e027      	b.n	800382c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d112      	bne.n	8003808 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037e2:	4b27      	ldr	r3, [pc, #156]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80037ea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6892      	ldr	r2, [r2, #8]
 80037f2:	0211      	lsls	r1, r2, #8
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6912      	ldr	r2, [r2, #16]
 80037f8:	0852      	lsrs	r2, r2, #1
 80037fa:	3a01      	subs	r2, #1
 80037fc:	0552      	lsls	r2, r2, #21
 80037fe:	430a      	orrs	r2, r1
 8003800:	491f      	ldr	r1, [pc, #124]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003802:	4313      	orrs	r3, r2
 8003804:	610b      	str	r3, [r1, #16]
 8003806:	e011      	b.n	800382c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003808:	4b1d      	ldr	r3, [pc, #116]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003810:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6892      	ldr	r2, [r2, #8]
 8003818:	0211      	lsls	r1, r2, #8
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6952      	ldr	r2, [r2, #20]
 800381e:	0852      	lsrs	r2, r2, #1
 8003820:	3a01      	subs	r2, #1
 8003822:	0652      	lsls	r2, r2, #25
 8003824:	430a      	orrs	r2, r1
 8003826:	4916      	ldr	r1, [pc, #88]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003828:	4313      	orrs	r3, r2
 800382a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800382c:	4b14      	ldr	r3, [pc, #80]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a13      	ldr	r2, [pc, #76]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003832:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003836:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fd fe42 	bl	80014c0 <HAL_GetTick>
 800383c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800383e:	e009      	b.n	8003854 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003840:	f7fd fe3e 	bl	80014c0 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d902      	bls.n	8003854 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	73fb      	strb	r3, [r7, #15]
          break;
 8003852:	e005      	b.n	8003860 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003854:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ef      	beq.n	8003840 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003866:	4b06      	ldr	r3, [pc, #24]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003868:	691a      	ldr	r2, [r3, #16]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	4904      	ldr	r1, [pc, #16]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003870:	4313      	orrs	r3, r2
 8003872:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003874:	7bfb      	ldrb	r3, [r7, #15]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000

08003884 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003892:	4b6a      	ldr	r3, [pc, #424]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d018      	beq.n	80038d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800389e:	4b67      	ldr	r3, [pc, #412]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0203 	and.w	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d10d      	bne.n	80038ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
       ||
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038b6:	4b61      	ldr	r3, [pc, #388]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	091b      	lsrs	r3, r3, #4
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
       ||
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d047      	beq.n	800395a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
 80038ce:	e044      	b.n	800395a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d018      	beq.n	800390a <RCCEx_PLLSAI2_Config+0x86>
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d825      	bhi.n	8003928 <RCCEx_PLLSAI2_Config+0xa4>
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d002      	beq.n	80038e6 <RCCEx_PLLSAI2_Config+0x62>
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d009      	beq.n	80038f8 <RCCEx_PLLSAI2_Config+0x74>
 80038e4:	e020      	b.n	8003928 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038e6:	4b55      	ldr	r3, [pc, #340]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d11d      	bne.n	800392e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f6:	e01a      	b.n	800392e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038f8:	4b50      	ldr	r3, [pc, #320]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003900:	2b00      	cmp	r3, #0
 8003902:	d116      	bne.n	8003932 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003908:	e013      	b.n	8003932 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800390a:	4b4c      	ldr	r3, [pc, #304]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10f      	bne.n	8003936 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003916:	4b49      	ldr	r3, [pc, #292]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003926:	e006      	b.n	8003936 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
      break;
 800392c:	e004      	b.n	8003938 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800392e:	bf00      	nop
 8003930:	e002      	b.n	8003938 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003932:	bf00      	nop
 8003934:	e000      	b.n	8003938 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003936:	bf00      	nop
    }

    if(status == HAL_OK)
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10d      	bne.n	800395a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800393e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6819      	ldr	r1, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	3b01      	subs	r3, #1
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	430b      	orrs	r3, r1
 8003954:	4939      	ldr	r1, [pc, #228]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003956:	4313      	orrs	r3, r2
 8003958:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800395a:	7bfb      	ldrb	r3, [r7, #15]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d167      	bne.n	8003a30 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003960:	4b36      	ldr	r3, [pc, #216]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a35      	ldr	r2, [pc, #212]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003966:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800396a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800396c:	f7fd fda8 	bl	80014c0 <HAL_GetTick>
 8003970:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003972:	e009      	b.n	8003988 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003974:	f7fd fda4 	bl	80014c0 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d902      	bls.n	8003988 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	73fb      	strb	r3, [r7, #15]
        break;
 8003986:	e005      	b.n	8003994 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003988:	4b2c      	ldr	r3, [pc, #176]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ef      	bne.n	8003974 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d14a      	bne.n	8003a30 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d111      	bne.n	80039c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039a0:	4b26      	ldr	r3, [pc, #152]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80039a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6892      	ldr	r2, [r2, #8]
 80039b0:	0211      	lsls	r1, r2, #8
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	68d2      	ldr	r2, [r2, #12]
 80039b6:	0912      	lsrs	r2, r2, #4
 80039b8:	0452      	lsls	r2, r2, #17
 80039ba:	430a      	orrs	r2, r1
 80039bc:	491f      	ldr	r1, [pc, #124]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	614b      	str	r3, [r1, #20]
 80039c2:	e011      	b.n	80039e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039c4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80039cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6892      	ldr	r2, [r2, #8]
 80039d4:	0211      	lsls	r1, r2, #8
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6912      	ldr	r2, [r2, #16]
 80039da:	0852      	lsrs	r2, r2, #1
 80039dc:	3a01      	subs	r2, #1
 80039de:	0652      	lsls	r2, r2, #25
 80039e0:	430a      	orrs	r2, r1
 80039e2:	4916      	ldr	r1, [pc, #88]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039e8:	4b14      	ldr	r3, [pc, #80]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a13      	ldr	r2, [pc, #76]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f4:	f7fd fd64 	bl	80014c0 <HAL_GetTick>
 80039f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039fa:	e009      	b.n	8003a10 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039fc:	f7fd fd60 	bl	80014c0 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d902      	bls.n	8003a10 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	73fb      	strb	r3, [r7, #15]
          break;
 8003a0e:	e005      	b.n	8003a1c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a10:	4b0a      	ldr	r3, [pc, #40]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0ef      	beq.n	80039fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a22:	4b06      	ldr	r3, [pc, #24]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	4904      	ldr	r1, [pc, #16]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000

08003a40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e095      	b.n	8003b7e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d108      	bne.n	8003a6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a62:	d009      	beq.n	8003a78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	61da      	str	r2, [r3, #28]
 8003a6a:	e005      	b.n	8003a78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fd fa60 	bl	8000f58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003aae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ab8:	d902      	bls.n	8003ac0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	e002      	b.n	8003ac6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ac0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ac4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003ace:	d007      	beq.n	8003ae0 <HAL_SPI_Init+0xa0>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ad8:	d002      	beq.n	8003ae0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b22:	ea42 0103 	orr.w	r1, r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	0c1b      	lsrs	r3, r3, #16
 8003b3c:	f003 0204 	and.w	r2, r3, #4
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003b5c:	ea42 0103 	orr.w	r1, r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e049      	b.n	8003c2c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d106      	bne.n	8003bb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f841 	bl	8003c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	f000 f9df 	bl	8003f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d001      	beq.n	8003c60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e04f      	b.n	8003d00 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a23      	ldr	r2, [pc, #140]	@ (8003d0c <HAL_TIM_Base_Start_IT+0xc4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d01d      	beq.n	8003cbe <HAL_TIM_Base_Start_IT+0x76>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c8a:	d018      	beq.n	8003cbe <HAL_TIM_Base_Start_IT+0x76>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1f      	ldr	r2, [pc, #124]	@ (8003d10 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <HAL_TIM_Base_Start_IT+0x76>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8003d14 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00e      	beq.n	8003cbe <HAL_TIM_Base_Start_IT+0x76>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8003d18 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d009      	beq.n	8003cbe <HAL_TIM_Base_Start_IT+0x76>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1b      	ldr	r2, [pc, #108]	@ (8003d1c <HAL_TIM_Base_Start_IT+0xd4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d004      	beq.n	8003cbe <HAL_TIM_Base_Start_IT+0x76>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a19      	ldr	r2, [pc, #100]	@ (8003d20 <HAL_TIM_Base_Start_IT+0xd8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d115      	bne.n	8003cea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	4b17      	ldr	r3, [pc, #92]	@ (8003d24 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b06      	cmp	r3, #6
 8003cce:	d015      	beq.n	8003cfc <HAL_TIM_Base_Start_IT+0xb4>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cd6:	d011      	beq.n	8003cfc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce8:	e008      	b.n	8003cfc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 0201 	orr.w	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	e000      	b.n	8003cfe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	40012c00 	.word	0x40012c00
 8003d10:	40000400 	.word	0x40000400
 8003d14:	40000800 	.word	0x40000800
 8003d18:	40000c00 	.word	0x40000c00
 8003d1c:	40013400 	.word	0x40013400
 8003d20:	40014000 	.word	0x40014000
 8003d24:	00010007 	.word	0x00010007

08003d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d020      	beq.n	8003d8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d01b      	beq.n	8003d8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0202 	mvn.w	r2, #2
 8003d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f8e9 	bl	8003f4a <HAL_TIM_IC_CaptureCallback>
 8003d78:	e005      	b.n	8003d86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f8db 	bl	8003f36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f8ec 	bl	8003f5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d020      	beq.n	8003dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01b      	beq.n	8003dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0204 	mvn.w	r2, #4
 8003da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2202      	movs	r2, #2
 8003dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f8c3 	bl	8003f4a <HAL_TIM_IC_CaptureCallback>
 8003dc4:	e005      	b.n	8003dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f8b5 	bl	8003f36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f8c6 	bl	8003f5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d020      	beq.n	8003e24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d01b      	beq.n	8003e24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f06f 0208 	mvn.w	r2, #8
 8003df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2204      	movs	r2, #4
 8003dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f89d 	bl	8003f4a <HAL_TIM_IC_CaptureCallback>
 8003e10:	e005      	b.n	8003e1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f88f 	bl	8003f36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f8a0 	bl	8003f5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d020      	beq.n	8003e70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d01b      	beq.n	8003e70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0210 	mvn.w	r2, #16
 8003e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2208      	movs	r2, #8
 8003e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f877 	bl	8003f4a <HAL_TIM_IC_CaptureCallback>
 8003e5c:	e005      	b.n	8003e6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f869 	bl	8003f36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f87a 	bl	8003f5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00c      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d007      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f06f 0201 	mvn.w	r2, #1
 8003e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fc ff1c 	bl	8000ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d104      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00c      	beq.n	8003ec2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d007      	beq.n	8003ec2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f913 	bl	80040e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00c      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f90b 	bl	80040fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00c      	beq.n	8003f0a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d007      	beq.n	8003f0a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f834 	bl	8003f72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00c      	beq.n	8003f2e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f06f 0220 	mvn.w	r2, #32
 8003f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f8d3 	bl	80040d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f2e:	bf00      	nop
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a46      	ldr	r2, [pc, #280]	@ (80040b4 <TIM_Base_SetConfig+0x12c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d013      	beq.n	8003fc8 <TIM_Base_SetConfig+0x40>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fa6:	d00f      	beq.n	8003fc8 <TIM_Base_SetConfig+0x40>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a43      	ldr	r2, [pc, #268]	@ (80040b8 <TIM_Base_SetConfig+0x130>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00b      	beq.n	8003fc8 <TIM_Base_SetConfig+0x40>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a42      	ldr	r2, [pc, #264]	@ (80040bc <TIM_Base_SetConfig+0x134>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d007      	beq.n	8003fc8 <TIM_Base_SetConfig+0x40>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a41      	ldr	r2, [pc, #260]	@ (80040c0 <TIM_Base_SetConfig+0x138>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d003      	beq.n	8003fc8 <TIM_Base_SetConfig+0x40>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a40      	ldr	r2, [pc, #256]	@ (80040c4 <TIM_Base_SetConfig+0x13c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d108      	bne.n	8003fda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a35      	ldr	r2, [pc, #212]	@ (80040b4 <TIM_Base_SetConfig+0x12c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d01f      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe8:	d01b      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a32      	ldr	r2, [pc, #200]	@ (80040b8 <TIM_Base_SetConfig+0x130>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d017      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a31      	ldr	r2, [pc, #196]	@ (80040bc <TIM_Base_SetConfig+0x134>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a30      	ldr	r2, [pc, #192]	@ (80040c0 <TIM_Base_SetConfig+0x138>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00f      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a2f      	ldr	r2, [pc, #188]	@ (80040c4 <TIM_Base_SetConfig+0x13c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00b      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a2e      	ldr	r2, [pc, #184]	@ (80040c8 <TIM_Base_SetConfig+0x140>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d007      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a2d      	ldr	r2, [pc, #180]	@ (80040cc <TIM_Base_SetConfig+0x144>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d003      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a2c      	ldr	r2, [pc, #176]	@ (80040d0 <TIM_Base_SetConfig+0x148>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d108      	bne.n	8004034 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4313      	orrs	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a16      	ldr	r2, [pc, #88]	@ (80040b4 <TIM_Base_SetConfig+0x12c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00f      	beq.n	8004080 <TIM_Base_SetConfig+0xf8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a18      	ldr	r2, [pc, #96]	@ (80040c4 <TIM_Base_SetConfig+0x13c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00b      	beq.n	8004080 <TIM_Base_SetConfig+0xf8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a17      	ldr	r2, [pc, #92]	@ (80040c8 <TIM_Base_SetConfig+0x140>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d007      	beq.n	8004080 <TIM_Base_SetConfig+0xf8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a16      	ldr	r2, [pc, #88]	@ (80040cc <TIM_Base_SetConfig+0x144>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d003      	beq.n	8004080 <TIM_Base_SetConfig+0xf8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a15      	ldr	r2, [pc, #84]	@ (80040d0 <TIM_Base_SetConfig+0x148>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d103      	bne.n	8004088 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b01      	cmp	r3, #1
 8004098:	d105      	bne.n	80040a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	f023 0201 	bic.w	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	611a      	str	r2, [r3, #16]
  }
}
 80040a6:	bf00      	nop
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40012c00 	.word	0x40012c00
 80040b8:	40000400 	.word	0x40000400
 80040bc:	40000800 	.word	0x40000800
 80040c0:	40000c00 	.word	0x40000c00
 80040c4:	40013400 	.word	0x40013400
 80040c8:	40014000 	.word	0x40014000
 80040cc:	40014400 	.word	0x40014400
 80040d0:	40014800 	.word	0x40014800

080040d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e040      	b.n	80041a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d106      	bne.n	8004138 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7fc ff54 	bl	8000fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2224      	movs	r2, #36	@ 0x24
 800413c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0201 	bic.w	r2, r2, #1
 800414c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fae0 	bl	800471c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f825 	bl	80041ac <UART_SetConfig>
 8004162:	4603      	mov	r3, r0
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e01b      	b.n	80041a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800417a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800418a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fb5f 	bl	8004860 <UART_CheckIdleState>
 80041a2:	4603      	mov	r3, r0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b0:	b08a      	sub	sp, #40	@ 0x28
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	431a      	orrs	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	431a      	orrs	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	4ba4      	ldr	r3, [pc, #656]	@ (800446c <UART_SetConfig+0x2c0>)
 80041dc:	4013      	ands	r3, r2
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	6812      	ldr	r2, [r2, #0]
 80041e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041e4:	430b      	orrs	r3, r1
 80041e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a99      	ldr	r2, [pc, #612]	@ (8004470 <UART_SetConfig+0x2c4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d004      	beq.n	8004218 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004214:	4313      	orrs	r3, r2
 8004216:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004228:	430a      	orrs	r2, r1
 800422a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a90      	ldr	r2, [pc, #576]	@ (8004474 <UART_SetConfig+0x2c8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d126      	bne.n	8004284 <UART_SetConfig+0xd8>
 8004236:	4b90      	ldr	r3, [pc, #576]	@ (8004478 <UART_SetConfig+0x2cc>)
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	2b03      	cmp	r3, #3
 8004242:	d81b      	bhi.n	800427c <UART_SetConfig+0xd0>
 8004244:	a201      	add	r2, pc, #4	@ (adr r2, 800424c <UART_SetConfig+0xa0>)
 8004246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424a:	bf00      	nop
 800424c:	0800425d 	.word	0x0800425d
 8004250:	0800426d 	.word	0x0800426d
 8004254:	08004265 	.word	0x08004265
 8004258:	08004275 	.word	0x08004275
 800425c:	2301      	movs	r3, #1
 800425e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004262:	e116      	b.n	8004492 <UART_SetConfig+0x2e6>
 8004264:	2302      	movs	r3, #2
 8004266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800426a:	e112      	b.n	8004492 <UART_SetConfig+0x2e6>
 800426c:	2304      	movs	r3, #4
 800426e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004272:	e10e      	b.n	8004492 <UART_SetConfig+0x2e6>
 8004274:	2308      	movs	r3, #8
 8004276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800427a:	e10a      	b.n	8004492 <UART_SetConfig+0x2e6>
 800427c:	2310      	movs	r3, #16
 800427e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004282:	e106      	b.n	8004492 <UART_SetConfig+0x2e6>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a7c      	ldr	r2, [pc, #496]	@ (800447c <UART_SetConfig+0x2d0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d138      	bne.n	8004300 <UART_SetConfig+0x154>
 800428e:	4b7a      	ldr	r3, [pc, #488]	@ (8004478 <UART_SetConfig+0x2cc>)
 8004290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004294:	f003 030c 	and.w	r3, r3, #12
 8004298:	2b0c      	cmp	r3, #12
 800429a:	d82d      	bhi.n	80042f8 <UART_SetConfig+0x14c>
 800429c:	a201      	add	r2, pc, #4	@ (adr r2, 80042a4 <UART_SetConfig+0xf8>)
 800429e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a2:	bf00      	nop
 80042a4:	080042d9 	.word	0x080042d9
 80042a8:	080042f9 	.word	0x080042f9
 80042ac:	080042f9 	.word	0x080042f9
 80042b0:	080042f9 	.word	0x080042f9
 80042b4:	080042e9 	.word	0x080042e9
 80042b8:	080042f9 	.word	0x080042f9
 80042bc:	080042f9 	.word	0x080042f9
 80042c0:	080042f9 	.word	0x080042f9
 80042c4:	080042e1 	.word	0x080042e1
 80042c8:	080042f9 	.word	0x080042f9
 80042cc:	080042f9 	.word	0x080042f9
 80042d0:	080042f9 	.word	0x080042f9
 80042d4:	080042f1 	.word	0x080042f1
 80042d8:	2300      	movs	r3, #0
 80042da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042de:	e0d8      	b.n	8004492 <UART_SetConfig+0x2e6>
 80042e0:	2302      	movs	r3, #2
 80042e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042e6:	e0d4      	b.n	8004492 <UART_SetConfig+0x2e6>
 80042e8:	2304      	movs	r3, #4
 80042ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ee:	e0d0      	b.n	8004492 <UART_SetConfig+0x2e6>
 80042f0:	2308      	movs	r3, #8
 80042f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042f6:	e0cc      	b.n	8004492 <UART_SetConfig+0x2e6>
 80042f8:	2310      	movs	r3, #16
 80042fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042fe:	e0c8      	b.n	8004492 <UART_SetConfig+0x2e6>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a5e      	ldr	r2, [pc, #376]	@ (8004480 <UART_SetConfig+0x2d4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d125      	bne.n	8004356 <UART_SetConfig+0x1aa>
 800430a:	4b5b      	ldr	r3, [pc, #364]	@ (8004478 <UART_SetConfig+0x2cc>)
 800430c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004310:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004314:	2b30      	cmp	r3, #48	@ 0x30
 8004316:	d016      	beq.n	8004346 <UART_SetConfig+0x19a>
 8004318:	2b30      	cmp	r3, #48	@ 0x30
 800431a:	d818      	bhi.n	800434e <UART_SetConfig+0x1a2>
 800431c:	2b20      	cmp	r3, #32
 800431e:	d00a      	beq.n	8004336 <UART_SetConfig+0x18a>
 8004320:	2b20      	cmp	r3, #32
 8004322:	d814      	bhi.n	800434e <UART_SetConfig+0x1a2>
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <UART_SetConfig+0x182>
 8004328:	2b10      	cmp	r3, #16
 800432a:	d008      	beq.n	800433e <UART_SetConfig+0x192>
 800432c:	e00f      	b.n	800434e <UART_SetConfig+0x1a2>
 800432e:	2300      	movs	r3, #0
 8004330:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004334:	e0ad      	b.n	8004492 <UART_SetConfig+0x2e6>
 8004336:	2302      	movs	r3, #2
 8004338:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800433c:	e0a9      	b.n	8004492 <UART_SetConfig+0x2e6>
 800433e:	2304      	movs	r3, #4
 8004340:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004344:	e0a5      	b.n	8004492 <UART_SetConfig+0x2e6>
 8004346:	2308      	movs	r3, #8
 8004348:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800434c:	e0a1      	b.n	8004492 <UART_SetConfig+0x2e6>
 800434e:	2310      	movs	r3, #16
 8004350:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004354:	e09d      	b.n	8004492 <UART_SetConfig+0x2e6>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a4a      	ldr	r2, [pc, #296]	@ (8004484 <UART_SetConfig+0x2d8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d125      	bne.n	80043ac <UART_SetConfig+0x200>
 8004360:	4b45      	ldr	r3, [pc, #276]	@ (8004478 <UART_SetConfig+0x2cc>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004366:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800436a:	2bc0      	cmp	r3, #192	@ 0xc0
 800436c:	d016      	beq.n	800439c <UART_SetConfig+0x1f0>
 800436e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004370:	d818      	bhi.n	80043a4 <UART_SetConfig+0x1f8>
 8004372:	2b80      	cmp	r3, #128	@ 0x80
 8004374:	d00a      	beq.n	800438c <UART_SetConfig+0x1e0>
 8004376:	2b80      	cmp	r3, #128	@ 0x80
 8004378:	d814      	bhi.n	80043a4 <UART_SetConfig+0x1f8>
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <UART_SetConfig+0x1d8>
 800437e:	2b40      	cmp	r3, #64	@ 0x40
 8004380:	d008      	beq.n	8004394 <UART_SetConfig+0x1e8>
 8004382:	e00f      	b.n	80043a4 <UART_SetConfig+0x1f8>
 8004384:	2300      	movs	r3, #0
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800438a:	e082      	b.n	8004492 <UART_SetConfig+0x2e6>
 800438c:	2302      	movs	r3, #2
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004392:	e07e      	b.n	8004492 <UART_SetConfig+0x2e6>
 8004394:	2304      	movs	r3, #4
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800439a:	e07a      	b.n	8004492 <UART_SetConfig+0x2e6>
 800439c:	2308      	movs	r3, #8
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043a2:	e076      	b.n	8004492 <UART_SetConfig+0x2e6>
 80043a4:	2310      	movs	r3, #16
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043aa:	e072      	b.n	8004492 <UART_SetConfig+0x2e6>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a35      	ldr	r2, [pc, #212]	@ (8004488 <UART_SetConfig+0x2dc>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d12a      	bne.n	800440c <UART_SetConfig+0x260>
 80043b6:	4b30      	ldr	r3, [pc, #192]	@ (8004478 <UART_SetConfig+0x2cc>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043c4:	d01a      	beq.n	80043fc <UART_SetConfig+0x250>
 80043c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ca:	d81b      	bhi.n	8004404 <UART_SetConfig+0x258>
 80043cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043d0:	d00c      	beq.n	80043ec <UART_SetConfig+0x240>
 80043d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043d6:	d815      	bhi.n	8004404 <UART_SetConfig+0x258>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <UART_SetConfig+0x238>
 80043dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043e0:	d008      	beq.n	80043f4 <UART_SetConfig+0x248>
 80043e2:	e00f      	b.n	8004404 <UART_SetConfig+0x258>
 80043e4:	2300      	movs	r3, #0
 80043e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ea:	e052      	b.n	8004492 <UART_SetConfig+0x2e6>
 80043ec:	2302      	movs	r3, #2
 80043ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043f2:	e04e      	b.n	8004492 <UART_SetConfig+0x2e6>
 80043f4:	2304      	movs	r3, #4
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043fa:	e04a      	b.n	8004492 <UART_SetConfig+0x2e6>
 80043fc:	2308      	movs	r3, #8
 80043fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004402:	e046      	b.n	8004492 <UART_SetConfig+0x2e6>
 8004404:	2310      	movs	r3, #16
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800440a:	e042      	b.n	8004492 <UART_SetConfig+0x2e6>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a17      	ldr	r2, [pc, #92]	@ (8004470 <UART_SetConfig+0x2c4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d13a      	bne.n	800448c <UART_SetConfig+0x2e0>
 8004416:	4b18      	ldr	r3, [pc, #96]	@ (8004478 <UART_SetConfig+0x2cc>)
 8004418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004420:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004424:	d01a      	beq.n	800445c <UART_SetConfig+0x2b0>
 8004426:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800442a:	d81b      	bhi.n	8004464 <UART_SetConfig+0x2b8>
 800442c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004430:	d00c      	beq.n	800444c <UART_SetConfig+0x2a0>
 8004432:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004436:	d815      	bhi.n	8004464 <UART_SetConfig+0x2b8>
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <UART_SetConfig+0x298>
 800443c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004440:	d008      	beq.n	8004454 <UART_SetConfig+0x2a8>
 8004442:	e00f      	b.n	8004464 <UART_SetConfig+0x2b8>
 8004444:	2300      	movs	r3, #0
 8004446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800444a:	e022      	b.n	8004492 <UART_SetConfig+0x2e6>
 800444c:	2302      	movs	r3, #2
 800444e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004452:	e01e      	b.n	8004492 <UART_SetConfig+0x2e6>
 8004454:	2304      	movs	r3, #4
 8004456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800445a:	e01a      	b.n	8004492 <UART_SetConfig+0x2e6>
 800445c:	2308      	movs	r3, #8
 800445e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004462:	e016      	b.n	8004492 <UART_SetConfig+0x2e6>
 8004464:	2310      	movs	r3, #16
 8004466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800446a:	e012      	b.n	8004492 <UART_SetConfig+0x2e6>
 800446c:	efff69f3 	.word	0xefff69f3
 8004470:	40008000 	.word	0x40008000
 8004474:	40013800 	.word	0x40013800
 8004478:	40021000 	.word	0x40021000
 800447c:	40004400 	.word	0x40004400
 8004480:	40004800 	.word	0x40004800
 8004484:	40004c00 	.word	0x40004c00
 8004488:	40005000 	.word	0x40005000
 800448c:	2310      	movs	r3, #16
 800448e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a9f      	ldr	r2, [pc, #636]	@ (8004714 <UART_SetConfig+0x568>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d17a      	bne.n	8004592 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800449c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d824      	bhi.n	80044ee <UART_SetConfig+0x342>
 80044a4:	a201      	add	r2, pc, #4	@ (adr r2, 80044ac <UART_SetConfig+0x300>)
 80044a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044aa:	bf00      	nop
 80044ac:	080044d1 	.word	0x080044d1
 80044b0:	080044ef 	.word	0x080044ef
 80044b4:	080044d9 	.word	0x080044d9
 80044b8:	080044ef 	.word	0x080044ef
 80044bc:	080044df 	.word	0x080044df
 80044c0:	080044ef 	.word	0x080044ef
 80044c4:	080044ef 	.word	0x080044ef
 80044c8:	080044ef 	.word	0x080044ef
 80044cc:	080044e7 	.word	0x080044e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d0:	f7fe fd2c 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 80044d4:	61f8      	str	r0, [r7, #28]
        break;
 80044d6:	e010      	b.n	80044fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044d8:	4b8f      	ldr	r3, [pc, #572]	@ (8004718 <UART_SetConfig+0x56c>)
 80044da:	61fb      	str	r3, [r7, #28]
        break;
 80044dc:	e00d      	b.n	80044fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044de:	f7fe fc8d 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 80044e2:	61f8      	str	r0, [r7, #28]
        break;
 80044e4:	e009      	b.n	80044fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044ea:	61fb      	str	r3, [r7, #28]
        break;
 80044ec:	e005      	b.n	80044fa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80044f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 80fb 	beq.w	80046f8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	4613      	mov	r3, r2
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	4413      	add	r3, r2
 800450c:	69fa      	ldr	r2, [r7, #28]
 800450e:	429a      	cmp	r2, r3
 8004510:	d305      	bcc.n	800451e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004518:	69fa      	ldr	r2, [r7, #28]
 800451a:	429a      	cmp	r2, r3
 800451c:	d903      	bls.n	8004526 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004524:	e0e8      	b.n	80046f8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	2200      	movs	r2, #0
 800452a:	461c      	mov	r4, r3
 800452c:	4615      	mov	r5, r2
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	022b      	lsls	r3, r5, #8
 8004538:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800453c:	0222      	lsls	r2, r4, #8
 800453e:	68f9      	ldr	r1, [r7, #12]
 8004540:	6849      	ldr	r1, [r1, #4]
 8004542:	0849      	lsrs	r1, r1, #1
 8004544:	2000      	movs	r0, #0
 8004546:	4688      	mov	r8, r1
 8004548:	4681      	mov	r9, r0
 800454a:	eb12 0a08 	adds.w	sl, r2, r8
 800454e:	eb43 0b09 	adc.w	fp, r3, r9
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	603b      	str	r3, [r7, #0]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004560:	4650      	mov	r0, sl
 8004562:	4659      	mov	r1, fp
 8004564:	f7fb fe34 	bl	80001d0 <__aeabi_uldivmod>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	4613      	mov	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004576:	d308      	bcc.n	800458a <UART_SetConfig+0x3de>
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800457e:	d204      	bcs.n	800458a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	60da      	str	r2, [r3, #12]
 8004588:	e0b6      	b.n	80046f8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004590:	e0b2      	b.n	80046f8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800459a:	d15e      	bne.n	800465a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800459c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d828      	bhi.n	80045f6 <UART_SetConfig+0x44a>
 80045a4:	a201      	add	r2, pc, #4	@ (adr r2, 80045ac <UART_SetConfig+0x400>)
 80045a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045aa:	bf00      	nop
 80045ac:	080045d1 	.word	0x080045d1
 80045b0:	080045d9 	.word	0x080045d9
 80045b4:	080045e1 	.word	0x080045e1
 80045b8:	080045f7 	.word	0x080045f7
 80045bc:	080045e7 	.word	0x080045e7
 80045c0:	080045f7 	.word	0x080045f7
 80045c4:	080045f7 	.word	0x080045f7
 80045c8:	080045f7 	.word	0x080045f7
 80045cc:	080045ef 	.word	0x080045ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d0:	f7fe fcac 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 80045d4:	61f8      	str	r0, [r7, #28]
        break;
 80045d6:	e014      	b.n	8004602 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045d8:	f7fe fcbe 	bl	8002f58 <HAL_RCC_GetPCLK2Freq>
 80045dc:	61f8      	str	r0, [r7, #28]
        break;
 80045de:	e010      	b.n	8004602 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e0:	4b4d      	ldr	r3, [pc, #308]	@ (8004718 <UART_SetConfig+0x56c>)
 80045e2:	61fb      	str	r3, [r7, #28]
        break;
 80045e4:	e00d      	b.n	8004602 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045e6:	f7fe fc09 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 80045ea:	61f8      	str	r0, [r7, #28]
        break;
 80045ec:	e009      	b.n	8004602 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045f2:	61fb      	str	r3, [r7, #28]
        break;
 80045f4:	e005      	b.n	8004602 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004600:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d077      	beq.n	80046f8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	005a      	lsls	r2, r3, #1
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	085b      	lsrs	r3, r3, #1
 8004612:	441a      	add	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	fbb2 f3f3 	udiv	r3, r2, r3
 800461c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	2b0f      	cmp	r3, #15
 8004622:	d916      	bls.n	8004652 <UART_SetConfig+0x4a6>
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800462a:	d212      	bcs.n	8004652 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	b29b      	uxth	r3, r3
 8004630:	f023 030f 	bic.w	r3, r3, #15
 8004634:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	085b      	lsrs	r3, r3, #1
 800463a:	b29b      	uxth	r3, r3
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	b29a      	uxth	r2, r3
 8004642:	8afb      	ldrh	r3, [r7, #22]
 8004644:	4313      	orrs	r3, r2
 8004646:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	8afa      	ldrh	r2, [r7, #22]
 800464e:	60da      	str	r2, [r3, #12]
 8004650:	e052      	b.n	80046f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004658:	e04e      	b.n	80046f8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800465a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800465e:	2b08      	cmp	r3, #8
 8004660:	d827      	bhi.n	80046b2 <UART_SetConfig+0x506>
 8004662:	a201      	add	r2, pc, #4	@ (adr r2, 8004668 <UART_SetConfig+0x4bc>)
 8004664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004668:	0800468d 	.word	0x0800468d
 800466c:	08004695 	.word	0x08004695
 8004670:	0800469d 	.word	0x0800469d
 8004674:	080046b3 	.word	0x080046b3
 8004678:	080046a3 	.word	0x080046a3
 800467c:	080046b3 	.word	0x080046b3
 8004680:	080046b3 	.word	0x080046b3
 8004684:	080046b3 	.word	0x080046b3
 8004688:	080046ab 	.word	0x080046ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800468c:	f7fe fc4e 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 8004690:	61f8      	str	r0, [r7, #28]
        break;
 8004692:	e014      	b.n	80046be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004694:	f7fe fc60 	bl	8002f58 <HAL_RCC_GetPCLK2Freq>
 8004698:	61f8      	str	r0, [r7, #28]
        break;
 800469a:	e010      	b.n	80046be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800469c:	4b1e      	ldr	r3, [pc, #120]	@ (8004718 <UART_SetConfig+0x56c>)
 800469e:	61fb      	str	r3, [r7, #28]
        break;
 80046a0:	e00d      	b.n	80046be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046a2:	f7fe fbab 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 80046a6:	61f8      	str	r0, [r7, #28]
        break;
 80046a8:	e009      	b.n	80046be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ae:	61fb      	str	r3, [r7, #28]
        break;
 80046b0:	e005      	b.n	80046be <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046bc:	bf00      	nop
    }

    if (pclk != 0U)
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d019      	beq.n	80046f8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	085a      	lsrs	r2, r3, #1
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	441a      	add	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	2b0f      	cmp	r3, #15
 80046dc:	d909      	bls.n	80046f2 <UART_SetConfig+0x546>
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e4:	d205      	bcs.n	80046f2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60da      	str	r2, [r3, #12]
 80046f0:	e002      	b.n	80046f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004704:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004708:	4618      	mov	r0, r3
 800470a:	3728      	adds	r7, #40	@ 0x28
 800470c:	46bd      	mov	sp, r7
 800470e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004712:	bf00      	nop
 8004714:	40008000 	.word	0x40008000
 8004718:	00f42400 	.word	0x00f42400

0800471c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01a      	beq.n	8004832 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800481a:	d10a      	bne.n	8004832 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	605a      	str	r2, [r3, #4]
  }
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b098      	sub	sp, #96	@ 0x60
 8004864:	af02      	add	r7, sp, #8
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004870:	f7fc fe26 	bl	80014c0 <HAL_GetTick>
 8004874:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b08      	cmp	r3, #8
 8004882:	d12e      	bne.n	80048e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004884:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800488c:	2200      	movs	r2, #0
 800488e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f88c 	bl	80049b0 <UART_WaitOnFlagUntilTimeout>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d021      	beq.n	80048e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	461a      	mov	r2, r3
 80048ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80048be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048c4:	e841 2300 	strex	r3, r2, [r1]
 80048c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e6      	bne.n	800489e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e062      	b.n	80049a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d149      	bne.n	8004984 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f8:	2200      	movs	r2, #0
 80048fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f856 	bl	80049b0 <UART_WaitOnFlagUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d03c      	beq.n	8004984 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004912:	e853 3f00 	ldrex	r3, [r3]
 8004916:	623b      	str	r3, [r7, #32]
   return(result);
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800491e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004928:	633b      	str	r3, [r7, #48]	@ 0x30
 800492a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800492e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004930:	e841 2300 	strex	r3, r2, [r1]
 8004934:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e6      	bne.n	800490a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3308      	adds	r3, #8
 8004942:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	60fb      	str	r3, [r7, #12]
   return(result);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0301 	bic.w	r3, r3, #1
 8004952:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3308      	adds	r3, #8
 800495a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800495c:	61fa      	str	r2, [r7, #28]
 800495e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	69b9      	ldr	r1, [r7, #24]
 8004962:	69fa      	ldr	r2, [r7, #28]
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	617b      	str	r3, [r7, #20]
   return(result);
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e5      	bne.n	800493c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e011      	b.n	80049a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2220      	movs	r2, #32
 8004988:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3758      	adds	r7, #88	@ 0x58
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	603b      	str	r3, [r7, #0]
 80049bc:	4613      	mov	r3, r2
 80049be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049c0:	e04f      	b.n	8004a62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c8:	d04b      	beq.n	8004a62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ca:	f7fc fd79 	bl	80014c0 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d302      	bcc.n	80049e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e04e      	b.n	8004a82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d037      	beq.n	8004a62 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b80      	cmp	r3, #128	@ 0x80
 80049f6:	d034      	beq.n	8004a62 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b40      	cmp	r3, #64	@ 0x40
 80049fc:	d031      	beq.n	8004a62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d110      	bne.n	8004a2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2208      	movs	r2, #8
 8004a12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f838 	bl	8004a8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2208      	movs	r2, #8
 8004a1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e029      	b.n	8004a82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a3c:	d111      	bne.n	8004a62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 f81e 	bl	8004a8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e00f      	b.n	8004a82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	69da      	ldr	r2, [r3, #28]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	bf0c      	ite	eq
 8004a72:	2301      	moveq	r3, #1
 8004a74:	2300      	movne	r3, #0
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	461a      	mov	r2, r3
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d0a0      	beq.n	80049c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b095      	sub	sp, #84	@ 0x54
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ab0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ab2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ab6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e6      	bne.n	8004a92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3308      	adds	r3, #8
 8004aca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	e853 3f00 	ldrex	r3, [r3]
 8004ad2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	f023 0301 	bic.w	r3, r3, #1
 8004ada:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3308      	adds	r3, #8
 8004ae2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ae4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004aec:	e841 2300 	strex	r3, r2, [r1]
 8004af0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e5      	bne.n	8004ac4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d118      	bne.n	8004b32 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	e853 3f00 	ldrex	r3, [r3]
 8004b0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f023 0310 	bic.w	r3, r3, #16
 8004b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b1e:	61bb      	str	r3, [r7, #24]
 8004b20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	6979      	ldr	r1, [r7, #20]
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e6      	bne.n	8004b00 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b46:	bf00      	nop
 8004b48:	3754      	adds	r7, #84	@ 0x54
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b52:	b084      	sub	sp, #16
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	f107 001c 	add.w	r0, r7, #28
 8004b60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fa69 	bl	8005048 <USB_CoreReset>
 8004b76:	4603      	mov	r3, r0
 8004b78:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004b7a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b86:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b8e:	e005      	b.n	8004b9c <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b94:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ba8:	b004      	add	sp, #16
 8004baa:	4770      	bx	lr

08004bac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f023 0201 	bic.w	r2, r3, #1
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b084      	sub	sp, #16
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d115      	bne.n	8004c1c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004bfc:	200a      	movs	r0, #10
 8004bfe:	f7fc fc6b 	bl	80014d8 <HAL_Delay>
      ms += 10U;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	330a      	adds	r3, #10
 8004c06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fa0f 	bl	800502c <USB_GetMode>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d01e      	beq.n	8004c52 <USB_SetCurrentMode+0x84>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2bc7      	cmp	r3, #199	@ 0xc7
 8004c18:	d9f0      	bls.n	8004bfc <USB_SetCurrentMode+0x2e>
 8004c1a:	e01a      	b.n	8004c52 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c1c:	78fb      	ldrb	r3, [r7, #3]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d115      	bne.n	8004c4e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004c2e:	200a      	movs	r0, #10
 8004c30:	f7fc fc52 	bl	80014d8 <HAL_Delay>
      ms += 10U;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	330a      	adds	r3, #10
 8004c38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f9f6 	bl	800502c <USB_GetMode>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <USB_SetCurrentMode+0x84>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2bc7      	cmp	r3, #199	@ 0xc7
 8004c4a:	d9f0      	bls.n	8004c2e <USB_SetCurrentMode+0x60>
 8004c4c:	e001      	b.n	8004c52 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e005      	b.n	8004c5e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2bc8      	cmp	r3, #200	@ 0xc8
 8004c56:	d101      	bne.n	8004c5c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c68:	b084      	sub	sp, #16
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b086      	sub	sp, #24
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004c76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c82:	2300      	movs	r3, #0
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	e009      	b.n	8004c9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	3340      	adds	r3, #64	@ 0x40
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	2200      	movs	r2, #0
 8004c94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	613b      	str	r3, [r7, #16]
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	2b0e      	cmp	r3, #14
 8004ca0:	d9f2      	bls.n	8004c88 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ca2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d11c      	bne.n	8004ce4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cb8:	f043 0302 	orr.w	r3, r3, #2
 8004cbc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	e005      	b.n	8004cf0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004cfc:	2103      	movs	r1, #3
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f95a 	bl	8004fb8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d04:	2110      	movs	r1, #16
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f8f6 	bl	8004ef8 <USB_FlushTxFifo>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f920 	bl	8004f5c <USB_FlushRxFifo>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	2300      	movs	r3, #0
 8004d30:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d38:	461a      	mov	r2, r3
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d44:	461a      	mov	r2, r3
 8004d46:	2300      	movs	r3, #0
 8004d48:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	e043      	b.n	8004dd8 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d66:	d118      	bne.n	8004d9a <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10a      	bne.n	8004d84 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	e013      	b.n	8004dac <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d90:	461a      	mov	r2, r3
 8004d92:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	e008      	b.n	8004dac <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004da6:	461a      	mov	r2, r3
 8004da8:	2300      	movs	r3, #0
 8004daa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004db8:	461a      	mov	r2, r3
 8004dba:	2300      	movs	r3, #0
 8004dbc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004dd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ddc:	461a      	mov	r2, r3
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d3b5      	bcc.n	8004d50 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004de4:	2300      	movs	r3, #0
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	e043      	b.n	8004e72 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e00:	d118      	bne.n	8004e34 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e14:	461a      	mov	r2, r3
 8004e16:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	e013      	b.n	8004e46 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	e008      	b.n	8004e46 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e40:	461a      	mov	r2, r3
 8004e42:	2300      	movs	r3, #0
 8004e44:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e52:	461a      	mov	r2, r3
 8004e54:	2300      	movs	r3, #0
 8004e56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e64:	461a      	mov	r2, r3
 8004e66:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e76:	461a      	mov	r2, r3
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d3b5      	bcc.n	8004dea <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e90:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004e9e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	f043 0210 	orr.w	r2, r3, #16
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699a      	ldr	r2, [r3, #24]
 8004eb0:	4b10      	ldr	r3, [pc, #64]	@ (8004ef4 <USB_DevInit+0x28c>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004eb8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d005      	beq.n	8004ecc <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	f043 0208 	orr.w	r2, r3, #8
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ecc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d107      	bne.n	8004ee4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004edc:	f043 0304 	orr.w	r3, r3, #4
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ef0:	b004      	add	sp, #16
 8004ef2:	4770      	bx	lr
 8004ef4:	803c3800 	.word	0x803c3800

08004ef8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f12:	d901      	bls.n	8004f18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e01b      	b.n	8004f50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	daf2      	bge.n	8004f06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	019b      	lsls	r3, r3, #6
 8004f28:	f043 0220 	orr.w	r2, r3, #32
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	3301      	adds	r3, #1
 8004f34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f3c:	d901      	bls.n	8004f42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e006      	b.n	8004f50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	d0f0      	beq.n	8004f30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f74:	d901      	bls.n	8004f7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e018      	b.n	8004fac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	daf2      	bge.n	8004f68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2210      	movs	r2, #16
 8004f8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f98:	d901      	bls.n	8004f9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e006      	b.n	8004fac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b10      	cmp	r3, #16
 8004fa8:	d0f0      	beq.n	8004f8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	68f9      	ldr	r1, [r7, #12]
 8004fd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005004:	f023 0303 	bic.w	r3, r3, #3
 8005008:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005018:	f043 0302 	orr.w	r3, r3, #2
 800501c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	f003 0301 	and.w	r3, r3, #1
}
 800503c:	4618      	mov	r0, r3
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3301      	adds	r3, #1
 8005058:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005060:	d901      	bls.n	8005066 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e01b      	b.n	800509e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	daf2      	bge.n	8005054 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f043 0201 	orr.w	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3301      	adds	r3, #1
 8005082:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800508a:	d901      	bls.n	8005090 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e006      	b.n	800509e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b01      	cmp	r3, #1
 800509a:	d0f0      	beq.n	800507e <USB_CoreReset+0x36>

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
	...

080050ac <__NVIC_SetPriority>:
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	4603      	mov	r3, r0
 80050b4:	6039      	str	r1, [r7, #0]
 80050b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	db0a      	blt.n	80050d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	490c      	ldr	r1, [pc, #48]	@ (80050f8 <__NVIC_SetPriority+0x4c>)
 80050c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ca:	0112      	lsls	r2, r2, #4
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	440b      	add	r3, r1
 80050d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80050d4:	e00a      	b.n	80050ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	4908      	ldr	r1, [pc, #32]	@ (80050fc <__NVIC_SetPriority+0x50>)
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	3b04      	subs	r3, #4
 80050e4:	0112      	lsls	r2, r2, #4
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	440b      	add	r3, r1
 80050ea:	761a      	strb	r2, [r3, #24]
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	e000e100 	.word	0xe000e100
 80050fc:	e000ed00 	.word	0xe000ed00

08005100 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005104:	4b05      	ldr	r3, [pc, #20]	@ (800511c <SysTick_Handler+0x1c>)
 8005106:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005108:	f001 fcc6 	bl	8006a98 <xTaskGetSchedulerState>
 800510c:	4603      	mov	r3, r0
 800510e:	2b01      	cmp	r3, #1
 8005110:	d001      	beq.n	8005116 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005112:	f002 fac1 	bl	8007698 <xPortSysTickHandler>
  }
}
 8005116:	bf00      	nop
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	e000e010 	.word	0xe000e010

08005120 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005124:	2100      	movs	r1, #0
 8005126:	f06f 0004 	mvn.w	r0, #4
 800512a:	f7ff ffbf 	bl	80050ac <__NVIC_SetPriority>
#endif
}
 800512e:	bf00      	nop
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800513a:	f3ef 8305 	mrs	r3, IPSR
 800513e:	603b      	str	r3, [r7, #0]
  return(result);
 8005140:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005146:	f06f 0305 	mvn.w	r3, #5
 800514a:	607b      	str	r3, [r7, #4]
 800514c:	e00c      	b.n	8005168 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800514e:	4b0a      	ldr	r3, [pc, #40]	@ (8005178 <osKernelInitialize+0x44>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d105      	bne.n	8005162 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005156:	4b08      	ldr	r3, [pc, #32]	@ (8005178 <osKernelInitialize+0x44>)
 8005158:	2201      	movs	r2, #1
 800515a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800515c:	2300      	movs	r3, #0
 800515e:	607b      	str	r3, [r7, #4]
 8005160:	e002      	b.n	8005168 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005162:	f04f 33ff 	mov.w	r3, #4294967295
 8005166:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005168:	687b      	ldr	r3, [r7, #4]
}
 800516a:	4618      	mov	r0, r3
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	20000800 	.word	0x20000800

0800517c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005182:	f3ef 8305 	mrs	r3, IPSR
 8005186:	603b      	str	r3, [r7, #0]
  return(result);
 8005188:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <osKernelStart+0x1a>
    stat = osErrorISR;
 800518e:	f06f 0305 	mvn.w	r3, #5
 8005192:	607b      	str	r3, [r7, #4]
 8005194:	e010      	b.n	80051b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005196:	4b0b      	ldr	r3, [pc, #44]	@ (80051c4 <osKernelStart+0x48>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d109      	bne.n	80051b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800519e:	f7ff ffbf 	bl	8005120 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80051a2:	4b08      	ldr	r3, [pc, #32]	@ (80051c4 <osKernelStart+0x48>)
 80051a4:	2202      	movs	r2, #2
 80051a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80051a8:	f001 f828 	bl	80061fc <vTaskStartScheduler>
      stat = osOK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	607b      	str	r3, [r7, #4]
 80051b0:	e002      	b.n	80051b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80051b2:	f04f 33ff 	mov.w	r3, #4294967295
 80051b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051b8:	687b      	ldr	r3, [r7, #4]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20000800 	.word	0x20000800

080051c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08e      	sub	sp, #56	@ 0x38
 80051cc:	af04      	add	r7, sp, #16
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051d8:	f3ef 8305 	mrs	r3, IPSR
 80051dc:	617b      	str	r3, [r7, #20]
  return(result);
 80051de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d17e      	bne.n	80052e2 <osThreadNew+0x11a>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d07b      	beq.n	80052e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80051ea:	2380      	movs	r3, #128	@ 0x80
 80051ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80051ee:	2318      	movs	r3, #24
 80051f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80051f6:	f04f 33ff 	mov.w	r3, #4294967295
 80051fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d045      	beq.n	800528e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <osThreadNew+0x48>
        name = attr->name;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <osThreadNew+0x6e>
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	2b38      	cmp	r3, #56	@ 0x38
 8005228:	d805      	bhi.n	8005236 <osThreadNew+0x6e>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <osThreadNew+0x72>
        return (NULL);
 8005236:	2300      	movs	r3, #0
 8005238:	e054      	b.n	80052e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	089b      	lsrs	r3, r3, #2
 8005248:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00e      	beq.n	8005270 <osThreadNew+0xa8>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2b5b      	cmp	r3, #91	@ 0x5b
 8005258:	d90a      	bls.n	8005270 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800525e:	2b00      	cmp	r3, #0
 8005260:	d006      	beq.n	8005270 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <osThreadNew+0xa8>
        mem = 1;
 800526a:	2301      	movs	r3, #1
 800526c:	61bb      	str	r3, [r7, #24]
 800526e:	e010      	b.n	8005292 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10c      	bne.n	8005292 <osThreadNew+0xca>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d108      	bne.n	8005292 <osThreadNew+0xca>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d104      	bne.n	8005292 <osThreadNew+0xca>
          mem = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	61bb      	str	r3, [r7, #24]
 800528c:	e001      	b.n	8005292 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800528e:	2300      	movs	r3, #0
 8005290:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d110      	bne.n	80052ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052a0:	9202      	str	r2, [sp, #8]
 80052a2:	9301      	str	r3, [sp, #4]
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	6a3a      	ldr	r2, [r7, #32]
 80052ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 fdfe 	bl	8005eb0 <xTaskCreateStatic>
 80052b4:	4603      	mov	r3, r0
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	e013      	b.n	80052e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d110      	bne.n	80052e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	f107 0310 	add.w	r3, r7, #16
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 fe4c 	bl	8005f70 <xTaskCreate>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d001      	beq.n	80052e2 <osThreadNew+0x11a>
            hTask = NULL;
 80052de:	2300      	movs	r3, #0
 80052e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80052e2:	693b      	ldr	r3, [r7, #16]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3728      	adds	r7, #40	@ 0x28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4a07      	ldr	r2, [pc, #28]	@ (8005318 <vApplicationGetIdleTaskMemory+0x2c>)
 80052fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4a06      	ldr	r2, [pc, #24]	@ (800531c <vApplicationGetIdleTaskMemory+0x30>)
 8005302:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2280      	movs	r2, #128	@ 0x80
 8005308:	601a      	str	r2, [r3, #0]
}
 800530a:	bf00      	nop
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	20000804 	.word	0x20000804
 800531c:	20000860 	.word	0x20000860

08005320 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4a07      	ldr	r2, [pc, #28]	@ (800534c <vApplicationGetTimerTaskMemory+0x2c>)
 8005330:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	4a06      	ldr	r2, [pc, #24]	@ (8005350 <vApplicationGetTimerTaskMemory+0x30>)
 8005336:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800533e:	601a      	str	r2, [r3, #0]
}
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	20000a60 	.word	0x20000a60
 8005350:	20000abc 	.word	0x20000abc

08005354 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f103 0208 	add.w	r2, r3, #8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f04f 32ff 	mov.w	r2, #4294967295
 800536c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f103 0208 	add.w	r2, r3, #8
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f103 0208 	add.w	r2, r3, #8
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	601a      	str	r2, [r3, #0]
}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053f6:	b480      	push	{r7}
 80053f8:	b085      	sub	sp, #20
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540c:	d103      	bne.n	8005416 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	e00c      	b.n	8005430 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	3308      	adds	r3, #8
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	e002      	b.n	8005424 <vListInsert+0x2e>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	429a      	cmp	r2, r3
 800542e:	d2f6      	bcs.n	800541e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	601a      	str	r2, [r3, #0]
}
 800545c:	bf00      	nop
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6892      	ldr	r2, [r2, #8]
 800547e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6852      	ldr	r2, [r2, #4]
 8005488:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d103      	bne.n	800549c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	1e5a      	subs	r2, r3, #1
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10b      	bne.n	80054e8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054e2:	bf00      	nop
 80054e4:	bf00      	nop
 80054e6:	e7fd      	b.n	80054e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054e8:	f002 f846 	bl	8007578 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f4:	68f9      	ldr	r1, [r7, #12]
 80054f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80054f8:	fb01 f303 	mul.w	r3, r1, r3
 80054fc:	441a      	add	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005518:	3b01      	subs	r3, #1
 800551a:	68f9      	ldr	r1, [r7, #12]
 800551c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800551e:	fb01 f303 	mul.w	r3, r1, r3
 8005522:	441a      	add	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	22ff      	movs	r2, #255	@ 0xff
 800552c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	22ff      	movs	r2, #255	@ 0xff
 8005534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d114      	bne.n	8005568 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d01a      	beq.n	800557c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3310      	adds	r3, #16
 800554a:	4618      	mov	r0, r3
 800554c:	f001 f8e4 	bl	8006718 <xTaskRemoveFromEventList>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d012      	beq.n	800557c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005556:	4b0d      	ldr	r3, [pc, #52]	@ (800558c <xQueueGenericReset+0xd0>)
 8005558:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	e009      	b.n	800557c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3310      	adds	r3, #16
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff fef1 	bl	8005354 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	3324      	adds	r3, #36	@ 0x24
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff feec 	bl	8005354 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800557c:	f002 f82e 	bl	80075dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005580:	2301      	movs	r3, #1
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	e000ed04 	.word	0xe000ed04

08005590 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08e      	sub	sp, #56	@ 0x38
 8005594:	af02      	add	r7, sp, #8
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10b      	bne.n	80055bc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80055a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80055b6:	bf00      	nop
 80055b8:	bf00      	nop
 80055ba:	e7fd      	b.n	80055b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10b      	bne.n	80055da <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop
 80055d8:	e7fd      	b.n	80055d6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <xQueueGenericCreateStatic+0x56>
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <xQueueGenericCreateStatic+0x5a>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e000      	b.n	80055ec <xQueueGenericCreateStatic+0x5c>
 80055ea:	2300      	movs	r3, #0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10b      	bne.n	8005608 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	623b      	str	r3, [r7, #32]
}
 8005602:	bf00      	nop
 8005604:	bf00      	nop
 8005606:	e7fd      	b.n	8005604 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d102      	bne.n	8005614 <xQueueGenericCreateStatic+0x84>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <xQueueGenericCreateStatic+0x88>
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <xQueueGenericCreateStatic+0x8a>
 8005618:	2300      	movs	r3, #0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10b      	bne.n	8005636 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	61fb      	str	r3, [r7, #28]
}
 8005630:	bf00      	nop
 8005632:	bf00      	nop
 8005634:	e7fd      	b.n	8005632 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005636:	2350      	movs	r3, #80	@ 0x50
 8005638:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2b50      	cmp	r3, #80	@ 0x50
 800563e:	d00b      	beq.n	8005658 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	61bb      	str	r3, [r7, #24]
}
 8005652:	bf00      	nop
 8005654:	bf00      	nop
 8005656:	e7fd      	b.n	8005654 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005658:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800565e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00d      	beq.n	8005680 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800566c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	4613      	mov	r3, r2
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	68b9      	ldr	r1, [r7, #8]
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 f805 	bl	800568a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005682:	4618      	mov	r0, r3
 8005684:	3730      	adds	r7, #48	@ 0x30
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b084      	sub	sp, #16
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	607a      	str	r2, [r7, #4]
 8005696:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d103      	bne.n	80056a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	e002      	b.n	80056ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056b8:	2101      	movs	r1, #1
 80056ba:	69b8      	ldr	r0, [r7, #24]
 80056bc:	f7ff fefe 	bl	80054bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	78fa      	ldrb	r2, [r7, #3]
 80056c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056c8:	bf00      	nop
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08e      	sub	sp, #56	@ 0x38
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056de:	2300      	movs	r3, #0
 80056e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80056e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10b      	bne.n	8005704 <xQueueGenericSend+0x34>
	__asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80056fe:	bf00      	nop
 8005700:	bf00      	nop
 8005702:	e7fd      	b.n	8005700 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d103      	bne.n	8005712 <xQueueGenericSend+0x42>
 800570a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <xQueueGenericSend+0x46>
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <xQueueGenericSend+0x48>
 8005716:	2300      	movs	r3, #0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10b      	bne.n	8005734 <xQueueGenericSend+0x64>
	__asm volatile
 800571c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800572e:	bf00      	nop
 8005730:	bf00      	nop
 8005732:	e7fd      	b.n	8005730 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b02      	cmp	r3, #2
 8005738:	d103      	bne.n	8005742 <xQueueGenericSend+0x72>
 800573a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <xQueueGenericSend+0x76>
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <xQueueGenericSend+0x78>
 8005746:	2300      	movs	r3, #0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10b      	bne.n	8005764 <xQueueGenericSend+0x94>
	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	623b      	str	r3, [r7, #32]
}
 800575e:	bf00      	nop
 8005760:	bf00      	nop
 8005762:	e7fd      	b.n	8005760 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005764:	f001 f998 	bl	8006a98 <xTaskGetSchedulerState>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d102      	bne.n	8005774 <xQueueGenericSend+0xa4>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <xQueueGenericSend+0xa8>
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <xQueueGenericSend+0xaa>
 8005778:	2300      	movs	r3, #0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10b      	bne.n	8005796 <xQueueGenericSend+0xc6>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	61fb      	str	r3, [r7, #28]
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	e7fd      	b.n	8005792 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005796:	f001 feef 	bl	8007578 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800579a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800579e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d302      	bcc.n	80057ac <xQueueGenericSend+0xdc>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d129      	bne.n	8005800 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	68b9      	ldr	r1, [r7, #8]
 80057b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057b2:	f000 fa0f 	bl	8005bd4 <prvCopyDataToQueue>
 80057b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d010      	beq.n	80057e2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c2:	3324      	adds	r3, #36	@ 0x24
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 ffa7 	bl	8006718 <xTaskRemoveFromEventList>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d013      	beq.n	80057f8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057d0:	4b3f      	ldr	r3, [pc, #252]	@ (80058d0 <xQueueGenericSend+0x200>)
 80057d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	e00a      	b.n	80057f8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d007      	beq.n	80057f8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057e8:	4b39      	ldr	r3, [pc, #228]	@ (80058d0 <xQueueGenericSend+0x200>)
 80057ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057f8:	f001 fef0 	bl	80075dc <vPortExitCritical>
				return pdPASS;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e063      	b.n	80058c8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d103      	bne.n	800580e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005806:	f001 fee9 	bl	80075dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800580a:	2300      	movs	r3, #0
 800580c:	e05c      	b.n	80058c8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800580e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005810:	2b00      	cmp	r3, #0
 8005812:	d106      	bne.n	8005822 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005814:	f107 0314 	add.w	r3, r7, #20
 8005818:	4618      	mov	r0, r3
 800581a:	f000 ffe1 	bl	80067e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800581e:	2301      	movs	r3, #1
 8005820:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005822:	f001 fedb 	bl	80075dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005826:	f000 fd51 	bl	80062cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800582a:	f001 fea5 	bl	8007578 <vPortEnterCritical>
 800582e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005830:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005834:	b25b      	sxtb	r3, r3
 8005836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583a:	d103      	bne.n	8005844 <xQueueGenericSend+0x174>
 800583c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005846:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800584a:	b25b      	sxtb	r3, r3
 800584c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005850:	d103      	bne.n	800585a <xQueueGenericSend+0x18a>
 8005852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800585a:	f001 febf 	bl	80075dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800585e:	1d3a      	adds	r2, r7, #4
 8005860:	f107 0314 	add.w	r3, r7, #20
 8005864:	4611      	mov	r1, r2
 8005866:	4618      	mov	r0, r3
 8005868:	f000 ffd0 	bl	800680c <xTaskCheckForTimeOut>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d124      	bne.n	80058bc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005872:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005874:	f000 faa6 	bl	8005dc4 <prvIsQueueFull>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d018      	beq.n	80058b0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005880:	3310      	adds	r3, #16
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	4611      	mov	r1, r2
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fef4 	bl	8006674 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800588c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800588e:	f000 fa31 	bl	8005cf4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005892:	f000 fd29 	bl	80062e8 <xTaskResumeAll>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	f47f af7c 	bne.w	8005796 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800589e:	4b0c      	ldr	r3, [pc, #48]	@ (80058d0 <xQueueGenericSend+0x200>)
 80058a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	e772      	b.n	8005796 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058b2:	f000 fa1f 	bl	8005cf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058b6:	f000 fd17 	bl	80062e8 <xTaskResumeAll>
 80058ba:	e76c      	b.n	8005796 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058be:	f000 fa19 	bl	8005cf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058c2:	f000 fd11 	bl	80062e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3738      	adds	r7, #56	@ 0x38
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	e000ed04 	.word	0xe000ed04

080058d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b090      	sub	sp, #64	@ 0x40
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80058e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10b      	bne.n	8005904 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80058fe:	bf00      	nop
 8005900:	bf00      	nop
 8005902:	e7fd      	b.n	8005900 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d103      	bne.n	8005912 <xQueueGenericSendFromISR+0x3e>
 800590a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800590c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <xQueueGenericSendFromISR+0x42>
 8005912:	2301      	movs	r3, #1
 8005914:	e000      	b.n	8005918 <xQueueGenericSendFromISR+0x44>
 8005916:	2300      	movs	r3, #0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10b      	bne.n	8005934 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800592e:	bf00      	nop
 8005930:	bf00      	nop
 8005932:	e7fd      	b.n	8005930 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2b02      	cmp	r3, #2
 8005938:	d103      	bne.n	8005942 <xQueueGenericSendFromISR+0x6e>
 800593a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800593c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800593e:	2b01      	cmp	r3, #1
 8005940:	d101      	bne.n	8005946 <xQueueGenericSendFromISR+0x72>
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <xQueueGenericSendFromISR+0x74>
 8005946:	2300      	movs	r3, #0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10b      	bne.n	8005964 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800594c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	623b      	str	r3, [r7, #32]
}
 800595e:	bf00      	nop
 8005960:	bf00      	nop
 8005962:	e7fd      	b.n	8005960 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005964:	f001 fee8 	bl	8007738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005968:	f3ef 8211 	mrs	r2, BASEPRI
 800596c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	61fa      	str	r2, [r7, #28]
 800597e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005980:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005982:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005986:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800598c:	429a      	cmp	r2, r3
 800598e:	d302      	bcc.n	8005996 <xQueueGenericSendFromISR+0xc2>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d12f      	bne.n	80059f6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005998:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800599c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	68b9      	ldr	r1, [r7, #8]
 80059aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80059ac:	f000 f912 	bl	8005bd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059b0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80059b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b8:	d112      	bne.n	80059e0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d016      	beq.n	80059f0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c4:	3324      	adds	r3, #36	@ 0x24
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fea6 	bl	8006718 <xTaskRemoveFromEventList>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00e      	beq.n	80059f0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00b      	beq.n	80059f0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	e007      	b.n	80059f0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80059e4:	3301      	adds	r3, #1
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	b25a      	sxtb	r2, r3
 80059ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80059f0:	2301      	movs	r3, #1
 80059f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80059f4:	e001      	b.n	80059fa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059f6:	2300      	movs	r3, #0
 80059f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a04:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3740      	adds	r7, #64	@ 0x40
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08c      	sub	sp, #48	@ 0x30
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10b      	bne.n	8005a42 <xQueueReceive+0x32>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	623b      	str	r3, [r7, #32]
}
 8005a3c:	bf00      	nop
 8005a3e:	bf00      	nop
 8005a40:	e7fd      	b.n	8005a3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d103      	bne.n	8005a50 <xQueueReceive+0x40>
 8005a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <xQueueReceive+0x44>
 8005a50:	2301      	movs	r3, #1
 8005a52:	e000      	b.n	8005a56 <xQueueReceive+0x46>
 8005a54:	2300      	movs	r3, #0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10b      	bne.n	8005a72 <xQueueReceive+0x62>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	61fb      	str	r3, [r7, #28]
}
 8005a6c:	bf00      	nop
 8005a6e:	bf00      	nop
 8005a70:	e7fd      	b.n	8005a6e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a72:	f001 f811 	bl	8006a98 <xTaskGetSchedulerState>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d102      	bne.n	8005a82 <xQueueReceive+0x72>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <xQueueReceive+0x76>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e000      	b.n	8005a88 <xQueueReceive+0x78>
 8005a86:	2300      	movs	r3, #0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10b      	bne.n	8005aa4 <xQueueReceive+0x94>
	__asm volatile
 8005a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	61bb      	str	r3, [r7, #24]
}
 8005a9e:	bf00      	nop
 8005aa0:	bf00      	nop
 8005aa2:	e7fd      	b.n	8005aa0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005aa4:	f001 fd68 	bl	8007578 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01f      	beq.n	8005af4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ab4:	68b9      	ldr	r1, [r7, #8]
 8005ab6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ab8:	f000 f8f6 	bl	8005ca8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abe:	1e5a      	subs	r2, r3, #1
 8005ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00f      	beq.n	8005aec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ace:	3310      	adds	r3, #16
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fe21 	bl	8006718 <xTaskRemoveFromEventList>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005adc:	4b3c      	ldr	r3, [pc, #240]	@ (8005bd0 <xQueueReceive+0x1c0>)
 8005ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005aec:	f001 fd76 	bl	80075dc <vPortExitCritical>
				return pdPASS;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e069      	b.n	8005bc8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d103      	bne.n	8005b02 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005afa:	f001 fd6f 	bl	80075dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005afe:	2300      	movs	r3, #0
 8005b00:	e062      	b.n	8005bc8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d106      	bne.n	8005b16 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b08:	f107 0310 	add.w	r3, r7, #16
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fe67 	bl	80067e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b12:	2301      	movs	r3, #1
 8005b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b16:	f001 fd61 	bl	80075dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b1a:	f000 fbd7 	bl	80062cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b1e:	f001 fd2b 	bl	8007578 <vPortEnterCritical>
 8005b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b28:	b25b      	sxtb	r3, r3
 8005b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2e:	d103      	bne.n	8005b38 <xQueueReceive+0x128>
 8005b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b3e:	b25b      	sxtb	r3, r3
 8005b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b44:	d103      	bne.n	8005b4e <xQueueReceive+0x13e>
 8005b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b4e:	f001 fd45 	bl	80075dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b52:	1d3a      	adds	r2, r7, #4
 8005b54:	f107 0310 	add.w	r3, r7, #16
 8005b58:	4611      	mov	r1, r2
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fe56 	bl	800680c <xTaskCheckForTimeOut>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d123      	bne.n	8005bae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b68:	f000 f916 	bl	8005d98 <prvIsQueueEmpty>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d017      	beq.n	8005ba2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b74:	3324      	adds	r3, #36	@ 0x24
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	4611      	mov	r1, r2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 fd7a 	bl	8006674 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b82:	f000 f8b7 	bl	8005cf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b86:	f000 fbaf 	bl	80062e8 <xTaskResumeAll>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d189      	bne.n	8005aa4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005b90:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd0 <xQueueReceive+0x1c0>)
 8005b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	e780      	b.n	8005aa4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ba2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ba4:	f000 f8a6 	bl	8005cf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ba8:	f000 fb9e 	bl	80062e8 <xTaskResumeAll>
 8005bac:	e77a      	b.n	8005aa4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005bae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bb0:	f000 f8a0 	bl	8005cf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bb4:	f000 fb98 	bl	80062e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bba:	f000 f8ed 	bl	8005d98 <prvIsQueueEmpty>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f43f af6f 	beq.w	8005aa4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bc6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3730      	adds	r7, #48	@ 0x30
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	e000ed04 	.word	0xe000ed04

08005bd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005be0:	2300      	movs	r3, #0
 8005be2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10d      	bne.n	8005c0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d14d      	bne.n	8005c96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 ff68 	bl	8006ad4 <xTaskPriorityDisinherit>
 8005c04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	609a      	str	r2, [r3, #8]
 8005c0c:	e043      	b.n	8005c96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d119      	bne.n	8005c48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6858      	ldr	r0, [r3, #4]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	68b9      	ldr	r1, [r7, #8]
 8005c20:	f001 ffe6 	bl	8007bf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2c:	441a      	add	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d32b      	bcc.n	8005c96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	605a      	str	r2, [r3, #4]
 8005c46:	e026      	b.n	8005c96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	68d8      	ldr	r0, [r3, #12]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c50:	461a      	mov	r2, r3
 8005c52:	68b9      	ldr	r1, [r7, #8]
 8005c54:	f001 ffcc 	bl	8007bf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c60:	425b      	negs	r3, r3
 8005c62:	441a      	add	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d207      	bcs.n	8005c84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7c:	425b      	negs	r3, r3
 8005c7e:	441a      	add	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d105      	bne.n	8005c96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005c9e:	697b      	ldr	r3, [r7, #20]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d018      	beq.n	8005cec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc2:	441a      	add	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d303      	bcc.n	8005cdc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68d9      	ldr	r1, [r3, #12]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	6838      	ldr	r0, [r7, #0]
 8005ce8:	f001 ff82 	bl	8007bf0 <memcpy>
	}
}
 8005cec:	bf00      	nop
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cfc:	f001 fc3c 	bl	8007578 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d08:	e011      	b.n	8005d2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d012      	beq.n	8005d38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	3324      	adds	r3, #36	@ 0x24
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 fcfe 	bl	8006718 <xTaskRemoveFromEventList>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d22:	f000 fdd7 	bl	80068d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	dce9      	bgt.n	8005d0a <prvUnlockQueue+0x16>
 8005d36:	e000      	b.n	8005d3a <prvUnlockQueue+0x46>
					break;
 8005d38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	22ff      	movs	r2, #255	@ 0xff
 8005d3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005d42:	f001 fc4b 	bl	80075dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d46:	f001 fc17 	bl	8007578 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d52:	e011      	b.n	8005d78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d012      	beq.n	8005d82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3310      	adds	r3, #16
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fcd9 	bl	8006718 <xTaskRemoveFromEventList>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d001      	beq.n	8005d70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d6c:	f000 fdb2 	bl	80068d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d70:	7bbb      	ldrb	r3, [r7, #14]
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	dce9      	bgt.n	8005d54 <prvUnlockQueue+0x60>
 8005d80:	e000      	b.n	8005d84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	22ff      	movs	r2, #255	@ 0xff
 8005d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005d8c:	f001 fc26 	bl	80075dc <vPortExitCritical>
}
 8005d90:	bf00      	nop
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005da0:	f001 fbea 	bl	8007578 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d102      	bne.n	8005db2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005dac:	2301      	movs	r3, #1
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	e001      	b.n	8005db6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005db6:	f001 fc11 	bl	80075dc <vPortExitCritical>

	return xReturn;
 8005dba:	68fb      	ldr	r3, [r7, #12]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dcc:	f001 fbd4 	bl	8007578 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d102      	bne.n	8005de2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	e001      	b.n	8005de6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005de2:	2300      	movs	r3, #0
 8005de4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005de6:	f001 fbf9 	bl	80075dc <vPortExitCritical>

	return xReturn;
 8005dea:	68fb      	ldr	r3, [r7, #12]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	e014      	b.n	8005e2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e04:	4a0f      	ldr	r2, [pc, #60]	@ (8005e44 <vQueueAddToRegistry+0x50>)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10b      	bne.n	8005e28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e10:	490c      	ldr	r1, [pc, #48]	@ (8005e44 <vQueueAddToRegistry+0x50>)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e44 <vQueueAddToRegistry+0x50>)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	4413      	add	r3, r2
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e26:	e006      	b.n	8005e36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b07      	cmp	r3, #7
 8005e32:	d9e7      	bls.n	8005e04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	20000ebc 	.word	0x20000ebc

08005e48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e58:	f001 fb8e 	bl	8007578 <vPortEnterCritical>
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e62:	b25b      	sxtb	r3, r3
 8005e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e68:	d103      	bne.n	8005e72 <vQueueWaitForMessageRestricted+0x2a>
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e78:	b25b      	sxtb	r3, r3
 8005e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7e:	d103      	bne.n	8005e88 <vQueueWaitForMessageRestricted+0x40>
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e88:	f001 fba8 	bl	80075dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d106      	bne.n	8005ea2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	3324      	adds	r3, #36	@ 0x24
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	68b9      	ldr	r1, [r7, #8]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 fc0f 	bl	80066c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005ea2:	6978      	ldr	r0, [r7, #20]
 8005ea4:	f7ff ff26 	bl	8005cf4 <prvUnlockQueue>
	}
 8005ea8:	bf00      	nop
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08e      	sub	sp, #56	@ 0x38
 8005eb4:	af04      	add	r7, sp, #16
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
 8005ebc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10b      	bne.n	8005edc <xTaskCreateStatic+0x2c>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	623b      	str	r3, [r7, #32]
}
 8005ed6:	bf00      	nop
 8005ed8:	bf00      	nop
 8005eda:	e7fd      	b.n	8005ed8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10b      	bne.n	8005efa <xTaskCreateStatic+0x4a>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	61fb      	str	r3, [r7, #28]
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	e7fd      	b.n	8005ef6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005efa:	235c      	movs	r3, #92	@ 0x5c
 8005efc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2b5c      	cmp	r3, #92	@ 0x5c
 8005f02:	d00b      	beq.n	8005f1c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	61bb      	str	r3, [r7, #24]
}
 8005f16:	bf00      	nop
 8005f18:	bf00      	nop
 8005f1a:	e7fd      	b.n	8005f18 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f1c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d01e      	beq.n	8005f62 <xTaskCreateStatic+0xb2>
 8005f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d01b      	beq.n	8005f62 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f32:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	9303      	str	r3, [sp, #12]
 8005f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f42:	9302      	str	r3, [sp, #8]
 8005f44:	f107 0314 	add.w	r3, r7, #20
 8005f48:	9301      	str	r3, [sp, #4]
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 f850 	bl	8005ffa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f5c:	f000 f8de 	bl	800611c <prvAddNewTaskToReadyList>
 8005f60:	e001      	b.n	8005f66 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f66:	697b      	ldr	r3, [r7, #20]
	}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3728      	adds	r7, #40	@ 0x28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08c      	sub	sp, #48	@ 0x30
 8005f74:	af04      	add	r7, sp, #16
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f80:	88fb      	ldrh	r3, [r7, #6]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f001 fc19 	bl	80077bc <pvPortMalloc>
 8005f8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00e      	beq.n	8005fb0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f92:	205c      	movs	r0, #92	@ 0x5c
 8005f94:	f001 fc12 	bl	80077bc <pvPortMalloc>
 8005f98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fa6:	e005      	b.n	8005fb4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fa8:	6978      	ldr	r0, [r7, #20]
 8005faa:	f001 fcd5 	bl	8007958 <vPortFree>
 8005fae:	e001      	b.n	8005fb4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d017      	beq.n	8005fea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fc2:	88fa      	ldrh	r2, [r7, #6]
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	9303      	str	r3, [sp, #12]
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	9302      	str	r3, [sp, #8]
 8005fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fce:	9301      	str	r3, [sp, #4]
 8005fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	68b9      	ldr	r1, [r7, #8]
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 f80e 	bl	8005ffa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fde:	69f8      	ldr	r0, [r7, #28]
 8005fe0:	f000 f89c 	bl	800611c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	61bb      	str	r3, [r7, #24]
 8005fe8:	e002      	b.n	8005ff0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fea:	f04f 33ff 	mov.w	r3, #4294967295
 8005fee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ff0:	69bb      	ldr	r3, [r7, #24]
	}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3720      	adds	r7, #32
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b088      	sub	sp, #32
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	607a      	str	r2, [r7, #4]
 8006006:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	461a      	mov	r2, r3
 8006012:	21a5      	movs	r1, #165	@ 0xa5
 8006014:	f001 fdc0 	bl	8007b98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006022:	3b01      	subs	r3, #1
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	f023 0307 	bic.w	r3, r3, #7
 8006030:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00b      	beq.n	8006054 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	617b      	str	r3, [r7, #20]
}
 800604e:	bf00      	nop
 8006050:	bf00      	nop
 8006052:	e7fd      	b.n	8006050 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d01f      	beq.n	800609a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800605a:	2300      	movs	r3, #0
 800605c:	61fb      	str	r3, [r7, #28]
 800605e:	e012      	b.n	8006086 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	4413      	add	r3, r2
 8006066:	7819      	ldrb	r1, [r3, #0]
 8006068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	4413      	add	r3, r2
 800606e:	3334      	adds	r3, #52	@ 0x34
 8006070:	460a      	mov	r2, r1
 8006072:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	4413      	add	r3, r2
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d006      	beq.n	800608e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	3301      	adds	r3, #1
 8006084:	61fb      	str	r3, [r7, #28]
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	2b0f      	cmp	r3, #15
 800608a:	d9e9      	bls.n	8006060 <prvInitialiseNewTask+0x66>
 800608c:	e000      	b.n	8006090 <prvInitialiseNewTask+0x96>
			{
				break;
 800608e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006098:	e003      	b.n	80060a2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800609a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a4:	2b37      	cmp	r3, #55	@ 0x37
 80060a6:	d901      	bls.n	80060ac <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060a8:	2337      	movs	r3, #55	@ 0x37
 80060aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060b6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80060b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ba:	2200      	movs	r2, #0
 80060bc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c0:	3304      	adds	r3, #4
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7ff f966 	bl	8005394 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ca:	3318      	adds	r3, #24
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7ff f961 	bl	8005394 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060e6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ea:	2200      	movs	r2, #0
 80060ec:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	68f9      	ldr	r1, [r7, #12]
 80060fa:	69b8      	ldr	r0, [r7, #24]
 80060fc:	f001 f908 	bl	8007310 <pxPortInitialiseStack>
 8006100:	4602      	mov	r2, r0
 8006102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006104:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800610c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006110:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006112:	bf00      	nop
 8006114:	3720      	adds	r7, #32
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006124:	f001 fa28 	bl	8007578 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006128:	4b2d      	ldr	r3, [pc, #180]	@ (80061e0 <prvAddNewTaskToReadyList+0xc4>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3301      	adds	r3, #1
 800612e:	4a2c      	ldr	r2, [pc, #176]	@ (80061e0 <prvAddNewTaskToReadyList+0xc4>)
 8006130:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006132:	4b2c      	ldr	r3, [pc, #176]	@ (80061e4 <prvAddNewTaskToReadyList+0xc8>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d109      	bne.n	800614e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800613a:	4a2a      	ldr	r2, [pc, #168]	@ (80061e4 <prvAddNewTaskToReadyList+0xc8>)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006140:	4b27      	ldr	r3, [pc, #156]	@ (80061e0 <prvAddNewTaskToReadyList+0xc4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d110      	bne.n	800616a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006148:	f000 fbe8 	bl	800691c <prvInitialiseTaskLists>
 800614c:	e00d      	b.n	800616a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800614e:	4b26      	ldr	r3, [pc, #152]	@ (80061e8 <prvAddNewTaskToReadyList+0xcc>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d109      	bne.n	800616a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006156:	4b23      	ldr	r3, [pc, #140]	@ (80061e4 <prvAddNewTaskToReadyList+0xc8>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006160:	429a      	cmp	r2, r3
 8006162:	d802      	bhi.n	800616a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006164:	4a1f      	ldr	r2, [pc, #124]	@ (80061e4 <prvAddNewTaskToReadyList+0xc8>)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800616a:	4b20      	ldr	r3, [pc, #128]	@ (80061ec <prvAddNewTaskToReadyList+0xd0>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3301      	adds	r3, #1
 8006170:	4a1e      	ldr	r2, [pc, #120]	@ (80061ec <prvAddNewTaskToReadyList+0xd0>)
 8006172:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006174:	4b1d      	ldr	r3, [pc, #116]	@ (80061ec <prvAddNewTaskToReadyList+0xd0>)
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006180:	4b1b      	ldr	r3, [pc, #108]	@ (80061f0 <prvAddNewTaskToReadyList+0xd4>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	429a      	cmp	r2, r3
 8006186:	d903      	bls.n	8006190 <prvAddNewTaskToReadyList+0x74>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618c:	4a18      	ldr	r2, [pc, #96]	@ (80061f0 <prvAddNewTaskToReadyList+0xd4>)
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4a15      	ldr	r2, [pc, #84]	@ (80061f4 <prvAddNewTaskToReadyList+0xd8>)
 800619e:	441a      	add	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4619      	mov	r1, r3
 80061a6:	4610      	mov	r0, r2
 80061a8:	f7ff f901 	bl	80053ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061ac:	f001 fa16 	bl	80075dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061b0:	4b0d      	ldr	r3, [pc, #52]	@ (80061e8 <prvAddNewTaskToReadyList+0xcc>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00e      	beq.n	80061d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061b8:	4b0a      	ldr	r3, [pc, #40]	@ (80061e4 <prvAddNewTaskToReadyList+0xc8>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d207      	bcs.n	80061d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061c6:	4b0c      	ldr	r3, [pc, #48]	@ (80061f8 <prvAddNewTaskToReadyList+0xdc>)
 80061c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061d6:	bf00      	nop
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	200013d0 	.word	0x200013d0
 80061e4:	20000efc 	.word	0x20000efc
 80061e8:	200013dc 	.word	0x200013dc
 80061ec:	200013ec 	.word	0x200013ec
 80061f0:	200013d8 	.word	0x200013d8
 80061f4:	20000f00 	.word	0x20000f00
 80061f8:	e000ed04 	.word	0xe000ed04

080061fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08a      	sub	sp, #40	@ 0x28
 8006200:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006202:	2300      	movs	r3, #0
 8006204:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006206:	2300      	movs	r3, #0
 8006208:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800620a:	463a      	mov	r2, r7
 800620c:	1d39      	adds	r1, r7, #4
 800620e:	f107 0308 	add.w	r3, r7, #8
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff f86a 	bl	80052ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	9202      	str	r2, [sp, #8]
 8006220:	9301      	str	r3, [sp, #4]
 8006222:	2300      	movs	r3, #0
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	2300      	movs	r3, #0
 8006228:	460a      	mov	r2, r1
 800622a:	4922      	ldr	r1, [pc, #136]	@ (80062b4 <vTaskStartScheduler+0xb8>)
 800622c:	4822      	ldr	r0, [pc, #136]	@ (80062b8 <vTaskStartScheduler+0xbc>)
 800622e:	f7ff fe3f 	bl	8005eb0 <xTaskCreateStatic>
 8006232:	4603      	mov	r3, r0
 8006234:	4a21      	ldr	r2, [pc, #132]	@ (80062bc <vTaskStartScheduler+0xc0>)
 8006236:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006238:	4b20      	ldr	r3, [pc, #128]	@ (80062bc <vTaskStartScheduler+0xc0>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006240:	2301      	movs	r3, #1
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	e001      	b.n	800624a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d102      	bne.n	8006256 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006250:	f000 fd04 	bl	8006c5c <xTimerCreateTimerTask>
 8006254:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d116      	bne.n	800628a <vTaskStartScheduler+0x8e>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	613b      	str	r3, [r7, #16]
}
 800626e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006270:	4b13      	ldr	r3, [pc, #76]	@ (80062c0 <vTaskStartScheduler+0xc4>)
 8006272:	f04f 32ff 	mov.w	r2, #4294967295
 8006276:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006278:	4b12      	ldr	r3, [pc, #72]	@ (80062c4 <vTaskStartScheduler+0xc8>)
 800627a:	2201      	movs	r2, #1
 800627c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800627e:	4b12      	ldr	r3, [pc, #72]	@ (80062c8 <vTaskStartScheduler+0xcc>)
 8006280:	2200      	movs	r2, #0
 8006282:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006284:	f001 f8d4 	bl	8007430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006288:	e00f      	b.n	80062aa <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006290:	d10b      	bne.n	80062aa <vTaskStartScheduler+0xae>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	60fb      	str	r3, [r7, #12]
}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop
 80062a8:	e7fd      	b.n	80062a6 <vTaskStartScheduler+0xaa>
}
 80062aa:	bf00      	nop
 80062ac:	3718      	adds	r7, #24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	08007c40 	.word	0x08007c40
 80062b8:	080068ed 	.word	0x080068ed
 80062bc:	200013f4 	.word	0x200013f4
 80062c0:	200013f0 	.word	0x200013f0
 80062c4:	200013dc 	.word	0x200013dc
 80062c8:	200013d4 	.word	0x200013d4

080062cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80062d0:	4b04      	ldr	r3, [pc, #16]	@ (80062e4 <vTaskSuspendAll+0x18>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3301      	adds	r3, #1
 80062d6:	4a03      	ldr	r2, [pc, #12]	@ (80062e4 <vTaskSuspendAll+0x18>)
 80062d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80062da:	bf00      	nop
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	200013f8 	.word	0x200013f8

080062e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062f6:	4b42      	ldr	r3, [pc, #264]	@ (8006400 <xTaskResumeAll+0x118>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10b      	bne.n	8006316 <xTaskResumeAll+0x2e>
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	603b      	str	r3, [r7, #0]
}
 8006310:	bf00      	nop
 8006312:	bf00      	nop
 8006314:	e7fd      	b.n	8006312 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006316:	f001 f92f 	bl	8007578 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800631a:	4b39      	ldr	r3, [pc, #228]	@ (8006400 <xTaskResumeAll+0x118>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3b01      	subs	r3, #1
 8006320:	4a37      	ldr	r2, [pc, #220]	@ (8006400 <xTaskResumeAll+0x118>)
 8006322:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006324:	4b36      	ldr	r3, [pc, #216]	@ (8006400 <xTaskResumeAll+0x118>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d162      	bne.n	80063f2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800632c:	4b35      	ldr	r3, [pc, #212]	@ (8006404 <xTaskResumeAll+0x11c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d05e      	beq.n	80063f2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006334:	e02f      	b.n	8006396 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006336:	4b34      	ldr	r3, [pc, #208]	@ (8006408 <xTaskResumeAll+0x120>)
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	3318      	adds	r3, #24
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff f890 	bl	8005468 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	3304      	adds	r3, #4
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff f88b 	bl	8005468 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006356:	4b2d      	ldr	r3, [pc, #180]	@ (800640c <xTaskResumeAll+0x124>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	429a      	cmp	r2, r3
 800635c:	d903      	bls.n	8006366 <xTaskResumeAll+0x7e>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006362:	4a2a      	ldr	r2, [pc, #168]	@ (800640c <xTaskResumeAll+0x124>)
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4a27      	ldr	r2, [pc, #156]	@ (8006410 <xTaskResumeAll+0x128>)
 8006374:	441a      	add	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3304      	adds	r3, #4
 800637a:	4619      	mov	r1, r3
 800637c:	4610      	mov	r0, r2
 800637e:	f7ff f816 	bl	80053ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006386:	4b23      	ldr	r3, [pc, #140]	@ (8006414 <xTaskResumeAll+0x12c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638c:	429a      	cmp	r2, r3
 800638e:	d302      	bcc.n	8006396 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006390:	4b21      	ldr	r3, [pc, #132]	@ (8006418 <xTaskResumeAll+0x130>)
 8006392:	2201      	movs	r2, #1
 8006394:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006396:	4b1c      	ldr	r3, [pc, #112]	@ (8006408 <xTaskResumeAll+0x120>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1cb      	bne.n	8006336 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063a4:	f000 fb58 	bl	8006a58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80063a8:	4b1c      	ldr	r3, [pc, #112]	@ (800641c <xTaskResumeAll+0x134>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d010      	beq.n	80063d6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063b4:	f000 f846 	bl	8006444 <xTaskIncrementTick>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80063be:	4b16      	ldr	r3, [pc, #88]	@ (8006418 <xTaskResumeAll+0x130>)
 80063c0:	2201      	movs	r2, #1
 80063c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1f1      	bne.n	80063b4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80063d0:	4b12      	ldr	r3, [pc, #72]	@ (800641c <xTaskResumeAll+0x134>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063d6:	4b10      	ldr	r3, [pc, #64]	@ (8006418 <xTaskResumeAll+0x130>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d009      	beq.n	80063f2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063de:	2301      	movs	r3, #1
 80063e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063e2:	4b0f      	ldr	r3, [pc, #60]	@ (8006420 <xTaskResumeAll+0x138>)
 80063e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063f2:	f001 f8f3 	bl	80075dc <vPortExitCritical>

	return xAlreadyYielded;
 80063f6:	68bb      	ldr	r3, [r7, #8]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	200013f8 	.word	0x200013f8
 8006404:	200013d0 	.word	0x200013d0
 8006408:	20001390 	.word	0x20001390
 800640c:	200013d8 	.word	0x200013d8
 8006410:	20000f00 	.word	0x20000f00
 8006414:	20000efc 	.word	0x20000efc
 8006418:	200013e4 	.word	0x200013e4
 800641c:	200013e0 	.word	0x200013e0
 8006420:	e000ed04 	.word	0xe000ed04

08006424 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800642a:	4b05      	ldr	r3, [pc, #20]	@ (8006440 <xTaskGetTickCount+0x1c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006430:	687b      	ldr	r3, [r7, #4]
}
 8006432:	4618      	mov	r0, r3
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	200013d4 	.word	0x200013d4

08006444 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800644a:	2300      	movs	r3, #0
 800644c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800644e:	4b4f      	ldr	r3, [pc, #316]	@ (800658c <xTaskIncrementTick+0x148>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	f040 8090 	bne.w	8006578 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006458:	4b4d      	ldr	r3, [pc, #308]	@ (8006590 <xTaskIncrementTick+0x14c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3301      	adds	r3, #1
 800645e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006460:	4a4b      	ldr	r2, [pc, #300]	@ (8006590 <xTaskIncrementTick+0x14c>)
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d121      	bne.n	80064b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800646c:	4b49      	ldr	r3, [pc, #292]	@ (8006594 <xTaskIncrementTick+0x150>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00b      	beq.n	800648e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	603b      	str	r3, [r7, #0]
}
 8006488:	bf00      	nop
 800648a:	bf00      	nop
 800648c:	e7fd      	b.n	800648a <xTaskIncrementTick+0x46>
 800648e:	4b41      	ldr	r3, [pc, #260]	@ (8006594 <xTaskIncrementTick+0x150>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	4b40      	ldr	r3, [pc, #256]	@ (8006598 <xTaskIncrementTick+0x154>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a3e      	ldr	r2, [pc, #248]	@ (8006594 <xTaskIncrementTick+0x150>)
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	4a3e      	ldr	r2, [pc, #248]	@ (8006598 <xTaskIncrementTick+0x154>)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	4b3e      	ldr	r3, [pc, #248]	@ (800659c <xTaskIncrementTick+0x158>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3301      	adds	r3, #1
 80064a8:	4a3c      	ldr	r2, [pc, #240]	@ (800659c <xTaskIncrementTick+0x158>)
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	f000 fad4 	bl	8006a58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064b0:	4b3b      	ldr	r3, [pc, #236]	@ (80065a0 <xTaskIncrementTick+0x15c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d349      	bcc.n	800654e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064ba:	4b36      	ldr	r3, [pc, #216]	@ (8006594 <xTaskIncrementTick+0x150>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d104      	bne.n	80064ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064c4:	4b36      	ldr	r3, [pc, #216]	@ (80065a0 <xTaskIncrementTick+0x15c>)
 80064c6:	f04f 32ff 	mov.w	r2, #4294967295
 80064ca:	601a      	str	r2, [r3, #0]
					break;
 80064cc:	e03f      	b.n	800654e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ce:	4b31      	ldr	r3, [pc, #196]	@ (8006594 <xTaskIncrementTick+0x150>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d203      	bcs.n	80064ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064e6:	4a2e      	ldr	r2, [pc, #184]	@ (80065a0 <xTaskIncrementTick+0x15c>)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80064ec:	e02f      	b.n	800654e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	3304      	adds	r3, #4
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe ffb8 	bl	8005468 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d004      	beq.n	800650a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	3318      	adds	r3, #24
 8006504:	4618      	mov	r0, r3
 8006506:	f7fe ffaf 	bl	8005468 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800650e:	4b25      	ldr	r3, [pc, #148]	@ (80065a4 <xTaskIncrementTick+0x160>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	429a      	cmp	r2, r3
 8006514:	d903      	bls.n	800651e <xTaskIncrementTick+0xda>
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651a:	4a22      	ldr	r2, [pc, #136]	@ (80065a4 <xTaskIncrementTick+0x160>)
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006522:	4613      	mov	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4a1f      	ldr	r2, [pc, #124]	@ (80065a8 <xTaskIncrementTick+0x164>)
 800652c:	441a      	add	r2, r3
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	3304      	adds	r3, #4
 8006532:	4619      	mov	r1, r3
 8006534:	4610      	mov	r0, r2
 8006536:	f7fe ff3a 	bl	80053ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800653e:	4b1b      	ldr	r3, [pc, #108]	@ (80065ac <xTaskIncrementTick+0x168>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006544:	429a      	cmp	r2, r3
 8006546:	d3b8      	bcc.n	80064ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006548:	2301      	movs	r3, #1
 800654a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800654c:	e7b5      	b.n	80064ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800654e:	4b17      	ldr	r3, [pc, #92]	@ (80065ac <xTaskIncrementTick+0x168>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006554:	4914      	ldr	r1, [pc, #80]	@ (80065a8 <xTaskIncrementTick+0x164>)
 8006556:	4613      	mov	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	440b      	add	r3, r1
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d901      	bls.n	800656a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006566:	2301      	movs	r3, #1
 8006568:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800656a:	4b11      	ldr	r3, [pc, #68]	@ (80065b0 <xTaskIncrementTick+0x16c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d007      	beq.n	8006582 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006572:	2301      	movs	r3, #1
 8006574:	617b      	str	r3, [r7, #20]
 8006576:	e004      	b.n	8006582 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006578:	4b0e      	ldr	r3, [pc, #56]	@ (80065b4 <xTaskIncrementTick+0x170>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3301      	adds	r3, #1
 800657e:	4a0d      	ldr	r2, [pc, #52]	@ (80065b4 <xTaskIncrementTick+0x170>)
 8006580:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006582:	697b      	ldr	r3, [r7, #20]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	200013f8 	.word	0x200013f8
 8006590:	200013d4 	.word	0x200013d4
 8006594:	20001388 	.word	0x20001388
 8006598:	2000138c 	.word	0x2000138c
 800659c:	200013e8 	.word	0x200013e8
 80065a0:	200013f0 	.word	0x200013f0
 80065a4:	200013d8 	.word	0x200013d8
 80065a8:	20000f00 	.word	0x20000f00
 80065ac:	20000efc 	.word	0x20000efc
 80065b0:	200013e4 	.word	0x200013e4
 80065b4:	200013e0 	.word	0x200013e0

080065b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065be:	4b28      	ldr	r3, [pc, #160]	@ (8006660 <vTaskSwitchContext+0xa8>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065c6:	4b27      	ldr	r3, [pc, #156]	@ (8006664 <vTaskSwitchContext+0xac>)
 80065c8:	2201      	movs	r2, #1
 80065ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065cc:	e042      	b.n	8006654 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80065ce:	4b25      	ldr	r3, [pc, #148]	@ (8006664 <vTaskSwitchContext+0xac>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065d4:	4b24      	ldr	r3, [pc, #144]	@ (8006668 <vTaskSwitchContext+0xb0>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	e011      	b.n	8006600 <vTaskSwitchContext+0x48>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10b      	bne.n	80065fa <vTaskSwitchContext+0x42>
	__asm volatile
 80065e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	607b      	str	r3, [r7, #4]
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop
 80065f8:	e7fd      	b.n	80065f6 <vTaskSwitchContext+0x3e>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	3b01      	subs	r3, #1
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	491a      	ldr	r1, [pc, #104]	@ (800666c <vTaskSwitchContext+0xb4>)
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4613      	mov	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	440b      	add	r3, r1
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0e3      	beq.n	80065dc <vTaskSwitchContext+0x24>
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	4613      	mov	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4a13      	ldr	r2, [pc, #76]	@ (800666c <vTaskSwitchContext+0xb4>)
 8006620:	4413      	add	r3, r2
 8006622:	60bb      	str	r3, [r7, #8]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	605a      	str	r2, [r3, #4]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	3308      	adds	r3, #8
 8006636:	429a      	cmp	r2, r3
 8006638:	d104      	bne.n	8006644 <vTaskSwitchContext+0x8c>
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	605a      	str	r2, [r3, #4]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	4a09      	ldr	r2, [pc, #36]	@ (8006670 <vTaskSwitchContext+0xb8>)
 800664c:	6013      	str	r3, [r2, #0]
 800664e:	4a06      	ldr	r2, [pc, #24]	@ (8006668 <vTaskSwitchContext+0xb0>)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6013      	str	r3, [r2, #0]
}
 8006654:	bf00      	nop
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	200013f8 	.word	0x200013f8
 8006664:	200013e4 	.word	0x200013e4
 8006668:	200013d8 	.word	0x200013d8
 800666c:	20000f00 	.word	0x20000f00
 8006670:	20000efc 	.word	0x20000efc

08006674 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10b      	bne.n	800669c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	60fb      	str	r3, [r7, #12]
}
 8006696:	bf00      	nop
 8006698:	bf00      	nop
 800669a:	e7fd      	b.n	8006698 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800669c:	4b07      	ldr	r3, [pc, #28]	@ (80066bc <vTaskPlaceOnEventList+0x48>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3318      	adds	r3, #24
 80066a2:	4619      	mov	r1, r3
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7fe fea6 	bl	80053f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066aa:	2101      	movs	r1, #1
 80066ac:	6838      	ldr	r0, [r7, #0]
 80066ae:	f000 fa81 	bl	8006bb4 <prvAddCurrentTaskToDelayedList>
}
 80066b2:	bf00      	nop
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	20000efc 	.word	0x20000efc

080066c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10b      	bne.n	80066ea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	617b      	str	r3, [r7, #20]
}
 80066e4:	bf00      	nop
 80066e6:	bf00      	nop
 80066e8:	e7fd      	b.n	80066e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006714 <vTaskPlaceOnEventListRestricted+0x54>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3318      	adds	r3, #24
 80066f0:	4619      	mov	r1, r3
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7fe fe5b 	bl	80053ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80066fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006702:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006704:	6879      	ldr	r1, [r7, #4]
 8006706:	68b8      	ldr	r0, [r7, #8]
 8006708:	f000 fa54 	bl	8006bb4 <prvAddCurrentTaskToDelayedList>
	}
 800670c:	bf00      	nop
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	20000efc 	.word	0x20000efc

08006718 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10b      	bne.n	8006746 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	60fb      	str	r3, [r7, #12]
}
 8006740:	bf00      	nop
 8006742:	bf00      	nop
 8006744:	e7fd      	b.n	8006742 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	3318      	adds	r3, #24
 800674a:	4618      	mov	r0, r3
 800674c:	f7fe fe8c 	bl	8005468 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006750:	4b1d      	ldr	r3, [pc, #116]	@ (80067c8 <xTaskRemoveFromEventList+0xb0>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d11d      	bne.n	8006794 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	3304      	adds	r3, #4
 800675c:	4618      	mov	r0, r3
 800675e:	f7fe fe83 	bl	8005468 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006766:	4b19      	ldr	r3, [pc, #100]	@ (80067cc <xTaskRemoveFromEventList+0xb4>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	d903      	bls.n	8006776 <xTaskRemoveFromEventList+0x5e>
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006772:	4a16      	ldr	r2, [pc, #88]	@ (80067cc <xTaskRemoveFromEventList+0xb4>)
 8006774:	6013      	str	r3, [r2, #0]
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800677a:	4613      	mov	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4a13      	ldr	r2, [pc, #76]	@ (80067d0 <xTaskRemoveFromEventList+0xb8>)
 8006784:	441a      	add	r2, r3
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	3304      	adds	r3, #4
 800678a:	4619      	mov	r1, r3
 800678c:	4610      	mov	r0, r2
 800678e:	f7fe fe0e 	bl	80053ae <vListInsertEnd>
 8006792:	e005      	b.n	80067a0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	3318      	adds	r3, #24
 8006798:	4619      	mov	r1, r3
 800679a:	480e      	ldr	r0, [pc, #56]	@ (80067d4 <xTaskRemoveFromEventList+0xbc>)
 800679c:	f7fe fe07 	bl	80053ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a4:	4b0c      	ldr	r3, [pc, #48]	@ (80067d8 <xTaskRemoveFromEventList+0xc0>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d905      	bls.n	80067ba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067ae:	2301      	movs	r3, #1
 80067b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067b2:	4b0a      	ldr	r3, [pc, #40]	@ (80067dc <xTaskRemoveFromEventList+0xc4>)
 80067b4:	2201      	movs	r2, #1
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	e001      	b.n	80067be <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80067ba:	2300      	movs	r3, #0
 80067bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80067be:	697b      	ldr	r3, [r7, #20]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3718      	adds	r7, #24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	200013f8 	.word	0x200013f8
 80067cc:	200013d8 	.word	0x200013d8
 80067d0:	20000f00 	.word	0x20000f00
 80067d4:	20001390 	.word	0x20001390
 80067d8:	20000efc 	.word	0x20000efc
 80067dc:	200013e4 	.word	0x200013e4

080067e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067e8:	4b06      	ldr	r3, [pc, #24]	@ (8006804 <vTaskInternalSetTimeOutState+0x24>)
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067f0:	4b05      	ldr	r3, [pc, #20]	@ (8006808 <vTaskInternalSetTimeOutState+0x28>)
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	605a      	str	r2, [r3, #4]
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	200013e8 	.word	0x200013e8
 8006808:	200013d4 	.word	0x200013d4

0800680c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b088      	sub	sp, #32
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10b      	bne.n	8006834 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	613b      	str	r3, [r7, #16]
}
 800682e:	bf00      	nop
 8006830:	bf00      	nop
 8006832:	e7fd      	b.n	8006830 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10b      	bne.n	8006852 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800683a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	60fb      	str	r3, [r7, #12]
}
 800684c:	bf00      	nop
 800684e:	bf00      	nop
 8006850:	e7fd      	b.n	800684e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006852:	f000 fe91 	bl	8007578 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006856:	4b1d      	ldr	r3, [pc, #116]	@ (80068cc <xTaskCheckForTimeOut+0xc0>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686e:	d102      	bne.n	8006876 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006870:	2300      	movs	r3, #0
 8006872:	61fb      	str	r3, [r7, #28]
 8006874:	e023      	b.n	80068be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	4b15      	ldr	r3, [pc, #84]	@ (80068d0 <xTaskCheckForTimeOut+0xc4>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	429a      	cmp	r2, r3
 8006880:	d007      	beq.n	8006892 <xTaskCheckForTimeOut+0x86>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	429a      	cmp	r2, r3
 800688a:	d302      	bcc.n	8006892 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800688c:	2301      	movs	r3, #1
 800688e:	61fb      	str	r3, [r7, #28]
 8006890:	e015      	b.n	80068be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	429a      	cmp	r2, r3
 800689a:	d20b      	bcs.n	80068b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	1ad2      	subs	r2, r2, r3
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7ff ff99 	bl	80067e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068ae:	2300      	movs	r3, #0
 80068b0:	61fb      	str	r3, [r7, #28]
 80068b2:	e004      	b.n	80068be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068ba:	2301      	movs	r3, #1
 80068bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068be:	f000 fe8d 	bl	80075dc <vPortExitCritical>

	return xReturn;
 80068c2:	69fb      	ldr	r3, [r7, #28]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3720      	adds	r7, #32
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	200013d4 	.word	0x200013d4
 80068d0:	200013e8 	.word	0x200013e8

080068d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068d4:	b480      	push	{r7}
 80068d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068d8:	4b03      	ldr	r3, [pc, #12]	@ (80068e8 <vTaskMissedYield+0x14>)
 80068da:	2201      	movs	r2, #1
 80068dc:	601a      	str	r2, [r3, #0]
}
 80068de:	bf00      	nop
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	200013e4 	.word	0x200013e4

080068ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068f4:	f000 f852 	bl	800699c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068f8:	4b06      	ldr	r3, [pc, #24]	@ (8006914 <prvIdleTask+0x28>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d9f9      	bls.n	80068f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006900:	4b05      	ldr	r3, [pc, #20]	@ (8006918 <prvIdleTask+0x2c>)
 8006902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006910:	e7f0      	b.n	80068f4 <prvIdleTask+0x8>
 8006912:	bf00      	nop
 8006914:	20000f00 	.word	0x20000f00
 8006918:	e000ed04 	.word	0xe000ed04

0800691c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006922:	2300      	movs	r3, #0
 8006924:	607b      	str	r3, [r7, #4]
 8006926:	e00c      	b.n	8006942 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	4613      	mov	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4a12      	ldr	r2, [pc, #72]	@ (800697c <prvInitialiseTaskLists+0x60>)
 8006934:	4413      	add	r3, r2
 8006936:	4618      	mov	r0, r3
 8006938:	f7fe fd0c 	bl	8005354 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	3301      	adds	r3, #1
 8006940:	607b      	str	r3, [r7, #4]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b37      	cmp	r3, #55	@ 0x37
 8006946:	d9ef      	bls.n	8006928 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006948:	480d      	ldr	r0, [pc, #52]	@ (8006980 <prvInitialiseTaskLists+0x64>)
 800694a:	f7fe fd03 	bl	8005354 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800694e:	480d      	ldr	r0, [pc, #52]	@ (8006984 <prvInitialiseTaskLists+0x68>)
 8006950:	f7fe fd00 	bl	8005354 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006954:	480c      	ldr	r0, [pc, #48]	@ (8006988 <prvInitialiseTaskLists+0x6c>)
 8006956:	f7fe fcfd 	bl	8005354 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800695a:	480c      	ldr	r0, [pc, #48]	@ (800698c <prvInitialiseTaskLists+0x70>)
 800695c:	f7fe fcfa 	bl	8005354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006960:	480b      	ldr	r0, [pc, #44]	@ (8006990 <prvInitialiseTaskLists+0x74>)
 8006962:	f7fe fcf7 	bl	8005354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006966:	4b0b      	ldr	r3, [pc, #44]	@ (8006994 <prvInitialiseTaskLists+0x78>)
 8006968:	4a05      	ldr	r2, [pc, #20]	@ (8006980 <prvInitialiseTaskLists+0x64>)
 800696a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800696c:	4b0a      	ldr	r3, [pc, #40]	@ (8006998 <prvInitialiseTaskLists+0x7c>)
 800696e:	4a05      	ldr	r2, [pc, #20]	@ (8006984 <prvInitialiseTaskLists+0x68>)
 8006970:	601a      	str	r2, [r3, #0]
}
 8006972:	bf00      	nop
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	20000f00 	.word	0x20000f00
 8006980:	20001360 	.word	0x20001360
 8006984:	20001374 	.word	0x20001374
 8006988:	20001390 	.word	0x20001390
 800698c:	200013a4 	.word	0x200013a4
 8006990:	200013bc 	.word	0x200013bc
 8006994:	20001388 	.word	0x20001388
 8006998:	2000138c 	.word	0x2000138c

0800699c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069a2:	e019      	b.n	80069d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069a4:	f000 fde8 	bl	8007578 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069a8:	4b10      	ldr	r3, [pc, #64]	@ (80069ec <prvCheckTasksWaitingTermination+0x50>)
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	3304      	adds	r3, #4
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fe fd57 	bl	8005468 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069ba:	4b0d      	ldr	r3, [pc, #52]	@ (80069f0 <prvCheckTasksWaitingTermination+0x54>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3b01      	subs	r3, #1
 80069c0:	4a0b      	ldr	r2, [pc, #44]	@ (80069f0 <prvCheckTasksWaitingTermination+0x54>)
 80069c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069c4:	4b0b      	ldr	r3, [pc, #44]	@ (80069f4 <prvCheckTasksWaitingTermination+0x58>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3b01      	subs	r3, #1
 80069ca:	4a0a      	ldr	r2, [pc, #40]	@ (80069f4 <prvCheckTasksWaitingTermination+0x58>)
 80069cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069ce:	f000 fe05 	bl	80075dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f810 	bl	80069f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069d8:	4b06      	ldr	r3, [pc, #24]	@ (80069f4 <prvCheckTasksWaitingTermination+0x58>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e1      	bne.n	80069a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069e0:	bf00      	nop
 80069e2:	bf00      	nop
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	200013a4 	.word	0x200013a4
 80069f0:	200013d0 	.word	0x200013d0
 80069f4:	200013b8 	.word	0x200013b8

080069f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d108      	bne.n	8006a1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 ffa2 	bl	8007958 <vPortFree>
				vPortFree( pxTCB );
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 ff9f 	bl	8007958 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a1a:	e019      	b.n	8006a50 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d103      	bne.n	8006a2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 ff96 	bl	8007958 <vPortFree>
	}
 8006a2c:	e010      	b.n	8006a50 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d00b      	beq.n	8006a50 <prvDeleteTCB+0x58>
	__asm volatile
 8006a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3c:	f383 8811 	msr	BASEPRI, r3
 8006a40:	f3bf 8f6f 	isb	sy
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	60fb      	str	r3, [r7, #12]
}
 8006a4a:	bf00      	nop
 8006a4c:	bf00      	nop
 8006a4e:	e7fd      	b.n	8006a4c <prvDeleteTCB+0x54>
	}
 8006a50:	bf00      	nop
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8006a90 <prvResetNextTaskUnblockTime+0x38>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d104      	bne.n	8006a72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a68:	4b0a      	ldr	r3, [pc, #40]	@ (8006a94 <prvResetNextTaskUnblockTime+0x3c>)
 8006a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a70:	e008      	b.n	8006a84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a72:	4b07      	ldr	r3, [pc, #28]	@ (8006a90 <prvResetNextTaskUnblockTime+0x38>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	4a04      	ldr	r2, [pc, #16]	@ (8006a94 <prvResetNextTaskUnblockTime+0x3c>)
 8006a82:	6013      	str	r3, [r2, #0]
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	20001388 	.word	0x20001388
 8006a94:	200013f0 	.word	0x200013f0

08006a98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8006acc <xTaskGetSchedulerState+0x34>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d102      	bne.n	8006aac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	607b      	str	r3, [r7, #4]
 8006aaa:	e008      	b.n	8006abe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aac:	4b08      	ldr	r3, [pc, #32]	@ (8006ad0 <xTaskGetSchedulerState+0x38>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d102      	bne.n	8006aba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	607b      	str	r3, [r7, #4]
 8006ab8:	e001      	b.n	8006abe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006aba:	2300      	movs	r3, #0
 8006abc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006abe:	687b      	ldr	r3, [r7, #4]
	}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	200013dc 	.word	0x200013dc
 8006ad0:	200013f8 	.word	0x200013f8

08006ad4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d058      	beq.n	8006b9c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006aea:	4b2f      	ldr	r3, [pc, #188]	@ (8006ba8 <xTaskPriorityDisinherit+0xd4>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d00b      	beq.n	8006b0c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	60fb      	str	r3, [r7, #12]
}
 8006b06:	bf00      	nop
 8006b08:	bf00      	nop
 8006b0a:	e7fd      	b.n	8006b08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10b      	bne.n	8006b2c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	60bb      	str	r3, [r7, #8]
}
 8006b26:	bf00      	nop
 8006b28:	bf00      	nop
 8006b2a:	e7fd      	b.n	8006b28 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b30:	1e5a      	subs	r2, r3, #1
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d02c      	beq.n	8006b9c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d128      	bne.n	8006b9c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fe fc8a 	bl	8005468 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b60:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8006bac <xTaskPriorityDisinherit+0xd8>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d903      	bls.n	8006b7c <xTaskPriorityDisinherit+0xa8>
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b78:	4a0c      	ldr	r2, [pc, #48]	@ (8006bac <xTaskPriorityDisinherit+0xd8>)
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b80:	4613      	mov	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4a09      	ldr	r2, [pc, #36]	@ (8006bb0 <xTaskPriorityDisinherit+0xdc>)
 8006b8a:	441a      	add	r2, r3
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	3304      	adds	r3, #4
 8006b90:	4619      	mov	r1, r3
 8006b92:	4610      	mov	r0, r2
 8006b94:	f7fe fc0b 	bl	80053ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b9c:	697b      	ldr	r3, [r7, #20]
	}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000efc 	.word	0x20000efc
 8006bac:	200013d8 	.word	0x200013d8
 8006bb0:	20000f00 	.word	0x20000f00

08006bb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006bbe:	4b21      	ldr	r3, [pc, #132]	@ (8006c44 <prvAddCurrentTaskToDelayedList+0x90>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bc4:	4b20      	ldr	r3, [pc, #128]	@ (8006c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3304      	adds	r3, #4
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fe fc4c 	bl	8005468 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd6:	d10a      	bne.n	8006bee <prvAddCurrentTaskToDelayedList+0x3a>
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d007      	beq.n	8006bee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bde:	4b1a      	ldr	r3, [pc, #104]	@ (8006c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3304      	adds	r3, #4
 8006be4:	4619      	mov	r1, r3
 8006be6:	4819      	ldr	r0, [pc, #100]	@ (8006c4c <prvAddCurrentTaskToDelayedList+0x98>)
 8006be8:	f7fe fbe1 	bl	80053ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006bec:	e026      	b.n	8006c3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006bf6:	4b14      	ldr	r3, [pc, #80]	@ (8006c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d209      	bcs.n	8006c1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c06:	4b12      	ldr	r3, [pc, #72]	@ (8006c50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8006c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	4619      	mov	r1, r3
 8006c12:	4610      	mov	r0, r2
 8006c14:	f7fe fbef 	bl	80053f6 <vListInsert>
}
 8006c18:	e010      	b.n	8006c3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8006c54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3304      	adds	r3, #4
 8006c24:	4619      	mov	r1, r3
 8006c26:	4610      	mov	r0, r2
 8006c28:	f7fe fbe5 	bl	80053f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d202      	bcs.n	8006c3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c36:	4a08      	ldr	r2, [pc, #32]	@ (8006c58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	6013      	str	r3, [r2, #0]
}
 8006c3c:	bf00      	nop
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	200013d4 	.word	0x200013d4
 8006c48:	20000efc 	.word	0x20000efc
 8006c4c:	200013bc 	.word	0x200013bc
 8006c50:	2000138c 	.word	0x2000138c
 8006c54:	20001388 	.word	0x20001388
 8006c58:	200013f0 	.word	0x200013f0

08006c5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b08a      	sub	sp, #40	@ 0x28
 8006c60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c66:	f000 fb13 	bl	8007290 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ce0 <xTimerCreateTimerTask+0x84>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d021      	beq.n	8006cb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c7a:	1d3a      	adds	r2, r7, #4
 8006c7c:	f107 0108 	add.w	r1, r7, #8
 8006c80:	f107 030c 	add.w	r3, r7, #12
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7fe fb4b 	bl	8005320 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	9202      	str	r2, [sp, #8]
 8006c92:	9301      	str	r3, [sp, #4]
 8006c94:	2302      	movs	r3, #2
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	2300      	movs	r3, #0
 8006c9a:	460a      	mov	r2, r1
 8006c9c:	4911      	ldr	r1, [pc, #68]	@ (8006ce4 <xTimerCreateTimerTask+0x88>)
 8006c9e:	4812      	ldr	r0, [pc, #72]	@ (8006ce8 <xTimerCreateTimerTask+0x8c>)
 8006ca0:	f7ff f906 	bl	8005eb0 <xTaskCreateStatic>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	4a11      	ldr	r2, [pc, #68]	@ (8006cec <xTimerCreateTimerTask+0x90>)
 8006ca8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006caa:	4b10      	ldr	r3, [pc, #64]	@ (8006cec <xTimerCreateTimerTask+0x90>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10b      	bne.n	8006cd4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc0:	f383 8811 	msr	BASEPRI, r3
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	613b      	str	r3, [r7, #16]
}
 8006cce:	bf00      	nop
 8006cd0:	bf00      	nop
 8006cd2:	e7fd      	b.n	8006cd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006cd4:	697b      	ldr	r3, [r7, #20]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	2000142c 	.word	0x2000142c
 8006ce4:	08007c48 	.word	0x08007c48
 8006ce8:	08006e29 	.word	0x08006e29
 8006cec:	20001430 	.word	0x20001430

08006cf0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08a      	sub	sp, #40	@ 0x28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
 8006cfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10b      	bne.n	8006d20 <xTimerGenericCommand+0x30>
	__asm volatile
 8006d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	623b      	str	r3, [r7, #32]
}
 8006d1a:	bf00      	nop
 8006d1c:	bf00      	nop
 8006d1e:	e7fd      	b.n	8006d1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d20:	4b19      	ldr	r3, [pc, #100]	@ (8006d88 <xTimerGenericCommand+0x98>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d02a      	beq.n	8006d7e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2b05      	cmp	r3, #5
 8006d38:	dc18      	bgt.n	8006d6c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d3a:	f7ff fead 	bl	8006a98 <xTaskGetSchedulerState>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d109      	bne.n	8006d58 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d44:	4b10      	ldr	r3, [pc, #64]	@ (8006d88 <xTimerGenericCommand+0x98>)
 8006d46:	6818      	ldr	r0, [r3, #0]
 8006d48:	f107 0110 	add.w	r1, r7, #16
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d50:	f7fe fcbe 	bl	80056d0 <xQueueGenericSend>
 8006d54:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d56:	e012      	b.n	8006d7e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d58:	4b0b      	ldr	r3, [pc, #44]	@ (8006d88 <xTimerGenericCommand+0x98>)
 8006d5a:	6818      	ldr	r0, [r3, #0]
 8006d5c:	f107 0110 	add.w	r1, r7, #16
 8006d60:	2300      	movs	r3, #0
 8006d62:	2200      	movs	r2, #0
 8006d64:	f7fe fcb4 	bl	80056d0 <xQueueGenericSend>
 8006d68:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d6a:	e008      	b.n	8006d7e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d6c:	4b06      	ldr	r3, [pc, #24]	@ (8006d88 <xTimerGenericCommand+0x98>)
 8006d6e:	6818      	ldr	r0, [r3, #0]
 8006d70:	f107 0110 	add.w	r1, r7, #16
 8006d74:	2300      	movs	r3, #0
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	f7fe fdac 	bl	80058d4 <xQueueGenericSendFromISR>
 8006d7c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3728      	adds	r7, #40	@ 0x28
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	2000142c 	.word	0x2000142c

08006d8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b088      	sub	sp, #32
 8006d90:	af02      	add	r7, sp, #8
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d96:	4b23      	ldr	r3, [pc, #140]	@ (8006e24 <prvProcessExpiredTimer+0x98>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	3304      	adds	r3, #4
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7fe fb5f 	bl	8005468 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006db0:	f003 0304 	and.w	r3, r3, #4
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d023      	beq.n	8006e00 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	699a      	ldr	r2, [r3, #24]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	18d1      	adds	r1, r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	6978      	ldr	r0, [r7, #20]
 8006dc6:	f000 f8d5 	bl	8006f74 <prvInsertTimerInActiveList>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d020      	beq.n	8006e12 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	2100      	movs	r1, #0
 8006dda:	6978      	ldr	r0, [r7, #20]
 8006ddc:	f7ff ff88 	bl	8006cf0 <xTimerGenericCommand>
 8006de0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d114      	bne.n	8006e12 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	60fb      	str	r3, [r7, #12]
}
 8006dfa:	bf00      	nop
 8006dfc:	bf00      	nop
 8006dfe:	e7fd      	b.n	8006dfc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e06:	f023 0301 	bic.w	r3, r3, #1
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	6978      	ldr	r0, [r7, #20]
 8006e18:	4798      	blx	r3
}
 8006e1a:	bf00      	nop
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20001424 	.word	0x20001424

08006e28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e30:	f107 0308 	add.w	r3, r7, #8
 8006e34:	4618      	mov	r0, r3
 8006e36:	f000 f859 	bl	8006eec <prvGetNextExpireTime>
 8006e3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 f805 	bl	8006e50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e46:	f000 f8d7 	bl	8006ff8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e4a:	bf00      	nop
 8006e4c:	e7f0      	b.n	8006e30 <prvTimerTask+0x8>
	...

08006e50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e5a:	f7ff fa37 	bl	80062cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e5e:	f107 0308 	add.w	r3, r7, #8
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 f866 	bl	8006f34 <prvSampleTimeNow>
 8006e68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d130      	bne.n	8006ed2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10a      	bne.n	8006e8c <prvProcessTimerOrBlockTask+0x3c>
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d806      	bhi.n	8006e8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e7e:	f7ff fa33 	bl	80062e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e82:	68f9      	ldr	r1, [r7, #12]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7ff ff81 	bl	8006d8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e8a:	e024      	b.n	8006ed6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d008      	beq.n	8006ea4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e92:	4b13      	ldr	r3, [pc, #76]	@ (8006ee0 <prvProcessTimerOrBlockTask+0x90>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <prvProcessTimerOrBlockTask+0x50>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e000      	b.n	8006ea2 <prvProcessTimerOrBlockTask+0x52>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8006ee4 <prvProcessTimerOrBlockTask+0x94>)
 8006ea6:	6818      	ldr	r0, [r3, #0]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	f7fe ffc9 	bl	8005e48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006eb6:	f7ff fa17 	bl	80062e8 <xTaskResumeAll>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10a      	bne.n	8006ed6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ec0:	4b09      	ldr	r3, [pc, #36]	@ (8006ee8 <prvProcessTimerOrBlockTask+0x98>)
 8006ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	f3bf 8f6f 	isb	sy
}
 8006ed0:	e001      	b.n	8006ed6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ed2:	f7ff fa09 	bl	80062e8 <xTaskResumeAll>
}
 8006ed6:	bf00      	nop
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	20001428 	.word	0x20001428
 8006ee4:	2000142c 	.word	0x2000142c
 8006ee8:	e000ed04 	.word	0xe000ed04

08006eec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8006f30 <prvGetNextExpireTime+0x44>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <prvGetNextExpireTime+0x16>
 8006efe:	2201      	movs	r2, #1
 8006f00:	e000      	b.n	8006f04 <prvGetNextExpireTime+0x18>
 8006f02:	2200      	movs	r2, #0
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d105      	bne.n	8006f1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f10:	4b07      	ldr	r3, [pc, #28]	@ (8006f30 <prvGetNextExpireTime+0x44>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	60fb      	str	r3, [r7, #12]
 8006f1a:	e001      	b.n	8006f20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f20:	68fb      	ldr	r3, [r7, #12]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3714      	adds	r7, #20
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	20001424 	.word	0x20001424

08006f34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f3c:	f7ff fa72 	bl	8006424 <xTaskGetTickCount>
 8006f40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f42:	4b0b      	ldr	r3, [pc, #44]	@ (8006f70 <prvSampleTimeNow+0x3c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d205      	bcs.n	8006f58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f4c:	f000 f93a 	bl	80071c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	e002      	b.n	8006f5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f5e:	4a04      	ldr	r2, [pc, #16]	@ (8006f70 <prvSampleTimeNow+0x3c>)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f64:	68fb      	ldr	r3, [r7, #12]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20001434 	.word	0x20001434

08006f74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
 8006f80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f82:	2300      	movs	r3, #0
 8006f84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d812      	bhi.n	8006fc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	1ad2      	subs	r2, r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d302      	bcc.n	8006fae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	e01b      	b.n	8006fe6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006fae:	4b10      	ldr	r3, [pc, #64]	@ (8006ff0 <prvInsertTimerInActiveList+0x7c>)
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4610      	mov	r0, r2
 8006fba:	f7fe fa1c 	bl	80053f6 <vListInsert>
 8006fbe:	e012      	b.n	8006fe6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d206      	bcs.n	8006fd6 <prvInsertTimerInActiveList+0x62>
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d302      	bcc.n	8006fd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	e007      	b.n	8006fe6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fd6:	4b07      	ldr	r3, [pc, #28]	@ (8006ff4 <prvInsertTimerInActiveList+0x80>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3304      	adds	r3, #4
 8006fde:	4619      	mov	r1, r3
 8006fe0:	4610      	mov	r0, r2
 8006fe2:	f7fe fa08 	bl	80053f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006fe6:	697b      	ldr	r3, [r7, #20]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	20001428 	.word	0x20001428
 8006ff4:	20001424 	.word	0x20001424

08006ff8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08e      	sub	sp, #56	@ 0x38
 8006ffc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ffe:	e0ce      	b.n	800719e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	da19      	bge.n	800703a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007006:	1d3b      	adds	r3, r7, #4
 8007008:	3304      	adds	r3, #4
 800700a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800700c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10b      	bne.n	800702a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	61fb      	str	r3, [r7, #28]
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop
 8007028:	e7fd      	b.n	8007026 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800702a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007030:	6850      	ldr	r0, [r2, #4]
 8007032:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007034:	6892      	ldr	r2, [r2, #8]
 8007036:	4611      	mov	r1, r2
 8007038:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	f2c0 80ae 	blt.w	800719e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d004      	beq.n	8007058 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800704e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007050:	3304      	adds	r3, #4
 8007052:	4618      	mov	r0, r3
 8007054:	f7fe fa08 	bl	8005468 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007058:	463b      	mov	r3, r7
 800705a:	4618      	mov	r0, r3
 800705c:	f7ff ff6a 	bl	8006f34 <prvSampleTimeNow>
 8007060:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b09      	cmp	r3, #9
 8007066:	f200 8097 	bhi.w	8007198 <prvProcessReceivedCommands+0x1a0>
 800706a:	a201      	add	r2, pc, #4	@ (adr r2, 8007070 <prvProcessReceivedCommands+0x78>)
 800706c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007070:	08007099 	.word	0x08007099
 8007074:	08007099 	.word	0x08007099
 8007078:	08007099 	.word	0x08007099
 800707c:	0800710f 	.word	0x0800710f
 8007080:	08007123 	.word	0x08007123
 8007084:	0800716f 	.word	0x0800716f
 8007088:	08007099 	.word	0x08007099
 800708c:	08007099 	.word	0x08007099
 8007090:	0800710f 	.word	0x0800710f
 8007094:	08007123 	.word	0x08007123
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800709e:	f043 0301 	orr.w	r3, r3, #1
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	18d1      	adds	r1, r2, r3
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070b8:	f7ff ff5c 	bl	8006f74 <prvInsertTimerInActiveList>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d06c      	beq.n	800719c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d061      	beq.n	800719c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	441a      	add	r2, r3
 80070e0:	2300      	movs	r3, #0
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	2300      	movs	r3, #0
 80070e6:	2100      	movs	r1, #0
 80070e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070ea:	f7ff fe01 	bl	8006cf0 <xTimerGenericCommand>
 80070ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d152      	bne.n	800719c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	61bb      	str	r3, [r7, #24]
}
 8007108:	bf00      	nop
 800710a:	bf00      	nop
 800710c:	e7fd      	b.n	800710a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800710e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007110:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007114:	f023 0301 	bic.w	r3, r3, #1
 8007118:	b2da      	uxtb	r2, r3
 800711a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007120:	e03d      	b.n	800719e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007124:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007128:	f043 0301 	orr.w	r3, r3, #1
 800712c:	b2da      	uxtb	r2, r3
 800712e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007130:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007138:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800713a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10b      	bne.n	800715a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	617b      	str	r3, [r7, #20]
}
 8007154:	bf00      	nop
 8007156:	bf00      	nop
 8007158:	e7fd      	b.n	8007156 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800715a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715c:	699a      	ldr	r2, [r3, #24]
 800715e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007160:	18d1      	adds	r1, r2, r3
 8007162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007166:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007168:	f7ff ff04 	bl	8006f74 <prvInsertTimerInActiveList>
					break;
 800716c:	e017      	b.n	800719e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800716e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007170:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007174:	f003 0302 	and.w	r3, r3, #2
 8007178:	2b00      	cmp	r3, #0
 800717a:	d103      	bne.n	8007184 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800717c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800717e:	f000 fbeb 	bl	8007958 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007182:	e00c      	b.n	800719e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007186:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800718a:	f023 0301 	bic.w	r3, r3, #1
 800718e:	b2da      	uxtb	r2, r3
 8007190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007192:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007196:	e002      	b.n	800719e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007198:	bf00      	nop
 800719a:	e000      	b.n	800719e <prvProcessReceivedCommands+0x1a6>
					break;
 800719c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800719e:	4b08      	ldr	r3, [pc, #32]	@ (80071c0 <prvProcessReceivedCommands+0x1c8>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	1d39      	adds	r1, r7, #4
 80071a4:	2200      	movs	r2, #0
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe fc32 	bl	8005a10 <xQueueReceive>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f47f af26 	bne.w	8007000 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop
 80071b8:	3730      	adds	r7, #48	@ 0x30
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	2000142c 	.word	0x2000142c

080071c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b088      	sub	sp, #32
 80071c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071ca:	e049      	b.n	8007260 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071cc:	4b2e      	ldr	r3, [pc, #184]	@ (8007288 <prvSwitchTimerLists+0xc4>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071d6:	4b2c      	ldr	r3, [pc, #176]	@ (8007288 <prvSwitchTimerLists+0xc4>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3304      	adds	r3, #4
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7fe f93f 	bl	8005468 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d02f      	beq.n	8007260 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	4413      	add	r3, r2
 8007208:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	429a      	cmp	r2, r3
 8007210:	d90e      	bls.n	8007230 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800721e:	4b1a      	ldr	r3, [pc, #104]	@ (8007288 <prvSwitchTimerLists+0xc4>)
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3304      	adds	r3, #4
 8007226:	4619      	mov	r1, r3
 8007228:	4610      	mov	r0, r2
 800722a:	f7fe f8e4 	bl	80053f6 <vListInsert>
 800722e:	e017      	b.n	8007260 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007230:	2300      	movs	r3, #0
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	2300      	movs	r3, #0
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	2100      	movs	r1, #0
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f7ff fd58 	bl	8006cf0 <xTimerGenericCommand>
 8007240:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10b      	bne.n	8007260 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	603b      	str	r3, [r7, #0]
}
 800725a:	bf00      	nop
 800725c:	bf00      	nop
 800725e:	e7fd      	b.n	800725c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007260:	4b09      	ldr	r3, [pc, #36]	@ (8007288 <prvSwitchTimerLists+0xc4>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1b0      	bne.n	80071cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800726a:	4b07      	ldr	r3, [pc, #28]	@ (8007288 <prvSwitchTimerLists+0xc4>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007270:	4b06      	ldr	r3, [pc, #24]	@ (800728c <prvSwitchTimerLists+0xc8>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a04      	ldr	r2, [pc, #16]	@ (8007288 <prvSwitchTimerLists+0xc4>)
 8007276:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007278:	4a04      	ldr	r2, [pc, #16]	@ (800728c <prvSwitchTimerLists+0xc8>)
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	6013      	str	r3, [r2, #0]
}
 800727e:	bf00      	nop
 8007280:	3718      	adds	r7, #24
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20001424 	.word	0x20001424
 800728c:	20001428 	.word	0x20001428

08007290 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007296:	f000 f96f 	bl	8007578 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800729a:	4b15      	ldr	r3, [pc, #84]	@ (80072f0 <prvCheckForValidListAndQueue+0x60>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d120      	bne.n	80072e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80072a2:	4814      	ldr	r0, [pc, #80]	@ (80072f4 <prvCheckForValidListAndQueue+0x64>)
 80072a4:	f7fe f856 	bl	8005354 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072a8:	4813      	ldr	r0, [pc, #76]	@ (80072f8 <prvCheckForValidListAndQueue+0x68>)
 80072aa:	f7fe f853 	bl	8005354 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80072ae:	4b13      	ldr	r3, [pc, #76]	@ (80072fc <prvCheckForValidListAndQueue+0x6c>)
 80072b0:	4a10      	ldr	r2, [pc, #64]	@ (80072f4 <prvCheckForValidListAndQueue+0x64>)
 80072b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80072b4:	4b12      	ldr	r3, [pc, #72]	@ (8007300 <prvCheckForValidListAndQueue+0x70>)
 80072b6:	4a10      	ldr	r2, [pc, #64]	@ (80072f8 <prvCheckForValidListAndQueue+0x68>)
 80072b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80072ba:	2300      	movs	r3, #0
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	4b11      	ldr	r3, [pc, #68]	@ (8007304 <prvCheckForValidListAndQueue+0x74>)
 80072c0:	4a11      	ldr	r2, [pc, #68]	@ (8007308 <prvCheckForValidListAndQueue+0x78>)
 80072c2:	2110      	movs	r1, #16
 80072c4:	200a      	movs	r0, #10
 80072c6:	f7fe f963 	bl	8005590 <xQueueGenericCreateStatic>
 80072ca:	4603      	mov	r3, r0
 80072cc:	4a08      	ldr	r2, [pc, #32]	@ (80072f0 <prvCheckForValidListAndQueue+0x60>)
 80072ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80072d0:	4b07      	ldr	r3, [pc, #28]	@ (80072f0 <prvCheckForValidListAndQueue+0x60>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d005      	beq.n	80072e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80072d8:	4b05      	ldr	r3, [pc, #20]	@ (80072f0 <prvCheckForValidListAndQueue+0x60>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	490b      	ldr	r1, [pc, #44]	@ (800730c <prvCheckForValidListAndQueue+0x7c>)
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fe fd88 	bl	8005df4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072e4:	f000 f97a 	bl	80075dc <vPortExitCritical>
}
 80072e8:	bf00      	nop
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	2000142c 	.word	0x2000142c
 80072f4:	200013fc 	.word	0x200013fc
 80072f8:	20001410 	.word	0x20001410
 80072fc:	20001424 	.word	0x20001424
 8007300:	20001428 	.word	0x20001428
 8007304:	200014d8 	.word	0x200014d8
 8007308:	20001438 	.word	0x20001438
 800730c:	08007c50 	.word	0x08007c50

08007310 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	3b04      	subs	r3, #4
 8007320:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007328:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	3b04      	subs	r3, #4
 800732e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	f023 0201 	bic.w	r2, r3, #1
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	3b04      	subs	r3, #4
 800733e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007340:	4a0c      	ldr	r2, [pc, #48]	@ (8007374 <pxPortInitialiseStack+0x64>)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	3b14      	subs	r3, #20
 800734a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3b04      	subs	r3, #4
 8007356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f06f 0202 	mvn.w	r2, #2
 800735e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	3b20      	subs	r3, #32
 8007364:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007366:	68fb      	ldr	r3, [r7, #12]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	08007379 	.word	0x08007379

08007378 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007382:	4b13      	ldr	r3, [pc, #76]	@ (80073d0 <prvTaskExitError+0x58>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738a:	d00b      	beq.n	80073a4 <prvTaskExitError+0x2c>
	__asm volatile
 800738c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007390:	f383 8811 	msr	BASEPRI, r3
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	60fb      	str	r3, [r7, #12]
}
 800739e:	bf00      	nop
 80073a0:	bf00      	nop
 80073a2:	e7fd      	b.n	80073a0 <prvTaskExitError+0x28>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	60bb      	str	r3, [r7, #8]
}
 80073b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073b8:	bf00      	nop
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d0fc      	beq.n	80073ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073c0:	bf00      	nop
 80073c2:	bf00      	nop
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	20000030 	.word	0x20000030
	...

080073e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073e0:	4b07      	ldr	r3, [pc, #28]	@ (8007400 <pxCurrentTCBConst2>)
 80073e2:	6819      	ldr	r1, [r3, #0]
 80073e4:	6808      	ldr	r0, [r1, #0]
 80073e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ea:	f380 8809 	msr	PSP, r0
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f04f 0000 	mov.w	r0, #0
 80073f6:	f380 8811 	msr	BASEPRI, r0
 80073fa:	4770      	bx	lr
 80073fc:	f3af 8000 	nop.w

08007400 <pxCurrentTCBConst2>:
 8007400:	20000efc 	.word	0x20000efc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007404:	bf00      	nop
 8007406:	bf00      	nop

08007408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007408:	4808      	ldr	r0, [pc, #32]	@ (800742c <prvPortStartFirstTask+0x24>)
 800740a:	6800      	ldr	r0, [r0, #0]
 800740c:	6800      	ldr	r0, [r0, #0]
 800740e:	f380 8808 	msr	MSP, r0
 8007412:	f04f 0000 	mov.w	r0, #0
 8007416:	f380 8814 	msr	CONTROL, r0
 800741a:	b662      	cpsie	i
 800741c:	b661      	cpsie	f
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	df00      	svc	0
 8007428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800742a:	bf00      	nop
 800742c:	e000ed08 	.word	0xe000ed08

08007430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007436:	4b47      	ldr	r3, [pc, #284]	@ (8007554 <xPortStartScheduler+0x124>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a47      	ldr	r2, [pc, #284]	@ (8007558 <xPortStartScheduler+0x128>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d10b      	bne.n	8007458 <xPortStartScheduler+0x28>
	__asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	613b      	str	r3, [r7, #16]
}
 8007452:	bf00      	nop
 8007454:	bf00      	nop
 8007456:	e7fd      	b.n	8007454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007458:	4b3e      	ldr	r3, [pc, #248]	@ (8007554 <xPortStartScheduler+0x124>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a3f      	ldr	r2, [pc, #252]	@ (800755c <xPortStartScheduler+0x12c>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d10b      	bne.n	800747a <xPortStartScheduler+0x4a>
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	60fb      	str	r3, [r7, #12]
}
 8007474:	bf00      	nop
 8007476:	bf00      	nop
 8007478:	e7fd      	b.n	8007476 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800747a:	4b39      	ldr	r3, [pc, #228]	@ (8007560 <xPortStartScheduler+0x130>)
 800747c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	22ff      	movs	r2, #255	@ 0xff
 800748a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	b2db      	uxtb	r3, r3
 8007492:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007494:	78fb      	ldrb	r3, [r7, #3]
 8007496:	b2db      	uxtb	r3, r3
 8007498:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800749c:	b2da      	uxtb	r2, r3
 800749e:	4b31      	ldr	r3, [pc, #196]	@ (8007564 <xPortStartScheduler+0x134>)
 80074a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074a2:	4b31      	ldr	r3, [pc, #196]	@ (8007568 <xPortStartScheduler+0x138>)
 80074a4:	2207      	movs	r2, #7
 80074a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074a8:	e009      	b.n	80074be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80074aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007568 <xPortStartScheduler+0x138>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	4a2d      	ldr	r2, [pc, #180]	@ (8007568 <xPortStartScheduler+0x138>)
 80074b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	005b      	lsls	r3, r3, #1
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074be:	78fb      	ldrb	r3, [r7, #3]
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074c6:	2b80      	cmp	r3, #128	@ 0x80
 80074c8:	d0ef      	beq.n	80074aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074ca:	4b27      	ldr	r3, [pc, #156]	@ (8007568 <xPortStartScheduler+0x138>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f1c3 0307 	rsb	r3, r3, #7
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	d00b      	beq.n	80074ee <xPortStartScheduler+0xbe>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	60bb      	str	r3, [r7, #8]
}
 80074e8:	bf00      	nop
 80074ea:	bf00      	nop
 80074ec:	e7fd      	b.n	80074ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074ee:	4b1e      	ldr	r3, [pc, #120]	@ (8007568 <xPortStartScheduler+0x138>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	021b      	lsls	r3, r3, #8
 80074f4:	4a1c      	ldr	r2, [pc, #112]	@ (8007568 <xPortStartScheduler+0x138>)
 80074f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007568 <xPortStartScheduler+0x138>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007500:	4a19      	ldr	r2, [pc, #100]	@ (8007568 <xPortStartScheduler+0x138>)
 8007502:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	b2da      	uxtb	r2, r3
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800750c:	4b17      	ldr	r3, [pc, #92]	@ (800756c <xPortStartScheduler+0x13c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a16      	ldr	r2, [pc, #88]	@ (800756c <xPortStartScheduler+0x13c>)
 8007512:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007516:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007518:	4b14      	ldr	r3, [pc, #80]	@ (800756c <xPortStartScheduler+0x13c>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a13      	ldr	r2, [pc, #76]	@ (800756c <xPortStartScheduler+0x13c>)
 800751e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007522:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007524:	f000 f8da 	bl	80076dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007528:	4b11      	ldr	r3, [pc, #68]	@ (8007570 <xPortStartScheduler+0x140>)
 800752a:	2200      	movs	r2, #0
 800752c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800752e:	f000 f8f9 	bl	8007724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007532:	4b10      	ldr	r3, [pc, #64]	@ (8007574 <xPortStartScheduler+0x144>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a0f      	ldr	r2, [pc, #60]	@ (8007574 <xPortStartScheduler+0x144>)
 8007538:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800753c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800753e:	f7ff ff63 	bl	8007408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007542:	f7ff f839 	bl	80065b8 <vTaskSwitchContext>
	prvTaskExitError();
 8007546:	f7ff ff17 	bl	8007378 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3718      	adds	r7, #24
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	e000ed00 	.word	0xe000ed00
 8007558:	410fc271 	.word	0x410fc271
 800755c:	410fc270 	.word	0x410fc270
 8007560:	e000e400 	.word	0xe000e400
 8007564:	20001528 	.word	0x20001528
 8007568:	2000152c 	.word	0x2000152c
 800756c:	e000ed20 	.word	0xe000ed20
 8007570:	20000030 	.word	0x20000030
 8007574:	e000ef34 	.word	0xe000ef34

08007578 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	607b      	str	r3, [r7, #4]
}
 8007590:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007592:	4b10      	ldr	r3, [pc, #64]	@ (80075d4 <vPortEnterCritical+0x5c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3301      	adds	r3, #1
 8007598:	4a0e      	ldr	r2, [pc, #56]	@ (80075d4 <vPortEnterCritical+0x5c>)
 800759a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800759c:	4b0d      	ldr	r3, [pc, #52]	@ (80075d4 <vPortEnterCritical+0x5c>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d110      	bne.n	80075c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075a4:	4b0c      	ldr	r3, [pc, #48]	@ (80075d8 <vPortEnterCritical+0x60>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00b      	beq.n	80075c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	603b      	str	r3, [r7, #0]
}
 80075c0:	bf00      	nop
 80075c2:	bf00      	nop
 80075c4:	e7fd      	b.n	80075c2 <vPortEnterCritical+0x4a>
	}
}
 80075c6:	bf00      	nop
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	20000030 	.word	0x20000030
 80075d8:	e000ed04 	.word	0xe000ed04

080075dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075e2:	4b12      	ldr	r3, [pc, #72]	@ (800762c <vPortExitCritical+0x50>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10b      	bne.n	8007602 <vPortExitCritical+0x26>
	__asm volatile
 80075ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ee:	f383 8811 	msr	BASEPRI, r3
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	607b      	str	r3, [r7, #4]
}
 80075fc:	bf00      	nop
 80075fe:	bf00      	nop
 8007600:	e7fd      	b.n	80075fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007602:	4b0a      	ldr	r3, [pc, #40]	@ (800762c <vPortExitCritical+0x50>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	3b01      	subs	r3, #1
 8007608:	4a08      	ldr	r2, [pc, #32]	@ (800762c <vPortExitCritical+0x50>)
 800760a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800760c:	4b07      	ldr	r3, [pc, #28]	@ (800762c <vPortExitCritical+0x50>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d105      	bne.n	8007620 <vPortExitCritical+0x44>
 8007614:	2300      	movs	r3, #0
 8007616:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	f383 8811 	msr	BASEPRI, r3
}
 800761e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	20000030 	.word	0x20000030

08007630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007630:	f3ef 8009 	mrs	r0, PSP
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	4b15      	ldr	r3, [pc, #84]	@ (8007690 <pxCurrentTCBConst>)
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	f01e 0f10 	tst.w	lr, #16
 8007640:	bf08      	it	eq
 8007642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764a:	6010      	str	r0, [r2, #0]
 800764c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007650:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007654:	f380 8811 	msr	BASEPRI, r0
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f7fe ffaa 	bl	80065b8 <vTaskSwitchContext>
 8007664:	f04f 0000 	mov.w	r0, #0
 8007668:	f380 8811 	msr	BASEPRI, r0
 800766c:	bc09      	pop	{r0, r3}
 800766e:	6819      	ldr	r1, [r3, #0]
 8007670:	6808      	ldr	r0, [r1, #0]
 8007672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007676:	f01e 0f10 	tst.w	lr, #16
 800767a:	bf08      	it	eq
 800767c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007680:	f380 8809 	msr	PSP, r0
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	f3af 8000 	nop.w

08007690 <pxCurrentTCBConst>:
 8007690:	20000efc 	.word	0x20000efc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007694:	bf00      	nop
 8007696:	bf00      	nop

08007698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	607b      	str	r3, [r7, #4]
}
 80076b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076b2:	f7fe fec7 	bl	8006444 <xTaskIncrementTick>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d003      	beq.n	80076c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076bc:	4b06      	ldr	r3, [pc, #24]	@ (80076d8 <xPortSysTickHandler+0x40>)
 80076be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	2300      	movs	r3, #0
 80076c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	f383 8811 	msr	BASEPRI, r3
}
 80076ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076d0:	bf00      	nop
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	e000ed04 	.word	0xe000ed04

080076dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076dc:	b480      	push	{r7}
 80076de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007710 <vPortSetupTimerInterrupt+0x34>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007714 <vPortSetupTimerInterrupt+0x38>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007718 <vPortSetupTimerInterrupt+0x3c>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a0a      	ldr	r2, [pc, #40]	@ (800771c <vPortSetupTimerInterrupt+0x40>)
 80076f2:	fba2 2303 	umull	r2, r3, r2, r3
 80076f6:	099b      	lsrs	r3, r3, #6
 80076f8:	4a09      	ldr	r2, [pc, #36]	@ (8007720 <vPortSetupTimerInterrupt+0x44>)
 80076fa:	3b01      	subs	r3, #1
 80076fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076fe:	4b04      	ldr	r3, [pc, #16]	@ (8007710 <vPortSetupTimerInterrupt+0x34>)
 8007700:	2207      	movs	r2, #7
 8007702:	601a      	str	r2, [r3, #0]
}
 8007704:	bf00      	nop
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	e000e010 	.word	0xe000e010
 8007714:	e000e018 	.word	0xe000e018
 8007718:	20000024 	.word	0x20000024
 800771c:	10624dd3 	.word	0x10624dd3
 8007720:	e000e014 	.word	0xe000e014

08007724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007724:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007734 <vPortEnableVFP+0x10>
 8007728:	6801      	ldr	r1, [r0, #0]
 800772a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800772e:	6001      	str	r1, [r0, #0]
 8007730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007732:	bf00      	nop
 8007734:	e000ed88 	.word	0xe000ed88

08007738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800773e:	f3ef 8305 	mrs	r3, IPSR
 8007742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2b0f      	cmp	r3, #15
 8007748:	d915      	bls.n	8007776 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800774a:	4a18      	ldr	r2, [pc, #96]	@ (80077ac <vPortValidateInterruptPriority+0x74>)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4413      	add	r3, r2
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007754:	4b16      	ldr	r3, [pc, #88]	@ (80077b0 <vPortValidateInterruptPriority+0x78>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	7afa      	ldrb	r2, [r7, #11]
 800775a:	429a      	cmp	r2, r3
 800775c:	d20b      	bcs.n	8007776 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	607b      	str	r3, [r7, #4]
}
 8007770:	bf00      	nop
 8007772:	bf00      	nop
 8007774:	e7fd      	b.n	8007772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007776:	4b0f      	ldr	r3, [pc, #60]	@ (80077b4 <vPortValidateInterruptPriority+0x7c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800777e:	4b0e      	ldr	r3, [pc, #56]	@ (80077b8 <vPortValidateInterruptPriority+0x80>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	429a      	cmp	r2, r3
 8007784:	d90b      	bls.n	800779e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	603b      	str	r3, [r7, #0]
}
 8007798:	bf00      	nop
 800779a:	bf00      	nop
 800779c:	e7fd      	b.n	800779a <vPortValidateInterruptPriority+0x62>
	}
 800779e:	bf00      	nop
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	e000e3f0 	.word	0xe000e3f0
 80077b0:	20001528 	.word	0x20001528
 80077b4:	e000ed0c 	.word	0xe000ed0c
 80077b8:	2000152c 	.word	0x2000152c

080077bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b08a      	sub	sp, #40	@ 0x28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077c4:	2300      	movs	r3, #0
 80077c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077c8:	f7fe fd80 	bl	80062cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077cc:	4b5c      	ldr	r3, [pc, #368]	@ (8007940 <pvPortMalloc+0x184>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077d4:	f000 f924 	bl	8007a20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077d8:	4b5a      	ldr	r3, [pc, #360]	@ (8007944 <pvPortMalloc+0x188>)
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4013      	ands	r3, r2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f040 8095 	bne.w	8007910 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d01e      	beq.n	800782a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80077ec:	2208      	movs	r2, #8
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4413      	add	r3, r2
 80077f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f003 0307 	and.w	r3, r3, #7
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d015      	beq.n	800782a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f023 0307 	bic.w	r3, r3, #7
 8007804:	3308      	adds	r3, #8
 8007806:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f003 0307 	and.w	r3, r3, #7
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00b      	beq.n	800782a <pvPortMalloc+0x6e>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	617b      	str	r3, [r7, #20]
}
 8007824:	bf00      	nop
 8007826:	bf00      	nop
 8007828:	e7fd      	b.n	8007826 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d06f      	beq.n	8007910 <pvPortMalloc+0x154>
 8007830:	4b45      	ldr	r3, [pc, #276]	@ (8007948 <pvPortMalloc+0x18c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	429a      	cmp	r2, r3
 8007838:	d86a      	bhi.n	8007910 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800783a:	4b44      	ldr	r3, [pc, #272]	@ (800794c <pvPortMalloc+0x190>)
 800783c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800783e:	4b43      	ldr	r3, [pc, #268]	@ (800794c <pvPortMalloc+0x190>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007844:	e004      	b.n	8007850 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007848:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	429a      	cmp	r2, r3
 8007858:	d903      	bls.n	8007862 <pvPortMalloc+0xa6>
 800785a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1f1      	bne.n	8007846 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007862:	4b37      	ldr	r3, [pc, #220]	@ (8007940 <pvPortMalloc+0x184>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007868:	429a      	cmp	r2, r3
 800786a:	d051      	beq.n	8007910 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2208      	movs	r2, #8
 8007872:	4413      	add	r3, r2
 8007874:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800787e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007880:	685a      	ldr	r2, [r3, #4]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	1ad2      	subs	r2, r2, r3
 8007886:	2308      	movs	r3, #8
 8007888:	005b      	lsls	r3, r3, #1
 800788a:	429a      	cmp	r2, r3
 800788c:	d920      	bls.n	80078d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800788e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4413      	add	r3, r2
 8007894:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	f003 0307 	and.w	r3, r3, #7
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00b      	beq.n	80078b8 <pvPortMalloc+0xfc>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	613b      	str	r3, [r7, #16]
}
 80078b2:	bf00      	nop
 80078b4:	bf00      	nop
 80078b6:	e7fd      	b.n	80078b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	1ad2      	subs	r2, r2, r3
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078ca:	69b8      	ldr	r0, [r7, #24]
 80078cc:	f000 f90a 	bl	8007ae4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078d0:	4b1d      	ldr	r3, [pc, #116]	@ (8007948 <pvPortMalloc+0x18c>)
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	4a1b      	ldr	r2, [pc, #108]	@ (8007948 <pvPortMalloc+0x18c>)
 80078dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078de:	4b1a      	ldr	r3, [pc, #104]	@ (8007948 <pvPortMalloc+0x18c>)
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007950 <pvPortMalloc+0x194>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d203      	bcs.n	80078f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078ea:	4b17      	ldr	r3, [pc, #92]	@ (8007948 <pvPortMalloc+0x18c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a18      	ldr	r2, [pc, #96]	@ (8007950 <pvPortMalloc+0x194>)
 80078f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	4b13      	ldr	r3, [pc, #76]	@ (8007944 <pvPortMalloc+0x188>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	431a      	orrs	r2, r3
 80078fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007902:	2200      	movs	r2, #0
 8007904:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007906:	4b13      	ldr	r3, [pc, #76]	@ (8007954 <pvPortMalloc+0x198>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3301      	adds	r3, #1
 800790c:	4a11      	ldr	r2, [pc, #68]	@ (8007954 <pvPortMalloc+0x198>)
 800790e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007910:	f7fe fcea 	bl	80062e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	f003 0307 	and.w	r3, r3, #7
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00b      	beq.n	8007936 <pvPortMalloc+0x17a>
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	60fb      	str	r3, [r7, #12]
}
 8007930:	bf00      	nop
 8007932:	bf00      	nop
 8007934:	e7fd      	b.n	8007932 <pvPortMalloc+0x176>
	return pvReturn;
 8007936:	69fb      	ldr	r3, [r7, #28]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3728      	adds	r7, #40	@ 0x28
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	200020f0 	.word	0x200020f0
 8007944:	20002104 	.word	0x20002104
 8007948:	200020f4 	.word	0x200020f4
 800794c:	200020e8 	.word	0x200020e8
 8007950:	200020f8 	.word	0x200020f8
 8007954:	200020fc 	.word	0x200020fc

08007958 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d04f      	beq.n	8007a0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800796a:	2308      	movs	r3, #8
 800796c:	425b      	negs	r3, r3
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	4413      	add	r3, r2
 8007972:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	4b25      	ldr	r3, [pc, #148]	@ (8007a14 <vPortFree+0xbc>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4013      	ands	r3, r2
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10b      	bne.n	800799e <vPortFree+0x46>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	60fb      	str	r3, [r7, #12]
}
 8007998:	bf00      	nop
 800799a:	bf00      	nop
 800799c:	e7fd      	b.n	800799a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00b      	beq.n	80079be <vPortFree+0x66>
	__asm volatile
 80079a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	60bb      	str	r3, [r7, #8]
}
 80079b8:	bf00      	nop
 80079ba:	bf00      	nop
 80079bc:	e7fd      	b.n	80079ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	685a      	ldr	r2, [r3, #4]
 80079c2:	4b14      	ldr	r3, [pc, #80]	@ (8007a14 <vPortFree+0xbc>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4013      	ands	r3, r2
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d01e      	beq.n	8007a0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d11a      	bne.n	8007a0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007a14 <vPortFree+0xbc>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	43db      	mvns	r3, r3
 80079de:	401a      	ands	r2, r3
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079e4:	f7fe fc72 	bl	80062cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007a18 <vPortFree+0xc0>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4413      	add	r3, r2
 80079f2:	4a09      	ldr	r2, [pc, #36]	@ (8007a18 <vPortFree+0xc0>)
 80079f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079f6:	6938      	ldr	r0, [r7, #16]
 80079f8:	f000 f874 	bl	8007ae4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80079fc:	4b07      	ldr	r3, [pc, #28]	@ (8007a1c <vPortFree+0xc4>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3301      	adds	r3, #1
 8007a02:	4a06      	ldr	r2, [pc, #24]	@ (8007a1c <vPortFree+0xc4>)
 8007a04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a06:	f7fe fc6f 	bl	80062e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a0a:	bf00      	nop
 8007a0c:	3718      	adds	r7, #24
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20002104 	.word	0x20002104
 8007a18:	200020f4 	.word	0x200020f4
 8007a1c:	20002100 	.word	0x20002100

08007a20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a26:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007a2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a2c:	4b27      	ldr	r3, [pc, #156]	@ (8007acc <prvHeapInit+0xac>)
 8007a2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f003 0307 	and.w	r3, r3, #7
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00c      	beq.n	8007a54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	3307      	adds	r3, #7
 8007a3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0307 	bic.w	r3, r3, #7
 8007a46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8007acc <prvHeapInit+0xac>)
 8007a50:	4413      	add	r3, r2
 8007a52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a58:	4a1d      	ldr	r2, [pc, #116]	@ (8007ad0 <prvHeapInit+0xb0>)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ad0 <prvHeapInit+0xb0>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	4413      	add	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a6c:	2208      	movs	r2, #8
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	1a9b      	subs	r3, r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 0307 	bic.w	r3, r3, #7
 8007a7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4a15      	ldr	r2, [pc, #84]	@ (8007ad4 <prvHeapInit+0xb4>)
 8007a80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a82:	4b14      	ldr	r3, [pc, #80]	@ (8007ad4 <prvHeapInit+0xb4>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2200      	movs	r2, #0
 8007a88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a8a:	4b12      	ldr	r3, [pc, #72]	@ (8007ad4 <prvHeapInit+0xb4>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	1ad2      	subs	r2, r2, r3
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ad4 <prvHeapInit+0xb4>)
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	4a0a      	ldr	r2, [pc, #40]	@ (8007ad8 <prvHeapInit+0xb8>)
 8007aae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	4a09      	ldr	r2, [pc, #36]	@ (8007adc <prvHeapInit+0xbc>)
 8007ab6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ab8:	4b09      	ldr	r3, [pc, #36]	@ (8007ae0 <prvHeapInit+0xc0>)
 8007aba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007abe:	601a      	str	r2, [r3, #0]
}
 8007ac0:	bf00      	nop
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	20001530 	.word	0x20001530
 8007ad0:	200020e8 	.word	0x200020e8
 8007ad4:	200020f0 	.word	0x200020f0
 8007ad8:	200020f8 	.word	0x200020f8
 8007adc:	200020f4 	.word	0x200020f4
 8007ae0:	20002104 	.word	0x20002104

08007ae4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007aec:	4b28      	ldr	r3, [pc, #160]	@ (8007b90 <prvInsertBlockIntoFreeList+0xac>)
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	e002      	b.n	8007af8 <prvInsertBlockIntoFreeList+0x14>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	60fb      	str	r3, [r7, #12]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d8f7      	bhi.n	8007af2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d108      	bne.n	8007b26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	685a      	ldr	r2, [r3, #4]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	441a      	add	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	441a      	add	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d118      	bne.n	8007b6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	4b15      	ldr	r3, [pc, #84]	@ (8007b94 <prvInsertBlockIntoFreeList+0xb0>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d00d      	beq.n	8007b62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685a      	ldr	r2, [r3, #4]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	441a      	add	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	601a      	str	r2, [r3, #0]
 8007b60:	e008      	b.n	8007b74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b62:	4b0c      	ldr	r3, [pc, #48]	@ (8007b94 <prvInsertBlockIntoFreeList+0xb0>)
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	e003      	b.n	8007b74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d002      	beq.n	8007b82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b82:	bf00      	nop
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	200020e8 	.word	0x200020e8
 8007b94:	200020f0 	.word	0x200020f0

08007b98 <memset>:
 8007b98:	4402      	add	r2, r0
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d100      	bne.n	8007ba2 <memset+0xa>
 8007ba0:	4770      	bx	lr
 8007ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ba6:	e7f9      	b.n	8007b9c <memset+0x4>

08007ba8 <__libc_init_array>:
 8007ba8:	b570      	push	{r4, r5, r6, lr}
 8007baa:	4d0d      	ldr	r5, [pc, #52]	@ (8007be0 <__libc_init_array+0x38>)
 8007bac:	4c0d      	ldr	r4, [pc, #52]	@ (8007be4 <__libc_init_array+0x3c>)
 8007bae:	1b64      	subs	r4, r4, r5
 8007bb0:	10a4      	asrs	r4, r4, #2
 8007bb2:	2600      	movs	r6, #0
 8007bb4:	42a6      	cmp	r6, r4
 8007bb6:	d109      	bne.n	8007bcc <__libc_init_array+0x24>
 8007bb8:	4d0b      	ldr	r5, [pc, #44]	@ (8007be8 <__libc_init_array+0x40>)
 8007bba:	4c0c      	ldr	r4, [pc, #48]	@ (8007bec <__libc_init_array+0x44>)
 8007bbc:	f000 f826 	bl	8007c0c <_init>
 8007bc0:	1b64      	subs	r4, r4, r5
 8007bc2:	10a4      	asrs	r4, r4, #2
 8007bc4:	2600      	movs	r6, #0
 8007bc6:	42a6      	cmp	r6, r4
 8007bc8:	d105      	bne.n	8007bd6 <__libc_init_array+0x2e>
 8007bca:	bd70      	pop	{r4, r5, r6, pc}
 8007bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bd0:	4798      	blx	r3
 8007bd2:	3601      	adds	r6, #1
 8007bd4:	e7ee      	b.n	8007bb4 <__libc_init_array+0xc>
 8007bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bda:	4798      	blx	r3
 8007bdc:	3601      	adds	r6, #1
 8007bde:	e7f2      	b.n	8007bc6 <__libc_init_array+0x1e>
 8007be0:	08007cf0 	.word	0x08007cf0
 8007be4:	08007cf0 	.word	0x08007cf0
 8007be8:	08007cf0 	.word	0x08007cf0
 8007bec:	08007cf4 	.word	0x08007cf4

08007bf0 <memcpy>:
 8007bf0:	440a      	add	r2, r1
 8007bf2:	4291      	cmp	r1, r2
 8007bf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bf8:	d100      	bne.n	8007bfc <memcpy+0xc>
 8007bfa:	4770      	bx	lr
 8007bfc:	b510      	push	{r4, lr}
 8007bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c06:	4291      	cmp	r1, r2
 8007c08:	d1f9      	bne.n	8007bfe <memcpy+0xe>
 8007c0a:	bd10      	pop	{r4, pc}

08007c0c <_init>:
 8007c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0e:	bf00      	nop
 8007c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c12:	bc08      	pop	{r3}
 8007c14:	469e      	mov	lr, r3
 8007c16:	4770      	bx	lr

08007c18 <_fini>:
 8007c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1a:	bf00      	nop
 8007c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c1e:	bc08      	pop	{r3}
 8007c20:	469e      	mov	lr, r3
 8007c22:	4770      	bx	lr
