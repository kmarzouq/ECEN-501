
Lab5p1c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08009478  08009478  0000a478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009600  08009600  0000b060  2**0
                  CONTENTS
  4 .ARM          00000008  08009600  08009600  0000a600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009608  08009608  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009608  08009608  0000a608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800960c  0800960c  0000a60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009610  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d60  20000060  08009670  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002dc0  08009670  0000bdc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026b64  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bac  00000000  00000000  00031bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002348  00000000  00000000  000367a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b86  00000000  00000000  00038ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004eeb  00000000  00000000  0003a66e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000285cf  00000000  00000000  0003f559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108629  00000000  00000000  00067b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00170151  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d90  00000000  00000000  00170194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00179f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009460 	.word	0x08009460

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08009460 	.word	0x08009460

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f001 f838 	bl	80015da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f885 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 fa1f 	bl	80009b0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000572:	f000 f8e3 	bl	800073c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000576:	f000 f919 	bl	80007ac <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800057a:	f000 f957 	bl	800082c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800057e:	f000 f97b 	bl	8000878 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000582:	f000 f9b7 	bl	80008f4 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000586:	f000 f9e5 	bl	8000954 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800058a:	f004 ff0d 	bl	80053a8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of set */
  setHandle = osSemaphoreNew(1, 0, &set_attributes);
 800058e:	4a27      	ldr	r2, [pc, #156]	@ (800062c <main+0xcc>)
 8000590:	2100      	movs	r1, #0
 8000592:	2001      	movs	r0, #1
 8000594:	f005 f9c5 	bl	8005922 <osSemaphoreNew>
 8000598:	4603      	mov	r3, r0
 800059a:	4a25      	ldr	r2, [pc, #148]	@ (8000630 <main+0xd0>)
 800059c:	6013      	str	r3, [r2, #0]

  /* creation of sendData */
  sendDataHandle = osSemaphoreNew(1, 1, &sendData_attributes);
 800059e:	4a25      	ldr	r2, [pc, #148]	@ (8000634 <main+0xd4>)
 80005a0:	2101      	movs	r1, #1
 80005a2:	2001      	movs	r0, #1
 80005a4:	f005 f9bd 	bl	8005922 <osSemaphoreNew>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a23      	ldr	r2, [pc, #140]	@ (8000638 <main+0xd8>)
 80005ac:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of HTIM1 */
  HTIM1Handle = osTimerNew(Callback1, osTimerPeriodic, NULL, &HTIM1_attributes);
 80005ae:	4b23      	ldr	r3, [pc, #140]	@ (800063c <main+0xdc>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	2101      	movs	r1, #1
 80005b4:	4822      	ldr	r0, [pc, #136]	@ (8000640 <main+0xe0>)
 80005b6:	f005 f8d3 	bl	8005760 <osTimerNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a21      	ldr	r2, [pc, #132]	@ (8000644 <main+0xe4>)
 80005be:	6013      	str	r3, [r2, #0]

  /* creation of sendtim */
  sendtimHandle = osTimerNew(Callback02, osTimerPeriodic, NULL, &sendtim_attributes);
 80005c0:	4b21      	ldr	r3, [pc, #132]	@ (8000648 <main+0xe8>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	2101      	movs	r1, #1
 80005c6:	4821      	ldr	r0, [pc, #132]	@ (800064c <main+0xec>)
 80005c8:	f005 f8ca 	bl	8005760 <osTimerNew>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a20      	ldr	r2, [pc, #128]	@ (8000650 <main+0xf0>)
 80005d0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  int stat = osTimerStart(HTIM1Handle, 1000);
 80005d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000644 <main+0xe4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 f93c 	bl	8005858 <osTimerStart>
 80005e0:	6078      	str	r0, [r7, #4]
  stat = osTimerStart(sendtimHandle, 1000);
 80005e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000650 <main+0xf0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005ea:	4618      	mov	r0, r3
 80005ec:	f005 f934 	bl	8005858 <osTimerStart>
 80005f0:	6078      	str	r0, [r7, #4]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005f2:	4a18      	ldr	r2, [pc, #96]	@ (8000654 <main+0xf4>)
 80005f4:	2100      	movs	r1, #0
 80005f6:	4818      	ldr	r0, [pc, #96]	@ (8000658 <main+0xf8>)
 80005f8:	f004 ff20 	bl	800543c <osThreadNew>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a17      	ldr	r2, [pc, #92]	@ (800065c <main+0xfc>)
 8000600:	6013      	str	r3, [r2, #0]

  /* creation of LEDlen */
  LEDlenHandle = osThreadNew(StartTask02, NULL, &LEDlen_attributes);
 8000602:	4a17      	ldr	r2, [pc, #92]	@ (8000660 <main+0x100>)
 8000604:	2100      	movs	r1, #0
 8000606:	4817      	ldr	r0, [pc, #92]	@ (8000664 <main+0x104>)
 8000608:	f004 ff18 	bl	800543c <osThreadNew>
 800060c:	4603      	mov	r3, r0
 800060e:	4a16      	ldr	r2, [pc, #88]	@ (8000668 <main+0x108>)
 8000610:	6013      	str	r3, [r2, #0]

  /* creation of PrintTask */
  PrintTaskHandle = osThreadNew(StartTask03, NULL, &PrintTask_attributes);
 8000612:	4a16      	ldr	r2, [pc, #88]	@ (800066c <main+0x10c>)
 8000614:	2100      	movs	r1, #0
 8000616:	4816      	ldr	r0, [pc, #88]	@ (8000670 <main+0x110>)
 8000618:	f004 ff10 	bl	800543c <osThreadNew>
 800061c:	4603      	mov	r3, r0
 800061e:	4a15      	ldr	r2, [pc, #84]	@ (8000674 <main+0x114>)
 8000620:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000622:	f004 fee5 	bl	80053f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000626:	bf00      	nop
 8000628:	e7fd      	b.n	8000626 <main+0xc6>
 800062a:	bf00      	nop
 800062c:	08009564 	.word	0x08009564
 8000630:	20000730 	.word	0x20000730
 8000634:	08009574 	.word	0x08009574
 8000638:	20000734 	.word	0x20000734
 800063c:	08009544 	.word	0x08009544
 8000640:	08000e21 	.word	0x08000e21
 8000644:	20000728 	.word	0x20000728
 8000648:	08009554 	.word	0x08009554
 800064c:	08000e41 	.word	0x08000e41
 8000650:	2000072c 	.word	0x2000072c
 8000654:	080094d8 	.word	0x080094d8
 8000658:	08000d65 	.word	0x08000d65
 800065c:	2000071c 	.word	0x2000071c
 8000660:	080094fc 	.word	0x080094fc
 8000664:	08000d75 	.word	0x08000d75
 8000668:	20000720 	.word	0x20000720
 800066c:	08009520 	.word	0x08009520
 8000670:	08000ddd 	.word	0x08000ddd
 8000674:	20000724 	.word	0x20000724

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b096      	sub	sp, #88	@ 0x58
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2244      	movs	r2, #68	@ 0x44
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f008 fa6a 	bl	8008b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	463b      	mov	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800069e:	f001 fe5f 	bl	8002360 <HAL_PWREx_ControlVoltageScaling>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006a8:	f000 fbec 	bl	8000e84 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006ac:	f001 fe3a 	bl	8002324 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <SystemClock_Config+0xc0>)
 80006b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80006b6:	4a20      	ldr	r2, [pc, #128]	@ (8000738 <SystemClock_Config+0xc0>)
 80006b8:	f023 0318 	bic.w	r3, r3, #24
 80006bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006c0:	2314      	movs	r3, #20
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006d0:	2360      	movs	r3, #96	@ 0x60
 80006d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d4:	2302      	movs	r3, #2
 80006d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006d8:	2301      	movs	r3, #1
 80006da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006dc:	2301      	movs	r3, #1
 80006de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006e0:	2328      	movs	r3, #40	@ 0x28
 80006e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006e4:	2307      	movs	r3, #7
 80006e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 ff55 	bl	80025a4 <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000700:	f000 fbc0 	bl	8000e84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000708:	2303      	movs	r3, #3
 800070a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	2104      	movs	r1, #4
 800071c:	4618      	mov	r0, r3
 800071e:	f002 fb1d 	bl	8002d5c <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000728:	f000 fbac 	bl	8000e84 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800072c:	f003 f856 	bl	80037dc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000730:	bf00      	nop
 8000732:	3758      	adds	r7, #88	@ 0x58
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40021000 	.word	0x40021000

0800073c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000740:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <MX_DFSDM1_Init+0x68>)
 8000742:	4a19      	ldr	r2, [pc, #100]	@ (80007a8 <MX_DFSDM1_Init+0x6c>)
 8000744:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000746:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <MX_DFSDM1_Init+0x68>)
 8000748:	2201      	movs	r2, #1
 800074a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800074c:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <MX_DFSDM1_Init+0x68>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000752:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_DFSDM1_Init+0x68>)
 8000754:	2202      	movs	r2, #2
 8000756:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <MX_DFSDM1_Init+0x68>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_DFSDM1_Init+0x68>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_DFSDM1_Init+0x68>)
 8000766:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800076a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800076c:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <MX_DFSDM1_Init+0x68>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000772:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_DFSDM1_Init+0x68>)
 8000774:	2204      	movs	r2, #4
 8000776:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000778:	4b0a      	ldr	r3, [pc, #40]	@ (80007a4 <MX_DFSDM1_Init+0x68>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_DFSDM1_Init+0x68>)
 8000780:	2201      	movs	r2, #1
 8000782:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000784:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <MX_DFSDM1_Init+0x68>)
 8000786:	2200      	movs	r2, #0
 8000788:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_DFSDM1_Init+0x68>)
 800078c:	2200      	movs	r2, #0
 800078e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <MX_DFSDM1_Init+0x68>)
 8000792:	f001 f861 	bl	8001858 <HAL_DFSDM_ChannelInit>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800079c:	f000 fb72 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000007c 	.word	0x2000007c
 80007a8:	40016020 	.word	0x40016020

080007ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000824 <MX_I2C2_Init+0x78>)
 80007b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80007b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000828 <MX_I2C2_Init+0x7c>)
 80007ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007bc:	4b18      	ldr	r3, [pc, #96]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c2:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c8:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007ce:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d4:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007da:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007e6:	480e      	ldr	r0, [pc, #56]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007e8:	f001 fb36 	bl	8001e58 <HAL_I2C_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007f2:	f000 fb47 	bl	8000e84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f6:	2100      	movs	r1, #0
 80007f8:	4809      	ldr	r0, [pc, #36]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007fa:	f001 fbc8 	bl	8001f8e <HAL_I2CEx_ConfigAnalogFilter>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000804:	f000 fb3e 	bl	8000e84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000808:	2100      	movs	r1, #0
 800080a:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_I2C2_Init+0x74>)
 800080c:	f001 fc0a 	bl	8002024 <HAL_I2CEx_ConfigDigitalFilter>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000816:	f000 fb35 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000b4 	.word	0x200000b4
 8000824:	40005800 	.word	0x40005800
 8000828:	10d19ce4 	.word	0x10d19ce4

0800082c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_QUADSPI_Init+0x44>)
 8000832:	4a10      	ldr	r2, [pc, #64]	@ (8000874 <MX_QUADSPI_Init+0x48>)
 8000834:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_QUADSPI_Init+0x44>)
 8000838:	2202      	movs	r2, #2
 800083a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <MX_QUADSPI_Init+0x44>)
 800083e:	2204      	movs	r2, #4
 8000840:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <MX_QUADSPI_Init+0x44>)
 8000844:	2210      	movs	r2, #16
 8000846:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000848:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <MX_QUADSPI_Init+0x44>)
 800084a:	2217      	movs	r2, #23
 800084c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800084e:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <MX_QUADSPI_Init+0x44>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <MX_QUADSPI_Init+0x44>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_QUADSPI_Init+0x44>)
 800085c:	f001 fde6 	bl	800242c <HAL_QSPI_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000866:	f000 fb0d 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000108 	.word	0x20000108
 8000874:	a0001000 	.word	0xa0001000

08000878 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800087c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ec <MX_SPI3_Init+0x74>)
 800087e:	4a1c      	ldr	r2, [pc, #112]	@ (80008f0 <MX_SPI3_Init+0x78>)
 8000880:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000882:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <MX_SPI3_Init+0x74>)
 8000884:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000888:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800088a:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <MX_SPI3_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000890:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <MX_SPI3_Init+0x74>)
 8000892:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000896:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000898:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <MX_SPI3_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089e:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008aa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008c4:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008c6:	2207      	movs	r2, #7
 80008c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008d2:	2208      	movs	r2, #8
 80008d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008d8:	f003 f962 	bl	8003ba0 <HAL_SPI_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008e2:	f000 facf 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000014c 	.word	0x2000014c
 80008f0:	40003c00 	.word	0x40003c00

080008f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008f8:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_USART1_UART_Init+0x58>)
 80008fa:	4a15      	ldr	r2, [pc, #84]	@ (8000950 <MX_USART1_UART_Init+0x5c>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008fe:	4b13      	ldr	r3, [pc, #76]	@ (800094c <MX_USART1_UART_Init+0x58>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_USART1_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <MX_USART1_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_USART1_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_USART1_UART_Init+0x58>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_USART1_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_USART1_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <MX_USART1_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_USART1_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_USART1_UART_Init+0x58>)
 8000938:	f003 fc9a 	bl	8004270 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000942:	f000 fa9f 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200001b0 	.word	0x200001b0
 8000950:	40013800 	.word	0x40013800

08000954 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000958:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800095e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000962:	2206      	movs	r2, #6
 8000964:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000968:	2202      	movs	r2, #2
 800096a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096e:	2202      	movs	r2, #2
 8000970:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000978:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000984:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000998:	f001 fb90 	bl	80020bc <HAL_PCD_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009a2:	f000 fa6f 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000238 	.word	0x20000238

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	@ 0x28
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009c6:	4bbd      	ldr	r3, [pc, #756]	@ (8000cbc <MX_GPIO_Init+0x30c>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	4abc      	ldr	r2, [pc, #752]	@ (8000cbc <MX_GPIO_Init+0x30c>)
 80009cc:	f043 0310 	orr.w	r3, r3, #16
 80009d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d2:	4bba      	ldr	r3, [pc, #744]	@ (8000cbc <MX_GPIO_Init+0x30c>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	f003 0310 	and.w	r3, r3, #16
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4bb7      	ldr	r3, [pc, #732]	@ (8000cbc <MX_GPIO_Init+0x30c>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	4ab6      	ldr	r2, [pc, #728]	@ (8000cbc <MX_GPIO_Init+0x30c>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ea:	4bb4      	ldr	r3, [pc, #720]	@ (8000cbc <MX_GPIO_Init+0x30c>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4bb1      	ldr	r3, [pc, #708]	@ (8000cbc <MX_GPIO_Init+0x30c>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	4ab0      	ldr	r2, [pc, #704]	@ (8000cbc <MX_GPIO_Init+0x30c>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a02:	4bae      	ldr	r3, [pc, #696]	@ (8000cbc <MX_GPIO_Init+0x30c>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	4bab      	ldr	r3, [pc, #684]	@ (8000cbc <MX_GPIO_Init+0x30c>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a12:	4aaa      	ldr	r2, [pc, #680]	@ (8000cbc <MX_GPIO_Init+0x30c>)
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a1a:	4ba8      	ldr	r3, [pc, #672]	@ (8000cbc <MX_GPIO_Init+0x30c>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a26:	4ba5      	ldr	r3, [pc, #660]	@ (8000cbc <MX_GPIO_Init+0x30c>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	4aa4      	ldr	r2, [pc, #656]	@ (8000cbc <MX_GPIO_Init+0x30c>)
 8000a2c:	f043 0308 	orr.w	r3, r3, #8
 8000a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a32:	4ba2      	ldr	r3, [pc, #648]	@ (8000cbc <MX_GPIO_Init+0x30c>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000a44:	489e      	ldr	r0, [pc, #632]	@ (8000cc0 <MX_GPIO_Init+0x310>)
 8000a46:	f001 f9bd 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000a50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a54:	f001 f9b6 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000a5e:	4899      	ldr	r0, [pc, #612]	@ (8000cc4 <MX_GPIO_Init+0x314>)
 8000a60:	f001 f9b0 	bl	8001dc4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000a6a:	4897      	ldr	r0, [pc, #604]	@ (8000cc8 <MX_GPIO_Init+0x318>)
 8000a6c:	f001 f9aa 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a76:	4894      	ldr	r0, [pc, #592]	@ (8000cc8 <MX_GPIO_Init+0x318>)
 8000a78:	f001 f9a4 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000a82:	4892      	ldr	r0, [pc, #584]	@ (8000ccc <MX_GPIO_Init+0x31c>)
 8000a84:	f001 f99e 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2120      	movs	r1, #32
 8000a8c:	488d      	ldr	r0, [pc, #564]	@ (8000cc4 <MX_GPIO_Init+0x314>)
 8000a8e:	f001 f999 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2101      	movs	r1, #1
 8000a96:	488a      	ldr	r0, [pc, #552]	@ (8000cc0 <MX_GPIO_Init+0x310>)
 8000a98:	f001 f994 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a9c:	f240 1315 	movw	r3, #277	@ 0x115
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4882      	ldr	r0, [pc, #520]	@ (8000cc0 <MX_GPIO_Init+0x310>)
 8000ab6:	f000 ffdb 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000aba:	236a      	movs	r3, #106	@ 0x6a
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000abe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	487c      	ldr	r0, [pc, #496]	@ (8000cc0 <MX_GPIO_Init+0x310>)
 8000ad0:	f000 ffce 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000ad4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ada:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4878      	ldr	r0, [pc, #480]	@ (8000ccc <MX_GPIO_Init+0x31c>)
 8000aec:	f000 ffc0 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000af0:	233f      	movs	r3, #63	@ 0x3f
 8000af2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000af4:	230b      	movs	r3, #11
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	4872      	ldr	r0, [pc, #456]	@ (8000ccc <MX_GPIO_Init+0x31c>)
 8000b04:	f000 ffb4 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b26:	f000 ffa3 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b2a:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b46:	f000 ff93 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b68:	f000 ff82 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b70:	230b      	movs	r3, #11
 8000b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b82:	f000 ff75 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000b86:	23e0      	movs	r3, #224	@ 0xe0
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b96:	2305      	movs	r3, #5
 8000b98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba4:	f000 ff64 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4841      	ldr	r0, [pc, #260]	@ (8000cc4 <MX_GPIO_Init+0x314>)
 8000bbe:	f000 ff57 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bc6:	230b      	movs	r3, #11
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	483b      	ldr	r0, [pc, #236]	@ (8000cc4 <MX_GPIO_Init+0x314>)
 8000bd6:	f000 ff4b 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000bda:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000bde:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4834      	ldr	r0, [pc, #208]	@ (8000cc4 <MX_GPIO_Init+0x314>)
 8000bf4:	f000 ff3c 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000bf8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c0a:	2307      	movs	r3, #7
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	482c      	ldr	r0, [pc, #176]	@ (8000cc8 <MX_GPIO_Init+0x318>)
 8000c16:	f000 ff2b 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000c1a:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000c1e:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4825      	ldr	r0, [pc, #148]	@ (8000cc8 <MX_GPIO_Init+0x318>)
 8000c32:	f000 ff1d 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c36:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	481e      	ldr	r0, [pc, #120]	@ (8000cc8 <MX_GPIO_Init+0x318>)
 8000c50:	f000 ff0e 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c54:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4817      	ldr	r0, [pc, #92]	@ (8000ccc <MX_GPIO_Init+0x31c>)
 8000c6e:	f000 feff 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c72:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c78:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4810      	ldr	r0, [pc, #64]	@ (8000ccc <MX_GPIO_Init+0x31c>)
 8000c8a:	f000 fef1 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c9e:	2305      	movs	r3, #5
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4807      	ldr	r0, [pc, #28]	@ (8000cc8 <MX_GPIO_Init+0x318>)
 8000caa:	f000 fee1 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000cae:	2378      	movs	r3, #120	@ 0x78
 8000cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e00a      	b.n	8000cd0 <MX_GPIO_Init+0x320>
 8000cba:	bf00      	nop
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	48001000 	.word	0x48001000
 8000cc4:	48000400 	.word	0x48000400
 8000cc8:	48000c00 	.word	0x48000c00
 8000ccc:	48000800 	.word	0x48000800
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd6:	2307      	movs	r3, #7
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4813      	ldr	r0, [pc, #76]	@ (8000d30 <MX_GPIO_Init+0x380>)
 8000ce2:	f000 fec5 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000ce6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cec:	2312      	movs	r3, #18
 8000cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	480c      	ldr	r0, [pc, #48]	@ (8000d34 <MX_GPIO_Init+0x384>)
 8000d04:	f000 feb4 	bl	8001a70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2105      	movs	r1, #5
 8000d0c:	2017      	movs	r0, #23
 8000d0e:	f000 fd79 	bl	8001804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d12:	2017      	movs	r0, #23
 8000d14:	f000 fd92 	bl	800183c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2105      	movs	r1, #5
 8000d1c:	2028      	movs	r0, #40	@ 0x28
 8000d1e:	f000 fd71 	bl	8001804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d22:	2028      	movs	r0, #40	@ 0x28
 8000d24:	f000 fd8a 	bl	800183c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	@ 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	48000c00 	.word	0x48000c00
 8000d34:	48000400 	.word	0x48000400

08000d38 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d48:	d105      	bne.n	8000d56 <HAL_GPIO_EXTI_Callback+0x1e>
		osThreadFlagsSet(LEDlenHandle, 0x0001);
 8000d4a:	4b05      	ldr	r3, [pc, #20]	@ (8000d60 <HAL_GPIO_EXTI_Callback+0x28>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2101      	movs	r1, #1
 8000d50:	4618      	mov	r0, r3
 8000d52:	f004 fc05 	bl	8005560 <osThreadFlagsSet>
		//printf("Button Pressed\n");
		//osSemaphoreRelease(setHandle);
		}
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000720 	.word	0x20000720

08000d64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f004 fcc6 	bl	80056fe <osDelay>
 8000d72:	e7fb      	b.n	8000d6c <StartDefaultTask+0x8>

08000d74 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
		osThreadFlagsWait(0x0001, osFlagsWaitAny, osWaitForever);
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d80:	2100      	movs	r1, #0
 8000d82:	2001      	movs	r0, #1
 8000d84:	f004 fc3a 	bl	80055fc <osThreadFlagsWait>
	    toglen=(toglen+1)%3;
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <StartTask02+0x5c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	1c5a      	adds	r2, r3, #1
 8000d8e:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <StartTask02+0x60>)
 8000d90:	fb83 3102 	smull	r3, r1, r3, r2
 8000d94:	17d3      	asrs	r3, r2, #31
 8000d96:	1ac9      	subs	r1, r1, r3
 8000d98:	460b      	mov	r3, r1
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	440b      	add	r3, r1
 8000d9e:	1ad1      	subs	r1, r2, r3
 8000da0:	b2ca      	uxtb	r2, r1
 8000da2:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <StartTask02+0x5c>)
 8000da4:	701a      	strb	r2, [r3, #0]

	    osTimerStop(HTIM1Handle);
 8000da6:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <StartTask02+0x64>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f004 fd82 	bl	80058b4 <osTimerStop>
	    int stat = osTimerStart(HTIM1Handle, 1000*(1+toglen));
 8000db0:	4b09      	ldr	r3, [pc, #36]	@ (8000dd8 <StartTask02+0x64>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <StartTask02+0x5c>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	3301      	adds	r3, #1
 8000dba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000dbe:	fb01 f303 	mul.w	r3, r1, r3
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	f004 fd47 	bl	8005858 <osTimerStart>
 8000dca:	60f8      	str	r0, [r7, #12]
  {
 8000dcc:	bf00      	nop
 8000dce:	e7d5      	b.n	8000d7c <StartTask02+0x8>
 8000dd0:	20000738 	.word	0x20000738
 8000dd4:	55555556 	.word	0x55555556
 8000dd8:	20000728 	.word	0x20000728

08000ddc <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(0x0001, osFlagsWaitAny, osWaitForever);
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295
 8000de8:	2100      	movs	r1, #0
 8000dea:	2001      	movs	r0, #1
 8000dec:	f004 fc06 	bl	80055fc <osThreadFlagsWait>
	  char buff[4];//="hello WOrld\r\n";

	  snprintf(buff, sizeof(buff), "%d\r\n",toglen);
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <StartTask03+0x38>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	f107 000c 	add.w	r0, r7, #12
 8000df8:	4a07      	ldr	r2, [pc, #28]	@ (8000e18 <StartTask03+0x3c>)
 8000dfa:	2104      	movs	r1, #4
 8000dfc:	f007 fe7c 	bl	8008af8 <sniprintf>
	  HAL_UART_Transmit(&huart1, buff, sizeof(buff), 2000);
 8000e00:	f107 010c 	add.w	r1, r7, #12
 8000e04:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e08:	2204      	movs	r2, #4
 8000e0a:	4804      	ldr	r0, [pc, #16]	@ (8000e1c <StartTask03+0x40>)
 8000e0c:	f003 fa7e 	bl	800430c <HAL_UART_Transmit>
  {
 8000e10:	bf00      	nop
 8000e12:	e7e7      	b.n	8000de4 <StartTask03+0x8>
 8000e14:	20000738 	.word	0x20000738
 8000e18:	080094b8 	.word	0x080094b8
 8000e1c:	200001b0 	.word	0x200001b0

08000e20 <Callback1>:
  /* USER CODE END StartTask03 */
}

/* Callback1 function */
void Callback1(void *argument)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback1 */
	HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14);
 8000e28:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e2c:	4803      	ldr	r0, [pc, #12]	@ (8000e3c <Callback1+0x1c>)
 8000e2e:	f000 ffe1 	bl	8001df4 <HAL_GPIO_TogglePin>
  /* USER CODE END Callback1 */
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	48000400 	.word	0x48000400

08000e40 <Callback02>:

/* Callback02 function */
void Callback02(void *argument)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback02 */
	osThreadFlagsSet(PrintTaskHandle, 0x0001);
 8000e48:	4b04      	ldr	r3, [pc, #16]	@ (8000e5c <Callback02+0x1c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f004 fb86 	bl	8005560 <osThreadFlagsSet>
  /* USER CODE END Callback02 */
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000724 	.word	0x20000724

08000e60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a04      	ldr	r2, [pc, #16]	@ (8000e80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d101      	bne.n	8000e76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e72:	f000 fbcb 	bl	800160c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40001000 	.word	0x40001000

08000e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e88:	b672      	cpsid	i
}
 8000e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <Error_Handler+0x8>

08000e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <HAL_MspInit+0x4c>)
 8000e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e9a:	4a10      	ldr	r2, [pc, #64]	@ (8000edc <HAL_MspInit+0x4c>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <HAL_MspInit+0x4c>)
 8000ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eae:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <HAL_MspInit+0x4c>)
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000edc <HAL_MspInit+0x4c>)
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eba:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <HAL_MspInit+0x4c>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	210f      	movs	r1, #15
 8000eca:	f06f 0001 	mvn.w	r0, #1
 8000ece:	f000 fc99 	bl	8001804 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000

08000ee0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b0ac      	sub	sp, #176	@ 0xb0
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2288      	movs	r2, #136	@ 0x88
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f007 fe2d 	bl	8008b60 <memset>
  if(DFSDM1_Init == 0)
 8000f06:	4b25      	ldr	r3, [pc, #148]	@ (8000f9c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d142      	bne.n	8000f94 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000f0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f12:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f002 f972 	bl	8003208 <HAL_RCCEx_PeriphCLKConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000f2a:	f7ff ffab 	bl	8000e84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f32:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f38:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f3a:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f46:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4a:	4a15      	ldr	r2, [pc, #84]	@ (8000fa0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f4c:	f043 0310 	orr.w	r3, r3, #16
 8000f50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f52:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f56:	f003 0310 	and.w	r3, r3, #16
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000f5e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000f62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f78:	2306      	movs	r3, #6
 8000f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f7e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f82:	4619      	mov	r1, r3
 8000f84:	4807      	ldr	r0, [pc, #28]	@ (8000fa4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000f86:	f000 fd73 	bl	8001a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000f8a:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4a02      	ldr	r2, [pc, #8]	@ (8000f9c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f92:	6013      	str	r3, [r2, #0]
  }

}
 8000f94:	bf00      	nop
 8000f96:	37b0      	adds	r7, #176	@ 0xb0
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000073c 	.word	0x2000073c
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	48001000 	.word	0x48001000

08000fa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b0ac      	sub	sp, #176	@ 0xb0
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2288      	movs	r2, #136	@ 0x88
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f007 fdc9 	bl	8008b60 <memset>
  if(hi2c->Instance==I2C2)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a21      	ldr	r2, [pc, #132]	@ (8001058 <HAL_I2C_MspInit+0xb0>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d13b      	bne.n	8001050 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000fd8:	2380      	movs	r3, #128	@ 0x80
 8000fda:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 f90f 	bl	8003208 <HAL_RCCEx_PeriphCLKConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ff0:	f7ff ff48 	bl	8000e84 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff4:	4b19      	ldr	r3, [pc, #100]	@ (800105c <HAL_I2C_MspInit+0xb4>)
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff8:	4a18      	ldr	r2, [pc, #96]	@ (800105c <HAL_I2C_MspInit+0xb4>)
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001000:	4b16      	ldr	r3, [pc, #88]	@ (800105c <HAL_I2C_MspInit+0xb4>)
 8001002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800100c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001010:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001014:	2312      	movs	r3, #18
 8001016:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101a:	2301      	movs	r3, #1
 800101c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001026:	2304      	movs	r3, #4
 8001028:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001030:	4619      	mov	r1, r3
 8001032:	480b      	ldr	r0, [pc, #44]	@ (8001060 <HAL_I2C_MspInit+0xb8>)
 8001034:	f000 fd1c 	bl	8001a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001038:	4b08      	ldr	r3, [pc, #32]	@ (800105c <HAL_I2C_MspInit+0xb4>)
 800103a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103c:	4a07      	ldr	r2, [pc, #28]	@ (800105c <HAL_I2C_MspInit+0xb4>)
 800103e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001042:	6593      	str	r3, [r2, #88]	@ 0x58
 8001044:	4b05      	ldr	r3, [pc, #20]	@ (800105c <HAL_I2C_MspInit+0xb4>)
 8001046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001048:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001050:	bf00      	nop
 8001052:	37b0      	adds	r7, #176	@ 0xb0
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40005800 	.word	0x40005800
 800105c:	40021000 	.word	0x40021000
 8001060:	48000400 	.word	0x48000400

08001064 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	@ 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a17      	ldr	r2, [pc, #92]	@ (80010e0 <HAL_QSPI_MspInit+0x7c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d128      	bne.n	80010d8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001086:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <HAL_QSPI_MspInit+0x80>)
 8001088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800108a:	4a16      	ldr	r2, [pc, #88]	@ (80010e4 <HAL_QSPI_MspInit+0x80>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001090:	6513      	str	r3, [r2, #80]	@ 0x50
 8001092:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <HAL_QSPI_MspInit+0x80>)
 8001094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800109e:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <HAL_QSPI_MspInit+0x80>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a2:	4a10      	ldr	r2, [pc, #64]	@ (80010e4 <HAL_QSPI_MspInit+0x80>)
 80010a4:	f043 0310 	orr.w	r3, r3, #16
 80010a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010aa:	4b0e      	ldr	r3, [pc, #56]	@ (80010e4 <HAL_QSPI_MspInit+0x80>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80010b6:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80010ba:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010c8:	230a      	movs	r3, #10
 80010ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <HAL_QSPI_MspInit+0x84>)
 80010d4:	f000 fccc 	bl	8001a70 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80010d8:	bf00      	nop
 80010da:	3728      	adds	r7, #40	@ 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	a0001000 	.word	0xa0001000
 80010e4:	40021000 	.word	0x40021000
 80010e8:	48001000 	.word	0x48001000

080010ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a17      	ldr	r2, [pc, #92]	@ (8001168 <HAL_SPI_MspInit+0x7c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d128      	bne.n	8001160 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800110e:	4b17      	ldr	r3, [pc, #92]	@ (800116c <HAL_SPI_MspInit+0x80>)
 8001110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001112:	4a16      	ldr	r2, [pc, #88]	@ (800116c <HAL_SPI_MspInit+0x80>)
 8001114:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001118:	6593      	str	r3, [r2, #88]	@ 0x58
 800111a:	4b14      	ldr	r3, [pc, #80]	@ (800116c <HAL_SPI_MspInit+0x80>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <HAL_SPI_MspInit+0x80>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	4a10      	ldr	r2, [pc, #64]	@ (800116c <HAL_SPI_MspInit+0x80>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <HAL_SPI_MspInit+0x80>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800113e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001150:	2306      	movs	r3, #6
 8001152:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4805      	ldr	r0, [pc, #20]	@ (8001170 <HAL_SPI_MspInit+0x84>)
 800115c:	f000 fc88 	bl	8001a70 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	@ 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40003c00 	.word	0x40003c00
 800116c:	40021000 	.word	0x40021000
 8001170:	48000800 	.word	0x48000800

08001174 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b0ac      	sub	sp, #176	@ 0xb0
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2288      	movs	r2, #136	@ 0x88
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f007 fce3 	bl	8008b60 <memset>
  if(huart->Instance==USART1)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a21      	ldr	r2, [pc, #132]	@ (8001224 <HAL_UART_MspInit+0xb0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d13a      	bne.n	800121a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011a8:	2300      	movs	r3, #0
 80011aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4618      	mov	r0, r3
 80011b2:	f002 f829 	bl	8003208 <HAL_RCCEx_PeriphCLKConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011bc:	f7ff fe62 	bl	8000e84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011c0:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <HAL_UART_MspInit+0xb4>)
 80011c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011c4:	4a18      	ldr	r2, [pc, #96]	@ (8001228 <HAL_UART_MspInit+0xb4>)
 80011c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80011cc:	4b16      	ldr	r3, [pc, #88]	@ (8001228 <HAL_UART_MspInit+0xb4>)
 80011ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d8:	4b13      	ldr	r3, [pc, #76]	@ (8001228 <HAL_UART_MspInit+0xb4>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011dc:	4a12      	ldr	r2, [pc, #72]	@ (8001228 <HAL_UART_MspInit+0xb4>)
 80011de:	f043 0302 	orr.w	r3, r3, #2
 80011e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e4:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <HAL_UART_MspInit+0xb4>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80011f0:	23c0      	movs	r3, #192	@ 0xc0
 80011f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001208:	2307      	movs	r3, #7
 800120a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	@ (800122c <HAL_UART_MspInit+0xb8>)
 8001216:	f000 fc2b 	bl	8001a70 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800121a:	bf00      	nop
 800121c:	37b0      	adds	r7, #176	@ 0xb0
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40013800 	.word	0x40013800
 8001228:	40021000 	.word	0x40021000
 800122c:	48000400 	.word	0x48000400

08001230 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b0ac      	sub	sp, #176	@ 0xb0
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2288      	movs	r2, #136	@ 0x88
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f007 fc85 	bl	8008b60 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800125e:	d17c      	bne.n	800135a <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001260:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001264:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001266:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800126a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800126e:	2301      	movs	r3, #1
 8001270:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001272:	2301      	movs	r3, #1
 8001274:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001276:	2318      	movs	r3, #24
 8001278:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800127a:	2307      	movs	r3, #7
 800127c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800127e:	2302      	movs	r3, #2
 8001280:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001282:	2302      	movs	r3, #2
 8001284:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001286:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800128a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4618      	mov	r0, r3
 8001292:	f001 ffb9 	bl	8003208 <HAL_RCCEx_PeriphCLKConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800129c:	f7ff fdf2 	bl	8000e84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b30      	ldr	r3, [pc, #192]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 80012a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a4:	4a2f      	ldr	r2, [pc, #188]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 80012ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80012b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012d0:	4619      	mov	r1, r3
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d6:	f000 fbcb 	bl	8001a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80012da:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80012de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	2303      	movs	r3, #3
 80012f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012f4:	230a      	movs	r3, #10
 80012f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001304:	f000 fbb4 	bl	8001a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001308:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 800130a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130c:	4a15      	ldr	r2, [pc, #84]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 800130e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001312:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001314:	4b13      	ldr	r3, [pc, #76]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001318:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001320:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 8001322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d114      	bne.n	8001356 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800132c:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 800132e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001330:	4a0c      	ldr	r2, [pc, #48]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 8001332:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001336:	6593      	str	r3, [r2, #88]	@ 0x58
 8001338:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 800133a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001344:	f001 f862 	bl	800240c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 800134a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134c:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 800134e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001352:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001354:	e001      	b.n	800135a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001356:	f001 f859 	bl	800240c <HAL_PWREx_EnableVddUSB>
}
 800135a:	bf00      	nop
 800135c:	37b0      	adds	r7, #176	@ 0xb0
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000

08001368 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08e      	sub	sp, #56	@ 0x38
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001376:	4b34      	ldr	r3, [pc, #208]	@ (8001448 <HAL_InitTick+0xe0>)
 8001378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137a:	4a33      	ldr	r2, [pc, #204]	@ (8001448 <HAL_InitTick+0xe0>)
 800137c:	f043 0310 	orr.w	r3, r3, #16
 8001380:	6593      	str	r3, [r2, #88]	@ 0x58
 8001382:	4b31      	ldr	r3, [pc, #196]	@ (8001448 <HAL_InitTick+0xe0>)
 8001384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800138e:	f107 0210 	add.w	r2, r7, #16
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f001 fea3 	bl	80030e4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800139e:	6a3b      	ldr	r3, [r7, #32]
 80013a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d103      	bne.n	80013b0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013a8:	f001 fe70 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 80013ac:	6378      	str	r0, [r7, #52]	@ 0x34
 80013ae:	e004      	b.n	80013ba <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013b0:	f001 fe6c 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 80013b4:	4603      	mov	r3, r0
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013bc:	4a23      	ldr	r2, [pc, #140]	@ (800144c <HAL_InitTick+0xe4>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	0c9b      	lsrs	r3, r3, #18
 80013c4:	3b01      	subs	r3, #1
 80013c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013c8:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <HAL_InitTick+0xe8>)
 80013ca:	4a22      	ldr	r2, [pc, #136]	@ (8001454 <HAL_InitTick+0xec>)
 80013cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013ce:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <HAL_InitTick+0xe8>)
 80013d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013d4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001450 <HAL_InitTick+0xe8>)
 80013d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013da:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001450 <HAL_InitTick+0xe8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <HAL_InitTick+0xe8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e8:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <HAL_InitTick+0xe8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80013ee:	4818      	ldr	r0, [pc, #96]	@ (8001450 <HAL_InitTick+0xe8>)
 80013f0:	f002 fc79 	bl	8003ce6 <HAL_TIM_Base_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80013fa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d11b      	bne.n	800143a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001402:	4813      	ldr	r0, [pc, #76]	@ (8001450 <HAL_InitTick+0xe8>)
 8001404:	f002 fcd0 	bl	8003da8 <HAL_TIM_Base_Start_IT>
 8001408:	4603      	mov	r3, r0
 800140a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800140e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001412:	2b00      	cmp	r3, #0
 8001414:	d111      	bne.n	800143a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001416:	2036      	movs	r0, #54	@ 0x36
 8001418:	f000 fa10 	bl	800183c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b0f      	cmp	r3, #15
 8001420:	d808      	bhi.n	8001434 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001422:	2200      	movs	r2, #0
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	2036      	movs	r0, #54	@ 0x36
 8001428:	f000 f9ec 	bl	8001804 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800142c:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <HAL_InitTick+0xf0>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e002      	b.n	800143a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800143a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800143e:	4618      	mov	r0, r3
 8001440:	3738      	adds	r7, #56	@ 0x38
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40021000 	.word	0x40021000
 800144c:	431bde83 	.word	0x431bde83
 8001450:	20000740 	.word	0x20000740
 8001454:	40001000 	.word	0x40001000
 8001458:	20000004 	.word	0x20000004

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <NMI_Handler+0x4>

08001464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <MemManage_Handler+0x4>

08001474 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <UsageFault_Handler+0x4>

08001484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001496:	2020      	movs	r0, #32
 8001498:	f000 fcc6 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800149c:	2040      	movs	r0, #64	@ 0x40
 800149e:	f000 fcc3 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80014a2:	2080      	movs	r0, #128	@ 0x80
 80014a4:	f000 fcc0 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80014a8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80014ac:	f000 fcbc 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80014b8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80014bc:	f000 fcb4 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80014c0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80014c4:	f000 fcb0 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80014c8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014cc:	f000 fcac 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80014d0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80014d4:	f000 fca8 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80014d8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80014dc:	f000 fca4 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014e8:	4802      	ldr	r0, [pc, #8]	@ (80014f4 <TIM6_DAC_IRQHandler+0x10>)
 80014ea:	f002 fccd 	bl	8003e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000740 	.word	0x20000740

080014f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001500:	4a14      	ldr	r2, [pc, #80]	@ (8001554 <_sbrk+0x5c>)
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <_sbrk+0x60>)
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800150c:	4b13      	ldr	r3, [pc, #76]	@ (800155c <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <_sbrk+0x64>)
 8001516:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <_sbrk+0x68>)
 8001518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	429a      	cmp	r2, r3
 8001526:	d207      	bcs.n	8001538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001528:	f007 fb22 	bl	8008b70 <__errno>
 800152c:	4603      	mov	r3, r0
 800152e:	220c      	movs	r2, #12
 8001530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
 8001536:	e009      	b.n	800154c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001538:	4b08      	ldr	r3, [pc, #32]	@ (800155c <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153e:	4b07      	ldr	r3, [pc, #28]	@ (800155c <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	4a05      	ldr	r2, [pc, #20]	@ (800155c <_sbrk+0x64>)
 8001548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154a:	68fb      	ldr	r3, [r7, #12]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20018000 	.word	0x20018000
 8001558:	00000400 	.word	0x00000400
 800155c:	2000078c 	.word	0x2000078c
 8001560:	20002dc0 	.word	0x20002dc0

08001564 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001568:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <SystemInit+0x20>)
 800156a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800156e:	4a05      	ldr	r2, [pc, #20]	@ (8001584 <SystemInit+0x20>)
 8001570:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001574:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001588:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800158c:	f7ff ffea 	bl	8001564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001590:	480c      	ldr	r0, [pc, #48]	@ (80015c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001592:	490d      	ldr	r1, [pc, #52]	@ (80015c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001594:	4a0d      	ldr	r2, [pc, #52]	@ (80015cc <LoopForever+0xe>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001598:	e002      	b.n	80015a0 <LoopCopyDataInit>

0800159a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800159c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159e:	3304      	adds	r3, #4

080015a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a4:	d3f9      	bcc.n	800159a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a6:	4a0a      	ldr	r2, [pc, #40]	@ (80015d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015a8:	4c0a      	ldr	r4, [pc, #40]	@ (80015d4 <LoopForever+0x16>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ac:	e001      	b.n	80015b2 <LoopFillZerobss>

080015ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b0:	3204      	adds	r2, #4

080015b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b4:	d3fb      	bcc.n	80015ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015b6:	f007 fae1 	bl	8008b7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ba:	f7fe ffd1 	bl	8000560 <main>

080015be <LoopForever>:

LoopForever:
    b LoopForever
 80015be:	e7fe      	b.n	80015be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80015cc:	08009610 	.word	0x08009610
  ldr r2, =_sbss
 80015d0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80015d4:	20002dc0 	.word	0x20002dc0

080015d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015d8:	e7fe      	b.n	80015d8 <ADC1_2_IRQHandler>

080015da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f000 f902 	bl	80017ee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ea:	200f      	movs	r0, #15
 80015ec:	f7ff febc 	bl	8001368 <HAL_InitTick>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	71fb      	strb	r3, [r7, #7]
 80015fa:	e001      	b.n	8001600 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015fc:	f7ff fc48 	bl	8000e90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001600:	79fb      	ldrb	r3, [r7, #7]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <HAL_IncTick+0x20>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <HAL_IncTick+0x24>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
 800161c:	4a04      	ldr	r2, [pc, #16]	@ (8001630 <HAL_IncTick+0x24>)
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000008 	.word	0x20000008
 8001630:	20000790 	.word	0x20000790

08001634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return uwTick;
 8001638:	4b03      	ldr	r3, [pc, #12]	@ (8001648 <HAL_GetTick+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000790 	.word	0x20000790

0800164c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001654:	f7ff ffee 	bl	8001634 <HAL_GetTick>
 8001658:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001664:	d005      	beq.n	8001672 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001666:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <HAL_Delay+0x44>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4413      	add	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001672:	bf00      	nop
 8001674:	f7ff ffde 	bl	8001634 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	429a      	cmp	r2, r3
 8001682:	d8f7      	bhi.n	8001674 <HAL_Delay+0x28>
  {
  }
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000008 	.word	0x20000008

08001694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a4:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016b0:	4013      	ands	r3, r2
 80016b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016c6:	4a04      	ldr	r2, [pc, #16]	@ (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	60d3      	str	r3, [r2, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e0:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <__NVIC_GetPriorityGrouping+0x18>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	f003 0307 	and.w	r3, r3, #7
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	2b00      	cmp	r3, #0
 8001708:	db0b      	blt.n	8001722 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	f003 021f 	and.w	r2, r3, #31
 8001710:	4907      	ldr	r1, [pc, #28]	@ (8001730 <__NVIC_EnableIRQ+0x38>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	2001      	movs	r0, #1
 800171a:	fa00 f202 	lsl.w	r2, r0, r2
 800171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000e100 	.word	0xe000e100

08001734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	db0a      	blt.n	800175e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	b2da      	uxtb	r2, r3
 800174c:	490c      	ldr	r1, [pc, #48]	@ (8001780 <__NVIC_SetPriority+0x4c>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	0112      	lsls	r2, r2, #4
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	440b      	add	r3, r1
 8001758:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800175c:	e00a      	b.n	8001774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4908      	ldr	r1, [pc, #32]	@ (8001784 <__NVIC_SetPriority+0x50>)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	3b04      	subs	r3, #4
 800176c:	0112      	lsls	r2, r2, #4
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	440b      	add	r3, r1
 8001772:	761a      	strb	r2, [r3, #24]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000e100 	.word	0xe000e100
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	@ 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f1c3 0307 	rsb	r3, r3, #7
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	bf28      	it	cs
 80017a6:	2304      	movcs	r3, #4
 80017a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3304      	adds	r3, #4
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	d902      	bls.n	80017b8 <NVIC_EncodePriority+0x30>
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3b03      	subs	r3, #3
 80017b6:	e000      	b.n	80017ba <NVIC_EncodePriority+0x32>
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43da      	mvns	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	401a      	ands	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	43d9      	mvns	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	4313      	orrs	r3, r2
         );
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3724      	adds	r7, #36	@ 0x24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ff4c 	bl	8001694 <__NVIC_SetPriorityGrouping>
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001816:	f7ff ff61 	bl	80016dc <__NVIC_GetPriorityGrouping>
 800181a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	68b9      	ldr	r1, [r7, #8]
 8001820:	6978      	ldr	r0, [r7, #20]
 8001822:	f7ff ffb1 	bl	8001788 <NVIC_EncodePriority>
 8001826:	4602      	mov	r2, r0
 8001828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff80 	bl	8001734 <__NVIC_SetPriority>
}
 8001834:	bf00      	nop
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ff54 	bl	80016f8 <__NVIC_EnableIRQ>
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e0ac      	b.n	80019c4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f8b2 	bl	80019d8 <DFSDM_GetChannelFromInstance>
 8001874:	4603      	mov	r3, r0
 8001876:	4a55      	ldr	r2, [pc, #340]	@ (80019cc <HAL_DFSDM_ChannelInit+0x174>)
 8001878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e09f      	b.n	80019c4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff fb2b 	bl	8000ee0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800188a:	4b51      	ldr	r3, [pc, #324]	@ (80019d0 <HAL_DFSDM_ChannelInit+0x178>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	4a4f      	ldr	r2, [pc, #316]	@ (80019d0 <HAL_DFSDM_ChannelInit+0x178>)
 8001892:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001894:	4b4e      	ldr	r3, [pc, #312]	@ (80019d0 <HAL_DFSDM_ChannelInit+0x178>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d125      	bne.n	80018e8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800189c:	4b4d      	ldr	r3, [pc, #308]	@ (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a4c      	ldr	r2, [pc, #304]	@ (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80018a6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80018a8:	4b4a      	ldr	r3, [pc, #296]	@ (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4948      	ldr	r1, [pc, #288]	@ (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80018b6:	4b47      	ldr	r3, [pc, #284]	@ (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a46      	ldr	r2, [pc, #280]	@ (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018bc:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80018c0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	791b      	ldrb	r3, [r3, #4]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d108      	bne.n	80018dc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80018ca:	4b42      	ldr	r3, [pc, #264]	@ (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	041b      	lsls	r3, r3, #16
 80018d6:	493f      	ldr	r1, [pc, #252]	@ (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80018dc:	4b3d      	ldr	r3, [pc, #244]	@ (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a3c      	ldr	r2, [pc, #240]	@ (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80018e6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80018f6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6819      	ldr	r1, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001906:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800190c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 020f 	bic.w	r2, r2, #15
 8001924:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6819      	ldr	r1, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 800194c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6899      	ldr	r1, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195c:	3b01      	subs	r3, #1
 800195e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f002 0207 	and.w	r2, r2, #7
 8001978:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001984:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019a4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f810 	bl	80019d8 <DFSDM_GetChannelFromInstance>
 80019b8:	4602      	mov	r2, r0
 80019ba:	4904      	ldr	r1, [pc, #16]	@ (80019cc <HAL_DFSDM_ChannelInit+0x174>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000798 	.word	0x20000798
 80019d0:	20000794 	.word	0x20000794
 80019d4:	40016000 	.word	0x40016000

080019d8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a54 <DFSDM_GetChannelFromInstance+0x7c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d102      	bne.n	80019ee <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	e02b      	b.n	8001a46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a19      	ldr	r2, [pc, #100]	@ (8001a58 <DFSDM_GetChannelFromInstance+0x80>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d102      	bne.n	80019fc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80019f6:	2301      	movs	r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	e024      	b.n	8001a46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a17      	ldr	r2, [pc, #92]	@ (8001a5c <DFSDM_GetChannelFromInstance+0x84>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d102      	bne.n	8001a0a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001a04:	2302      	movs	r3, #2
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	e01d      	b.n	8001a46 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a14      	ldr	r2, [pc, #80]	@ (8001a60 <DFSDM_GetChannelFromInstance+0x88>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d102      	bne.n	8001a18 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001a12:	2304      	movs	r3, #4
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	e016      	b.n	8001a46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a12      	ldr	r2, [pc, #72]	@ (8001a64 <DFSDM_GetChannelFromInstance+0x8c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d102      	bne.n	8001a26 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001a20:	2305      	movs	r3, #5
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	e00f      	b.n	8001a46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a0f      	ldr	r2, [pc, #60]	@ (8001a68 <DFSDM_GetChannelFromInstance+0x90>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d102      	bne.n	8001a34 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001a2e:	2306      	movs	r3, #6
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	e008      	b.n	8001a46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a0d      	ldr	r2, [pc, #52]	@ (8001a6c <DFSDM_GetChannelFromInstance+0x94>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d102      	bne.n	8001a42 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001a3c:	2307      	movs	r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	e001      	b.n	8001a46 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001a42:	2303      	movs	r3, #3
 8001a44:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	40016000 	.word	0x40016000
 8001a58:	40016020 	.word	0x40016020
 8001a5c:	40016040 	.word	0x40016040
 8001a60:	40016080 	.word	0x40016080
 8001a64:	400160a0 	.word	0x400160a0
 8001a68:	400160c0 	.word	0x400160c0
 8001a6c:	400160e0 	.word	0x400160e0

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a7e:	e17f      	b.n	8001d80 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2101      	movs	r1, #1
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 8171 	beq.w	8001d7a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d005      	beq.n	8001ab0 <HAL_GPIO_Init+0x40>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d130      	bne.n	8001b12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2203      	movs	r2, #3
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	091b      	lsrs	r3, r3, #4
 8001afc:	f003 0201 	and.w	r2, r3, #1
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d118      	bne.n	8001b50 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b24:	2201      	movs	r2, #1
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	08db      	lsrs	r3, r3, #3
 8001b3a:	f003 0201 	and.w	r2, r3, #1
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d017      	beq.n	8001b8c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d123      	bne.n	8001be0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	08da      	lsrs	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3208      	adds	r2, #8
 8001ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	220f      	movs	r2, #15
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	08da      	lsrs	r2, r3, #3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3208      	adds	r2, #8
 8001bda:	6939      	ldr	r1, [r7, #16]
 8001bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0203 	and.w	r2, r3, #3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80ac 	beq.w	8001d7a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c22:	4b5f      	ldr	r3, [pc, #380]	@ (8001da0 <HAL_GPIO_Init+0x330>)
 8001c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c26:	4a5e      	ldr	r2, [pc, #376]	@ (8001da0 <HAL_GPIO_Init+0x330>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c2e:	4b5c      	ldr	r3, [pc, #368]	@ (8001da0 <HAL_GPIO_Init+0x330>)
 8001c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c3a:	4a5a      	ldr	r2, [pc, #360]	@ (8001da4 <HAL_GPIO_Init+0x334>)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c46:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	220f      	movs	r2, #15
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c64:	d025      	beq.n	8001cb2 <HAL_GPIO_Init+0x242>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4f      	ldr	r2, [pc, #316]	@ (8001da8 <HAL_GPIO_Init+0x338>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01f      	beq.n	8001cae <HAL_GPIO_Init+0x23e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4e      	ldr	r2, [pc, #312]	@ (8001dac <HAL_GPIO_Init+0x33c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d019      	beq.n	8001caa <HAL_GPIO_Init+0x23a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4d      	ldr	r2, [pc, #308]	@ (8001db0 <HAL_GPIO_Init+0x340>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d013      	beq.n	8001ca6 <HAL_GPIO_Init+0x236>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4c      	ldr	r2, [pc, #304]	@ (8001db4 <HAL_GPIO_Init+0x344>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00d      	beq.n	8001ca2 <HAL_GPIO_Init+0x232>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4b      	ldr	r2, [pc, #300]	@ (8001db8 <HAL_GPIO_Init+0x348>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d007      	beq.n	8001c9e <HAL_GPIO_Init+0x22e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4a      	ldr	r2, [pc, #296]	@ (8001dbc <HAL_GPIO_Init+0x34c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d101      	bne.n	8001c9a <HAL_GPIO_Init+0x22a>
 8001c96:	2306      	movs	r3, #6
 8001c98:	e00c      	b.n	8001cb4 <HAL_GPIO_Init+0x244>
 8001c9a:	2307      	movs	r3, #7
 8001c9c:	e00a      	b.n	8001cb4 <HAL_GPIO_Init+0x244>
 8001c9e:	2305      	movs	r3, #5
 8001ca0:	e008      	b.n	8001cb4 <HAL_GPIO_Init+0x244>
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x244>
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e004      	b.n	8001cb4 <HAL_GPIO_Init+0x244>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e002      	b.n	8001cb4 <HAL_GPIO_Init+0x244>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_GPIO_Init+0x244>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	f002 0203 	and.w	r2, r2, #3
 8001cba:	0092      	lsls	r2, r2, #2
 8001cbc:	4093      	lsls	r3, r2
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cc4:	4937      	ldr	r1, [pc, #220]	@ (8001da4 <HAL_GPIO_Init+0x334>)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc0 <HAL_GPIO_Init+0x350>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cf6:	4a32      	ldr	r2, [pc, #200]	@ (8001dc0 <HAL_GPIO_Init+0x350>)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cfc:	4b30      	ldr	r3, [pc, #192]	@ (8001dc0 <HAL_GPIO_Init+0x350>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d20:	4a27      	ldr	r2, [pc, #156]	@ (8001dc0 <HAL_GPIO_Init+0x350>)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d26:	4b26      	ldr	r3, [pc, #152]	@ (8001dc0 <HAL_GPIO_Init+0x350>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc0 <HAL_GPIO_Init+0x350>)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d50:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc0 <HAL_GPIO_Init+0x350>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d74:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <HAL_GPIO_Init+0x350>)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f47f ae78 	bne.w	8001a80 <HAL_GPIO_Init+0x10>
  }
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	371c      	adds	r7, #28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010000 	.word	0x40010000
 8001da8:	48000400 	.word	0x48000400
 8001dac:	48000800 	.word	0x48000800
 8001db0:	48000c00 	.word	0x48000c00
 8001db4:	48001000 	.word	0x48001000
 8001db8:	48001400 	.word	0x48001400
 8001dbc:	48001800 	.word	0x48001800
 8001dc0:	40010400 	.word	0x40010400

08001dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd4:	787b      	ldrb	r3, [r7, #1]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001de0:	e002      	b.n	8001de8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001de2:	887a      	ldrh	r2, [r7, #2]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	041a      	lsls	r2, r3, #16
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	43d9      	mvns	r1, r3
 8001e12:	887b      	ldrh	r3, [r7, #2]
 8001e14:	400b      	ands	r3, r1
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	619a      	str	r2, [r3, #24]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e32:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e34:	695a      	ldr	r2, [r3, #20]
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d006      	beq.n	8001e4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e3e:	4a05      	ldr	r2, [pc, #20]	@ (8001e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe ff76 	bl	8000d38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40010400 	.word	0x40010400

08001e58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e08d      	b.n	8001f86 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d106      	bne.n	8001e84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff f892 	bl	8000fa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2224      	movs	r2, #36	@ 0x24
 8001e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0201 	bic.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ea8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001eb8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d107      	bne.n	8001ed2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	e006      	b.n	8001ee0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001ede:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d108      	bne.n	8001efa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	e007      	b.n	8001f0a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69d9      	ldr	r1, [r3, #28]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a1a      	ldr	r2, [r3, #32]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0201 	orr.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2220      	movs	r2, #32
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b20      	cmp	r3, #32
 8001fa2:	d138      	bne.n	8002016 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e032      	b.n	8002018 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2224      	movs	r2, #36	@ 0x24
 8001fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0201 	bic.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001fe0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6819      	ldr	r1, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f042 0201 	orr.w	r2, r2, #1
 8002000:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2220      	movs	r2, #32
 8002006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	e000      	b.n	8002018 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002016:	2302      	movs	r3, #2
  }
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b20      	cmp	r3, #32
 8002038:	d139      	bne.n	80020ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002044:	2302      	movs	r3, #2
 8002046:	e033      	b.n	80020b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2224      	movs	r2, #36	@ 0x24
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002076:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e000      	b.n	80020b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020ae:	2302      	movs	r3, #2
  }
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e101      	b.n	80022d2 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff f8a4 	bl	8001230 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2203      	movs	r2, #3
 80020ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f002 fe90 	bl	8004e20 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	7c1a      	ldrb	r2, [r3, #16]
 8002108:	f88d 2000 	strb.w	r2, [sp]
 800210c:	3304      	adds	r3, #4
 800210e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002110:	f002 fe59 	bl	8004dc6 <USB_CoreInit>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2202      	movs	r2, #2
 800211e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e0d5      	b.n	80022d2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2100      	movs	r1, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f002 fe88 	bl	8004e42 <USB_SetCurrentMode>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0c6      	b.n	80022d2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002144:	2300      	movs	r3, #0
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	e04a      	b.n	80021e0 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	3315      	adds	r3, #21
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4413      	add	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	3314      	adds	r3, #20
 800216e:	7bfa      	ldrb	r2, [r7, #15]
 8002170:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002172:	7bfa      	ldrb	r2, [r7, #15]
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	b298      	uxth	r0, r3
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	332e      	adds	r3, #46	@ 0x2e
 8002186:	4602      	mov	r2, r0
 8002188:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4413      	add	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	3318      	adds	r3, #24
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800219e:	7bfa      	ldrb	r2, [r7, #15]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	331c      	adds	r3, #28
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	3320      	adds	r3, #32
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	3324      	adds	r3, #36	@ 0x24
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	3301      	adds	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	791b      	ldrb	r3, [r3, #4]
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d3af      	bcc.n	800214a <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	73fb      	strb	r3, [r7, #15]
 80021ee:	e044      	b.n	800227a <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021f0:	7bfa      	ldrb	r2, [r7, #15]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4413      	add	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002218:	7bfa      	ldrb	r2, [r7, #15]
 800221a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002232:	7bfa      	ldrb	r2, [r7, #15]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4413      	add	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	3301      	adds	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	791b      	ldrb	r3, [r3, #4]
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	429a      	cmp	r2, r3
 8002282:	d3b5      	bcc.n	80021f0 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7c1a      	ldrb	r2, [r3, #16]
 800228c:	f88d 2000 	strb.w	r2, [sp]
 8002290:	3304      	adds	r3, #4
 8002292:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002294:	f002 fe22 	bl	8004edc <USB_DevInit>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2202      	movs	r2, #2
 80022a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e013      	b.n	80022d2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	7b1b      	ldrb	r3, [r3, #12]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d102      	bne.n	80022c6 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f80a 	bl	80022da <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f002 ffc7 	bl	800525e <USB_DevDisconnect>

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022da:	b480      	push	{r7}
 80022dc:	b085      	sub	sp, #20
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800230c:	f043 0303 	orr.w	r3, r3, #3
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002328:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a04      	ldr	r2, [pc, #16]	@ (8002340 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800232e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40007000 	.word	0x40007000

08002344 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002348:	4b04      	ldr	r3, [pc, #16]	@ (800235c <HAL_PWREx_GetVoltageRange+0x18>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40007000 	.word	0x40007000

08002360 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800236e:	d130      	bne.n	80023d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002370:	4b23      	ldr	r3, [pc, #140]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800237c:	d038      	beq.n	80023f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800237e:	4b20      	ldr	r3, [pc, #128]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002386:	4a1e      	ldr	r2, [pc, #120]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002388:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800238c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800238e:	4b1d      	ldr	r3, [pc, #116]	@ (8002404 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2232      	movs	r2, #50	@ 0x32
 8002394:	fb02 f303 	mul.w	r3, r2, r3
 8002398:	4a1b      	ldr	r2, [pc, #108]	@ (8002408 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	0c9b      	lsrs	r3, r3, #18
 80023a0:	3301      	adds	r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023a4:	e002      	b.n	80023ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ac:	4b14      	ldr	r3, [pc, #80]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023b8:	d102      	bne.n	80023c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1f2      	bne.n	80023a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023cc:	d110      	bne.n	80023f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e00f      	b.n	80023f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023de:	d007      	beq.n	80023f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023e0:	4b07      	ldr	r3, [pc, #28]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023e8:	4a05      	ldr	r2, [pc, #20]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40007000 	.word	0x40007000
 8002404:	20000000 	.word	0x20000000
 8002408:	431bde83 	.word	0x431bde83

0800240c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002410:	4b05      	ldr	r3, [pc, #20]	@ (8002428 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4a04      	ldr	r2, [pc, #16]	@ (8002428 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002416:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800241a:	6053      	str	r3, [r2, #4]
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40007000 	.word	0x40007000

0800242c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af02      	add	r7, sp, #8
 8002432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002434:	f7ff f8fe 	bl	8001634 <HAL_GetTick>
 8002438:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e063      	b.n	800250c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10b      	bne.n	8002468 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7fe fe03 	bl	8001064 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800245e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f858 	bl	8002518 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	3b01      	subs	r3, #1
 8002478:	021a      	lsls	r2, r3, #8
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	2120      	movs	r1, #32
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f850 	bl	8002534 <QSPI_WaitFlagStateUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002498:	7afb      	ldrb	r3, [r7, #11]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d131      	bne.n	8002502 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80024a8:	f023 0310 	bic.w	r3, r3, #16
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6852      	ldr	r2, [r2, #4]
 80024b0:	0611      	lsls	r1, r2, #24
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68d2      	ldr	r2, [r2, #12]
 80024b6:	4311      	orrs	r1, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	430b      	orrs	r3, r1
 80024be:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <HAL_QSPI_Init+0xe8>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6912      	ldr	r2, [r2, #16]
 80024ce:	0411      	lsls	r1, r2, #16
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6952      	ldr	r2, [r2, #20]
 80024d4:	4311      	orrs	r1, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6992      	ldr	r2, [r2, #24]
 80024da:	4311      	orrs	r1, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800250a:	7afb      	ldrb	r3, [r7, #11]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	ffe0f8fe 	.word	0xffe0f8fe

08002518 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002544:	e01a      	b.n	800257c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254c:	d016      	beq.n	800257c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254e:	f7ff f871 	bl	8001634 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	429a      	cmp	r2, r3
 800255c:	d302      	bcc.n	8002564 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10b      	bne.n	800257c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2204      	movs	r2, #4
 8002568:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002570:	f043 0201 	orr.w	r2, r3, #1
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e00e      	b.n	800259a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	bf14      	ite	ne
 800258a:	2301      	movne	r3, #1
 800258c:	2300      	moveq	r3, #0
 800258e:	b2db      	uxtb	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	429a      	cmp	r2, r3
 8002596:	d1d6      	bne.n	8002546 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e3ca      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025b6:	4b97      	ldr	r3, [pc, #604]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025c0:	4b94      	ldr	r3, [pc, #592]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80e4 	beq.w	80027a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <HAL_RCC_OscConfig+0x4a>
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	2b0c      	cmp	r3, #12
 80025e2:	f040 808b 	bne.w	80026fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	f040 8087 	bne.w	80026fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025ee:	4b89      	ldr	r3, [pc, #548]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_RCC_OscConfig+0x62>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e3a2      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1a      	ldr	r2, [r3, #32]
 800260a:	4b82      	ldr	r3, [pc, #520]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d004      	beq.n	8002620 <HAL_RCC_OscConfig+0x7c>
 8002616:	4b7f      	ldr	r3, [pc, #508]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800261e:	e005      	b.n	800262c <HAL_RCC_OscConfig+0x88>
 8002620:	4b7c      	ldr	r3, [pc, #496]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002622:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002626:	091b      	lsrs	r3, r3, #4
 8002628:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800262c:	4293      	cmp	r3, r2
 800262e:	d223      	bcs.n	8002678 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4618      	mov	r0, r3
 8002636:	f000 fd87 	bl	8003148 <RCC_SetFlashLatencyFromMSIRange>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e383      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002644:	4b73      	ldr	r3, [pc, #460]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a72      	ldr	r2, [pc, #456]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 800264a:	f043 0308 	orr.w	r3, r3, #8
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	4b70      	ldr	r3, [pc, #448]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	496d      	ldr	r1, [pc, #436]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002662:	4b6c      	ldr	r3, [pc, #432]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	021b      	lsls	r3, r3, #8
 8002670:	4968      	ldr	r1, [pc, #416]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
 8002676:	e025      	b.n	80026c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002678:	4b66      	ldr	r3, [pc, #408]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a65      	ldr	r2, [pc, #404]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 800267e:	f043 0308 	orr.w	r3, r3, #8
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	4b63      	ldr	r3, [pc, #396]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	4960      	ldr	r1, [pc, #384]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002696:	4b5f      	ldr	r3, [pc, #380]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	495b      	ldr	r1, [pc, #364]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 fd47 	bl	8003148 <RCC_SetFlashLatencyFromMSIRange>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e343      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026c4:	f000 fc4a 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b52      	ldr	r3, [pc, #328]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	4950      	ldr	r1, [pc, #320]	@ (8002818 <HAL_RCC_OscConfig+0x274>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
 80026e0:	4a4e      	ldr	r2, [pc, #312]	@ (800281c <HAL_RCC_OscConfig+0x278>)
 80026e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026e4:	4b4e      	ldr	r3, [pc, #312]	@ (8002820 <HAL_RCC_OscConfig+0x27c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fe3d 	bl	8001368 <HAL_InitTick>
 80026ee:	4603      	mov	r3, r0
 80026f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d052      	beq.n	800279e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	e327      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d032      	beq.n	800276a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002704:	4b43      	ldr	r3, [pc, #268]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a42      	ldr	r2, [pc, #264]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002710:	f7fe ff90 	bl	8001634 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002718:	f7fe ff8c 	bl	8001634 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e310      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800272a:	4b3a      	ldr	r3, [pc, #232]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002736:	4b37      	ldr	r3, [pc, #220]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a36      	ldr	r2, [pc, #216]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 800273c:	f043 0308 	orr.w	r3, r3, #8
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	4b34      	ldr	r3, [pc, #208]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4931      	ldr	r1, [pc, #196]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002754:	4b2f      	ldr	r3, [pc, #188]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	492c      	ldr	r1, [pc, #176]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002764:	4313      	orrs	r3, r2
 8002766:	604b      	str	r3, [r1, #4]
 8002768:	e01a      	b.n	80027a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800276a:	4b2a      	ldr	r3, [pc, #168]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a29      	ldr	r2, [pc, #164]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002776:	f7fe ff5d 	bl	8001634 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800277e:	f7fe ff59 	bl	8001634 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e2dd      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002790:	4b20      	ldr	r3, [pc, #128]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f0      	bne.n	800277e <HAL_RCC_OscConfig+0x1da>
 800279c:	e000      	b.n	80027a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800279e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d074      	beq.n	8002896 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d005      	beq.n	80027be <HAL_RCC_OscConfig+0x21a>
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	2b0c      	cmp	r3, #12
 80027b6:	d10e      	bne.n	80027d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d10b      	bne.n	80027d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027be:	4b15      	ldr	r3, [pc, #84]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d064      	beq.n	8002894 <HAL_RCC_OscConfig+0x2f0>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d160      	bne.n	8002894 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e2ba      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x24a>
 80027e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 80027e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	e026      	b.n	800283c <HAL_RCC_OscConfig+0x298>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027f6:	d115      	bne.n	8002824 <HAL_RCC_OscConfig+0x280>
 80027f8:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a05      	ldr	r2, [pc, #20]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 80027fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	4b03      	ldr	r3, [pc, #12]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a02      	ldr	r2, [pc, #8]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 800280a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	e014      	b.n	800283c <HAL_RCC_OscConfig+0x298>
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	08009584 	.word	0x08009584
 800281c:	20000000 	.word	0x20000000
 8002820:	20000004 	.word	0x20000004
 8002824:	4ba0      	ldr	r3, [pc, #640]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a9f      	ldr	r2, [pc, #636]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 800282a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b9d      	ldr	r3, [pc, #628]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a9c      	ldr	r2, [pc, #624]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002836:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800283a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7fe fef6 	bl	8001634 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800284c:	f7fe fef2 	bl	8001634 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	@ 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e276      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800285e:	4b92      	ldr	r3, [pc, #584]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x2a8>
 800286a:	e014      	b.n	8002896 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7fe fee2 	bl	8001634 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002874:	f7fe fede 	bl	8001634 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	@ 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e262      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002886:	4b88      	ldr	r3, [pc, #544]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x2d0>
 8002892:	e000      	b.n	8002896 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d060      	beq.n	8002964 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_OscConfig+0x310>
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	2b0c      	cmp	r3, #12
 80028ac:	d119      	bne.n	80028e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d116      	bne.n	80028e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028b4:	4b7c      	ldr	r3, [pc, #496]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_OscConfig+0x328>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e23f      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	4b76      	ldr	r3, [pc, #472]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	061b      	lsls	r3, r3, #24
 80028da:	4973      	ldr	r1, [pc, #460]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028e0:	e040      	b.n	8002964 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d023      	beq.n	8002932 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ea:	4b6f      	ldr	r3, [pc, #444]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a6e      	ldr	r2, [pc, #440]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 80028f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7fe fe9d 	bl	8001634 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028fe:	f7fe fe99 	bl	8001634 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e21d      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002910:	4b65      	ldr	r3, [pc, #404]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291c:	4b62      	ldr	r3, [pc, #392]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	061b      	lsls	r3, r3, #24
 800292a:	495f      	ldr	r1, [pc, #380]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
 8002930:	e018      	b.n	8002964 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002932:	4b5d      	ldr	r3, [pc, #372]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a5c      	ldr	r2, [pc, #368]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800293c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293e:	f7fe fe79 	bl	8001634 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002946:	f7fe fe75 	bl	8001634 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e1f9      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002958:	4b53      	ldr	r3, [pc, #332]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f0      	bne.n	8002946 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d03c      	beq.n	80029ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01c      	beq.n	80029b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002978:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 800297a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800297e:	4a4a      	ldr	r2, [pc, #296]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7fe fe54 	bl	8001634 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002990:	f7fe fe50 	bl	8001634 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e1d4      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029a2:	4b41      	ldr	r3, [pc, #260]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 80029a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0ef      	beq.n	8002990 <HAL_RCC_OscConfig+0x3ec>
 80029b0:	e01b      	b.n	80029ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b2:	4b3d      	ldr	r3, [pc, #244]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 80029b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029b8:	4a3b      	ldr	r2, [pc, #236]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c2:	f7fe fe37 	bl	8001634 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ca:	f7fe fe33 	bl	8001634 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e1b7      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029dc:	4b32      	ldr	r3, [pc, #200]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 80029de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1ef      	bne.n	80029ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 80a6 	beq.w	8002b44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f8:	2300      	movs	r3, #0
 80029fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029fc:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 80029fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10d      	bne.n	8002a24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a08:	4b27      	ldr	r3, [pc, #156]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0c:	4a26      	ldr	r2, [pc, #152]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a12:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a14:	4b24      	ldr	r3, [pc, #144]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a20:	2301      	movs	r3, #1
 8002a22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a24:	4b21      	ldr	r3, [pc, #132]	@ (8002aac <HAL_RCC_OscConfig+0x508>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d118      	bne.n	8002a62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a30:	4b1e      	ldr	r3, [pc, #120]	@ (8002aac <HAL_RCC_OscConfig+0x508>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1d      	ldr	r2, [pc, #116]	@ (8002aac <HAL_RCC_OscConfig+0x508>)
 8002a36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3c:	f7fe fdfa 	bl	8001634 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a44:	f7fe fdf6 	bl	8001634 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e17a      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a56:	4b15      	ldr	r3, [pc, #84]	@ (8002aac <HAL_RCC_OscConfig+0x508>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d108      	bne.n	8002a7c <HAL_RCC_OscConfig+0x4d8>
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a70:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a7a:	e029      	b.n	8002ad0 <HAL_RCC_OscConfig+0x52c>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b05      	cmp	r3, #5
 8002a82:	d115      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x50c>
 8002a84:	4b08      	ldr	r3, [pc, #32]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8a:	4a07      	ldr	r2, [pc, #28]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002a8c:	f043 0304 	orr.w	r3, r3, #4
 8002a90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a94:	4b04      	ldr	r3, [pc, #16]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a9a:	4a03      	ldr	r2, [pc, #12]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002aa4:	e014      	b.n	8002ad0 <HAL_RCC_OscConfig+0x52c>
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40007000 	.word	0x40007000
 8002ab0:	4b9c      	ldr	r3, [pc, #624]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab6:	4a9b      	ldr	r2, [pc, #620]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ac0:	4b98      	ldr	r3, [pc, #608]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac6:	4a97      	ldr	r2, [pc, #604]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002ac8:	f023 0304 	bic.w	r3, r3, #4
 8002acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d016      	beq.n	8002b06 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad8:	f7fe fdac 	bl	8001634 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ade:	e00a      	b.n	8002af6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae0:	f7fe fda8 	bl	8001634 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e12a      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af6:	4b8b      	ldr	r3, [pc, #556]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0ed      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x53c>
 8002b04:	e015      	b.n	8002b32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b06:	f7fe fd95 	bl	8001634 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b0c:	e00a      	b.n	8002b24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0e:	f7fe fd91 	bl	8001634 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e113      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b24:	4b7f      	ldr	r3, [pc, #508]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1ed      	bne.n	8002b0e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b32:	7ffb      	ldrb	r3, [r7, #31]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d105      	bne.n	8002b44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b38:	4b7a      	ldr	r3, [pc, #488]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3c:	4a79      	ldr	r2, [pc, #484]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b42:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80fe 	beq.w	8002d4a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	f040 80d0 	bne.w	8002cf8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b58:	4b72      	ldr	r3, [pc, #456]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f003 0203 	and.w	r2, r3, #3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d130      	bne.n	8002bce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b76:	3b01      	subs	r3, #1
 8002b78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d127      	bne.n	8002bce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d11f      	bne.n	8002bce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b98:	2a07      	cmp	r2, #7
 8002b9a:	bf14      	ite	ne
 8002b9c:	2201      	movne	r2, #1
 8002b9e:	2200      	moveq	r2, #0
 8002ba0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d113      	bne.n	8002bce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb0:	085b      	lsrs	r3, r3, #1
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d109      	bne.n	8002bce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc4:	085b      	lsrs	r3, r3, #1
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d06e      	beq.n	8002cac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b0c      	cmp	r3, #12
 8002bd2:	d069      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bd4:	4b53      	ldr	r3, [pc, #332]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d105      	bne.n	8002bec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002be0:	4b50      	ldr	r3, [pc, #320]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0ad      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bf0:	4b4c      	ldr	r3, [pc, #304]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a4b      	ldr	r2, [pc, #300]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002bf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bfa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bfc:	f7fe fd1a 	bl	8001634 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c04:	f7fe fd16 	bl	8001634 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e09a      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c16:	4b43      	ldr	r3, [pc, #268]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c22:	4b40      	ldr	r3, [pc, #256]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	4b40      	ldr	r3, [pc, #256]	@ (8002d28 <HAL_RCC_OscConfig+0x784>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c32:	3a01      	subs	r2, #1
 8002c34:	0112      	lsls	r2, r2, #4
 8002c36:	4311      	orrs	r1, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c3c:	0212      	lsls	r2, r2, #8
 8002c3e:	4311      	orrs	r1, r2
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c44:	0852      	lsrs	r2, r2, #1
 8002c46:	3a01      	subs	r2, #1
 8002c48:	0552      	lsls	r2, r2, #21
 8002c4a:	4311      	orrs	r1, r2
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c50:	0852      	lsrs	r2, r2, #1
 8002c52:	3a01      	subs	r2, #1
 8002c54:	0652      	lsls	r2, r2, #25
 8002c56:	4311      	orrs	r1, r2
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c5c:	0912      	lsrs	r2, r2, #4
 8002c5e:	0452      	lsls	r2, r2, #17
 8002c60:	430a      	orrs	r2, r1
 8002c62:	4930      	ldr	r1, [pc, #192]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c68:	4b2e      	ldr	r3, [pc, #184]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a2d      	ldr	r2, [pc, #180]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002c6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c74:	4b2b      	ldr	r3, [pc, #172]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4a2a      	ldr	r2, [pc, #168]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002c7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c80:	f7fe fcd8 	bl	8001634 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe fcd4 	bl	8001634 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e058      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9a:	4b22      	ldr	r3, [pc, #136]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ca6:	e050      	b.n	8002d4a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e04f      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cac:	4b1d      	ldr	r3, [pc, #116]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d148      	bne.n	8002d4a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a19      	ldr	r2, [pc, #100]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002cbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cc4:	4b17      	ldr	r3, [pc, #92]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4a16      	ldr	r2, [pc, #88]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002cca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cd0:	f7fe fcb0 	bl	8001634 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd8:	f7fe fcac 	bl	8001634 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e030      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cea:	4b0e      	ldr	r3, [pc, #56]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x734>
 8002cf6:	e028      	b.n	8002d4a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2b0c      	cmp	r3, #12
 8002cfc:	d023      	beq.n	8002d46 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfe:	4b09      	ldr	r3, [pc, #36]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a08      	ldr	r2, [pc, #32]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002d04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0a:	f7fe fc93 	bl	8001634 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d10:	e00c      	b.n	8002d2c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d12:	f7fe fc8f 	bl	8001634 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d905      	bls.n	8002d2c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e013      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
 8002d24:	40021000 	.word	0x40021000
 8002d28:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d2c:	4b09      	ldr	r3, [pc, #36]	@ (8002d54 <HAL_RCC_OscConfig+0x7b0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1ec      	bne.n	8002d12 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d38:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <HAL_RCC_OscConfig+0x7b0>)
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	4905      	ldr	r1, [pc, #20]	@ (8002d54 <HAL_RCC_OscConfig+0x7b0>)
 8002d3e:	4b06      	ldr	r3, [pc, #24]	@ (8002d58 <HAL_RCC_OscConfig+0x7b4>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	60cb      	str	r3, [r1, #12]
 8002d44:	e001      	b.n	8002d4a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3720      	adds	r7, #32
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000
 8002d58:	feeefffc 	.word	0xfeeefffc

08002d5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0e7      	b.n	8002f40 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d70:	4b75      	ldr	r3, [pc, #468]	@ (8002f48 <HAL_RCC_ClockConfig+0x1ec>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d910      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b72      	ldr	r3, [pc, #456]	@ (8002f48 <HAL_RCC_ClockConfig+0x1ec>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 0207 	bic.w	r2, r3, #7
 8002d86:	4970      	ldr	r1, [pc, #448]	@ (8002f48 <HAL_RCC_ClockConfig+0x1ec>)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b6e      	ldr	r3, [pc, #440]	@ (8002f48 <HAL_RCC_ClockConfig+0x1ec>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0cf      	b.n	8002f40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d010      	beq.n	8002dce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	4b66      	ldr	r3, [pc, #408]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d908      	bls.n	8002dce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dbc:	4b63      	ldr	r3, [pc, #396]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4960      	ldr	r1, [pc, #384]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d04c      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d107      	bne.n	8002df2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de2:	4b5a      	ldr	r3, [pc, #360]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d121      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e0a6      	b.n	8002f40 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d107      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dfa:	4b54      	ldr	r3, [pc, #336]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d115      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e09a      	b.n	8002f40 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d107      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e12:	4b4e      	ldr	r3, [pc, #312]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d109      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e08e      	b.n	8002f40 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e22:	4b4a      	ldr	r3, [pc, #296]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e086      	b.n	8002f40 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e32:	4b46      	ldr	r3, [pc, #280]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f023 0203 	bic.w	r2, r3, #3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	4943      	ldr	r1, [pc, #268]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e44:	f7fe fbf6 	bl	8001634 <HAL_GetTick>
 8002e48:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e4c:	f7fe fbf2 	bl	8001634 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e06e      	b.n	8002f40 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e62:	4b3a      	ldr	r3, [pc, #232]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 020c 	and.w	r2, r3, #12
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d1eb      	bne.n	8002e4c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d010      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	4b31      	ldr	r3, [pc, #196]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d208      	bcs.n	8002ea2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e90:	4b2e      	ldr	r3, [pc, #184]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	492b      	ldr	r1, [pc, #172]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea2:	4b29      	ldr	r3, [pc, #164]	@ (8002f48 <HAL_RCC_ClockConfig+0x1ec>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d210      	bcs.n	8002ed2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb0:	4b25      	ldr	r3, [pc, #148]	@ (8002f48 <HAL_RCC_ClockConfig+0x1ec>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f023 0207 	bic.w	r2, r3, #7
 8002eb8:	4923      	ldr	r1, [pc, #140]	@ (8002f48 <HAL_RCC_ClockConfig+0x1ec>)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec0:	4b21      	ldr	r3, [pc, #132]	@ (8002f48 <HAL_RCC_ClockConfig+0x1ec>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e036      	b.n	8002f40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ede:	4b1b      	ldr	r3, [pc, #108]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	4918      	ldr	r1, [pc, #96]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d009      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002efc:	4b13      	ldr	r3, [pc, #76]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4910      	ldr	r1, [pc, #64]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f10:	f000 f824 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 8002f14:	4602      	mov	r2, r0
 8002f16:	4b0d      	ldr	r3, [pc, #52]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	091b      	lsrs	r3, r3, #4
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	490b      	ldr	r1, [pc, #44]	@ (8002f50 <HAL_RCC_ClockConfig+0x1f4>)
 8002f22:	5ccb      	ldrb	r3, [r1, r3]
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2c:	4a09      	ldr	r2, [pc, #36]	@ (8002f54 <HAL_RCC_ClockConfig+0x1f8>)
 8002f2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f30:	4b09      	ldr	r3, [pc, #36]	@ (8002f58 <HAL_RCC_ClockConfig+0x1fc>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe fa17 	bl	8001368 <HAL_InitTick>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f3e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40022000 	.word	0x40022000
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	08009584 	.word	0x08009584
 8002f54:	20000000 	.word	0x20000000
 8002f58:	20000004 	.word	0x20000004

08002f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b089      	sub	sp, #36	@ 0x24
 8002f60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
 8002f66:	2300      	movs	r3, #0
 8002f68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f74:	4b3b      	ldr	r3, [pc, #236]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x34>
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	2b0c      	cmp	r3, #12
 8002f88:	d121      	bne.n	8002fce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d11e      	bne.n	8002fce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f90:	4b34      	ldr	r3, [pc, #208]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d107      	bne.n	8002fac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f9c:	4b31      	ldr	r3, [pc, #196]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	e005      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fac:	4b2d      	ldr	r3, [pc, #180]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10d      	bne.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fcc:	e00a      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d102      	bne.n	8002fda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fd4:	4b25      	ldr	r3, [pc, #148]	@ (800306c <HAL_RCC_GetSysClockFreq+0x110>)
 8002fd6:	61bb      	str	r3, [r7, #24]
 8002fd8:	e004      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fe0:	4b23      	ldr	r3, [pc, #140]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fe2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	2b0c      	cmp	r3, #12
 8002fe8:	d134      	bne.n	8003054 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fea:	4b1e      	ldr	r3, [pc, #120]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d003      	beq.n	8003002 <HAL_RCC_GetSysClockFreq+0xa6>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d003      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0xac>
 8003000:	e005      	b.n	800300e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003002:	4b1a      	ldr	r3, [pc, #104]	@ (800306c <HAL_RCC_GetSysClockFreq+0x110>)
 8003004:	617b      	str	r3, [r7, #20]
      break;
 8003006:	e005      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003008:	4b19      	ldr	r3, [pc, #100]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x114>)
 800300a:	617b      	str	r3, [r7, #20]
      break;
 800300c:	e002      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	617b      	str	r3, [r7, #20]
      break;
 8003012:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003014:	4b13      	ldr	r3, [pc, #76]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x108>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	3301      	adds	r3, #1
 8003020:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003022:	4b10      	ldr	r3, [pc, #64]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x108>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	fb03 f202 	mul.w	r2, r3, r2
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	fbb2 f3f3 	udiv	r3, r2, r3
 8003038:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800303a:	4b0a      	ldr	r3, [pc, #40]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x108>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	0e5b      	lsrs	r3, r3, #25
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	3301      	adds	r3, #1
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003052:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003054:	69bb      	ldr	r3, [r7, #24]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3724      	adds	r7, #36	@ 0x24
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40021000 	.word	0x40021000
 8003068:	0800959c 	.word	0x0800959c
 800306c:	00f42400 	.word	0x00f42400
 8003070:	007a1200 	.word	0x007a1200

08003074 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003078:	4b03      	ldr	r3, [pc, #12]	@ (8003088 <HAL_RCC_GetHCLKFreq+0x14>)
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	4618      	mov	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20000000 	.word	0x20000000

0800308c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003090:	f7ff fff0 	bl	8003074 <HAL_RCC_GetHCLKFreq>
 8003094:	4602      	mov	r2, r0
 8003096:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	0a1b      	lsrs	r3, r3, #8
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	4904      	ldr	r1, [pc, #16]	@ (80030b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030a2:	5ccb      	ldrb	r3, [r1, r3]
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40021000 	.word	0x40021000
 80030b4:	08009594 	.word	0x08009594

080030b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030bc:	f7ff ffda 	bl	8003074 <HAL_RCC_GetHCLKFreq>
 80030c0:	4602      	mov	r2, r0
 80030c2:	4b06      	ldr	r3, [pc, #24]	@ (80030dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	0adb      	lsrs	r3, r3, #11
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	4904      	ldr	r1, [pc, #16]	@ (80030e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030ce:	5ccb      	ldrb	r3, [r1, r3]
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d8:	4618      	mov	r0, r3
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021000 	.word	0x40021000
 80030e0:	08009594 	.word	0x08009594

080030e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	220f      	movs	r2, #15
 80030f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80030f4:	4b12      	ldr	r3, [pc, #72]	@ (8003140 <HAL_RCC_GetClockConfig+0x5c>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 0203 	and.w	r2, r3, #3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003100:	4b0f      	ldr	r3, [pc, #60]	@ (8003140 <HAL_RCC_GetClockConfig+0x5c>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800310c:	4b0c      	ldr	r3, [pc, #48]	@ (8003140 <HAL_RCC_GetClockConfig+0x5c>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003118:	4b09      	ldr	r3, [pc, #36]	@ (8003140 <HAL_RCC_GetClockConfig+0x5c>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	08db      	lsrs	r3, r3, #3
 800311e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003126:	4b07      	ldr	r3, [pc, #28]	@ (8003144 <HAL_RCC_GetClockConfig+0x60>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0207 	and.w	r2, r3, #7
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	601a      	str	r2, [r3, #0]
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000
 8003144:	40022000 	.word	0x40022000

08003148 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003154:	4b2a      	ldr	r3, [pc, #168]	@ (8003200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003160:	f7ff f8f0 	bl	8002344 <HAL_PWREx_GetVoltageRange>
 8003164:	6178      	str	r0, [r7, #20]
 8003166:	e014      	b.n	8003192 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003168:	4b25      	ldr	r3, [pc, #148]	@ (8003200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800316a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316c:	4a24      	ldr	r2, [pc, #144]	@ (8003200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800316e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003172:	6593      	str	r3, [r2, #88]	@ 0x58
 8003174:	4b22      	ldr	r3, [pc, #136]	@ (8003200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003180:	f7ff f8e0 	bl	8002344 <HAL_PWREx_GetVoltageRange>
 8003184:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003186:	4b1e      	ldr	r3, [pc, #120]	@ (8003200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318a:	4a1d      	ldr	r2, [pc, #116]	@ (8003200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800318c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003190:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003198:	d10b      	bne.n	80031b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b80      	cmp	r3, #128	@ 0x80
 800319e:	d919      	bls.n	80031d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2ba0      	cmp	r3, #160	@ 0xa0
 80031a4:	d902      	bls.n	80031ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031a6:	2302      	movs	r3, #2
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	e013      	b.n	80031d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031ac:	2301      	movs	r3, #1
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	e010      	b.n	80031d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b80      	cmp	r3, #128	@ 0x80
 80031b6:	d902      	bls.n	80031be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031b8:	2303      	movs	r3, #3
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	e00a      	b.n	80031d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b80      	cmp	r3, #128	@ 0x80
 80031c2:	d102      	bne.n	80031ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031c4:	2302      	movs	r3, #2
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	e004      	b.n	80031d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b70      	cmp	r3, #112	@ 0x70
 80031ce:	d101      	bne.n	80031d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031d0:	2301      	movs	r3, #1
 80031d2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f023 0207 	bic.w	r2, r3, #7
 80031dc:	4909      	ldr	r1, [pc, #36]	@ (8003204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031e4:	4b07      	ldr	r3, [pc, #28]	@ (8003204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d001      	beq.n	80031f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40021000 	.word	0x40021000
 8003204:	40022000 	.word	0x40022000

08003208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003210:	2300      	movs	r3, #0
 8003212:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003214:	2300      	movs	r3, #0
 8003216:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003220:	2b00      	cmp	r3, #0
 8003222:	d041      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003228:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800322c:	d02a      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800322e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003232:	d824      	bhi.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003234:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003238:	d008      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800323a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800323e:	d81e      	bhi.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003244:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003248:	d010      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800324a:	e018      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800324c:	4b86      	ldr	r3, [pc, #536]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4a85      	ldr	r2, [pc, #532]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003256:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003258:	e015      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3304      	adds	r3, #4
 800325e:	2100      	movs	r1, #0
 8003260:	4618      	mov	r0, r3
 8003262:	f000 facb 	bl	80037fc <RCCEx_PLLSAI1_Config>
 8003266:	4603      	mov	r3, r0
 8003268:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800326a:	e00c      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3320      	adds	r3, #32
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fbb6 	bl	80039e4 <RCCEx_PLLSAI2_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800327c:	e003      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	74fb      	strb	r3, [r7, #19]
      break;
 8003282:	e000      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003286:	7cfb      	ldrb	r3, [r7, #19]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10b      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800328c:	4b76      	ldr	r3, [pc, #472]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003292:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800329a:	4973      	ldr	r1, [pc, #460]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80032a2:	e001      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a4:	7cfb      	ldrb	r3, [r7, #19]
 80032a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d041      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032bc:	d02a      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032c2:	d824      	bhi.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032c8:	d008      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032ce:	d81e      	bhi.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032d8:	d010      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032da:	e018      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032dc:	4b62      	ldr	r3, [pc, #392]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	4a61      	ldr	r2, [pc, #388]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032e8:	e015      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3304      	adds	r3, #4
 80032ee:	2100      	movs	r1, #0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fa83 	bl	80037fc <RCCEx_PLLSAI1_Config>
 80032f6:	4603      	mov	r3, r0
 80032f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032fa:	e00c      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3320      	adds	r3, #32
 8003300:	2100      	movs	r1, #0
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fb6e 	bl	80039e4 <RCCEx_PLLSAI2_Config>
 8003308:	4603      	mov	r3, r0
 800330a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800330c:	e003      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	74fb      	strb	r3, [r7, #19]
      break;
 8003312:	e000      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10b      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800331c:	4b52      	ldr	r3, [pc, #328]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003322:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800332a:	494f      	ldr	r1, [pc, #316]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003332:	e001      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003334:	7cfb      	ldrb	r3, [r7, #19]
 8003336:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80a0 	beq.w	8003486 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003346:	2300      	movs	r3, #0
 8003348:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800334a:	4b47      	ldr	r3, [pc, #284]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800335a:	2300      	movs	r3, #0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00d      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003360:	4b41      	ldr	r3, [pc, #260]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003364:	4a40      	ldr	r2, [pc, #256]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003366:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800336a:	6593      	str	r3, [r2, #88]	@ 0x58
 800336c:	4b3e      	ldr	r3, [pc, #248]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003378:	2301      	movs	r3, #1
 800337a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800337c:	4b3b      	ldr	r3, [pc, #236]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a3a      	ldr	r2, [pc, #232]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003386:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003388:	f7fe f954 	bl	8001634 <HAL_GetTick>
 800338c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800338e:	e009      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003390:	f7fe f950 	bl	8001634 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d902      	bls.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	74fb      	strb	r3, [r7, #19]
        break;
 80033a2:	e005      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033a4:	4b31      	ldr	r3, [pc, #196]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0ef      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033b0:	7cfb      	ldrb	r3, [r7, #19]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d15c      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033b6:	4b2c      	ldr	r3, [pc, #176]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d01f      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d019      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033d4:	4b24      	ldr	r3, [pc, #144]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033e0:	4b21      	ldr	r3, [pc, #132]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e6:	4a20      	ldr	r2, [pc, #128]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003400:	4a19      	ldr	r2, [pc, #100]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d016      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003412:	f7fe f90f 	bl	8001634 <HAL_GetTick>
 8003416:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003418:	e00b      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341a:	f7fe f90b 	bl	8001634 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003428:	4293      	cmp	r3, r2
 800342a:	d902      	bls.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	74fb      	strb	r3, [r7, #19]
            break;
 8003430:	e006      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003432:	4b0d      	ldr	r3, [pc, #52]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0ec      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10c      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003446:	4b08      	ldr	r3, [pc, #32]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003456:	4904      	ldr	r1, [pc, #16]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800345e:	e009      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	74bb      	strb	r3, [r7, #18]
 8003464:	e006      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000
 800346c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003470:	7cfb      	ldrb	r3, [r7, #19]
 8003472:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003474:	7c7b      	ldrb	r3, [r7, #17]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d105      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800347a:	4b9e      	ldr	r3, [pc, #632]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347e:	4a9d      	ldr	r2, [pc, #628]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003480:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003484:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003492:	4b98      	ldr	r3, [pc, #608]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003498:	f023 0203 	bic.w	r2, r3, #3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a0:	4994      	ldr	r1, [pc, #592]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034b4:	4b8f      	ldr	r3, [pc, #572]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ba:	f023 020c 	bic.w	r2, r3, #12
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c2:	498c      	ldr	r1, [pc, #560]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034d6:	4b87      	ldr	r3, [pc, #540]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e4:	4983      	ldr	r1, [pc, #524]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034f8:	4b7e      	ldr	r3, [pc, #504]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003506:	497b      	ldr	r1, [pc, #492]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0310 	and.w	r3, r3, #16
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800351a:	4b76      	ldr	r3, [pc, #472]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003520:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003528:	4972      	ldr	r1, [pc, #456]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800353c:	4b6d      	ldr	r3, [pc, #436]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003542:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800354a:	496a      	ldr	r1, [pc, #424]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800355e:	4b65      	ldr	r3, [pc, #404]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003564:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800356c:	4961      	ldr	r1, [pc, #388]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003580:	4b5c      	ldr	r3, [pc, #368]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003586:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800358e:	4959      	ldr	r1, [pc, #356]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035a2:	4b54      	ldr	r3, [pc, #336]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b0:	4950      	ldr	r1, [pc, #320]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035c4:	4b4b      	ldr	r3, [pc, #300]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d2:	4948      	ldr	r1, [pc, #288]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035e6:	4b43      	ldr	r3, [pc, #268]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f4:	493f      	ldr	r1, [pc, #252]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d028      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003608:	4b3a      	ldr	r3, [pc, #232]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003616:	4937      	ldr	r1, [pc, #220]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003622:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003626:	d106      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003628:	4b32      	ldr	r3, [pc, #200]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4a31      	ldr	r2, [pc, #196]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003632:	60d3      	str	r3, [r2, #12]
 8003634:	e011      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800363a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800363e:	d10c      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3304      	adds	r3, #4
 8003644:	2101      	movs	r1, #1
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f8d8 	bl	80037fc <RCCEx_PLLSAI1_Config>
 800364c:	4603      	mov	r3, r0
 800364e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003650:	7cfb      	ldrb	r3, [r7, #19]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003656:	7cfb      	ldrb	r3, [r7, #19]
 8003658:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d028      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003666:	4b23      	ldr	r3, [pc, #140]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003674:	491f      	ldr	r1, [pc, #124]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003680:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003684:	d106      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003686:	4b1b      	ldr	r3, [pc, #108]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	4a1a      	ldr	r2, [pc, #104]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003690:	60d3      	str	r3, [r2, #12]
 8003692:	e011      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003698:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800369c:	d10c      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3304      	adds	r3, #4
 80036a2:	2101      	movs	r1, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 f8a9 	bl	80037fc <RCCEx_PLLSAI1_Config>
 80036aa:	4603      	mov	r3, r0
 80036ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036ae:	7cfb      	ldrb	r3, [r7, #19]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036b4:	7cfb      	ldrb	r3, [r7, #19]
 80036b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d02b      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036c4:	4b0b      	ldr	r3, [pc, #44]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036d2:	4908      	ldr	r1, [pc, #32]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036e2:	d109      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036e4:	4b03      	ldr	r3, [pc, #12]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4a02      	ldr	r2, [pc, #8]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036ee:	60d3      	str	r3, [r2, #12]
 80036f0:	e014      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036f2:	bf00      	nop
 80036f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003700:	d10c      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3304      	adds	r3, #4
 8003706:	2101      	movs	r1, #1
 8003708:	4618      	mov	r0, r3
 800370a:	f000 f877 	bl	80037fc <RCCEx_PLLSAI1_Config>
 800370e:	4603      	mov	r3, r0
 8003710:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003712:	7cfb      	ldrb	r3, [r7, #19]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003718:	7cfb      	ldrb	r3, [r7, #19]
 800371a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d02f      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003728:	4b2b      	ldr	r3, [pc, #172]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003736:	4928      	ldr	r1, [pc, #160]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003742:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003746:	d10d      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3304      	adds	r3, #4
 800374c:	2102      	movs	r1, #2
 800374e:	4618      	mov	r0, r3
 8003750:	f000 f854 	bl	80037fc <RCCEx_PLLSAI1_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003758:	7cfb      	ldrb	r3, [r7, #19]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d014      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	74bb      	strb	r3, [r7, #18]
 8003762:	e011      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800376c:	d10c      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3320      	adds	r3, #32
 8003772:	2102      	movs	r1, #2
 8003774:	4618      	mov	r0, r3
 8003776:	f000 f935 	bl	80039e4 <RCCEx_PLLSAI2_Config>
 800377a:	4603      	mov	r3, r0
 800377c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800377e:	7cfb      	ldrb	r3, [r7, #19]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003784:	7cfb      	ldrb	r3, [r7, #19]
 8003786:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003794:	4b10      	ldr	r3, [pc, #64]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800379a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037a2:	490d      	ldr	r1, [pc, #52]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00b      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037b6:	4b08      	ldr	r3, [pc, #32]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037c6:	4904      	ldr	r1, [pc, #16]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40021000 	.word	0x40021000

080037dc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80037e0:	4b05      	ldr	r3, [pc, #20]	@ (80037f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a04      	ldr	r2, [pc, #16]	@ (80037f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037e6:	f043 0304 	orr.w	r3, r3, #4
 80037ea:	6013      	str	r3, [r2, #0]
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40021000 	.word	0x40021000

080037fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800380a:	4b75      	ldr	r3, [pc, #468]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d018      	beq.n	8003848 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003816:	4b72      	ldr	r3, [pc, #456]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f003 0203 	and.w	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d10d      	bne.n	8003842 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
       ||
 800382a:	2b00      	cmp	r3, #0
 800382c:	d009      	beq.n	8003842 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800382e:	4b6c      	ldr	r3, [pc, #432]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	091b      	lsrs	r3, r3, #4
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
       ||
 800383e:	429a      	cmp	r2, r3
 8003840:	d047      	beq.n	80038d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	73fb      	strb	r3, [r7, #15]
 8003846:	e044      	b.n	80038d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b03      	cmp	r3, #3
 800384e:	d018      	beq.n	8003882 <RCCEx_PLLSAI1_Config+0x86>
 8003850:	2b03      	cmp	r3, #3
 8003852:	d825      	bhi.n	80038a0 <RCCEx_PLLSAI1_Config+0xa4>
 8003854:	2b01      	cmp	r3, #1
 8003856:	d002      	beq.n	800385e <RCCEx_PLLSAI1_Config+0x62>
 8003858:	2b02      	cmp	r3, #2
 800385a:	d009      	beq.n	8003870 <RCCEx_PLLSAI1_Config+0x74>
 800385c:	e020      	b.n	80038a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800385e:	4b60      	ldr	r3, [pc, #384]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d11d      	bne.n	80038a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800386e:	e01a      	b.n	80038a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003870:	4b5b      	ldr	r3, [pc, #364]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003878:	2b00      	cmp	r3, #0
 800387a:	d116      	bne.n	80038aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003880:	e013      	b.n	80038aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003882:	4b57      	ldr	r3, [pc, #348]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10f      	bne.n	80038ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800388e:	4b54      	ldr	r3, [pc, #336]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800389e:	e006      	b.n	80038ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
      break;
 80038a4:	e004      	b.n	80038b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038a6:	bf00      	nop
 80038a8:	e002      	b.n	80038b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038aa:	bf00      	nop
 80038ac:	e000      	b.n	80038b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10d      	bne.n	80038d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038b6:	4b4a      	ldr	r3, [pc, #296]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6819      	ldr	r1, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	430b      	orrs	r3, r1
 80038cc:	4944      	ldr	r1, [pc, #272]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d17d      	bne.n	80039d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038d8:	4b41      	ldr	r3, [pc, #260]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a40      	ldr	r2, [pc, #256]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038e4:	f7fd fea6 	bl	8001634 <HAL_GetTick>
 80038e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038ea:	e009      	b.n	8003900 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038ec:	f7fd fea2 	bl	8001634 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d902      	bls.n	8003900 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	73fb      	strb	r3, [r7, #15]
        break;
 80038fe:	e005      	b.n	800390c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003900:	4b37      	ldr	r3, [pc, #220]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1ef      	bne.n	80038ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d160      	bne.n	80039d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d111      	bne.n	800393c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003918:	4b31      	ldr	r3, [pc, #196]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003920:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6892      	ldr	r2, [r2, #8]
 8003928:	0211      	lsls	r1, r2, #8
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68d2      	ldr	r2, [r2, #12]
 800392e:	0912      	lsrs	r2, r2, #4
 8003930:	0452      	lsls	r2, r2, #17
 8003932:	430a      	orrs	r2, r1
 8003934:	492a      	ldr	r1, [pc, #168]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003936:	4313      	orrs	r3, r2
 8003938:	610b      	str	r3, [r1, #16]
 800393a:	e027      	b.n	800398c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d112      	bne.n	8003968 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003942:	4b27      	ldr	r3, [pc, #156]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800394a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6892      	ldr	r2, [r2, #8]
 8003952:	0211      	lsls	r1, r2, #8
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6912      	ldr	r2, [r2, #16]
 8003958:	0852      	lsrs	r2, r2, #1
 800395a:	3a01      	subs	r2, #1
 800395c:	0552      	lsls	r2, r2, #21
 800395e:	430a      	orrs	r2, r1
 8003960:	491f      	ldr	r1, [pc, #124]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003962:	4313      	orrs	r3, r2
 8003964:	610b      	str	r3, [r1, #16]
 8003966:	e011      	b.n	800398c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003968:	4b1d      	ldr	r3, [pc, #116]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003970:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6892      	ldr	r2, [r2, #8]
 8003978:	0211      	lsls	r1, r2, #8
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6952      	ldr	r2, [r2, #20]
 800397e:	0852      	lsrs	r2, r2, #1
 8003980:	3a01      	subs	r2, #1
 8003982:	0652      	lsls	r2, r2, #25
 8003984:	430a      	orrs	r2, r1
 8003986:	4916      	ldr	r1, [pc, #88]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003988:	4313      	orrs	r3, r2
 800398a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800398c:	4b14      	ldr	r3, [pc, #80]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a13      	ldr	r2, [pc, #76]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003992:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003996:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003998:	f7fd fe4c 	bl	8001634 <HAL_GetTick>
 800399c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800399e:	e009      	b.n	80039b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039a0:	f7fd fe48 	bl	8001634 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d902      	bls.n	80039b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	73fb      	strb	r3, [r7, #15]
          break;
 80039b2:	e005      	b.n	80039c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039b4:	4b0a      	ldr	r3, [pc, #40]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0ef      	beq.n	80039a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039c6:	4b06      	ldr	r3, [pc, #24]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	4904      	ldr	r1, [pc, #16]	@ (80039e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40021000 	.word	0x40021000

080039e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039f2:	4b6a      	ldr	r3, [pc, #424]	@ (8003b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d018      	beq.n	8003a30 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039fe:	4b67      	ldr	r3, [pc, #412]	@ (8003b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f003 0203 	and.w	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d10d      	bne.n	8003a2a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
       ||
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a16:	4b61      	ldr	r3, [pc, #388]	@ (8003b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	091b      	lsrs	r3, r3, #4
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
       ||
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d047      	beq.n	8003aba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	73fb      	strb	r3, [r7, #15]
 8003a2e:	e044      	b.n	8003aba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d018      	beq.n	8003a6a <RCCEx_PLLSAI2_Config+0x86>
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d825      	bhi.n	8003a88 <RCCEx_PLLSAI2_Config+0xa4>
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d002      	beq.n	8003a46 <RCCEx_PLLSAI2_Config+0x62>
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d009      	beq.n	8003a58 <RCCEx_PLLSAI2_Config+0x74>
 8003a44:	e020      	b.n	8003a88 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a46:	4b55      	ldr	r3, [pc, #340]	@ (8003b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d11d      	bne.n	8003a8e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a56:	e01a      	b.n	8003a8e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a58:	4b50      	ldr	r3, [pc, #320]	@ (8003b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d116      	bne.n	8003a92 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a68:	e013      	b.n	8003a92 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a6a:	4b4c      	ldr	r3, [pc, #304]	@ (8003b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10f      	bne.n	8003a96 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a76:	4b49      	ldr	r3, [pc, #292]	@ (8003b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a86:	e006      	b.n	8003a96 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a8c:	e004      	b.n	8003a98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a8e:	bf00      	nop
 8003a90:	e002      	b.n	8003a98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a92:	bf00      	nop
 8003a94:	e000      	b.n	8003a98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a96:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10d      	bne.n	8003aba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6819      	ldr	r1, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	4939      	ldr	r1, [pc, #228]	@ (8003b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d167      	bne.n	8003b90 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ac0:	4b36      	ldr	r3, [pc, #216]	@ (8003b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a35      	ldr	r2, [pc, #212]	@ (8003b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003acc:	f7fd fdb2 	bl	8001634 <HAL_GetTick>
 8003ad0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ad2:	e009      	b.n	8003ae8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ad4:	f7fd fdae 	bl	8001634 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d902      	bls.n	8003ae8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ae6:	e005      	b.n	8003af4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ae8:	4b2c      	ldr	r3, [pc, #176]	@ (8003b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1ef      	bne.n	8003ad4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d14a      	bne.n	8003b90 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d111      	bne.n	8003b24 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b00:	4b26      	ldr	r3, [pc, #152]	@ (8003b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003b08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6892      	ldr	r2, [r2, #8]
 8003b10:	0211      	lsls	r1, r2, #8
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	68d2      	ldr	r2, [r2, #12]
 8003b16:	0912      	lsrs	r2, r2, #4
 8003b18:	0452      	lsls	r2, r2, #17
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	491f      	ldr	r1, [pc, #124]	@ (8003b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	614b      	str	r3, [r1, #20]
 8003b22:	e011      	b.n	8003b48 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b24:	4b1d      	ldr	r3, [pc, #116]	@ (8003b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003b2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6892      	ldr	r2, [r2, #8]
 8003b34:	0211      	lsls	r1, r2, #8
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6912      	ldr	r2, [r2, #16]
 8003b3a:	0852      	lsrs	r2, r2, #1
 8003b3c:	3a01      	subs	r2, #1
 8003b3e:	0652      	lsls	r2, r2, #25
 8003b40:	430a      	orrs	r2, r1
 8003b42:	4916      	ldr	r1, [pc, #88]	@ (8003b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b48:	4b14      	ldr	r3, [pc, #80]	@ (8003b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a13      	ldr	r2, [pc, #76]	@ (8003b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b54:	f7fd fd6e 	bl	8001634 <HAL_GetTick>
 8003b58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b5a:	e009      	b.n	8003b70 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b5c:	f7fd fd6a 	bl	8001634 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d902      	bls.n	8003b70 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	73fb      	strb	r3, [r7, #15]
          break;
 8003b6e:	e005      	b.n	8003b7c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b70:	4b0a      	ldr	r3, [pc, #40]	@ (8003b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0ef      	beq.n	8003b5c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b82:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b84:	695a      	ldr	r2, [r3, #20]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	4904      	ldr	r1, [pc, #16]	@ (8003b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000

08003ba0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e095      	b.n	8003cde <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d108      	bne.n	8003bcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bc2:	d009      	beq.n	8003bd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	61da      	str	r2, [r3, #28]
 8003bca:	e005      	b.n	8003bd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7fd fa7a 	bl	80010ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c18:	d902      	bls.n	8003c20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	e002      	b.n	8003c26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003c2e:	d007      	beq.n	8003c40 <HAL_SPI_Init+0xa0>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c38:	d002      	beq.n	8003c40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c50:	431a      	orrs	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c82:	ea42 0103 	orr.w	r1, r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	0c1b      	lsrs	r3, r3, #16
 8003c9c:	f003 0204 	and.w	r2, r3, #4
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	f003 0310 	and.w	r3, r3, #16
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003cbc:	ea42 0103 	orr.w	r1, r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e049      	b.n	8003d8c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d106      	bne.n	8003d12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f841 	bl	8003d94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2202      	movs	r2, #2
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3304      	adds	r3, #4
 8003d22:	4619      	mov	r1, r3
 8003d24:	4610      	mov	r0, r2
 8003d26:	f000 f9df 	bl	80040e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d001      	beq.n	8003dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e04f      	b.n	8003e60 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a23      	ldr	r2, [pc, #140]	@ (8003e6c <HAL_TIM_Base_Start_IT+0xc4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d01d      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0x76>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dea:	d018      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0x76>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e70 <HAL_TIM_Base_Start_IT+0xc8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d013      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0x76>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8003e74 <HAL_TIM_Base_Start_IT+0xcc>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00e      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0x76>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1c      	ldr	r2, [pc, #112]	@ (8003e78 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d009      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0x76>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8003e7c <HAL_TIM_Base_Start_IT+0xd4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d004      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0x76>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a19      	ldr	r2, [pc, #100]	@ (8003e80 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d115      	bne.n	8003e4a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	4b17      	ldr	r3, [pc, #92]	@ (8003e84 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b06      	cmp	r3, #6
 8003e2e:	d015      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0xb4>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e36:	d011      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e48:	e008      	b.n	8003e5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0201 	orr.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e000      	b.n	8003e5e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	40012c00 	.word	0x40012c00
 8003e70:	40000400 	.word	0x40000400
 8003e74:	40000800 	.word	0x40000800
 8003e78:	40000c00 	.word	0x40000c00
 8003e7c:	40013400 	.word	0x40013400
 8003e80:	40014000 	.word	0x40014000
 8003e84:	00010007 	.word	0x00010007

08003e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d020      	beq.n	8003eec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d01b      	beq.n	8003eec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0202 	mvn.w	r2, #2
 8003ebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f8e9 	bl	80040aa <HAL_TIM_IC_CaptureCallback>
 8003ed8:	e005      	b.n	8003ee6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f8db 	bl	8004096 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f8ec 	bl	80040be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d020      	beq.n	8003f38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01b      	beq.n	8003f38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0204 	mvn.w	r2, #4
 8003f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f8c3 	bl	80040aa <HAL_TIM_IC_CaptureCallback>
 8003f24:	e005      	b.n	8003f32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f8b5 	bl	8004096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f8c6 	bl	80040be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d020      	beq.n	8003f84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01b      	beq.n	8003f84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0208 	mvn.w	r2, #8
 8003f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2204      	movs	r2, #4
 8003f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f89d 	bl	80040aa <HAL_TIM_IC_CaptureCallback>
 8003f70:	e005      	b.n	8003f7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f88f 	bl	8004096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f8a0 	bl	80040be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d020      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01b      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f06f 0210 	mvn.w	r2, #16
 8003fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2208      	movs	r2, #8
 8003fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f877 	bl	80040aa <HAL_TIM_IC_CaptureCallback>
 8003fbc:	e005      	b.n	8003fca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f869 	bl	8004096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f87a 	bl	80040be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00c      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d007      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0201 	mvn.w	r2, #1
 8003fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fc ff36 	bl	8000e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d104      	bne.n	8004008 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00c      	beq.n	8004022 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800401a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f913 	bl	8004248 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00c      	beq.n	8004046 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004032:	2b00      	cmp	r3, #0
 8004034:	d007      	beq.n	8004046 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800403e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f90b 	bl	800425c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00c      	beq.n	800406a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004056:	2b00      	cmp	r3, #0
 8004058:	d007      	beq.n	800406a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f834 	bl	80040d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00c      	beq.n	800408e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	2b00      	cmp	r3, #0
 800407c:	d007      	beq.n	800408e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f06f 0220 	mvn.w	r2, #32
 8004086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f8d3 	bl	8004234 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
	...

080040e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a46      	ldr	r2, [pc, #280]	@ (8004214 <TIM_Base_SetConfig+0x12c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d013      	beq.n	8004128 <TIM_Base_SetConfig+0x40>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004106:	d00f      	beq.n	8004128 <TIM_Base_SetConfig+0x40>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a43      	ldr	r2, [pc, #268]	@ (8004218 <TIM_Base_SetConfig+0x130>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00b      	beq.n	8004128 <TIM_Base_SetConfig+0x40>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a42      	ldr	r2, [pc, #264]	@ (800421c <TIM_Base_SetConfig+0x134>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d007      	beq.n	8004128 <TIM_Base_SetConfig+0x40>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a41      	ldr	r2, [pc, #260]	@ (8004220 <TIM_Base_SetConfig+0x138>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d003      	beq.n	8004128 <TIM_Base_SetConfig+0x40>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a40      	ldr	r2, [pc, #256]	@ (8004224 <TIM_Base_SetConfig+0x13c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d108      	bne.n	800413a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800412e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a35      	ldr	r2, [pc, #212]	@ (8004214 <TIM_Base_SetConfig+0x12c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d01f      	beq.n	8004182 <TIM_Base_SetConfig+0x9a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004148:	d01b      	beq.n	8004182 <TIM_Base_SetConfig+0x9a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a32      	ldr	r2, [pc, #200]	@ (8004218 <TIM_Base_SetConfig+0x130>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d017      	beq.n	8004182 <TIM_Base_SetConfig+0x9a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a31      	ldr	r2, [pc, #196]	@ (800421c <TIM_Base_SetConfig+0x134>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d013      	beq.n	8004182 <TIM_Base_SetConfig+0x9a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a30      	ldr	r2, [pc, #192]	@ (8004220 <TIM_Base_SetConfig+0x138>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00f      	beq.n	8004182 <TIM_Base_SetConfig+0x9a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a2f      	ldr	r2, [pc, #188]	@ (8004224 <TIM_Base_SetConfig+0x13c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00b      	beq.n	8004182 <TIM_Base_SetConfig+0x9a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a2e      	ldr	r2, [pc, #184]	@ (8004228 <TIM_Base_SetConfig+0x140>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d007      	beq.n	8004182 <TIM_Base_SetConfig+0x9a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a2d      	ldr	r2, [pc, #180]	@ (800422c <TIM_Base_SetConfig+0x144>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d003      	beq.n	8004182 <TIM_Base_SetConfig+0x9a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a2c      	ldr	r2, [pc, #176]	@ (8004230 <TIM_Base_SetConfig+0x148>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d108      	bne.n	8004194 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	4313      	orrs	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	4313      	orrs	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a16      	ldr	r2, [pc, #88]	@ (8004214 <TIM_Base_SetConfig+0x12c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00f      	beq.n	80041e0 <TIM_Base_SetConfig+0xf8>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a18      	ldr	r2, [pc, #96]	@ (8004224 <TIM_Base_SetConfig+0x13c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00b      	beq.n	80041e0 <TIM_Base_SetConfig+0xf8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a17      	ldr	r2, [pc, #92]	@ (8004228 <TIM_Base_SetConfig+0x140>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d007      	beq.n	80041e0 <TIM_Base_SetConfig+0xf8>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a16      	ldr	r2, [pc, #88]	@ (800422c <TIM_Base_SetConfig+0x144>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d003      	beq.n	80041e0 <TIM_Base_SetConfig+0xf8>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a15      	ldr	r2, [pc, #84]	@ (8004230 <TIM_Base_SetConfig+0x148>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d103      	bne.n	80041e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d105      	bne.n	8004206 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f023 0201 	bic.w	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	611a      	str	r2, [r3, #16]
  }
}
 8004206:	bf00      	nop
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40012c00 	.word	0x40012c00
 8004218:	40000400 	.word	0x40000400
 800421c:	40000800 	.word	0x40000800
 8004220:	40000c00 	.word	0x40000c00
 8004224:	40013400 	.word	0x40013400
 8004228:	40014000 	.word	0x40014000
 800422c:	40014400 	.word	0x40014400
 8004230:	40014800 	.word	0x40014800

08004234 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e040      	b.n	8004304 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fc ff6e 	bl	8001174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2224      	movs	r2, #36	@ 0x24
 800429c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0201 	bic.w	r2, r2, #1
 80042ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fb6a 	bl	8004990 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f8af 	bl	8004420 <UART_SetConfig>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e01b      	b.n	8004304 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 fbe9 	bl	8004ad4 <UART_CheckIdleState>
 8004302:	4603      	mov	r3, r0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b08a      	sub	sp, #40	@ 0x28
 8004310:	af02      	add	r7, sp, #8
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	4613      	mov	r3, r2
 800431a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004320:	2b20      	cmp	r3, #32
 8004322:	d177      	bne.n	8004414 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_UART_Transmit+0x24>
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e070      	b.n	8004416 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2221      	movs	r2, #33	@ 0x21
 8004340:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004342:	f7fd f977 	bl	8001634 <HAL_GetTick>
 8004346:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	88fa      	ldrh	r2, [r7, #6]
 800434c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	88fa      	ldrh	r2, [r7, #6]
 8004354:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004360:	d108      	bne.n	8004374 <HAL_UART_Transmit+0x68>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d104      	bne.n	8004374 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800436a:	2300      	movs	r3, #0
 800436c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	e003      	b.n	800437c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004378:	2300      	movs	r3, #0
 800437a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800437c:	e02f      	b.n	80043de <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2200      	movs	r2, #0
 8004386:	2180      	movs	r1, #128	@ 0x80
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 fc4b 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d004      	beq.n	800439e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e03b      	b.n	8004416 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10b      	bne.n	80043bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	881a      	ldrh	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043b0:	b292      	uxth	r2, r2
 80043b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	3302      	adds	r3, #2
 80043b8:	61bb      	str	r3, [r7, #24]
 80043ba:	e007      	b.n	80043cc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	781a      	ldrb	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	3301      	adds	r3, #1
 80043ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1c9      	bne.n	800437e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2200      	movs	r2, #0
 80043f2:	2140      	movs	r1, #64	@ 0x40
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 fc15 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d004      	beq.n	800440a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e005      	b.n	8004416 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2220      	movs	r2, #32
 800440e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004410:	2300      	movs	r3, #0
 8004412:	e000      	b.n	8004416 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004414:	2302      	movs	r3, #2
  }
}
 8004416:	4618      	mov	r0, r3
 8004418:	3720      	adds	r7, #32
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004424:	b08a      	sub	sp, #40	@ 0x28
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	431a      	orrs	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	431a      	orrs	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	4313      	orrs	r3, r2
 8004446:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	4ba4      	ldr	r3, [pc, #656]	@ (80046e0 <UART_SetConfig+0x2c0>)
 8004450:	4013      	ands	r3, r2
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004458:	430b      	orrs	r3, r1
 800445a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a99      	ldr	r2, [pc, #612]	@ (80046e4 <UART_SetConfig+0x2c4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d004      	beq.n	800448c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004488:	4313      	orrs	r3, r2
 800448a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800449c:	430a      	orrs	r2, r1
 800449e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a90      	ldr	r2, [pc, #576]	@ (80046e8 <UART_SetConfig+0x2c8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d126      	bne.n	80044f8 <UART_SetConfig+0xd8>
 80044aa:	4b90      	ldr	r3, [pc, #576]	@ (80046ec <UART_SetConfig+0x2cc>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d81b      	bhi.n	80044f0 <UART_SetConfig+0xd0>
 80044b8:	a201      	add	r2, pc, #4	@ (adr r2, 80044c0 <UART_SetConfig+0xa0>)
 80044ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044be:	bf00      	nop
 80044c0:	080044d1 	.word	0x080044d1
 80044c4:	080044e1 	.word	0x080044e1
 80044c8:	080044d9 	.word	0x080044d9
 80044cc:	080044e9 	.word	0x080044e9
 80044d0:	2301      	movs	r3, #1
 80044d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044d6:	e116      	b.n	8004706 <UART_SetConfig+0x2e6>
 80044d8:	2302      	movs	r3, #2
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044de:	e112      	b.n	8004706 <UART_SetConfig+0x2e6>
 80044e0:	2304      	movs	r3, #4
 80044e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044e6:	e10e      	b.n	8004706 <UART_SetConfig+0x2e6>
 80044e8:	2308      	movs	r3, #8
 80044ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ee:	e10a      	b.n	8004706 <UART_SetConfig+0x2e6>
 80044f0:	2310      	movs	r3, #16
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044f6:	e106      	b.n	8004706 <UART_SetConfig+0x2e6>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a7c      	ldr	r2, [pc, #496]	@ (80046f0 <UART_SetConfig+0x2d0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d138      	bne.n	8004574 <UART_SetConfig+0x154>
 8004502:	4b7a      	ldr	r3, [pc, #488]	@ (80046ec <UART_SetConfig+0x2cc>)
 8004504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004508:	f003 030c 	and.w	r3, r3, #12
 800450c:	2b0c      	cmp	r3, #12
 800450e:	d82d      	bhi.n	800456c <UART_SetConfig+0x14c>
 8004510:	a201      	add	r2, pc, #4	@ (adr r2, 8004518 <UART_SetConfig+0xf8>)
 8004512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004516:	bf00      	nop
 8004518:	0800454d 	.word	0x0800454d
 800451c:	0800456d 	.word	0x0800456d
 8004520:	0800456d 	.word	0x0800456d
 8004524:	0800456d 	.word	0x0800456d
 8004528:	0800455d 	.word	0x0800455d
 800452c:	0800456d 	.word	0x0800456d
 8004530:	0800456d 	.word	0x0800456d
 8004534:	0800456d 	.word	0x0800456d
 8004538:	08004555 	.word	0x08004555
 800453c:	0800456d 	.word	0x0800456d
 8004540:	0800456d 	.word	0x0800456d
 8004544:	0800456d 	.word	0x0800456d
 8004548:	08004565 	.word	0x08004565
 800454c:	2300      	movs	r3, #0
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004552:	e0d8      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004554:	2302      	movs	r3, #2
 8004556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800455a:	e0d4      	b.n	8004706 <UART_SetConfig+0x2e6>
 800455c:	2304      	movs	r3, #4
 800455e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004562:	e0d0      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004564:	2308      	movs	r3, #8
 8004566:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800456a:	e0cc      	b.n	8004706 <UART_SetConfig+0x2e6>
 800456c:	2310      	movs	r3, #16
 800456e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004572:	e0c8      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a5e      	ldr	r2, [pc, #376]	@ (80046f4 <UART_SetConfig+0x2d4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d125      	bne.n	80045ca <UART_SetConfig+0x1aa>
 800457e:	4b5b      	ldr	r3, [pc, #364]	@ (80046ec <UART_SetConfig+0x2cc>)
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004584:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004588:	2b30      	cmp	r3, #48	@ 0x30
 800458a:	d016      	beq.n	80045ba <UART_SetConfig+0x19a>
 800458c:	2b30      	cmp	r3, #48	@ 0x30
 800458e:	d818      	bhi.n	80045c2 <UART_SetConfig+0x1a2>
 8004590:	2b20      	cmp	r3, #32
 8004592:	d00a      	beq.n	80045aa <UART_SetConfig+0x18a>
 8004594:	2b20      	cmp	r3, #32
 8004596:	d814      	bhi.n	80045c2 <UART_SetConfig+0x1a2>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <UART_SetConfig+0x182>
 800459c:	2b10      	cmp	r3, #16
 800459e:	d008      	beq.n	80045b2 <UART_SetConfig+0x192>
 80045a0:	e00f      	b.n	80045c2 <UART_SetConfig+0x1a2>
 80045a2:	2300      	movs	r3, #0
 80045a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045a8:	e0ad      	b.n	8004706 <UART_SetConfig+0x2e6>
 80045aa:	2302      	movs	r3, #2
 80045ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045b0:	e0a9      	b.n	8004706 <UART_SetConfig+0x2e6>
 80045b2:	2304      	movs	r3, #4
 80045b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045b8:	e0a5      	b.n	8004706 <UART_SetConfig+0x2e6>
 80045ba:	2308      	movs	r3, #8
 80045bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c0:	e0a1      	b.n	8004706 <UART_SetConfig+0x2e6>
 80045c2:	2310      	movs	r3, #16
 80045c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c8:	e09d      	b.n	8004706 <UART_SetConfig+0x2e6>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a4a      	ldr	r2, [pc, #296]	@ (80046f8 <UART_SetConfig+0x2d8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d125      	bne.n	8004620 <UART_SetConfig+0x200>
 80045d4:	4b45      	ldr	r3, [pc, #276]	@ (80046ec <UART_SetConfig+0x2cc>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80045de:	2bc0      	cmp	r3, #192	@ 0xc0
 80045e0:	d016      	beq.n	8004610 <UART_SetConfig+0x1f0>
 80045e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80045e4:	d818      	bhi.n	8004618 <UART_SetConfig+0x1f8>
 80045e6:	2b80      	cmp	r3, #128	@ 0x80
 80045e8:	d00a      	beq.n	8004600 <UART_SetConfig+0x1e0>
 80045ea:	2b80      	cmp	r3, #128	@ 0x80
 80045ec:	d814      	bhi.n	8004618 <UART_SetConfig+0x1f8>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <UART_SetConfig+0x1d8>
 80045f2:	2b40      	cmp	r3, #64	@ 0x40
 80045f4:	d008      	beq.n	8004608 <UART_SetConfig+0x1e8>
 80045f6:	e00f      	b.n	8004618 <UART_SetConfig+0x1f8>
 80045f8:	2300      	movs	r3, #0
 80045fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045fe:	e082      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004600:	2302      	movs	r3, #2
 8004602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004606:	e07e      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004608:	2304      	movs	r3, #4
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800460e:	e07a      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004610:	2308      	movs	r3, #8
 8004612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004616:	e076      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004618:	2310      	movs	r3, #16
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800461e:	e072      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a35      	ldr	r2, [pc, #212]	@ (80046fc <UART_SetConfig+0x2dc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d12a      	bne.n	8004680 <UART_SetConfig+0x260>
 800462a:	4b30      	ldr	r3, [pc, #192]	@ (80046ec <UART_SetConfig+0x2cc>)
 800462c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004630:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004634:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004638:	d01a      	beq.n	8004670 <UART_SetConfig+0x250>
 800463a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800463e:	d81b      	bhi.n	8004678 <UART_SetConfig+0x258>
 8004640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004644:	d00c      	beq.n	8004660 <UART_SetConfig+0x240>
 8004646:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800464a:	d815      	bhi.n	8004678 <UART_SetConfig+0x258>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <UART_SetConfig+0x238>
 8004650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004654:	d008      	beq.n	8004668 <UART_SetConfig+0x248>
 8004656:	e00f      	b.n	8004678 <UART_SetConfig+0x258>
 8004658:	2300      	movs	r3, #0
 800465a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800465e:	e052      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004660:	2302      	movs	r3, #2
 8004662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004666:	e04e      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004668:	2304      	movs	r3, #4
 800466a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800466e:	e04a      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004670:	2308      	movs	r3, #8
 8004672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004676:	e046      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004678:	2310      	movs	r3, #16
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800467e:	e042      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a17      	ldr	r2, [pc, #92]	@ (80046e4 <UART_SetConfig+0x2c4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d13a      	bne.n	8004700 <UART_SetConfig+0x2e0>
 800468a:	4b18      	ldr	r3, [pc, #96]	@ (80046ec <UART_SetConfig+0x2cc>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004690:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004694:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004698:	d01a      	beq.n	80046d0 <UART_SetConfig+0x2b0>
 800469a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800469e:	d81b      	bhi.n	80046d8 <UART_SetConfig+0x2b8>
 80046a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046a4:	d00c      	beq.n	80046c0 <UART_SetConfig+0x2a0>
 80046a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046aa:	d815      	bhi.n	80046d8 <UART_SetConfig+0x2b8>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <UART_SetConfig+0x298>
 80046b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046b4:	d008      	beq.n	80046c8 <UART_SetConfig+0x2a8>
 80046b6:	e00f      	b.n	80046d8 <UART_SetConfig+0x2b8>
 80046b8:	2300      	movs	r3, #0
 80046ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046be:	e022      	b.n	8004706 <UART_SetConfig+0x2e6>
 80046c0:	2302      	movs	r3, #2
 80046c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046c6:	e01e      	b.n	8004706 <UART_SetConfig+0x2e6>
 80046c8:	2304      	movs	r3, #4
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ce:	e01a      	b.n	8004706 <UART_SetConfig+0x2e6>
 80046d0:	2308      	movs	r3, #8
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d6:	e016      	b.n	8004706 <UART_SetConfig+0x2e6>
 80046d8:	2310      	movs	r3, #16
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046de:	e012      	b.n	8004706 <UART_SetConfig+0x2e6>
 80046e0:	efff69f3 	.word	0xefff69f3
 80046e4:	40008000 	.word	0x40008000
 80046e8:	40013800 	.word	0x40013800
 80046ec:	40021000 	.word	0x40021000
 80046f0:	40004400 	.word	0x40004400
 80046f4:	40004800 	.word	0x40004800
 80046f8:	40004c00 	.word	0x40004c00
 80046fc:	40005000 	.word	0x40005000
 8004700:	2310      	movs	r3, #16
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a9f      	ldr	r2, [pc, #636]	@ (8004988 <UART_SetConfig+0x568>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d17a      	bne.n	8004806 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004710:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004714:	2b08      	cmp	r3, #8
 8004716:	d824      	bhi.n	8004762 <UART_SetConfig+0x342>
 8004718:	a201      	add	r2, pc, #4	@ (adr r2, 8004720 <UART_SetConfig+0x300>)
 800471a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471e:	bf00      	nop
 8004720:	08004745 	.word	0x08004745
 8004724:	08004763 	.word	0x08004763
 8004728:	0800474d 	.word	0x0800474d
 800472c:	08004763 	.word	0x08004763
 8004730:	08004753 	.word	0x08004753
 8004734:	08004763 	.word	0x08004763
 8004738:	08004763 	.word	0x08004763
 800473c:	08004763 	.word	0x08004763
 8004740:	0800475b 	.word	0x0800475b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004744:	f7fe fca2 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 8004748:	61f8      	str	r0, [r7, #28]
        break;
 800474a:	e010      	b.n	800476e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800474c:	4b8f      	ldr	r3, [pc, #572]	@ (800498c <UART_SetConfig+0x56c>)
 800474e:	61fb      	str	r3, [r7, #28]
        break;
 8004750:	e00d      	b.n	800476e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004752:	f7fe fc03 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 8004756:	61f8      	str	r0, [r7, #28]
        break;
 8004758:	e009      	b.n	800476e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800475a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800475e:	61fb      	str	r3, [r7, #28]
        break;
 8004760:	e005      	b.n	800476e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800476c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 80fb 	beq.w	800496c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	4413      	add	r3, r2
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	429a      	cmp	r2, r3
 8004784:	d305      	bcc.n	8004792 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800478c:	69fa      	ldr	r2, [r7, #28]
 800478e:	429a      	cmp	r2, r3
 8004790:	d903      	bls.n	800479a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004798:	e0e8      	b.n	800496c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	2200      	movs	r2, #0
 800479e:	461c      	mov	r4, r3
 80047a0:	4615      	mov	r5, r2
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	022b      	lsls	r3, r5, #8
 80047ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80047b0:	0222      	lsls	r2, r4, #8
 80047b2:	68f9      	ldr	r1, [r7, #12]
 80047b4:	6849      	ldr	r1, [r1, #4]
 80047b6:	0849      	lsrs	r1, r1, #1
 80047b8:	2000      	movs	r0, #0
 80047ba:	4688      	mov	r8, r1
 80047bc:	4681      	mov	r9, r0
 80047be:	eb12 0a08 	adds.w	sl, r2, r8
 80047c2:	eb43 0b09 	adc.w	fp, r3, r9
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047d4:	4650      	mov	r0, sl
 80047d6:	4659      	mov	r1, fp
 80047d8:	f7fb fd4a 	bl	8000270 <__aeabi_uldivmod>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4613      	mov	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047ea:	d308      	bcc.n	80047fe <UART_SetConfig+0x3de>
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047f2:	d204      	bcs.n	80047fe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	60da      	str	r2, [r3, #12]
 80047fc:	e0b6      	b.n	800496c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004804:	e0b2      	b.n	800496c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800480e:	d15e      	bne.n	80048ce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004810:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004814:	2b08      	cmp	r3, #8
 8004816:	d828      	bhi.n	800486a <UART_SetConfig+0x44a>
 8004818:	a201      	add	r2, pc, #4	@ (adr r2, 8004820 <UART_SetConfig+0x400>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004845 	.word	0x08004845
 8004824:	0800484d 	.word	0x0800484d
 8004828:	08004855 	.word	0x08004855
 800482c:	0800486b 	.word	0x0800486b
 8004830:	0800485b 	.word	0x0800485b
 8004834:	0800486b 	.word	0x0800486b
 8004838:	0800486b 	.word	0x0800486b
 800483c:	0800486b 	.word	0x0800486b
 8004840:	08004863 	.word	0x08004863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004844:	f7fe fc22 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 8004848:	61f8      	str	r0, [r7, #28]
        break;
 800484a:	e014      	b.n	8004876 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800484c:	f7fe fc34 	bl	80030b8 <HAL_RCC_GetPCLK2Freq>
 8004850:	61f8      	str	r0, [r7, #28]
        break;
 8004852:	e010      	b.n	8004876 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004854:	4b4d      	ldr	r3, [pc, #308]	@ (800498c <UART_SetConfig+0x56c>)
 8004856:	61fb      	str	r3, [r7, #28]
        break;
 8004858:	e00d      	b.n	8004876 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800485a:	f7fe fb7f 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 800485e:	61f8      	str	r0, [r7, #28]
        break;
 8004860:	e009      	b.n	8004876 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004862:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004866:	61fb      	str	r3, [r7, #28]
        break;
 8004868:	e005      	b.n	8004876 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004874:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d077      	beq.n	800496c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	005a      	lsls	r2, r3, #1
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	441a      	add	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004890:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2b0f      	cmp	r3, #15
 8004896:	d916      	bls.n	80048c6 <UART_SetConfig+0x4a6>
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800489e:	d212      	bcs.n	80048c6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	f023 030f 	bic.w	r3, r3, #15
 80048a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	8afb      	ldrh	r3, [r7, #22]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	8afa      	ldrh	r2, [r7, #22]
 80048c2:	60da      	str	r2, [r3, #12]
 80048c4:	e052      	b.n	800496c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048cc:	e04e      	b.n	800496c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d827      	bhi.n	8004926 <UART_SetConfig+0x506>
 80048d6:	a201      	add	r2, pc, #4	@ (adr r2, 80048dc <UART_SetConfig+0x4bc>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	08004901 	.word	0x08004901
 80048e0:	08004909 	.word	0x08004909
 80048e4:	08004911 	.word	0x08004911
 80048e8:	08004927 	.word	0x08004927
 80048ec:	08004917 	.word	0x08004917
 80048f0:	08004927 	.word	0x08004927
 80048f4:	08004927 	.word	0x08004927
 80048f8:	08004927 	.word	0x08004927
 80048fc:	0800491f 	.word	0x0800491f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004900:	f7fe fbc4 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 8004904:	61f8      	str	r0, [r7, #28]
        break;
 8004906:	e014      	b.n	8004932 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004908:	f7fe fbd6 	bl	80030b8 <HAL_RCC_GetPCLK2Freq>
 800490c:	61f8      	str	r0, [r7, #28]
        break;
 800490e:	e010      	b.n	8004932 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004910:	4b1e      	ldr	r3, [pc, #120]	@ (800498c <UART_SetConfig+0x56c>)
 8004912:	61fb      	str	r3, [r7, #28]
        break;
 8004914:	e00d      	b.n	8004932 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004916:	f7fe fb21 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 800491a:	61f8      	str	r0, [r7, #28]
        break;
 800491c:	e009      	b.n	8004932 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800491e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004922:	61fb      	str	r3, [r7, #28]
        break;
 8004924:	e005      	b.n	8004932 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004930:	bf00      	nop
    }

    if (pclk != 0U)
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d019      	beq.n	800496c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	085a      	lsrs	r2, r3, #1
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	441a      	add	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	fbb2 f3f3 	udiv	r3, r2, r3
 800494a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2b0f      	cmp	r3, #15
 8004950:	d909      	bls.n	8004966 <UART_SetConfig+0x546>
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004958:	d205      	bcs.n	8004966 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60da      	str	r2, [r3, #12]
 8004964:	e002      	b.n	800496c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004978:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800497c:	4618      	mov	r0, r3
 800497e:	3728      	adds	r7, #40	@ 0x28
 8004980:	46bd      	mov	sp, r7
 8004982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004986:	bf00      	nop
 8004988:	40008000 	.word	0x40008000
 800498c:	00f42400 	.word	0x00f42400

08004990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a02:	f003 0304 	and.w	r3, r3, #4
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a24:	f003 0310 	and.w	r3, r3, #16
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01a      	beq.n	8004aa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a8e:	d10a      	bne.n	8004aa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	605a      	str	r2, [r3, #4]
  }
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b098      	sub	sp, #96	@ 0x60
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ae4:	f7fc fda6 	bl	8001634 <HAL_GetTick>
 8004ae8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d12e      	bne.n	8004b56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004af8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b00:	2200      	movs	r2, #0
 8004b02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f88c 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d021      	beq.n	8004b56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b1a:	e853 3f00 	ldrex	r3, [r3]
 8004b1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b26:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b32:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e6      	bne.n	8004b12 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e062      	b.n	8004c1c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d149      	bne.n	8004bf8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f856 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d03c      	beq.n	8004bf8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	623b      	str	r3, [r7, #32]
   return(result);
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ba2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e6      	bne.n	8004b7e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3308      	adds	r3, #8
 8004bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	e853 3f00 	ldrex	r3, [r3]
 8004bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0301 	bic.w	r3, r3, #1
 8004bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3308      	adds	r3, #8
 8004bce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bd0:	61fa      	str	r2, [r7, #28]
 8004bd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	69b9      	ldr	r1, [r7, #24]
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	e841 2300 	strex	r3, r2, [r1]
 8004bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e5      	bne.n	8004bb0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e011      	b.n	8004c1c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3758      	adds	r7, #88	@ 0x58
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c34:	e04f      	b.n	8004cd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3c:	d04b      	beq.n	8004cd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c3e:	f7fc fcf9 	bl	8001634 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d302      	bcc.n	8004c54 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e04e      	b.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d037      	beq.n	8004cd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2b80      	cmp	r3, #128	@ 0x80
 8004c6a:	d034      	beq.n	8004cd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2b40      	cmp	r3, #64	@ 0x40
 8004c70:	d031      	beq.n	8004cd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d110      	bne.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2208      	movs	r2, #8
 8004c86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 f838 	bl	8004cfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2208      	movs	r2, #8
 8004c92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e029      	b.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cb0:	d111      	bne.n	8004cd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004cba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 f81e 	bl	8004cfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e00f      	b.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69da      	ldr	r2, [r3, #28]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	bf0c      	ite	eq
 8004ce6:	2301      	moveq	r3, #1
 8004ce8:	2300      	movne	r3, #0
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	461a      	mov	r2, r3
 8004cee:	79fb      	ldrb	r3, [r7, #7]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d0a0      	beq.n	8004c36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b095      	sub	sp, #84	@ 0x54
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d0e:	e853 3f00 	ldrex	r3, [r3]
 8004d12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d24:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d26:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d2c:	e841 2300 	strex	r3, r2, [r1]
 8004d30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1e6      	bne.n	8004d06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	f023 0301 	bic.w	r3, r3, #1
 8004d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3308      	adds	r3, #8
 8004d56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e5      	bne.n	8004d38 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d118      	bne.n	8004da6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	e853 3f00 	ldrex	r3, [r3]
 8004d80:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f023 0310 	bic.w	r3, r3, #16
 8004d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d92:	61bb      	str	r3, [r7, #24]
 8004d94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	6979      	ldr	r1, [r7, #20]
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1e6      	bne.n	8004d74 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004dba:	bf00      	nop
 8004dbc:	3754      	adds	r7, #84	@ 0x54
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	f107 001c 	add.w	r0, r7, #28
 8004dd4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 fa69 	bl	80052bc <USB_CoreReset>
 8004dea:	4603      	mov	r3, r0
 8004dec:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004dee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dfa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e02:	e005      	b.n	8004e10 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e08:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e1c:	b004      	add	sp, #16
 8004e1e:	4770      	bx	lr

08004e20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f023 0201 	bic.w	r2, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b084      	sub	sp, #16
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e5e:	78fb      	ldrb	r3, [r7, #3]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d115      	bne.n	8004e90 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004e70:	200a      	movs	r0, #10
 8004e72:	f7fc fbeb 	bl	800164c <HAL_Delay>
      ms += 10U;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	330a      	adds	r3, #10
 8004e7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fa0f 	bl	80052a0 <USB_GetMode>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d01e      	beq.n	8004ec6 <USB_SetCurrentMode+0x84>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2bc7      	cmp	r3, #199	@ 0xc7
 8004e8c:	d9f0      	bls.n	8004e70 <USB_SetCurrentMode+0x2e>
 8004e8e:	e01a      	b.n	8004ec6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e90:	78fb      	ldrb	r3, [r7, #3]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d115      	bne.n	8004ec2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ea2:	200a      	movs	r0, #10
 8004ea4:	f7fc fbd2 	bl	800164c <HAL_Delay>
      ms += 10U;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	330a      	adds	r3, #10
 8004eac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f9f6 	bl	80052a0 <USB_GetMode>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d005      	beq.n	8004ec6 <USB_SetCurrentMode+0x84>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2bc7      	cmp	r3, #199	@ 0xc7
 8004ebe:	d9f0      	bls.n	8004ea2 <USB_SetCurrentMode+0x60>
 8004ec0:	e001      	b.n	8004ec6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e005      	b.n	8004ed2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2bc8      	cmp	r3, #200	@ 0xc8
 8004eca:	d101      	bne.n	8004ed0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004edc:	b084      	sub	sp, #16
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b086      	sub	sp, #24
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004eea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	613b      	str	r3, [r7, #16]
 8004efa:	e009      	b.n	8004f10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	3340      	adds	r3, #64	@ 0x40
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	2200      	movs	r2, #0
 8004f08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	613b      	str	r3, [r7, #16]
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	2b0e      	cmp	r3, #14
 8004f14:	d9f2      	bls.n	8004efc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f16:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d11c      	bne.n	8004f58 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f2c:	f043 0302 	orr.w	r3, r3, #2
 8004f30:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f36:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	e005      	b.n	8004f64 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f70:	2103      	movs	r1, #3
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f95a 	bl	800522c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f78:	2110      	movs	r1, #16
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f8f6 	bl	800516c <USB_FlushTxFifo>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f920 	bl	80051d0 <USB_FlushRxFifo>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fac:	461a      	mov	r2, r3
 8004fae:	2300      	movs	r3, #0
 8004fb0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb8:	461a      	mov	r2, r3
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	e043      	b.n	800504c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fda:	d118      	bne.n	800500e <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10a      	bne.n	8004ff8 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	e013      	b.n	8005020 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005004:	461a      	mov	r2, r3
 8005006:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	e008      	b.n	8005020 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	4413      	add	r3, r2
 8005016:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800501a:	461a      	mov	r2, r3
 800501c:	2300      	movs	r3, #0
 800501e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800502c:	461a      	mov	r2, r3
 800502e:	2300      	movs	r3, #0
 8005030:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800503e:	461a      	mov	r2, r3
 8005040:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005044:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	3301      	adds	r3, #1
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005050:	461a      	mov	r2, r3
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	4293      	cmp	r3, r2
 8005056:	d3b5      	bcc.n	8004fc4 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005058:	2300      	movs	r3, #0
 800505a:	613b      	str	r3, [r7, #16]
 800505c:	e043      	b.n	80050e6 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005070:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005074:	d118      	bne.n	80050a8 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10a      	bne.n	8005092 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005088:	461a      	mov	r2, r3
 800508a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	e013      	b.n	80050ba <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4413      	add	r3, r2
 800509a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800509e:	461a      	mov	r2, r3
 80050a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	e008      	b.n	80050ba <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050b4:	461a      	mov	r2, r3
 80050b6:	2300      	movs	r3, #0
 80050b8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c6:	461a      	mov	r2, r3
 80050c8:	2300      	movs	r3, #0
 80050ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050d8:	461a      	mov	r2, r3
 80050da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80050de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	3301      	adds	r3, #1
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80050ea:	461a      	mov	r2, r3
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d3b5      	bcc.n	800505e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005104:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005112:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	f043 0210 	orr.w	r2, r3, #16
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	699a      	ldr	r2, [r3, #24]
 8005124:	4b10      	ldr	r3, [pc, #64]	@ (8005168 <USB_DevInit+0x28c>)
 8005126:	4313      	orrs	r3, r2
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800512c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005130:	2b00      	cmp	r3, #0
 8005132:	d005      	beq.n	8005140 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	f043 0208 	orr.w	r2, r3, #8
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005140:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005144:	2b01      	cmp	r3, #1
 8005146:	d107      	bne.n	8005158 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005150:	f043 0304 	orr.w	r3, r3, #4
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005158:	7dfb      	ldrb	r3, [r7, #23]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005164:	b004      	add	sp, #16
 8005166:	4770      	bx	lr
 8005168:	803c3800 	.word	0x803c3800

0800516c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	3301      	adds	r3, #1
 800517e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005186:	d901      	bls.n	800518c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e01b      	b.n	80051c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	daf2      	bge.n	800517a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	019b      	lsls	r3, r3, #6
 800519c:	f043 0220 	orr.w	r2, r3, #32
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	3301      	adds	r3, #1
 80051a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051b0:	d901      	bls.n	80051b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e006      	b.n	80051c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f003 0320 	and.w	r3, r3, #32
 80051be:	2b20      	cmp	r3, #32
 80051c0:	d0f0      	beq.n	80051a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3301      	adds	r3, #1
 80051e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051e8:	d901      	bls.n	80051ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e018      	b.n	8005220 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	daf2      	bge.n	80051dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2210      	movs	r2, #16
 80051fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3301      	adds	r3, #1
 8005204:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800520c:	d901      	bls.n	8005212 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e006      	b.n	8005220 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b10      	cmp	r3, #16
 800521c:	d0f0      	beq.n	8005200 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	460b      	mov	r3, r1
 8005236:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	78fb      	ldrb	r3, [r7, #3]
 8005246:	68f9      	ldr	r1, [r7, #12]
 8005248:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800524c:	4313      	orrs	r3, r2
 800524e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800525e:	b480      	push	{r7}
 8005260:	b085      	sub	sp, #20
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005278:	f023 0303 	bic.w	r3, r3, #3
 800527c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800528c:	f043 0302 	orr.w	r3, r3, #2
 8005290:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	f003 0301 	and.w	r3, r3, #1
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3301      	adds	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052d4:	d901      	bls.n	80052da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e01b      	b.n	8005312 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	daf2      	bge.n	80052c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f043 0201 	orr.w	r2, r3, #1
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3301      	adds	r3, #1
 80052f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052fe:	d901      	bls.n	8005304 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e006      	b.n	8005312 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b01      	cmp	r3, #1
 800530e:	d0f0      	beq.n	80052f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
	...

08005320 <__NVIC_SetPriority>:
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	6039      	str	r1, [r7, #0]
 800532a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800532c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005330:	2b00      	cmp	r3, #0
 8005332:	db0a      	blt.n	800534a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	b2da      	uxtb	r2, r3
 8005338:	490c      	ldr	r1, [pc, #48]	@ (800536c <__NVIC_SetPriority+0x4c>)
 800533a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800533e:	0112      	lsls	r2, r2, #4
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	440b      	add	r3, r1
 8005344:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005348:	e00a      	b.n	8005360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	b2da      	uxtb	r2, r3
 800534e:	4908      	ldr	r1, [pc, #32]	@ (8005370 <__NVIC_SetPriority+0x50>)
 8005350:	79fb      	ldrb	r3, [r7, #7]
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	3b04      	subs	r3, #4
 8005358:	0112      	lsls	r2, r2, #4
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	440b      	add	r3, r1
 800535e:	761a      	strb	r2, [r3, #24]
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	e000e100 	.word	0xe000e100
 8005370:	e000ed00 	.word	0xe000ed00

08005374 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005378:	4b05      	ldr	r3, [pc, #20]	@ (8005390 <SysTick_Handler+0x1c>)
 800537a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800537c:	f002 f85e 	bl	800743c <xTaskGetSchedulerState>
 8005380:	4603      	mov	r3, r0
 8005382:	2b01      	cmp	r3, #1
 8005384:	d001      	beq.n	800538a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005386:	f003 f937 	bl	80085f8 <xPortSysTickHandler>
  }
}
 800538a:	bf00      	nop
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	e000e010 	.word	0xe000e010

08005394 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005398:	2100      	movs	r1, #0
 800539a:	f06f 0004 	mvn.w	r0, #4
 800539e:	f7ff ffbf 	bl	8005320 <__NVIC_SetPriority>
#endif
}
 80053a2:	bf00      	nop
 80053a4:	bd80      	pop	{r7, pc}
	...

080053a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053ae:	f3ef 8305 	mrs	r3, IPSR
 80053b2:	603b      	str	r3, [r7, #0]
  return(result);
 80053b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80053ba:	f06f 0305 	mvn.w	r3, #5
 80053be:	607b      	str	r3, [r7, #4]
 80053c0:	e00c      	b.n	80053dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80053c2:	4b0a      	ldr	r3, [pc, #40]	@ (80053ec <osKernelInitialize+0x44>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d105      	bne.n	80053d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80053ca:	4b08      	ldr	r3, [pc, #32]	@ (80053ec <osKernelInitialize+0x44>)
 80053cc:	2201      	movs	r2, #1
 80053ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053d0:	2300      	movs	r3, #0
 80053d2:	607b      	str	r3, [r7, #4]
 80053d4:	e002      	b.n	80053dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80053d6:	f04f 33ff 	mov.w	r3, #4294967295
 80053da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053dc:	687b      	ldr	r3, [r7, #4]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	200007b8 	.word	0x200007b8

080053f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053f6:	f3ef 8305 	mrs	r3, IPSR
 80053fa:	603b      	str	r3, [r7, #0]
  return(result);
 80053fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005402:	f06f 0305 	mvn.w	r3, #5
 8005406:	607b      	str	r3, [r7, #4]
 8005408:	e010      	b.n	800542c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800540a:	4b0b      	ldr	r3, [pc, #44]	@ (8005438 <osKernelStart+0x48>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d109      	bne.n	8005426 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005412:	f7ff ffbf 	bl	8005394 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005416:	4b08      	ldr	r3, [pc, #32]	@ (8005438 <osKernelStart+0x48>)
 8005418:	2202      	movs	r2, #2
 800541a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800541c:	f001 fbc0 	bl	8006ba0 <vTaskStartScheduler>
      stat = osOK;
 8005420:	2300      	movs	r3, #0
 8005422:	607b      	str	r3, [r7, #4]
 8005424:	e002      	b.n	800542c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005426:	f04f 33ff 	mov.w	r3, #4294967295
 800542a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800542c:	687b      	ldr	r3, [r7, #4]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	200007b8 	.word	0x200007b8

0800543c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800543c:	b580      	push	{r7, lr}
 800543e:	b08e      	sub	sp, #56	@ 0x38
 8005440:	af04      	add	r7, sp, #16
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005448:	2300      	movs	r3, #0
 800544a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800544c:	f3ef 8305 	mrs	r3, IPSR
 8005450:	617b      	str	r3, [r7, #20]
  return(result);
 8005452:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005454:	2b00      	cmp	r3, #0
 8005456:	d17e      	bne.n	8005556 <osThreadNew+0x11a>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d07b      	beq.n	8005556 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800545e:	2380      	movs	r3, #128	@ 0x80
 8005460:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005462:	2318      	movs	r3, #24
 8005464:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005466:	2300      	movs	r3, #0
 8005468:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800546a:	f04f 33ff 	mov.w	r3, #4294967295
 800546e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d045      	beq.n	8005502 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <osThreadNew+0x48>
        name = attr->name;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d008      	beq.n	80054aa <osThreadNew+0x6e>
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	2b38      	cmp	r3, #56	@ 0x38
 800549c:	d805      	bhi.n	80054aa <osThreadNew+0x6e>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <osThreadNew+0x72>
        return (NULL);
 80054aa:	2300      	movs	r3, #0
 80054ac:	e054      	b.n	8005558 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	089b      	lsrs	r3, r3, #2
 80054bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00e      	beq.n	80054e4 <osThreadNew+0xa8>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	2b5b      	cmp	r3, #91	@ 0x5b
 80054cc:	d90a      	bls.n	80054e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d006      	beq.n	80054e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <osThreadNew+0xa8>
        mem = 1;
 80054de:	2301      	movs	r3, #1
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	e010      	b.n	8005506 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10c      	bne.n	8005506 <osThreadNew+0xca>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d108      	bne.n	8005506 <osThreadNew+0xca>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d104      	bne.n	8005506 <osThreadNew+0xca>
          mem = 0;
 80054fc:	2300      	movs	r3, #0
 80054fe:	61bb      	str	r3, [r7, #24]
 8005500:	e001      	b.n	8005506 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005502:	2300      	movs	r3, #0
 8005504:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d110      	bne.n	800552e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005514:	9202      	str	r2, [sp, #8]
 8005516:	9301      	str	r3, [sp, #4]
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	6a3a      	ldr	r2, [r7, #32]
 8005520:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f001 f960 	bl	80067e8 <xTaskCreateStatic>
 8005528:	4603      	mov	r3, r0
 800552a:	613b      	str	r3, [r7, #16]
 800552c:	e013      	b.n	8005556 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d110      	bne.n	8005556 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	b29a      	uxth	r2, r3
 8005538:	f107 0310 	add.w	r3, r7, #16
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f001 f9ae 	bl	80068a8 <xTaskCreate>
 800554c:	4603      	mov	r3, r0
 800554e:	2b01      	cmp	r3, #1
 8005550:	d001      	beq.n	8005556 <osThreadNew+0x11a>
            hTask = NULL;
 8005552:	2300      	movs	r3, #0
 8005554:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005556:	693b      	ldr	r3, [r7, #16]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3728      	adds	r7, #40	@ 0x28
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af02      	add	r7, sp, #8
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <osThreadFlagsSet+0x1a>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	da03      	bge.n	8005582 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800557a:	f06f 0303 	mvn.w	r3, #3
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	e035      	b.n	80055ee <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8005582:	f04f 33ff 	mov.w	r3, #4294967295
 8005586:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005588:	f3ef 8305 	mrs	r3, IPSR
 800558c:	613b      	str	r3, [r7, #16]
  return(result);
 800558e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01f      	beq.n	80055d4 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8005594:	2300      	movs	r3, #0
 8005596:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8005598:	f107 0308 	add.w	r3, r7, #8
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	2300      	movs	r3, #0
 80055a0:	2201      	movs	r2, #1
 80055a2:	6839      	ldr	r1, [r7, #0]
 80055a4:	6978      	ldr	r0, [r7, #20]
 80055a6:	f002 f8eb 	bl	8007780 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80055aa:	f107 030c 	add.w	r3, r7, #12
 80055ae:	2200      	movs	r2, #0
 80055b0:	9200      	str	r2, [sp, #0]
 80055b2:	2200      	movs	r2, #0
 80055b4:	2100      	movs	r1, #0
 80055b6:	6978      	ldr	r0, [r7, #20]
 80055b8:	f002 f8e2 	bl	8007780 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d015      	beq.n	80055ee <osThreadFlagsSet+0x8e>
 80055c2:	4b0d      	ldr	r3, [pc, #52]	@ (80055f8 <osThreadFlagsSet+0x98>)
 80055c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	e00c      	b.n	80055ee <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80055d4:	2300      	movs	r3, #0
 80055d6:	2201      	movs	r2, #1
 80055d8:	6839      	ldr	r1, [r7, #0]
 80055da:	6978      	ldr	r0, [r7, #20]
 80055dc:	f002 f816 	bl	800760c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80055e0:	f107 030c 	add.w	r3, r7, #12
 80055e4:	2200      	movs	r2, #0
 80055e6:	2100      	movs	r1, #0
 80055e8:	6978      	ldr	r0, [r7, #20]
 80055ea:	f002 f80f 	bl	800760c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80055ee:	68fb      	ldr	r3, [r7, #12]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	e000ed04 	.word	0xe000ed04

080055fc <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08c      	sub	sp, #48	@ 0x30
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005608:	f3ef 8305 	mrs	r3, IPSR
 800560c:	617b      	str	r3, [r7, #20]
  return(result);
 800560e:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8005614:	f06f 0305 	mvn.w	r3, #5
 8005618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800561a:	e06b      	b.n	80056f4 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	da03      	bge.n	800562a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8005622:	f06f 0303 	mvn.w	r3, #3
 8005626:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005628:	e064      	b.n	80056f4 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <osThreadFlagsWait+0x3e>
      clear = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005638:	e001      	b.n	800563e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8005646:	f001 fbbf 	bl	8006dc8 <xTaskGetTickCount>
 800564a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800564c:	f107 0210 	add.w	r2, r7, #16
 8005650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005652:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005654:	2000      	movs	r0, #0
 8005656:	f001 ff7f 	bl	8007558 <xTaskNotifyWait>
 800565a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d137      	bne.n	80056d2 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8005662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4013      	ands	r3, r2
 8005668:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800566e:	4313      	orrs	r3, r2
 8005670:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00c      	beq.n	8005696 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005680:	4013      	ands	r3, r2
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	429a      	cmp	r2, r3
 8005686:	d032      	beq.n	80056ee <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10f      	bne.n	80056ae <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800568e:	f06f 0302 	mvn.w	r3, #2
 8005692:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8005694:	e02e      	b.n	80056f4 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569a:	4013      	ands	r3, r2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d128      	bne.n	80056f2 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d103      	bne.n	80056ae <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80056a6:	f06f 0302 	mvn.w	r3, #2
 80056aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 80056ac:	e022      	b.n	80056f4 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80056ae:	f001 fb8b 	bl	8006dc8 <xTaskGetTickCount>
 80056b2:	4602      	mov	r2, r0
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056be:	429a      	cmp	r2, r3
 80056c0:	d902      	bls.n	80056c8 <osThreadFlagsWait+0xcc>
          tout  = 0;
 80056c2:	2300      	movs	r3, #0
 80056c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c6:	e00e      	b.n	80056e6 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80056c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80056d0:	e009      	b.n	80056e6 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d103      	bne.n	80056e0 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80056d8:	f06f 0302 	mvn.w	r3, #2
 80056dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056de:	e002      	b.n	80056e6 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80056e0:	f06f 0301 	mvn.w	r3, #1
 80056e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1af      	bne.n	800564c <osThreadFlagsWait+0x50>
 80056ec:	e002      	b.n	80056f4 <osThreadFlagsWait+0xf8>
            break;
 80056ee:	bf00      	nop
 80056f0:	e000      	b.n	80056f4 <osThreadFlagsWait+0xf8>
            break;
 80056f2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80056f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3730      	adds	r7, #48	@ 0x30
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005706:	f3ef 8305 	mrs	r3, IPSR
 800570a:	60bb      	str	r3, [r7, #8]
  return(result);
 800570c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <osDelay+0x1c>
    stat = osErrorISR;
 8005712:	f06f 0305 	mvn.w	r3, #5
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	e007      	b.n	800572a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <osDelay+0x2c>
      vTaskDelay(ticks);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f001 fa05 	bl	8006b34 <vTaskDelay>
    }
  }

  return (stat);
 800572a:	68fb      	ldr	r3, [r7, #12]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f002 fd75 	bl	800822c <pvTimerGetTimerID>
 8005742:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <TimerCallback+0x22>
    callb->func (callb->arg);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	6852      	ldr	r2, [r2, #4]
 8005752:	4610      	mov	r0, r2
 8005754:	4798      	blx	r3
  }
}
 8005756:	bf00      	nop
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8005760:	b580      	push	{r7, lr}
 8005762:	b08c      	sub	sp, #48	@ 0x30
 8005764:	af02      	add	r7, sp, #8
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	607a      	str	r2, [r7, #4]
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	460b      	mov	r3, r1
 800576e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8005770:	2300      	movs	r3, #0
 8005772:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005774:	f3ef 8305 	mrs	r3, IPSR
 8005778:	613b      	str	r3, [r7, #16]
  return(result);
 800577a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800577c:	2b00      	cmp	r3, #0
 800577e:	d163      	bne.n	8005848 <osTimerNew+0xe8>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d060      	beq.n	8005848 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8005786:	2008      	movs	r0, #8
 8005788:	f002 ffc8 	bl	800871c <pvPortMalloc>
 800578c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d059      	beq.n	8005848 <osTimerNew+0xe8>
      callb->func = func;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80057a0:	7afb      	ldrb	r3, [r7, #11]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d102      	bne.n	80057ac <osTimerNew+0x4c>
        reload = pdFALSE;
 80057a6:	2300      	movs	r3, #0
 80057a8:	61fb      	str	r3, [r7, #28]
 80057aa:	e001      	b.n	80057b0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80057ac:	2301      	movs	r3, #1
 80057ae:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80057b0:	f04f 33ff 	mov.w	r3, #4294967295
 80057b4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80057b6:	2300      	movs	r3, #0
 80057b8:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d01c      	beq.n	80057fa <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <osTimerNew+0x6e>
          name = attr->name;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d006      	beq.n	80057e4 <osTimerNew+0x84>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	2b2b      	cmp	r3, #43	@ 0x2b
 80057dc:	d902      	bls.n	80057e4 <osTimerNew+0x84>
          mem = 1;
 80057de:	2301      	movs	r3, #1
 80057e0:	61bb      	str	r3, [r7, #24]
 80057e2:	e00c      	b.n	80057fe <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d108      	bne.n	80057fe <osTimerNew+0x9e>
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d104      	bne.n	80057fe <osTimerNew+0x9e>
            mem = 0;
 80057f4:	2300      	movs	r3, #0
 80057f6:	61bb      	str	r3, [r7, #24]
 80057f8:	e001      	b.n	80057fe <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80057fa:	2300      	movs	r3, #0
 80057fc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d10c      	bne.n	800581e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	9301      	str	r3, [sp, #4]
 800580a:	4b12      	ldr	r3, [pc, #72]	@ (8005854 <osTimerNew+0xf4>)
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	69fa      	ldr	r2, [r7, #28]
 8005812:	2101      	movs	r1, #1
 8005814:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005816:	f002 f952 	bl	8007abe <xTimerCreateStatic>
 800581a:	6238      	str	r0, [r7, #32]
 800581c:	e00b      	b.n	8005836 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d108      	bne.n	8005836 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005824:	4b0b      	ldr	r3, [pc, #44]	@ (8005854 <osTimerNew+0xf4>)
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	2101      	movs	r1, #1
 800582e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005830:	f002 f924 	bl	8007a7c <xTimerCreate>
 8005834:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d105      	bne.n	8005848 <osTimerNew+0xe8>
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <osTimerNew+0xe8>
        vPortFree (callb);
 8005842:	6978      	ldr	r0, [r7, #20]
 8005844:	f003 f838 	bl	80088b8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8005848:	6a3b      	ldr	r3, [r7, #32]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3728      	adds	r7, #40	@ 0x28
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	08005735 	.word	0x08005735

08005858 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af02      	add	r7, sp, #8
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005866:	f3ef 8305 	mrs	r3, IPSR
 800586a:	60fb      	str	r3, [r7, #12]
  return(result);
 800586c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <osTimerStart+0x22>
    stat = osErrorISR;
 8005872:	f06f 0305 	mvn.w	r3, #5
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	e017      	b.n	80058aa <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d103      	bne.n	8005888 <osTimerStart+0x30>
    stat = osErrorParameter;
 8005880:	f06f 0303 	mvn.w	r3, #3
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	e010      	b.n	80058aa <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005888:	2300      	movs	r3, #0
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	2300      	movs	r3, #0
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	2104      	movs	r1, #4
 8005892:	6938      	ldr	r0, [r7, #16]
 8005894:	f002 f990 	bl	8007bb8 <xTimerGenericCommand>
 8005898:	4603      	mov	r3, r0
 800589a:	2b01      	cmp	r3, #1
 800589c:	d102      	bne.n	80058a4 <osTimerStart+0x4c>
      stat = osOK;
 800589e:	2300      	movs	r3, #0
 80058a0:	617b      	str	r3, [r7, #20]
 80058a2:	e002      	b.n	80058aa <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80058a4:	f06f 0302 	mvn.w	r3, #2
 80058a8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80058aa:	697b      	ldr	r3, [r7, #20]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af02      	add	r7, sp, #8
 80058ba:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058c0:	f3ef 8305 	mrs	r3, IPSR
 80058c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80058c6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <osTimerStop+0x20>
    stat = osErrorISR;
 80058cc:	f06f 0305 	mvn.w	r3, #5
 80058d0:	617b      	str	r3, [r7, #20]
 80058d2:	e021      	b.n	8005918 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d103      	bne.n	80058e2 <osTimerStop+0x2e>
    stat = osErrorParameter;
 80058da:	f06f 0303 	mvn.w	r3, #3
 80058de:	617b      	str	r3, [r7, #20]
 80058e0:	e01a      	b.n	8005918 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 80058e2:	6938      	ldr	r0, [r7, #16]
 80058e4:	f002 fc78 	bl	80081d8 <xTimerIsTimerActive>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d103      	bne.n	80058f6 <osTimerStop+0x42>
      stat = osErrorResource;
 80058ee:	f06f 0302 	mvn.w	r3, #2
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	e010      	b.n	8005918 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 80058f6:	2300      	movs	r3, #0
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	2300      	movs	r3, #0
 80058fc:	2200      	movs	r2, #0
 80058fe:	2103      	movs	r1, #3
 8005900:	6938      	ldr	r0, [r7, #16]
 8005902:	f002 f959 	bl	8007bb8 <xTimerGenericCommand>
 8005906:	4603      	mov	r3, r0
 8005908:	2b01      	cmp	r3, #1
 800590a:	d102      	bne.n	8005912 <osTimerStop+0x5e>
        stat = osOK;
 800590c:	2300      	movs	r3, #0
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	e002      	b.n	8005918 <osTimerStop+0x64>
      } else {
        stat = osError;
 8005912:	f04f 33ff 	mov.w	r3, #4294967295
 8005916:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005918:	697b      	ldr	r3, [r7, #20]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3718      	adds	r7, #24
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005922:	b580      	push	{r7, lr}
 8005924:	b08a      	sub	sp, #40	@ 0x28
 8005926:	af02      	add	r7, sp, #8
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	60b9      	str	r1, [r7, #8]
 800592c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800592e:	2300      	movs	r3, #0
 8005930:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005932:	f3ef 8305 	mrs	r3, IPSR
 8005936:	613b      	str	r3, [r7, #16]
  return(result);
 8005938:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800593a:	2b00      	cmp	r3, #0
 800593c:	d175      	bne.n	8005a2a <osSemaphoreNew+0x108>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d072      	beq.n	8005a2a <osSemaphoreNew+0x108>
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	429a      	cmp	r2, r3
 800594a:	d86e      	bhi.n	8005a2a <osSemaphoreNew+0x108>
    mem = -1;
 800594c:	f04f 33ff 	mov.w	r3, #4294967295
 8005950:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d015      	beq.n	8005984 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d006      	beq.n	800596e <osSemaphoreNew+0x4c>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	2b4f      	cmp	r3, #79	@ 0x4f
 8005966:	d902      	bls.n	800596e <osSemaphoreNew+0x4c>
        mem = 1;
 8005968:	2301      	movs	r3, #1
 800596a:	61bb      	str	r3, [r7, #24]
 800596c:	e00c      	b.n	8005988 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d108      	bne.n	8005988 <osSemaphoreNew+0x66>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d104      	bne.n	8005988 <osSemaphoreNew+0x66>
          mem = 0;
 800597e:	2300      	movs	r3, #0
 8005980:	61bb      	str	r3, [r7, #24]
 8005982:	e001      	b.n	8005988 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005984:	2300      	movs	r3, #0
 8005986:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598e:	d04c      	beq.n	8005a2a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d128      	bne.n	80059e8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d10a      	bne.n	80059b2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	2203      	movs	r2, #3
 80059a2:	9200      	str	r2, [sp, #0]
 80059a4:	2200      	movs	r2, #0
 80059a6:	2100      	movs	r1, #0
 80059a8:	2001      	movs	r0, #1
 80059aa:	f000 f995 	bl	8005cd8 <xQueueGenericCreateStatic>
 80059ae:	61f8      	str	r0, [r7, #28]
 80059b0:	e005      	b.n	80059be <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80059b2:	2203      	movs	r2, #3
 80059b4:	2100      	movs	r1, #0
 80059b6:	2001      	movs	r0, #1
 80059b8:	f000 fa0b 	bl	8005dd2 <xQueueGenericCreate>
 80059bc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d022      	beq.n	8005a0a <osSemaphoreNew+0xe8>
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d01f      	beq.n	8005a0a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80059ca:	2300      	movs	r3, #0
 80059cc:	2200      	movs	r2, #0
 80059ce:	2100      	movs	r1, #0
 80059d0:	69f8      	ldr	r0, [r7, #28]
 80059d2:	f000 facb 	bl	8005f6c <xQueueGenericSend>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d016      	beq.n	8005a0a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80059dc:	69f8      	ldr	r0, [r7, #28]
 80059de:	f000 fd47 	bl	8006470 <vQueueDelete>
            hSemaphore = NULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	61fb      	str	r3, [r7, #28]
 80059e6:	e010      	b.n	8005a0a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d108      	bne.n	8005a00 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	461a      	mov	r2, r3
 80059f4:	68b9      	ldr	r1, [r7, #8]
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 fa49 	bl	8005e8e <xQueueCreateCountingSemaphoreStatic>
 80059fc:	61f8      	str	r0, [r7, #28]
 80059fe:	e004      	b.n	8005a0a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005a00:	68b9      	ldr	r1, [r7, #8]
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 fa7c 	bl	8005f00 <xQueueCreateCountingSemaphore>
 8005a08:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00c      	beq.n	8005a2a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <osSemaphoreNew+0xfc>
          name = attr->name;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	e001      	b.n	8005a22 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005a22:	6979      	ldr	r1, [r7, #20]
 8005a24:	69f8      	ldr	r0, [r7, #28]
 8005a26:	f000 fe57 	bl	80066d8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005a2a:	69fb      	ldr	r3, [r7, #28]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3720      	adds	r7, #32
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4a07      	ldr	r2, [pc, #28]	@ (8005a60 <vApplicationGetIdleTaskMemory+0x2c>)
 8005a44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	4a06      	ldr	r2, [pc, #24]	@ (8005a64 <vApplicationGetIdleTaskMemory+0x30>)
 8005a4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2280      	movs	r2, #128	@ 0x80
 8005a50:	601a      	str	r2, [r3, #0]
}
 8005a52:	bf00      	nop
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	200007bc 	.word	0x200007bc
 8005a64:	20000818 	.word	0x20000818

08005a68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4a07      	ldr	r2, [pc, #28]	@ (8005a94 <vApplicationGetTimerTaskMemory+0x2c>)
 8005a78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	4a06      	ldr	r2, [pc, #24]	@ (8005a98 <vApplicationGetTimerTaskMemory+0x30>)
 8005a7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a86:	601a      	str	r2, [r3, #0]
}
 8005a88:	bf00      	nop
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	20000a18 	.word	0x20000a18
 8005a98:	20000a74 	.word	0x20000a74

08005a9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f103 0208 	add.w	r2, r3, #8
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f103 0208 	add.w	r2, r3, #8
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f103 0208 	add.w	r2, r3, #8
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005aea:	bf00      	nop
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005af6:	b480      	push	{r7}
 8005af8:	b085      	sub	sp, #20
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	601a      	str	r2, [r3, #0]
}
 8005b32:	bf00      	nop
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b085      	sub	sp, #20
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b54:	d103      	bne.n	8005b5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	e00c      	b.n	8005b78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	3308      	adds	r3, #8
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	e002      	b.n	8005b6c <vListInsert+0x2e>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d2f6      	bcs.n	8005b66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	1c5a      	adds	r2, r3, #1
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	601a      	str	r2, [r3, #0]
}
 8005ba4:	bf00      	nop
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6892      	ldr	r2, [r2, #8]
 8005bc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6852      	ldr	r2, [r2, #4]
 8005bd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d103      	bne.n	8005be4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	1e5a      	subs	r2, r3, #1
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10b      	bne.n	8005c30 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c2a:	bf00      	nop
 8005c2c:	bf00      	nop
 8005c2e:	e7fd      	b.n	8005c2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c30:	f002 fc52 	bl	80084d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c3c:	68f9      	ldr	r1, [r7, #12]
 8005c3e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005c40:	fb01 f303 	mul.w	r3, r1, r3
 8005c44:	441a      	add	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c60:	3b01      	subs	r3, #1
 8005c62:	68f9      	ldr	r1, [r7, #12]
 8005c64:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005c66:	fb01 f303 	mul.w	r3, r1, r3
 8005c6a:	441a      	add	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	22ff      	movs	r2, #255	@ 0xff
 8005c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	22ff      	movs	r2, #255	@ 0xff
 8005c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d114      	bne.n	8005cb0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d01a      	beq.n	8005cc4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	3310      	adds	r3, #16
 8005c92:	4618      	mov	r0, r3
 8005c94:	f001 fa12 	bl	80070bc <xTaskRemoveFromEventList>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d012      	beq.n	8005cc4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005cd4 <xQueueGenericReset+0xd0>)
 8005ca0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	e009      	b.n	8005cc4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3310      	adds	r3, #16
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff fef1 	bl	8005a9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3324      	adds	r3, #36	@ 0x24
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff feec 	bl	8005a9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005cc4:	f002 fc3a 	bl	800853c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005cc8:	2301      	movs	r3, #1
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	e000ed04 	.word	0xe000ed04

08005cd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08e      	sub	sp, #56	@ 0x38
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
 8005ce4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10b      	bne.n	8005d04 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005cfe:	bf00      	nop
 8005d00:	bf00      	nop
 8005d02:	e7fd      	b.n	8005d00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10b      	bne.n	8005d22 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d1c:	bf00      	nop
 8005d1e:	bf00      	nop
 8005d20:	e7fd      	b.n	8005d1e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <xQueueGenericCreateStatic+0x56>
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <xQueueGenericCreateStatic+0x5a>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e000      	b.n	8005d34 <xQueueGenericCreateStatic+0x5c>
 8005d32:	2300      	movs	r3, #0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10b      	bne.n	8005d50 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	623b      	str	r3, [r7, #32]
}
 8005d4a:	bf00      	nop
 8005d4c:	bf00      	nop
 8005d4e:	e7fd      	b.n	8005d4c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d102      	bne.n	8005d5c <xQueueGenericCreateStatic+0x84>
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <xQueueGenericCreateStatic+0x88>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e000      	b.n	8005d62 <xQueueGenericCreateStatic+0x8a>
 8005d60:	2300      	movs	r3, #0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10b      	bne.n	8005d7e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	61fb      	str	r3, [r7, #28]
}
 8005d78:	bf00      	nop
 8005d7a:	bf00      	nop
 8005d7c:	e7fd      	b.n	8005d7a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d7e:	2350      	movs	r3, #80	@ 0x50
 8005d80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2b50      	cmp	r3, #80	@ 0x50
 8005d86:	d00b      	beq.n	8005da0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	61bb      	str	r3, [r7, #24]
}
 8005d9a:	bf00      	nop
 8005d9c:	bf00      	nop
 8005d9e:	e7fd      	b.n	8005d9c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005da0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00d      	beq.n	8005dc8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005db4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	68b9      	ldr	r1, [r7, #8]
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 f840 	bl	8005e48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3730      	adds	r7, #48	@ 0x30
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b08a      	sub	sp, #40	@ 0x28
 8005dd6:	af02      	add	r7, sp, #8
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10b      	bne.n	8005dfe <xQueueGenericCreate+0x2c>
	__asm volatile
 8005de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	613b      	str	r3, [r7, #16]
}
 8005df8:	bf00      	nop
 8005dfa:	bf00      	nop
 8005dfc:	e7fd      	b.n	8005dfa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	fb02 f303 	mul.w	r3, r2, r3
 8005e06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	3350      	adds	r3, #80	@ 0x50
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f002 fc85 	bl	800871c <pvPortMalloc>
 8005e12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d011      	beq.n	8005e3e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	3350      	adds	r3, #80	@ 0x50
 8005e22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e2c:	79fa      	ldrb	r2, [r7, #7]
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	4613      	mov	r3, r2
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	68b9      	ldr	r1, [r7, #8]
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 f805 	bl	8005e48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e3e:	69bb      	ldr	r3, [r7, #24]
	}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3720      	adds	r7, #32
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d103      	bne.n	8005e64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	e002      	b.n	8005e6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e76:	2101      	movs	r1, #1
 8005e78:	69b8      	ldr	r0, [r7, #24]
 8005e7a:	f7ff fec3 	bl	8005c04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	78fa      	ldrb	r2, [r7, #3]
 8005e82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e86:	bf00      	nop
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b08a      	sub	sp, #40	@ 0x28
 8005e92:	af02      	add	r7, sp, #8
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10b      	bne.n	8005eb8 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	61bb      	str	r3, [r7, #24]
}
 8005eb2:	bf00      	nop
 8005eb4:	bf00      	nop
 8005eb6:	e7fd      	b.n	8005eb4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d90b      	bls.n	8005ed8 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	617b      	str	r3, [r7, #20]
}
 8005ed2:	bf00      	nop
 8005ed4:	bf00      	nop
 8005ed6:	e7fd      	b.n	8005ed4 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005ed8:	2302      	movs	r3, #2
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f7ff fef8 	bl	8005cd8 <xQueueGenericCreateStatic>
 8005ee8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005ef6:	69fb      	ldr	r3, [r7, #28]
	}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3720      	adds	r7, #32
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10b      	bne.n	8005f28 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	613b      	str	r3, [r7, #16]
}
 8005f22:	bf00      	nop
 8005f24:	bf00      	nop
 8005f26:	e7fd      	b.n	8005f24 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d90b      	bls.n	8005f48 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	60fb      	str	r3, [r7, #12]
}
 8005f42:	bf00      	nop
 8005f44:	bf00      	nop
 8005f46:	e7fd      	b.n	8005f44 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005f48:	2202      	movs	r2, #2
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7ff ff40 	bl	8005dd2 <xQueueGenericCreate>
 8005f52:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005f60:	697b      	ldr	r3, [r7, #20]
	}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
	...

08005f6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08e      	sub	sp, #56	@ 0x38
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10b      	bne.n	8005fa0 <xQueueGenericSend+0x34>
	__asm volatile
 8005f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f9a:	bf00      	nop
 8005f9c:	bf00      	nop
 8005f9e:	e7fd      	b.n	8005f9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d103      	bne.n	8005fae <xQueueGenericSend+0x42>
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <xQueueGenericSend+0x46>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e000      	b.n	8005fb4 <xQueueGenericSend+0x48>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10b      	bne.n	8005fd0 <xQueueGenericSend+0x64>
	__asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005fca:	bf00      	nop
 8005fcc:	bf00      	nop
 8005fce:	e7fd      	b.n	8005fcc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d103      	bne.n	8005fde <xQueueGenericSend+0x72>
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <xQueueGenericSend+0x76>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e000      	b.n	8005fe4 <xQueueGenericSend+0x78>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10b      	bne.n	8006000 <xQueueGenericSend+0x94>
	__asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	623b      	str	r3, [r7, #32]
}
 8005ffa:	bf00      	nop
 8005ffc:	bf00      	nop
 8005ffe:	e7fd      	b.n	8005ffc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006000:	f001 fa1c 	bl	800743c <xTaskGetSchedulerState>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d102      	bne.n	8006010 <xQueueGenericSend+0xa4>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <xQueueGenericSend+0xa8>
 8006010:	2301      	movs	r3, #1
 8006012:	e000      	b.n	8006016 <xQueueGenericSend+0xaa>
 8006014:	2300      	movs	r3, #0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10b      	bne.n	8006032 <xQueueGenericSend+0xc6>
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	61fb      	str	r3, [r7, #28]
}
 800602c:	bf00      	nop
 800602e:	bf00      	nop
 8006030:	e7fd      	b.n	800602e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006032:	f002 fa51 	bl	80084d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006038:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800603e:	429a      	cmp	r2, r3
 8006040:	d302      	bcc.n	8006048 <xQueueGenericSend+0xdc>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b02      	cmp	r3, #2
 8006046:	d129      	bne.n	800609c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	68b9      	ldr	r1, [r7, #8]
 800604c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800604e:	f000 fa33 	bl	80064b8 <prvCopyDataToQueue>
 8006052:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006058:	2b00      	cmp	r3, #0
 800605a:	d010      	beq.n	800607e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800605c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605e:	3324      	adds	r3, #36	@ 0x24
 8006060:	4618      	mov	r0, r3
 8006062:	f001 f82b 	bl	80070bc <xTaskRemoveFromEventList>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d013      	beq.n	8006094 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800606c:	4b3f      	ldr	r3, [pc, #252]	@ (800616c <xQueueGenericSend+0x200>)
 800606e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	e00a      	b.n	8006094 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800607e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006080:	2b00      	cmp	r3, #0
 8006082:	d007      	beq.n	8006094 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006084:	4b39      	ldr	r3, [pc, #228]	@ (800616c <xQueueGenericSend+0x200>)
 8006086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006094:	f002 fa52 	bl	800853c <vPortExitCritical>
				return pdPASS;
 8006098:	2301      	movs	r3, #1
 800609a:	e063      	b.n	8006164 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d103      	bne.n	80060aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060a2:	f002 fa4b 	bl	800853c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	e05c      	b.n	8006164 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d106      	bne.n	80060be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060b0:	f107 0314 	add.w	r3, r7, #20
 80060b4:	4618      	mov	r0, r3
 80060b6:	f001 f865 	bl	8007184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060ba:	2301      	movs	r3, #1
 80060bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060be:	f002 fa3d 	bl	800853c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060c2:	f000 fdd5 	bl	8006c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060c6:	f002 fa07 	bl	80084d8 <vPortEnterCritical>
 80060ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060d0:	b25b      	sxtb	r3, r3
 80060d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d6:	d103      	bne.n	80060e0 <xQueueGenericSend+0x174>
 80060d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060e6:	b25b      	sxtb	r3, r3
 80060e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ec:	d103      	bne.n	80060f6 <xQueueGenericSend+0x18a>
 80060ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060f6:	f002 fa21 	bl	800853c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060fa:	1d3a      	adds	r2, r7, #4
 80060fc:	f107 0314 	add.w	r3, r7, #20
 8006100:	4611      	mov	r1, r2
 8006102:	4618      	mov	r0, r3
 8006104:	f001 f854 	bl	80071b0 <xTaskCheckForTimeOut>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d124      	bne.n	8006158 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800610e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006110:	f000 faca 	bl	80066a8 <prvIsQueueFull>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d018      	beq.n	800614c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800611a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611c:	3310      	adds	r3, #16
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	4611      	mov	r1, r2
 8006122:	4618      	mov	r0, r3
 8006124:	f000 ff78 	bl	8007018 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006128:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800612a:	f000 fa55 	bl	80065d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800612e:	f000 fdad 	bl	8006c8c <xTaskResumeAll>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	f47f af7c 	bne.w	8006032 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800613a:	4b0c      	ldr	r3, [pc, #48]	@ (800616c <xQueueGenericSend+0x200>)
 800613c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	e772      	b.n	8006032 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800614c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800614e:	f000 fa43 	bl	80065d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006152:	f000 fd9b 	bl	8006c8c <xTaskResumeAll>
 8006156:	e76c      	b.n	8006032 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006158:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800615a:	f000 fa3d 	bl	80065d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800615e:	f000 fd95 	bl	8006c8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006162:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006164:	4618      	mov	r0, r3
 8006166:	3738      	adds	r7, #56	@ 0x38
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	e000ed04 	.word	0xe000ed04

08006170 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b090      	sub	sp, #64	@ 0x40
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
 800617c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10b      	bne.n	80061a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618c:	f383 8811 	msr	BASEPRI, r3
 8006190:	f3bf 8f6f 	isb	sy
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800619a:	bf00      	nop
 800619c:	bf00      	nop
 800619e:	e7fd      	b.n	800619c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d103      	bne.n	80061ae <xQueueGenericSendFromISR+0x3e>
 80061a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <xQueueGenericSendFromISR+0x42>
 80061ae:	2301      	movs	r3, #1
 80061b0:	e000      	b.n	80061b4 <xQueueGenericSendFromISR+0x44>
 80061b2:	2300      	movs	r3, #0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10b      	bne.n	80061d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80061ca:	bf00      	nop
 80061cc:	bf00      	nop
 80061ce:	e7fd      	b.n	80061cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d103      	bne.n	80061de <xQueueGenericSendFromISR+0x6e>
 80061d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d101      	bne.n	80061e2 <xQueueGenericSendFromISR+0x72>
 80061de:	2301      	movs	r3, #1
 80061e0:	e000      	b.n	80061e4 <xQueueGenericSendFromISR+0x74>
 80061e2:	2300      	movs	r3, #0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10b      	bne.n	8006200 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	623b      	str	r3, [r7, #32]
}
 80061fa:	bf00      	nop
 80061fc:	bf00      	nop
 80061fe:	e7fd      	b.n	80061fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006200:	f002 fa4a 	bl	8008698 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006204:	f3ef 8211 	mrs	r2, BASEPRI
 8006208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	61fa      	str	r2, [r7, #28]
 800621a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800621c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800621e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006222:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006228:	429a      	cmp	r2, r3
 800622a:	d302      	bcc.n	8006232 <xQueueGenericSendFromISR+0xc2>
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2b02      	cmp	r3, #2
 8006230:	d12f      	bne.n	8006292 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006234:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006238:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800623c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006240:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006248:	f000 f936 	bl	80064b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800624c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006254:	d112      	bne.n	800627c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625a:	2b00      	cmp	r3, #0
 800625c:	d016      	beq.n	800628c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800625e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006260:	3324      	adds	r3, #36	@ 0x24
 8006262:	4618      	mov	r0, r3
 8006264:	f000 ff2a 	bl	80070bc <xTaskRemoveFromEventList>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00e      	beq.n	800628c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00b      	beq.n	800628c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	e007      	b.n	800628c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800627c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006280:	3301      	adds	r3, #1
 8006282:	b2db      	uxtb	r3, r3
 8006284:	b25a      	sxtb	r2, r3
 8006286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006288:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800628c:	2301      	movs	r3, #1
 800628e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006290:	e001      	b.n	8006296 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006292:	2300      	movs	r3, #0
 8006294:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006298:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80062a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3740      	adds	r7, #64	@ 0x40
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b08c      	sub	sp, #48	@ 0x30
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80062b8:	2300      	movs	r3, #0
 80062ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80062c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10b      	bne.n	80062de <xQueueReceive+0x32>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	623b      	str	r3, [r7, #32]
}
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	e7fd      	b.n	80062da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d103      	bne.n	80062ec <xQueueReceive+0x40>
 80062e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <xQueueReceive+0x44>
 80062ec:	2301      	movs	r3, #1
 80062ee:	e000      	b.n	80062f2 <xQueueReceive+0x46>
 80062f0:	2300      	movs	r3, #0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10b      	bne.n	800630e <xQueueReceive+0x62>
	__asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	61fb      	str	r3, [r7, #28]
}
 8006308:	bf00      	nop
 800630a:	bf00      	nop
 800630c:	e7fd      	b.n	800630a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800630e:	f001 f895 	bl	800743c <xTaskGetSchedulerState>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d102      	bne.n	800631e <xQueueReceive+0x72>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <xQueueReceive+0x76>
 800631e:	2301      	movs	r3, #1
 8006320:	e000      	b.n	8006324 <xQueueReceive+0x78>
 8006322:	2300      	movs	r3, #0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10b      	bne.n	8006340 <xQueueReceive+0x94>
	__asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	61bb      	str	r3, [r7, #24]
}
 800633a:	bf00      	nop
 800633c:	bf00      	nop
 800633e:	e7fd      	b.n	800633c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006340:	f002 f8ca 	bl	80084d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006348:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634c:	2b00      	cmp	r3, #0
 800634e:	d01f      	beq.n	8006390 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006354:	f000 f91a 	bl	800658c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635a:	1e5a      	subs	r2, r3, #1
 800635c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00f      	beq.n	8006388 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636a:	3310      	adds	r3, #16
 800636c:	4618      	mov	r0, r3
 800636e:	f000 fea5 	bl	80070bc <xTaskRemoveFromEventList>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d007      	beq.n	8006388 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006378:	4b3c      	ldr	r3, [pc, #240]	@ (800646c <xQueueReceive+0x1c0>)
 800637a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006388:	f002 f8d8 	bl	800853c <vPortExitCritical>
				return pdPASS;
 800638c:	2301      	movs	r3, #1
 800638e:	e069      	b.n	8006464 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d103      	bne.n	800639e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006396:	f002 f8d1 	bl	800853c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800639a:	2300      	movs	r3, #0
 800639c:	e062      	b.n	8006464 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800639e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d106      	bne.n	80063b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063a4:	f107 0310 	add.w	r3, r7, #16
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 feeb 	bl	8007184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063ae:	2301      	movs	r3, #1
 80063b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063b2:	f002 f8c3 	bl	800853c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063b6:	f000 fc5b 	bl	8006c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063ba:	f002 f88d 	bl	80084d8 <vPortEnterCritical>
 80063be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063c4:	b25b      	sxtb	r3, r3
 80063c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ca:	d103      	bne.n	80063d4 <xQueueReceive+0x128>
 80063cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063da:	b25b      	sxtb	r3, r3
 80063dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e0:	d103      	bne.n	80063ea <xQueueReceive+0x13e>
 80063e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063ea:	f002 f8a7 	bl	800853c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063ee:	1d3a      	adds	r2, r7, #4
 80063f0:	f107 0310 	add.w	r3, r7, #16
 80063f4:	4611      	mov	r1, r2
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 feda 	bl	80071b0 <xTaskCheckForTimeOut>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d123      	bne.n	800644a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006404:	f000 f93a 	bl	800667c <prvIsQueueEmpty>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d017      	beq.n	800643e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800640e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006410:	3324      	adds	r3, #36	@ 0x24
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	4611      	mov	r1, r2
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fdfe 	bl	8007018 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800641c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800641e:	f000 f8db 	bl	80065d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006422:	f000 fc33 	bl	8006c8c <xTaskResumeAll>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d189      	bne.n	8006340 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800642c:	4b0f      	ldr	r3, [pc, #60]	@ (800646c <xQueueReceive+0x1c0>)
 800642e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	e780      	b.n	8006340 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800643e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006440:	f000 f8ca 	bl	80065d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006444:	f000 fc22 	bl	8006c8c <xTaskResumeAll>
 8006448:	e77a      	b.n	8006340 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800644a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800644c:	f000 f8c4 	bl	80065d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006450:	f000 fc1c 	bl	8006c8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006454:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006456:	f000 f911 	bl	800667c <prvIsQueueEmpty>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	f43f af6f 	beq.w	8006340 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006462:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006464:	4618      	mov	r0, r3
 8006466:	3730      	adds	r7, #48	@ 0x30
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	e000ed04 	.word	0xe000ed04

08006470 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10b      	bne.n	800649a <vQueueDelete+0x2a>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	60bb      	str	r3, [r7, #8]
}
 8006494:	bf00      	nop
 8006496:	bf00      	nop
 8006498:	e7fd      	b.n	8006496 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 f946 	bl	800672c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d102      	bne.n	80064b0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f002 fa04 	bl	80088b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80064b0:	bf00      	nop
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064c4:	2300      	movs	r3, #0
 80064c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10d      	bne.n	80064f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d14d      	bne.n	800657a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 ffc8 	bl	8007478 <xTaskPriorityDisinherit>
 80064e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	609a      	str	r2, [r3, #8]
 80064f0:	e043      	b.n	800657a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d119      	bne.n	800652c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6858      	ldr	r0, [r3, #4]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006500:	461a      	mov	r2, r3
 8006502:	68b9      	ldr	r1, [r7, #8]
 8006504:	f002 fb60 	bl	8008bc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006510:	441a      	add	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	429a      	cmp	r2, r3
 8006520:	d32b      	bcc.n	800657a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	605a      	str	r2, [r3, #4]
 800652a:	e026      	b.n	800657a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	68d8      	ldr	r0, [r3, #12]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006534:	461a      	mov	r2, r3
 8006536:	68b9      	ldr	r1, [r7, #8]
 8006538:	f002 fb46 	bl	8008bc8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006544:	425b      	negs	r3, r3
 8006546:	441a      	add	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	429a      	cmp	r2, r3
 8006556:	d207      	bcs.n	8006568 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006560:	425b      	negs	r3, r3
 8006562:	441a      	add	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b02      	cmp	r3, #2
 800656c:	d105      	bne.n	800657a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	3b01      	subs	r3, #1
 8006578:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006582:	697b      	ldr	r3, [r7, #20]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659a:	2b00      	cmp	r3, #0
 800659c:	d018      	beq.n	80065d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68da      	ldr	r2, [r3, #12]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a6:	441a      	add	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68da      	ldr	r2, [r3, #12]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d303      	bcc.n	80065c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68d9      	ldr	r1, [r3, #12]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c8:	461a      	mov	r2, r3
 80065ca:	6838      	ldr	r0, [r7, #0]
 80065cc:	f002 fafc 	bl	8008bc8 <memcpy>
	}
}
 80065d0:	bf00      	nop
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80065e0:	f001 ff7a 	bl	80084d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065ec:	e011      	b.n	8006612 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d012      	beq.n	800661c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3324      	adds	r3, #36	@ 0x24
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 fd5e 	bl	80070bc <xTaskRemoveFromEventList>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006606:	f000 fe37 	bl	8007278 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800660a:	7bfb      	ldrb	r3, [r7, #15]
 800660c:	3b01      	subs	r3, #1
 800660e:	b2db      	uxtb	r3, r3
 8006610:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006616:	2b00      	cmp	r3, #0
 8006618:	dce9      	bgt.n	80065ee <prvUnlockQueue+0x16>
 800661a:	e000      	b.n	800661e <prvUnlockQueue+0x46>
					break;
 800661c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	22ff      	movs	r2, #255	@ 0xff
 8006622:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006626:	f001 ff89 	bl	800853c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800662a:	f001 ff55 	bl	80084d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006634:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006636:	e011      	b.n	800665c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d012      	beq.n	8006666 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	3310      	adds	r3, #16
 8006644:	4618      	mov	r0, r3
 8006646:	f000 fd39 	bl	80070bc <xTaskRemoveFromEventList>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d001      	beq.n	8006654 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006650:	f000 fe12 	bl	8007278 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006654:	7bbb      	ldrb	r3, [r7, #14]
 8006656:	3b01      	subs	r3, #1
 8006658:	b2db      	uxtb	r3, r3
 800665a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800665c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006660:	2b00      	cmp	r3, #0
 8006662:	dce9      	bgt.n	8006638 <prvUnlockQueue+0x60>
 8006664:	e000      	b.n	8006668 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006666:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	22ff      	movs	r2, #255	@ 0xff
 800666c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006670:	f001 ff64 	bl	800853c <vPortExitCritical>
}
 8006674:	bf00      	nop
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006684:	f001 ff28 	bl	80084d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800668c:	2b00      	cmp	r3, #0
 800668e:	d102      	bne.n	8006696 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006690:	2301      	movs	r3, #1
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	e001      	b.n	800669a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006696:	2300      	movs	r3, #0
 8006698:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800669a:	f001 ff4f 	bl	800853c <vPortExitCritical>

	return xReturn;
 800669e:	68fb      	ldr	r3, [r7, #12]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066b0:	f001 ff12 	bl	80084d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066bc:	429a      	cmp	r2, r3
 80066be:	d102      	bne.n	80066c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80066c0:	2301      	movs	r3, #1
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	e001      	b.n	80066ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80066c6:	2300      	movs	r3, #0
 80066c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066ca:	f001 ff37 	bl	800853c <vPortExitCritical>

	return xReturn;
 80066ce:	68fb      	ldr	r3, [r7, #12]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066e2:	2300      	movs	r3, #0
 80066e4:	60fb      	str	r3, [r7, #12]
 80066e6:	e014      	b.n	8006712 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80066e8:	4a0f      	ldr	r2, [pc, #60]	@ (8006728 <vQueueAddToRegistry+0x50>)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10b      	bne.n	800670c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80066f4:	490c      	ldr	r1, [pc, #48]	@ (8006728 <vQueueAddToRegistry+0x50>)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80066fe:	4a0a      	ldr	r2, [pc, #40]	@ (8006728 <vQueueAddToRegistry+0x50>)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	4413      	add	r3, r2
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800670a:	e006      	b.n	800671a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	3301      	adds	r3, #1
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2b07      	cmp	r3, #7
 8006716:	d9e7      	bls.n	80066e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006718:	bf00      	nop
 800671a:	bf00      	nop
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	20000e74 	.word	0x20000e74

0800672c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006734:	2300      	movs	r3, #0
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	e016      	b.n	8006768 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800673a:	4a10      	ldr	r2, [pc, #64]	@ (800677c <vQueueUnregisterQueue+0x50>)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	00db      	lsls	r3, r3, #3
 8006740:	4413      	add	r3, r2
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	429a      	cmp	r2, r3
 8006748:	d10b      	bne.n	8006762 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800674a:	4a0c      	ldr	r2, [pc, #48]	@ (800677c <vQueueUnregisterQueue+0x50>)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2100      	movs	r1, #0
 8006750:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006754:	4a09      	ldr	r2, [pc, #36]	@ (800677c <vQueueUnregisterQueue+0x50>)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	4413      	add	r3, r2
 800675c:	2200      	movs	r2, #0
 800675e:	605a      	str	r2, [r3, #4]
				break;
 8006760:	e006      	b.n	8006770 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	3301      	adds	r3, #1
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b07      	cmp	r3, #7
 800676c:	d9e5      	bls.n	800673a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800676e:	bf00      	nop
 8006770:	bf00      	nop
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	20000e74 	.word	0x20000e74

08006780 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006790:	f001 fea2 	bl	80084d8 <vPortEnterCritical>
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800679a:	b25b      	sxtb	r3, r3
 800679c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a0:	d103      	bne.n	80067aa <vQueueWaitForMessageRestricted+0x2a>
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067b0:	b25b      	sxtb	r3, r3
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b6:	d103      	bne.n	80067c0 <vQueueWaitForMessageRestricted+0x40>
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067c0:	f001 febc 	bl	800853c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d106      	bne.n	80067da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	3324      	adds	r3, #36	@ 0x24
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	68b9      	ldr	r1, [r7, #8]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 fc45 	bl	8007064 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80067da:	6978      	ldr	r0, [r7, #20]
 80067dc:	f7ff fefc 	bl	80065d8 <prvUnlockQueue>
	}
 80067e0:	bf00      	nop
 80067e2:	3718      	adds	r7, #24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b08e      	sub	sp, #56	@ 0x38
 80067ec:	af04      	add	r7, sp, #16
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10b      	bne.n	8006814 <xTaskCreateStatic+0x2c>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	623b      	str	r3, [r7, #32]
}
 800680e:	bf00      	nop
 8006810:	bf00      	nop
 8006812:	e7fd      	b.n	8006810 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10b      	bne.n	8006832 <xTaskCreateStatic+0x4a>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	61fb      	str	r3, [r7, #28]
}
 800682c:	bf00      	nop
 800682e:	bf00      	nop
 8006830:	e7fd      	b.n	800682e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006832:	235c      	movs	r3, #92	@ 0x5c
 8006834:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	2b5c      	cmp	r3, #92	@ 0x5c
 800683a:	d00b      	beq.n	8006854 <xTaskCreateStatic+0x6c>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	61bb      	str	r3, [r7, #24]
}
 800684e:	bf00      	nop
 8006850:	bf00      	nop
 8006852:	e7fd      	b.n	8006850 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006854:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01e      	beq.n	800689a <xTaskCreateStatic+0xb2>
 800685c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800685e:	2b00      	cmp	r3, #0
 8006860:	d01b      	beq.n	800689a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006864:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006868:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800686a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800686c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686e:	2202      	movs	r2, #2
 8006870:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006874:	2300      	movs	r3, #0
 8006876:	9303      	str	r3, [sp, #12]
 8006878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687a:	9302      	str	r3, [sp, #8]
 800687c:	f107 0314 	add.w	r3, r7, #20
 8006880:	9301      	str	r3, [sp, #4]
 8006882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	68b9      	ldr	r1, [r7, #8]
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 f850 	bl	8006932 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006892:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006894:	f000 f8de 	bl	8006a54 <prvAddNewTaskToReadyList>
 8006898:	e001      	b.n	800689e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800689a:	2300      	movs	r3, #0
 800689c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800689e:	697b      	ldr	r3, [r7, #20]
	}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3728      	adds	r7, #40	@ 0x28
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08c      	sub	sp, #48	@ 0x30
 80068ac:	af04      	add	r7, sp, #16
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	603b      	str	r3, [r7, #0]
 80068b4:	4613      	mov	r3, r2
 80068b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068b8:	88fb      	ldrh	r3, [r7, #6]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4618      	mov	r0, r3
 80068be:	f001 ff2d 	bl	800871c <pvPortMalloc>
 80068c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00e      	beq.n	80068e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068ca:	205c      	movs	r0, #92	@ 0x5c
 80068cc:	f001 ff26 	bl	800871c <pvPortMalloc>
 80068d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d003      	beq.n	80068e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80068de:	e005      	b.n	80068ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068e0:	6978      	ldr	r0, [r7, #20]
 80068e2:	f001 ffe9 	bl	80088b8 <vPortFree>
 80068e6:	e001      	b.n	80068ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068e8:	2300      	movs	r3, #0
 80068ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d017      	beq.n	8006922 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068fa:	88fa      	ldrh	r2, [r7, #6]
 80068fc:	2300      	movs	r3, #0
 80068fe:	9303      	str	r3, [sp, #12]
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	9302      	str	r3, [sp, #8]
 8006904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006906:	9301      	str	r3, [sp, #4]
 8006908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	68b9      	ldr	r1, [r7, #8]
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 f80e 	bl	8006932 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006916:	69f8      	ldr	r0, [r7, #28]
 8006918:	f000 f89c 	bl	8006a54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800691c:	2301      	movs	r3, #1
 800691e:	61bb      	str	r3, [r7, #24]
 8006920:	e002      	b.n	8006928 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006922:	f04f 33ff 	mov.w	r3, #4294967295
 8006926:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006928:	69bb      	ldr	r3, [r7, #24]
	}
 800692a:	4618      	mov	r0, r3
 800692c:	3720      	adds	r7, #32
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b088      	sub	sp, #32
 8006936:	af00      	add	r7, sp, #0
 8006938:	60f8      	str	r0, [r7, #12]
 800693a:	60b9      	str	r1, [r7, #8]
 800693c:	607a      	str	r2, [r7, #4]
 800693e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006942:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	461a      	mov	r2, r3
 800694a:	21a5      	movs	r1, #165	@ 0xa5
 800694c:	f002 f908 	bl	8008b60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006952:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800695a:	3b01      	subs	r3, #1
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	f023 0307 	bic.w	r3, r3, #7
 8006968:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	f003 0307 	and.w	r3, r3, #7
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00b      	beq.n	800698c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	617b      	str	r3, [r7, #20]
}
 8006986:	bf00      	nop
 8006988:	bf00      	nop
 800698a:	e7fd      	b.n	8006988 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d01f      	beq.n	80069d2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006992:	2300      	movs	r3, #0
 8006994:	61fb      	str	r3, [r7, #28]
 8006996:	e012      	b.n	80069be <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	4413      	add	r3, r2
 800699e:	7819      	ldrb	r1, [r3, #0]
 80069a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	4413      	add	r3, r2
 80069a6:	3334      	adds	r3, #52	@ 0x34
 80069a8:	460a      	mov	r2, r1
 80069aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d006      	beq.n	80069c6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	3301      	adds	r3, #1
 80069bc:	61fb      	str	r3, [r7, #28]
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	2b0f      	cmp	r3, #15
 80069c2:	d9e9      	bls.n	8006998 <prvInitialiseNewTask+0x66>
 80069c4:	e000      	b.n	80069c8 <prvInitialiseNewTask+0x96>
			{
				break;
 80069c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80069d0:	e003      	b.n	80069da <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069dc:	2b37      	cmp	r3, #55	@ 0x37
 80069de:	d901      	bls.n	80069e4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069e0:	2337      	movs	r3, #55	@ 0x37
 80069e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069ee:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80069f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f2:	2200      	movs	r2, #0
 80069f4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f8:	3304      	adds	r3, #4
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff f86e 	bl	8005adc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a02:	3318      	adds	r3, #24
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7ff f869 	bl	8005adc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a12:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a1e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a22:	2200      	movs	r2, #0
 8006a24:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	68f9      	ldr	r1, [r7, #12]
 8006a32:	69b8      	ldr	r0, [r7, #24]
 8006a34:	f001 fc1c 	bl	8008270 <pxPortInitialiseStack>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d002      	beq.n	8006a4a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a4a:	bf00      	nop
 8006a4c:	3720      	adds	r7, #32
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
	...

08006a54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a5c:	f001 fd3c 	bl	80084d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a60:	4b2d      	ldr	r3, [pc, #180]	@ (8006b18 <prvAddNewTaskToReadyList+0xc4>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3301      	adds	r3, #1
 8006a66:	4a2c      	ldr	r2, [pc, #176]	@ (8006b18 <prvAddNewTaskToReadyList+0xc4>)
 8006a68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a6a:	4b2c      	ldr	r3, [pc, #176]	@ (8006b1c <prvAddNewTaskToReadyList+0xc8>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d109      	bne.n	8006a86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a72:	4a2a      	ldr	r2, [pc, #168]	@ (8006b1c <prvAddNewTaskToReadyList+0xc8>)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a78:	4b27      	ldr	r3, [pc, #156]	@ (8006b18 <prvAddNewTaskToReadyList+0xc4>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d110      	bne.n	8006aa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a80:	f000 fc1e 	bl	80072c0 <prvInitialiseTaskLists>
 8006a84:	e00d      	b.n	8006aa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a86:	4b26      	ldr	r3, [pc, #152]	@ (8006b20 <prvAddNewTaskToReadyList+0xcc>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d109      	bne.n	8006aa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a8e:	4b23      	ldr	r3, [pc, #140]	@ (8006b1c <prvAddNewTaskToReadyList+0xc8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d802      	bhi.n	8006aa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a9c:	4a1f      	ldr	r2, [pc, #124]	@ (8006b1c <prvAddNewTaskToReadyList+0xc8>)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006aa2:	4b20      	ldr	r3, [pc, #128]	@ (8006b24 <prvAddNewTaskToReadyList+0xd0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	4a1e      	ldr	r2, [pc, #120]	@ (8006b24 <prvAddNewTaskToReadyList+0xd0>)
 8006aaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006aac:	4b1d      	ldr	r3, [pc, #116]	@ (8006b24 <prvAddNewTaskToReadyList+0xd0>)
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8006b28 <prvAddNewTaskToReadyList+0xd4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d903      	bls.n	8006ac8 <prvAddNewTaskToReadyList+0x74>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac4:	4a18      	ldr	r2, [pc, #96]	@ (8006b28 <prvAddNewTaskToReadyList+0xd4>)
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006acc:	4613      	mov	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4a15      	ldr	r2, [pc, #84]	@ (8006b2c <prvAddNewTaskToReadyList+0xd8>)
 8006ad6:	441a      	add	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3304      	adds	r3, #4
 8006adc:	4619      	mov	r1, r3
 8006ade:	4610      	mov	r0, r2
 8006ae0:	f7ff f809 	bl	8005af6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ae4:	f001 fd2a 	bl	800853c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8006b20 <prvAddNewTaskToReadyList+0xcc>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00e      	beq.n	8006b0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006af0:	4b0a      	ldr	r3, [pc, #40]	@ (8006b1c <prvAddNewTaskToReadyList+0xc8>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d207      	bcs.n	8006b0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006afe:	4b0c      	ldr	r3, [pc, #48]	@ (8006b30 <prvAddNewTaskToReadyList+0xdc>)
 8006b00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b0e:	bf00      	nop
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	20001388 	.word	0x20001388
 8006b1c:	20000eb4 	.word	0x20000eb4
 8006b20:	20001394 	.word	0x20001394
 8006b24:	200013a4 	.word	0x200013a4
 8006b28:	20001390 	.word	0x20001390
 8006b2c:	20000eb8 	.word	0x20000eb8
 8006b30:	e000ed04 	.word	0xe000ed04

08006b34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d018      	beq.n	8006b78 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b46:	4b14      	ldr	r3, [pc, #80]	@ (8006b98 <vTaskDelay+0x64>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00b      	beq.n	8006b66 <vTaskDelay+0x32>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	60bb      	str	r3, [r7, #8]
}
 8006b60:	bf00      	nop
 8006b62:	bf00      	nop
 8006b64:	e7fd      	b.n	8006b62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b66:	f000 f883 	bl	8006c70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fee7 	bl	8007940 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b72:	f000 f88b 	bl	8006c8c <xTaskResumeAll>
 8006b76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d107      	bne.n	8006b8e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006b7e:	4b07      	ldr	r3, [pc, #28]	@ (8006b9c <vTaskDelay+0x68>)
 8006b80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b8e:	bf00      	nop
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	200013b0 	.word	0x200013b0
 8006b9c:	e000ed04 	.word	0xe000ed04

08006ba0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08a      	sub	sp, #40	@ 0x28
 8006ba4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006baa:	2300      	movs	r3, #0
 8006bac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bae:	463a      	mov	r2, r7
 8006bb0:	1d39      	adds	r1, r7, #4
 8006bb2:	f107 0308 	add.w	r3, r7, #8
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fe ff3c 	bl	8005a34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006bbc:	6839      	ldr	r1, [r7, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	9202      	str	r2, [sp, #8]
 8006bc4:	9301      	str	r3, [sp, #4]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	2300      	movs	r3, #0
 8006bcc:	460a      	mov	r2, r1
 8006bce:	4922      	ldr	r1, [pc, #136]	@ (8006c58 <vTaskStartScheduler+0xb8>)
 8006bd0:	4822      	ldr	r0, [pc, #136]	@ (8006c5c <vTaskStartScheduler+0xbc>)
 8006bd2:	f7ff fe09 	bl	80067e8 <xTaskCreateStatic>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	4a21      	ldr	r2, [pc, #132]	@ (8006c60 <vTaskStartScheduler+0xc0>)
 8006bda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006bdc:	4b20      	ldr	r3, [pc, #128]	@ (8006c60 <vTaskStartScheduler+0xc0>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006be4:	2301      	movs	r3, #1
 8006be6:	617b      	str	r3, [r7, #20]
 8006be8:	e001      	b.n	8006bee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006bea:	2300      	movs	r3, #0
 8006bec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d102      	bne.n	8006bfa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006bf4:	f000 fef8 	bl	80079e8 <xTimerCreateTimerTask>
 8006bf8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d116      	bne.n	8006c2e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	613b      	str	r3, [r7, #16]
}
 8006c12:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c14:	4b13      	ldr	r3, [pc, #76]	@ (8006c64 <vTaskStartScheduler+0xc4>)
 8006c16:	f04f 32ff 	mov.w	r2, #4294967295
 8006c1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c1c:	4b12      	ldr	r3, [pc, #72]	@ (8006c68 <vTaskStartScheduler+0xc8>)
 8006c1e:	2201      	movs	r2, #1
 8006c20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c22:	4b12      	ldr	r3, [pc, #72]	@ (8006c6c <vTaskStartScheduler+0xcc>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c28:	f001 fbb2 	bl	8008390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c2c:	e00f      	b.n	8006c4e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c34:	d10b      	bne.n	8006c4e <vTaskStartScheduler+0xae>
	__asm volatile
 8006c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	60fb      	str	r3, [r7, #12]
}
 8006c48:	bf00      	nop
 8006c4a:	bf00      	nop
 8006c4c:	e7fd      	b.n	8006c4a <vTaskStartScheduler+0xaa>
}
 8006c4e:	bf00      	nop
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	080094c0 	.word	0x080094c0
 8006c5c:	08007291 	.word	0x08007291
 8006c60:	200013ac 	.word	0x200013ac
 8006c64:	200013a8 	.word	0x200013a8
 8006c68:	20001394 	.word	0x20001394
 8006c6c:	2000138c 	.word	0x2000138c

08006c70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c70:	b480      	push	{r7}
 8006c72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006c74:	4b04      	ldr	r3, [pc, #16]	@ (8006c88 <vTaskSuspendAll+0x18>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	4a03      	ldr	r2, [pc, #12]	@ (8006c88 <vTaskSuspendAll+0x18>)
 8006c7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006c7e:	bf00      	nop
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	200013b0 	.word	0x200013b0

08006c8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c96:	2300      	movs	r3, #0
 8006c98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c9a:	4b42      	ldr	r3, [pc, #264]	@ (8006da4 <xTaskResumeAll+0x118>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10b      	bne.n	8006cba <xTaskResumeAll+0x2e>
	__asm volatile
 8006ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca6:	f383 8811 	msr	BASEPRI, r3
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	603b      	str	r3, [r7, #0]
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop
 8006cb8:	e7fd      	b.n	8006cb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006cba:	f001 fc0d 	bl	80084d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006cbe:	4b39      	ldr	r3, [pc, #228]	@ (8006da4 <xTaskResumeAll+0x118>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	4a37      	ldr	r2, [pc, #220]	@ (8006da4 <xTaskResumeAll+0x118>)
 8006cc6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cc8:	4b36      	ldr	r3, [pc, #216]	@ (8006da4 <xTaskResumeAll+0x118>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d162      	bne.n	8006d96 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006cd0:	4b35      	ldr	r3, [pc, #212]	@ (8006da8 <xTaskResumeAll+0x11c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d05e      	beq.n	8006d96 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cd8:	e02f      	b.n	8006d3a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cda:	4b34      	ldr	r3, [pc, #208]	@ (8006dac <xTaskResumeAll+0x120>)
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3318      	adds	r3, #24
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fe ff62 	bl	8005bb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	3304      	adds	r3, #4
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fe ff5d 	bl	8005bb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8006db0 <xTaskResumeAll+0x124>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d903      	bls.n	8006d0a <xTaskResumeAll+0x7e>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d06:	4a2a      	ldr	r2, [pc, #168]	@ (8006db0 <xTaskResumeAll+0x124>)
 8006d08:	6013      	str	r3, [r2, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d0e:	4613      	mov	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4a27      	ldr	r2, [pc, #156]	@ (8006db4 <xTaskResumeAll+0x128>)
 8006d18:	441a      	add	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	4619      	mov	r1, r3
 8006d20:	4610      	mov	r0, r2
 8006d22:	f7fe fee8 	bl	8005af6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d2a:	4b23      	ldr	r3, [pc, #140]	@ (8006db8 <xTaskResumeAll+0x12c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d302      	bcc.n	8006d3a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006d34:	4b21      	ldr	r3, [pc, #132]	@ (8006dbc <xTaskResumeAll+0x130>)
 8006d36:	2201      	movs	r2, #1
 8006d38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8006dac <xTaskResumeAll+0x120>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1cb      	bne.n	8006cda <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d48:	f000 fb58 	bl	80073fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8006dc0 <xTaskResumeAll+0x134>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d010      	beq.n	8006d7a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d58:	f000 f846 	bl	8006de8 <xTaskIncrementTick>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006d62:	4b16      	ldr	r3, [pc, #88]	@ (8006dbc <xTaskResumeAll+0x130>)
 8006d64:	2201      	movs	r2, #1
 8006d66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1f1      	bne.n	8006d58 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006d74:	4b12      	ldr	r3, [pc, #72]	@ (8006dc0 <xTaskResumeAll+0x134>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d7a:	4b10      	ldr	r3, [pc, #64]	@ (8006dbc <xTaskResumeAll+0x130>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d009      	beq.n	8006d96 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d82:	2301      	movs	r3, #1
 8006d84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d86:	4b0f      	ldr	r3, [pc, #60]	@ (8006dc4 <xTaskResumeAll+0x138>)
 8006d88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d96:	f001 fbd1 	bl	800853c <vPortExitCritical>

	return xAlreadyYielded;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	200013b0 	.word	0x200013b0
 8006da8:	20001388 	.word	0x20001388
 8006dac:	20001348 	.word	0x20001348
 8006db0:	20001390 	.word	0x20001390
 8006db4:	20000eb8 	.word	0x20000eb8
 8006db8:	20000eb4 	.word	0x20000eb4
 8006dbc:	2000139c 	.word	0x2000139c
 8006dc0:	20001398 	.word	0x20001398
 8006dc4:	e000ed04 	.word	0xe000ed04

08006dc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006dce:	4b05      	ldr	r3, [pc, #20]	@ (8006de4 <xTaskGetTickCount+0x1c>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006dd4:	687b      	ldr	r3, [r7, #4]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	2000138c 	.word	0x2000138c

08006de8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b086      	sub	sp, #24
 8006dec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006dee:	2300      	movs	r3, #0
 8006df0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006df2:	4b4f      	ldr	r3, [pc, #316]	@ (8006f30 <xTaskIncrementTick+0x148>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f040 8090 	bne.w	8006f1c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8006f34 <xTaskIncrementTick+0x14c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3301      	adds	r3, #1
 8006e02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e04:	4a4b      	ldr	r2, [pc, #300]	@ (8006f34 <xTaskIncrementTick+0x14c>)
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d121      	bne.n	8006e54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e10:	4b49      	ldr	r3, [pc, #292]	@ (8006f38 <xTaskIncrementTick+0x150>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00b      	beq.n	8006e32 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	603b      	str	r3, [r7, #0]
}
 8006e2c:	bf00      	nop
 8006e2e:	bf00      	nop
 8006e30:	e7fd      	b.n	8006e2e <xTaskIncrementTick+0x46>
 8006e32:	4b41      	ldr	r3, [pc, #260]	@ (8006f38 <xTaskIncrementTick+0x150>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	4b40      	ldr	r3, [pc, #256]	@ (8006f3c <xTaskIncrementTick+0x154>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a3e      	ldr	r2, [pc, #248]	@ (8006f38 <xTaskIncrementTick+0x150>)
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	4a3e      	ldr	r2, [pc, #248]	@ (8006f3c <xTaskIncrementTick+0x154>)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6013      	str	r3, [r2, #0]
 8006e46:	4b3e      	ldr	r3, [pc, #248]	@ (8006f40 <xTaskIncrementTick+0x158>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8006f40 <xTaskIncrementTick+0x158>)
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	f000 fad4 	bl	80073fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e54:	4b3b      	ldr	r3, [pc, #236]	@ (8006f44 <xTaskIncrementTick+0x15c>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d349      	bcc.n	8006ef2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e5e:	4b36      	ldr	r3, [pc, #216]	@ (8006f38 <xTaskIncrementTick+0x150>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d104      	bne.n	8006e72 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e68:	4b36      	ldr	r3, [pc, #216]	@ (8006f44 <xTaskIncrementTick+0x15c>)
 8006e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e6e:	601a      	str	r2, [r3, #0]
					break;
 8006e70:	e03f      	b.n	8006ef2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e72:	4b31      	ldr	r3, [pc, #196]	@ (8006f38 <xTaskIncrementTick+0x150>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d203      	bcs.n	8006e92 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e8a:	4a2e      	ldr	r2, [pc, #184]	@ (8006f44 <xTaskIncrementTick+0x15c>)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e90:	e02f      	b.n	8006ef2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	3304      	adds	r3, #4
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fe fe8a 	bl	8005bb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d004      	beq.n	8006eae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	3318      	adds	r3, #24
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fe fe81 	bl	8005bb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eb2:	4b25      	ldr	r3, [pc, #148]	@ (8006f48 <xTaskIncrementTick+0x160>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d903      	bls.n	8006ec2 <xTaskIncrementTick+0xda>
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebe:	4a22      	ldr	r2, [pc, #136]	@ (8006f48 <xTaskIncrementTick+0x160>)
 8006ec0:	6013      	str	r3, [r2, #0]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4a1f      	ldr	r2, [pc, #124]	@ (8006f4c <xTaskIncrementTick+0x164>)
 8006ed0:	441a      	add	r2, r3
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4610      	mov	r0, r2
 8006eda:	f7fe fe0c 	bl	8005af6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8006f50 <xTaskIncrementTick+0x168>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d3b8      	bcc.n	8006e5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006eec:	2301      	movs	r3, #1
 8006eee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ef0:	e7b5      	b.n	8006e5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ef2:	4b17      	ldr	r3, [pc, #92]	@ (8006f50 <xTaskIncrementTick+0x168>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ef8:	4914      	ldr	r1, [pc, #80]	@ (8006f4c <xTaskIncrementTick+0x164>)
 8006efa:	4613      	mov	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	440b      	add	r3, r1
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d901      	bls.n	8006f0e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f0e:	4b11      	ldr	r3, [pc, #68]	@ (8006f54 <xTaskIncrementTick+0x16c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d007      	beq.n	8006f26 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006f16:	2301      	movs	r3, #1
 8006f18:	617b      	str	r3, [r7, #20]
 8006f1a:	e004      	b.n	8006f26 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8006f58 <xTaskIncrementTick+0x170>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3301      	adds	r3, #1
 8006f22:	4a0d      	ldr	r2, [pc, #52]	@ (8006f58 <xTaskIncrementTick+0x170>)
 8006f24:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f26:	697b      	ldr	r3, [r7, #20]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	200013b0 	.word	0x200013b0
 8006f34:	2000138c 	.word	0x2000138c
 8006f38:	20001340 	.word	0x20001340
 8006f3c:	20001344 	.word	0x20001344
 8006f40:	200013a0 	.word	0x200013a0
 8006f44:	200013a8 	.word	0x200013a8
 8006f48:	20001390 	.word	0x20001390
 8006f4c:	20000eb8 	.word	0x20000eb8
 8006f50:	20000eb4 	.word	0x20000eb4
 8006f54:	2000139c 	.word	0x2000139c
 8006f58:	20001398 	.word	0x20001398

08006f5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f62:	4b28      	ldr	r3, [pc, #160]	@ (8007004 <vTaskSwitchContext+0xa8>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f6a:	4b27      	ldr	r3, [pc, #156]	@ (8007008 <vTaskSwitchContext+0xac>)
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f70:	e042      	b.n	8006ff8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006f72:	4b25      	ldr	r3, [pc, #148]	@ (8007008 <vTaskSwitchContext+0xac>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f78:	4b24      	ldr	r3, [pc, #144]	@ (800700c <vTaskSwitchContext+0xb0>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	60fb      	str	r3, [r7, #12]
 8006f7e:	e011      	b.n	8006fa4 <vTaskSwitchContext+0x48>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10b      	bne.n	8006f9e <vTaskSwitchContext+0x42>
	__asm volatile
 8006f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	607b      	str	r3, [r7, #4]
}
 8006f98:	bf00      	nop
 8006f9a:	bf00      	nop
 8006f9c:	e7fd      	b.n	8006f9a <vTaskSwitchContext+0x3e>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	60fb      	str	r3, [r7, #12]
 8006fa4:	491a      	ldr	r1, [pc, #104]	@ (8007010 <vTaskSwitchContext+0xb4>)
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	440b      	add	r3, r1
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0e3      	beq.n	8006f80 <vTaskSwitchContext+0x24>
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4a13      	ldr	r2, [pc, #76]	@ (8007010 <vTaskSwitchContext+0xb4>)
 8006fc4:	4413      	add	r3, r2
 8006fc6:	60bb      	str	r3, [r7, #8]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	605a      	str	r2, [r3, #4]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	3308      	adds	r3, #8
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d104      	bne.n	8006fe8 <vTaskSwitchContext+0x8c>
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	685a      	ldr	r2, [r3, #4]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	605a      	str	r2, [r3, #4]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	4a09      	ldr	r2, [pc, #36]	@ (8007014 <vTaskSwitchContext+0xb8>)
 8006ff0:	6013      	str	r3, [r2, #0]
 8006ff2:	4a06      	ldr	r2, [pc, #24]	@ (800700c <vTaskSwitchContext+0xb0>)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6013      	str	r3, [r2, #0]
}
 8006ff8:	bf00      	nop
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	200013b0 	.word	0x200013b0
 8007008:	2000139c 	.word	0x2000139c
 800700c:	20001390 	.word	0x20001390
 8007010:	20000eb8 	.word	0x20000eb8
 8007014:	20000eb4 	.word	0x20000eb4

08007018 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10b      	bne.n	8007040 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	60fb      	str	r3, [r7, #12]
}
 800703a:	bf00      	nop
 800703c:	bf00      	nop
 800703e:	e7fd      	b.n	800703c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007040:	4b07      	ldr	r3, [pc, #28]	@ (8007060 <vTaskPlaceOnEventList+0x48>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3318      	adds	r3, #24
 8007046:	4619      	mov	r1, r3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7fe fd78 	bl	8005b3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800704e:	2101      	movs	r1, #1
 8007050:	6838      	ldr	r0, [r7, #0]
 8007052:	f000 fc75 	bl	8007940 <prvAddCurrentTaskToDelayedList>
}
 8007056:	bf00      	nop
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	20000eb4 	.word	0x20000eb4

08007064 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10b      	bne.n	800708e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	617b      	str	r3, [r7, #20]
}
 8007088:	bf00      	nop
 800708a:	bf00      	nop
 800708c:	e7fd      	b.n	800708a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800708e:	4b0a      	ldr	r3, [pc, #40]	@ (80070b8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	3318      	adds	r3, #24
 8007094:	4619      	mov	r1, r3
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f7fe fd2d 	bl	8005af6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d002      	beq.n	80070a8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80070a2:	f04f 33ff 	mov.w	r3, #4294967295
 80070a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80070a8:	6879      	ldr	r1, [r7, #4]
 80070aa:	68b8      	ldr	r0, [r7, #8]
 80070ac:	f000 fc48 	bl	8007940 <prvAddCurrentTaskToDelayedList>
	}
 80070b0:	bf00      	nop
 80070b2:	3718      	adds	r7, #24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	20000eb4 	.word	0x20000eb4

080070bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10b      	bne.n	80070ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	60fb      	str	r3, [r7, #12]
}
 80070e4:	bf00      	nop
 80070e6:	bf00      	nop
 80070e8:	e7fd      	b.n	80070e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	3318      	adds	r3, #24
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe fd5e 	bl	8005bb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070f4:	4b1d      	ldr	r3, [pc, #116]	@ (800716c <xTaskRemoveFromEventList+0xb0>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d11d      	bne.n	8007138 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	3304      	adds	r3, #4
 8007100:	4618      	mov	r0, r3
 8007102:	f7fe fd55 	bl	8005bb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800710a:	4b19      	ldr	r3, [pc, #100]	@ (8007170 <xTaskRemoveFromEventList+0xb4>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	429a      	cmp	r2, r3
 8007110:	d903      	bls.n	800711a <xTaskRemoveFromEventList+0x5e>
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007116:	4a16      	ldr	r2, [pc, #88]	@ (8007170 <xTaskRemoveFromEventList+0xb4>)
 8007118:	6013      	str	r3, [r2, #0]
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800711e:	4613      	mov	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4a13      	ldr	r2, [pc, #76]	@ (8007174 <xTaskRemoveFromEventList+0xb8>)
 8007128:	441a      	add	r2, r3
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	3304      	adds	r3, #4
 800712e:	4619      	mov	r1, r3
 8007130:	4610      	mov	r0, r2
 8007132:	f7fe fce0 	bl	8005af6 <vListInsertEnd>
 8007136:	e005      	b.n	8007144 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	3318      	adds	r3, #24
 800713c:	4619      	mov	r1, r3
 800713e:	480e      	ldr	r0, [pc, #56]	@ (8007178 <xTaskRemoveFromEventList+0xbc>)
 8007140:	f7fe fcd9 	bl	8005af6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007148:	4b0c      	ldr	r3, [pc, #48]	@ (800717c <xTaskRemoveFromEventList+0xc0>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714e:	429a      	cmp	r2, r3
 8007150:	d905      	bls.n	800715e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007152:	2301      	movs	r3, #1
 8007154:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007156:	4b0a      	ldr	r3, [pc, #40]	@ (8007180 <xTaskRemoveFromEventList+0xc4>)
 8007158:	2201      	movs	r2, #1
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	e001      	b.n	8007162 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800715e:	2300      	movs	r3, #0
 8007160:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007162:	697b      	ldr	r3, [r7, #20]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3718      	adds	r7, #24
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	200013b0 	.word	0x200013b0
 8007170:	20001390 	.word	0x20001390
 8007174:	20000eb8 	.word	0x20000eb8
 8007178:	20001348 	.word	0x20001348
 800717c:	20000eb4 	.word	0x20000eb4
 8007180:	2000139c 	.word	0x2000139c

08007184 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800718c:	4b06      	ldr	r3, [pc, #24]	@ (80071a8 <vTaskInternalSetTimeOutState+0x24>)
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007194:	4b05      	ldr	r3, [pc, #20]	@ (80071ac <vTaskInternalSetTimeOutState+0x28>)
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	605a      	str	r2, [r3, #4]
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	200013a0 	.word	0x200013a0
 80071ac:	2000138c 	.word	0x2000138c

080071b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10b      	bne.n	80071d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	613b      	str	r3, [r7, #16]
}
 80071d2:	bf00      	nop
 80071d4:	bf00      	nop
 80071d6:	e7fd      	b.n	80071d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10b      	bne.n	80071f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	60fb      	str	r3, [r7, #12]
}
 80071f0:	bf00      	nop
 80071f2:	bf00      	nop
 80071f4:	e7fd      	b.n	80071f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80071f6:	f001 f96f 	bl	80084d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007270 <xTaskCheckForTimeOut+0xc0>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007212:	d102      	bne.n	800721a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007214:	2300      	movs	r3, #0
 8007216:	61fb      	str	r3, [r7, #28]
 8007218:	e023      	b.n	8007262 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	4b15      	ldr	r3, [pc, #84]	@ (8007274 <xTaskCheckForTimeOut+0xc4>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	429a      	cmp	r2, r3
 8007224:	d007      	beq.n	8007236 <xTaskCheckForTimeOut+0x86>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	429a      	cmp	r2, r3
 800722e:	d302      	bcc.n	8007236 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007230:	2301      	movs	r3, #1
 8007232:	61fb      	str	r3, [r7, #28]
 8007234:	e015      	b.n	8007262 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	429a      	cmp	r2, r3
 800723e:	d20b      	bcs.n	8007258 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	1ad2      	subs	r2, r2, r3
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff ff99 	bl	8007184 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007252:	2300      	movs	r3, #0
 8007254:	61fb      	str	r3, [r7, #28]
 8007256:	e004      	b.n	8007262 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	2200      	movs	r2, #0
 800725c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800725e:	2301      	movs	r3, #1
 8007260:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007262:	f001 f96b 	bl	800853c <vPortExitCritical>

	return xReturn;
 8007266:	69fb      	ldr	r3, [r7, #28]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3720      	adds	r7, #32
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	2000138c 	.word	0x2000138c
 8007274:	200013a0 	.word	0x200013a0

08007278 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007278:	b480      	push	{r7}
 800727a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800727c:	4b03      	ldr	r3, [pc, #12]	@ (800728c <vTaskMissedYield+0x14>)
 800727e:	2201      	movs	r2, #1
 8007280:	601a      	str	r2, [r3, #0]
}
 8007282:	bf00      	nop
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	2000139c 	.word	0x2000139c

08007290 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007298:	f000 f852 	bl	8007340 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800729c:	4b06      	ldr	r3, [pc, #24]	@ (80072b8 <prvIdleTask+0x28>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d9f9      	bls.n	8007298 <prvIdleTask+0x8>
			{
				taskYIELD();
 80072a4:	4b05      	ldr	r3, [pc, #20]	@ (80072bc <prvIdleTask+0x2c>)
 80072a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072aa:	601a      	str	r2, [r3, #0]
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80072b4:	e7f0      	b.n	8007298 <prvIdleTask+0x8>
 80072b6:	bf00      	nop
 80072b8:	20000eb8 	.word	0x20000eb8
 80072bc:	e000ed04 	.word	0xe000ed04

080072c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072c6:	2300      	movs	r3, #0
 80072c8:	607b      	str	r3, [r7, #4]
 80072ca:	e00c      	b.n	80072e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4a12      	ldr	r2, [pc, #72]	@ (8007320 <prvInitialiseTaskLists+0x60>)
 80072d8:	4413      	add	r3, r2
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fe fbde 	bl	8005a9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3301      	adds	r3, #1
 80072e4:	607b      	str	r3, [r7, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b37      	cmp	r3, #55	@ 0x37
 80072ea:	d9ef      	bls.n	80072cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072ec:	480d      	ldr	r0, [pc, #52]	@ (8007324 <prvInitialiseTaskLists+0x64>)
 80072ee:	f7fe fbd5 	bl	8005a9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072f2:	480d      	ldr	r0, [pc, #52]	@ (8007328 <prvInitialiseTaskLists+0x68>)
 80072f4:	f7fe fbd2 	bl	8005a9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072f8:	480c      	ldr	r0, [pc, #48]	@ (800732c <prvInitialiseTaskLists+0x6c>)
 80072fa:	f7fe fbcf 	bl	8005a9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072fe:	480c      	ldr	r0, [pc, #48]	@ (8007330 <prvInitialiseTaskLists+0x70>)
 8007300:	f7fe fbcc 	bl	8005a9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007304:	480b      	ldr	r0, [pc, #44]	@ (8007334 <prvInitialiseTaskLists+0x74>)
 8007306:	f7fe fbc9 	bl	8005a9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800730a:	4b0b      	ldr	r3, [pc, #44]	@ (8007338 <prvInitialiseTaskLists+0x78>)
 800730c:	4a05      	ldr	r2, [pc, #20]	@ (8007324 <prvInitialiseTaskLists+0x64>)
 800730e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007310:	4b0a      	ldr	r3, [pc, #40]	@ (800733c <prvInitialiseTaskLists+0x7c>)
 8007312:	4a05      	ldr	r2, [pc, #20]	@ (8007328 <prvInitialiseTaskLists+0x68>)
 8007314:	601a      	str	r2, [r3, #0]
}
 8007316:	bf00      	nop
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	20000eb8 	.word	0x20000eb8
 8007324:	20001318 	.word	0x20001318
 8007328:	2000132c 	.word	0x2000132c
 800732c:	20001348 	.word	0x20001348
 8007330:	2000135c 	.word	0x2000135c
 8007334:	20001374 	.word	0x20001374
 8007338:	20001340 	.word	0x20001340
 800733c:	20001344 	.word	0x20001344

08007340 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007346:	e019      	b.n	800737c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007348:	f001 f8c6 	bl	80084d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800734c:	4b10      	ldr	r3, [pc, #64]	@ (8007390 <prvCheckTasksWaitingTermination+0x50>)
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	3304      	adds	r3, #4
 8007358:	4618      	mov	r0, r3
 800735a:	f7fe fc29 	bl	8005bb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800735e:	4b0d      	ldr	r3, [pc, #52]	@ (8007394 <prvCheckTasksWaitingTermination+0x54>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3b01      	subs	r3, #1
 8007364:	4a0b      	ldr	r2, [pc, #44]	@ (8007394 <prvCheckTasksWaitingTermination+0x54>)
 8007366:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007368:	4b0b      	ldr	r3, [pc, #44]	@ (8007398 <prvCheckTasksWaitingTermination+0x58>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3b01      	subs	r3, #1
 800736e:	4a0a      	ldr	r2, [pc, #40]	@ (8007398 <prvCheckTasksWaitingTermination+0x58>)
 8007370:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007372:	f001 f8e3 	bl	800853c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f810 	bl	800739c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800737c:	4b06      	ldr	r3, [pc, #24]	@ (8007398 <prvCheckTasksWaitingTermination+0x58>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1e1      	bne.n	8007348 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	2000135c 	.word	0x2000135c
 8007394:	20001388 	.word	0x20001388
 8007398:	20001370 	.word	0x20001370

0800739c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d108      	bne.n	80073c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b2:	4618      	mov	r0, r3
 80073b4:	f001 fa80 	bl	80088b8 <vPortFree>
				vPortFree( pxTCB );
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f001 fa7d 	bl	80088b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80073be:	e019      	b.n	80073f4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d103      	bne.n	80073d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f001 fa74 	bl	80088b8 <vPortFree>
	}
 80073d0:	e010      	b.n	80073f4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d00b      	beq.n	80073f4 <prvDeleteTCB+0x58>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	60fb      	str	r3, [r7, #12]
}
 80073ee:	bf00      	nop
 80073f0:	bf00      	nop
 80073f2:	e7fd      	b.n	80073f0 <prvDeleteTCB+0x54>
	}
 80073f4:	bf00      	nop
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007402:	4b0c      	ldr	r3, [pc, #48]	@ (8007434 <prvResetNextTaskUnblockTime+0x38>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d104      	bne.n	8007416 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800740c:	4b0a      	ldr	r3, [pc, #40]	@ (8007438 <prvResetNextTaskUnblockTime+0x3c>)
 800740e:	f04f 32ff 	mov.w	r2, #4294967295
 8007412:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007414:	e008      	b.n	8007428 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007416:	4b07      	ldr	r3, [pc, #28]	@ (8007434 <prvResetNextTaskUnblockTime+0x38>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	4a04      	ldr	r2, [pc, #16]	@ (8007438 <prvResetNextTaskUnblockTime+0x3c>)
 8007426:	6013      	str	r3, [r2, #0]
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	20001340 	.word	0x20001340
 8007438:	200013a8 	.word	0x200013a8

0800743c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007442:	4b0b      	ldr	r3, [pc, #44]	@ (8007470 <xTaskGetSchedulerState+0x34>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d102      	bne.n	8007450 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800744a:	2301      	movs	r3, #1
 800744c:	607b      	str	r3, [r7, #4]
 800744e:	e008      	b.n	8007462 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007450:	4b08      	ldr	r3, [pc, #32]	@ (8007474 <xTaskGetSchedulerState+0x38>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d102      	bne.n	800745e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007458:	2302      	movs	r3, #2
 800745a:	607b      	str	r3, [r7, #4]
 800745c:	e001      	b.n	8007462 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800745e:	2300      	movs	r3, #0
 8007460:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007462:	687b      	ldr	r3, [r7, #4]
	}
 8007464:	4618      	mov	r0, r3
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	20001394 	.word	0x20001394
 8007474:	200013b0 	.word	0x200013b0

08007478 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007484:	2300      	movs	r3, #0
 8007486:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d058      	beq.n	8007540 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800748e:	4b2f      	ldr	r3, [pc, #188]	@ (800754c <xTaskPriorityDisinherit+0xd4>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	429a      	cmp	r2, r3
 8007496:	d00b      	beq.n	80074b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	60fb      	str	r3, [r7, #12]
}
 80074aa:	bf00      	nop
 80074ac:	bf00      	nop
 80074ae:	e7fd      	b.n	80074ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10b      	bne.n	80074d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	60bb      	str	r3, [r7, #8]
}
 80074ca:	bf00      	nop
 80074cc:	bf00      	nop
 80074ce:	e7fd      	b.n	80074cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074d4:	1e5a      	subs	r2, r3, #1
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d02c      	beq.n	8007540 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d128      	bne.n	8007540 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	3304      	adds	r3, #4
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fe fb5c 	bl	8005bb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007504:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007510:	4b0f      	ldr	r3, [pc, #60]	@ (8007550 <xTaskPriorityDisinherit+0xd8>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	429a      	cmp	r2, r3
 8007516:	d903      	bls.n	8007520 <xTaskPriorityDisinherit+0xa8>
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751c:	4a0c      	ldr	r2, [pc, #48]	@ (8007550 <xTaskPriorityDisinherit+0xd8>)
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007524:	4613      	mov	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4a09      	ldr	r2, [pc, #36]	@ (8007554 <xTaskPriorityDisinherit+0xdc>)
 800752e:	441a      	add	r2, r3
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	3304      	adds	r3, #4
 8007534:	4619      	mov	r1, r3
 8007536:	4610      	mov	r0, r2
 8007538:	f7fe fadd 	bl	8005af6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800753c:	2301      	movs	r3, #1
 800753e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007540:	697b      	ldr	r3, [r7, #20]
	}
 8007542:	4618      	mov	r0, r3
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20000eb4 	.word	0x20000eb4
 8007550:	20001390 	.word	0x20001390
 8007554:	20000eb8 	.word	0x20000eb8

08007558 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
 8007564:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007566:	f000 ffb7 	bl	80084d8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800756a:	4b26      	ldr	r3, [pc, #152]	@ (8007604 <xTaskNotifyWait+0xac>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b02      	cmp	r3, #2
 8007576:	d01a      	beq.n	80075ae <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007578:	4b22      	ldr	r3, [pc, #136]	@ (8007604 <xTaskNotifyWait+0xac>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	43d2      	mvns	r2, r2
 8007582:	400a      	ands	r2, r1
 8007584:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007586:	4b1f      	ldr	r3, [pc, #124]	@ (8007604 <xTaskNotifyWait+0xac>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00b      	beq.n	80075ae <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007596:	2101      	movs	r1, #1
 8007598:	6838      	ldr	r0, [r7, #0]
 800759a:	f000 f9d1 	bl	8007940 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800759e:	4b1a      	ldr	r3, [pc, #104]	@ (8007608 <xTaskNotifyWait+0xb0>)
 80075a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80075ae:	f000 ffc5 	bl	800853c <vPortExitCritical>

		taskENTER_CRITICAL();
 80075b2:	f000 ff91 	bl	80084d8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d004      	beq.n	80075c6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80075bc:	4b11      	ldr	r3, [pc, #68]	@ (8007604 <xTaskNotifyWait+0xac>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80075c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007604 <xTaskNotifyWait+0xac>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d002      	beq.n	80075da <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80075d4:	2300      	movs	r3, #0
 80075d6:	617b      	str	r3, [r7, #20]
 80075d8:	e008      	b.n	80075ec <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80075da:	4b0a      	ldr	r3, [pc, #40]	@ (8007604 <xTaskNotifyWait+0xac>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	43d2      	mvns	r2, r2
 80075e4:	400a      	ands	r2, r1
 80075e6:	655a      	str	r2, [r3, #84]	@ 0x54
				xReturn = pdTRUE;
 80075e8:	2301      	movs	r3, #1
 80075ea:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075ec:	4b05      	ldr	r3, [pc, #20]	@ (8007604 <xTaskNotifyWait+0xac>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 80075f6:	f000 ffa1 	bl	800853c <vPortExitCritical>

		return xReturn;
 80075fa:	697b      	ldr	r3, [r7, #20]
	}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	20000eb4 	.word	0x20000eb4
 8007608:	e000ed04 	.word	0xe000ed04

0800760c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08a      	sub	sp, #40	@ 0x28
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	603b      	str	r3, [r7, #0]
 8007618:	4613      	mov	r3, r2
 800761a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800761c:	2301      	movs	r3, #1
 800761e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10b      	bne.n	800763e <xTaskGenericNotify+0x32>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	61bb      	str	r3, [r7, #24]
}
 8007638:	bf00      	nop
 800763a:	bf00      	nop
 800763c:	e7fd      	b.n	800763a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007642:	f000 ff49 	bl	80084d8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d003      	beq.n	8007654 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800765a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	2202      	movs	r2, #2
 8007660:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8007664:	79fb      	ldrb	r3, [r7, #7]
 8007666:	2b04      	cmp	r3, #4
 8007668:	d827      	bhi.n	80076ba <xTaskGenericNotify+0xae>
 800766a:	a201      	add	r2, pc, #4	@ (adr r2, 8007670 <xTaskGenericNotify+0x64>)
 800766c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007670:	080076dd 	.word	0x080076dd
 8007674:	08007685 	.word	0x08007685
 8007678:	08007693 	.word	0x08007693
 800767c:	0800769f 	.word	0x0800769f
 8007680:	080076a7 	.word	0x080076a7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	431a      	orrs	r2, r3
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007690:	e027      	b.n	80076e2 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007696:	1c5a      	adds	r2, r3, #1
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800769c:	e021      	b.n	80076e2 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80076a4:	e01d      	b.n	80076e2 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80076a6:	7ffb      	ldrb	r3, [r7, #31]
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d003      	beq.n	80076b4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80076b2:	e016      	b.n	80076e2 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 80076b4:	2300      	movs	r3, #0
 80076b6:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80076b8:	e013      	b.n	80076e2 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c2:	d00d      	beq.n	80076e0 <xTaskGenericNotify+0xd4>
	__asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	617b      	str	r3, [r7, #20]
}
 80076d6:	bf00      	nop
 80076d8:	bf00      	nop
 80076da:	e7fd      	b.n	80076d8 <xTaskGenericNotify+0xcc>
					break;
 80076dc:	bf00      	nop
 80076de:	e000      	b.n	80076e2 <xTaskGenericNotify+0xd6>

					break;
 80076e0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80076e2:	7ffb      	ldrb	r3, [r7, #31]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d13b      	bne.n	8007760 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076e8:	6a3b      	ldr	r3, [r7, #32]
 80076ea:	3304      	adds	r3, #4
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fe fa5f 	bl	8005bb0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076f6:	4b1e      	ldr	r3, [pc, #120]	@ (8007770 <xTaskGenericNotify+0x164>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d903      	bls.n	8007706 <xTaskGenericNotify+0xfa>
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007702:	4a1b      	ldr	r2, [pc, #108]	@ (8007770 <xTaskGenericNotify+0x164>)
 8007704:	6013      	str	r3, [r2, #0]
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800770a:	4613      	mov	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4a18      	ldr	r2, [pc, #96]	@ (8007774 <xTaskGenericNotify+0x168>)
 8007714:	441a      	add	r2, r3
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	3304      	adds	r3, #4
 800771a:	4619      	mov	r1, r3
 800771c:	4610      	mov	r0, r2
 800771e:	f7fe f9ea 	bl	8005af6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00b      	beq.n	8007742 <xTaskGenericNotify+0x136>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	613b      	str	r3, [r7, #16]
}
 800773c:	bf00      	nop
 800773e:	bf00      	nop
 8007740:	e7fd      	b.n	800773e <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007746:	4b0c      	ldr	r3, [pc, #48]	@ (8007778 <xTaskGenericNotify+0x16c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774c:	429a      	cmp	r2, r3
 800774e:	d907      	bls.n	8007760 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007750:	4b0a      	ldr	r3, [pc, #40]	@ (800777c <xTaskGenericNotify+0x170>)
 8007752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007760:	f000 feec 	bl	800853c <vPortExitCritical>

		return xReturn;
 8007764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007766:	4618      	mov	r0, r3
 8007768:	3728      	adds	r7, #40	@ 0x28
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	20001390 	.word	0x20001390
 8007774:	20000eb8 	.word	0x20000eb8
 8007778:	20000eb4 	.word	0x20000eb4
 800777c:	e000ed04 	.word	0xe000ed04

08007780 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007780:	b580      	push	{r7, lr}
 8007782:	b08e      	sub	sp, #56	@ 0x38
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	603b      	str	r3, [r7, #0]
 800778c:	4613      	mov	r3, r2
 800778e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007790:	2301      	movs	r3, #1
 8007792:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10b      	bne.n	80077b2 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800779a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779e:	f383 8811 	msr	BASEPRI, r3
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80077ac:	bf00      	nop
 80077ae:	bf00      	nop
 80077b0:	e7fd      	b.n	80077ae <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077b2:	f000 ff71 	bl	8008698 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80077ba:	f3ef 8211 	mrs	r2, BASEPRI
 80077be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	623a      	str	r2, [r7, #32]
 80077d0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80077d2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d003      	beq.n	80077e4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80077dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077de:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80077e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80077ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80077ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f0:	2202      	movs	r2, #2
 80077f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 80077f6:	79fb      	ldrb	r3, [r7, #7]
 80077f8:	2b04      	cmp	r3, #4
 80077fa:	d829      	bhi.n	8007850 <xTaskGenericNotifyFromISR+0xd0>
 80077fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007804 <xTaskGenericNotifyFromISR+0x84>)
 80077fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007802:	bf00      	nop
 8007804:	08007873 	.word	0x08007873
 8007808:	08007819 	.word	0x08007819
 800780c:	08007827 	.word	0x08007827
 8007810:	08007833 	.word	0x08007833
 8007814:	0800783b 	.word	0x0800783b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	431a      	orrs	r2, r3
 8007820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007822:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007824:	e028      	b.n	8007878 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800782a:	1c5a      	adds	r2, r3, #1
 800782c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007830:	e022      	b.n	8007878 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007838:	e01e      	b.n	8007878 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800783a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800783e:	2b02      	cmp	r3, #2
 8007840:	d003      	beq.n	800784a <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007848:	e016      	b.n	8007878 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 800784a:	2300      	movs	r3, #0
 800784c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800784e:	e013      	b.n	8007878 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007858:	d00d      	beq.n	8007876 <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 800785a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800785e:	f383 8811 	msr	BASEPRI, r3
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	61bb      	str	r3, [r7, #24]
}
 800786c:	bf00      	nop
 800786e:	bf00      	nop
 8007870:	e7fd      	b.n	800786e <xTaskGenericNotifyFromISR+0xee>
					break;
 8007872:	bf00      	nop
 8007874:	e000      	b.n	8007878 <xTaskGenericNotifyFromISR+0xf8>
					break;
 8007876:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007878:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800787c:	2b01      	cmp	r3, #1
 800787e:	d147      	bne.n	8007910 <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00b      	beq.n	80078a0 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8007888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	617b      	str	r3, [r7, #20]
}
 800789a:	bf00      	nop
 800789c:	bf00      	nop
 800789e:	e7fd      	b.n	800789c <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078a0:	4b21      	ldr	r3, [pc, #132]	@ (8007928 <xTaskGenericNotifyFromISR+0x1a8>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d11d      	bne.n	80078e4 <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078aa:	3304      	adds	r3, #4
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fe f97f 	bl	8005bb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b6:	4b1d      	ldr	r3, [pc, #116]	@ (800792c <xTaskGenericNotifyFromISR+0x1ac>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d903      	bls.n	80078c6 <xTaskGenericNotifyFromISR+0x146>
 80078be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c2:	4a1a      	ldr	r2, [pc, #104]	@ (800792c <xTaskGenericNotifyFromISR+0x1ac>)
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078ca:	4613      	mov	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4a17      	ldr	r2, [pc, #92]	@ (8007930 <xTaskGenericNotifyFromISR+0x1b0>)
 80078d4:	441a      	add	r2, r3
 80078d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d8:	3304      	adds	r3, #4
 80078da:	4619      	mov	r1, r3
 80078dc:	4610      	mov	r0, r2
 80078de:	f7fe f90a 	bl	8005af6 <vListInsertEnd>
 80078e2:	e005      	b.n	80078f0 <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80078e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e6:	3318      	adds	r3, #24
 80078e8:	4619      	mov	r1, r3
 80078ea:	4812      	ldr	r0, [pc, #72]	@ (8007934 <xTaskGenericNotifyFromISR+0x1b4>)
 80078ec:	f7fe f903 	bl	8005af6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f4:	4b10      	ldr	r3, [pc, #64]	@ (8007938 <xTaskGenericNotifyFromISR+0x1b8>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d908      	bls.n	8007910 <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80078fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007906:	2201      	movs	r2, #1
 8007908:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800790a:	4b0c      	ldr	r3, [pc, #48]	@ (800793c <xTaskGenericNotifyFromISR+0x1bc>)
 800790c:	2201      	movs	r2, #1
 800790e:	601a      	str	r2, [r3, #0]
 8007910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007912:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	f383 8811 	msr	BASEPRI, r3
}
 800791a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800791c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800791e:	4618      	mov	r0, r3
 8007920:	3738      	adds	r7, #56	@ 0x38
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	200013b0 	.word	0x200013b0
 800792c:	20001390 	.word	0x20001390
 8007930:	20000eb8 	.word	0x20000eb8
 8007934:	20001348 	.word	0x20001348
 8007938:	20000eb4 	.word	0x20000eb4
 800793c:	2000139c 	.word	0x2000139c

08007940 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800794a:	4b21      	ldr	r3, [pc, #132]	@ (80079d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007950:	4b20      	ldr	r3, [pc, #128]	@ (80079d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3304      	adds	r3, #4
 8007956:	4618      	mov	r0, r3
 8007958:	f7fe f92a 	bl	8005bb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007962:	d10a      	bne.n	800797a <prvAddCurrentTaskToDelayedList+0x3a>
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d007      	beq.n	800797a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800796a:	4b1a      	ldr	r3, [pc, #104]	@ (80079d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3304      	adds	r3, #4
 8007970:	4619      	mov	r1, r3
 8007972:	4819      	ldr	r0, [pc, #100]	@ (80079d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007974:	f7fe f8bf 	bl	8005af6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007978:	e026      	b.n	80079c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4413      	add	r3, r2
 8007980:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007982:	4b14      	ldr	r3, [pc, #80]	@ (80079d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	429a      	cmp	r2, r3
 8007990:	d209      	bcs.n	80079a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007992:	4b12      	ldr	r3, [pc, #72]	@ (80079dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	4b0f      	ldr	r3, [pc, #60]	@ (80079d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3304      	adds	r3, #4
 800799c:	4619      	mov	r1, r3
 800799e:	4610      	mov	r0, r2
 80079a0:	f7fe f8cd 	bl	8005b3e <vListInsert>
}
 80079a4:	e010      	b.n	80079c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079a6:	4b0e      	ldr	r3, [pc, #56]	@ (80079e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	4b0a      	ldr	r3, [pc, #40]	@ (80079d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	3304      	adds	r3, #4
 80079b0:	4619      	mov	r1, r3
 80079b2:	4610      	mov	r0, r2
 80079b4:	f7fe f8c3 	bl	8005b3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80079b8:	4b0a      	ldr	r3, [pc, #40]	@ (80079e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d202      	bcs.n	80079c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80079c2:	4a08      	ldr	r2, [pc, #32]	@ (80079e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	6013      	str	r3, [r2, #0]
}
 80079c8:	bf00      	nop
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	2000138c 	.word	0x2000138c
 80079d4:	20000eb4 	.word	0x20000eb4
 80079d8:	20001374 	.word	0x20001374
 80079dc:	20001344 	.word	0x20001344
 80079e0:	20001340 	.word	0x20001340
 80079e4:	200013a8 	.word	0x200013a8

080079e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b08a      	sub	sp, #40	@ 0x28
 80079ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80079f2:	f000 fbb1 	bl	8008158 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80079f6:	4b1d      	ldr	r3, [pc, #116]	@ (8007a6c <xTimerCreateTimerTask+0x84>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d021      	beq.n	8007a42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80079fe:	2300      	movs	r3, #0
 8007a00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a02:	2300      	movs	r3, #0
 8007a04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a06:	1d3a      	adds	r2, r7, #4
 8007a08:	f107 0108 	add.w	r1, r7, #8
 8007a0c:	f107 030c 	add.w	r3, r7, #12
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fe f829 	bl	8005a68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a16:	6879      	ldr	r1, [r7, #4]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	9202      	str	r2, [sp, #8]
 8007a1e:	9301      	str	r3, [sp, #4]
 8007a20:	2302      	movs	r3, #2
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	2300      	movs	r3, #0
 8007a26:	460a      	mov	r2, r1
 8007a28:	4911      	ldr	r1, [pc, #68]	@ (8007a70 <xTimerCreateTimerTask+0x88>)
 8007a2a:	4812      	ldr	r0, [pc, #72]	@ (8007a74 <xTimerCreateTimerTask+0x8c>)
 8007a2c:	f7fe fedc 	bl	80067e8 <xTaskCreateStatic>
 8007a30:	4603      	mov	r3, r0
 8007a32:	4a11      	ldr	r2, [pc, #68]	@ (8007a78 <xTimerCreateTimerTask+0x90>)
 8007a34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a36:	4b10      	ldr	r3, [pc, #64]	@ (8007a78 <xTimerCreateTimerTask+0x90>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d001      	beq.n	8007a42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10b      	bne.n	8007a60 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	613b      	str	r3, [r7, #16]
}
 8007a5a:	bf00      	nop
 8007a5c:	bf00      	nop
 8007a5e:	e7fd      	b.n	8007a5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007a60:	697b      	ldr	r3, [r7, #20]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	200013e4 	.word	0x200013e4
 8007a70:	080094c8 	.word	0x080094c8
 8007a74:	08007cf1 	.word	0x08007cf1
 8007a78:	200013e8 	.word	0x200013e8

08007a7c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b088      	sub	sp, #32
 8007a80:	af02      	add	r7, sp, #8
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
 8007a88:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007a8a:	202c      	movs	r0, #44	@ 0x2c
 8007a8c:	f000 fe46 	bl	800871c <pvPortMalloc>
 8007a90:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00d      	beq.n	8007ab4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	9301      	str	r3, [sp, #4]
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	68b9      	ldr	r1, [r7, #8]
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 f845 	bl	8007b3e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007ab4:	697b      	ldr	r3, [r7, #20]
	}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b08a      	sub	sp, #40	@ 0x28
 8007ac2:	af02      	add	r7, sp, #8
 8007ac4:	60f8      	str	r0, [r7, #12]
 8007ac6:	60b9      	str	r1, [r7, #8]
 8007ac8:	607a      	str	r2, [r7, #4]
 8007aca:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007acc:	232c      	movs	r3, #44	@ 0x2c
 8007ace:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	2b2c      	cmp	r3, #44	@ 0x2c
 8007ad4:	d00b      	beq.n	8007aee <xTimerCreateStatic+0x30>
	__asm volatile
 8007ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	61bb      	str	r3, [r7, #24]
}
 8007ae8:	bf00      	nop
 8007aea:	bf00      	nop
 8007aec:	e7fd      	b.n	8007aea <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007aee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10b      	bne.n	8007b0e <xTimerCreateStatic+0x50>
	__asm volatile
 8007af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007afa:	f383 8811 	msr	BASEPRI, r3
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	617b      	str	r3, [r7, #20]
}
 8007b08:	bf00      	nop
 8007b0a:	bf00      	nop
 8007b0c:	e7fd      	b.n	8007b0a <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b10:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00d      	beq.n	8007b34 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	9301      	str	r3, [sp, #4]
 8007b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	68b9      	ldr	r1, [r7, #8]
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f000 f805 	bl	8007b3e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007b34:	69fb      	ldr	r3, [r7, #28]
	}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3720      	adds	r7, #32
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b086      	sub	sp, #24
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	60f8      	str	r0, [r7, #12]
 8007b46:	60b9      	str	r1, [r7, #8]
 8007b48:	607a      	str	r2, [r7, #4]
 8007b4a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10b      	bne.n	8007b6a <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	617b      	str	r3, [r7, #20]
}
 8007b64:	bf00      	nop
 8007b66:	bf00      	nop
 8007b68:	e7fd      	b.n	8007b66 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d01e      	beq.n	8007bae <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007b70:	f000 faf2 	bl	8008158 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b88:	6a3a      	ldr	r2, [r7, #32]
 8007b8a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fd ffa3 	bl	8005adc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d008      	beq.n	8007bae <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ba2:	f043 0304 	orr.w	r3, r3, #4
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007baa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007bae:	bf00      	nop
 8007bb0:	3718      	adds	r7, #24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b08a      	sub	sp, #40	@ 0x28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
 8007bc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10b      	bne.n	8007be8 <xTimerGenericCommand+0x30>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	623b      	str	r3, [r7, #32]
}
 8007be2:	bf00      	nop
 8007be4:	bf00      	nop
 8007be6:	e7fd      	b.n	8007be4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007be8:	4b19      	ldr	r3, [pc, #100]	@ (8007c50 <xTimerGenericCommand+0x98>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d02a      	beq.n	8007c46 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	2b05      	cmp	r3, #5
 8007c00:	dc18      	bgt.n	8007c34 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c02:	f7ff fc1b 	bl	800743c <xTaskGetSchedulerState>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d109      	bne.n	8007c20 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c0c:	4b10      	ldr	r3, [pc, #64]	@ (8007c50 <xTimerGenericCommand+0x98>)
 8007c0e:	6818      	ldr	r0, [r3, #0]
 8007c10:	f107 0110 	add.w	r1, r7, #16
 8007c14:	2300      	movs	r3, #0
 8007c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c18:	f7fe f9a8 	bl	8005f6c <xQueueGenericSend>
 8007c1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007c1e:	e012      	b.n	8007c46 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c20:	4b0b      	ldr	r3, [pc, #44]	@ (8007c50 <xTimerGenericCommand+0x98>)
 8007c22:	6818      	ldr	r0, [r3, #0]
 8007c24:	f107 0110 	add.w	r1, r7, #16
 8007c28:	2300      	movs	r3, #0
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f7fe f99e 	bl	8005f6c <xQueueGenericSend>
 8007c30:	6278      	str	r0, [r7, #36]	@ 0x24
 8007c32:	e008      	b.n	8007c46 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c34:	4b06      	ldr	r3, [pc, #24]	@ (8007c50 <xTimerGenericCommand+0x98>)
 8007c36:	6818      	ldr	r0, [r3, #0]
 8007c38:	f107 0110 	add.w	r1, r7, #16
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	f7fe fa96 	bl	8006170 <xQueueGenericSendFromISR>
 8007c44:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3728      	adds	r7, #40	@ 0x28
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	200013e4 	.word	0x200013e4

08007c54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b088      	sub	sp, #32
 8007c58:	af02      	add	r7, sp, #8
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c5e:	4b23      	ldr	r3, [pc, #140]	@ (8007cec <prvProcessExpiredTimer+0x98>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fd ff9f 	bl	8005bb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c78:	f003 0304 	and.w	r3, r3, #4
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d023      	beq.n	8007cc8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	699a      	ldr	r2, [r3, #24]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	18d1      	adds	r1, r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	6978      	ldr	r0, [r7, #20]
 8007c8e:	f000 f8d5 	bl	8007e3c <prvInsertTimerInActiveList>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d020      	beq.n	8007cda <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c98:	2300      	movs	r3, #0
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	6978      	ldr	r0, [r7, #20]
 8007ca4:	f7ff ff88 	bl	8007bb8 <xTimerGenericCommand>
 8007ca8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d114      	bne.n	8007cda <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	60fb      	str	r3, [r7, #12]
}
 8007cc2:	bf00      	nop
 8007cc4:	bf00      	nop
 8007cc6:	e7fd      	b.n	8007cc4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cce:	f023 0301 	bic.w	r3, r3, #1
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	6978      	ldr	r0, [r7, #20]
 8007ce0:	4798      	blx	r3
}
 8007ce2:	bf00      	nop
 8007ce4:	3718      	adds	r7, #24
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	200013dc 	.word	0x200013dc

08007cf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007cf8:	f107 0308 	add.w	r3, r7, #8
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f000 f859 	bl	8007db4 <prvGetNextExpireTime>
 8007d02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	4619      	mov	r1, r3
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 f805 	bl	8007d18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d0e:	f000 f8d7 	bl	8007ec0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d12:	bf00      	nop
 8007d14:	e7f0      	b.n	8007cf8 <prvTimerTask+0x8>
	...

08007d18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d22:	f7fe ffa5 	bl	8006c70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d26:	f107 0308 	add.w	r3, r7, #8
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 f866 	bl	8007dfc <prvSampleTimeNow>
 8007d30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d130      	bne.n	8007d9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10a      	bne.n	8007d54 <prvProcessTimerOrBlockTask+0x3c>
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d806      	bhi.n	8007d54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d46:	f7fe ffa1 	bl	8006c8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d4a:	68f9      	ldr	r1, [r7, #12]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff ff81 	bl	8007c54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d52:	e024      	b.n	8007d9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d008      	beq.n	8007d6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d5a:	4b13      	ldr	r3, [pc, #76]	@ (8007da8 <prvProcessTimerOrBlockTask+0x90>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <prvProcessTimerOrBlockTask+0x50>
 8007d64:	2301      	movs	r3, #1
 8007d66:	e000      	b.n	8007d6a <prvProcessTimerOrBlockTask+0x52>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8007dac <prvProcessTimerOrBlockTask+0x94>)
 8007d6e:	6818      	ldr	r0, [r3, #0]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	4619      	mov	r1, r3
 8007d7a:	f7fe fd01 	bl	8006780 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d7e:	f7fe ff85 	bl	8006c8c <xTaskResumeAll>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10a      	bne.n	8007d9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007d88:	4b09      	ldr	r3, [pc, #36]	@ (8007db0 <prvProcessTimerOrBlockTask+0x98>)
 8007d8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d8e:	601a      	str	r2, [r3, #0]
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	f3bf 8f6f 	isb	sy
}
 8007d98:	e001      	b.n	8007d9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007d9a:	f7fe ff77 	bl	8006c8c <xTaskResumeAll>
}
 8007d9e:	bf00      	nop
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	200013e0 	.word	0x200013e0
 8007dac:	200013e4 	.word	0x200013e4
 8007db0:	e000ed04 	.word	0xe000ed04

08007db4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8007df8 <prvGetNextExpireTime+0x44>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <prvGetNextExpireTime+0x16>
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	e000      	b.n	8007dcc <prvGetNextExpireTime+0x18>
 8007dca:	2200      	movs	r2, #0
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d105      	bne.n	8007de4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dd8:	4b07      	ldr	r3, [pc, #28]	@ (8007df8 <prvGetNextExpireTime+0x44>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	60fb      	str	r3, [r7, #12]
 8007de2:	e001      	b.n	8007de8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007de4:	2300      	movs	r3, #0
 8007de6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007de8:	68fb      	ldr	r3, [r7, #12]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	200013dc 	.word	0x200013dc

08007dfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e04:	f7fe ffe0 	bl	8006dc8 <xTaskGetTickCount>
 8007e08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8007e38 <prvSampleTimeNow+0x3c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d205      	bcs.n	8007e20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e14:	f000 f93a 	bl	800808c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	e002      	b.n	8007e26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e26:	4a04      	ldr	r2, [pc, #16]	@ (8007e38 <prvSampleTimeNow+0x3c>)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	200013ec 	.word	0x200013ec

08007e3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
 8007e48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d812      	bhi.n	8007e88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	1ad2      	subs	r2, r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d302      	bcc.n	8007e76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e70:	2301      	movs	r3, #1
 8007e72:	617b      	str	r3, [r7, #20]
 8007e74:	e01b      	b.n	8007eae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e76:	4b10      	ldr	r3, [pc, #64]	@ (8007eb8 <prvInsertTimerInActiveList+0x7c>)
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	4619      	mov	r1, r3
 8007e80:	4610      	mov	r0, r2
 8007e82:	f7fd fe5c 	bl	8005b3e <vListInsert>
 8007e86:	e012      	b.n	8007eae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d206      	bcs.n	8007e9e <prvInsertTimerInActiveList+0x62>
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d302      	bcc.n	8007e9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	617b      	str	r3, [r7, #20]
 8007e9c:	e007      	b.n	8007eae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e9e:	4b07      	ldr	r3, [pc, #28]	@ (8007ebc <prvInsertTimerInActiveList+0x80>)
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	f7fd fe48 	bl	8005b3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007eae:	697b      	ldr	r3, [r7, #20]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3718      	adds	r7, #24
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	200013e0 	.word	0x200013e0
 8007ebc:	200013dc 	.word	0x200013dc

08007ec0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08e      	sub	sp, #56	@ 0x38
 8007ec4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ec6:	e0ce      	b.n	8008066 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	da19      	bge.n	8007f02 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ece:	1d3b      	adds	r3, r7, #4
 8007ed0:	3304      	adds	r3, #4
 8007ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10b      	bne.n	8007ef2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	61fb      	str	r3, [r7, #28]
}
 8007eec:	bf00      	nop
 8007eee:	bf00      	nop
 8007ef0:	e7fd      	b.n	8007eee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ef8:	6850      	ldr	r0, [r2, #4]
 8007efa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007efc:	6892      	ldr	r2, [r2, #8]
 8007efe:	4611      	mov	r1, r2
 8007f00:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f2c0 80ae 	blt.w	8008066 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d004      	beq.n	8007f20 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f18:	3304      	adds	r3, #4
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fd fe48 	bl	8005bb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f20:	463b      	mov	r3, r7
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7ff ff6a 	bl	8007dfc <prvSampleTimeNow>
 8007f28:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b09      	cmp	r3, #9
 8007f2e:	f200 8097 	bhi.w	8008060 <prvProcessReceivedCommands+0x1a0>
 8007f32:	a201      	add	r2, pc, #4	@ (adr r2, 8007f38 <prvProcessReceivedCommands+0x78>)
 8007f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f38:	08007f61 	.word	0x08007f61
 8007f3c:	08007f61 	.word	0x08007f61
 8007f40:	08007f61 	.word	0x08007f61
 8007f44:	08007fd7 	.word	0x08007fd7
 8007f48:	08007feb 	.word	0x08007feb
 8007f4c:	08008037 	.word	0x08008037
 8007f50:	08007f61 	.word	0x08007f61
 8007f54:	08007f61 	.word	0x08007f61
 8007f58:	08007fd7 	.word	0x08007fd7
 8007f5c:	08007feb 	.word	0x08007feb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f66:	f043 0301 	orr.w	r3, r3, #1
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	18d1      	adds	r1, r2, r3
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f80:	f7ff ff5c 	bl	8007e3c <prvInsertTimerInActiveList>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d06c      	beq.n	8008064 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f98:	f003 0304 	and.w	r3, r3, #4
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d061      	beq.n	8008064 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	441a      	add	r2, r3
 8007fa8:	2300      	movs	r3, #0
 8007faa:	9300      	str	r3, [sp, #0]
 8007fac:	2300      	movs	r3, #0
 8007fae:	2100      	movs	r1, #0
 8007fb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fb2:	f7ff fe01 	bl	8007bb8 <xTimerGenericCommand>
 8007fb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d152      	bne.n	8008064 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	61bb      	str	r3, [r7, #24]
}
 8007fd0:	bf00      	nop
 8007fd2:	bf00      	nop
 8007fd4:	e7fd      	b.n	8007fd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fdc:	f023 0301 	bic.w	r3, r3, #1
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007fe8:	e03d      	b.n	8008066 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ff0:	f043 0301 	orr.w	r3, r3, #1
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008000:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10b      	bne.n	8008022 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800800a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800e:	f383 8811 	msr	BASEPRI, r3
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	617b      	str	r3, [r7, #20]
}
 800801c:	bf00      	nop
 800801e:	bf00      	nop
 8008020:	e7fd      	b.n	800801e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008024:	699a      	ldr	r2, [r3, #24]
 8008026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008028:	18d1      	adds	r1, r2, r3
 800802a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800802e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008030:	f7ff ff04 	bl	8007e3c <prvInsertTimerInActiveList>
					break;
 8008034:	e017      	b.n	8008066 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008038:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800803c:	f003 0302 	and.w	r3, r3, #2
 8008040:	2b00      	cmp	r3, #0
 8008042:	d103      	bne.n	800804c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008044:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008046:	f000 fc37 	bl	80088b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800804a:	e00c      	b.n	8008066 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800804c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008052:	f023 0301 	bic.w	r3, r3, #1
 8008056:	b2da      	uxtb	r2, r3
 8008058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800805a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800805e:	e002      	b.n	8008066 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008060:	bf00      	nop
 8008062:	e000      	b.n	8008066 <prvProcessReceivedCommands+0x1a6>
					break;
 8008064:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008066:	4b08      	ldr	r3, [pc, #32]	@ (8008088 <prvProcessReceivedCommands+0x1c8>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	1d39      	adds	r1, r7, #4
 800806c:	2200      	movs	r2, #0
 800806e:	4618      	mov	r0, r3
 8008070:	f7fe f91c 	bl	80062ac <xQueueReceive>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	f47f af26 	bne.w	8007ec8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800807c:	bf00      	nop
 800807e:	bf00      	nop
 8008080:	3730      	adds	r7, #48	@ 0x30
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	200013e4 	.word	0x200013e4

0800808c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b088      	sub	sp, #32
 8008090:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008092:	e049      	b.n	8008128 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008094:	4b2e      	ldr	r3, [pc, #184]	@ (8008150 <prvSwitchTimerLists+0xc4>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800809e:	4b2c      	ldr	r3, [pc, #176]	@ (8008150 <prvSwitchTimerLists+0xc4>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	3304      	adds	r3, #4
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7fd fd7f 	bl	8005bb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080c0:	f003 0304 	and.w	r3, r3, #4
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d02f      	beq.n	8008128 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	4413      	add	r3, r2
 80080d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d90e      	bls.n	80080f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080e6:	4b1a      	ldr	r3, [pc, #104]	@ (8008150 <prvSwitchTimerLists+0xc4>)
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3304      	adds	r3, #4
 80080ee:	4619      	mov	r1, r3
 80080f0:	4610      	mov	r0, r2
 80080f2:	f7fd fd24 	bl	8005b3e <vListInsert>
 80080f6:	e017      	b.n	8008128 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080f8:	2300      	movs	r3, #0
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	2300      	movs	r3, #0
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	2100      	movs	r1, #0
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f7ff fd58 	bl	8007bb8 <xTimerGenericCommand>
 8008108:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10b      	bne.n	8008128 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	603b      	str	r3, [r7, #0]
}
 8008122:	bf00      	nop
 8008124:	bf00      	nop
 8008126:	e7fd      	b.n	8008124 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008128:	4b09      	ldr	r3, [pc, #36]	@ (8008150 <prvSwitchTimerLists+0xc4>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1b0      	bne.n	8008094 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008132:	4b07      	ldr	r3, [pc, #28]	@ (8008150 <prvSwitchTimerLists+0xc4>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008138:	4b06      	ldr	r3, [pc, #24]	@ (8008154 <prvSwitchTimerLists+0xc8>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a04      	ldr	r2, [pc, #16]	@ (8008150 <prvSwitchTimerLists+0xc4>)
 800813e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008140:	4a04      	ldr	r2, [pc, #16]	@ (8008154 <prvSwitchTimerLists+0xc8>)
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	6013      	str	r3, [r2, #0]
}
 8008146:	bf00      	nop
 8008148:	3718      	adds	r7, #24
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	200013dc 	.word	0x200013dc
 8008154:	200013e0 	.word	0x200013e0

08008158 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800815e:	f000 f9bb 	bl	80084d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008162:	4b15      	ldr	r3, [pc, #84]	@ (80081b8 <prvCheckForValidListAndQueue+0x60>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d120      	bne.n	80081ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800816a:	4814      	ldr	r0, [pc, #80]	@ (80081bc <prvCheckForValidListAndQueue+0x64>)
 800816c:	f7fd fc96 	bl	8005a9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008170:	4813      	ldr	r0, [pc, #76]	@ (80081c0 <prvCheckForValidListAndQueue+0x68>)
 8008172:	f7fd fc93 	bl	8005a9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008176:	4b13      	ldr	r3, [pc, #76]	@ (80081c4 <prvCheckForValidListAndQueue+0x6c>)
 8008178:	4a10      	ldr	r2, [pc, #64]	@ (80081bc <prvCheckForValidListAndQueue+0x64>)
 800817a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800817c:	4b12      	ldr	r3, [pc, #72]	@ (80081c8 <prvCheckForValidListAndQueue+0x70>)
 800817e:	4a10      	ldr	r2, [pc, #64]	@ (80081c0 <prvCheckForValidListAndQueue+0x68>)
 8008180:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008182:	2300      	movs	r3, #0
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	4b11      	ldr	r3, [pc, #68]	@ (80081cc <prvCheckForValidListAndQueue+0x74>)
 8008188:	4a11      	ldr	r2, [pc, #68]	@ (80081d0 <prvCheckForValidListAndQueue+0x78>)
 800818a:	2110      	movs	r1, #16
 800818c:	200a      	movs	r0, #10
 800818e:	f7fd fda3 	bl	8005cd8 <xQueueGenericCreateStatic>
 8008192:	4603      	mov	r3, r0
 8008194:	4a08      	ldr	r2, [pc, #32]	@ (80081b8 <prvCheckForValidListAndQueue+0x60>)
 8008196:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008198:	4b07      	ldr	r3, [pc, #28]	@ (80081b8 <prvCheckForValidListAndQueue+0x60>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d005      	beq.n	80081ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80081a0:	4b05      	ldr	r3, [pc, #20]	@ (80081b8 <prvCheckForValidListAndQueue+0x60>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	490b      	ldr	r1, [pc, #44]	@ (80081d4 <prvCheckForValidListAndQueue+0x7c>)
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fe fa96 	bl	80066d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081ac:	f000 f9c6 	bl	800853c <vPortExitCritical>
}
 80081b0:	bf00      	nop
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	200013e4 	.word	0x200013e4
 80081bc:	200013b4 	.word	0x200013b4
 80081c0:	200013c8 	.word	0x200013c8
 80081c4:	200013dc 	.word	0x200013dc
 80081c8:	200013e0 	.word	0x200013e0
 80081cc:	20001490 	.word	0x20001490
 80081d0:	200013f0 	.word	0x200013f0
 80081d4:	080094d0 	.word	0x080094d0

080081d8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10b      	bne.n	8008202 <xTimerIsTimerActive+0x2a>
	__asm volatile
 80081ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	60fb      	str	r3, [r7, #12]
}
 80081fc:	bf00      	nop
 80081fe:	bf00      	nop
 8008200:	e7fd      	b.n	80081fe <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8008202:	f000 f969 	bl	80084d8 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800820c:	f003 0301 	and.w	r3, r3, #1
 8008210:	2b00      	cmp	r3, #0
 8008212:	d102      	bne.n	800821a <xTimerIsTimerActive+0x42>
		{
			xReturn = pdFALSE;
 8008214:	2300      	movs	r3, #0
 8008216:	617b      	str	r3, [r7, #20]
 8008218:	e001      	b.n	800821e <xTimerIsTimerActive+0x46>
		}
		else
		{
			xReturn = pdTRUE;
 800821a:	2301      	movs	r3, #1
 800821c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800821e:	f000 f98d 	bl	800853c <vPortExitCritical>

	return xReturn;
 8008222:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8008224:	4618      	mov	r0, r3
 8008226:	3718      	adds	r7, #24
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10b      	bne.n	8008256 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800823e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	60fb      	str	r3, [r7, #12]
}
 8008250:	bf00      	nop
 8008252:	bf00      	nop
 8008254:	e7fd      	b.n	8008252 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8008256:	f000 f93f 	bl	80084d8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008260:	f000 f96c 	bl	800853c <vPortExitCritical>

	return pvReturn;
 8008264:	693b      	ldr	r3, [r7, #16]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
	...

08008270 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	3b04      	subs	r3, #4
 8008280:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008288:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	3b04      	subs	r3, #4
 800828e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	f023 0201 	bic.w	r2, r3, #1
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	3b04      	subs	r3, #4
 800829e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80082a0:	4a0c      	ldr	r2, [pc, #48]	@ (80082d4 <pxPortInitialiseStack+0x64>)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	3b14      	subs	r3, #20
 80082aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	3b04      	subs	r3, #4
 80082b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f06f 0202 	mvn.w	r2, #2
 80082be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	3b20      	subs	r3, #32
 80082c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80082c6:	68fb      	ldr	r3, [r7, #12]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr
 80082d4:	080082d9 	.word	0x080082d9

080082d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80082de:	2300      	movs	r3, #0
 80082e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80082e2:	4b13      	ldr	r3, [pc, #76]	@ (8008330 <prvTaskExitError+0x58>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ea:	d00b      	beq.n	8008304 <prvTaskExitError+0x2c>
	__asm volatile
 80082ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	60fb      	str	r3, [r7, #12]
}
 80082fe:	bf00      	nop
 8008300:	bf00      	nop
 8008302:	e7fd      	b.n	8008300 <prvTaskExitError+0x28>
	__asm volatile
 8008304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008308:	f383 8811 	msr	BASEPRI, r3
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	60bb      	str	r3, [r7, #8]
}
 8008316:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008318:	bf00      	nop
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d0fc      	beq.n	800831a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008320:	bf00      	nop
 8008322:	bf00      	nop
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	2000000c 	.word	0x2000000c
	...

08008340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008340:	4b07      	ldr	r3, [pc, #28]	@ (8008360 <pxCurrentTCBConst2>)
 8008342:	6819      	ldr	r1, [r3, #0]
 8008344:	6808      	ldr	r0, [r1, #0]
 8008346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800834a:	f380 8809 	msr	PSP, r0
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f04f 0000 	mov.w	r0, #0
 8008356:	f380 8811 	msr	BASEPRI, r0
 800835a:	4770      	bx	lr
 800835c:	f3af 8000 	nop.w

08008360 <pxCurrentTCBConst2>:
 8008360:	20000eb4 	.word	0x20000eb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008364:	bf00      	nop
 8008366:	bf00      	nop

08008368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008368:	4808      	ldr	r0, [pc, #32]	@ (800838c <prvPortStartFirstTask+0x24>)
 800836a:	6800      	ldr	r0, [r0, #0]
 800836c:	6800      	ldr	r0, [r0, #0]
 800836e:	f380 8808 	msr	MSP, r0
 8008372:	f04f 0000 	mov.w	r0, #0
 8008376:	f380 8814 	msr	CONTROL, r0
 800837a:	b662      	cpsie	i
 800837c:	b661      	cpsie	f
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	df00      	svc	0
 8008388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800838a:	bf00      	nop
 800838c:	e000ed08 	.word	0xe000ed08

08008390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008396:	4b47      	ldr	r3, [pc, #284]	@ (80084b4 <xPortStartScheduler+0x124>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a47      	ldr	r2, [pc, #284]	@ (80084b8 <xPortStartScheduler+0x128>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d10b      	bne.n	80083b8 <xPortStartScheduler+0x28>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	613b      	str	r3, [r7, #16]
}
 80083b2:	bf00      	nop
 80083b4:	bf00      	nop
 80083b6:	e7fd      	b.n	80083b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80083b8:	4b3e      	ldr	r3, [pc, #248]	@ (80084b4 <xPortStartScheduler+0x124>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a3f      	ldr	r2, [pc, #252]	@ (80084bc <xPortStartScheduler+0x12c>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d10b      	bne.n	80083da <xPortStartScheduler+0x4a>
	__asm volatile
 80083c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	60fb      	str	r3, [r7, #12]
}
 80083d4:	bf00      	nop
 80083d6:	bf00      	nop
 80083d8:	e7fd      	b.n	80083d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80083da:	4b39      	ldr	r3, [pc, #228]	@ (80084c0 <xPortStartScheduler+0x130>)
 80083dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	22ff      	movs	r2, #255	@ 0xff
 80083ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083f4:	78fb      	ldrb	r3, [r7, #3]
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80083fc:	b2da      	uxtb	r2, r3
 80083fe:	4b31      	ldr	r3, [pc, #196]	@ (80084c4 <xPortStartScheduler+0x134>)
 8008400:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008402:	4b31      	ldr	r3, [pc, #196]	@ (80084c8 <xPortStartScheduler+0x138>)
 8008404:	2207      	movs	r2, #7
 8008406:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008408:	e009      	b.n	800841e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800840a:	4b2f      	ldr	r3, [pc, #188]	@ (80084c8 <xPortStartScheduler+0x138>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3b01      	subs	r3, #1
 8008410:	4a2d      	ldr	r2, [pc, #180]	@ (80084c8 <xPortStartScheduler+0x138>)
 8008412:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008414:	78fb      	ldrb	r3, [r7, #3]
 8008416:	b2db      	uxtb	r3, r3
 8008418:	005b      	lsls	r3, r3, #1
 800841a:	b2db      	uxtb	r3, r3
 800841c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800841e:	78fb      	ldrb	r3, [r7, #3]
 8008420:	b2db      	uxtb	r3, r3
 8008422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008426:	2b80      	cmp	r3, #128	@ 0x80
 8008428:	d0ef      	beq.n	800840a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800842a:	4b27      	ldr	r3, [pc, #156]	@ (80084c8 <xPortStartScheduler+0x138>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f1c3 0307 	rsb	r3, r3, #7
 8008432:	2b04      	cmp	r3, #4
 8008434:	d00b      	beq.n	800844e <xPortStartScheduler+0xbe>
	__asm volatile
 8008436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	60bb      	str	r3, [r7, #8]
}
 8008448:	bf00      	nop
 800844a:	bf00      	nop
 800844c:	e7fd      	b.n	800844a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800844e:	4b1e      	ldr	r3, [pc, #120]	@ (80084c8 <xPortStartScheduler+0x138>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	021b      	lsls	r3, r3, #8
 8008454:	4a1c      	ldr	r2, [pc, #112]	@ (80084c8 <xPortStartScheduler+0x138>)
 8008456:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008458:	4b1b      	ldr	r3, [pc, #108]	@ (80084c8 <xPortStartScheduler+0x138>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008460:	4a19      	ldr	r2, [pc, #100]	@ (80084c8 <xPortStartScheduler+0x138>)
 8008462:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	b2da      	uxtb	r2, r3
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800846c:	4b17      	ldr	r3, [pc, #92]	@ (80084cc <xPortStartScheduler+0x13c>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a16      	ldr	r2, [pc, #88]	@ (80084cc <xPortStartScheduler+0x13c>)
 8008472:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008476:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008478:	4b14      	ldr	r3, [pc, #80]	@ (80084cc <xPortStartScheduler+0x13c>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a13      	ldr	r2, [pc, #76]	@ (80084cc <xPortStartScheduler+0x13c>)
 800847e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008482:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008484:	f000 f8da 	bl	800863c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008488:	4b11      	ldr	r3, [pc, #68]	@ (80084d0 <xPortStartScheduler+0x140>)
 800848a:	2200      	movs	r2, #0
 800848c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800848e:	f000 f8f9 	bl	8008684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008492:	4b10      	ldr	r3, [pc, #64]	@ (80084d4 <xPortStartScheduler+0x144>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a0f      	ldr	r2, [pc, #60]	@ (80084d4 <xPortStartScheduler+0x144>)
 8008498:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800849c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800849e:	f7ff ff63 	bl	8008368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80084a2:	f7fe fd5b 	bl	8006f5c <vTaskSwitchContext>
	prvTaskExitError();
 80084a6:	f7ff ff17 	bl	80082d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3718      	adds	r7, #24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	e000ed00 	.word	0xe000ed00
 80084b8:	410fc271 	.word	0x410fc271
 80084bc:	410fc270 	.word	0x410fc270
 80084c0:	e000e400 	.word	0xe000e400
 80084c4:	200014e0 	.word	0x200014e0
 80084c8:	200014e4 	.word	0x200014e4
 80084cc:	e000ed20 	.word	0xe000ed20
 80084d0:	2000000c 	.word	0x2000000c
 80084d4:	e000ef34 	.word	0xe000ef34

080084d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	607b      	str	r3, [r7, #4]
}
 80084f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80084f2:	4b10      	ldr	r3, [pc, #64]	@ (8008534 <vPortEnterCritical+0x5c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	3301      	adds	r3, #1
 80084f8:	4a0e      	ldr	r2, [pc, #56]	@ (8008534 <vPortEnterCritical+0x5c>)
 80084fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80084fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008534 <vPortEnterCritical+0x5c>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d110      	bne.n	8008526 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008504:	4b0c      	ldr	r3, [pc, #48]	@ (8008538 <vPortEnterCritical+0x60>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00b      	beq.n	8008526 <vPortEnterCritical+0x4e>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	603b      	str	r3, [r7, #0]
}
 8008520:	bf00      	nop
 8008522:	bf00      	nop
 8008524:	e7fd      	b.n	8008522 <vPortEnterCritical+0x4a>
	}
}
 8008526:	bf00      	nop
 8008528:	370c      	adds	r7, #12
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	2000000c 	.word	0x2000000c
 8008538:	e000ed04 	.word	0xe000ed04

0800853c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008542:	4b12      	ldr	r3, [pc, #72]	@ (800858c <vPortExitCritical+0x50>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10b      	bne.n	8008562 <vPortExitCritical+0x26>
	__asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	607b      	str	r3, [r7, #4]
}
 800855c:	bf00      	nop
 800855e:	bf00      	nop
 8008560:	e7fd      	b.n	800855e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008562:	4b0a      	ldr	r3, [pc, #40]	@ (800858c <vPortExitCritical+0x50>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	3b01      	subs	r3, #1
 8008568:	4a08      	ldr	r2, [pc, #32]	@ (800858c <vPortExitCritical+0x50>)
 800856a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800856c:	4b07      	ldr	r3, [pc, #28]	@ (800858c <vPortExitCritical+0x50>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d105      	bne.n	8008580 <vPortExitCritical+0x44>
 8008574:	2300      	movs	r3, #0
 8008576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	f383 8811 	msr	BASEPRI, r3
}
 800857e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	2000000c 	.word	0x2000000c

08008590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008590:	f3ef 8009 	mrs	r0, PSP
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	4b15      	ldr	r3, [pc, #84]	@ (80085f0 <pxCurrentTCBConst>)
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	f01e 0f10 	tst.w	lr, #16
 80085a0:	bf08      	it	eq
 80085a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80085a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085aa:	6010      	str	r0, [r2, #0]
 80085ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80085b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80085b4:	f380 8811 	msr	BASEPRI, r0
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f7fe fccc 	bl	8006f5c <vTaskSwitchContext>
 80085c4:	f04f 0000 	mov.w	r0, #0
 80085c8:	f380 8811 	msr	BASEPRI, r0
 80085cc:	bc09      	pop	{r0, r3}
 80085ce:	6819      	ldr	r1, [r3, #0]
 80085d0:	6808      	ldr	r0, [r1, #0]
 80085d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d6:	f01e 0f10 	tst.w	lr, #16
 80085da:	bf08      	it	eq
 80085dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80085e0:	f380 8809 	msr	PSP, r0
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	f3af 8000 	nop.w

080085f0 <pxCurrentTCBConst>:
 80085f0:	20000eb4 	.word	0x20000eb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop

080085f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	607b      	str	r3, [r7, #4]
}
 8008610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008612:	f7fe fbe9 	bl	8006de8 <xTaskIncrementTick>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d003      	beq.n	8008624 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800861c:	4b06      	ldr	r3, [pc, #24]	@ (8008638 <xPortSysTickHandler+0x40>)
 800861e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	2300      	movs	r3, #0
 8008626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	f383 8811 	msr	BASEPRI, r3
}
 800862e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008630:	bf00      	nop
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	e000ed04 	.word	0xe000ed04

0800863c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800863c:	b480      	push	{r7}
 800863e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008640:	4b0b      	ldr	r3, [pc, #44]	@ (8008670 <vPortSetupTimerInterrupt+0x34>)
 8008642:	2200      	movs	r2, #0
 8008644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008646:	4b0b      	ldr	r3, [pc, #44]	@ (8008674 <vPortSetupTimerInterrupt+0x38>)
 8008648:	2200      	movs	r2, #0
 800864a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800864c:	4b0a      	ldr	r3, [pc, #40]	@ (8008678 <vPortSetupTimerInterrupt+0x3c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a0a      	ldr	r2, [pc, #40]	@ (800867c <vPortSetupTimerInterrupt+0x40>)
 8008652:	fba2 2303 	umull	r2, r3, r2, r3
 8008656:	099b      	lsrs	r3, r3, #6
 8008658:	4a09      	ldr	r2, [pc, #36]	@ (8008680 <vPortSetupTimerInterrupt+0x44>)
 800865a:	3b01      	subs	r3, #1
 800865c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800865e:	4b04      	ldr	r3, [pc, #16]	@ (8008670 <vPortSetupTimerInterrupt+0x34>)
 8008660:	2207      	movs	r2, #7
 8008662:	601a      	str	r2, [r3, #0]
}
 8008664:	bf00      	nop
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	e000e010 	.word	0xe000e010
 8008674:	e000e018 	.word	0xe000e018
 8008678:	20000000 	.word	0x20000000
 800867c:	10624dd3 	.word	0x10624dd3
 8008680:	e000e014 	.word	0xe000e014

08008684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008684:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008694 <vPortEnableVFP+0x10>
 8008688:	6801      	ldr	r1, [r0, #0]
 800868a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800868e:	6001      	str	r1, [r0, #0]
 8008690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008692:	bf00      	nop
 8008694:	e000ed88 	.word	0xe000ed88

08008698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800869e:	f3ef 8305 	mrs	r3, IPSR
 80086a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b0f      	cmp	r3, #15
 80086a8:	d915      	bls.n	80086d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80086aa:	4a18      	ldr	r2, [pc, #96]	@ (800870c <vPortValidateInterruptPriority+0x74>)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	4413      	add	r3, r2
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80086b4:	4b16      	ldr	r3, [pc, #88]	@ (8008710 <vPortValidateInterruptPriority+0x78>)
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	7afa      	ldrb	r2, [r7, #11]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d20b      	bcs.n	80086d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	607b      	str	r3, [r7, #4]
}
 80086d0:	bf00      	nop
 80086d2:	bf00      	nop
 80086d4:	e7fd      	b.n	80086d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80086d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008714 <vPortValidateInterruptPriority+0x7c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80086de:	4b0e      	ldr	r3, [pc, #56]	@ (8008718 <vPortValidateInterruptPriority+0x80>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d90b      	bls.n	80086fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80086e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	603b      	str	r3, [r7, #0]
}
 80086f8:	bf00      	nop
 80086fa:	bf00      	nop
 80086fc:	e7fd      	b.n	80086fa <vPortValidateInterruptPriority+0x62>
	}
 80086fe:	bf00      	nop
 8008700:	3714      	adds	r7, #20
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	e000e3f0 	.word	0xe000e3f0
 8008710:	200014e0 	.word	0x200014e0
 8008714:	e000ed0c 	.word	0xe000ed0c
 8008718:	200014e4 	.word	0x200014e4

0800871c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b08a      	sub	sp, #40	@ 0x28
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008724:	2300      	movs	r3, #0
 8008726:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008728:	f7fe faa2 	bl	8006c70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800872c:	4b5c      	ldr	r3, [pc, #368]	@ (80088a0 <pvPortMalloc+0x184>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d101      	bne.n	8008738 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008734:	f000 f924 	bl	8008980 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008738:	4b5a      	ldr	r3, [pc, #360]	@ (80088a4 <pvPortMalloc+0x188>)
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4013      	ands	r3, r2
 8008740:	2b00      	cmp	r3, #0
 8008742:	f040 8095 	bne.w	8008870 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d01e      	beq.n	800878a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800874c:	2208      	movs	r2, #8
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4413      	add	r3, r2
 8008752:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f003 0307 	and.w	r3, r3, #7
 800875a:	2b00      	cmp	r3, #0
 800875c:	d015      	beq.n	800878a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f023 0307 	bic.w	r3, r3, #7
 8008764:	3308      	adds	r3, #8
 8008766:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f003 0307 	and.w	r3, r3, #7
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00b      	beq.n	800878a <pvPortMalloc+0x6e>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	617b      	str	r3, [r7, #20]
}
 8008784:	bf00      	nop
 8008786:	bf00      	nop
 8008788:	e7fd      	b.n	8008786 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d06f      	beq.n	8008870 <pvPortMalloc+0x154>
 8008790:	4b45      	ldr	r3, [pc, #276]	@ (80088a8 <pvPortMalloc+0x18c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	429a      	cmp	r2, r3
 8008798:	d86a      	bhi.n	8008870 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800879a:	4b44      	ldr	r3, [pc, #272]	@ (80088ac <pvPortMalloc+0x190>)
 800879c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800879e:	4b43      	ldr	r3, [pc, #268]	@ (80088ac <pvPortMalloc+0x190>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087a4:	e004      	b.n	80087b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80087a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80087aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d903      	bls.n	80087c2 <pvPortMalloc+0xa6>
 80087ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1f1      	bne.n	80087a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80087c2:	4b37      	ldr	r3, [pc, #220]	@ (80088a0 <pvPortMalloc+0x184>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d051      	beq.n	8008870 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80087cc:	6a3b      	ldr	r3, [r7, #32]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2208      	movs	r2, #8
 80087d2:	4413      	add	r3, r2
 80087d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80087d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	6a3b      	ldr	r3, [r7, #32]
 80087dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80087de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e0:	685a      	ldr	r2, [r3, #4]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	1ad2      	subs	r2, r2, r3
 80087e6:	2308      	movs	r3, #8
 80087e8:	005b      	lsls	r3, r3, #1
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d920      	bls.n	8008830 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4413      	add	r3, r2
 80087f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	f003 0307 	and.w	r3, r3, #7
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00b      	beq.n	8008818 <pvPortMalloc+0xfc>
	__asm volatile
 8008800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	613b      	str	r3, [r7, #16]
}
 8008812:	bf00      	nop
 8008814:	bf00      	nop
 8008816:	e7fd      	b.n	8008814 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	1ad2      	subs	r2, r2, r3
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800882a:	69b8      	ldr	r0, [r7, #24]
 800882c:	f000 f90a 	bl	8008a44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008830:	4b1d      	ldr	r3, [pc, #116]	@ (80088a8 <pvPortMalloc+0x18c>)
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	4a1b      	ldr	r2, [pc, #108]	@ (80088a8 <pvPortMalloc+0x18c>)
 800883c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800883e:	4b1a      	ldr	r3, [pc, #104]	@ (80088a8 <pvPortMalloc+0x18c>)
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	4b1b      	ldr	r3, [pc, #108]	@ (80088b0 <pvPortMalloc+0x194>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	429a      	cmp	r2, r3
 8008848:	d203      	bcs.n	8008852 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800884a:	4b17      	ldr	r3, [pc, #92]	@ (80088a8 <pvPortMalloc+0x18c>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a18      	ldr	r2, [pc, #96]	@ (80088b0 <pvPortMalloc+0x194>)
 8008850:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008854:	685a      	ldr	r2, [r3, #4]
 8008856:	4b13      	ldr	r3, [pc, #76]	@ (80088a4 <pvPortMalloc+0x188>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	431a      	orrs	r2, r3
 800885c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008862:	2200      	movs	r2, #0
 8008864:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008866:	4b13      	ldr	r3, [pc, #76]	@ (80088b4 <pvPortMalloc+0x198>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	3301      	adds	r3, #1
 800886c:	4a11      	ldr	r2, [pc, #68]	@ (80088b4 <pvPortMalloc+0x198>)
 800886e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008870:	f7fe fa0c 	bl	8006c8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	f003 0307 	and.w	r3, r3, #7
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00b      	beq.n	8008896 <pvPortMalloc+0x17a>
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	60fb      	str	r3, [r7, #12]
}
 8008890:	bf00      	nop
 8008892:	bf00      	nop
 8008894:	e7fd      	b.n	8008892 <pvPortMalloc+0x176>
	return pvReturn;
 8008896:	69fb      	ldr	r3, [r7, #28]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3728      	adds	r7, #40	@ 0x28
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	20002c60 	.word	0x20002c60
 80088a4:	20002c74 	.word	0x20002c74
 80088a8:	20002c64 	.word	0x20002c64
 80088ac:	20002c58 	.word	0x20002c58
 80088b0:	20002c68 	.word	0x20002c68
 80088b4:	20002c6c 	.word	0x20002c6c

080088b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d04f      	beq.n	800896a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088ca:	2308      	movs	r3, #8
 80088cc:	425b      	negs	r3, r3
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	4413      	add	r3, r2
 80088d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	4b25      	ldr	r3, [pc, #148]	@ (8008974 <vPortFree+0xbc>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4013      	ands	r3, r2
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10b      	bne.n	80088fe <vPortFree+0x46>
	__asm volatile
 80088e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ea:	f383 8811 	msr	BASEPRI, r3
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f3bf 8f4f 	dsb	sy
 80088f6:	60fb      	str	r3, [r7, #12]
}
 80088f8:	bf00      	nop
 80088fa:	bf00      	nop
 80088fc:	e7fd      	b.n	80088fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00b      	beq.n	800891e <vPortFree+0x66>
	__asm volatile
 8008906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	60bb      	str	r3, [r7, #8]
}
 8008918:	bf00      	nop
 800891a:	bf00      	nop
 800891c:	e7fd      	b.n	800891a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	685a      	ldr	r2, [r3, #4]
 8008922:	4b14      	ldr	r3, [pc, #80]	@ (8008974 <vPortFree+0xbc>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4013      	ands	r3, r2
 8008928:	2b00      	cmp	r3, #0
 800892a:	d01e      	beq.n	800896a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d11a      	bne.n	800896a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	685a      	ldr	r2, [r3, #4]
 8008938:	4b0e      	ldr	r3, [pc, #56]	@ (8008974 <vPortFree+0xbc>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	43db      	mvns	r3, r3
 800893e:	401a      	ands	r2, r3
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008944:	f7fe f994 	bl	8006c70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	685a      	ldr	r2, [r3, #4]
 800894c:	4b0a      	ldr	r3, [pc, #40]	@ (8008978 <vPortFree+0xc0>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4413      	add	r3, r2
 8008952:	4a09      	ldr	r2, [pc, #36]	@ (8008978 <vPortFree+0xc0>)
 8008954:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008956:	6938      	ldr	r0, [r7, #16]
 8008958:	f000 f874 	bl	8008a44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800895c:	4b07      	ldr	r3, [pc, #28]	@ (800897c <vPortFree+0xc4>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3301      	adds	r3, #1
 8008962:	4a06      	ldr	r2, [pc, #24]	@ (800897c <vPortFree+0xc4>)
 8008964:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008966:	f7fe f991 	bl	8006c8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800896a:	bf00      	nop
 800896c:	3718      	adds	r7, #24
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	20002c74 	.word	0x20002c74
 8008978:	20002c64 	.word	0x20002c64
 800897c:	20002c70 	.word	0x20002c70

08008980 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008986:	f241 7370 	movw	r3, #6000	@ 0x1770
 800898a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800898c:	4b27      	ldr	r3, [pc, #156]	@ (8008a2c <prvHeapInit+0xac>)
 800898e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f003 0307 	and.w	r3, r3, #7
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00c      	beq.n	80089b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	3307      	adds	r3, #7
 800899e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f023 0307 	bic.w	r3, r3, #7
 80089a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	4a1f      	ldr	r2, [pc, #124]	@ (8008a2c <prvHeapInit+0xac>)
 80089b0:	4413      	add	r3, r2
 80089b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008a30 <prvHeapInit+0xb0>)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089be:	4b1c      	ldr	r3, [pc, #112]	@ (8008a30 <prvHeapInit+0xb0>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	4413      	add	r3, r2
 80089ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80089cc:	2208      	movs	r2, #8
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	1a9b      	subs	r3, r3, r2
 80089d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f023 0307 	bic.w	r3, r3, #7
 80089da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	4a15      	ldr	r2, [pc, #84]	@ (8008a34 <prvHeapInit+0xb4>)
 80089e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80089e2:	4b14      	ldr	r3, [pc, #80]	@ (8008a34 <prvHeapInit+0xb4>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2200      	movs	r2, #0
 80089e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089ea:	4b12      	ldr	r3, [pc, #72]	@ (8008a34 <prvHeapInit+0xb4>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2200      	movs	r2, #0
 80089f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	1ad2      	subs	r2, r2, r3
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a00:	4b0c      	ldr	r3, [pc, #48]	@ (8008a34 <prvHeapInit+0xb4>)
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8008a38 <prvHeapInit+0xb8>)
 8008a0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	4a09      	ldr	r2, [pc, #36]	@ (8008a3c <prvHeapInit+0xbc>)
 8008a16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a18:	4b09      	ldr	r3, [pc, #36]	@ (8008a40 <prvHeapInit+0xc0>)
 8008a1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008a1e:	601a      	str	r2, [r3, #0]
}
 8008a20:	bf00      	nop
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr
 8008a2c:	200014e8 	.word	0x200014e8
 8008a30:	20002c58 	.word	0x20002c58
 8008a34:	20002c60 	.word	0x20002c60
 8008a38:	20002c68 	.word	0x20002c68
 8008a3c:	20002c64 	.word	0x20002c64
 8008a40:	20002c74 	.word	0x20002c74

08008a44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a4c:	4b28      	ldr	r3, [pc, #160]	@ (8008af0 <prvInsertBlockIntoFreeList+0xac>)
 8008a4e:	60fb      	str	r3, [r7, #12]
 8008a50:	e002      	b.n	8008a58 <prvInsertBlockIntoFreeList+0x14>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	60fb      	str	r3, [r7, #12]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d8f7      	bhi.n	8008a52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d108      	bne.n	8008a86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	685a      	ldr	r2, [r3, #4]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	441a      	add	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	441a      	add	r2, r3
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d118      	bne.n	8008acc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	4b15      	ldr	r3, [pc, #84]	@ (8008af4 <prvInsertBlockIntoFreeList+0xb0>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d00d      	beq.n	8008ac2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685a      	ldr	r2, [r3, #4]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	441a      	add	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	601a      	str	r2, [r3, #0]
 8008ac0:	e008      	b.n	8008ad4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8008af4 <prvInsertBlockIntoFreeList+0xb0>)
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	601a      	str	r2, [r3, #0]
 8008aca:	e003      	b.n	8008ad4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d002      	beq.n	8008ae2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ae2:	bf00      	nop
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	20002c58 	.word	0x20002c58
 8008af4:	20002c60 	.word	0x20002c60

08008af8 <sniprintf>:
 8008af8:	b40c      	push	{r2, r3}
 8008afa:	b530      	push	{r4, r5, lr}
 8008afc:	4b17      	ldr	r3, [pc, #92]	@ (8008b5c <sniprintf+0x64>)
 8008afe:	1e0c      	subs	r4, r1, #0
 8008b00:	681d      	ldr	r5, [r3, #0]
 8008b02:	b09d      	sub	sp, #116	@ 0x74
 8008b04:	da08      	bge.n	8008b18 <sniprintf+0x20>
 8008b06:	238b      	movs	r3, #139	@ 0x8b
 8008b08:	602b      	str	r3, [r5, #0]
 8008b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0e:	b01d      	add	sp, #116	@ 0x74
 8008b10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b14:	b002      	add	sp, #8
 8008b16:	4770      	bx	lr
 8008b18:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008b1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008b20:	bf14      	ite	ne
 8008b22:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b26:	4623      	moveq	r3, r4
 8008b28:	9304      	str	r3, [sp, #16]
 8008b2a:	9307      	str	r3, [sp, #28]
 8008b2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008b30:	9002      	str	r0, [sp, #8]
 8008b32:	9006      	str	r0, [sp, #24]
 8008b34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008b38:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008b3a:	ab21      	add	r3, sp, #132	@ 0x84
 8008b3c:	a902      	add	r1, sp, #8
 8008b3e:	4628      	mov	r0, r5
 8008b40:	9301      	str	r3, [sp, #4]
 8008b42:	f000 f9a3 	bl	8008e8c <_svfiprintf_r>
 8008b46:	1c43      	adds	r3, r0, #1
 8008b48:	bfbc      	itt	lt
 8008b4a:	238b      	movlt	r3, #139	@ 0x8b
 8008b4c:	602b      	strlt	r3, [r5, #0]
 8008b4e:	2c00      	cmp	r4, #0
 8008b50:	d0dd      	beq.n	8008b0e <sniprintf+0x16>
 8008b52:	9b02      	ldr	r3, [sp, #8]
 8008b54:	2200      	movs	r2, #0
 8008b56:	701a      	strb	r2, [r3, #0]
 8008b58:	e7d9      	b.n	8008b0e <sniprintf+0x16>
 8008b5a:	bf00      	nop
 8008b5c:	20000010 	.word	0x20000010

08008b60 <memset>:
 8008b60:	4402      	add	r2, r0
 8008b62:	4603      	mov	r3, r0
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d100      	bne.n	8008b6a <memset+0xa>
 8008b68:	4770      	bx	lr
 8008b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b6e:	e7f9      	b.n	8008b64 <memset+0x4>

08008b70 <__errno>:
 8008b70:	4b01      	ldr	r3, [pc, #4]	@ (8008b78 <__errno+0x8>)
 8008b72:	6818      	ldr	r0, [r3, #0]
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	20000010 	.word	0x20000010

08008b7c <__libc_init_array>:
 8008b7c:	b570      	push	{r4, r5, r6, lr}
 8008b7e:	4d0d      	ldr	r5, [pc, #52]	@ (8008bb4 <__libc_init_array+0x38>)
 8008b80:	4c0d      	ldr	r4, [pc, #52]	@ (8008bb8 <__libc_init_array+0x3c>)
 8008b82:	1b64      	subs	r4, r4, r5
 8008b84:	10a4      	asrs	r4, r4, #2
 8008b86:	2600      	movs	r6, #0
 8008b88:	42a6      	cmp	r6, r4
 8008b8a:	d109      	bne.n	8008ba0 <__libc_init_array+0x24>
 8008b8c:	4d0b      	ldr	r5, [pc, #44]	@ (8008bbc <__libc_init_array+0x40>)
 8008b8e:	4c0c      	ldr	r4, [pc, #48]	@ (8008bc0 <__libc_init_array+0x44>)
 8008b90:	f000 fc66 	bl	8009460 <_init>
 8008b94:	1b64      	subs	r4, r4, r5
 8008b96:	10a4      	asrs	r4, r4, #2
 8008b98:	2600      	movs	r6, #0
 8008b9a:	42a6      	cmp	r6, r4
 8008b9c:	d105      	bne.n	8008baa <__libc_init_array+0x2e>
 8008b9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ba4:	4798      	blx	r3
 8008ba6:	3601      	adds	r6, #1
 8008ba8:	e7ee      	b.n	8008b88 <__libc_init_array+0xc>
 8008baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bae:	4798      	blx	r3
 8008bb0:	3601      	adds	r6, #1
 8008bb2:	e7f2      	b.n	8008b9a <__libc_init_array+0x1e>
 8008bb4:	08009608 	.word	0x08009608
 8008bb8:	08009608 	.word	0x08009608
 8008bbc:	08009608 	.word	0x08009608
 8008bc0:	0800960c 	.word	0x0800960c

08008bc4 <__retarget_lock_acquire_recursive>:
 8008bc4:	4770      	bx	lr

08008bc6 <__retarget_lock_release_recursive>:
 8008bc6:	4770      	bx	lr

08008bc8 <memcpy>:
 8008bc8:	440a      	add	r2, r1
 8008bca:	4291      	cmp	r1, r2
 8008bcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bd0:	d100      	bne.n	8008bd4 <memcpy+0xc>
 8008bd2:	4770      	bx	lr
 8008bd4:	b510      	push	{r4, lr}
 8008bd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bde:	4291      	cmp	r1, r2
 8008be0:	d1f9      	bne.n	8008bd6 <memcpy+0xe>
 8008be2:	bd10      	pop	{r4, pc}

08008be4 <_free_r>:
 8008be4:	b538      	push	{r3, r4, r5, lr}
 8008be6:	4605      	mov	r5, r0
 8008be8:	2900      	cmp	r1, #0
 8008bea:	d041      	beq.n	8008c70 <_free_r+0x8c>
 8008bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bf0:	1f0c      	subs	r4, r1, #4
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	bfb8      	it	lt
 8008bf6:	18e4      	addlt	r4, r4, r3
 8008bf8:	f000 f8e0 	bl	8008dbc <__malloc_lock>
 8008bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8008c74 <_free_r+0x90>)
 8008bfe:	6813      	ldr	r3, [r2, #0]
 8008c00:	b933      	cbnz	r3, 8008c10 <_free_r+0x2c>
 8008c02:	6063      	str	r3, [r4, #4]
 8008c04:	6014      	str	r4, [r2, #0]
 8008c06:	4628      	mov	r0, r5
 8008c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c0c:	f000 b8dc 	b.w	8008dc8 <__malloc_unlock>
 8008c10:	42a3      	cmp	r3, r4
 8008c12:	d908      	bls.n	8008c26 <_free_r+0x42>
 8008c14:	6820      	ldr	r0, [r4, #0]
 8008c16:	1821      	adds	r1, r4, r0
 8008c18:	428b      	cmp	r3, r1
 8008c1a:	bf01      	itttt	eq
 8008c1c:	6819      	ldreq	r1, [r3, #0]
 8008c1e:	685b      	ldreq	r3, [r3, #4]
 8008c20:	1809      	addeq	r1, r1, r0
 8008c22:	6021      	streq	r1, [r4, #0]
 8008c24:	e7ed      	b.n	8008c02 <_free_r+0x1e>
 8008c26:	461a      	mov	r2, r3
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	b10b      	cbz	r3, 8008c30 <_free_r+0x4c>
 8008c2c:	42a3      	cmp	r3, r4
 8008c2e:	d9fa      	bls.n	8008c26 <_free_r+0x42>
 8008c30:	6811      	ldr	r1, [r2, #0]
 8008c32:	1850      	adds	r0, r2, r1
 8008c34:	42a0      	cmp	r0, r4
 8008c36:	d10b      	bne.n	8008c50 <_free_r+0x6c>
 8008c38:	6820      	ldr	r0, [r4, #0]
 8008c3a:	4401      	add	r1, r0
 8008c3c:	1850      	adds	r0, r2, r1
 8008c3e:	4283      	cmp	r3, r0
 8008c40:	6011      	str	r1, [r2, #0]
 8008c42:	d1e0      	bne.n	8008c06 <_free_r+0x22>
 8008c44:	6818      	ldr	r0, [r3, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	6053      	str	r3, [r2, #4]
 8008c4a:	4408      	add	r0, r1
 8008c4c:	6010      	str	r0, [r2, #0]
 8008c4e:	e7da      	b.n	8008c06 <_free_r+0x22>
 8008c50:	d902      	bls.n	8008c58 <_free_r+0x74>
 8008c52:	230c      	movs	r3, #12
 8008c54:	602b      	str	r3, [r5, #0]
 8008c56:	e7d6      	b.n	8008c06 <_free_r+0x22>
 8008c58:	6820      	ldr	r0, [r4, #0]
 8008c5a:	1821      	adds	r1, r4, r0
 8008c5c:	428b      	cmp	r3, r1
 8008c5e:	bf04      	itt	eq
 8008c60:	6819      	ldreq	r1, [r3, #0]
 8008c62:	685b      	ldreq	r3, [r3, #4]
 8008c64:	6063      	str	r3, [r4, #4]
 8008c66:	bf04      	itt	eq
 8008c68:	1809      	addeq	r1, r1, r0
 8008c6a:	6021      	streq	r1, [r4, #0]
 8008c6c:	6054      	str	r4, [r2, #4]
 8008c6e:	e7ca      	b.n	8008c06 <_free_r+0x22>
 8008c70:	bd38      	pop	{r3, r4, r5, pc}
 8008c72:	bf00      	nop
 8008c74:	20002dbc 	.word	0x20002dbc

08008c78 <sbrk_aligned>:
 8008c78:	b570      	push	{r4, r5, r6, lr}
 8008c7a:	4e0f      	ldr	r6, [pc, #60]	@ (8008cb8 <sbrk_aligned+0x40>)
 8008c7c:	460c      	mov	r4, r1
 8008c7e:	6831      	ldr	r1, [r6, #0]
 8008c80:	4605      	mov	r5, r0
 8008c82:	b911      	cbnz	r1, 8008c8a <sbrk_aligned+0x12>
 8008c84:	f000 fba6 	bl	80093d4 <_sbrk_r>
 8008c88:	6030      	str	r0, [r6, #0]
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	f000 fba1 	bl	80093d4 <_sbrk_r>
 8008c92:	1c43      	adds	r3, r0, #1
 8008c94:	d103      	bne.n	8008c9e <sbrk_aligned+0x26>
 8008c96:	f04f 34ff 	mov.w	r4, #4294967295
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	bd70      	pop	{r4, r5, r6, pc}
 8008c9e:	1cc4      	adds	r4, r0, #3
 8008ca0:	f024 0403 	bic.w	r4, r4, #3
 8008ca4:	42a0      	cmp	r0, r4
 8008ca6:	d0f8      	beq.n	8008c9a <sbrk_aligned+0x22>
 8008ca8:	1a21      	subs	r1, r4, r0
 8008caa:	4628      	mov	r0, r5
 8008cac:	f000 fb92 	bl	80093d4 <_sbrk_r>
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	d1f2      	bne.n	8008c9a <sbrk_aligned+0x22>
 8008cb4:	e7ef      	b.n	8008c96 <sbrk_aligned+0x1e>
 8008cb6:	bf00      	nop
 8008cb8:	20002db8 	.word	0x20002db8

08008cbc <_malloc_r>:
 8008cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cc0:	1ccd      	adds	r5, r1, #3
 8008cc2:	f025 0503 	bic.w	r5, r5, #3
 8008cc6:	3508      	adds	r5, #8
 8008cc8:	2d0c      	cmp	r5, #12
 8008cca:	bf38      	it	cc
 8008ccc:	250c      	movcc	r5, #12
 8008cce:	2d00      	cmp	r5, #0
 8008cd0:	4606      	mov	r6, r0
 8008cd2:	db01      	blt.n	8008cd8 <_malloc_r+0x1c>
 8008cd4:	42a9      	cmp	r1, r5
 8008cd6:	d904      	bls.n	8008ce2 <_malloc_r+0x26>
 8008cd8:	230c      	movs	r3, #12
 8008cda:	6033      	str	r3, [r6, #0]
 8008cdc:	2000      	movs	r0, #0
 8008cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ce2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008db8 <_malloc_r+0xfc>
 8008ce6:	f000 f869 	bl	8008dbc <__malloc_lock>
 8008cea:	f8d8 3000 	ldr.w	r3, [r8]
 8008cee:	461c      	mov	r4, r3
 8008cf0:	bb44      	cbnz	r4, 8008d44 <_malloc_r+0x88>
 8008cf2:	4629      	mov	r1, r5
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	f7ff ffbf 	bl	8008c78 <sbrk_aligned>
 8008cfa:	1c43      	adds	r3, r0, #1
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	d158      	bne.n	8008db2 <_malloc_r+0xf6>
 8008d00:	f8d8 4000 	ldr.w	r4, [r8]
 8008d04:	4627      	mov	r7, r4
 8008d06:	2f00      	cmp	r7, #0
 8008d08:	d143      	bne.n	8008d92 <_malloc_r+0xd6>
 8008d0a:	2c00      	cmp	r4, #0
 8008d0c:	d04b      	beq.n	8008da6 <_malloc_r+0xea>
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	4639      	mov	r1, r7
 8008d12:	4630      	mov	r0, r6
 8008d14:	eb04 0903 	add.w	r9, r4, r3
 8008d18:	f000 fb5c 	bl	80093d4 <_sbrk_r>
 8008d1c:	4581      	cmp	r9, r0
 8008d1e:	d142      	bne.n	8008da6 <_malloc_r+0xea>
 8008d20:	6821      	ldr	r1, [r4, #0]
 8008d22:	1a6d      	subs	r5, r5, r1
 8008d24:	4629      	mov	r1, r5
 8008d26:	4630      	mov	r0, r6
 8008d28:	f7ff ffa6 	bl	8008c78 <sbrk_aligned>
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	d03a      	beq.n	8008da6 <_malloc_r+0xea>
 8008d30:	6823      	ldr	r3, [r4, #0]
 8008d32:	442b      	add	r3, r5
 8008d34:	6023      	str	r3, [r4, #0]
 8008d36:	f8d8 3000 	ldr.w	r3, [r8]
 8008d3a:	685a      	ldr	r2, [r3, #4]
 8008d3c:	bb62      	cbnz	r2, 8008d98 <_malloc_r+0xdc>
 8008d3e:	f8c8 7000 	str.w	r7, [r8]
 8008d42:	e00f      	b.n	8008d64 <_malloc_r+0xa8>
 8008d44:	6822      	ldr	r2, [r4, #0]
 8008d46:	1b52      	subs	r2, r2, r5
 8008d48:	d420      	bmi.n	8008d8c <_malloc_r+0xd0>
 8008d4a:	2a0b      	cmp	r2, #11
 8008d4c:	d917      	bls.n	8008d7e <_malloc_r+0xc2>
 8008d4e:	1961      	adds	r1, r4, r5
 8008d50:	42a3      	cmp	r3, r4
 8008d52:	6025      	str	r5, [r4, #0]
 8008d54:	bf18      	it	ne
 8008d56:	6059      	strne	r1, [r3, #4]
 8008d58:	6863      	ldr	r3, [r4, #4]
 8008d5a:	bf08      	it	eq
 8008d5c:	f8c8 1000 	streq.w	r1, [r8]
 8008d60:	5162      	str	r2, [r4, r5]
 8008d62:	604b      	str	r3, [r1, #4]
 8008d64:	4630      	mov	r0, r6
 8008d66:	f000 f82f 	bl	8008dc8 <__malloc_unlock>
 8008d6a:	f104 000b 	add.w	r0, r4, #11
 8008d6e:	1d23      	adds	r3, r4, #4
 8008d70:	f020 0007 	bic.w	r0, r0, #7
 8008d74:	1ac2      	subs	r2, r0, r3
 8008d76:	bf1c      	itt	ne
 8008d78:	1a1b      	subne	r3, r3, r0
 8008d7a:	50a3      	strne	r3, [r4, r2]
 8008d7c:	e7af      	b.n	8008cde <_malloc_r+0x22>
 8008d7e:	6862      	ldr	r2, [r4, #4]
 8008d80:	42a3      	cmp	r3, r4
 8008d82:	bf0c      	ite	eq
 8008d84:	f8c8 2000 	streq.w	r2, [r8]
 8008d88:	605a      	strne	r2, [r3, #4]
 8008d8a:	e7eb      	b.n	8008d64 <_malloc_r+0xa8>
 8008d8c:	4623      	mov	r3, r4
 8008d8e:	6864      	ldr	r4, [r4, #4]
 8008d90:	e7ae      	b.n	8008cf0 <_malloc_r+0x34>
 8008d92:	463c      	mov	r4, r7
 8008d94:	687f      	ldr	r7, [r7, #4]
 8008d96:	e7b6      	b.n	8008d06 <_malloc_r+0x4a>
 8008d98:	461a      	mov	r2, r3
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	42a3      	cmp	r3, r4
 8008d9e:	d1fb      	bne.n	8008d98 <_malloc_r+0xdc>
 8008da0:	2300      	movs	r3, #0
 8008da2:	6053      	str	r3, [r2, #4]
 8008da4:	e7de      	b.n	8008d64 <_malloc_r+0xa8>
 8008da6:	230c      	movs	r3, #12
 8008da8:	6033      	str	r3, [r6, #0]
 8008daa:	4630      	mov	r0, r6
 8008dac:	f000 f80c 	bl	8008dc8 <__malloc_unlock>
 8008db0:	e794      	b.n	8008cdc <_malloc_r+0x20>
 8008db2:	6005      	str	r5, [r0, #0]
 8008db4:	e7d6      	b.n	8008d64 <_malloc_r+0xa8>
 8008db6:	bf00      	nop
 8008db8:	20002dbc 	.word	0x20002dbc

08008dbc <__malloc_lock>:
 8008dbc:	4801      	ldr	r0, [pc, #4]	@ (8008dc4 <__malloc_lock+0x8>)
 8008dbe:	f7ff bf01 	b.w	8008bc4 <__retarget_lock_acquire_recursive>
 8008dc2:	bf00      	nop
 8008dc4:	20002db4 	.word	0x20002db4

08008dc8 <__malloc_unlock>:
 8008dc8:	4801      	ldr	r0, [pc, #4]	@ (8008dd0 <__malloc_unlock+0x8>)
 8008dca:	f7ff befc 	b.w	8008bc6 <__retarget_lock_release_recursive>
 8008dce:	bf00      	nop
 8008dd0:	20002db4 	.word	0x20002db4

08008dd4 <__ssputs_r>:
 8008dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd8:	688e      	ldr	r6, [r1, #8]
 8008dda:	461f      	mov	r7, r3
 8008ddc:	42be      	cmp	r6, r7
 8008dde:	680b      	ldr	r3, [r1, #0]
 8008de0:	4682      	mov	sl, r0
 8008de2:	460c      	mov	r4, r1
 8008de4:	4690      	mov	r8, r2
 8008de6:	d82d      	bhi.n	8008e44 <__ssputs_r+0x70>
 8008de8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008dec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008df0:	d026      	beq.n	8008e40 <__ssputs_r+0x6c>
 8008df2:	6965      	ldr	r5, [r4, #20]
 8008df4:	6909      	ldr	r1, [r1, #16]
 8008df6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dfa:	eba3 0901 	sub.w	r9, r3, r1
 8008dfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e02:	1c7b      	adds	r3, r7, #1
 8008e04:	444b      	add	r3, r9
 8008e06:	106d      	asrs	r5, r5, #1
 8008e08:	429d      	cmp	r5, r3
 8008e0a:	bf38      	it	cc
 8008e0c:	461d      	movcc	r5, r3
 8008e0e:	0553      	lsls	r3, r2, #21
 8008e10:	d527      	bpl.n	8008e62 <__ssputs_r+0x8e>
 8008e12:	4629      	mov	r1, r5
 8008e14:	f7ff ff52 	bl	8008cbc <_malloc_r>
 8008e18:	4606      	mov	r6, r0
 8008e1a:	b360      	cbz	r0, 8008e76 <__ssputs_r+0xa2>
 8008e1c:	6921      	ldr	r1, [r4, #16]
 8008e1e:	464a      	mov	r2, r9
 8008e20:	f7ff fed2 	bl	8008bc8 <memcpy>
 8008e24:	89a3      	ldrh	r3, [r4, #12]
 8008e26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e2e:	81a3      	strh	r3, [r4, #12]
 8008e30:	6126      	str	r6, [r4, #16]
 8008e32:	6165      	str	r5, [r4, #20]
 8008e34:	444e      	add	r6, r9
 8008e36:	eba5 0509 	sub.w	r5, r5, r9
 8008e3a:	6026      	str	r6, [r4, #0]
 8008e3c:	60a5      	str	r5, [r4, #8]
 8008e3e:	463e      	mov	r6, r7
 8008e40:	42be      	cmp	r6, r7
 8008e42:	d900      	bls.n	8008e46 <__ssputs_r+0x72>
 8008e44:	463e      	mov	r6, r7
 8008e46:	6820      	ldr	r0, [r4, #0]
 8008e48:	4632      	mov	r2, r6
 8008e4a:	4641      	mov	r1, r8
 8008e4c:	f000 faa8 	bl	80093a0 <memmove>
 8008e50:	68a3      	ldr	r3, [r4, #8]
 8008e52:	1b9b      	subs	r3, r3, r6
 8008e54:	60a3      	str	r3, [r4, #8]
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	4433      	add	r3, r6
 8008e5a:	6023      	str	r3, [r4, #0]
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e62:	462a      	mov	r2, r5
 8008e64:	f000 fac6 	bl	80093f4 <_realloc_r>
 8008e68:	4606      	mov	r6, r0
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	d1e0      	bne.n	8008e30 <__ssputs_r+0x5c>
 8008e6e:	6921      	ldr	r1, [r4, #16]
 8008e70:	4650      	mov	r0, sl
 8008e72:	f7ff feb7 	bl	8008be4 <_free_r>
 8008e76:	230c      	movs	r3, #12
 8008e78:	f8ca 3000 	str.w	r3, [sl]
 8008e7c:	89a3      	ldrh	r3, [r4, #12]
 8008e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e82:	81a3      	strh	r3, [r4, #12]
 8008e84:	f04f 30ff 	mov.w	r0, #4294967295
 8008e88:	e7e9      	b.n	8008e5e <__ssputs_r+0x8a>
	...

08008e8c <_svfiprintf_r>:
 8008e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e90:	4698      	mov	r8, r3
 8008e92:	898b      	ldrh	r3, [r1, #12]
 8008e94:	061b      	lsls	r3, r3, #24
 8008e96:	b09d      	sub	sp, #116	@ 0x74
 8008e98:	4607      	mov	r7, r0
 8008e9a:	460d      	mov	r5, r1
 8008e9c:	4614      	mov	r4, r2
 8008e9e:	d510      	bpl.n	8008ec2 <_svfiprintf_r+0x36>
 8008ea0:	690b      	ldr	r3, [r1, #16]
 8008ea2:	b973      	cbnz	r3, 8008ec2 <_svfiprintf_r+0x36>
 8008ea4:	2140      	movs	r1, #64	@ 0x40
 8008ea6:	f7ff ff09 	bl	8008cbc <_malloc_r>
 8008eaa:	6028      	str	r0, [r5, #0]
 8008eac:	6128      	str	r0, [r5, #16]
 8008eae:	b930      	cbnz	r0, 8008ebe <_svfiprintf_r+0x32>
 8008eb0:	230c      	movs	r3, #12
 8008eb2:	603b      	str	r3, [r7, #0]
 8008eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb8:	b01d      	add	sp, #116	@ 0x74
 8008eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ebe:	2340      	movs	r3, #64	@ 0x40
 8008ec0:	616b      	str	r3, [r5, #20]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ec6:	2320      	movs	r3, #32
 8008ec8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ecc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ed0:	2330      	movs	r3, #48	@ 0x30
 8008ed2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009070 <_svfiprintf_r+0x1e4>
 8008ed6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008eda:	f04f 0901 	mov.w	r9, #1
 8008ede:	4623      	mov	r3, r4
 8008ee0:	469a      	mov	sl, r3
 8008ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ee6:	b10a      	cbz	r2, 8008eec <_svfiprintf_r+0x60>
 8008ee8:	2a25      	cmp	r2, #37	@ 0x25
 8008eea:	d1f9      	bne.n	8008ee0 <_svfiprintf_r+0x54>
 8008eec:	ebba 0b04 	subs.w	fp, sl, r4
 8008ef0:	d00b      	beq.n	8008f0a <_svfiprintf_r+0x7e>
 8008ef2:	465b      	mov	r3, fp
 8008ef4:	4622      	mov	r2, r4
 8008ef6:	4629      	mov	r1, r5
 8008ef8:	4638      	mov	r0, r7
 8008efa:	f7ff ff6b 	bl	8008dd4 <__ssputs_r>
 8008efe:	3001      	adds	r0, #1
 8008f00:	f000 80a7 	beq.w	8009052 <_svfiprintf_r+0x1c6>
 8008f04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f06:	445a      	add	r2, fp
 8008f08:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f000 809f 	beq.w	8009052 <_svfiprintf_r+0x1c6>
 8008f14:	2300      	movs	r3, #0
 8008f16:	f04f 32ff 	mov.w	r2, #4294967295
 8008f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f1e:	f10a 0a01 	add.w	sl, sl, #1
 8008f22:	9304      	str	r3, [sp, #16]
 8008f24:	9307      	str	r3, [sp, #28]
 8008f26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f2c:	4654      	mov	r4, sl
 8008f2e:	2205      	movs	r2, #5
 8008f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f34:	484e      	ldr	r0, [pc, #312]	@ (8009070 <_svfiprintf_r+0x1e4>)
 8008f36:	f7f7 f94b 	bl	80001d0 <memchr>
 8008f3a:	9a04      	ldr	r2, [sp, #16]
 8008f3c:	b9d8      	cbnz	r0, 8008f76 <_svfiprintf_r+0xea>
 8008f3e:	06d0      	lsls	r0, r2, #27
 8008f40:	bf44      	itt	mi
 8008f42:	2320      	movmi	r3, #32
 8008f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f48:	0711      	lsls	r1, r2, #28
 8008f4a:	bf44      	itt	mi
 8008f4c:	232b      	movmi	r3, #43	@ 0x2b
 8008f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f52:	f89a 3000 	ldrb.w	r3, [sl]
 8008f56:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f58:	d015      	beq.n	8008f86 <_svfiprintf_r+0xfa>
 8008f5a:	9a07      	ldr	r2, [sp, #28]
 8008f5c:	4654      	mov	r4, sl
 8008f5e:	2000      	movs	r0, #0
 8008f60:	f04f 0c0a 	mov.w	ip, #10
 8008f64:	4621      	mov	r1, r4
 8008f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f6a:	3b30      	subs	r3, #48	@ 0x30
 8008f6c:	2b09      	cmp	r3, #9
 8008f6e:	d94b      	bls.n	8009008 <_svfiprintf_r+0x17c>
 8008f70:	b1b0      	cbz	r0, 8008fa0 <_svfiprintf_r+0x114>
 8008f72:	9207      	str	r2, [sp, #28]
 8008f74:	e014      	b.n	8008fa0 <_svfiprintf_r+0x114>
 8008f76:	eba0 0308 	sub.w	r3, r0, r8
 8008f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	9304      	str	r3, [sp, #16]
 8008f82:	46a2      	mov	sl, r4
 8008f84:	e7d2      	b.n	8008f2c <_svfiprintf_r+0xa0>
 8008f86:	9b03      	ldr	r3, [sp, #12]
 8008f88:	1d19      	adds	r1, r3, #4
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	9103      	str	r1, [sp, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	bfbb      	ittet	lt
 8008f92:	425b      	neglt	r3, r3
 8008f94:	f042 0202 	orrlt.w	r2, r2, #2
 8008f98:	9307      	strge	r3, [sp, #28]
 8008f9a:	9307      	strlt	r3, [sp, #28]
 8008f9c:	bfb8      	it	lt
 8008f9e:	9204      	strlt	r2, [sp, #16]
 8008fa0:	7823      	ldrb	r3, [r4, #0]
 8008fa2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fa4:	d10a      	bne.n	8008fbc <_svfiprintf_r+0x130>
 8008fa6:	7863      	ldrb	r3, [r4, #1]
 8008fa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008faa:	d132      	bne.n	8009012 <_svfiprintf_r+0x186>
 8008fac:	9b03      	ldr	r3, [sp, #12]
 8008fae:	1d1a      	adds	r2, r3, #4
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	9203      	str	r2, [sp, #12]
 8008fb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fb8:	3402      	adds	r4, #2
 8008fba:	9305      	str	r3, [sp, #20]
 8008fbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009080 <_svfiprintf_r+0x1f4>
 8008fc0:	7821      	ldrb	r1, [r4, #0]
 8008fc2:	2203      	movs	r2, #3
 8008fc4:	4650      	mov	r0, sl
 8008fc6:	f7f7 f903 	bl	80001d0 <memchr>
 8008fca:	b138      	cbz	r0, 8008fdc <_svfiprintf_r+0x150>
 8008fcc:	9b04      	ldr	r3, [sp, #16]
 8008fce:	eba0 000a 	sub.w	r0, r0, sl
 8008fd2:	2240      	movs	r2, #64	@ 0x40
 8008fd4:	4082      	lsls	r2, r0
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	3401      	adds	r4, #1
 8008fda:	9304      	str	r3, [sp, #16]
 8008fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe0:	4824      	ldr	r0, [pc, #144]	@ (8009074 <_svfiprintf_r+0x1e8>)
 8008fe2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fe6:	2206      	movs	r2, #6
 8008fe8:	f7f7 f8f2 	bl	80001d0 <memchr>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d036      	beq.n	800905e <_svfiprintf_r+0x1d2>
 8008ff0:	4b21      	ldr	r3, [pc, #132]	@ (8009078 <_svfiprintf_r+0x1ec>)
 8008ff2:	bb1b      	cbnz	r3, 800903c <_svfiprintf_r+0x1b0>
 8008ff4:	9b03      	ldr	r3, [sp, #12]
 8008ff6:	3307      	adds	r3, #7
 8008ff8:	f023 0307 	bic.w	r3, r3, #7
 8008ffc:	3308      	adds	r3, #8
 8008ffe:	9303      	str	r3, [sp, #12]
 8009000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009002:	4433      	add	r3, r6
 8009004:	9309      	str	r3, [sp, #36]	@ 0x24
 8009006:	e76a      	b.n	8008ede <_svfiprintf_r+0x52>
 8009008:	fb0c 3202 	mla	r2, ip, r2, r3
 800900c:	460c      	mov	r4, r1
 800900e:	2001      	movs	r0, #1
 8009010:	e7a8      	b.n	8008f64 <_svfiprintf_r+0xd8>
 8009012:	2300      	movs	r3, #0
 8009014:	3401      	adds	r4, #1
 8009016:	9305      	str	r3, [sp, #20]
 8009018:	4619      	mov	r1, r3
 800901a:	f04f 0c0a 	mov.w	ip, #10
 800901e:	4620      	mov	r0, r4
 8009020:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009024:	3a30      	subs	r2, #48	@ 0x30
 8009026:	2a09      	cmp	r2, #9
 8009028:	d903      	bls.n	8009032 <_svfiprintf_r+0x1a6>
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0c6      	beq.n	8008fbc <_svfiprintf_r+0x130>
 800902e:	9105      	str	r1, [sp, #20]
 8009030:	e7c4      	b.n	8008fbc <_svfiprintf_r+0x130>
 8009032:	fb0c 2101 	mla	r1, ip, r1, r2
 8009036:	4604      	mov	r4, r0
 8009038:	2301      	movs	r3, #1
 800903a:	e7f0      	b.n	800901e <_svfiprintf_r+0x192>
 800903c:	ab03      	add	r3, sp, #12
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	462a      	mov	r2, r5
 8009042:	4b0e      	ldr	r3, [pc, #56]	@ (800907c <_svfiprintf_r+0x1f0>)
 8009044:	a904      	add	r1, sp, #16
 8009046:	4638      	mov	r0, r7
 8009048:	f3af 8000 	nop.w
 800904c:	1c42      	adds	r2, r0, #1
 800904e:	4606      	mov	r6, r0
 8009050:	d1d6      	bne.n	8009000 <_svfiprintf_r+0x174>
 8009052:	89ab      	ldrh	r3, [r5, #12]
 8009054:	065b      	lsls	r3, r3, #25
 8009056:	f53f af2d 	bmi.w	8008eb4 <_svfiprintf_r+0x28>
 800905a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800905c:	e72c      	b.n	8008eb8 <_svfiprintf_r+0x2c>
 800905e:	ab03      	add	r3, sp, #12
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	462a      	mov	r2, r5
 8009064:	4b05      	ldr	r3, [pc, #20]	@ (800907c <_svfiprintf_r+0x1f0>)
 8009066:	a904      	add	r1, sp, #16
 8009068:	4638      	mov	r0, r7
 800906a:	f000 f879 	bl	8009160 <_printf_i>
 800906e:	e7ed      	b.n	800904c <_svfiprintf_r+0x1c0>
 8009070:	080095cc 	.word	0x080095cc
 8009074:	080095d6 	.word	0x080095d6
 8009078:	00000000 	.word	0x00000000
 800907c:	08008dd5 	.word	0x08008dd5
 8009080:	080095d2 	.word	0x080095d2

08009084 <_printf_common>:
 8009084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009088:	4616      	mov	r6, r2
 800908a:	4698      	mov	r8, r3
 800908c:	688a      	ldr	r2, [r1, #8]
 800908e:	690b      	ldr	r3, [r1, #16]
 8009090:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009094:	4293      	cmp	r3, r2
 8009096:	bfb8      	it	lt
 8009098:	4613      	movlt	r3, r2
 800909a:	6033      	str	r3, [r6, #0]
 800909c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80090a0:	4607      	mov	r7, r0
 80090a2:	460c      	mov	r4, r1
 80090a4:	b10a      	cbz	r2, 80090aa <_printf_common+0x26>
 80090a6:	3301      	adds	r3, #1
 80090a8:	6033      	str	r3, [r6, #0]
 80090aa:	6823      	ldr	r3, [r4, #0]
 80090ac:	0699      	lsls	r1, r3, #26
 80090ae:	bf42      	ittt	mi
 80090b0:	6833      	ldrmi	r3, [r6, #0]
 80090b2:	3302      	addmi	r3, #2
 80090b4:	6033      	strmi	r3, [r6, #0]
 80090b6:	6825      	ldr	r5, [r4, #0]
 80090b8:	f015 0506 	ands.w	r5, r5, #6
 80090bc:	d106      	bne.n	80090cc <_printf_common+0x48>
 80090be:	f104 0a19 	add.w	sl, r4, #25
 80090c2:	68e3      	ldr	r3, [r4, #12]
 80090c4:	6832      	ldr	r2, [r6, #0]
 80090c6:	1a9b      	subs	r3, r3, r2
 80090c8:	42ab      	cmp	r3, r5
 80090ca:	dc26      	bgt.n	800911a <_printf_common+0x96>
 80090cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80090d0:	6822      	ldr	r2, [r4, #0]
 80090d2:	3b00      	subs	r3, #0
 80090d4:	bf18      	it	ne
 80090d6:	2301      	movne	r3, #1
 80090d8:	0692      	lsls	r2, r2, #26
 80090da:	d42b      	bmi.n	8009134 <_printf_common+0xb0>
 80090dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80090e0:	4641      	mov	r1, r8
 80090e2:	4638      	mov	r0, r7
 80090e4:	47c8      	blx	r9
 80090e6:	3001      	adds	r0, #1
 80090e8:	d01e      	beq.n	8009128 <_printf_common+0xa4>
 80090ea:	6823      	ldr	r3, [r4, #0]
 80090ec:	6922      	ldr	r2, [r4, #16]
 80090ee:	f003 0306 	and.w	r3, r3, #6
 80090f2:	2b04      	cmp	r3, #4
 80090f4:	bf02      	ittt	eq
 80090f6:	68e5      	ldreq	r5, [r4, #12]
 80090f8:	6833      	ldreq	r3, [r6, #0]
 80090fa:	1aed      	subeq	r5, r5, r3
 80090fc:	68a3      	ldr	r3, [r4, #8]
 80090fe:	bf0c      	ite	eq
 8009100:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009104:	2500      	movne	r5, #0
 8009106:	4293      	cmp	r3, r2
 8009108:	bfc4      	itt	gt
 800910a:	1a9b      	subgt	r3, r3, r2
 800910c:	18ed      	addgt	r5, r5, r3
 800910e:	2600      	movs	r6, #0
 8009110:	341a      	adds	r4, #26
 8009112:	42b5      	cmp	r5, r6
 8009114:	d11a      	bne.n	800914c <_printf_common+0xc8>
 8009116:	2000      	movs	r0, #0
 8009118:	e008      	b.n	800912c <_printf_common+0xa8>
 800911a:	2301      	movs	r3, #1
 800911c:	4652      	mov	r2, sl
 800911e:	4641      	mov	r1, r8
 8009120:	4638      	mov	r0, r7
 8009122:	47c8      	blx	r9
 8009124:	3001      	adds	r0, #1
 8009126:	d103      	bne.n	8009130 <_printf_common+0xac>
 8009128:	f04f 30ff 	mov.w	r0, #4294967295
 800912c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009130:	3501      	adds	r5, #1
 8009132:	e7c6      	b.n	80090c2 <_printf_common+0x3e>
 8009134:	18e1      	adds	r1, r4, r3
 8009136:	1c5a      	adds	r2, r3, #1
 8009138:	2030      	movs	r0, #48	@ 0x30
 800913a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800913e:	4422      	add	r2, r4
 8009140:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009144:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009148:	3302      	adds	r3, #2
 800914a:	e7c7      	b.n	80090dc <_printf_common+0x58>
 800914c:	2301      	movs	r3, #1
 800914e:	4622      	mov	r2, r4
 8009150:	4641      	mov	r1, r8
 8009152:	4638      	mov	r0, r7
 8009154:	47c8      	blx	r9
 8009156:	3001      	adds	r0, #1
 8009158:	d0e6      	beq.n	8009128 <_printf_common+0xa4>
 800915a:	3601      	adds	r6, #1
 800915c:	e7d9      	b.n	8009112 <_printf_common+0x8e>
	...

08009160 <_printf_i>:
 8009160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009164:	7e0f      	ldrb	r7, [r1, #24]
 8009166:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009168:	2f78      	cmp	r7, #120	@ 0x78
 800916a:	4691      	mov	r9, r2
 800916c:	4680      	mov	r8, r0
 800916e:	460c      	mov	r4, r1
 8009170:	469a      	mov	sl, r3
 8009172:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009176:	d807      	bhi.n	8009188 <_printf_i+0x28>
 8009178:	2f62      	cmp	r7, #98	@ 0x62
 800917a:	d80a      	bhi.n	8009192 <_printf_i+0x32>
 800917c:	2f00      	cmp	r7, #0
 800917e:	f000 80d2 	beq.w	8009326 <_printf_i+0x1c6>
 8009182:	2f58      	cmp	r7, #88	@ 0x58
 8009184:	f000 80b9 	beq.w	80092fa <_printf_i+0x19a>
 8009188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800918c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009190:	e03a      	b.n	8009208 <_printf_i+0xa8>
 8009192:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009196:	2b15      	cmp	r3, #21
 8009198:	d8f6      	bhi.n	8009188 <_printf_i+0x28>
 800919a:	a101      	add	r1, pc, #4	@ (adr r1, 80091a0 <_printf_i+0x40>)
 800919c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091a0:	080091f9 	.word	0x080091f9
 80091a4:	0800920d 	.word	0x0800920d
 80091a8:	08009189 	.word	0x08009189
 80091ac:	08009189 	.word	0x08009189
 80091b0:	08009189 	.word	0x08009189
 80091b4:	08009189 	.word	0x08009189
 80091b8:	0800920d 	.word	0x0800920d
 80091bc:	08009189 	.word	0x08009189
 80091c0:	08009189 	.word	0x08009189
 80091c4:	08009189 	.word	0x08009189
 80091c8:	08009189 	.word	0x08009189
 80091cc:	0800930d 	.word	0x0800930d
 80091d0:	08009237 	.word	0x08009237
 80091d4:	080092c7 	.word	0x080092c7
 80091d8:	08009189 	.word	0x08009189
 80091dc:	08009189 	.word	0x08009189
 80091e0:	0800932f 	.word	0x0800932f
 80091e4:	08009189 	.word	0x08009189
 80091e8:	08009237 	.word	0x08009237
 80091ec:	08009189 	.word	0x08009189
 80091f0:	08009189 	.word	0x08009189
 80091f4:	080092cf 	.word	0x080092cf
 80091f8:	6833      	ldr	r3, [r6, #0]
 80091fa:	1d1a      	adds	r2, r3, #4
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	6032      	str	r2, [r6, #0]
 8009200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009204:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009208:	2301      	movs	r3, #1
 800920a:	e09d      	b.n	8009348 <_printf_i+0x1e8>
 800920c:	6833      	ldr	r3, [r6, #0]
 800920e:	6820      	ldr	r0, [r4, #0]
 8009210:	1d19      	adds	r1, r3, #4
 8009212:	6031      	str	r1, [r6, #0]
 8009214:	0606      	lsls	r6, r0, #24
 8009216:	d501      	bpl.n	800921c <_printf_i+0xbc>
 8009218:	681d      	ldr	r5, [r3, #0]
 800921a:	e003      	b.n	8009224 <_printf_i+0xc4>
 800921c:	0645      	lsls	r5, r0, #25
 800921e:	d5fb      	bpl.n	8009218 <_printf_i+0xb8>
 8009220:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009224:	2d00      	cmp	r5, #0
 8009226:	da03      	bge.n	8009230 <_printf_i+0xd0>
 8009228:	232d      	movs	r3, #45	@ 0x2d
 800922a:	426d      	negs	r5, r5
 800922c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009230:	4859      	ldr	r0, [pc, #356]	@ (8009398 <_printf_i+0x238>)
 8009232:	230a      	movs	r3, #10
 8009234:	e011      	b.n	800925a <_printf_i+0xfa>
 8009236:	6821      	ldr	r1, [r4, #0]
 8009238:	6833      	ldr	r3, [r6, #0]
 800923a:	0608      	lsls	r0, r1, #24
 800923c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009240:	d402      	bmi.n	8009248 <_printf_i+0xe8>
 8009242:	0649      	lsls	r1, r1, #25
 8009244:	bf48      	it	mi
 8009246:	b2ad      	uxthmi	r5, r5
 8009248:	2f6f      	cmp	r7, #111	@ 0x6f
 800924a:	4853      	ldr	r0, [pc, #332]	@ (8009398 <_printf_i+0x238>)
 800924c:	6033      	str	r3, [r6, #0]
 800924e:	bf14      	ite	ne
 8009250:	230a      	movne	r3, #10
 8009252:	2308      	moveq	r3, #8
 8009254:	2100      	movs	r1, #0
 8009256:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800925a:	6866      	ldr	r6, [r4, #4]
 800925c:	60a6      	str	r6, [r4, #8]
 800925e:	2e00      	cmp	r6, #0
 8009260:	bfa2      	ittt	ge
 8009262:	6821      	ldrge	r1, [r4, #0]
 8009264:	f021 0104 	bicge.w	r1, r1, #4
 8009268:	6021      	strge	r1, [r4, #0]
 800926a:	b90d      	cbnz	r5, 8009270 <_printf_i+0x110>
 800926c:	2e00      	cmp	r6, #0
 800926e:	d04b      	beq.n	8009308 <_printf_i+0x1a8>
 8009270:	4616      	mov	r6, r2
 8009272:	fbb5 f1f3 	udiv	r1, r5, r3
 8009276:	fb03 5711 	mls	r7, r3, r1, r5
 800927a:	5dc7      	ldrb	r7, [r0, r7]
 800927c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009280:	462f      	mov	r7, r5
 8009282:	42bb      	cmp	r3, r7
 8009284:	460d      	mov	r5, r1
 8009286:	d9f4      	bls.n	8009272 <_printf_i+0x112>
 8009288:	2b08      	cmp	r3, #8
 800928a:	d10b      	bne.n	80092a4 <_printf_i+0x144>
 800928c:	6823      	ldr	r3, [r4, #0]
 800928e:	07df      	lsls	r7, r3, #31
 8009290:	d508      	bpl.n	80092a4 <_printf_i+0x144>
 8009292:	6923      	ldr	r3, [r4, #16]
 8009294:	6861      	ldr	r1, [r4, #4]
 8009296:	4299      	cmp	r1, r3
 8009298:	bfde      	ittt	le
 800929a:	2330      	movle	r3, #48	@ 0x30
 800929c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80092a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80092a4:	1b92      	subs	r2, r2, r6
 80092a6:	6122      	str	r2, [r4, #16]
 80092a8:	f8cd a000 	str.w	sl, [sp]
 80092ac:	464b      	mov	r3, r9
 80092ae:	aa03      	add	r2, sp, #12
 80092b0:	4621      	mov	r1, r4
 80092b2:	4640      	mov	r0, r8
 80092b4:	f7ff fee6 	bl	8009084 <_printf_common>
 80092b8:	3001      	adds	r0, #1
 80092ba:	d14a      	bne.n	8009352 <_printf_i+0x1f2>
 80092bc:	f04f 30ff 	mov.w	r0, #4294967295
 80092c0:	b004      	add	sp, #16
 80092c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c6:	6823      	ldr	r3, [r4, #0]
 80092c8:	f043 0320 	orr.w	r3, r3, #32
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	4833      	ldr	r0, [pc, #204]	@ (800939c <_printf_i+0x23c>)
 80092d0:	2778      	movs	r7, #120	@ 0x78
 80092d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	6831      	ldr	r1, [r6, #0]
 80092da:	061f      	lsls	r7, r3, #24
 80092dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80092e0:	d402      	bmi.n	80092e8 <_printf_i+0x188>
 80092e2:	065f      	lsls	r7, r3, #25
 80092e4:	bf48      	it	mi
 80092e6:	b2ad      	uxthmi	r5, r5
 80092e8:	6031      	str	r1, [r6, #0]
 80092ea:	07d9      	lsls	r1, r3, #31
 80092ec:	bf44      	itt	mi
 80092ee:	f043 0320 	orrmi.w	r3, r3, #32
 80092f2:	6023      	strmi	r3, [r4, #0]
 80092f4:	b11d      	cbz	r5, 80092fe <_printf_i+0x19e>
 80092f6:	2310      	movs	r3, #16
 80092f8:	e7ac      	b.n	8009254 <_printf_i+0xf4>
 80092fa:	4827      	ldr	r0, [pc, #156]	@ (8009398 <_printf_i+0x238>)
 80092fc:	e7e9      	b.n	80092d2 <_printf_i+0x172>
 80092fe:	6823      	ldr	r3, [r4, #0]
 8009300:	f023 0320 	bic.w	r3, r3, #32
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	e7f6      	b.n	80092f6 <_printf_i+0x196>
 8009308:	4616      	mov	r6, r2
 800930a:	e7bd      	b.n	8009288 <_printf_i+0x128>
 800930c:	6833      	ldr	r3, [r6, #0]
 800930e:	6825      	ldr	r5, [r4, #0]
 8009310:	6961      	ldr	r1, [r4, #20]
 8009312:	1d18      	adds	r0, r3, #4
 8009314:	6030      	str	r0, [r6, #0]
 8009316:	062e      	lsls	r6, r5, #24
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	d501      	bpl.n	8009320 <_printf_i+0x1c0>
 800931c:	6019      	str	r1, [r3, #0]
 800931e:	e002      	b.n	8009326 <_printf_i+0x1c6>
 8009320:	0668      	lsls	r0, r5, #25
 8009322:	d5fb      	bpl.n	800931c <_printf_i+0x1bc>
 8009324:	8019      	strh	r1, [r3, #0]
 8009326:	2300      	movs	r3, #0
 8009328:	6123      	str	r3, [r4, #16]
 800932a:	4616      	mov	r6, r2
 800932c:	e7bc      	b.n	80092a8 <_printf_i+0x148>
 800932e:	6833      	ldr	r3, [r6, #0]
 8009330:	1d1a      	adds	r2, r3, #4
 8009332:	6032      	str	r2, [r6, #0]
 8009334:	681e      	ldr	r6, [r3, #0]
 8009336:	6862      	ldr	r2, [r4, #4]
 8009338:	2100      	movs	r1, #0
 800933a:	4630      	mov	r0, r6
 800933c:	f7f6 ff48 	bl	80001d0 <memchr>
 8009340:	b108      	cbz	r0, 8009346 <_printf_i+0x1e6>
 8009342:	1b80      	subs	r0, r0, r6
 8009344:	6060      	str	r0, [r4, #4]
 8009346:	6863      	ldr	r3, [r4, #4]
 8009348:	6123      	str	r3, [r4, #16]
 800934a:	2300      	movs	r3, #0
 800934c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009350:	e7aa      	b.n	80092a8 <_printf_i+0x148>
 8009352:	6923      	ldr	r3, [r4, #16]
 8009354:	4632      	mov	r2, r6
 8009356:	4649      	mov	r1, r9
 8009358:	4640      	mov	r0, r8
 800935a:	47d0      	blx	sl
 800935c:	3001      	adds	r0, #1
 800935e:	d0ad      	beq.n	80092bc <_printf_i+0x15c>
 8009360:	6823      	ldr	r3, [r4, #0]
 8009362:	079b      	lsls	r3, r3, #30
 8009364:	d413      	bmi.n	800938e <_printf_i+0x22e>
 8009366:	68e0      	ldr	r0, [r4, #12]
 8009368:	9b03      	ldr	r3, [sp, #12]
 800936a:	4298      	cmp	r0, r3
 800936c:	bfb8      	it	lt
 800936e:	4618      	movlt	r0, r3
 8009370:	e7a6      	b.n	80092c0 <_printf_i+0x160>
 8009372:	2301      	movs	r3, #1
 8009374:	4632      	mov	r2, r6
 8009376:	4649      	mov	r1, r9
 8009378:	4640      	mov	r0, r8
 800937a:	47d0      	blx	sl
 800937c:	3001      	adds	r0, #1
 800937e:	d09d      	beq.n	80092bc <_printf_i+0x15c>
 8009380:	3501      	adds	r5, #1
 8009382:	68e3      	ldr	r3, [r4, #12]
 8009384:	9903      	ldr	r1, [sp, #12]
 8009386:	1a5b      	subs	r3, r3, r1
 8009388:	42ab      	cmp	r3, r5
 800938a:	dcf2      	bgt.n	8009372 <_printf_i+0x212>
 800938c:	e7eb      	b.n	8009366 <_printf_i+0x206>
 800938e:	2500      	movs	r5, #0
 8009390:	f104 0619 	add.w	r6, r4, #25
 8009394:	e7f5      	b.n	8009382 <_printf_i+0x222>
 8009396:	bf00      	nop
 8009398:	080095dd 	.word	0x080095dd
 800939c:	080095ee 	.word	0x080095ee

080093a0 <memmove>:
 80093a0:	4288      	cmp	r0, r1
 80093a2:	b510      	push	{r4, lr}
 80093a4:	eb01 0402 	add.w	r4, r1, r2
 80093a8:	d902      	bls.n	80093b0 <memmove+0x10>
 80093aa:	4284      	cmp	r4, r0
 80093ac:	4623      	mov	r3, r4
 80093ae:	d807      	bhi.n	80093c0 <memmove+0x20>
 80093b0:	1e43      	subs	r3, r0, #1
 80093b2:	42a1      	cmp	r1, r4
 80093b4:	d008      	beq.n	80093c8 <memmove+0x28>
 80093b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093be:	e7f8      	b.n	80093b2 <memmove+0x12>
 80093c0:	4402      	add	r2, r0
 80093c2:	4601      	mov	r1, r0
 80093c4:	428a      	cmp	r2, r1
 80093c6:	d100      	bne.n	80093ca <memmove+0x2a>
 80093c8:	bd10      	pop	{r4, pc}
 80093ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093d2:	e7f7      	b.n	80093c4 <memmove+0x24>

080093d4 <_sbrk_r>:
 80093d4:	b538      	push	{r3, r4, r5, lr}
 80093d6:	4d06      	ldr	r5, [pc, #24]	@ (80093f0 <_sbrk_r+0x1c>)
 80093d8:	2300      	movs	r3, #0
 80093da:	4604      	mov	r4, r0
 80093dc:	4608      	mov	r0, r1
 80093de:	602b      	str	r3, [r5, #0]
 80093e0:	f7f8 f88a 	bl	80014f8 <_sbrk>
 80093e4:	1c43      	adds	r3, r0, #1
 80093e6:	d102      	bne.n	80093ee <_sbrk_r+0x1a>
 80093e8:	682b      	ldr	r3, [r5, #0]
 80093ea:	b103      	cbz	r3, 80093ee <_sbrk_r+0x1a>
 80093ec:	6023      	str	r3, [r4, #0]
 80093ee:	bd38      	pop	{r3, r4, r5, pc}
 80093f0:	20002db0 	.word	0x20002db0

080093f4 <_realloc_r>:
 80093f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093f8:	4680      	mov	r8, r0
 80093fa:	4615      	mov	r5, r2
 80093fc:	460c      	mov	r4, r1
 80093fe:	b921      	cbnz	r1, 800940a <_realloc_r+0x16>
 8009400:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009404:	4611      	mov	r1, r2
 8009406:	f7ff bc59 	b.w	8008cbc <_malloc_r>
 800940a:	b92a      	cbnz	r2, 8009418 <_realloc_r+0x24>
 800940c:	f7ff fbea 	bl	8008be4 <_free_r>
 8009410:	2400      	movs	r4, #0
 8009412:	4620      	mov	r0, r4
 8009414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009418:	f000 f81a 	bl	8009450 <_malloc_usable_size_r>
 800941c:	4285      	cmp	r5, r0
 800941e:	4606      	mov	r6, r0
 8009420:	d802      	bhi.n	8009428 <_realloc_r+0x34>
 8009422:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009426:	d8f4      	bhi.n	8009412 <_realloc_r+0x1e>
 8009428:	4629      	mov	r1, r5
 800942a:	4640      	mov	r0, r8
 800942c:	f7ff fc46 	bl	8008cbc <_malloc_r>
 8009430:	4607      	mov	r7, r0
 8009432:	2800      	cmp	r0, #0
 8009434:	d0ec      	beq.n	8009410 <_realloc_r+0x1c>
 8009436:	42b5      	cmp	r5, r6
 8009438:	462a      	mov	r2, r5
 800943a:	4621      	mov	r1, r4
 800943c:	bf28      	it	cs
 800943e:	4632      	movcs	r2, r6
 8009440:	f7ff fbc2 	bl	8008bc8 <memcpy>
 8009444:	4621      	mov	r1, r4
 8009446:	4640      	mov	r0, r8
 8009448:	f7ff fbcc 	bl	8008be4 <_free_r>
 800944c:	463c      	mov	r4, r7
 800944e:	e7e0      	b.n	8009412 <_realloc_r+0x1e>

08009450 <_malloc_usable_size_r>:
 8009450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009454:	1f18      	subs	r0, r3, #4
 8009456:	2b00      	cmp	r3, #0
 8009458:	bfbc      	itt	lt
 800945a:	580b      	ldrlt	r3, [r1, r0]
 800945c:	18c0      	addlt	r0, r0, r3
 800945e:	4770      	bx	lr

08009460 <_init>:
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	bf00      	nop
 8009464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009466:	bc08      	pop	{r3}
 8009468:	469e      	mov	lr, r3
 800946a:	4770      	bx	lr

0800946c <_fini>:
 800946c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946e:	bf00      	nop
 8009470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009472:	bc08      	pop	{r3}
 8009474:	469e      	mov	lr, r3
 8009476:	4770      	bx	lr
