
Lab5p1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ea0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  0800a030  0800a030  0000b030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a210  0800a210  0000c06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a210  0800a210  0000b210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a218  0800a218  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a218  0800a218  0000b218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a21c  0800a21c  0000b21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800a220  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002df8  2000006c  0800a28c  0000c06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e64  0800a28c  0000ce64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027999  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e2b  00000000  00000000  00033a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002428  00000000  00000000  00038860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c2b  00000000  00000000  0003ac88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006438  00000000  00000000  0003c8b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029027  00000000  00000000  00042ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a81c  00000000  00000000  0006bd12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017652e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a550  00000000  00000000  00176574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00180ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a018 	.word	0x0800a018

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800a018 	.word	0x0800a018

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000568:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800056c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	2b00      	cmp	r3, #0
 8000576:	d013      	beq.n	80005a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000578:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800057c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000580:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00b      	beq.n	80005a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000588:	e000      	b.n	800058c <ITM_SendChar+0x2c>
    {
      __NOP();
 800058a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800058c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f9      	beq.n	800058a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000596:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005a0:	687b      	ldr	r3, [r7, #4]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b086      	sub	sp, #24
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	60f8      	str	r0, [r7, #12]
 80005b6:	60b9      	str	r1, [r7, #8]
 80005b8:	607a      	str	r2, [r7, #4]


 for (int i = 0; i < len; i++) {
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	e009      	b.n	80005d4 <_write+0x26>


 ITM_SendChar((*ptr++));
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	1c5a      	adds	r2, r3, #1
 80005c4:	60ba      	str	r2, [r7, #8]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ffc9 	bl	8000560 <ITM_SendChar>
 for (int i = 0; i < len; i++) {
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	3301      	adds	r3, #1
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	429a      	cmp	r2, r3
 80005da:	dbf1      	blt.n	80005c0 <_write+0x12>


 }


 return len;
 80005dc:	687b      	ldr	r3, [r7, #4]


}
 80005de:	4618      	mov	r0, r3
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f001 f96c 	bl	80018ca <HAL_Init>

  /* USER CODE BEGIN Init */
  printf("Starting\n");
 80005f2:	4838      	ldr	r0, [pc, #224]	@ (80006d4 <main+0xec>)
 80005f4:	f008 fcc2 	bl	8008f7c <puts>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f898 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 fa82 	bl	8000b04 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000600:	f000 f8f6 	bl	80007f0 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000604:	f000 f92c 	bl	8000860 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000608:	f000 f96a 	bl	80008e0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800060c:	f000 f98e 	bl	800092c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000610:	f000 fa1a 	bl	8000a48 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000614:	f000 fa48 	bl	8000aa8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM16_Init();
 8000618:	f000 f9c6 	bl	80009a8 <MX_TIM16_Init>
  MX_TIM17_Init();
 800061c:	f000 f9ec 	bl	80009f8 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8000620:	482d      	ldr	r0, [pc, #180]	@ (80006d8 <main+0xf0>)
 8000622:	f003 fd2f 	bl	8004084 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim17);
 8000626:	482d      	ldr	r0, [pc, #180]	@ (80006dc <main+0xf4>)
 8000628:	f003 fd2c 	bl	8004084 <HAL_TIM_Base_Start_IT>
  uint8_t msg[] = "=====> starting \r\n ";
 800062c:	4b2c      	ldr	r3, [pc, #176]	@ (80006e0 <main+0xf8>)
 800062e:	463c      	mov	r4, r7
 8000630:	461d      	mov	r5, r3
 8000632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000636:	682b      	ldr	r3, [r5, #0]
 8000638:	6023      	str	r3, [r4, #0]
  HAL_UART_Transmit(&huart1,msg,sizeof(msg),1000);
 800063a:	4639      	mov	r1, r7
 800063c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000640:	2214      	movs	r2, #20
 8000642:	4828      	ldr	r0, [pc, #160]	@ (80006e4 <main+0xfc>)
 8000644:	f003 ffd0 	bl	80045e8 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000648:	f005 f81c 	bl	8005684 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of set */
  setHandle = osSemaphoreNew(1, 0, &set_attributes);
 800064c:	4a26      	ldr	r2, [pc, #152]	@ (80006e8 <main+0x100>)
 800064e:	2100      	movs	r1, #0
 8000650:	2001      	movs	r0, #1
 8000652:	f005 fab8 	bl	8005bc6 <osSemaphoreNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a24      	ldr	r2, [pc, #144]	@ (80006ec <main+0x104>)
 800065a:	6013      	str	r3, [r2, #0]

  /* creation of sendData */
  sendDataHandle = osSemaphoreNew(1, 1, &sendData_attributes);
 800065c:	4a24      	ldr	r2, [pc, #144]	@ (80006f0 <main+0x108>)
 800065e:	2101      	movs	r1, #1
 8000660:	2001      	movs	r0, #1
 8000662:	f005 fab0 	bl	8005bc6 <osSemaphoreNew>
 8000666:	4603      	mov	r3, r0
 8000668:	4a22      	ldr	r2, [pc, #136]	@ (80006f4 <main+0x10c>)
 800066a:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of HTIM1 */
  HTIM1Handle = osTimerNew(Callback1, osTimerPeriodic, NULL, &HTIM1_attributes);
 800066c:	4b22      	ldr	r3, [pc, #136]	@ (80006f8 <main+0x110>)
 800066e:	2200      	movs	r2, #0
 8000670:	2101      	movs	r1, #1
 8000672:	4822      	ldr	r0, [pc, #136]	@ (80006fc <main+0x114>)
 8000674:	f005 f9c6 	bl	8005a04 <osTimerNew>
 8000678:	4603      	mov	r3, r0
 800067a:	4a21      	ldr	r2, [pc, #132]	@ (8000700 <main+0x118>)
 800067c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  int stat = osTimerStart(HTIM1Handle, 1000);
 800067e:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <main+0x118>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000686:	4618      	mov	r0, r3
 8000688:	f005 fa38 	bl	8005afc <osTimerStart>
 800068c:	6178      	str	r0, [r7, #20]
  if (stat == osOK) {
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d103      	bne.n	800069c <main+0xb4>
	  printf("Timer is good %d\n",stat);
 8000694:	6979      	ldr	r1, [r7, #20]
 8000696:	481b      	ldr	r0, [pc, #108]	@ (8000704 <main+0x11c>)
 8000698:	f008 fc08 	bl	8008eac <iprintf>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800069c:	4a1a      	ldr	r2, [pc, #104]	@ (8000708 <main+0x120>)
 800069e:	2100      	movs	r1, #0
 80006a0:	481a      	ldr	r0, [pc, #104]	@ (800070c <main+0x124>)
 80006a2:	f005 f839 	bl	8005718 <osThreadNew>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a19      	ldr	r2, [pc, #100]	@ (8000710 <main+0x128>)
 80006aa:	6013      	str	r3, [r2, #0]

  /* creation of LEDlen */
  LEDlenHandle = osThreadNew(StartTask02, NULL, &LEDlen_attributes);
 80006ac:	4a19      	ldr	r2, [pc, #100]	@ (8000714 <main+0x12c>)
 80006ae:	2100      	movs	r1, #0
 80006b0:	4819      	ldr	r0, [pc, #100]	@ (8000718 <main+0x130>)
 80006b2:	f005 f831 	bl	8005718 <osThreadNew>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a18      	ldr	r2, [pc, #96]	@ (800071c <main+0x134>)
 80006ba:	6013      	str	r3, [r2, #0]

  /* creation of PrintTask */
  PrintTaskHandle = osThreadNew(StartTask03, NULL, &PrintTask_attributes);
 80006bc:	4a18      	ldr	r2, [pc, #96]	@ (8000720 <main+0x138>)
 80006be:	2100      	movs	r1, #0
 80006c0:	4818      	ldr	r0, [pc, #96]	@ (8000724 <main+0x13c>)
 80006c2:	f005 f829 	bl	8005718 <osThreadNew>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a17      	ldr	r2, [pc, #92]	@ (8000728 <main+0x140>)
 80006ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006cc:	f004 fffe 	bl	80056cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <main+0xe8>
 80006d4:	0800a068 	.word	0x0800a068
 80006d8:	200001bc 	.word	0x200001bc
 80006dc:	20000208 	.word	0x20000208
 80006e0:	0800a088 	.word	0x0800a088
 80006e4:	20000254 	.word	0x20000254
 80006e8:	0800a174 	.word	0x0800a174
 80006ec:	200007d0 	.word	0x200007d0
 80006f0:	0800a184 	.word	0x0800a184
 80006f4:	200007d4 	.word	0x200007d4
 80006f8:	0800a164 	.word	0x0800a164
 80006fc:	08000fa1 	.word	0x08000fa1
 8000700:	200007cc 	.word	0x200007cc
 8000704:	0800a074 	.word	0x0800a074
 8000708:	0800a0f8 	.word	0x0800a0f8
 800070c:	08000eb9 	.word	0x08000eb9
 8000710:	200007c0 	.word	0x200007c0
 8000714:	0800a11c 	.word	0x0800a11c
 8000718:	08000ec5 	.word	0x08000ec5
 800071c:	200007c4 	.word	0x200007c4
 8000720:	0800a140 	.word	0x0800a140
 8000724:	08000f4d 	.word	0x08000f4d
 8000728:	200007c8 	.word	0x200007c8

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b096      	sub	sp, #88	@ 0x58
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2244      	movs	r2, #68	@ 0x44
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f008 fd32 	bl	80091a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	463b      	mov	r3, r7
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800074e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000752:	f001 ff7d 	bl	8002650 <HAL_PWREx_ControlVoltageScaling>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800075c:	f000 fc62 	bl	8001024 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000760:	f001 ff58 	bl	8002614 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000764:	4b21      	ldr	r3, [pc, #132]	@ (80007ec <SystemClock_Config+0xc0>)
 8000766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800076a:	4a20      	ldr	r2, [pc, #128]	@ (80007ec <SystemClock_Config+0xc0>)
 800076c:	f023 0318 	bic.w	r3, r3, #24
 8000770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000774:	2314      	movs	r3, #20
 8000776:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800077c:	2301      	movs	r3, #1
 800077e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000784:	2360      	movs	r3, #96	@ 0x60
 8000786:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	2302      	movs	r3, #2
 800078a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800078c:	2301      	movs	r3, #1
 800078e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000790:	2301      	movs	r3, #1
 8000792:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000794:	2328      	movs	r3, #40	@ 0x28
 8000796:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000798:	2307      	movs	r3, #7
 800079a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800079c:	2302      	movs	r3, #2
 800079e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4618      	mov	r0, r3
 80007aa:	f002 f873 	bl	8002894 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007b4:	f000 fc36 	bl	8001024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2303      	movs	r3, #3
 80007be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007cc:	463b      	mov	r3, r7
 80007ce:	2104      	movs	r1, #4
 80007d0:	4618      	mov	r0, r3
 80007d2:	f002 fc3b 	bl	800304c <HAL_RCC_ClockConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007dc:	f000 fc22 	bl	8001024 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007e0:	f003 f974 	bl	8003acc <HAL_RCCEx_EnableMSIPLLMode>
}
 80007e4:	bf00      	nop
 80007e6:	3758      	adds	r7, #88	@ 0x58
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40021000 	.word	0x40021000

080007f0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80007f4:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <MX_DFSDM1_Init+0x68>)
 80007f6:	4a19      	ldr	r2, [pc, #100]	@ (800085c <MX_DFSDM1_Init+0x6c>)
 80007f8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80007fa:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <MX_DFSDM1_Init+0x68>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000800:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <MX_DFSDM1_Init+0x68>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000806:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_DFSDM1_Init+0x68>)
 8000808:	2202      	movs	r2, #2
 800080a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <MX_DFSDM1_Init+0x68>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_DFSDM1_Init+0x68>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_DFSDM1_Init+0x68>)
 800081a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800081e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000820:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <MX_DFSDM1_Init+0x68>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_DFSDM1_Init+0x68>)
 8000828:	2204      	movs	r2, #4
 800082a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800082c:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <MX_DFSDM1_Init+0x68>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_DFSDM1_Init+0x68>)
 8000834:	2201      	movs	r2, #1
 8000836:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000838:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <MX_DFSDM1_Init+0x68>)
 800083a:	2200      	movs	r2, #0
 800083c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_DFSDM1_Init+0x68>)
 8000840:	2200      	movs	r2, #0
 8000842:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	@ (8000858 <MX_DFSDM1_Init+0x68>)
 8000846:	f001 f97f 	bl	8001b48 <HAL_DFSDM_ChannelInit>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000850:	f000 fbe8 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000088 	.word	0x20000088
 800085c:	40016020 	.word	0x40016020

08000860 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000864:	4b1b      	ldr	r3, [pc, #108]	@ (80008d4 <MX_I2C2_Init+0x74>)
 8000866:	4a1c      	ldr	r2, [pc, #112]	@ (80008d8 <MX_I2C2_Init+0x78>)
 8000868:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800086a:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <MX_I2C2_Init+0x74>)
 800086c:	4a1b      	ldr	r2, [pc, #108]	@ (80008dc <MX_I2C2_Init+0x7c>)
 800086e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000870:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <MX_I2C2_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000876:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <MX_I2C2_Init+0x74>)
 8000878:	2201      	movs	r2, #1
 800087a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <MX_I2C2_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000882:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <MX_I2C2_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000888:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <MX_I2C2_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088e:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <MX_I2C2_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000894:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <MX_I2C2_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800089a:	480e      	ldr	r0, [pc, #56]	@ (80008d4 <MX_I2C2_Init+0x74>)
 800089c:	f001 fc54 	bl	8002148 <HAL_I2C_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008a6:	f000 fbbd 	bl	8001024 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008aa:	2100      	movs	r1, #0
 80008ac:	4809      	ldr	r0, [pc, #36]	@ (80008d4 <MX_I2C2_Init+0x74>)
 80008ae:	f001 fce6 	bl	800227e <HAL_I2CEx_ConfigAnalogFilter>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008b8:	f000 fbb4 	bl	8001024 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008bc:	2100      	movs	r1, #0
 80008be:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <MX_I2C2_Init+0x74>)
 80008c0:	f001 fd28 	bl	8002314 <HAL_I2CEx_ConfigDigitalFilter>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008ca:	f000 fbab 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000c0 	.word	0x200000c0
 80008d8:	40005800 	.word	0x40005800
 80008dc:	10d19ce4 	.word	0x10d19ce4

080008e0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <MX_QUADSPI_Init+0x44>)
 80008e6:	4a10      	ldr	r2, [pc, #64]	@ (8000928 <MX_QUADSPI_Init+0x48>)
 80008e8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <MX_QUADSPI_Init+0x44>)
 80008ec:	2202      	movs	r2, #2
 80008ee:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <MX_QUADSPI_Init+0x44>)
 80008f2:	2204      	movs	r2, #4
 80008f4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <MX_QUADSPI_Init+0x44>)
 80008f8:	2210      	movs	r2, #16
 80008fa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80008fc:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <MX_QUADSPI_Init+0x44>)
 80008fe:	2217      	movs	r2, #23
 8000900:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000902:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <MX_QUADSPI_Init+0x44>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <MX_QUADSPI_Init+0x44>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	@ (8000924 <MX_QUADSPI_Init+0x44>)
 8000910:	f001 ff04 	bl	800271c <HAL_QSPI_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800091a:	f000 fb83 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000114 	.word	0x20000114
 8000928:	a0001000 	.word	0xa0001000

0800092c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <MX_SPI3_Init+0x74>)
 8000932:	4a1c      	ldr	r2, [pc, #112]	@ (80009a4 <MX_SPI3_Init+0x78>)
 8000934:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <MX_SPI3_Init+0x74>)
 8000938:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800093c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800093e:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <MX_SPI3_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000944:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <MX_SPI3_Init+0x74>)
 8000946:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800094a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094c:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <MX_SPI3_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <MX_SPI3_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000958:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_SPI3_Init+0x74>)
 800095a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800095e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <MX_SPI3_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <MX_SPI3_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <MX_SPI3_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <MX_SPI3_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000978:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <MX_SPI3_Init+0x74>)
 800097a:	2207      	movs	r2, #7
 800097c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800097e:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <MX_SPI3_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <MX_SPI3_Init+0x74>)
 8000986:	2208      	movs	r2, #8
 8000988:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_SPI3_Init+0x74>)
 800098c:	f003 fa80 	bl	8003e90 <HAL_SPI_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000996:	f000 fb45 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000158 	.word	0x20000158
 80009a4:	40003c00 	.word	0x40003c00

080009a8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009ac:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <MX_TIM16_Init+0x48>)
 80009ae:	4a11      	ldr	r2, [pc, #68]	@ (80009f4 <MX_TIM16_Init+0x4c>)
 80009b0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_TIM16_Init+0x48>)
 80009b4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80009b8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ba:	4b0d      	ldr	r3, [pc, #52]	@ (80009f0 <MX_TIM16_Init+0x48>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 80009c0:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <MX_TIM16_Init+0x48>)
 80009c2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80009c6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c8:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <MX_TIM16_Init+0x48>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <MX_TIM16_Init+0x48>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_TIM16_Init+0x48>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_TIM16_Init+0x48>)
 80009dc:	f003 fafb 	bl	8003fd6 <HAL_TIM_Base_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80009e6:	f000 fb1d 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200001bc 	.word	0x200001bc
 80009f4:	40014400 	.word	0x40014400

080009f8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80009fc:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <MX_TIM17_Init+0x48>)
 80009fe:	4a11      	ldr	r2, [pc, #68]	@ (8000a44 <MX_TIM17_Init+0x4c>)
 8000a00:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8000-1;
 8000a02:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <MX_TIM17_Init+0x48>)
 8000a04:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000a08:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <MX_TIM17_Init+0x48>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10000-1;
 8000a10:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <MX_TIM17_Init+0x48>)
 8000a12:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000a16:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a18:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <MX_TIM17_Init+0x48>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <MX_TIM17_Init+0x48>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <MX_TIM17_Init+0x48>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <MX_TIM17_Init+0x48>)
 8000a2c:	f003 fad3 	bl	8003fd6 <HAL_TIM_Base_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8000a36:	f000 faf5 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000208 	.word	0x20000208
 8000a44:	40014800 	.word	0x40014800

08000a48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <MX_USART1_UART_Init+0x58>)
 8000a4e:	4a15      	ldr	r2, [pc, #84]	@ (8000aa4 <MX_USART1_UART_Init+0x5c>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a52:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <MX_USART1_UART_Init+0x58>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <MX_USART1_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <MX_USART1_UART_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <MX_USART1_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <MX_USART1_UART_Init+0x58>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <MX_USART1_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <MX_USART1_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <MX_USART1_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <MX_USART1_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <MX_USART1_UART_Init+0x58>)
 8000a8c:	f003 fd5e 	bl	800454c <HAL_UART_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a96:	f000 fac5 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000254 	.word	0x20000254
 8000aa4:	40013800 	.word	0x40013800

08000aa8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000aac:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ab2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab6:	2206      	movs	r2, #6
 8000ab8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abc:	2202      	movs	r2, #2
 8000abe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aec:	f001 fc5e 	bl	80023ac <HAL_PCD_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000af6:	f000 fa95 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200002dc 	.word	0x200002dc

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	@ 0x28
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1a:	4bbd      	ldr	r3, [pc, #756]	@ (8000e10 <MX_GPIO_Init+0x30c>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1e:	4abc      	ldr	r2, [pc, #752]	@ (8000e10 <MX_GPIO_Init+0x30c>)
 8000b20:	f043 0310 	orr.w	r3, r3, #16
 8000b24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b26:	4bba      	ldr	r3, [pc, #744]	@ (8000e10 <MX_GPIO_Init+0x30c>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	4bb7      	ldr	r3, [pc, #732]	@ (8000e10 <MX_GPIO_Init+0x30c>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b36:	4ab6      	ldr	r2, [pc, #728]	@ (8000e10 <MX_GPIO_Init+0x30c>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b3e:	4bb4      	ldr	r3, [pc, #720]	@ (8000e10 <MX_GPIO_Init+0x30c>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4bb1      	ldr	r3, [pc, #708]	@ (8000e10 <MX_GPIO_Init+0x30c>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4e:	4ab0      	ldr	r2, [pc, #704]	@ (8000e10 <MX_GPIO_Init+0x30c>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b56:	4bae      	ldr	r3, [pc, #696]	@ (8000e10 <MX_GPIO_Init+0x30c>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4bab      	ldr	r3, [pc, #684]	@ (8000e10 <MX_GPIO_Init+0x30c>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b66:	4aaa      	ldr	r2, [pc, #680]	@ (8000e10 <MX_GPIO_Init+0x30c>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b6e:	4ba8      	ldr	r3, [pc, #672]	@ (8000e10 <MX_GPIO_Init+0x30c>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	4ba5      	ldr	r3, [pc, #660]	@ (8000e10 <MX_GPIO_Init+0x30c>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7e:	4aa4      	ldr	r2, [pc, #656]	@ (8000e10 <MX_GPIO_Init+0x30c>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b86:	4ba2      	ldr	r3, [pc, #648]	@ (8000e10 <MX_GPIO_Init+0x30c>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000b98:	489e      	ldr	r0, [pc, #632]	@ (8000e14 <MX_GPIO_Init+0x310>)
 8000b9a:	f001 fa8b 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba8:	f001 fa84 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000bac:	2200      	movs	r2, #0
 8000bae:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000bb2:	4899      	ldr	r0, [pc, #612]	@ (8000e18 <MX_GPIO_Init+0x314>)
 8000bb4:	f001 fa7e 	bl	80020b4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000bbe:	4897      	ldr	r0, [pc, #604]	@ (8000e1c <MX_GPIO_Init+0x318>)
 8000bc0:	f001 fa78 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bca:	4894      	ldr	r0, [pc, #592]	@ (8000e1c <MX_GPIO_Init+0x318>)
 8000bcc:	f001 fa72 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000bd6:	4892      	ldr	r0, [pc, #584]	@ (8000e20 <MX_GPIO_Init+0x31c>)
 8000bd8:	f001 fa6c 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2120      	movs	r1, #32
 8000be0:	488d      	ldr	r0, [pc, #564]	@ (8000e18 <MX_GPIO_Init+0x314>)
 8000be2:	f001 fa67 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	2101      	movs	r1, #1
 8000bea:	488a      	ldr	r0, [pc, #552]	@ (8000e14 <MX_GPIO_Init+0x310>)
 8000bec:	f001 fa62 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000bf0:	f240 1315 	movw	r3, #277	@ 0x115
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	4882      	ldr	r0, [pc, #520]	@ (8000e14 <MX_GPIO_Init+0x310>)
 8000c0a:	f001 f8a9 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000c0e:	236a      	movs	r3, #106	@ 0x6a
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c12:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	487c      	ldr	r0, [pc, #496]	@ (8000e14 <MX_GPIO_Init+0x310>)
 8000c24:	f001 f89c 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000c28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c2e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4878      	ldr	r0, [pc, #480]	@ (8000e20 <MX_GPIO_Init+0x31c>)
 8000c40:	f001 f88e 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000c44:	233f      	movs	r3, #63	@ 0x3f
 8000c46:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c48:	230b      	movs	r3, #11
 8000c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	4872      	ldr	r0, [pc, #456]	@ (8000e20 <MX_GPIO_Init+0x31c>)
 8000c58:	f001 f882 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c7a:	f001 f871 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000c7e:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c9a:	f001 f861 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000c9e:	2308      	movs	r3, #8
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cbc:	f001 f850 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000cc0:	2310      	movs	r3, #16
 8000cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cc4:	230b      	movs	r3, #11
 8000cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cd6:	f001 f843 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000cda:	23e0      	movs	r3, #224	@ 0xe0
 8000cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cea:	2305      	movs	r3, #5
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf8:	f001 f832 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d00:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4841      	ldr	r0, [pc, #260]	@ (8000e18 <MX_GPIO_Init+0x314>)
 8000d12:	f001 f825 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000d16:	2302      	movs	r3, #2
 8000d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d1a:	230b      	movs	r3, #11
 8000d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	483b      	ldr	r0, [pc, #236]	@ (8000e18 <MX_GPIO_Init+0x314>)
 8000d2a:	f001 f819 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000d2e:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000d32:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	4834      	ldr	r0, [pc, #208]	@ (8000e18 <MX_GPIO_Init+0x314>)
 8000d48:	f001 f80a 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000d4c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d5e:	2307      	movs	r3, #7
 8000d60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	482c      	ldr	r0, [pc, #176]	@ (8000e1c <MX_GPIO_Init+0x318>)
 8000d6a:	f000 fff9 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000d6e:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000d72:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d74:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4825      	ldr	r0, [pc, #148]	@ (8000e1c <MX_GPIO_Init+0x318>)
 8000d86:	f000 ffeb 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000d8a:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4619      	mov	r1, r3
 8000da2:	481e      	ldr	r0, [pc, #120]	@ (8000e1c <MX_GPIO_Init+0x318>)
 8000da4:	f000 ffdc 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000da8:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4817      	ldr	r0, [pc, #92]	@ (8000e20 <MX_GPIO_Init+0x31c>)
 8000dc2:	f000 ffcd 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000dc6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dcc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4810      	ldr	r0, [pc, #64]	@ (8000e20 <MX_GPIO_Init+0x31c>)
 8000dde:	f000 ffbf 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000de2:	2302      	movs	r3, #2
 8000de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000df2:	2305      	movs	r3, #5
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4807      	ldr	r0, [pc, #28]	@ (8000e1c <MX_GPIO_Init+0x318>)
 8000dfe:	f000 ffaf 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000e02:	2378      	movs	r3, #120	@ 0x78
 8000e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e00a      	b.n	8000e24 <MX_GPIO_Init+0x320>
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000
 8000e14:	48001000 	.word	0x48001000
 8000e18:	48000400 	.word	0x48000400
 8000e1c:	48000c00 	.word	0x48000c00
 8000e20:	48000800 	.word	0x48000800
 8000e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4813      	ldr	r0, [pc, #76]	@ (8000e84 <MX_GPIO_Init+0x380>)
 8000e36:	f000 ff93 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000e3a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e40:	2312      	movs	r3, #18
 8000e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	480c      	ldr	r0, [pc, #48]	@ (8000e88 <MX_GPIO_Init+0x384>)
 8000e58:	f000 ff82 	bl	8001d60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2105      	movs	r1, #5
 8000e60:	2017      	movs	r0, #23
 8000e62:	f000 fe47 	bl	8001af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e66:	2017      	movs	r0, #23
 8000e68:	f000 fe60 	bl	8001b2c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2105      	movs	r1, #5
 8000e70:	2028      	movs	r0, #40	@ 0x28
 8000e72:	f000 fe3f 	bl	8001af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e76:	2028      	movs	r0, #40	@ 0x28
 8000e78:	f000 fe58 	bl	8001b2c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	@ 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	48000c00 	.word	0x48000c00
 8000e88:	48000400 	.word	0x48000400

08000e8c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e9c:	d105      	bne.n	8000eaa <HAL_GPIO_EXTI_Callback+0x1e>
		osThreadFlagsSet(LEDlenHandle, 0x0001);
 8000e9e:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <HAL_GPIO_EXTI_Callback+0x28>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f004 fcc9 	bl	800583c <osThreadFlagsSet>
		//printf("Button Pressed\n");
		//osSemaphoreRelease(setHandle);
		}
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200007c4 	.word	0x200007c4

08000eb8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <StartDefaultTask+0x8>

08000ec4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;){
    //osSemaphoreAcquire(setHandle, osWaitForever);
    //printf("Semaphore Acquired\n");
	osThreadFlagsWait(0x0001, osFlagsWaitAny, osWaitForever);
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f004 fd00 	bl	80058d8 <osThreadFlagsWait>
    toglen=(toglen+1)%3;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <StartTask02+0x74>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	1c5a      	adds	r2, r3, #1
 8000ede:	4b17      	ldr	r3, [pc, #92]	@ (8000f3c <StartTask02+0x78>)
 8000ee0:	fb83 3102 	smull	r3, r1, r3, r2
 8000ee4:	17d3      	asrs	r3, r2, #31
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	460b      	mov	r3, r1
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	440b      	add	r3, r1
 8000eee:	1ad1      	subs	r1, r2, r3
 8000ef0:	b2ca      	uxtb	r2, r1
 8000ef2:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <StartTask02+0x74>)
 8000ef4:	701a      	strb	r2, [r3, #0]
    htim16.Init.RepetitionCounter=toglen;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <StartTask02+0x74>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <StartTask02+0x7c>)
 8000efe:	615a      	str	r2, [r3, #20]
    osTimerStop(HTIM1Handle);
 8000f00:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <StartTask02+0x80>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f004 fe27 	bl	8005b58 <osTimerStop>
    int stat = osTimerStart(HTIM1Handle, 1000*(1+toglen));
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <StartTask02+0x80>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <StartTask02+0x74>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	3301      	adds	r3, #1
 8000f14:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f18:	fb01 f303 	mul.w	r3, r1, r3
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4610      	mov	r0, r2
 8000f20:	f004 fdec 	bl	8005afc <osTimerStart>
 8000f24:	60f8      	str	r0, [r7, #12]
    printf("start is %d\n",stat);
 8000f26:	68f9      	ldr	r1, [r7, #12]
 8000f28:	4807      	ldr	r0, [pc, #28]	@ (8000f48 <StartTask02+0x84>)
 8000f2a:	f007 ffbf 	bl	8008eac <iprintf>
    HAL_TIM_Base_Init(&htim16);
 8000f2e:	4804      	ldr	r0, [pc, #16]	@ (8000f40 <StartTask02+0x7c>)
 8000f30:	f003 f851 	bl	8003fd6 <HAL_TIM_Base_Init>
  for(;;){
 8000f34:	bf00      	nop
 8000f36:	e7c9      	b.n	8000ecc <StartTask02+0x8>
 8000f38:	200007d8 	.word	0x200007d8
 8000f3c:	55555556 	.word	0x55555556
 8000f40:	200001bc 	.word	0x200001bc
 8000f44:	200007cc 	.word	0x200007cc
 8000f48:	0800a09c 	.word	0x0800a09c

08000f4c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {

	  osThreadFlagsWait(0x0003, osFlagsWaitAny, osWaitForever);
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2003      	movs	r0, #3
 8000f5c:	f004 fcbc 	bl	80058d8 <osThreadFlagsWait>
	  printf("Semaphore Acquired %d \n",toglen);
 8000f60:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <StartTask03+0x44>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	480b      	ldr	r0, [pc, #44]	@ (8000f94 <StartTask03+0x48>)
 8000f68:	f007 ffa0 	bl	8008eac <iprintf>
	  char buff[4];//="hello WOrld\r\n";

	  snprintf(buff, sizeof(buff), "%d\r\n",toglen);
 8000f6c:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <StartTask03+0x44>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	f107 000c 	add.w	r0, r7, #12
 8000f74:	4a08      	ldr	r2, [pc, #32]	@ (8000f98 <StartTask03+0x4c>)
 8000f76:	2104      	movs	r1, #4
 8000f78:	f008 f808 	bl	8008f8c <sniprintf>
	  HAL_UART_Transmit(&huart1, buff, sizeof(buff), 2000);
 8000f7c:	f107 010c 	add.w	r1, r7, #12
 8000f80:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f84:	2204      	movs	r2, #4
 8000f86:	4805      	ldr	r0, [pc, #20]	@ (8000f9c <StartTask03+0x50>)
 8000f88:	f003 fb2e 	bl	80045e8 <HAL_UART_Transmit>
  {
 8000f8c:	bf00      	nop
 8000f8e:	e7e1      	b.n	8000f54 <StartTask03+0x8>
 8000f90:	200007d8 	.word	0x200007d8
 8000f94:	0800a0ac 	.word	0x0800a0ac
 8000f98:	0800a0c4 	.word	0x0800a0c4
 8000f9c:	20000254 	.word	0x20000254

08000fa0 <Callback1>:
  /* USER CODE END StartTask03 */
}

/* Callback1 function */
void Callback1(void *argument)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback1 */
	//if(0==SW_HW_){
		printf("Made it to callback\n");
 8000fa8:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <Callback1+0x20>)
 8000faa:	f007 ffe7 	bl	8008f7c <puts>

		HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14);
 8000fae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fb2:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <Callback1+0x24>)
 8000fb4:	f001 f896 	bl	80020e4 <HAL_GPIO_TogglePin>
	//}
  /* USER CODE END Callback1 */
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	0800a0cc 	.word	0x0800a0cc
 8000fc4:	48000400 	.word	0x48000400

08000fc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0e      	ldr	r2, [pc, #56]	@ (8001010 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fda:	f000 fc8f 	bl	80018fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM16) {
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8001014 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d104      	bne.n	8000ff2 <HAL_TIM_PeriodElapsedCallback+0x2a>
   // HAL_IncTick();
	  if (SW_HW_){
	  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14);
 8000fe8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fec:	480a      	ldr	r0, [pc, #40]	@ (8001018 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fee:	f001 f879 	bl	80020e4 <HAL_GPIO_TogglePin>
	  }
  }
  if (htim->Instance == TIM17) {
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a09      	ldr	r2, [pc, #36]	@ (800101c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d105      	bne.n	8001008 <HAL_TIM_PeriodElapsedCallback+0x40>
   // HAL_IncTick();
	  osThreadFlagsSet(PrintTaskHandle, 0x0001);
 8000ffc:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2101      	movs	r1, #1
 8001002:	4618      	mov	r0, r3
 8001004:	f004 fc1a 	bl	800583c <osThreadFlagsSet>

  }
  /* USER CODE END Callback 1 */
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40001000 	.word	0x40001000
 8001014:	40014400 	.word	0x40014400
 8001018:	48000400 	.word	0x48000400
 800101c:	40014800 	.word	0x40014800
 8001020:	200007c8 	.word	0x200007c8

08001024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <Error_Handler+0x8>

08001030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	4b11      	ldr	r3, [pc, #68]	@ (800107c <HAL_MspInit+0x4c>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800103a:	4a10      	ldr	r2, [pc, #64]	@ (800107c <HAL_MspInit+0x4c>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6613      	str	r3, [r2, #96]	@ 0x60
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <HAL_MspInit+0x4c>)
 8001044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <HAL_MspInit+0x4c>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001052:	4a0a      	ldr	r2, [pc, #40]	@ (800107c <HAL_MspInit+0x4c>)
 8001054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001058:	6593      	str	r3, [r2, #88]	@ 0x58
 800105a:	4b08      	ldr	r3, [pc, #32]	@ (800107c <HAL_MspInit+0x4c>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	210f      	movs	r1, #15
 800106a:	f06f 0001 	mvn.w	r0, #1
 800106e:	f000 fd41 	bl	8001af4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000

08001080 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b0ac      	sub	sp, #176	@ 0xb0
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2288      	movs	r2, #136	@ 0x88
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f008 f87f 	bl	80091a4 <memset>
  if(DFSDM1_Init == 0)
 80010a6:	4b25      	ldr	r3, [pc, #148]	@ (800113c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d142      	bne.n	8001134 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80010ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010b2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4618      	mov	r0, r3
 80010c0:	f002 fa1a 	bl	80034f8 <HAL_RCCEx_PeriphCLKConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80010ca:	f7ff ffab 	bl	8001024 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80010ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001140 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001140 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80010da:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e6:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	4a15      	ldr	r2, [pc, #84]	@ (8001140 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010ec:	f043 0310 	orr.w	r3, r3, #16
 80010f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f2:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80010fe:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001102:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001118:	2306      	movs	r3, #6
 800111a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800111e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001122:	4619      	mov	r1, r3
 8001124:	4807      	ldr	r0, [pc, #28]	@ (8001144 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001126:	f000 fe1b 	bl	8001d60 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800112a:	4b04      	ldr	r3, [pc, #16]	@ (800113c <HAL_DFSDM_ChannelMspInit+0xbc>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	4a02      	ldr	r2, [pc, #8]	@ (800113c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001132:	6013      	str	r3, [r2, #0]
  }

}
 8001134:	bf00      	nop
 8001136:	37b0      	adds	r7, #176	@ 0xb0
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200007dc 	.word	0x200007dc
 8001140:	40021000 	.word	0x40021000
 8001144:	48001000 	.word	0x48001000

08001148 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b0ac      	sub	sp, #176	@ 0xb0
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2288      	movs	r2, #136	@ 0x88
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f008 f81b 	bl	80091a4 <memset>
  if(hi2c->Instance==I2C2)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a21      	ldr	r2, [pc, #132]	@ (80011f8 <HAL_I2C_MspInit+0xb0>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d13b      	bne.n	80011f0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001178:	2380      	movs	r3, #128	@ 0x80
 800117a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800117c:	2300      	movs	r3, #0
 800117e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4618      	mov	r0, r3
 8001186:	f002 f9b7 	bl	80034f8 <HAL_RCCEx_PeriphCLKConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001190:	f7ff ff48 	bl	8001024 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <HAL_I2C_MspInit+0xb4>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001198:	4a18      	ldr	r2, [pc, #96]	@ (80011fc <HAL_I2C_MspInit+0xb4>)
 800119a:	f043 0302 	orr.w	r3, r3, #2
 800119e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a0:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <HAL_I2C_MspInit+0xb4>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80011ac:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b4:	2312      	movs	r3, #18
 80011b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011c6:	2304      	movs	r3, #4
 80011c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011d0:	4619      	mov	r1, r3
 80011d2:	480b      	ldr	r0, [pc, #44]	@ (8001200 <HAL_I2C_MspInit+0xb8>)
 80011d4:	f000 fdc4 	bl	8001d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <HAL_I2C_MspInit+0xb4>)
 80011da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011dc:	4a07      	ldr	r2, [pc, #28]	@ (80011fc <HAL_I2C_MspInit+0xb4>)
 80011de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80011e4:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <HAL_I2C_MspInit+0xb4>)
 80011e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80011f0:	bf00      	nop
 80011f2:	37b0      	adds	r7, #176	@ 0xb0
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40005800 	.word	0x40005800
 80011fc:	40021000 	.word	0x40021000
 8001200:	48000400 	.word	0x48000400

08001204 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	@ 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a17      	ldr	r2, [pc, #92]	@ (8001280 <HAL_QSPI_MspInit+0x7c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d128      	bne.n	8001278 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001226:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <HAL_QSPI_MspInit+0x80>)
 8001228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800122a:	4a16      	ldr	r2, [pc, #88]	@ (8001284 <HAL_QSPI_MspInit+0x80>)
 800122c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001230:	6513      	str	r3, [r2, #80]	@ 0x50
 8001232:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <HAL_QSPI_MspInit+0x80>)
 8001234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <HAL_QSPI_MspInit+0x80>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	4a10      	ldr	r2, [pc, #64]	@ (8001284 <HAL_QSPI_MspInit+0x80>)
 8001244:	f043 0310 	orr.w	r3, r3, #16
 8001248:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <HAL_QSPI_MspInit+0x80>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	f003 0310 	and.w	r3, r3, #16
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001256:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800125a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001268:	230a      	movs	r3, #10
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	4805      	ldr	r0, [pc, #20]	@ (8001288 <HAL_QSPI_MspInit+0x84>)
 8001274:	f000 fd74 	bl	8001d60 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001278:	bf00      	nop
 800127a:	3728      	adds	r7, #40	@ 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	a0001000 	.word	0xa0001000
 8001284:	40021000 	.word	0x40021000
 8001288:	48001000 	.word	0x48001000

0800128c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	@ 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a17      	ldr	r2, [pc, #92]	@ (8001308 <HAL_SPI_MspInit+0x7c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d128      	bne.n	8001300 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012ae:	4b17      	ldr	r3, [pc, #92]	@ (800130c <HAL_SPI_MspInit+0x80>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b2:	4a16      	ldr	r2, [pc, #88]	@ (800130c <HAL_SPI_MspInit+0x80>)
 80012b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ba:	4b14      	ldr	r3, [pc, #80]	@ (800130c <HAL_SPI_MspInit+0x80>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <HAL_SPI_MspInit+0x80>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	4a10      	ldr	r2, [pc, #64]	@ (800130c <HAL_SPI_MspInit+0x80>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <HAL_SPI_MspInit+0x80>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80012de:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012f0:	2306      	movs	r3, #6
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4805      	ldr	r0, [pc, #20]	@ (8001310 <HAL_SPI_MspInit+0x84>)
 80012fc:	f000 fd30 	bl	8001d60 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	@ 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40003c00 	.word	0x40003c00
 800130c:	40021000 	.word	0x40021000
 8001310:	48000800 	.word	0x48000800

08001314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a1a      	ldr	r2, [pc, #104]	@ (800138c <HAL_TIM_Base_MspInit+0x78>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d114      	bne.n	8001350 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001326:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <HAL_TIM_Base_MspInit+0x7c>)
 8001328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800132a:	4a19      	ldr	r2, [pc, #100]	@ (8001390 <HAL_TIM_Base_MspInit+0x7c>)
 800132c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001330:	6613      	str	r3, [r2, #96]	@ 0x60
 8001332:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <HAL_TIM_Base_MspInit+0x7c>)
 8001334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2105      	movs	r1, #5
 8001342:	2019      	movs	r0, #25
 8001344:	f000 fbd6 	bl	8001af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001348:	2019      	movs	r0, #25
 800134a:	f000 fbef 	bl	8001b2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800134e:	e018      	b.n	8001382 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0f      	ldr	r2, [pc, #60]	@ (8001394 <HAL_TIM_Base_MspInit+0x80>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d113      	bne.n	8001382 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800135a:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <HAL_TIM_Base_MspInit+0x7c>)
 800135c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800135e:	4a0c      	ldr	r2, [pc, #48]	@ (8001390 <HAL_TIM_Base_MspInit+0x7c>)
 8001360:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001364:	6613      	str	r3, [r2, #96]	@ 0x60
 8001366:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <HAL_TIM_Base_MspInit+0x7c>)
 8001368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800136a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2105      	movs	r1, #5
 8001376:	201a      	movs	r0, #26
 8001378:	f000 fbbc 	bl	8001af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800137c:	201a      	movs	r0, #26
 800137e:	f000 fbd5 	bl	8001b2c <HAL_NVIC_EnableIRQ>
}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40014400 	.word	0x40014400
 8001390:	40021000 	.word	0x40021000
 8001394:	40014800 	.word	0x40014800

08001398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0ac      	sub	sp, #176	@ 0xb0
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2288      	movs	r2, #136	@ 0x88
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f007 fef3 	bl	80091a4 <memset>
  if(huart->Instance==USART1)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a21      	ldr	r2, [pc, #132]	@ (8001448 <HAL_UART_MspInit+0xb0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d13a      	bne.n	800143e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013cc:	2300      	movs	r3, #0
 80013ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4618      	mov	r0, r3
 80013d6:	f002 f88f 	bl	80034f8 <HAL_RCCEx_PeriphCLKConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013e0:	f7ff fe20 	bl	8001024 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013e4:	4b19      	ldr	r3, [pc, #100]	@ (800144c <HAL_UART_MspInit+0xb4>)
 80013e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013e8:	4a18      	ldr	r2, [pc, #96]	@ (800144c <HAL_UART_MspInit+0xb4>)
 80013ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80013f0:	4b16      	ldr	r3, [pc, #88]	@ (800144c <HAL_UART_MspInit+0xb4>)
 80013f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fc:	4b13      	ldr	r3, [pc, #76]	@ (800144c <HAL_UART_MspInit+0xb4>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001400:	4a12      	ldr	r2, [pc, #72]	@ (800144c <HAL_UART_MspInit+0xb4>)
 8001402:	f043 0302 	orr.w	r3, r3, #2
 8001406:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001408:	4b10      	ldr	r3, [pc, #64]	@ (800144c <HAL_UART_MspInit+0xb4>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001414:	23c0      	movs	r3, #192	@ 0xc0
 8001416:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800142c:	2307      	movs	r3, #7
 800142e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	@ (8001450 <HAL_UART_MspInit+0xb8>)
 800143a:	f000 fc91 	bl	8001d60 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800143e:	bf00      	nop
 8001440:	37b0      	adds	r7, #176	@ 0xb0
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40013800 	.word	0x40013800
 800144c:	40021000 	.word	0x40021000
 8001450:	48000400 	.word	0x48000400

08001454 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b0ac      	sub	sp, #176	@ 0xb0
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2288      	movs	r2, #136	@ 0x88
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f007 fe95 	bl	80091a4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001482:	d17c      	bne.n	800157e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001484:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001488:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800148a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800148e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001492:	2301      	movs	r3, #1
 8001494:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001496:	2301      	movs	r3, #1
 8001498:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800149a:	2318      	movs	r3, #24
 800149c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800149e:	2307      	movs	r3, #7
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014a2:	2302      	movs	r3, #2
 80014a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014a6:	2302      	movs	r3, #2
 80014a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80014aa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014ae:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 f81f 	bl	80034f8 <HAL_RCCEx_PeriphCLKConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80014c0:	f7ff fdb0 	bl	8001024 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	4b30      	ldr	r3, [pc, #192]	@ (8001588 <HAL_PCD_MspInit+0x134>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c8:	4a2f      	ldr	r2, [pc, #188]	@ (8001588 <HAL_PCD_MspInit+0x134>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001588 <HAL_PCD_MspInit+0x134>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80014dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014f4:	4619      	mov	r1, r3
 80014f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014fa:	f000 fc31 	bl	8001d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80014fe:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001502:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001518:	230a      	movs	r3, #10
 800151a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001522:	4619      	mov	r1, r3
 8001524:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001528:	f000 fc1a 	bl	8001d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800152c:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <HAL_PCD_MspInit+0x134>)
 800152e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001530:	4a15      	ldr	r2, [pc, #84]	@ (8001588 <HAL_PCD_MspInit+0x134>)
 8001532:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001536:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001538:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <HAL_PCD_MspInit+0x134>)
 800153a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001544:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <HAL_PCD_MspInit+0x134>)
 8001546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d114      	bne.n	800157a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001550:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <HAL_PCD_MspInit+0x134>)
 8001552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001554:	4a0c      	ldr	r2, [pc, #48]	@ (8001588 <HAL_PCD_MspInit+0x134>)
 8001556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800155a:	6593      	str	r3, [r2, #88]	@ 0x58
 800155c:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <HAL_PCD_MspInit+0x134>)
 800155e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001568:	f001 f8c8 	bl	80026fc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800156c:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <HAL_PCD_MspInit+0x134>)
 800156e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001570:	4a05      	ldr	r2, [pc, #20]	@ (8001588 <HAL_PCD_MspInit+0x134>)
 8001572:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001576:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001578:	e001      	b.n	800157e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800157a:	f001 f8bf 	bl	80026fc <HAL_PWREx_EnableVddUSB>
}
 800157e:	bf00      	nop
 8001580:	37b0      	adds	r7, #176	@ 0xb0
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000

0800158c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08e      	sub	sp, #56	@ 0x38
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800159a:	4b34      	ldr	r3, [pc, #208]	@ (800166c <HAL_InitTick+0xe0>)
 800159c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159e:	4a33      	ldr	r2, [pc, #204]	@ (800166c <HAL_InitTick+0xe0>)
 80015a0:	f043 0310 	orr.w	r3, r3, #16
 80015a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a6:	4b31      	ldr	r3, [pc, #196]	@ (800166c <HAL_InitTick+0xe0>)
 80015a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015b2:	f107 0210 	add.w	r2, r7, #16
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f001 ff09 	bl	80033d4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d103      	bne.n	80015d4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015cc:	f001 fed6 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 80015d0:	6378      	str	r0, [r7, #52]	@ 0x34
 80015d2:	e004      	b.n	80015de <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015d4:	f001 fed2 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 80015d8:	4603      	mov	r3, r0
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015e0:	4a23      	ldr	r2, [pc, #140]	@ (8001670 <HAL_InitTick+0xe4>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	0c9b      	lsrs	r3, r3, #18
 80015e8:	3b01      	subs	r3, #1
 80015ea:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015ec:	4b21      	ldr	r3, [pc, #132]	@ (8001674 <HAL_InitTick+0xe8>)
 80015ee:	4a22      	ldr	r2, [pc, #136]	@ (8001678 <HAL_InitTick+0xec>)
 80015f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015f2:	4b20      	ldr	r3, [pc, #128]	@ (8001674 <HAL_InitTick+0xe8>)
 80015f4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015f8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001674 <HAL_InitTick+0xe8>)
 80015fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015fe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001600:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <HAL_InitTick+0xe8>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001606:	4b1b      	ldr	r3, [pc, #108]	@ (8001674 <HAL_InitTick+0xe8>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160c:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <HAL_InitTick+0xe8>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001612:	4818      	ldr	r0, [pc, #96]	@ (8001674 <HAL_InitTick+0xe8>)
 8001614:	f002 fcdf 	bl	8003fd6 <HAL_TIM_Base_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800161e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001622:	2b00      	cmp	r3, #0
 8001624:	d11b      	bne.n	800165e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001626:	4813      	ldr	r0, [pc, #76]	@ (8001674 <HAL_InitTick+0xe8>)
 8001628:	f002 fd2c 	bl	8004084 <HAL_TIM_Base_Start_IT>
 800162c:	4603      	mov	r3, r0
 800162e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001632:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001636:	2b00      	cmp	r3, #0
 8001638:	d111      	bne.n	800165e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800163a:	2036      	movs	r0, #54	@ 0x36
 800163c:	f000 fa76 	bl	8001b2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b0f      	cmp	r3, #15
 8001644:	d808      	bhi.n	8001658 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001646:	2200      	movs	r2, #0
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	2036      	movs	r0, #54	@ 0x36
 800164c:	f000 fa52 	bl	8001af4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001650:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <HAL_InitTick+0xf0>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e002      	b.n	800165e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800165e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001662:	4618      	mov	r0, r3
 8001664:	3738      	adds	r7, #56	@ 0x38
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
 8001670:	431bde83 	.word	0x431bde83
 8001674:	200007e0 	.word	0x200007e0
 8001678:	40001000 	.word	0x40001000
 800167c:	20000004 	.word	0x20000004

08001680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <NMI_Handler+0x4>

08001688 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <MemManage_Handler+0x4>

08001698 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80016ba:	2020      	movs	r0, #32
 80016bc:	f000 fd2c 	bl	8002118 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80016c0:	2040      	movs	r0, #64	@ 0x40
 80016c2:	f000 fd29 	bl	8002118 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80016c6:	2080      	movs	r0, #128	@ 0x80
 80016c8:	f000 fd26 	bl	8002118 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80016cc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80016d0:	f000 fd22 	bl	8002118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80016dc:	4802      	ldr	r0, [pc, #8]	@ (80016e8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80016de:	f002 fd41 	bl	8004164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200001bc 	.word	0x200001bc

080016ec <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80016f0:	4802      	ldr	r0, [pc, #8]	@ (80016fc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80016f2:	f002 fd37 	bl	8004164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000208 	.word	0x20000208

08001700 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001704:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001708:	f000 fd06 	bl	8002118 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800170c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001710:	f000 fd02 	bl	8002118 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001714:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001718:	f000 fcfe 	bl	8002118 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800171c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001720:	f000 fcfa 	bl	8002118 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001724:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001728:	f000 fcf6 	bl	8002118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}

08001730 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001734:	4802      	ldr	r0, [pc, #8]	@ (8001740 <TIM6_DAC_IRQHandler+0x10>)
 8001736:	f002 fd15 	bl	8004164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200007e0 	.word	0x200007e0

08001744 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	e00a      	b.n	800176c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001756:	f3af 8000 	nop.w
 800175a:	4601      	mov	r1, r0
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	60ba      	str	r2, [r7, #8]
 8001762:	b2ca      	uxtb	r2, r1
 8001764:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3301      	adds	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	429a      	cmp	r2, r3
 8001772:	dbf0      	blt.n	8001756 <_read+0x12>
  }

  return len;
 8001774:	687b      	ldr	r3, [r7, #4]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <_close>:
  }
  return len;
}

int _close(int file)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
}
 800178a:	4618      	mov	r0, r3
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017a6:	605a      	str	r2, [r3, #4]
  return 0;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <_isatty>:

int _isatty(int file)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f0:	4a14      	ldr	r2, [pc, #80]	@ (8001844 <_sbrk+0x5c>)
 80017f2:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <_sbrk+0x60>)
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017fc:	4b13      	ldr	r3, [pc, #76]	@ (800184c <_sbrk+0x64>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d102      	bne.n	800180a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001804:	4b11      	ldr	r3, [pc, #68]	@ (800184c <_sbrk+0x64>)
 8001806:	4a12      	ldr	r2, [pc, #72]	@ (8001850 <_sbrk+0x68>)
 8001808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180a:	4b10      	ldr	r3, [pc, #64]	@ (800184c <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	429a      	cmp	r2, r3
 8001816:	d207      	bcs.n	8001828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001818:	f007 fd12 	bl	8009240 <__errno>
 800181c:	4603      	mov	r3, r0
 800181e:	220c      	movs	r2, #12
 8001820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	e009      	b.n	800183c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001828:	4b08      	ldr	r3, [pc, #32]	@ (800184c <_sbrk+0x64>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800182e:	4b07      	ldr	r3, [pc, #28]	@ (800184c <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	4a05      	ldr	r2, [pc, #20]	@ (800184c <_sbrk+0x64>)
 8001838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183a:	68fb      	ldr	r3, [r7, #12]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20018000 	.word	0x20018000
 8001848:	00000400 	.word	0x00000400
 800184c:	2000082c 	.word	0x2000082c
 8001850:	20002e68 	.word	0x20002e68

08001854 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001858:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <SystemInit+0x20>)
 800185a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800185e:	4a05      	ldr	r2, [pc, #20]	@ (8001874 <SystemInit+0x20>)
 8001860:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001864:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001878:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800187c:	f7ff ffea 	bl	8001854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001880:	480c      	ldr	r0, [pc, #48]	@ (80018b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001882:	490d      	ldr	r1, [pc, #52]	@ (80018b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001884:	4a0d      	ldr	r2, [pc, #52]	@ (80018bc <LoopForever+0xe>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001888:	e002      	b.n	8001890 <LoopCopyDataInit>

0800188a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800188c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188e:	3304      	adds	r3, #4

08001890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001894:	d3f9      	bcc.n	800188a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001896:	4a0a      	ldr	r2, [pc, #40]	@ (80018c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001898:	4c0a      	ldr	r4, [pc, #40]	@ (80018c4 <LoopForever+0x16>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800189c:	e001      	b.n	80018a2 <LoopFillZerobss>

0800189e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a0:	3204      	adds	r2, #4

080018a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a4:	d3fb      	bcc.n	800189e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018a6:	f007 fcd1 	bl	800924c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018aa:	f7fe fe9d 	bl	80005e8 <main>

080018ae <LoopForever>:

LoopForever:
    b LoopForever
 80018ae:	e7fe      	b.n	80018ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80018bc:	0800a220 	.word	0x0800a220
  ldr r2, =_sbss
 80018c0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80018c4:	20002e64 	.word	0x20002e64

080018c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018c8:	e7fe      	b.n	80018c8 <ADC1_2_IRQHandler>

080018ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d4:	2003      	movs	r0, #3
 80018d6:	f000 f902 	bl	8001ade <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018da:	200f      	movs	r0, #15
 80018dc:	f7ff fe56 	bl	800158c <HAL_InitTick>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	71fb      	strb	r3, [r7, #7]
 80018ea:	e001      	b.n	80018f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018ec:	f7ff fba0 	bl	8001030 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018f0:	79fb      	ldrb	r3, [r7, #7]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <HAL_IncTick+0x20>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_IncTick+0x24>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4413      	add	r3, r2
 800190c:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <HAL_IncTick+0x24>)
 800190e:	6013      	str	r3, [r2, #0]
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000008 	.word	0x20000008
 8001920:	20000830 	.word	0x20000830

08001924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return uwTick;
 8001928:	4b03      	ldr	r3, [pc, #12]	@ (8001938 <HAL_GetTick+0x14>)
 800192a:	681b      	ldr	r3, [r3, #0]
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000830 	.word	0x20000830

0800193c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001944:	f7ff ffee 	bl	8001924 <HAL_GetTick>
 8001948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001954:	d005      	beq.n	8001962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001956:	4b0a      	ldr	r3, [pc, #40]	@ (8001980 <HAL_Delay+0x44>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4413      	add	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001962:	bf00      	nop
 8001964:	f7ff ffde 	bl	8001924 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	429a      	cmp	r2, r3
 8001972:	d8f7      	bhi.n	8001964 <HAL_Delay+0x28>
  {
  }
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000008 	.word	0x20000008

08001984 <__NVIC_SetPriorityGrouping>:
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001994:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019a0:	4013      	ands	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b6:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	60d3      	str	r3, [r2, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_GetPriorityGrouping>:
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d0:	4b04      	ldr	r3, [pc, #16]	@ (80019e4 <__NVIC_GetPriorityGrouping+0x18>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	f003 0307 	and.w	r3, r3, #7
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_EnableIRQ>:
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	db0b      	blt.n	8001a12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	f003 021f 	and.w	r2, r3, #31
 8001a00:	4907      	ldr	r1, [pc, #28]	@ (8001a20 <__NVIC_EnableIRQ+0x38>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	2001      	movs	r0, #1
 8001a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <__NVIC_SetPriority>:
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0a      	blt.n	8001a4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	490c      	ldr	r1, [pc, #48]	@ (8001a70 <__NVIC_SetPriority+0x4c>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001a4c:	e00a      	b.n	8001a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4908      	ldr	r1, [pc, #32]	@ (8001a74 <__NVIC_SetPriority+0x50>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3b04      	subs	r3, #4
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	761a      	strb	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <NVIC_EncodePriority>:
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	@ 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f1c3 0307 	rsb	r3, r3, #7
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	bf28      	it	cs
 8001a96:	2304      	movcs	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d902      	bls.n	8001aa8 <NVIC_EncodePriority+0x30>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3b03      	subs	r3, #3
 8001aa6:	e000      	b.n	8001aaa <NVIC_EncodePriority+0x32>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	401a      	ands	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	4313      	orrs	r3, r2
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	@ 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ff4c 	bl	8001984 <__NVIC_SetPriorityGrouping>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b06:	f7ff ff61 	bl	80019cc <__NVIC_GetPriorityGrouping>
 8001b0a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	68b9      	ldr	r1, [r7, #8]
 8001b10:	6978      	ldr	r0, [r7, #20]
 8001b12:	f7ff ffb1 	bl	8001a78 <NVIC_EncodePriority>
 8001b16:	4602      	mov	r2, r0
 8001b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff80 	bl	8001a24 <__NVIC_SetPriority>
}
 8001b24:	bf00      	nop
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ff54 	bl	80019e8 <__NVIC_EnableIRQ>
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e0ac      	b.n	8001cb4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 f8b2 	bl	8001cc8 <DFSDM_GetChannelFromInstance>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4a55      	ldr	r2, [pc, #340]	@ (8001cbc <HAL_DFSDM_ChannelInit+0x174>)
 8001b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e09f      	b.n	8001cb4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff fa83 	bl	8001080 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001b7a:	4b51      	ldr	r3, [pc, #324]	@ (8001cc0 <HAL_DFSDM_ChannelInit+0x178>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	4a4f      	ldr	r2, [pc, #316]	@ (8001cc0 <HAL_DFSDM_ChannelInit+0x178>)
 8001b82:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001b84:	4b4e      	ldr	r3, [pc, #312]	@ (8001cc0 <HAL_DFSDM_ChannelInit+0x178>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d125      	bne.n	8001bd8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001b8c:	4b4d      	ldr	r3, [pc, #308]	@ (8001cc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a4c      	ldr	r2, [pc, #304]	@ (8001cc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b92:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001b96:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001b98:	4b4a      	ldr	r3, [pc, #296]	@ (8001cc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4948      	ldr	r1, [pc, #288]	@ (8001cc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001ba6:	4b47      	ldr	r3, [pc, #284]	@ (8001cc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a46      	ldr	r2, [pc, #280]	@ (8001cc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bac:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001bb0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	791b      	ldrb	r3, [r3, #4]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d108      	bne.n	8001bcc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001bba:	4b42      	ldr	r3, [pc, #264]	@ (8001cc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	041b      	lsls	r3, r3, #16
 8001bc6:	493f      	ldr	r1, [pc, #252]	@ (8001cc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001bcc:	4b3d      	ldr	r3, [pc, #244]	@ (8001cc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a3c      	ldr	r2, [pc, #240]	@ (8001cc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001bd6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001be6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6819      	ldr	r1, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001bf6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001bfc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 020f 	bic.w	r2, r2, #15
 8001c14:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6819      	ldr	r1, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001c3c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6899      	ldr	r1, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f002 0207 	and.w	r2, r2, #7
 8001c68:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6859      	ldr	r1, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c74:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c94:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f810 	bl	8001cc8 <DFSDM_GetChannelFromInstance>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4904      	ldr	r1, [pc, #16]	@ (8001cbc <HAL_DFSDM_ChannelInit+0x174>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000838 	.word	0x20000838
 8001cc0:	20000834 	.word	0x20000834
 8001cc4:	40016000 	.word	0x40016000

08001cc8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d44 <DFSDM_GetChannelFromInstance+0x7c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d102      	bne.n	8001cde <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	e02b      	b.n	8001d36 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	@ (8001d48 <DFSDM_GetChannelFromInstance+0x80>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d102      	bne.n	8001cec <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	e024      	b.n	8001d36 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a17      	ldr	r2, [pc, #92]	@ (8001d4c <DFSDM_GetChannelFromInstance+0x84>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d102      	bne.n	8001cfa <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	e01d      	b.n	8001d36 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a14      	ldr	r2, [pc, #80]	@ (8001d50 <DFSDM_GetChannelFromInstance+0x88>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d102      	bne.n	8001d08 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001d02:	2304      	movs	r3, #4
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	e016      	b.n	8001d36 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a12      	ldr	r2, [pc, #72]	@ (8001d54 <DFSDM_GetChannelFromInstance+0x8c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d102      	bne.n	8001d16 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001d10:	2305      	movs	r3, #5
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	e00f      	b.n	8001d36 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a0f      	ldr	r2, [pc, #60]	@ (8001d58 <DFSDM_GetChannelFromInstance+0x90>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d102      	bne.n	8001d24 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001d1e:	2306      	movs	r3, #6
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	e008      	b.n	8001d36 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a0d      	ldr	r2, [pc, #52]	@ (8001d5c <DFSDM_GetChannelFromInstance+0x94>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d102      	bne.n	8001d32 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001d2c:	2307      	movs	r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	e001      	b.n	8001d36 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001d32:	2303      	movs	r3, #3
 8001d34:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001d36:	68fb      	ldr	r3, [r7, #12]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	40016000 	.word	0x40016000
 8001d48:	40016020 	.word	0x40016020
 8001d4c:	40016040 	.word	0x40016040
 8001d50:	40016080 	.word	0x40016080
 8001d54:	400160a0 	.word	0x400160a0
 8001d58:	400160c0 	.word	0x400160c0
 8001d5c:	400160e0 	.word	0x400160e0

08001d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b087      	sub	sp, #28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d6e:	e17f      	b.n	8002070 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2101      	movs	r1, #1
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 8171 	beq.w	800206a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d005      	beq.n	8001da0 <HAL_GPIO_Init+0x40>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d130      	bne.n	8001e02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	2203      	movs	r2, #3
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	091b      	lsrs	r3, r3, #4
 8001dec:	f003 0201 	and.w	r2, r3, #1
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d118      	bne.n	8001e40 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e14:	2201      	movs	r2, #1
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	08db      	lsrs	r3, r3, #3
 8001e2a:	f003 0201 	and.w	r2, r3, #1
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d017      	beq.n	8001e7c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2203      	movs	r2, #3
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d123      	bne.n	8001ed0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	08da      	lsrs	r2, r3, #3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3208      	adds	r2, #8
 8001e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	220f      	movs	r2, #15
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	08da      	lsrs	r2, r3, #3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3208      	adds	r2, #8
 8001eca:	6939      	ldr	r1, [r7, #16]
 8001ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	2203      	movs	r2, #3
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0203 	and.w	r2, r3, #3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 80ac 	beq.w	800206a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f12:	4b5f      	ldr	r3, [pc, #380]	@ (8002090 <HAL_GPIO_Init+0x330>)
 8001f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f16:	4a5e      	ldr	r2, [pc, #376]	@ (8002090 <HAL_GPIO_Init+0x330>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f1e:	4b5c      	ldr	r3, [pc, #368]	@ (8002090 <HAL_GPIO_Init+0x330>)
 8001f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f2a:	4a5a      	ldr	r2, [pc, #360]	@ (8002094 <HAL_GPIO_Init+0x334>)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	3302      	adds	r3, #2
 8001f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f36:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	220f      	movs	r2, #15
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f54:	d025      	beq.n	8001fa2 <HAL_GPIO_Init+0x242>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a4f      	ldr	r2, [pc, #316]	@ (8002098 <HAL_GPIO_Init+0x338>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d01f      	beq.n	8001f9e <HAL_GPIO_Init+0x23e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a4e      	ldr	r2, [pc, #312]	@ (800209c <HAL_GPIO_Init+0x33c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d019      	beq.n	8001f9a <HAL_GPIO_Init+0x23a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a4d      	ldr	r2, [pc, #308]	@ (80020a0 <HAL_GPIO_Init+0x340>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d013      	beq.n	8001f96 <HAL_GPIO_Init+0x236>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a4c      	ldr	r2, [pc, #304]	@ (80020a4 <HAL_GPIO_Init+0x344>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d00d      	beq.n	8001f92 <HAL_GPIO_Init+0x232>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a4b      	ldr	r2, [pc, #300]	@ (80020a8 <HAL_GPIO_Init+0x348>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d007      	beq.n	8001f8e <HAL_GPIO_Init+0x22e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a4a      	ldr	r2, [pc, #296]	@ (80020ac <HAL_GPIO_Init+0x34c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d101      	bne.n	8001f8a <HAL_GPIO_Init+0x22a>
 8001f86:	2306      	movs	r3, #6
 8001f88:	e00c      	b.n	8001fa4 <HAL_GPIO_Init+0x244>
 8001f8a:	2307      	movs	r3, #7
 8001f8c:	e00a      	b.n	8001fa4 <HAL_GPIO_Init+0x244>
 8001f8e:	2305      	movs	r3, #5
 8001f90:	e008      	b.n	8001fa4 <HAL_GPIO_Init+0x244>
 8001f92:	2304      	movs	r3, #4
 8001f94:	e006      	b.n	8001fa4 <HAL_GPIO_Init+0x244>
 8001f96:	2303      	movs	r3, #3
 8001f98:	e004      	b.n	8001fa4 <HAL_GPIO_Init+0x244>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e002      	b.n	8001fa4 <HAL_GPIO_Init+0x244>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <HAL_GPIO_Init+0x244>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	f002 0203 	and.w	r2, r2, #3
 8001faa:	0092      	lsls	r2, r2, #2
 8001fac:	4093      	lsls	r3, r2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fb4:	4937      	ldr	r1, [pc, #220]	@ (8002094 <HAL_GPIO_Init+0x334>)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	3302      	adds	r3, #2
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80020b0 <HAL_GPIO_Init+0x350>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fe6:	4a32      	ldr	r2, [pc, #200]	@ (80020b0 <HAL_GPIO_Init+0x350>)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fec:	4b30      	ldr	r3, [pc, #192]	@ (80020b0 <HAL_GPIO_Init+0x350>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002010:	4a27      	ldr	r2, [pc, #156]	@ (80020b0 <HAL_GPIO_Init+0x350>)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002016:	4b26      	ldr	r3, [pc, #152]	@ (80020b0 <HAL_GPIO_Init+0x350>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	43db      	mvns	r3, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800203a:	4a1d      	ldr	r2, [pc, #116]	@ (80020b0 <HAL_GPIO_Init+0x350>)
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002040:	4b1b      	ldr	r3, [pc, #108]	@ (80020b0 <HAL_GPIO_Init+0x350>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002064:	4a12      	ldr	r2, [pc, #72]	@ (80020b0 <HAL_GPIO_Init+0x350>)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	3301      	adds	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa22 f303 	lsr.w	r3, r2, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	f47f ae78 	bne.w	8001d70 <HAL_GPIO_Init+0x10>
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
 8002094:	40010000 	.word	0x40010000
 8002098:	48000400 	.word	0x48000400
 800209c:	48000800 	.word	0x48000800
 80020a0:	48000c00 	.word	0x48000c00
 80020a4:	48001000 	.word	0x48001000
 80020a8:	48001400 	.word	0x48001400
 80020ac:	48001800 	.word	0x48001800
 80020b0:	40010400 	.word	0x40010400

080020b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	807b      	strh	r3, [r7, #2]
 80020c0:	4613      	mov	r3, r2
 80020c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c4:	787b      	ldrb	r3, [r7, #1]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ca:	887a      	ldrh	r2, [r7, #2]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020d0:	e002      	b.n	80020d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020d2:	887a      	ldrh	r2, [r7, #2]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020f6:	887a      	ldrh	r2, [r7, #2]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4013      	ands	r3, r2
 80020fc:	041a      	lsls	r2, r3, #16
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	43d9      	mvns	r1, r3
 8002102:	887b      	ldrh	r3, [r7, #2]
 8002104:	400b      	ands	r3, r1
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	619a      	str	r2, [r3, #24]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002122:	4b08      	ldr	r3, [pc, #32]	@ (8002144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	4013      	ands	r3, r2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d006      	beq.n	800213c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800212e:	4a05      	ldr	r2, [pc, #20]	@ (8002144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fea8 	bl	8000e8c <HAL_GPIO_EXTI_Callback>
  }
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40010400 	.word	0x40010400

08002148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e08d      	b.n	8002276 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe ffea 	bl	8001148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2224      	movs	r2, #36	@ 0x24
 8002178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0201 	bic.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002198:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d107      	bne.n	80021c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	e006      	b.n	80021d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80021ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d108      	bne.n	80021ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	e007      	b.n	80021fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002208:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800220c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800221c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69d9      	ldr	r1, [r3, #28]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1a      	ldr	r2, [r3, #32]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2220      	movs	r2, #32
 8002262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b20      	cmp	r3, #32
 8002292:	d138      	bne.n	8002306 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800229e:	2302      	movs	r3, #2
 80022a0:	e032      	b.n	8002308 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2224      	movs	r2, #36	@ 0x24
 80022ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0201 	bic.w	r2, r2, #1
 80022c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80022d0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6819      	ldr	r1, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0201 	orr.w	r2, r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	e000      	b.n	8002308 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002306:	2302      	movs	r3, #2
  }
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b20      	cmp	r3, #32
 8002328:	d139      	bne.n	800239e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002334:	2302      	movs	r3, #2
 8002336:	e033      	b.n	80023a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2224      	movs	r2, #36	@ 0x24
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0201 	bic.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002366:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0201 	orr.w	r2, r2, #1
 8002388:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2220      	movs	r2, #32
 800238e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	e000      	b.n	80023a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800239e:	2302      	movs	r3, #2
  }
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e101      	b.n	80025c2 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff f83e 	bl	8001454 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2203      	movs	r2, #3
 80023dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f002 fe86 	bl	80050fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	7c1a      	ldrb	r2, [r3, #16]
 80023f8:	f88d 2000 	strb.w	r2, [sp]
 80023fc:	3304      	adds	r3, #4
 80023fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002400:	f002 fe4f 	bl	80050a2 <USB_CoreInit>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2202      	movs	r2, #2
 800240e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e0d5      	b.n	80025c2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2100      	movs	r1, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f002 fe7e 	bl	800511e <USB_SetCurrentMode>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0c6      	b.n	80025c2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002434:	2300      	movs	r3, #0
 8002436:	73fb      	strb	r3, [r7, #15]
 8002438:	e04a      	b.n	80024d0 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800243a:	7bfa      	ldrb	r2, [r7, #15]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	3315      	adds	r3, #21
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800244e:	7bfa      	ldrb	r2, [r7, #15]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4413      	add	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	3314      	adds	r3, #20
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	b298      	uxth	r0, r3
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	332e      	adds	r3, #46	@ 0x2e
 8002476:	4602      	mov	r2, r0
 8002478:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800247a:	7bfa      	ldrb	r2, [r7, #15]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4413      	add	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	3318      	adds	r3, #24
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	331c      	adds	r3, #28
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	3320      	adds	r3, #32
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	3324      	adds	r3, #36	@ 0x24
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	3301      	adds	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	791b      	ldrb	r3, [r3, #4]
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d3af      	bcc.n	800243a <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
 80024de:	e044      	b.n	800256a <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024e0:	7bfa      	ldrb	r2, [r7, #15]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002538:	7bfa      	ldrb	r2, [r7, #15]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	3301      	adds	r3, #1
 8002568:	73fb      	strb	r3, [r7, #15]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	791b      	ldrb	r3, [r3, #4]
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	429a      	cmp	r2, r3
 8002572:	d3b5      	bcc.n	80024e0 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	7c1a      	ldrb	r2, [r3, #16]
 800257c:	f88d 2000 	strb.w	r2, [sp]
 8002580:	3304      	adds	r3, #4
 8002582:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002584:	f002 fe18 	bl	80051b8 <USB_DevInit>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2202      	movs	r2, #2
 8002592:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e013      	b.n	80025c2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	7b1b      	ldrb	r3, [r3, #12]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d102      	bne.n	80025b6 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f80a 	bl	80025ca <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f002 ffbd 	bl	800553a <USB_DevDisconnect>

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b085      	sub	sp, #20
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025fc:	f043 0303 	orr.w	r3, r3, #3
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002618:	4b05      	ldr	r3, [pc, #20]	@ (8002630 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a04      	ldr	r2, [pc, #16]	@ (8002630 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800261e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002622:	6013      	str	r3, [r2, #0]
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40007000 	.word	0x40007000

08002634 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002638:	4b04      	ldr	r3, [pc, #16]	@ (800264c <HAL_PWREx_GetVoltageRange+0x18>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40007000 	.word	0x40007000

08002650 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800265e:	d130      	bne.n	80026c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002660:	4b23      	ldr	r3, [pc, #140]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800266c:	d038      	beq.n	80026e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800266e:	4b20      	ldr	r3, [pc, #128]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002676:	4a1e      	ldr	r2, [pc, #120]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002678:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800267c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800267e:	4b1d      	ldr	r3, [pc, #116]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2232      	movs	r2, #50	@ 0x32
 8002684:	fb02 f303 	mul.w	r3, r2, r3
 8002688:	4a1b      	ldr	r2, [pc, #108]	@ (80026f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	0c9b      	lsrs	r3, r3, #18
 8002690:	3301      	adds	r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002694:	e002      	b.n	800269c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	3b01      	subs	r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800269c:	4b14      	ldr	r3, [pc, #80]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026a8:	d102      	bne.n	80026b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f2      	bne.n	8002696 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026b0:	4b0f      	ldr	r3, [pc, #60]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026bc:	d110      	bne.n	80026e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e00f      	b.n	80026e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80026c2:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026ce:	d007      	beq.n	80026e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026d0:	4b07      	ldr	r3, [pc, #28]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026d8:	4a05      	ldr	r2, [pc, #20]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40007000 	.word	0x40007000
 80026f4:	20000000 	.word	0x20000000
 80026f8:	431bde83 	.word	0x431bde83

080026fc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002700:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4a04      	ldr	r2, [pc, #16]	@ (8002718 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002706:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800270a:	6053      	str	r3, [r2, #4]
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40007000 	.word	0x40007000

0800271c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af02      	add	r7, sp, #8
 8002722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002724:	f7ff f8fe 	bl	8001924 <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e063      	b.n	80027fc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10b      	bne.n	8002758 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7fe fd5b 	bl	8001204 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800274e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f858 	bl	8002808 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	3b01      	subs	r3, #1
 8002768:	021a      	lsls	r2, r3, #8
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	2120      	movs	r1, #32
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f850 	bl	8002824 <QSPI_WaitFlagStateUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002788:	7afb      	ldrb	r3, [r7, #11]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d131      	bne.n	80027f2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002798:	f023 0310 	bic.w	r3, r3, #16
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6852      	ldr	r2, [r2, #4]
 80027a0:	0611      	lsls	r1, r2, #24
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68d2      	ldr	r2, [r2, #12]
 80027a6:	4311      	orrs	r1, r2
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	430b      	orrs	r3, r1
 80027ae:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	4b13      	ldr	r3, [pc, #76]	@ (8002804 <HAL_QSPI_Init+0xe8>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6912      	ldr	r2, [r2, #16]
 80027be:	0411      	lsls	r1, r2, #16
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6952      	ldr	r2, [r2, #20]
 80027c4:	4311      	orrs	r1, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6992      	ldr	r2, [r2, #24]
 80027ca:	4311      	orrs	r1, r2
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	430b      	orrs	r3, r1
 80027d2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80027fa:	7afb      	ldrb	r3, [r7, #11]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	ffe0f8fe 	.word	0xffe0f8fe

08002808 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	4613      	mov	r3, r2
 8002832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002834:	e01a      	b.n	800286c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283c:	d016      	beq.n	800286c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800283e:	f7ff f871 	bl	8001924 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	429a      	cmp	r2, r3
 800284c:	d302      	bcc.n	8002854 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10b      	bne.n	800286c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2204      	movs	r2, #4
 8002858:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e00e      	b.n	800288a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	4013      	ands	r3, r2
 8002876:	2b00      	cmp	r3, #0
 8002878:	bf14      	ite	ne
 800287a:	2301      	movne	r3, #1
 800287c:	2300      	moveq	r3, #0
 800287e:	b2db      	uxtb	r3, r3
 8002880:	461a      	mov	r2, r3
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	429a      	cmp	r2, r3
 8002886:	d1d6      	bne.n	8002836 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e3ca      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028a6:	4b97      	ldr	r3, [pc, #604]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b0:	4b94      	ldr	r3, [pc, #592]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 80e4 	beq.w	8002a90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <HAL_RCC_OscConfig+0x4a>
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	2b0c      	cmp	r3, #12
 80028d2:	f040 808b 	bne.w	80029ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	f040 8087 	bne.w	80029ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028de:	4b89      	ldr	r3, [pc, #548]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_RCC_OscConfig+0x62>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e3a2      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1a      	ldr	r2, [r3, #32]
 80028fa:	4b82      	ldr	r3, [pc, #520]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <HAL_RCC_OscConfig+0x7c>
 8002906:	4b7f      	ldr	r3, [pc, #508]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800290e:	e005      	b.n	800291c <HAL_RCC_OscConfig+0x88>
 8002910:	4b7c      	ldr	r3, [pc, #496]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002912:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800291c:	4293      	cmp	r3, r2
 800291e:	d223      	bcs.n	8002968 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fd87 	bl	8003438 <RCC_SetFlashLatencyFromMSIRange>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e383      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002934:	4b73      	ldr	r3, [pc, #460]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a72      	ldr	r2, [pc, #456]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 800293a:	f043 0308 	orr.w	r3, r3, #8
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	4b70      	ldr	r3, [pc, #448]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	496d      	ldr	r1, [pc, #436]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002952:	4b6c      	ldr	r3, [pc, #432]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	021b      	lsls	r3, r3, #8
 8002960:	4968      	ldr	r1, [pc, #416]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
 8002966:	e025      	b.n	80029b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002968:	4b66      	ldr	r3, [pc, #408]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a65      	ldr	r2, [pc, #404]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 800296e:	f043 0308 	orr.w	r3, r3, #8
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	4b63      	ldr	r3, [pc, #396]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	4960      	ldr	r1, [pc, #384]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002982:	4313      	orrs	r3, r2
 8002984:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002986:	4b5f      	ldr	r3, [pc, #380]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	495b      	ldr	r1, [pc, #364]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002996:	4313      	orrs	r3, r2
 8002998:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d109      	bne.n	80029b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 fd47 	bl	8003438 <RCC_SetFlashLatencyFromMSIRange>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e343      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029b4:	f000 fc4a 	bl	800324c <HAL_RCC_GetSysClockFreq>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b52      	ldr	r3, [pc, #328]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	4950      	ldr	r1, [pc, #320]	@ (8002b08 <HAL_RCC_OscConfig+0x274>)
 80029c6:	5ccb      	ldrb	r3, [r1, r3]
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
 80029d0:	4a4e      	ldr	r2, [pc, #312]	@ (8002b0c <HAL_RCC_OscConfig+0x278>)
 80029d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029d4:	4b4e      	ldr	r3, [pc, #312]	@ (8002b10 <HAL_RCC_OscConfig+0x27c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe fdd7 	bl	800158c <HAL_InitTick>
 80029de:	4603      	mov	r3, r0
 80029e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d052      	beq.n	8002a8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
 80029ea:	e327      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d032      	beq.n	8002a5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029f4:	4b43      	ldr	r3, [pc, #268]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a42      	ldr	r2, [pc, #264]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a00:	f7fe ff90 	bl	8001924 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a08:	f7fe ff8c 	bl	8001924 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e310      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a1a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a26:	4b37      	ldr	r3, [pc, #220]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a36      	ldr	r2, [pc, #216]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a2c:	f043 0308 	orr.w	r3, r3, #8
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b34      	ldr	r3, [pc, #208]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	4931      	ldr	r1, [pc, #196]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a44:	4b2f      	ldr	r3, [pc, #188]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	492c      	ldr	r1, [pc, #176]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]
 8002a58:	e01a      	b.n	8002a90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a29      	ldr	r2, [pc, #164]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a66:	f7fe ff5d 	bl	8001924 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a6e:	f7fe ff59 	bl	8001924 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e2dd      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a80:	4b20      	ldr	r3, [pc, #128]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1f0      	bne.n	8002a6e <HAL_RCC_OscConfig+0x1da>
 8002a8c:	e000      	b.n	8002a90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d074      	beq.n	8002b86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d005      	beq.n	8002aae <HAL_RCC_OscConfig+0x21a>
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	2b0c      	cmp	r3, #12
 8002aa6:	d10e      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d10b      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aae:	4b15      	ldr	r3, [pc, #84]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d064      	beq.n	8002b84 <HAL_RCC_OscConfig+0x2f0>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d160      	bne.n	8002b84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e2ba      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ace:	d106      	bne.n	8002ade <HAL_RCC_OscConfig+0x24a>
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0b      	ldr	r2, [pc, #44]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002ad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	e026      	b.n	8002b2c <HAL_RCC_OscConfig+0x298>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ae6:	d115      	bne.n	8002b14 <HAL_RCC_OscConfig+0x280>
 8002ae8:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a05      	ldr	r2, [pc, #20]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002aee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b03      	ldr	r3, [pc, #12]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a02      	ldr	r2, [pc, #8]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	e014      	b.n	8002b2c <HAL_RCC_OscConfig+0x298>
 8002b02:	bf00      	nop
 8002b04:	40021000 	.word	0x40021000
 8002b08:	0800a194 	.word	0x0800a194
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	20000004 	.word	0x20000004
 8002b14:	4ba0      	ldr	r3, [pc, #640]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a9f      	ldr	r2, [pc, #636]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	4b9d      	ldr	r3, [pc, #628]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a9c      	ldr	r2, [pc, #624]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7fe fef6 	bl	8001924 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7fe fef2 	bl	8001924 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	@ 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e276      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b4e:	4b92      	ldr	r3, [pc, #584]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0x2a8>
 8002b5a:	e014      	b.n	8002b86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fee2 	bl	8001924 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b64:	f7fe fede 	bl	8001924 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	@ 0x64
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e262      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b76:	4b88      	ldr	r3, [pc, #544]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x2d0>
 8002b82:	e000      	b.n	8002b86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d060      	beq.n	8002c54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x310>
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2b0c      	cmp	r3, #12
 8002b9c:	d119      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d116      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba4:	4b7c      	ldr	r3, [pc, #496]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_OscConfig+0x328>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e23f      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bbc:	4b76      	ldr	r3, [pc, #472]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	061b      	lsls	r3, r3, #24
 8002bca:	4973      	ldr	r1, [pc, #460]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bd0:	e040      	b.n	8002c54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d023      	beq.n	8002c22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bda:	4b6f      	ldr	r3, [pc, #444]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a6e      	ldr	r2, [pc, #440]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be6:	f7fe fe9d 	bl	8001924 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bee:	f7fe fe99 	bl	8001924 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e21d      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c00:	4b65      	ldr	r3, [pc, #404]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c0c:	4b62      	ldr	r3, [pc, #392]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	061b      	lsls	r3, r3, #24
 8002c1a:	495f      	ldr	r1, [pc, #380]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	604b      	str	r3, [r1, #4]
 8002c20:	e018      	b.n	8002c54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c22:	4b5d      	ldr	r3, [pc, #372]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a5c      	ldr	r2, [pc, #368]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002c28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2e:	f7fe fe79 	bl	8001924 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c36:	f7fe fe75 	bl	8001924 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e1f9      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c48:	4b53      	ldr	r3, [pc, #332]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1f0      	bne.n	8002c36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d03c      	beq.n	8002cda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d01c      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c68:	4b4b      	ldr	r3, [pc, #300]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c6e:	4a4a      	ldr	r2, [pc, #296]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c78:	f7fe fe54 	bl	8001924 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c80:	f7fe fe50 	bl	8001924 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e1d4      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c92:	4b41      	ldr	r3, [pc, #260]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0ef      	beq.n	8002c80 <HAL_RCC_OscConfig+0x3ec>
 8002ca0:	e01b      	b.n	8002cda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ca8:	4a3b      	ldr	r2, [pc, #236]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb2:	f7fe fe37 	bl	8001924 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cba:	f7fe fe33 	bl	8001924 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e1b7      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ccc:	4b32      	ldr	r3, [pc, #200]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1ef      	bne.n	8002cba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80a6 	beq.w	8002e34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002cec:	4b2a      	ldr	r3, [pc, #168]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10d      	bne.n	8002d14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf8:	4b27      	ldr	r3, [pc, #156]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfc:	4a26      	ldr	r2, [pc, #152]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d02:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d04:	4b24      	ldr	r3, [pc, #144]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d10:	2301      	movs	r3, #1
 8002d12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d14:	4b21      	ldr	r3, [pc, #132]	@ (8002d9c <HAL_RCC_OscConfig+0x508>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d118      	bne.n	8002d52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d20:	4b1e      	ldr	r3, [pc, #120]	@ (8002d9c <HAL_RCC_OscConfig+0x508>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1d      	ldr	r2, [pc, #116]	@ (8002d9c <HAL_RCC_OscConfig+0x508>)
 8002d26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d2c:	f7fe fdfa 	bl	8001924 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d34:	f7fe fdf6 	bl	8001924 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e17a      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d46:	4b15      	ldr	r3, [pc, #84]	@ (8002d9c <HAL_RCC_OscConfig+0x508>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d108      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4d8>
 8002d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d60:	4a0d      	ldr	r2, [pc, #52]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d6a:	e029      	b.n	8002dc0 <HAL_RCC_OscConfig+0x52c>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d115      	bne.n	8002da0 <HAL_RCC_OscConfig+0x50c>
 8002d74:	4b08      	ldr	r3, [pc, #32]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7a:	4a07      	ldr	r2, [pc, #28]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002d7c:	f043 0304 	orr.w	r3, r3, #4
 8002d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d84:	4b04      	ldr	r3, [pc, #16]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8a:	4a03      	ldr	r2, [pc, #12]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d94:	e014      	b.n	8002dc0 <HAL_RCC_OscConfig+0x52c>
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40007000 	.word	0x40007000
 8002da0:	4b9c      	ldr	r3, [pc, #624]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da6:	4a9b      	ldr	r2, [pc, #620]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002db0:	4b98      	ldr	r3, [pc, #608]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db6:	4a97      	ldr	r2, [pc, #604]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002db8:	f023 0304 	bic.w	r3, r3, #4
 8002dbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d016      	beq.n	8002df6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc8:	f7fe fdac 	bl	8001924 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dce:	e00a      	b.n	8002de6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd0:	f7fe fda8 	bl	8001924 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e12a      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002de6:	4b8b      	ldr	r3, [pc, #556]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0ed      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x53c>
 8002df4:	e015      	b.n	8002e22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df6:	f7fe fd95 	bl	8001924 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfe:	f7fe fd91 	bl	8001924 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e113      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e14:	4b7f      	ldr	r3, [pc, #508]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1ed      	bne.n	8002dfe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e22:	7ffb      	ldrb	r3, [r7, #31]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d105      	bne.n	8002e34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e28:	4b7a      	ldr	r3, [pc, #488]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2c:	4a79      	ldr	r2, [pc, #484]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002e2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e32:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80fe 	beq.w	800303a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	f040 80d0 	bne.w	8002fe8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e48:	4b72      	ldr	r3, [pc, #456]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f003 0203 	and.w	r2, r3, #3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d130      	bne.n	8002ebe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e66:	3b01      	subs	r3, #1
 8002e68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d127      	bne.n	8002ebe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e78:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d11f      	bne.n	8002ebe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e88:	2a07      	cmp	r2, #7
 8002e8a:	bf14      	ite	ne
 8002e8c:	2201      	movne	r2, #1
 8002e8e:	2200      	moveq	r2, #0
 8002e90:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d113      	bne.n	8002ebe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea0:	085b      	lsrs	r3, r3, #1
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d109      	bne.n	8002ebe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	085b      	lsrs	r3, r3, #1
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d06e      	beq.n	8002f9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	2b0c      	cmp	r3, #12
 8002ec2:	d069      	beq.n	8002f98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ec4:	4b53      	ldr	r3, [pc, #332]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d105      	bne.n	8002edc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ed0:	4b50      	ldr	r3, [pc, #320]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0ad      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ee0:	4b4c      	ldr	r3, [pc, #304]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a4b      	ldr	r2, [pc, #300]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002ee6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002eec:	f7fe fd1a 	bl	8001924 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe fd16 	bl	8001924 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e09a      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f06:	4b43      	ldr	r3, [pc, #268]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f12:	4b40      	ldr	r3, [pc, #256]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	4b40      	ldr	r3, [pc, #256]	@ (8003018 <HAL_RCC_OscConfig+0x784>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f22:	3a01      	subs	r2, #1
 8002f24:	0112      	lsls	r2, r2, #4
 8002f26:	4311      	orrs	r1, r2
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f2c:	0212      	lsls	r2, r2, #8
 8002f2e:	4311      	orrs	r1, r2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f34:	0852      	lsrs	r2, r2, #1
 8002f36:	3a01      	subs	r2, #1
 8002f38:	0552      	lsls	r2, r2, #21
 8002f3a:	4311      	orrs	r1, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f40:	0852      	lsrs	r2, r2, #1
 8002f42:	3a01      	subs	r2, #1
 8002f44:	0652      	lsls	r2, r2, #25
 8002f46:	4311      	orrs	r1, r2
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f4c:	0912      	lsrs	r2, r2, #4
 8002f4e:	0452      	lsls	r2, r2, #17
 8002f50:	430a      	orrs	r2, r1
 8002f52:	4930      	ldr	r1, [pc, #192]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f58:	4b2e      	ldr	r3, [pc, #184]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a2d      	ldr	r2, [pc, #180]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002f5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f64:	4b2b      	ldr	r3, [pc, #172]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	4a2a      	ldr	r2, [pc, #168]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002f6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f70:	f7fe fcd8 	bl	8001924 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f78:	f7fe fcd4 	bl	8001924 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e058      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8a:	4b22      	ldr	r3, [pc, #136]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f96:	e050      	b.n	800303a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e04f      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d148      	bne.n	800303a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a19      	ldr	r2, [pc, #100]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002fae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fb4:	4b17      	ldr	r3, [pc, #92]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4a16      	ldr	r2, [pc, #88]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002fba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fc0:	f7fe fcb0 	bl	8001924 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7fe fcac 	bl	8001924 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e030      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fda:	4b0e      	ldr	r3, [pc, #56]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x734>
 8002fe6:	e028      	b.n	800303a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	2b0c      	cmp	r3, #12
 8002fec:	d023      	beq.n	8003036 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fee:	4b09      	ldr	r3, [pc, #36]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a08      	ldr	r2, [pc, #32]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002ff4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fc93 	bl	8001924 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003000:	e00c      	b.n	800301c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003002:	f7fe fc8f 	bl	8001924 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d905      	bls.n	800301c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e013      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
 8003014:	40021000 	.word	0x40021000
 8003018:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800301c:	4b09      	ldr	r3, [pc, #36]	@ (8003044 <HAL_RCC_OscConfig+0x7b0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1ec      	bne.n	8003002 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003028:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <HAL_RCC_OscConfig+0x7b0>)
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	4905      	ldr	r1, [pc, #20]	@ (8003044 <HAL_RCC_OscConfig+0x7b0>)
 800302e:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <HAL_RCC_OscConfig+0x7b4>)
 8003030:	4013      	ands	r3, r2
 8003032:	60cb      	str	r3, [r1, #12]
 8003034:	e001      	b.n	800303a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3720      	adds	r7, #32
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40021000 	.word	0x40021000
 8003048:	feeefffc 	.word	0xfeeefffc

0800304c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0e7      	b.n	8003230 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003060:	4b75      	ldr	r3, [pc, #468]	@ (8003238 <HAL_RCC_ClockConfig+0x1ec>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d910      	bls.n	8003090 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b72      	ldr	r3, [pc, #456]	@ (8003238 <HAL_RCC_ClockConfig+0x1ec>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 0207 	bic.w	r2, r3, #7
 8003076:	4970      	ldr	r1, [pc, #448]	@ (8003238 <HAL_RCC_ClockConfig+0x1ec>)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b6e      	ldr	r3, [pc, #440]	@ (8003238 <HAL_RCC_ClockConfig+0x1ec>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0cf      	b.n	8003230 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d010      	beq.n	80030be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	4b66      	ldr	r3, [pc, #408]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d908      	bls.n	80030be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ac:	4b63      	ldr	r3, [pc, #396]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	4960      	ldr	r1, [pc, #384]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d04c      	beq.n	8003164 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d107      	bne.n	80030e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d2:	4b5a      	ldr	r3, [pc, #360]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d121      	bne.n	8003122 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e0a6      	b.n	8003230 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ea:	4b54      	ldr	r3, [pc, #336]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d115      	bne.n	8003122 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e09a      	b.n	8003230 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003102:	4b4e      	ldr	r3, [pc, #312]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d109      	bne.n	8003122 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e08e      	b.n	8003230 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003112:	4b4a      	ldr	r3, [pc, #296]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e086      	b.n	8003230 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003122:	4b46      	ldr	r3, [pc, #280]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f023 0203 	bic.w	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4943      	ldr	r1, [pc, #268]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 8003130:	4313      	orrs	r3, r2
 8003132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003134:	f7fe fbf6 	bl	8001924 <HAL_GetTick>
 8003138:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313a:	e00a      	b.n	8003152 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800313c:	f7fe fbf2 	bl	8001924 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e06e      	b.n	8003230 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	4b3a      	ldr	r3, [pc, #232]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 020c 	and.w	r2, r3, #12
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	429a      	cmp	r2, r3
 8003162:	d1eb      	bne.n	800313c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d010      	beq.n	8003192 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	4b31      	ldr	r3, [pc, #196]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800317c:	429a      	cmp	r2, r3
 800317e:	d208      	bcs.n	8003192 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003180:	4b2e      	ldr	r3, [pc, #184]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	492b      	ldr	r1, [pc, #172]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003192:	4b29      	ldr	r3, [pc, #164]	@ (8003238 <HAL_RCC_ClockConfig+0x1ec>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d210      	bcs.n	80031c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a0:	4b25      	ldr	r3, [pc, #148]	@ (8003238 <HAL_RCC_ClockConfig+0x1ec>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f023 0207 	bic.w	r2, r3, #7
 80031a8:	4923      	ldr	r1, [pc, #140]	@ (8003238 <HAL_RCC_ClockConfig+0x1ec>)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b0:	4b21      	ldr	r3, [pc, #132]	@ (8003238 <HAL_RCC_ClockConfig+0x1ec>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d001      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e036      	b.n	8003230 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d008      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031ce:	4b1b      	ldr	r3, [pc, #108]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	4918      	ldr	r1, [pc, #96]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d009      	beq.n	8003200 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ec:	4b13      	ldr	r3, [pc, #76]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4910      	ldr	r1, [pc, #64]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003200:	f000 f824 	bl	800324c <HAL_RCC_GetSysClockFreq>
 8003204:	4602      	mov	r2, r0
 8003206:	4b0d      	ldr	r3, [pc, #52]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	091b      	lsrs	r3, r3, #4
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	490b      	ldr	r1, [pc, #44]	@ (8003240 <HAL_RCC_ClockConfig+0x1f4>)
 8003212:	5ccb      	ldrb	r3, [r1, r3]
 8003214:	f003 031f 	and.w	r3, r3, #31
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
 800321c:	4a09      	ldr	r2, [pc, #36]	@ (8003244 <HAL_RCC_ClockConfig+0x1f8>)
 800321e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003220:	4b09      	ldr	r3, [pc, #36]	@ (8003248 <HAL_RCC_ClockConfig+0x1fc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7fe f9b1 	bl	800158c <HAL_InitTick>
 800322a:	4603      	mov	r3, r0
 800322c:	72fb      	strb	r3, [r7, #11]

  return status;
 800322e:	7afb      	ldrb	r3, [r7, #11]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40022000 	.word	0x40022000
 800323c:	40021000 	.word	0x40021000
 8003240:	0800a194 	.word	0x0800a194
 8003244:	20000000 	.word	0x20000000
 8003248:	20000004 	.word	0x20000004

0800324c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800324c:	b480      	push	{r7}
 800324e:	b089      	sub	sp, #36	@ 0x24
 8003250:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	2300      	movs	r3, #0
 8003258:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800325a:	4b3e      	ldr	r3, [pc, #248]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003264:	4b3b      	ldr	r3, [pc, #236]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x34>
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	2b0c      	cmp	r3, #12
 8003278:	d121      	bne.n	80032be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d11e      	bne.n	80032be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003280:	4b34      	ldr	r3, [pc, #208]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d107      	bne.n	800329c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800328c:	4b31      	ldr	r3, [pc, #196]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 800328e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003292:	0a1b      	lsrs	r3, r3, #8
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	e005      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800329c:	4b2d      	ldr	r3, [pc, #180]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10d      	bne.n	80032d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d102      	bne.n	80032ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032c4:	4b25      	ldr	r3, [pc, #148]	@ (800335c <HAL_RCC_GetSysClockFreq+0x110>)
 80032c6:	61bb      	str	r3, [r7, #24]
 80032c8:	e004      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d101      	bne.n	80032d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032d0:	4b23      	ldr	r3, [pc, #140]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x114>)
 80032d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2b0c      	cmp	r3, #12
 80032d8:	d134      	bne.n	8003344 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032da:	4b1e      	ldr	r3, [pc, #120]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d003      	beq.n	80032f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d003      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0xac>
 80032f0:	e005      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032f2:	4b1a      	ldr	r3, [pc, #104]	@ (800335c <HAL_RCC_GetSysClockFreq+0x110>)
 80032f4:	617b      	str	r3, [r7, #20]
      break;
 80032f6:	e005      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032f8:	4b19      	ldr	r3, [pc, #100]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x114>)
 80032fa:	617b      	str	r3, [r7, #20]
      break;
 80032fc:	e002      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	617b      	str	r3, [r7, #20]
      break;
 8003302:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003304:	4b13      	ldr	r3, [pc, #76]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	3301      	adds	r3, #1
 8003310:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003312:	4b10      	ldr	r3, [pc, #64]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	0a1b      	lsrs	r3, r3, #8
 8003318:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	fb03 f202 	mul.w	r2, r3, r2
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	fbb2 f3f3 	udiv	r3, r2, r3
 8003328:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800332a:	4b0a      	ldr	r3, [pc, #40]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	0e5b      	lsrs	r3, r3, #25
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	3301      	adds	r3, #1
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003342:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003344:	69bb      	ldr	r3, [r7, #24]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3724      	adds	r7, #36	@ 0x24
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
 8003358:	0800a1ac 	.word	0x0800a1ac
 800335c:	00f42400 	.word	0x00f42400
 8003360:	007a1200 	.word	0x007a1200

08003364 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003368:	4b03      	ldr	r3, [pc, #12]	@ (8003378 <HAL_RCC_GetHCLKFreq+0x14>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	20000000 	.word	0x20000000

0800337c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003380:	f7ff fff0 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 8003384:	4602      	mov	r2, r0
 8003386:	4b06      	ldr	r3, [pc, #24]	@ (80033a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	0a1b      	lsrs	r3, r3, #8
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	4904      	ldr	r1, [pc, #16]	@ (80033a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003392:	5ccb      	ldrb	r3, [r1, r3]
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800339c:	4618      	mov	r0, r3
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40021000 	.word	0x40021000
 80033a4:	0800a1a4 	.word	0x0800a1a4

080033a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033ac:	f7ff ffda 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 80033b0:	4602      	mov	r2, r0
 80033b2:	4b06      	ldr	r3, [pc, #24]	@ (80033cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	0adb      	lsrs	r3, r3, #11
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	4904      	ldr	r1, [pc, #16]	@ (80033d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033be:	5ccb      	ldrb	r3, [r1, r3]
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40021000 	.word	0x40021000
 80033d0:	0800a1a4 	.word	0x0800a1a4

080033d4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	220f      	movs	r2, #15
 80033e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80033e4:	4b12      	ldr	r3, [pc, #72]	@ (8003430 <HAL_RCC_GetClockConfig+0x5c>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 0203 	and.w	r2, r3, #3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80033f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003430 <HAL_RCC_GetClockConfig+0x5c>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80033fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003430 <HAL_RCC_GetClockConfig+0x5c>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003408:	4b09      	ldr	r3, [pc, #36]	@ (8003430 <HAL_RCC_GetClockConfig+0x5c>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	08db      	lsrs	r3, r3, #3
 800340e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003416:	4b07      	ldr	r3, [pc, #28]	@ (8003434 <HAL_RCC_GetClockConfig+0x60>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0207 	and.w	r2, r3, #7
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	601a      	str	r2, [r3, #0]
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000
 8003434:	40022000 	.word	0x40022000

08003438 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003440:	2300      	movs	r3, #0
 8003442:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003444:	4b2a      	ldr	r3, [pc, #168]	@ (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003448:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003450:	f7ff f8f0 	bl	8002634 <HAL_PWREx_GetVoltageRange>
 8003454:	6178      	str	r0, [r7, #20]
 8003456:	e014      	b.n	8003482 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003458:	4b25      	ldr	r3, [pc, #148]	@ (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800345a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345c:	4a24      	ldr	r2, [pc, #144]	@ (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800345e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003462:	6593      	str	r3, [r2, #88]	@ 0x58
 8003464:	4b22      	ldr	r3, [pc, #136]	@ (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003470:	f7ff f8e0 	bl	8002634 <HAL_PWREx_GetVoltageRange>
 8003474:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003476:	4b1e      	ldr	r3, [pc, #120]	@ (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347a:	4a1d      	ldr	r2, [pc, #116]	@ (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800347c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003480:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003488:	d10b      	bne.n	80034a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b80      	cmp	r3, #128	@ 0x80
 800348e:	d919      	bls.n	80034c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2ba0      	cmp	r3, #160	@ 0xa0
 8003494:	d902      	bls.n	800349c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003496:	2302      	movs	r3, #2
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	e013      	b.n	80034c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800349c:	2301      	movs	r3, #1
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	e010      	b.n	80034c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b80      	cmp	r3, #128	@ 0x80
 80034a6:	d902      	bls.n	80034ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034a8:	2303      	movs	r3, #3
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	e00a      	b.n	80034c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b80      	cmp	r3, #128	@ 0x80
 80034b2:	d102      	bne.n	80034ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034b4:	2302      	movs	r3, #2
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	e004      	b.n	80034c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b70      	cmp	r3, #112	@ 0x70
 80034be:	d101      	bne.n	80034c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034c0:	2301      	movs	r3, #1
 80034c2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034c4:	4b0b      	ldr	r3, [pc, #44]	@ (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f023 0207 	bic.w	r2, r3, #7
 80034cc:	4909      	ldr	r1, [pc, #36]	@ (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034d4:	4b07      	ldr	r3, [pc, #28]	@ (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d001      	beq.n	80034e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40022000 	.word	0x40022000

080034f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003500:	2300      	movs	r3, #0
 8003502:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003504:	2300      	movs	r3, #0
 8003506:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003510:	2b00      	cmp	r3, #0
 8003512:	d041      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003518:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800351c:	d02a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800351e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003522:	d824      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003524:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003528:	d008      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800352a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800352e:	d81e      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003534:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003538:	d010      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800353a:	e018      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800353c:	4b86      	ldr	r3, [pc, #536]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4a85      	ldr	r2, [pc, #532]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003546:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003548:	e015      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3304      	adds	r3, #4
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f000 facb 	bl	8003aec <RCCEx_PLLSAI1_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800355a:	e00c      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3320      	adds	r3, #32
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fbb6 	bl	8003cd4 <RCCEx_PLLSAI2_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800356c:	e003      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	74fb      	strb	r3, [r7, #19]
      break;
 8003572:	e000      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003574:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10b      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800357c:	4b76      	ldr	r3, [pc, #472]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003582:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800358a:	4973      	ldr	r1, [pc, #460]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003592:	e001      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d041      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035ac:	d02a      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80035ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035b2:	d824      	bhi.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035b8:	d008      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80035ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035be:	d81e      	bhi.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80035c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035c8:	d010      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80035ca:	e018      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035cc:	4b62      	ldr	r3, [pc, #392]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4a61      	ldr	r2, [pc, #388]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035d8:	e015      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3304      	adds	r3, #4
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fa83 	bl	8003aec <RCCEx_PLLSAI1_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035ea:	e00c      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3320      	adds	r3, #32
 80035f0:	2100      	movs	r1, #0
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fb6e 	bl	8003cd4 <RCCEx_PLLSAI2_Config>
 80035f8:	4603      	mov	r3, r0
 80035fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035fc:	e003      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	74fb      	strb	r3, [r7, #19]
      break;
 8003602:	e000      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003604:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003606:	7cfb      	ldrb	r3, [r7, #19]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10b      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800360c:	4b52      	ldr	r3, [pc, #328]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003612:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800361a:	494f      	ldr	r1, [pc, #316]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003622:	e001      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003624:	7cfb      	ldrb	r3, [r7, #19]
 8003626:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80a0 	beq.w	8003776 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003636:	2300      	movs	r3, #0
 8003638:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800363a:	4b47      	ldr	r3, [pc, #284]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800363c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800364a:	2300      	movs	r3, #0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003650:	4b41      	ldr	r3, [pc, #260]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003654:	4a40      	ldr	r2, [pc, #256]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800365a:	6593      	str	r3, [r2, #88]	@ 0x58
 800365c:	4b3e      	ldr	r3, [pc, #248]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003668:	2301      	movs	r3, #1
 800366a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800366c:	4b3b      	ldr	r3, [pc, #236]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a3a      	ldr	r2, [pc, #232]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003676:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003678:	f7fe f954 	bl	8001924 <HAL_GetTick>
 800367c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800367e:	e009      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003680:	f7fe f950 	bl	8001924 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d902      	bls.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	74fb      	strb	r3, [r7, #19]
        break;
 8003692:	e005      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003694:	4b31      	ldr	r3, [pc, #196]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0ef      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d15c      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d01f      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d019      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036c4:	4b24      	ldr	r3, [pc, #144]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036d0:	4b21      	ldr	r3, [pc, #132]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d6:	4a20      	ldr	r2, [pc, #128]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036f0:	4a19      	ldr	r2, [pc, #100]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d016      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003702:	f7fe f90f 	bl	8001924 <HAL_GetTick>
 8003706:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003708:	e00b      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370a:	f7fe f90b 	bl	8001924 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003718:	4293      	cmp	r3, r2
 800371a:	d902      	bls.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	74fb      	strb	r3, [r7, #19]
            break;
 8003720:	e006      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003722:	4b0d      	ldr	r3, [pc, #52]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0ec      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10c      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003736:	4b08      	ldr	r3, [pc, #32]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003746:	4904      	ldr	r1, [pc, #16]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800374e:	e009      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003750:	7cfb      	ldrb	r3, [r7, #19]
 8003752:	74bb      	strb	r3, [r7, #18]
 8003754:	e006      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
 800375c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003764:	7c7b      	ldrb	r3, [r7, #17]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d105      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376a:	4b9e      	ldr	r3, [pc, #632]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376e:	4a9d      	ldr	r2, [pc, #628]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003770:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003774:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003782:	4b98      	ldr	r3, [pc, #608]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003788:	f023 0203 	bic.w	r2, r3, #3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003790:	4994      	ldr	r1, [pc, #592]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037a4:	4b8f      	ldr	r3, [pc, #572]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037aa:	f023 020c 	bic.w	r2, r3, #12
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b2:	498c      	ldr	r1, [pc, #560]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037c6:	4b87      	ldr	r3, [pc, #540]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d4:	4983      	ldr	r1, [pc, #524]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037e8:	4b7e      	ldr	r3, [pc, #504]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f6:	497b      	ldr	r1, [pc, #492]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800380a:	4b76      	ldr	r3, [pc, #472]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003810:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003818:	4972      	ldr	r1, [pc, #456]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800382c:	4b6d      	ldr	r3, [pc, #436]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003832:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800383a:	496a      	ldr	r1, [pc, #424]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800384e:	4b65      	ldr	r3, [pc, #404]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003854:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385c:	4961      	ldr	r1, [pc, #388]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003870:	4b5c      	ldr	r3, [pc, #368]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003876:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387e:	4959      	ldr	r1, [pc, #356]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003892:	4b54      	ldr	r3, [pc, #336]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003898:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a0:	4950      	ldr	r1, [pc, #320]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038b4:	4b4b      	ldr	r3, [pc, #300]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c2:	4948      	ldr	r1, [pc, #288]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038d6:	4b43      	ldr	r3, [pc, #268]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e4:	493f      	ldr	r1, [pc, #252]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d028      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038f8:	4b3a      	ldr	r3, [pc, #232]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003906:	4937      	ldr	r1, [pc, #220]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003912:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003916:	d106      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003918:	4b32      	ldr	r3, [pc, #200]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4a31      	ldr	r2, [pc, #196]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003922:	60d3      	str	r3, [r2, #12]
 8003924:	e011      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800392a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800392e:	d10c      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3304      	adds	r3, #4
 8003934:	2101      	movs	r1, #1
 8003936:	4618      	mov	r0, r3
 8003938:	f000 f8d8 	bl	8003aec <RCCEx_PLLSAI1_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003940:	7cfb      	ldrb	r3, [r7, #19]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003946:	7cfb      	ldrb	r3, [r7, #19]
 8003948:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d028      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003956:	4b23      	ldr	r3, [pc, #140]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003964:	491f      	ldr	r1, [pc, #124]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003970:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003974:	d106      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003976:	4b1b      	ldr	r3, [pc, #108]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	4a1a      	ldr	r2, [pc, #104]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003980:	60d3      	str	r3, [r2, #12]
 8003982:	e011      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003988:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800398c:	d10c      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3304      	adds	r3, #4
 8003992:	2101      	movs	r1, #1
 8003994:	4618      	mov	r0, r3
 8003996:	f000 f8a9 	bl	8003aec <RCCEx_PLLSAI1_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800399e:	7cfb      	ldrb	r3, [r7, #19]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80039a4:	7cfb      	ldrb	r3, [r7, #19]
 80039a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d02b      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039b4:	4b0b      	ldr	r3, [pc, #44]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039c2:	4908      	ldr	r1, [pc, #32]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039d2:	d109      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d4:	4b03      	ldr	r3, [pc, #12]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4a02      	ldr	r2, [pc, #8]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039de:	60d3      	str	r3, [r2, #12]
 80039e0:	e014      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80039e2:	bf00      	nop
 80039e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3304      	adds	r3, #4
 80039f6:	2101      	movs	r1, #1
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 f877 	bl	8003aec <RCCEx_PLLSAI1_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a02:	7cfb      	ldrb	r3, [r7, #19]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a08:	7cfb      	ldrb	r3, [r7, #19]
 8003a0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d02f      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a18:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a26:	4928      	ldr	r1, [pc, #160]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a36:	d10d      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	2102      	movs	r1, #2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f854 	bl	8003aec <RCCEx_PLLSAI1_Config>
 8003a44:	4603      	mov	r3, r0
 8003a46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a48:	7cfb      	ldrb	r3, [r7, #19]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d014      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a4e:	7cfb      	ldrb	r3, [r7, #19]
 8003a50:	74bb      	strb	r3, [r7, #18]
 8003a52:	e011      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3320      	adds	r3, #32
 8003a62:	2102      	movs	r1, #2
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 f935 	bl	8003cd4 <RCCEx_PLLSAI2_Config>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a74:	7cfb      	ldrb	r3, [r7, #19]
 8003a76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a84:	4b10      	ldr	r3, [pc, #64]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a92:	490d      	ldr	r1, [pc, #52]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00b      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003aa6:	4b08      	ldr	r3, [pc, #32]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ab6:	4904      	ldr	r1, [pc, #16]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003abe:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40021000 	.word	0x40021000

08003acc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003ad0:	4b05      	ldr	r3, [pc, #20]	@ (8003ae8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a04      	ldr	r2, [pc, #16]	@ (8003ae8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ad6:	f043 0304 	orr.w	r3, r3, #4
 8003ada:	6013      	str	r3, [r2, #0]
}
 8003adc:	bf00      	nop
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000

08003aec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003afa:	4b75      	ldr	r3, [pc, #468]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d018      	beq.n	8003b38 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b06:	4b72      	ldr	r3, [pc, #456]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f003 0203 	and.w	r2, r3, #3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d10d      	bne.n	8003b32 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
       ||
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d009      	beq.n	8003b32 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b1e:	4b6c      	ldr	r3, [pc, #432]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	091b      	lsrs	r3, r3, #4
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
       ||
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d047      	beq.n	8003bc2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	73fb      	strb	r3, [r7, #15]
 8003b36:	e044      	b.n	8003bc2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d018      	beq.n	8003b72 <RCCEx_PLLSAI1_Config+0x86>
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d825      	bhi.n	8003b90 <RCCEx_PLLSAI1_Config+0xa4>
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d002      	beq.n	8003b4e <RCCEx_PLLSAI1_Config+0x62>
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d009      	beq.n	8003b60 <RCCEx_PLLSAI1_Config+0x74>
 8003b4c:	e020      	b.n	8003b90 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b4e:	4b60      	ldr	r3, [pc, #384]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d11d      	bne.n	8003b96 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b5e:	e01a      	b.n	8003b96 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b60:	4b5b      	ldr	r3, [pc, #364]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d116      	bne.n	8003b9a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b70:	e013      	b.n	8003b9a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b72:	4b57      	ldr	r3, [pc, #348]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10f      	bne.n	8003b9e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b7e:	4b54      	ldr	r3, [pc, #336]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b8e:	e006      	b.n	8003b9e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
      break;
 8003b94:	e004      	b.n	8003ba0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b96:	bf00      	nop
 8003b98:	e002      	b.n	8003ba0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b9a:	bf00      	nop
 8003b9c:	e000      	b.n	8003ba0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10d      	bne.n	8003bc2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6819      	ldr	r1, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	4944      	ldr	r1, [pc, #272]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d17d      	bne.n	8003cc4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003bc8:	4b41      	ldr	r3, [pc, #260]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a40      	ldr	r2, [pc, #256]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003bd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd4:	f7fd fea6 	bl	8001924 <HAL_GetTick>
 8003bd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bda:	e009      	b.n	8003bf0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bdc:	f7fd fea2 	bl	8001924 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d902      	bls.n	8003bf0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	73fb      	strb	r3, [r7, #15]
        break;
 8003bee:	e005      	b.n	8003bfc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bf0:	4b37      	ldr	r3, [pc, #220]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1ef      	bne.n	8003bdc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d160      	bne.n	8003cc4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d111      	bne.n	8003c2c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c08:	4b31      	ldr	r3, [pc, #196]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003c10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6892      	ldr	r2, [r2, #8]
 8003c18:	0211      	lsls	r1, r2, #8
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	68d2      	ldr	r2, [r2, #12]
 8003c1e:	0912      	lsrs	r2, r2, #4
 8003c20:	0452      	lsls	r2, r2, #17
 8003c22:	430a      	orrs	r2, r1
 8003c24:	492a      	ldr	r1, [pc, #168]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	610b      	str	r3, [r1, #16]
 8003c2a:	e027      	b.n	8003c7c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d112      	bne.n	8003c58 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c32:	4b27      	ldr	r3, [pc, #156]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003c3a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6892      	ldr	r2, [r2, #8]
 8003c42:	0211      	lsls	r1, r2, #8
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6912      	ldr	r2, [r2, #16]
 8003c48:	0852      	lsrs	r2, r2, #1
 8003c4a:	3a01      	subs	r2, #1
 8003c4c:	0552      	lsls	r2, r2, #21
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	491f      	ldr	r1, [pc, #124]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	610b      	str	r3, [r1, #16]
 8003c56:	e011      	b.n	8003c7c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c58:	4b1d      	ldr	r3, [pc, #116]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003c60:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6892      	ldr	r2, [r2, #8]
 8003c68:	0211      	lsls	r1, r2, #8
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6952      	ldr	r2, [r2, #20]
 8003c6e:	0852      	lsrs	r2, r2, #1
 8003c70:	3a01      	subs	r2, #1
 8003c72:	0652      	lsls	r2, r2, #25
 8003c74:	430a      	orrs	r2, r1
 8003c76:	4916      	ldr	r1, [pc, #88]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c7c:	4b14      	ldr	r3, [pc, #80]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a13      	ldr	r2, [pc, #76]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c82:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c88:	f7fd fe4c 	bl	8001924 <HAL_GetTick>
 8003c8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c8e:	e009      	b.n	8003ca4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c90:	f7fd fe48 	bl	8001924 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d902      	bls.n	8003ca4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	73fb      	strb	r3, [r7, #15]
          break;
 8003ca2:	e005      	b.n	8003cb0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0ef      	beq.n	8003c90 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cb6:	4b06      	ldr	r3, [pc, #24]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	4904      	ldr	r1, [pc, #16]	@ (8003cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40021000 	.word	0x40021000

08003cd4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ce2:	4b6a      	ldr	r3, [pc, #424]	@ (8003e8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d018      	beq.n	8003d20 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003cee:	4b67      	ldr	r3, [pc, #412]	@ (8003e8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f003 0203 	and.w	r2, r3, #3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d10d      	bne.n	8003d1a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
       ||
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d009      	beq.n	8003d1a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d06:	4b61      	ldr	r3, [pc, #388]	@ (8003e8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	091b      	lsrs	r3, r3, #4
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
       ||
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d047      	beq.n	8003daa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	73fb      	strb	r3, [r7, #15]
 8003d1e:	e044      	b.n	8003daa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d018      	beq.n	8003d5a <RCCEx_PLLSAI2_Config+0x86>
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d825      	bhi.n	8003d78 <RCCEx_PLLSAI2_Config+0xa4>
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d002      	beq.n	8003d36 <RCCEx_PLLSAI2_Config+0x62>
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d009      	beq.n	8003d48 <RCCEx_PLLSAI2_Config+0x74>
 8003d34:	e020      	b.n	8003d78 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d36:	4b55      	ldr	r3, [pc, #340]	@ (8003e8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d11d      	bne.n	8003d7e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d46:	e01a      	b.n	8003d7e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d48:	4b50      	ldr	r3, [pc, #320]	@ (8003e8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d116      	bne.n	8003d82 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d58:	e013      	b.n	8003d82 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d5a:	4b4c      	ldr	r3, [pc, #304]	@ (8003e8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10f      	bne.n	8003d86 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d66:	4b49      	ldr	r3, [pc, #292]	@ (8003e8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d76:	e006      	b.n	8003d86 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d7c:	e004      	b.n	8003d88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d7e:	bf00      	nop
 8003d80:	e002      	b.n	8003d88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d82:	bf00      	nop
 8003d84:	e000      	b.n	8003d88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d86:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10d      	bne.n	8003daa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d8e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6819      	ldr	r1, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	430b      	orrs	r3, r1
 8003da4:	4939      	ldr	r1, [pc, #228]	@ (8003e8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d167      	bne.n	8003e80 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003db0:	4b36      	ldr	r3, [pc, #216]	@ (8003e8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a35      	ldr	r2, [pc, #212]	@ (8003e8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dbc:	f7fd fdb2 	bl	8001924 <HAL_GetTick>
 8003dc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dc2:	e009      	b.n	8003dd8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dc4:	f7fd fdae 	bl	8001924 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d902      	bls.n	8003dd8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	73fb      	strb	r3, [r7, #15]
        break;
 8003dd6:	e005      	b.n	8003de4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dd8:	4b2c      	ldr	r3, [pc, #176]	@ (8003e8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1ef      	bne.n	8003dc4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d14a      	bne.n	8003e80 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d111      	bne.n	8003e14 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003df0:	4b26      	ldr	r3, [pc, #152]	@ (8003e8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003df8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6892      	ldr	r2, [r2, #8]
 8003e00:	0211      	lsls	r1, r2, #8
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	68d2      	ldr	r2, [r2, #12]
 8003e06:	0912      	lsrs	r2, r2, #4
 8003e08:	0452      	lsls	r2, r2, #17
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	491f      	ldr	r1, [pc, #124]	@ (8003e8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	614b      	str	r3, [r1, #20]
 8003e12:	e011      	b.n	8003e38 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e14:	4b1d      	ldr	r3, [pc, #116]	@ (8003e8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003e1c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6892      	ldr	r2, [r2, #8]
 8003e24:	0211      	lsls	r1, r2, #8
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6912      	ldr	r2, [r2, #16]
 8003e2a:	0852      	lsrs	r2, r2, #1
 8003e2c:	3a01      	subs	r2, #1
 8003e2e:	0652      	lsls	r2, r2, #25
 8003e30:	430a      	orrs	r2, r1
 8003e32:	4916      	ldr	r1, [pc, #88]	@ (8003e8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e38:	4b14      	ldr	r3, [pc, #80]	@ (8003e8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a13      	ldr	r2, [pc, #76]	@ (8003e8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e44:	f7fd fd6e 	bl	8001924 <HAL_GetTick>
 8003e48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e4a:	e009      	b.n	8003e60 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e4c:	f7fd fd6a 	bl	8001924 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d902      	bls.n	8003e60 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	73fb      	strb	r3, [r7, #15]
          break;
 8003e5e:	e005      	b.n	8003e6c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e60:	4b0a      	ldr	r3, [pc, #40]	@ (8003e8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0ef      	beq.n	8003e4c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d106      	bne.n	8003e80 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e72:	4b06      	ldr	r3, [pc, #24]	@ (8003e8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e74:	695a      	ldr	r2, [r3, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	4904      	ldr	r1, [pc, #16]	@ (8003e8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40021000 	.word	0x40021000

08003e90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e095      	b.n	8003fce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d108      	bne.n	8003ebc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003eb2:	d009      	beq.n	8003ec8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	61da      	str	r2, [r3, #28]
 8003eba:	e005      	b.n	8003ec8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fd f9d2 	bl	800128c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003efe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f08:	d902      	bls.n	8003f10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	e002      	b.n	8003f16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003f1e:	d007      	beq.n	8003f30 <HAL_SPI_Init+0xa0>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f28:	d002      	beq.n	8003f30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f72:	ea42 0103 	orr.w	r1, r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	0c1b      	lsrs	r3, r3, #16
 8003f8c:	f003 0204 	and.w	r2, r3, #4
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003fac:	ea42 0103 	orr.w	r1, r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b082      	sub	sp, #8
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e049      	b.n	800407c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d106      	bne.n	8004002 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7fd f989 	bl	8001314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2202      	movs	r2, #2
 8004006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3304      	adds	r3, #4
 8004012:	4619      	mov	r1, r3
 8004014:	4610      	mov	r0, r2
 8004016:	f000 f9d5 	bl	80043c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b01      	cmp	r3, #1
 8004096:	d001      	beq.n	800409c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e04f      	b.n	800413c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0201 	orr.w	r2, r2, #1
 80040b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a23      	ldr	r2, [pc, #140]	@ (8004148 <HAL_TIM_Base_Start_IT+0xc4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d01d      	beq.n	80040fa <HAL_TIM_Base_Start_IT+0x76>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040c6:	d018      	beq.n	80040fa <HAL_TIM_Base_Start_IT+0x76>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a1f      	ldr	r2, [pc, #124]	@ (800414c <HAL_TIM_Base_Start_IT+0xc8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d013      	beq.n	80040fa <HAL_TIM_Base_Start_IT+0x76>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004150 <HAL_TIM_Base_Start_IT+0xcc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00e      	beq.n	80040fa <HAL_TIM_Base_Start_IT+0x76>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004154 <HAL_TIM_Base_Start_IT+0xd0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d009      	beq.n	80040fa <HAL_TIM_Base_Start_IT+0x76>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004158 <HAL_TIM_Base_Start_IT+0xd4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d004      	beq.n	80040fa <HAL_TIM_Base_Start_IT+0x76>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a19      	ldr	r2, [pc, #100]	@ (800415c <HAL_TIM_Base_Start_IT+0xd8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d115      	bne.n	8004126 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	4b17      	ldr	r3, [pc, #92]	@ (8004160 <HAL_TIM_Base_Start_IT+0xdc>)
 8004102:	4013      	ands	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b06      	cmp	r3, #6
 800410a:	d015      	beq.n	8004138 <HAL_TIM_Base_Start_IT+0xb4>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004112:	d011      	beq.n	8004138 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004124:	e008      	b.n	8004138 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 0201 	orr.w	r2, r2, #1
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	e000      	b.n	800413a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004138:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	40012c00 	.word	0x40012c00
 800414c:	40000400 	.word	0x40000400
 8004150:	40000800 	.word	0x40000800
 8004154:	40000c00 	.word	0x40000c00
 8004158:	40013400 	.word	0x40013400
 800415c:	40014000 	.word	0x40014000
 8004160:	00010007 	.word	0x00010007

08004164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d020      	beq.n	80041c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01b      	beq.n	80041c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0202 	mvn.w	r2, #2
 8004198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f8e9 	bl	8004386 <HAL_TIM_IC_CaptureCallback>
 80041b4:	e005      	b.n	80041c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f8db 	bl	8004372 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f8ec 	bl	800439a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f003 0304 	and.w	r3, r3, #4
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d020      	beq.n	8004214 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d01b      	beq.n	8004214 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0204 	mvn.w	r2, #4
 80041e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2202      	movs	r2, #2
 80041ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f8c3 	bl	8004386 <HAL_TIM_IC_CaptureCallback>
 8004200:	e005      	b.n	800420e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f8b5 	bl	8004372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f8c6 	bl	800439a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d020      	beq.n	8004260 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b00      	cmp	r3, #0
 8004226:	d01b      	beq.n	8004260 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0208 	mvn.w	r2, #8
 8004230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2204      	movs	r2, #4
 8004236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f89d 	bl	8004386 <HAL_TIM_IC_CaptureCallback>
 800424c:	e005      	b.n	800425a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f88f 	bl	8004372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f8a0 	bl	800439a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f003 0310 	and.w	r3, r3, #16
 8004266:	2b00      	cmp	r3, #0
 8004268:	d020      	beq.n	80042ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01b      	beq.n	80042ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0210 	mvn.w	r2, #16
 800427c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2208      	movs	r2, #8
 8004282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f877 	bl	8004386 <HAL_TIM_IC_CaptureCallback>
 8004298:	e005      	b.n	80042a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f869 	bl	8004372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f87a 	bl	800439a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00c      	beq.n	80042d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d007      	beq.n	80042d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0201 	mvn.w	r2, #1
 80042c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fc fe7c 	bl	8000fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d104      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00c      	beq.n	80042fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d007      	beq.n	80042fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80042f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f913 	bl	8004524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00c      	beq.n	8004322 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800430e:	2b00      	cmp	r3, #0
 8004310:	d007      	beq.n	8004322 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800431a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f90b 	bl	8004538 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00c      	beq.n	8004346 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	d007      	beq.n	8004346 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800433e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f834 	bl	80043ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00c      	beq.n	800436a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	2b00      	cmp	r3, #0
 8004358:	d007      	beq.n	800436a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f06f 0220 	mvn.w	r2, #32
 8004362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f8d3 	bl	8004510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800436a:	bf00      	nop
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
	...

080043c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a46      	ldr	r2, [pc, #280]	@ (80044f0 <TIM_Base_SetConfig+0x12c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d013      	beq.n	8004404 <TIM_Base_SetConfig+0x40>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043e2:	d00f      	beq.n	8004404 <TIM_Base_SetConfig+0x40>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a43      	ldr	r2, [pc, #268]	@ (80044f4 <TIM_Base_SetConfig+0x130>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d00b      	beq.n	8004404 <TIM_Base_SetConfig+0x40>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a42      	ldr	r2, [pc, #264]	@ (80044f8 <TIM_Base_SetConfig+0x134>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d007      	beq.n	8004404 <TIM_Base_SetConfig+0x40>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a41      	ldr	r2, [pc, #260]	@ (80044fc <TIM_Base_SetConfig+0x138>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d003      	beq.n	8004404 <TIM_Base_SetConfig+0x40>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a40      	ldr	r2, [pc, #256]	@ (8004500 <TIM_Base_SetConfig+0x13c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d108      	bne.n	8004416 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800440a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a35      	ldr	r2, [pc, #212]	@ (80044f0 <TIM_Base_SetConfig+0x12c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d01f      	beq.n	800445e <TIM_Base_SetConfig+0x9a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004424:	d01b      	beq.n	800445e <TIM_Base_SetConfig+0x9a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a32      	ldr	r2, [pc, #200]	@ (80044f4 <TIM_Base_SetConfig+0x130>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d017      	beq.n	800445e <TIM_Base_SetConfig+0x9a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a31      	ldr	r2, [pc, #196]	@ (80044f8 <TIM_Base_SetConfig+0x134>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d013      	beq.n	800445e <TIM_Base_SetConfig+0x9a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a30      	ldr	r2, [pc, #192]	@ (80044fc <TIM_Base_SetConfig+0x138>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00f      	beq.n	800445e <TIM_Base_SetConfig+0x9a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a2f      	ldr	r2, [pc, #188]	@ (8004500 <TIM_Base_SetConfig+0x13c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00b      	beq.n	800445e <TIM_Base_SetConfig+0x9a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a2e      	ldr	r2, [pc, #184]	@ (8004504 <TIM_Base_SetConfig+0x140>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d007      	beq.n	800445e <TIM_Base_SetConfig+0x9a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a2d      	ldr	r2, [pc, #180]	@ (8004508 <TIM_Base_SetConfig+0x144>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d003      	beq.n	800445e <TIM_Base_SetConfig+0x9a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a2c      	ldr	r2, [pc, #176]	@ (800450c <TIM_Base_SetConfig+0x148>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d108      	bne.n	8004470 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	4313      	orrs	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a16      	ldr	r2, [pc, #88]	@ (80044f0 <TIM_Base_SetConfig+0x12c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00f      	beq.n	80044bc <TIM_Base_SetConfig+0xf8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a18      	ldr	r2, [pc, #96]	@ (8004500 <TIM_Base_SetConfig+0x13c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00b      	beq.n	80044bc <TIM_Base_SetConfig+0xf8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a17      	ldr	r2, [pc, #92]	@ (8004504 <TIM_Base_SetConfig+0x140>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d007      	beq.n	80044bc <TIM_Base_SetConfig+0xf8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a16      	ldr	r2, [pc, #88]	@ (8004508 <TIM_Base_SetConfig+0x144>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <TIM_Base_SetConfig+0xf8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a15      	ldr	r2, [pc, #84]	@ (800450c <TIM_Base_SetConfig+0x148>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d103      	bne.n	80044c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d105      	bne.n	80044e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f023 0201 	bic.w	r2, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	611a      	str	r2, [r3, #16]
  }
}
 80044e2:	bf00      	nop
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40012c00 	.word	0x40012c00
 80044f4:	40000400 	.word	0x40000400
 80044f8:	40000800 	.word	0x40000800
 80044fc:	40000c00 	.word	0x40000c00
 8004500:	40013400 	.word	0x40013400
 8004504:	40014000 	.word	0x40014000
 8004508:	40014400 	.word	0x40014400
 800450c:	40014800 	.word	0x40014800

08004510 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e040      	b.n	80045e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fc ff12 	bl	8001398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2224      	movs	r2, #36	@ 0x24
 8004578:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0201 	bic.w	r2, r2, #1
 8004588:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fb6a 	bl	8004c6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f8af 	bl	80046fc <UART_SetConfig>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e01b      	b.n	80045e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fbe9 	bl	8004db0 <UART_CheckIdleState>
 80045de:	4603      	mov	r3, r0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	@ 0x28
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	4613      	mov	r3, r2
 80045f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	d177      	bne.n	80046f0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <HAL_UART_Transmit+0x24>
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e070      	b.n	80046f2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2221      	movs	r2, #33	@ 0x21
 800461c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800461e:	f7fd f981 	bl	8001924 <HAL_GetTick>
 8004622:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	88fa      	ldrh	r2, [r7, #6]
 8004628:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	88fa      	ldrh	r2, [r7, #6]
 8004630:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800463c:	d108      	bne.n	8004650 <HAL_UART_Transmit+0x68>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d104      	bne.n	8004650 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004646:	2300      	movs	r3, #0
 8004648:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	61bb      	str	r3, [r7, #24]
 800464e:	e003      	b.n	8004658 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004654:	2300      	movs	r3, #0
 8004656:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004658:	e02f      	b.n	80046ba <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2200      	movs	r2, #0
 8004662:	2180      	movs	r1, #128	@ 0x80
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 fc4b 	bl	8004f00 <UART_WaitOnFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d004      	beq.n	800467a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2220      	movs	r2, #32
 8004674:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e03b      	b.n	80046f2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10b      	bne.n	8004698 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	881a      	ldrh	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800468c:	b292      	uxth	r2, r2
 800468e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	3302      	adds	r3, #2
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	e007      	b.n	80046a8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	781a      	ldrb	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	3301      	adds	r3, #1
 80046a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1c9      	bne.n	800465a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2200      	movs	r2, #0
 80046ce:	2140      	movs	r1, #64	@ 0x40
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fc15 	bl	8004f00 <UART_WaitOnFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d004      	beq.n	80046e6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e005      	b.n	80046f2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	e000      	b.n	80046f2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80046f0:	2302      	movs	r3, #2
  }
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3720      	adds	r7, #32
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004700:	b08a      	sub	sp, #40	@ 0x28
 8004702:	af00      	add	r7, sp, #0
 8004704:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	431a      	orrs	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	431a      	orrs	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	4313      	orrs	r3, r2
 8004722:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4ba4      	ldr	r3, [pc, #656]	@ (80049bc <UART_SetConfig+0x2c0>)
 800472c:	4013      	ands	r3, r2
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004734:	430b      	orrs	r3, r1
 8004736:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a99      	ldr	r2, [pc, #612]	@ (80049c0 <UART_SetConfig+0x2c4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d004      	beq.n	8004768 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004764:	4313      	orrs	r3, r2
 8004766:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004778:	430a      	orrs	r2, r1
 800477a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a90      	ldr	r2, [pc, #576]	@ (80049c4 <UART_SetConfig+0x2c8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d126      	bne.n	80047d4 <UART_SetConfig+0xd8>
 8004786:	4b90      	ldr	r3, [pc, #576]	@ (80049c8 <UART_SetConfig+0x2cc>)
 8004788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	2b03      	cmp	r3, #3
 8004792:	d81b      	bhi.n	80047cc <UART_SetConfig+0xd0>
 8004794:	a201      	add	r2, pc, #4	@ (adr r2, 800479c <UART_SetConfig+0xa0>)
 8004796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479a:	bf00      	nop
 800479c:	080047ad 	.word	0x080047ad
 80047a0:	080047bd 	.word	0x080047bd
 80047a4:	080047b5 	.word	0x080047b5
 80047a8:	080047c5 	.word	0x080047c5
 80047ac:	2301      	movs	r3, #1
 80047ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047b2:	e116      	b.n	80049e2 <UART_SetConfig+0x2e6>
 80047b4:	2302      	movs	r3, #2
 80047b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ba:	e112      	b.n	80049e2 <UART_SetConfig+0x2e6>
 80047bc:	2304      	movs	r3, #4
 80047be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047c2:	e10e      	b.n	80049e2 <UART_SetConfig+0x2e6>
 80047c4:	2308      	movs	r3, #8
 80047c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ca:	e10a      	b.n	80049e2 <UART_SetConfig+0x2e6>
 80047cc:	2310      	movs	r3, #16
 80047ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047d2:	e106      	b.n	80049e2 <UART_SetConfig+0x2e6>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a7c      	ldr	r2, [pc, #496]	@ (80049cc <UART_SetConfig+0x2d0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d138      	bne.n	8004850 <UART_SetConfig+0x154>
 80047de:	4b7a      	ldr	r3, [pc, #488]	@ (80049c8 <UART_SetConfig+0x2cc>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e4:	f003 030c 	and.w	r3, r3, #12
 80047e8:	2b0c      	cmp	r3, #12
 80047ea:	d82d      	bhi.n	8004848 <UART_SetConfig+0x14c>
 80047ec:	a201      	add	r2, pc, #4	@ (adr r2, 80047f4 <UART_SetConfig+0xf8>)
 80047ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f2:	bf00      	nop
 80047f4:	08004829 	.word	0x08004829
 80047f8:	08004849 	.word	0x08004849
 80047fc:	08004849 	.word	0x08004849
 8004800:	08004849 	.word	0x08004849
 8004804:	08004839 	.word	0x08004839
 8004808:	08004849 	.word	0x08004849
 800480c:	08004849 	.word	0x08004849
 8004810:	08004849 	.word	0x08004849
 8004814:	08004831 	.word	0x08004831
 8004818:	08004849 	.word	0x08004849
 800481c:	08004849 	.word	0x08004849
 8004820:	08004849 	.word	0x08004849
 8004824:	08004841 	.word	0x08004841
 8004828:	2300      	movs	r3, #0
 800482a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800482e:	e0d8      	b.n	80049e2 <UART_SetConfig+0x2e6>
 8004830:	2302      	movs	r3, #2
 8004832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004836:	e0d4      	b.n	80049e2 <UART_SetConfig+0x2e6>
 8004838:	2304      	movs	r3, #4
 800483a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800483e:	e0d0      	b.n	80049e2 <UART_SetConfig+0x2e6>
 8004840:	2308      	movs	r3, #8
 8004842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004846:	e0cc      	b.n	80049e2 <UART_SetConfig+0x2e6>
 8004848:	2310      	movs	r3, #16
 800484a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800484e:	e0c8      	b.n	80049e2 <UART_SetConfig+0x2e6>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a5e      	ldr	r2, [pc, #376]	@ (80049d0 <UART_SetConfig+0x2d4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d125      	bne.n	80048a6 <UART_SetConfig+0x1aa>
 800485a:	4b5b      	ldr	r3, [pc, #364]	@ (80049c8 <UART_SetConfig+0x2cc>)
 800485c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004860:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004864:	2b30      	cmp	r3, #48	@ 0x30
 8004866:	d016      	beq.n	8004896 <UART_SetConfig+0x19a>
 8004868:	2b30      	cmp	r3, #48	@ 0x30
 800486a:	d818      	bhi.n	800489e <UART_SetConfig+0x1a2>
 800486c:	2b20      	cmp	r3, #32
 800486e:	d00a      	beq.n	8004886 <UART_SetConfig+0x18a>
 8004870:	2b20      	cmp	r3, #32
 8004872:	d814      	bhi.n	800489e <UART_SetConfig+0x1a2>
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <UART_SetConfig+0x182>
 8004878:	2b10      	cmp	r3, #16
 800487a:	d008      	beq.n	800488e <UART_SetConfig+0x192>
 800487c:	e00f      	b.n	800489e <UART_SetConfig+0x1a2>
 800487e:	2300      	movs	r3, #0
 8004880:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004884:	e0ad      	b.n	80049e2 <UART_SetConfig+0x2e6>
 8004886:	2302      	movs	r3, #2
 8004888:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800488c:	e0a9      	b.n	80049e2 <UART_SetConfig+0x2e6>
 800488e:	2304      	movs	r3, #4
 8004890:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004894:	e0a5      	b.n	80049e2 <UART_SetConfig+0x2e6>
 8004896:	2308      	movs	r3, #8
 8004898:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800489c:	e0a1      	b.n	80049e2 <UART_SetConfig+0x2e6>
 800489e:	2310      	movs	r3, #16
 80048a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048a4:	e09d      	b.n	80049e2 <UART_SetConfig+0x2e6>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a4a      	ldr	r2, [pc, #296]	@ (80049d4 <UART_SetConfig+0x2d8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d125      	bne.n	80048fc <UART_SetConfig+0x200>
 80048b0:	4b45      	ldr	r3, [pc, #276]	@ (80049c8 <UART_SetConfig+0x2cc>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80048ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80048bc:	d016      	beq.n	80048ec <UART_SetConfig+0x1f0>
 80048be:	2bc0      	cmp	r3, #192	@ 0xc0
 80048c0:	d818      	bhi.n	80048f4 <UART_SetConfig+0x1f8>
 80048c2:	2b80      	cmp	r3, #128	@ 0x80
 80048c4:	d00a      	beq.n	80048dc <UART_SetConfig+0x1e0>
 80048c6:	2b80      	cmp	r3, #128	@ 0x80
 80048c8:	d814      	bhi.n	80048f4 <UART_SetConfig+0x1f8>
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <UART_SetConfig+0x1d8>
 80048ce:	2b40      	cmp	r3, #64	@ 0x40
 80048d0:	d008      	beq.n	80048e4 <UART_SetConfig+0x1e8>
 80048d2:	e00f      	b.n	80048f4 <UART_SetConfig+0x1f8>
 80048d4:	2300      	movs	r3, #0
 80048d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048da:	e082      	b.n	80049e2 <UART_SetConfig+0x2e6>
 80048dc:	2302      	movs	r3, #2
 80048de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048e2:	e07e      	b.n	80049e2 <UART_SetConfig+0x2e6>
 80048e4:	2304      	movs	r3, #4
 80048e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ea:	e07a      	b.n	80049e2 <UART_SetConfig+0x2e6>
 80048ec:	2308      	movs	r3, #8
 80048ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048f2:	e076      	b.n	80049e2 <UART_SetConfig+0x2e6>
 80048f4:	2310      	movs	r3, #16
 80048f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048fa:	e072      	b.n	80049e2 <UART_SetConfig+0x2e6>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a35      	ldr	r2, [pc, #212]	@ (80049d8 <UART_SetConfig+0x2dc>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d12a      	bne.n	800495c <UART_SetConfig+0x260>
 8004906:	4b30      	ldr	r3, [pc, #192]	@ (80049c8 <UART_SetConfig+0x2cc>)
 8004908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800490c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004910:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004914:	d01a      	beq.n	800494c <UART_SetConfig+0x250>
 8004916:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800491a:	d81b      	bhi.n	8004954 <UART_SetConfig+0x258>
 800491c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004920:	d00c      	beq.n	800493c <UART_SetConfig+0x240>
 8004922:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004926:	d815      	bhi.n	8004954 <UART_SetConfig+0x258>
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <UART_SetConfig+0x238>
 800492c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004930:	d008      	beq.n	8004944 <UART_SetConfig+0x248>
 8004932:	e00f      	b.n	8004954 <UART_SetConfig+0x258>
 8004934:	2300      	movs	r3, #0
 8004936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800493a:	e052      	b.n	80049e2 <UART_SetConfig+0x2e6>
 800493c:	2302      	movs	r3, #2
 800493e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004942:	e04e      	b.n	80049e2 <UART_SetConfig+0x2e6>
 8004944:	2304      	movs	r3, #4
 8004946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800494a:	e04a      	b.n	80049e2 <UART_SetConfig+0x2e6>
 800494c:	2308      	movs	r3, #8
 800494e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004952:	e046      	b.n	80049e2 <UART_SetConfig+0x2e6>
 8004954:	2310      	movs	r3, #16
 8004956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800495a:	e042      	b.n	80049e2 <UART_SetConfig+0x2e6>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a17      	ldr	r2, [pc, #92]	@ (80049c0 <UART_SetConfig+0x2c4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d13a      	bne.n	80049dc <UART_SetConfig+0x2e0>
 8004966:	4b18      	ldr	r3, [pc, #96]	@ (80049c8 <UART_SetConfig+0x2cc>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004970:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004974:	d01a      	beq.n	80049ac <UART_SetConfig+0x2b0>
 8004976:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800497a:	d81b      	bhi.n	80049b4 <UART_SetConfig+0x2b8>
 800497c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004980:	d00c      	beq.n	800499c <UART_SetConfig+0x2a0>
 8004982:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004986:	d815      	bhi.n	80049b4 <UART_SetConfig+0x2b8>
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <UART_SetConfig+0x298>
 800498c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004990:	d008      	beq.n	80049a4 <UART_SetConfig+0x2a8>
 8004992:	e00f      	b.n	80049b4 <UART_SetConfig+0x2b8>
 8004994:	2300      	movs	r3, #0
 8004996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800499a:	e022      	b.n	80049e2 <UART_SetConfig+0x2e6>
 800499c:	2302      	movs	r3, #2
 800499e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049a2:	e01e      	b.n	80049e2 <UART_SetConfig+0x2e6>
 80049a4:	2304      	movs	r3, #4
 80049a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049aa:	e01a      	b.n	80049e2 <UART_SetConfig+0x2e6>
 80049ac:	2308      	movs	r3, #8
 80049ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049b2:	e016      	b.n	80049e2 <UART_SetConfig+0x2e6>
 80049b4:	2310      	movs	r3, #16
 80049b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ba:	e012      	b.n	80049e2 <UART_SetConfig+0x2e6>
 80049bc:	efff69f3 	.word	0xefff69f3
 80049c0:	40008000 	.word	0x40008000
 80049c4:	40013800 	.word	0x40013800
 80049c8:	40021000 	.word	0x40021000
 80049cc:	40004400 	.word	0x40004400
 80049d0:	40004800 	.word	0x40004800
 80049d4:	40004c00 	.word	0x40004c00
 80049d8:	40005000 	.word	0x40005000
 80049dc:	2310      	movs	r3, #16
 80049de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a9f      	ldr	r2, [pc, #636]	@ (8004c64 <UART_SetConfig+0x568>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d17a      	bne.n	8004ae2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d824      	bhi.n	8004a3e <UART_SetConfig+0x342>
 80049f4:	a201      	add	r2, pc, #4	@ (adr r2, 80049fc <UART_SetConfig+0x300>)
 80049f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fa:	bf00      	nop
 80049fc:	08004a21 	.word	0x08004a21
 8004a00:	08004a3f 	.word	0x08004a3f
 8004a04:	08004a29 	.word	0x08004a29
 8004a08:	08004a3f 	.word	0x08004a3f
 8004a0c:	08004a2f 	.word	0x08004a2f
 8004a10:	08004a3f 	.word	0x08004a3f
 8004a14:	08004a3f 	.word	0x08004a3f
 8004a18:	08004a3f 	.word	0x08004a3f
 8004a1c:	08004a37 	.word	0x08004a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a20:	f7fe fcac 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 8004a24:	61f8      	str	r0, [r7, #28]
        break;
 8004a26:	e010      	b.n	8004a4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a28:	4b8f      	ldr	r3, [pc, #572]	@ (8004c68 <UART_SetConfig+0x56c>)
 8004a2a:	61fb      	str	r3, [r7, #28]
        break;
 8004a2c:	e00d      	b.n	8004a4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a2e:	f7fe fc0d 	bl	800324c <HAL_RCC_GetSysClockFreq>
 8004a32:	61f8      	str	r0, [r7, #28]
        break;
 8004a34:	e009      	b.n	8004a4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a3a:	61fb      	str	r3, [r7, #28]
        break;
 8004a3c:	e005      	b.n	8004a4a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 80fb 	beq.w	8004c48 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	4613      	mov	r3, r2
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	4413      	add	r3, r2
 8004a5c:	69fa      	ldr	r2, [r7, #28]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d305      	bcc.n	8004a6e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a68:	69fa      	ldr	r2, [r7, #28]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d903      	bls.n	8004a76 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a74:	e0e8      	b.n	8004c48 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	461c      	mov	r4, r3
 8004a7c:	4615      	mov	r5, r2
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	022b      	lsls	r3, r5, #8
 8004a88:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004a8c:	0222      	lsls	r2, r4, #8
 8004a8e:	68f9      	ldr	r1, [r7, #12]
 8004a90:	6849      	ldr	r1, [r1, #4]
 8004a92:	0849      	lsrs	r1, r1, #1
 8004a94:	2000      	movs	r0, #0
 8004a96:	4688      	mov	r8, r1
 8004a98:	4681      	mov	r9, r0
 8004a9a:	eb12 0a08 	adds.w	sl, r2, r8
 8004a9e:	eb43 0b09 	adc.w	fp, r3, r9
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	603b      	str	r3, [r7, #0]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ab0:	4650      	mov	r0, sl
 8004ab2:	4659      	mov	r1, fp
 8004ab4:	f7fb fbdc 	bl	8000270 <__aeabi_uldivmod>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4613      	mov	r3, r2
 8004abe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ac6:	d308      	bcc.n	8004ada <UART_SetConfig+0x3de>
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ace:	d204      	bcs.n	8004ada <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	60da      	str	r2, [r3, #12]
 8004ad8:	e0b6      	b.n	8004c48 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ae0:	e0b2      	b.n	8004c48 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aea:	d15e      	bne.n	8004baa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004aec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d828      	bhi.n	8004b46 <UART_SetConfig+0x44a>
 8004af4:	a201      	add	r2, pc, #4	@ (adr r2, 8004afc <UART_SetConfig+0x400>)
 8004af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afa:	bf00      	nop
 8004afc:	08004b21 	.word	0x08004b21
 8004b00:	08004b29 	.word	0x08004b29
 8004b04:	08004b31 	.word	0x08004b31
 8004b08:	08004b47 	.word	0x08004b47
 8004b0c:	08004b37 	.word	0x08004b37
 8004b10:	08004b47 	.word	0x08004b47
 8004b14:	08004b47 	.word	0x08004b47
 8004b18:	08004b47 	.word	0x08004b47
 8004b1c:	08004b3f 	.word	0x08004b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b20:	f7fe fc2c 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 8004b24:	61f8      	str	r0, [r7, #28]
        break;
 8004b26:	e014      	b.n	8004b52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b28:	f7fe fc3e 	bl	80033a8 <HAL_RCC_GetPCLK2Freq>
 8004b2c:	61f8      	str	r0, [r7, #28]
        break;
 8004b2e:	e010      	b.n	8004b52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b30:	4b4d      	ldr	r3, [pc, #308]	@ (8004c68 <UART_SetConfig+0x56c>)
 8004b32:	61fb      	str	r3, [r7, #28]
        break;
 8004b34:	e00d      	b.n	8004b52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b36:	f7fe fb89 	bl	800324c <HAL_RCC_GetSysClockFreq>
 8004b3a:	61f8      	str	r0, [r7, #28]
        break;
 8004b3c:	e009      	b.n	8004b52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b42:	61fb      	str	r3, [r7, #28]
        break;
 8004b44:	e005      	b.n	8004b52 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d077      	beq.n	8004c48 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	005a      	lsls	r2, r3, #1
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	085b      	lsrs	r3, r3, #1
 8004b62:	441a      	add	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	2b0f      	cmp	r3, #15
 8004b72:	d916      	bls.n	8004ba2 <UART_SetConfig+0x4a6>
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b7a:	d212      	bcs.n	8004ba2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	f023 030f 	bic.w	r3, r3, #15
 8004b84:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	8afb      	ldrh	r3, [r7, #22]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	8afa      	ldrh	r2, [r7, #22]
 8004b9e:	60da      	str	r2, [r3, #12]
 8004ba0:	e052      	b.n	8004c48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ba8:	e04e      	b.n	8004c48 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004baa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d827      	bhi.n	8004c02 <UART_SetConfig+0x506>
 8004bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb8 <UART_SetConfig+0x4bc>)
 8004bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb8:	08004bdd 	.word	0x08004bdd
 8004bbc:	08004be5 	.word	0x08004be5
 8004bc0:	08004bed 	.word	0x08004bed
 8004bc4:	08004c03 	.word	0x08004c03
 8004bc8:	08004bf3 	.word	0x08004bf3
 8004bcc:	08004c03 	.word	0x08004c03
 8004bd0:	08004c03 	.word	0x08004c03
 8004bd4:	08004c03 	.word	0x08004c03
 8004bd8:	08004bfb 	.word	0x08004bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bdc:	f7fe fbce 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 8004be0:	61f8      	str	r0, [r7, #28]
        break;
 8004be2:	e014      	b.n	8004c0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004be4:	f7fe fbe0 	bl	80033a8 <HAL_RCC_GetPCLK2Freq>
 8004be8:	61f8      	str	r0, [r7, #28]
        break;
 8004bea:	e010      	b.n	8004c0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bec:	4b1e      	ldr	r3, [pc, #120]	@ (8004c68 <UART_SetConfig+0x56c>)
 8004bee:	61fb      	str	r3, [r7, #28]
        break;
 8004bf0:	e00d      	b.n	8004c0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bf2:	f7fe fb2b 	bl	800324c <HAL_RCC_GetSysClockFreq>
 8004bf6:	61f8      	str	r0, [r7, #28]
        break;
 8004bf8:	e009      	b.n	8004c0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bfe:	61fb      	str	r3, [r7, #28]
        break;
 8004c00:	e005      	b.n	8004c0e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c0c:	bf00      	nop
    }

    if (pclk != 0U)
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d019      	beq.n	8004c48 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	085a      	lsrs	r2, r3, #1
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	441a      	add	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c26:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b0f      	cmp	r3, #15
 8004c2c:	d909      	bls.n	8004c42 <UART_SetConfig+0x546>
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c34:	d205      	bcs.n	8004c42 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60da      	str	r2, [r3, #12]
 8004c40:	e002      	b.n	8004c48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004c54:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3728      	adds	r7, #40	@ 0x28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c62:	bf00      	nop
 8004c64:	40008000 	.word	0x40008000
 8004c68:	00f42400 	.word	0x00f42400

08004c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00a      	beq.n	8004c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01a      	beq.n	8004d82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d6a:	d10a      	bne.n	8004d82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	605a      	str	r2, [r3, #4]
  }
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b098      	sub	sp, #96	@ 0x60
 8004db4:	af02      	add	r7, sp, #8
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dc0:	f7fc fdb0 	bl	8001924 <HAL_GetTick>
 8004dc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d12e      	bne.n	8004e32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f88c 	bl	8004f00 <UART_WaitOnFlagUntilTimeout>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d021      	beq.n	8004e32 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df6:	e853 3f00 	ldrex	r3, [r3]
 8004dfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e02:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e0e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e14:	e841 2300 	strex	r3, r2, [r1]
 8004e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e6      	bne.n	8004dee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e062      	b.n	8004ef8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d149      	bne.n	8004ed4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f856 	bl	8004f00 <UART_WaitOnFlagUntilTimeout>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d03c      	beq.n	8004ed4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e62:	e853 3f00 	ldrex	r3, [r3]
 8004e66:	623b      	str	r3, [r7, #32]
   return(result);
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	461a      	mov	r2, r3
 8004e76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e78:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e80:	e841 2300 	strex	r3, r2, [r1]
 8004e84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e6      	bne.n	8004e5a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3308      	adds	r3, #8
 8004e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0301 	bic.w	r3, r3, #1
 8004ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	3308      	adds	r3, #8
 8004eaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eac:	61fa      	str	r2, [r7, #28]
 8004eae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	69b9      	ldr	r1, [r7, #24]
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	617b      	str	r3, [r7, #20]
   return(result);
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e5      	bne.n	8004e8c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e011      	b.n	8004ef8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3758      	adds	r7, #88	@ 0x58
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f10:	e04f      	b.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f18:	d04b      	beq.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1a:	f7fc fd03 	bl	8001924 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d302      	bcc.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e04e      	b.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d037      	beq.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b80      	cmp	r3, #128	@ 0x80
 8004f46:	d034      	beq.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b40      	cmp	r3, #64	@ 0x40
 8004f4c:	d031      	beq.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d110      	bne.n	8004f7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2208      	movs	r2, #8
 8004f62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 f838 	bl	8004fda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2208      	movs	r2, #8
 8004f6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e029      	b.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f8c:	d111      	bne.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 f81e 	bl	8004fda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e00f      	b.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69da      	ldr	r2, [r3, #28]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	bf0c      	ite	eq
 8004fc2:	2301      	moveq	r3, #1
 8004fc4:	2300      	movne	r3, #0
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	79fb      	ldrb	r3, [r7, #7]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d0a0      	beq.n	8004f12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b095      	sub	sp, #84	@ 0x54
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fea:	e853 3f00 	ldrex	r3, [r3]
 8004fee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005000:	643b      	str	r3, [r7, #64]	@ 0x40
 8005002:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005006:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800500e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e6      	bne.n	8004fe2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3308      	adds	r3, #8
 800501a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	61fb      	str	r3, [r7, #28]
   return(result);
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3308      	adds	r3, #8
 8005032:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005034:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005036:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005038:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800503a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800503c:	e841 2300 	strex	r3, r2, [r1]
 8005040:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e5      	bne.n	8005014 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800504c:	2b01      	cmp	r3, #1
 800504e:	d118      	bne.n	8005082 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	60bb      	str	r3, [r7, #8]
   return(result);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f023 0310 	bic.w	r3, r3, #16
 8005064:	647b      	str	r3, [r7, #68]	@ 0x44
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800506e:	61bb      	str	r3, [r7, #24]
 8005070:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	6979      	ldr	r1, [r7, #20]
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	613b      	str	r3, [r7, #16]
   return(result);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e6      	bne.n	8005050 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005096:	bf00      	nop
 8005098:	3754      	adds	r7, #84	@ 0x54
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050a2:	b084      	sub	sp, #16
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	f107 001c 	add.w	r0, r7, #28
 80050b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fa69 	bl	8005598 <USB_CoreReset>
 80050c6:	4603      	mov	r3, r0
 80050c8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80050ca:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d106      	bne.n	80050e0 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80050de:	e005      	b.n	80050ec <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050f8:	b004      	add	sp, #16
 80050fa:	4770      	bx	lr

080050fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f023 0201 	bic.w	r2, r3, #1
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b084      	sub	sp, #16
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	460b      	mov	r3, r1
 8005128:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800513a:	78fb      	ldrb	r3, [r7, #3]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d115      	bne.n	800516c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800514c:	200a      	movs	r0, #10
 800514e:	f7fc fbf5 	bl	800193c <HAL_Delay>
      ms += 10U;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	330a      	adds	r3, #10
 8005156:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fa0f 	bl	800557c <USB_GetMode>
 800515e:	4603      	mov	r3, r0
 8005160:	2b01      	cmp	r3, #1
 8005162:	d01e      	beq.n	80051a2 <USB_SetCurrentMode+0x84>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2bc7      	cmp	r3, #199	@ 0xc7
 8005168:	d9f0      	bls.n	800514c <USB_SetCurrentMode+0x2e>
 800516a:	e01a      	b.n	80051a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d115      	bne.n	800519e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800517e:	200a      	movs	r0, #10
 8005180:	f7fc fbdc 	bl	800193c <HAL_Delay>
      ms += 10U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	330a      	adds	r3, #10
 8005188:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f9f6 	bl	800557c <USB_GetMode>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <USB_SetCurrentMode+0x84>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2bc7      	cmp	r3, #199	@ 0xc7
 800519a:	d9f0      	bls.n	800517e <USB_SetCurrentMode+0x60>
 800519c:	e001      	b.n	80051a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e005      	b.n	80051ae <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2bc8      	cmp	r3, #200	@ 0xc8
 80051a6:	d101      	bne.n	80051ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e000      	b.n	80051ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051b8:	b084      	sub	sp, #16
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b086      	sub	sp, #24
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80051c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80051d2:	2300      	movs	r3, #0
 80051d4:	613b      	str	r3, [r7, #16]
 80051d6:	e009      	b.n	80051ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	3340      	adds	r3, #64	@ 0x40
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	2200      	movs	r2, #0
 80051e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	3301      	adds	r3, #1
 80051ea:	613b      	str	r3, [r7, #16]
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	2b0e      	cmp	r3, #14
 80051f0:	d9f2      	bls.n	80051d8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80051f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d11c      	bne.n	8005234 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005208:	f043 0302 	orr.w	r3, r3, #2
 800520c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005212:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	e005      	b.n	8005240 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005238:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005246:	461a      	mov	r2, r3
 8005248:	2300      	movs	r3, #0
 800524a:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800524c:	2103      	movs	r1, #3
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f95a 	bl	8005508 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005254:	2110      	movs	r1, #16
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f8f6 	bl	8005448 <USB_FlushTxFifo>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f920 	bl	80054ac <USB_FlushRxFifo>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800527c:	461a      	mov	r2, r3
 800527e:	2300      	movs	r3, #0
 8005280:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005288:	461a      	mov	r2, r3
 800528a:	2300      	movs	r3, #0
 800528c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005294:	461a      	mov	r2, r3
 8005296:	2300      	movs	r3, #0
 8005298:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800529a:	2300      	movs	r3, #0
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	e043      	b.n	8005328 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052b6:	d118      	bne.n	80052ea <USB_DevInit+0x132>
    {
      if (i == 0U)
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10a      	bne.n	80052d4 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ca:	461a      	mov	r2, r3
 80052cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	e013      	b.n	80052fc <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052e0:	461a      	mov	r2, r3
 80052e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	e008      	b.n	80052fc <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f6:	461a      	mov	r2, r3
 80052f8:	2300      	movs	r3, #0
 80052fa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005308:	461a      	mov	r2, r3
 800530a:	2300      	movs	r3, #0
 800530c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800531a:	461a      	mov	r2, r3
 800531c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005320:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	3301      	adds	r3, #1
 8005326:	613b      	str	r3, [r7, #16]
 8005328:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800532c:	461a      	mov	r2, r3
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	4293      	cmp	r3, r2
 8005332:	d3b5      	bcc.n	80052a0 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005334:	2300      	movs	r3, #0
 8005336:	613b      	str	r3, [r7, #16]
 8005338:	e043      	b.n	80053c2 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800534c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005350:	d118      	bne.n	8005384 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005364:	461a      	mov	r2, r3
 8005366:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	e013      	b.n	8005396 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800537a:	461a      	mov	r2, r3
 800537c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	e008      	b.n	8005396 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005390:	461a      	mov	r2, r3
 8005392:	2300      	movs	r3, #0
 8005394:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a2:	461a      	mov	r2, r3
 80053a4:	2300      	movs	r3, #0
 80053a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b4:	461a      	mov	r2, r3
 80053b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80053ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	3301      	adds	r3, #1
 80053c0:	613b      	str	r3, [r7, #16]
 80053c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80053c6:	461a      	mov	r2, r3
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d3b5      	bcc.n	800533a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053e0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80053ee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	f043 0210 	orr.w	r2, r3, #16
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699a      	ldr	r2, [r3, #24]
 8005400:	4b10      	ldr	r3, [pc, #64]	@ (8005444 <USB_DevInit+0x28c>)
 8005402:	4313      	orrs	r3, r2
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005408:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800540c:	2b00      	cmp	r3, #0
 800540e:	d005      	beq.n	800541c <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	f043 0208 	orr.w	r2, r3, #8
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800541c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005420:	2b01      	cmp	r3, #1
 8005422:	d107      	bne.n	8005434 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800542c:	f043 0304 	orr.w	r3, r3, #4
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005434:	7dfb      	ldrb	r3, [r7, #23]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005440:	b004      	add	sp, #16
 8005442:	4770      	bx	lr
 8005444:	803c3800 	.word	0x803c3800

08005448 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3301      	adds	r3, #1
 800545a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005462:	d901      	bls.n	8005468 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e01b      	b.n	80054a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	daf2      	bge.n	8005456 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	019b      	lsls	r3, r3, #6
 8005478:	f043 0220 	orr.w	r2, r3, #32
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3301      	adds	r3, #1
 8005484:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800548c:	d901      	bls.n	8005492 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e006      	b.n	80054a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	2b20      	cmp	r3, #32
 800549c:	d0f0      	beq.n	8005480 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3301      	adds	r3, #1
 80054bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054c4:	d901      	bls.n	80054ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e018      	b.n	80054fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	daf2      	bge.n	80054b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2210      	movs	r2, #16
 80054da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3301      	adds	r3, #1
 80054e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054e8:	d901      	bls.n	80054ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e006      	b.n	80054fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0310 	and.w	r3, r3, #16
 80054f6:	2b10      	cmp	r3, #16
 80054f8:	d0f0      	beq.n	80054dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	68f9      	ldr	r1, [r7, #12]
 8005524:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005528:	4313      	orrs	r3, r2
 800552a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005554:	f023 0303 	bic.w	r3, r3, #3
 8005558:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005568:	f043 0302 	orr.w	r3, r3, #2
 800556c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	f003 0301 	and.w	r3, r3, #1
}
 800558c:	4618      	mov	r0, r3
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	3301      	adds	r3, #1
 80055a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055b0:	d901      	bls.n	80055b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e01b      	b.n	80055ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	daf2      	bge.n	80055a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055be:	2300      	movs	r3, #0
 80055c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f043 0201 	orr.w	r2, r3, #1
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3301      	adds	r3, #1
 80055d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055da:	d901      	bls.n	80055e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e006      	b.n	80055ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d0f0      	beq.n	80055ce <USB_CoreReset+0x36>

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
	...

080055fc <__NVIC_SetPriority>:
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	6039      	str	r1, [r7, #0]
 8005606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560c:	2b00      	cmp	r3, #0
 800560e:	db0a      	blt.n	8005626 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	b2da      	uxtb	r2, r3
 8005614:	490c      	ldr	r1, [pc, #48]	@ (8005648 <__NVIC_SetPriority+0x4c>)
 8005616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800561a:	0112      	lsls	r2, r2, #4
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	440b      	add	r3, r1
 8005620:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005624:	e00a      	b.n	800563c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	b2da      	uxtb	r2, r3
 800562a:	4908      	ldr	r1, [pc, #32]	@ (800564c <__NVIC_SetPriority+0x50>)
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	3b04      	subs	r3, #4
 8005634:	0112      	lsls	r2, r2, #4
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	440b      	add	r3, r1
 800563a:	761a      	strb	r2, [r3, #24]
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	e000e100 	.word	0xe000e100
 800564c:	e000ed00 	.word	0xe000ed00

08005650 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005654:	4b05      	ldr	r3, [pc, #20]	@ (800566c <SysTick_Handler+0x1c>)
 8005656:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005658:	f002 f80c 	bl	8007674 <xTaskGetSchedulerState>
 800565c:	4603      	mov	r3, r0
 800565e:	2b01      	cmp	r3, #1
 8005660:	d001      	beq.n	8005666 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005662:	f003 f8e1 	bl	8008828 <xPortSysTickHandler>
  }
}
 8005666:	bf00      	nop
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	e000e010 	.word	0xe000e010

08005670 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005674:	2100      	movs	r1, #0
 8005676:	f06f 0004 	mvn.w	r0, #4
 800567a:	f7ff ffbf 	bl	80055fc <__NVIC_SetPriority>
#endif
}
 800567e:	bf00      	nop
 8005680:	bd80      	pop	{r7, pc}
	...

08005684 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800568a:	f3ef 8305 	mrs	r3, IPSR
 800568e:	603b      	str	r3, [r7, #0]
  return(result);
 8005690:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005696:	f06f 0305 	mvn.w	r3, #5
 800569a:	607b      	str	r3, [r7, #4]
 800569c:	e00c      	b.n	80056b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800569e:	4b0a      	ldr	r3, [pc, #40]	@ (80056c8 <osKernelInitialize+0x44>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d105      	bne.n	80056b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80056a6:	4b08      	ldr	r3, [pc, #32]	@ (80056c8 <osKernelInitialize+0x44>)
 80056a8:	2201      	movs	r2, #1
 80056aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	607b      	str	r3, [r7, #4]
 80056b0:	e002      	b.n	80056b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80056b2:	f04f 33ff 	mov.w	r3, #4294967295
 80056b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056b8:	687b      	ldr	r3, [r7, #4]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	20000858 	.word	0x20000858

080056cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056d2:	f3ef 8305 	mrs	r3, IPSR
 80056d6:	603b      	str	r3, [r7, #0]
  return(result);
 80056d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80056de:	f06f 0305 	mvn.w	r3, #5
 80056e2:	607b      	str	r3, [r7, #4]
 80056e4:	e010      	b.n	8005708 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80056e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005714 <osKernelStart+0x48>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d109      	bne.n	8005702 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80056ee:	f7ff ffbf 	bl	8005670 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80056f2:	4b08      	ldr	r3, [pc, #32]	@ (8005714 <osKernelStart+0x48>)
 80056f4:	2202      	movs	r2, #2
 80056f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80056f8:	f001 fb6e 	bl	8006dd8 <vTaskStartScheduler>
      stat = osOK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	607b      	str	r3, [r7, #4]
 8005700:	e002      	b.n	8005708 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005702:	f04f 33ff 	mov.w	r3, #4294967295
 8005706:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005708:	687b      	ldr	r3, [r7, #4]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20000858 	.word	0x20000858

08005718 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005718:	b580      	push	{r7, lr}
 800571a:	b08e      	sub	sp, #56	@ 0x38
 800571c:	af04      	add	r7, sp, #16
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005724:	2300      	movs	r3, #0
 8005726:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005728:	f3ef 8305 	mrs	r3, IPSR
 800572c:	617b      	str	r3, [r7, #20]
  return(result);
 800572e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005730:	2b00      	cmp	r3, #0
 8005732:	d17e      	bne.n	8005832 <osThreadNew+0x11a>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d07b      	beq.n	8005832 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800573a:	2380      	movs	r3, #128	@ 0x80
 800573c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800573e:	2318      	movs	r3, #24
 8005740:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005742:	2300      	movs	r3, #0
 8005744:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005746:	f04f 33ff 	mov.w	r3, #4294967295
 800574a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d045      	beq.n	80057de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <osThreadNew+0x48>
        name = attr->name;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d008      	beq.n	8005786 <osThreadNew+0x6e>
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	2b38      	cmp	r3, #56	@ 0x38
 8005778:	d805      	bhi.n	8005786 <osThreadNew+0x6e>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <osThreadNew+0x72>
        return (NULL);
 8005786:	2300      	movs	r3, #0
 8005788:	e054      	b.n	8005834 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	089b      	lsrs	r3, r3, #2
 8005798:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00e      	beq.n	80057c0 <osThreadNew+0xa8>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	2b5b      	cmp	r3, #91	@ 0x5b
 80057a8:	d90a      	bls.n	80057c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d006      	beq.n	80057c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <osThreadNew+0xa8>
        mem = 1;
 80057ba:	2301      	movs	r3, #1
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	e010      	b.n	80057e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10c      	bne.n	80057e2 <osThreadNew+0xca>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d108      	bne.n	80057e2 <osThreadNew+0xca>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d104      	bne.n	80057e2 <osThreadNew+0xca>
          mem = 0;
 80057d8:	2300      	movs	r3, #0
 80057da:	61bb      	str	r3, [r7, #24]
 80057dc:	e001      	b.n	80057e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80057de:	2300      	movs	r3, #0
 80057e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d110      	bne.n	800580a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057f0:	9202      	str	r2, [sp, #8]
 80057f2:	9301      	str	r3, [sp, #4]
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	6a3a      	ldr	r2, [r7, #32]
 80057fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f001 f944 	bl	8006a8c <xTaskCreateStatic>
 8005804:	4603      	mov	r3, r0
 8005806:	613b      	str	r3, [r7, #16]
 8005808:	e013      	b.n	8005832 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d110      	bne.n	8005832 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	b29a      	uxth	r2, r3
 8005814:	f107 0310 	add.w	r3, r7, #16
 8005818:	9301      	str	r3, [sp, #4]
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f001 f992 	bl	8006b4c <xTaskCreate>
 8005828:	4603      	mov	r3, r0
 800582a:	2b01      	cmp	r3, #1
 800582c:	d001      	beq.n	8005832 <osThreadNew+0x11a>
            hTask = NULL;
 800582e:	2300      	movs	r3, #0
 8005830:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005832:	693b      	ldr	r3, [r7, #16]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3728      	adds	r7, #40	@ 0x28
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af02      	add	r7, sp, #8
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <osThreadFlagsSet+0x1a>
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	da03      	bge.n	800585e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8005856:	f06f 0303 	mvn.w	r3, #3
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	e035      	b.n	80058ca <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800585e:	f04f 33ff 	mov.w	r3, #4294967295
 8005862:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005864:	f3ef 8305 	mrs	r3, IPSR
 8005868:	613b      	str	r3, [r7, #16]
  return(result);
 800586a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01f      	beq.n	80058b0 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8005870:	2300      	movs	r3, #0
 8005872:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8005874:	f107 0308 	add.w	r3, r7, #8
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	2300      	movs	r3, #0
 800587c:	2201      	movs	r2, #1
 800587e:	6839      	ldr	r1, [r7, #0]
 8005880:	6978      	ldr	r0, [r7, #20]
 8005882:	f002 f899 	bl	80079b8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8005886:	f107 030c 	add.w	r3, r7, #12
 800588a:	2200      	movs	r2, #0
 800588c:	9200      	str	r2, [sp, #0]
 800588e:	2200      	movs	r2, #0
 8005890:	2100      	movs	r1, #0
 8005892:	6978      	ldr	r0, [r7, #20]
 8005894:	f002 f890 	bl	80079b8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d015      	beq.n	80058ca <osThreadFlagsSet+0x8e>
 800589e:	4b0d      	ldr	r3, [pc, #52]	@ (80058d4 <osThreadFlagsSet+0x98>)
 80058a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	e00c      	b.n	80058ca <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80058b0:	2300      	movs	r3, #0
 80058b2:	2201      	movs	r2, #1
 80058b4:	6839      	ldr	r1, [r7, #0]
 80058b6:	6978      	ldr	r0, [r7, #20]
 80058b8:	f001 ffc4 	bl	8007844 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80058bc:	f107 030c 	add.w	r3, r7, #12
 80058c0:	2200      	movs	r2, #0
 80058c2:	2100      	movs	r1, #0
 80058c4:	6978      	ldr	r0, [r7, #20]
 80058c6:	f001 ffbd 	bl	8007844 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80058ca:	68fb      	ldr	r3, [r7, #12]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3718      	adds	r7, #24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	e000ed04 	.word	0xe000ed04

080058d8 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08c      	sub	sp, #48	@ 0x30
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058e4:	f3ef 8305 	mrs	r3, IPSR
 80058e8:	617b      	str	r3, [r7, #20]
  return(result);
 80058ea:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80058f0:	f06f 0305 	mvn.w	r3, #5
 80058f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058f6:	e06b      	b.n	80059d0 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	da03      	bge.n	8005906 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80058fe:	f06f 0303 	mvn.w	r3, #3
 8005902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005904:	e064      	b.n	80059d0 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <osThreadFlagsWait+0x3e>
      clear = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005914:	e001      	b.n	800591a <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8005922:	f001 fb6d 	bl	8007000 <xTaskGetTickCount>
 8005926:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8005928:	f107 0210 	add.w	r2, r7, #16
 800592c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005930:	2000      	movs	r0, #0
 8005932:	f001 ff2d 	bl	8007790 <xTaskNotifyWait>
 8005936:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d137      	bne.n	80059ae <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800593e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4013      	ands	r3, r2
 8005944:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800594a:	4313      	orrs	r3, r2
 800594c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00c      	beq.n	8005972 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800595c:	4013      	ands	r3, r2
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	429a      	cmp	r2, r3
 8005962:	d032      	beq.n	80059ca <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10f      	bne.n	800598a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800596a:	f06f 0302 	mvn.w	r3, #2
 800596e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8005970:	e02e      	b.n	80059d0 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005976:	4013      	ands	r3, r2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d128      	bne.n	80059ce <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d103      	bne.n	800598a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8005982:	f06f 0302 	mvn.w	r3, #2
 8005986:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8005988:	e022      	b.n	80059d0 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800598a:	f001 fb39 	bl	8007000 <xTaskGetTickCount>
 800598e:	4602      	mov	r2, r0
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599a:	429a      	cmp	r2, r3
 800599c:	d902      	bls.n	80059a4 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80059a2:	e00e      	b.n	80059c2 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80059a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80059ac:	e009      	b.n	80059c2 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d103      	bne.n	80059bc <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80059b4:	f06f 0302 	mvn.w	r3, #2
 80059b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059ba:	e002      	b.n	80059c2 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80059bc:	f06f 0301 	mvn.w	r3, #1
 80059c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1af      	bne.n	8005928 <osThreadFlagsWait+0x50>
 80059c8:	e002      	b.n	80059d0 <osThreadFlagsWait+0xf8>
            break;
 80059ca:	bf00      	nop
 80059cc:	e000      	b.n	80059d0 <osThreadFlagsWait+0xf8>
            break;
 80059ce:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80059d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3730      	adds	r7, #48	@ 0x30
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f002 fd3e 	bl	8008464 <pvTimerGetTimerID>
 80059e8:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d005      	beq.n	80059fc <TimerCallback+0x22>
    callb->func (callb->arg);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	6852      	ldr	r2, [r2, #4]
 80059f8:	4610      	mov	r0, r2
 80059fa:	4798      	blx	r3
  }
}
 80059fc:	bf00      	nop
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08c      	sub	sp, #48	@ 0x30
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	607a      	str	r2, [r7, #4]
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	460b      	mov	r3, r1
 8005a12:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8005a14:	2300      	movs	r3, #0
 8005a16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a18:	f3ef 8305 	mrs	r3, IPSR
 8005a1c:	613b      	str	r3, [r7, #16]
  return(result);
 8005a1e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d163      	bne.n	8005aec <osTimerNew+0xe8>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d060      	beq.n	8005aec <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8005a2a:	2008      	movs	r0, #8
 8005a2c:	f002 ff8e 	bl	800894c <pvPortMalloc>
 8005a30:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d059      	beq.n	8005aec <osTimerNew+0xe8>
      callb->func = func;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005a44:	7afb      	ldrb	r3, [r7, #11]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d102      	bne.n	8005a50 <osTimerNew+0x4c>
        reload = pdFALSE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	61fb      	str	r3, [r7, #28]
 8005a4e:	e001      	b.n	8005a54 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8005a50:	2301      	movs	r3, #1
 8005a52:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8005a54:	f04f 33ff 	mov.w	r3, #4294967295
 8005a58:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01c      	beq.n	8005a9e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <osTimerNew+0x6e>
          name = attr->name;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d006      	beq.n	8005a88 <osTimerNew+0x84>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	2b2b      	cmp	r3, #43	@ 0x2b
 8005a80:	d902      	bls.n	8005a88 <osTimerNew+0x84>
          mem = 1;
 8005a82:	2301      	movs	r3, #1
 8005a84:	61bb      	str	r3, [r7, #24]
 8005a86:	e00c      	b.n	8005aa2 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d108      	bne.n	8005aa2 <osTimerNew+0x9e>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d104      	bne.n	8005aa2 <osTimerNew+0x9e>
            mem = 0;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	61bb      	str	r3, [r7, #24]
 8005a9c:	e001      	b.n	8005aa2 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d10c      	bne.n	8005ac2 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	9301      	str	r3, [sp, #4]
 8005aae:	4b12      	ldr	r3, [pc, #72]	@ (8005af8 <osTimerNew+0xf4>)
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	69fa      	ldr	r2, [r7, #28]
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005aba:	f002 f91c 	bl	8007cf6 <xTimerCreateStatic>
 8005abe:	6238      	str	r0, [r7, #32]
 8005ac0:	e00b      	b.n	8005ada <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d108      	bne.n	8005ada <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8005af8 <osTimerNew+0xf4>)
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	69fa      	ldr	r2, [r7, #28]
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ad4:	f002 f8ee 	bl	8007cb4 <xTimerCreate>
 8005ad8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d105      	bne.n	8005aec <osTimerNew+0xe8>
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <osTimerNew+0xe8>
        vPortFree (callb);
 8005ae6:	6978      	ldr	r0, [r7, #20]
 8005ae8:	f002 fffe 	bl	8008ae8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8005aec:	6a3b      	ldr	r3, [r7, #32]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3728      	adds	r7, #40	@ 0x28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	080059db 	.word	0x080059db

08005afc <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b088      	sub	sp, #32
 8005b00:	af02      	add	r7, sp, #8
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b0a:	f3ef 8305 	mrs	r3, IPSR
 8005b0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b10:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <osTimerStart+0x22>
    stat = osErrorISR;
 8005b16:	f06f 0305 	mvn.w	r3, #5
 8005b1a:	617b      	str	r3, [r7, #20]
 8005b1c:	e017      	b.n	8005b4e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d103      	bne.n	8005b2c <osTimerStart+0x30>
    stat = osErrorParameter;
 8005b24:	f06f 0303 	mvn.w	r3, #3
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	e010      	b.n	8005b4e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	2300      	movs	r3, #0
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	2104      	movs	r1, #4
 8005b36:	6938      	ldr	r0, [r7, #16]
 8005b38:	f002 f95a 	bl	8007df0 <xTimerGenericCommand>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d102      	bne.n	8005b48 <osTimerStart+0x4c>
      stat = osOK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	617b      	str	r3, [r7, #20]
 8005b46:	e002      	b.n	8005b4e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8005b48:	f06f 0302 	mvn.w	r3, #2
 8005b4c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005b4e:	697b      	ldr	r3, [r7, #20]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b088      	sub	sp, #32
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b64:	f3ef 8305 	mrs	r3, IPSR
 8005b68:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <osTimerStop+0x20>
    stat = osErrorISR;
 8005b70:	f06f 0305 	mvn.w	r3, #5
 8005b74:	617b      	str	r3, [r7, #20]
 8005b76:	e021      	b.n	8005bbc <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d103      	bne.n	8005b86 <osTimerStop+0x2e>
    stat = osErrorParameter;
 8005b7e:	f06f 0303 	mvn.w	r3, #3
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	e01a      	b.n	8005bbc <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8005b86:	6938      	ldr	r0, [r7, #16]
 8005b88:	f002 fc42 	bl	8008410 <xTimerIsTimerActive>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d103      	bne.n	8005b9a <osTimerStop+0x42>
      stat = osErrorResource;
 8005b92:	f06f 0302 	mvn.w	r3, #2
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	e010      	b.n	8005bbc <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2103      	movs	r1, #3
 8005ba4:	6938      	ldr	r0, [r7, #16]
 8005ba6:	f002 f923 	bl	8007df0 <xTimerGenericCommand>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d102      	bne.n	8005bb6 <osTimerStop+0x5e>
        stat = osOK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	e002      	b.n	8005bbc <osTimerStop+0x64>
      } else {
        stat = osError;
 8005bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bba:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005bbc:	697b      	ldr	r3, [r7, #20]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b08a      	sub	sp, #40	@ 0x28
 8005bca:	af02      	add	r7, sp, #8
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bd6:	f3ef 8305 	mrs	r3, IPSR
 8005bda:	613b      	str	r3, [r7, #16]
  return(result);
 8005bdc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d175      	bne.n	8005cce <osSemaphoreNew+0x108>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d072      	beq.n	8005cce <osSemaphoreNew+0x108>
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d86e      	bhi.n	8005cce <osSemaphoreNew+0x108>
    mem = -1;
 8005bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d015      	beq.n	8005c28 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d006      	beq.n	8005c12 <osSemaphoreNew+0x4c>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	2b4f      	cmp	r3, #79	@ 0x4f
 8005c0a:	d902      	bls.n	8005c12 <osSemaphoreNew+0x4c>
        mem = 1;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	61bb      	str	r3, [r7, #24]
 8005c10:	e00c      	b.n	8005c2c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d108      	bne.n	8005c2c <osSemaphoreNew+0x66>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d104      	bne.n	8005c2c <osSemaphoreNew+0x66>
          mem = 0;
 8005c22:	2300      	movs	r3, #0
 8005c24:	61bb      	str	r3, [r7, #24]
 8005c26:	e001      	b.n	8005c2c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c32:	d04c      	beq.n	8005cce <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d128      	bne.n	8005c8c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d10a      	bne.n	8005c56 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2203      	movs	r2, #3
 8005c46:	9200      	str	r2, [sp, #0]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	f000 f995 	bl	8005f7c <xQueueGenericCreateStatic>
 8005c52:	61f8      	str	r0, [r7, #28]
 8005c54:	e005      	b.n	8005c62 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005c56:	2203      	movs	r2, #3
 8005c58:	2100      	movs	r1, #0
 8005c5a:	2001      	movs	r0, #1
 8005c5c:	f000 fa0b 	bl	8006076 <xQueueGenericCreate>
 8005c60:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d022      	beq.n	8005cae <osSemaphoreNew+0xe8>
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d01f      	beq.n	8005cae <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005c6e:	2300      	movs	r3, #0
 8005c70:	2200      	movs	r2, #0
 8005c72:	2100      	movs	r1, #0
 8005c74:	69f8      	ldr	r0, [r7, #28]
 8005c76:	f000 facb 	bl	8006210 <xQueueGenericSend>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d016      	beq.n	8005cae <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005c80:	69f8      	ldr	r0, [r7, #28]
 8005c82:	f000 fd47 	bl	8006714 <vQueueDelete>
            hSemaphore = NULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61fb      	str	r3, [r7, #28]
 8005c8a:	e010      	b.n	8005cae <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d108      	bne.n	8005ca4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	461a      	mov	r2, r3
 8005c98:	68b9      	ldr	r1, [r7, #8]
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 fa49 	bl	8006132 <xQueueCreateCountingSemaphoreStatic>
 8005ca0:	61f8      	str	r0, [r7, #28]
 8005ca2:	e004      	b.n	8005cae <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 fa7c 	bl	80061a4 <xQueueCreateCountingSemaphore>
 8005cac:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00c      	beq.n	8005cce <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	e001      	b.n	8005cc6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005cc6:	6979      	ldr	r1, [r7, #20]
 8005cc8:	69f8      	ldr	r0, [r7, #28]
 8005cca:	f000 fe57 	bl	800697c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005cce:	69fb      	ldr	r3, [r7, #28]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3720      	adds	r7, #32
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	4a07      	ldr	r2, [pc, #28]	@ (8005d04 <vApplicationGetIdleTaskMemory+0x2c>)
 8005ce8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	4a06      	ldr	r2, [pc, #24]	@ (8005d08 <vApplicationGetIdleTaskMemory+0x30>)
 8005cee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2280      	movs	r2, #128	@ 0x80
 8005cf4:	601a      	str	r2, [r3, #0]
}
 8005cf6:	bf00      	nop
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	2000085c 	.word	0x2000085c
 8005d08:	200008b8 	.word	0x200008b8

08005d0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4a07      	ldr	r2, [pc, #28]	@ (8005d38 <vApplicationGetTimerTaskMemory+0x2c>)
 8005d1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	4a06      	ldr	r2, [pc, #24]	@ (8005d3c <vApplicationGetTimerTaskMemory+0x30>)
 8005d22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d2a:	601a      	str	r2, [r3, #0]
}
 8005d2c:	bf00      	nop
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	20000ab8 	.word	0x20000ab8
 8005d3c:	20000b14 	.word	0x20000b14

08005d40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f103 0208 	add.w	r2, r3, #8
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f04f 32ff 	mov.w	r2, #4294967295
 8005d58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f103 0208 	add.w	r2, r3, #8
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f103 0208 	add.w	r2, r3, #8
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	601a      	str	r2, [r3, #0]
}
 8005dd6:	bf00      	nop
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005de2:	b480      	push	{r7}
 8005de4:	b085      	sub	sp, #20
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df8:	d103      	bne.n	8005e02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	e00c      	b.n	8005e1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3308      	adds	r3, #8
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	e002      	b.n	8005e10 <vListInsert+0x2e>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d2f6      	bcs.n	8005e0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	601a      	str	r2, [r3, #0]
}
 8005e48:	bf00      	nop
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6892      	ldr	r2, [r2, #8]
 8005e6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6852      	ldr	r2, [r2, #4]
 8005e74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d103      	bne.n	8005e88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	1e5a      	subs	r2, r3, #1
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10b      	bne.n	8005ed4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ece:	bf00      	nop
 8005ed0:	bf00      	nop
 8005ed2:	e7fd      	b.n	8005ed0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ed4:	f002 fc18 	bl	8008708 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee0:	68f9      	ldr	r1, [r7, #12]
 8005ee2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ee4:	fb01 f303 	mul.w	r3, r1, r3
 8005ee8:	441a      	add	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f04:	3b01      	subs	r3, #1
 8005f06:	68f9      	ldr	r1, [r7, #12]
 8005f08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f0a:	fb01 f303 	mul.w	r3, r1, r3
 8005f0e:	441a      	add	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	22ff      	movs	r2, #255	@ 0xff
 8005f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	22ff      	movs	r2, #255	@ 0xff
 8005f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d114      	bne.n	8005f54 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d01a      	beq.n	8005f68 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3310      	adds	r3, #16
 8005f36:	4618      	mov	r0, r3
 8005f38:	f001 f9dc 	bl	80072f4 <xTaskRemoveFromEventList>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d012      	beq.n	8005f68 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f42:	4b0d      	ldr	r3, [pc, #52]	@ (8005f78 <xQueueGenericReset+0xd0>)
 8005f44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	e009      	b.n	8005f68 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3310      	adds	r3, #16
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff fef1 	bl	8005d40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3324      	adds	r3, #36	@ 0x24
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff feec 	bl	8005d40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f68:	f002 fc00 	bl	800876c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f6c:	2301      	movs	r3, #1
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	e000ed04 	.word	0xe000ed04

08005f7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08e      	sub	sp, #56	@ 0x38
 8005f80:	af02      	add	r7, sp, #8
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10b      	bne.n	8005fa8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005fa2:	bf00      	nop
 8005fa4:	bf00      	nop
 8005fa6:	e7fd      	b.n	8005fa4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10b      	bne.n	8005fc6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005fc0:	bf00      	nop
 8005fc2:	bf00      	nop
 8005fc4:	e7fd      	b.n	8005fc2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <xQueueGenericCreateStatic+0x56>
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <xQueueGenericCreateStatic+0x5a>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e000      	b.n	8005fd8 <xQueueGenericCreateStatic+0x5c>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10b      	bne.n	8005ff4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	623b      	str	r3, [r7, #32]
}
 8005fee:	bf00      	nop
 8005ff0:	bf00      	nop
 8005ff2:	e7fd      	b.n	8005ff0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d102      	bne.n	8006000 <xQueueGenericCreateStatic+0x84>
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <xQueueGenericCreateStatic+0x88>
 8006000:	2301      	movs	r3, #1
 8006002:	e000      	b.n	8006006 <xQueueGenericCreateStatic+0x8a>
 8006004:	2300      	movs	r3, #0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10b      	bne.n	8006022 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	61fb      	str	r3, [r7, #28]
}
 800601c:	bf00      	nop
 800601e:	bf00      	nop
 8006020:	e7fd      	b.n	800601e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006022:	2350      	movs	r3, #80	@ 0x50
 8006024:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2b50      	cmp	r3, #80	@ 0x50
 800602a:	d00b      	beq.n	8006044 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	61bb      	str	r3, [r7, #24]
}
 800603e:	bf00      	nop
 8006040:	bf00      	nop
 8006042:	e7fd      	b.n	8006040 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006044:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800604a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00d      	beq.n	800606c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006058:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800605c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	4613      	mov	r3, r2
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 f840 	bl	80060ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800606c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800606e:	4618      	mov	r0, r3
 8006070:	3730      	adds	r7, #48	@ 0x30
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006076:	b580      	push	{r7, lr}
 8006078:	b08a      	sub	sp, #40	@ 0x28
 800607a:	af02      	add	r7, sp, #8
 800607c:	60f8      	str	r0, [r7, #12]
 800607e:	60b9      	str	r1, [r7, #8]
 8006080:	4613      	mov	r3, r2
 8006082:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10b      	bne.n	80060a2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	613b      	str	r3, [r7, #16]
}
 800609c:	bf00      	nop
 800609e:	bf00      	nop
 80060a0:	e7fd      	b.n	800609e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	fb02 f303 	mul.w	r3, r2, r3
 80060aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	3350      	adds	r3, #80	@ 0x50
 80060b0:	4618      	mov	r0, r3
 80060b2:	f002 fc4b 	bl	800894c <pvPortMalloc>
 80060b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d011      	beq.n	80060e2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	3350      	adds	r3, #80	@ 0x50
 80060c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060d0:	79fa      	ldrb	r2, [r7, #7]
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	4613      	mov	r3, r2
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	68b9      	ldr	r1, [r7, #8]
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f805 	bl	80060ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060e2:	69bb      	ldr	r3, [r7, #24]
	}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3720      	adds	r7, #32
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d103      	bne.n	8006108 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	e002      	b.n	800610e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800611a:	2101      	movs	r1, #1
 800611c:	69b8      	ldr	r0, [r7, #24]
 800611e:	f7ff fec3 	bl	8005ea8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	78fa      	ldrb	r2, [r7, #3]
 8006126:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800612a:	bf00      	nop
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006132:	b580      	push	{r7, lr}
 8006134:	b08a      	sub	sp, #40	@ 0x28
 8006136:	af02      	add	r7, sp, #8
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10b      	bne.n	800615c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	61bb      	str	r3, [r7, #24]
}
 8006156:	bf00      	nop
 8006158:	bf00      	nop
 800615a:	e7fd      	b.n	8006158 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	429a      	cmp	r2, r3
 8006162:	d90b      	bls.n	800617c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	617b      	str	r3, [r7, #20]
}
 8006176:	bf00      	nop
 8006178:	bf00      	nop
 800617a:	e7fd      	b.n	8006178 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800617c:	2302      	movs	r3, #2
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	2100      	movs	r1, #0
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f7ff fef8 	bl	8005f7c <xQueueGenericCreateStatic>
 800618c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800619a:	69fb      	ldr	r3, [r7, #28]
	}
 800619c:	4618      	mov	r0, r3
 800619e:	3720      	adds	r7, #32
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10b      	bne.n	80061cc <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	613b      	str	r3, [r7, #16]
}
 80061c6:	bf00      	nop
 80061c8:	bf00      	nop
 80061ca:	e7fd      	b.n	80061c8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d90b      	bls.n	80061ec <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80061d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	60fb      	str	r3, [r7, #12]
}
 80061e6:	bf00      	nop
 80061e8:	bf00      	nop
 80061ea:	e7fd      	b.n	80061e8 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80061ec:	2202      	movs	r2, #2
 80061ee:	2100      	movs	r1, #0
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7ff ff40 	bl	8006076 <xQueueGenericCreate>
 80061f6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d002      	beq.n	8006204 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006204:	697b      	ldr	r3, [r7, #20]
	}
 8006206:	4618      	mov	r0, r3
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b08e      	sub	sp, #56	@ 0x38
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800621e:	2300      	movs	r3, #0
 8006220:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10b      	bne.n	8006244 <xQueueGenericSend+0x34>
	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800623e:	bf00      	nop
 8006240:	bf00      	nop
 8006242:	e7fd      	b.n	8006240 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d103      	bne.n	8006252 <xQueueGenericSend+0x42>
 800624a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <xQueueGenericSend+0x46>
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <xQueueGenericSend+0x48>
 8006256:	2300      	movs	r3, #0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10b      	bne.n	8006274 <xQueueGenericSend+0x64>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800626e:	bf00      	nop
 8006270:	bf00      	nop
 8006272:	e7fd      	b.n	8006270 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b02      	cmp	r3, #2
 8006278:	d103      	bne.n	8006282 <xQueueGenericSend+0x72>
 800627a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <xQueueGenericSend+0x76>
 8006282:	2301      	movs	r3, #1
 8006284:	e000      	b.n	8006288 <xQueueGenericSend+0x78>
 8006286:	2300      	movs	r3, #0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10b      	bne.n	80062a4 <xQueueGenericSend+0x94>
	__asm volatile
 800628c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	623b      	str	r3, [r7, #32]
}
 800629e:	bf00      	nop
 80062a0:	bf00      	nop
 80062a2:	e7fd      	b.n	80062a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062a4:	f001 f9e6 	bl	8007674 <xTaskGetSchedulerState>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d102      	bne.n	80062b4 <xQueueGenericSend+0xa4>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <xQueueGenericSend+0xa8>
 80062b4:	2301      	movs	r3, #1
 80062b6:	e000      	b.n	80062ba <xQueueGenericSend+0xaa>
 80062b8:	2300      	movs	r3, #0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10b      	bne.n	80062d6 <xQueueGenericSend+0xc6>
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	61fb      	str	r3, [r7, #28]
}
 80062d0:	bf00      	nop
 80062d2:	bf00      	nop
 80062d4:	e7fd      	b.n	80062d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062d6:	f002 fa17 	bl	8008708 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d302      	bcc.n	80062ec <xQueueGenericSend+0xdc>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d129      	bne.n	8006340 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	68b9      	ldr	r1, [r7, #8]
 80062f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062f2:	f000 fa33 	bl	800675c <prvCopyDataToQueue>
 80062f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d010      	beq.n	8006322 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006302:	3324      	adds	r3, #36	@ 0x24
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fff5 	bl	80072f4 <xTaskRemoveFromEventList>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d013      	beq.n	8006338 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006310:	4b3f      	ldr	r3, [pc, #252]	@ (8006410 <xQueueGenericSend+0x200>)
 8006312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	e00a      	b.n	8006338 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006324:	2b00      	cmp	r3, #0
 8006326:	d007      	beq.n	8006338 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006328:	4b39      	ldr	r3, [pc, #228]	@ (8006410 <xQueueGenericSend+0x200>)
 800632a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006338:	f002 fa18 	bl	800876c <vPortExitCritical>
				return pdPASS;
 800633c:	2301      	movs	r3, #1
 800633e:	e063      	b.n	8006408 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d103      	bne.n	800634e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006346:	f002 fa11 	bl	800876c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800634a:	2300      	movs	r3, #0
 800634c:	e05c      	b.n	8006408 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800634e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006350:	2b00      	cmp	r3, #0
 8006352:	d106      	bne.n	8006362 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006354:	f107 0314 	add.w	r3, r7, #20
 8006358:	4618      	mov	r0, r3
 800635a:	f001 f82f 	bl	80073bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800635e:	2301      	movs	r3, #1
 8006360:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006362:	f002 fa03 	bl	800876c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006366:	f000 fd9f 	bl	8006ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800636a:	f002 f9cd 	bl	8008708 <vPortEnterCritical>
 800636e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006370:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006374:	b25b      	sxtb	r3, r3
 8006376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637a:	d103      	bne.n	8006384 <xQueueGenericSend+0x174>
 800637c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637e:	2200      	movs	r2, #0
 8006380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006386:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800638a:	b25b      	sxtb	r3, r3
 800638c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006390:	d103      	bne.n	800639a <xQueueGenericSend+0x18a>
 8006392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800639a:	f002 f9e7 	bl	800876c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800639e:	1d3a      	adds	r2, r7, #4
 80063a0:	f107 0314 	add.w	r3, r7, #20
 80063a4:	4611      	mov	r1, r2
 80063a6:	4618      	mov	r0, r3
 80063a8:	f001 f81e 	bl	80073e8 <xTaskCheckForTimeOut>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d124      	bne.n	80063fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063b4:	f000 faca 	bl	800694c <prvIsQueueFull>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d018      	beq.n	80063f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80063be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c0:	3310      	adds	r3, #16
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	4611      	mov	r1, r2
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 ff42 	bl	8007250 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80063cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063ce:	f000 fa55 	bl	800687c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80063d2:	f000 fd77 	bl	8006ec4 <xTaskResumeAll>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f47f af7c 	bne.w	80062d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80063de:	4b0c      	ldr	r3, [pc, #48]	@ (8006410 <xQueueGenericSend+0x200>)
 80063e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	e772      	b.n	80062d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80063f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063f2:	f000 fa43 	bl	800687c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063f6:	f000 fd65 	bl	8006ec4 <xTaskResumeAll>
 80063fa:	e76c      	b.n	80062d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80063fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063fe:	f000 fa3d 	bl	800687c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006402:	f000 fd5f 	bl	8006ec4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006406:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006408:	4618      	mov	r0, r3
 800640a:	3738      	adds	r7, #56	@ 0x38
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	e000ed04 	.word	0xe000ed04

08006414 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b090      	sub	sp, #64	@ 0x40
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10b      	bne.n	8006444 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800643e:	bf00      	nop
 8006440:	bf00      	nop
 8006442:	e7fd      	b.n	8006440 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d103      	bne.n	8006452 <xQueueGenericSendFromISR+0x3e>
 800644a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <xQueueGenericSendFromISR+0x42>
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <xQueueGenericSendFromISR+0x44>
 8006456:	2300      	movs	r3, #0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10b      	bne.n	8006474 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800645c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006460:	f383 8811 	msr	BASEPRI, r3
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800646e:	bf00      	nop
 8006470:	bf00      	nop
 8006472:	e7fd      	b.n	8006470 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b02      	cmp	r3, #2
 8006478:	d103      	bne.n	8006482 <xQueueGenericSendFromISR+0x6e>
 800647a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <xQueueGenericSendFromISR+0x72>
 8006482:	2301      	movs	r3, #1
 8006484:	e000      	b.n	8006488 <xQueueGenericSendFromISR+0x74>
 8006486:	2300      	movs	r3, #0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10b      	bne.n	80064a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	623b      	str	r3, [r7, #32]
}
 800649e:	bf00      	nop
 80064a0:	bf00      	nop
 80064a2:	e7fd      	b.n	80064a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064a4:	f002 fa10 	bl	80088c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064a8:	f3ef 8211 	mrs	r2, BASEPRI
 80064ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	61fa      	str	r2, [r7, #28]
 80064be:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80064c0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064c2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d302      	bcc.n	80064d6 <xQueueGenericSendFromISR+0xc2>
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d12f      	bne.n	8006536 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80064d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	68b9      	ldr	r1, [r7, #8]
 80064ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80064ec:	f000 f936 	bl	800675c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80064f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80064f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f8:	d112      	bne.n	8006520 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d016      	beq.n	8006530 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006504:	3324      	adds	r3, #36	@ 0x24
 8006506:	4618      	mov	r0, r3
 8006508:	f000 fef4 	bl	80072f4 <xTaskRemoveFromEventList>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00e      	beq.n	8006530 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00b      	beq.n	8006530 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	e007      	b.n	8006530 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006520:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006524:	3301      	adds	r3, #1
 8006526:	b2db      	uxtb	r3, r3
 8006528:	b25a      	sxtb	r2, r3
 800652a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006530:	2301      	movs	r3, #1
 8006532:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006534:	e001      	b.n	800653a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006536:	2300      	movs	r3, #0
 8006538:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800653a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800653c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006544:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006548:	4618      	mov	r0, r3
 800654a:	3740      	adds	r7, #64	@ 0x40
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08c      	sub	sp, #48	@ 0x30
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800655c:	2300      	movs	r3, #0
 800655e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10b      	bne.n	8006582 <xQueueReceive+0x32>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	623b      	str	r3, [r7, #32]
}
 800657c:	bf00      	nop
 800657e:	bf00      	nop
 8006580:	e7fd      	b.n	800657e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d103      	bne.n	8006590 <xQueueReceive+0x40>
 8006588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658c:	2b00      	cmp	r3, #0
 800658e:	d101      	bne.n	8006594 <xQueueReceive+0x44>
 8006590:	2301      	movs	r3, #1
 8006592:	e000      	b.n	8006596 <xQueueReceive+0x46>
 8006594:	2300      	movs	r3, #0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10b      	bne.n	80065b2 <xQueueReceive+0x62>
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	61fb      	str	r3, [r7, #28]
}
 80065ac:	bf00      	nop
 80065ae:	bf00      	nop
 80065b0:	e7fd      	b.n	80065ae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065b2:	f001 f85f 	bl	8007674 <xTaskGetSchedulerState>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d102      	bne.n	80065c2 <xQueueReceive+0x72>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <xQueueReceive+0x76>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <xQueueReceive+0x78>
 80065c6:	2300      	movs	r3, #0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10b      	bne.n	80065e4 <xQueueReceive+0x94>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	61bb      	str	r3, [r7, #24]
}
 80065de:	bf00      	nop
 80065e0:	bf00      	nop
 80065e2:	e7fd      	b.n	80065e0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065e4:	f002 f890 	bl	8008708 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01f      	beq.n	8006634 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065f4:	68b9      	ldr	r1, [r7, #8]
 80065f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065f8:	f000 f91a 	bl	8006830 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fe:	1e5a      	subs	r2, r3, #1
 8006600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006602:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00f      	beq.n	800662c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800660c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660e:	3310      	adds	r3, #16
 8006610:	4618      	mov	r0, r3
 8006612:	f000 fe6f 	bl	80072f4 <xTaskRemoveFromEventList>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d007      	beq.n	800662c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800661c:	4b3c      	ldr	r3, [pc, #240]	@ (8006710 <xQueueReceive+0x1c0>)
 800661e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800662c:	f002 f89e 	bl	800876c <vPortExitCritical>
				return pdPASS;
 8006630:	2301      	movs	r3, #1
 8006632:	e069      	b.n	8006708 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d103      	bne.n	8006642 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800663a:	f002 f897 	bl	800876c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800663e:	2300      	movs	r3, #0
 8006640:	e062      	b.n	8006708 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d106      	bne.n	8006656 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006648:	f107 0310 	add.w	r3, r7, #16
 800664c:	4618      	mov	r0, r3
 800664e:	f000 feb5 	bl	80073bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006652:	2301      	movs	r3, #1
 8006654:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006656:	f002 f889 	bl	800876c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800665a:	f000 fc25 	bl	8006ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800665e:	f002 f853 	bl	8008708 <vPortEnterCritical>
 8006662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006664:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006668:	b25b      	sxtb	r3, r3
 800666a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666e:	d103      	bne.n	8006678 <xQueueReceive+0x128>
 8006670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800667e:	b25b      	sxtb	r3, r3
 8006680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006684:	d103      	bne.n	800668e <xQueueReceive+0x13e>
 8006686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800668e:	f002 f86d 	bl	800876c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006692:	1d3a      	adds	r2, r7, #4
 8006694:	f107 0310 	add.w	r3, r7, #16
 8006698:	4611      	mov	r1, r2
 800669a:	4618      	mov	r0, r3
 800669c:	f000 fea4 	bl	80073e8 <xTaskCheckForTimeOut>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d123      	bne.n	80066ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066a8:	f000 f93a 	bl	8006920 <prvIsQueueEmpty>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d017      	beq.n	80066e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b4:	3324      	adds	r3, #36	@ 0x24
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	4611      	mov	r1, r2
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 fdc8 	bl	8007250 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066c2:	f000 f8db 	bl	800687c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066c6:	f000 fbfd 	bl	8006ec4 <xTaskResumeAll>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d189      	bne.n	80065e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80066d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006710 <xQueueReceive+0x1c0>)
 80066d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	e780      	b.n	80065e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80066e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066e4:	f000 f8ca 	bl	800687c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066e8:	f000 fbec 	bl	8006ec4 <xTaskResumeAll>
 80066ec:	e77a      	b.n	80065e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80066ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066f0:	f000 f8c4 	bl	800687c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066f4:	f000 fbe6 	bl	8006ec4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066fa:	f000 f911 	bl	8006920 <prvIsQueueEmpty>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	f43f af6f 	beq.w	80065e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006706:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006708:	4618      	mov	r0, r3
 800670a:	3730      	adds	r7, #48	@ 0x30
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	e000ed04 	.word	0xe000ed04

08006714 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10b      	bne.n	800673e <vQueueDelete+0x2a>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	60bb      	str	r3, [r7, #8]
}
 8006738:	bf00      	nop
 800673a:	bf00      	nop
 800673c:	e7fd      	b.n	800673a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 f946 	bl	80069d0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800674a:	2b00      	cmp	r3, #0
 800674c:	d102      	bne.n	8006754 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f002 f9ca 	bl	8008ae8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006754:	bf00      	nop
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006768:	2300      	movs	r3, #0
 800676a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006770:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10d      	bne.n	8006796 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d14d      	bne.n	800681e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	4618      	mov	r0, r3
 8006788:	f000 ff92 	bl	80076b0 <xTaskPriorityDisinherit>
 800678c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	609a      	str	r2, [r3, #8]
 8006794:	e043      	b.n	800681e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d119      	bne.n	80067d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6858      	ldr	r0, [r3, #4]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a4:	461a      	mov	r2, r3
 80067a6:	68b9      	ldr	r1, [r7, #8]
 80067a8:	f002 fd77 	bl	800929a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b4:	441a      	add	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d32b      	bcc.n	800681e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	605a      	str	r2, [r3, #4]
 80067ce:	e026      	b.n	800681e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	68d8      	ldr	r0, [r3, #12]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d8:	461a      	mov	r2, r3
 80067da:	68b9      	ldr	r1, [r7, #8]
 80067dc:	f002 fd5d 	bl	800929a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e8:	425b      	negs	r3, r3
 80067ea:	441a      	add	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d207      	bcs.n	800680c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006804:	425b      	negs	r3, r3
 8006806:	441a      	add	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b02      	cmp	r3, #2
 8006810:	d105      	bne.n	800681e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	3b01      	subs	r3, #1
 800681c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006826:	697b      	ldr	r3, [r7, #20]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683e:	2b00      	cmp	r3, #0
 8006840:	d018      	beq.n	8006874 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800684a:	441a      	add	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68da      	ldr	r2, [r3, #12]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	429a      	cmp	r2, r3
 800685a:	d303      	bcc.n	8006864 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68d9      	ldr	r1, [r3, #12]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686c:	461a      	mov	r2, r3
 800686e:	6838      	ldr	r0, [r7, #0]
 8006870:	f002 fd13 	bl	800929a <memcpy>
	}
}
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006884:	f001 ff40 	bl	8008708 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800688e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006890:	e011      	b.n	80068b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006896:	2b00      	cmp	r3, #0
 8006898:	d012      	beq.n	80068c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	3324      	adds	r3, #36	@ 0x24
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 fd28 	bl	80072f4 <xTaskRemoveFromEventList>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80068aa:	f000 fe01 	bl	80074b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	dce9      	bgt.n	8006892 <prvUnlockQueue+0x16>
 80068be:	e000      	b.n	80068c2 <prvUnlockQueue+0x46>
					break;
 80068c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	22ff      	movs	r2, #255	@ 0xff
 80068c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80068ca:	f001 ff4f 	bl	800876c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068ce:	f001 ff1b 	bl	8008708 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068da:	e011      	b.n	8006900 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d012      	beq.n	800690a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	3310      	adds	r3, #16
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 fd03 	bl	80072f4 <xTaskRemoveFromEventList>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068f4:	f000 fddc 	bl	80074b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068f8:	7bbb      	ldrb	r3, [r7, #14]
 80068fa:	3b01      	subs	r3, #1
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006900:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006904:	2b00      	cmp	r3, #0
 8006906:	dce9      	bgt.n	80068dc <prvUnlockQueue+0x60>
 8006908:	e000      	b.n	800690c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800690a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	22ff      	movs	r2, #255	@ 0xff
 8006910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006914:	f001 ff2a 	bl	800876c <vPortExitCritical>
}
 8006918:	bf00      	nop
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006928:	f001 feee 	bl	8008708 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006930:	2b00      	cmp	r3, #0
 8006932:	d102      	bne.n	800693a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006934:	2301      	movs	r3, #1
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	e001      	b.n	800693e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800693a:	2300      	movs	r3, #0
 800693c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800693e:	f001 ff15 	bl	800876c <vPortExitCritical>

	return xReturn;
 8006942:	68fb      	ldr	r3, [r7, #12]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006954:	f001 fed8 	bl	8008708 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006960:	429a      	cmp	r2, r3
 8006962:	d102      	bne.n	800696a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006964:	2301      	movs	r3, #1
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	e001      	b.n	800696e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800696a:	2300      	movs	r3, #0
 800696c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800696e:	f001 fefd 	bl	800876c <vPortExitCritical>

	return xReturn;
 8006972:	68fb      	ldr	r3, [r7, #12]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006986:	2300      	movs	r3, #0
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	e014      	b.n	80069b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800698c:	4a0f      	ldr	r2, [pc, #60]	@ (80069cc <vQueueAddToRegistry+0x50>)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10b      	bne.n	80069b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006998:	490c      	ldr	r1, [pc, #48]	@ (80069cc <vQueueAddToRegistry+0x50>)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80069a2:	4a0a      	ldr	r2, [pc, #40]	@ (80069cc <vQueueAddToRegistry+0x50>)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	4413      	add	r3, r2
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80069ae:	e006      	b.n	80069be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2b07      	cmp	r3, #7
 80069ba:	d9e7      	bls.n	800698c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	20000f14 	.word	0x20000f14

080069d0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	e016      	b.n	8006a0c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80069de:	4a10      	ldr	r2, [pc, #64]	@ (8006a20 <vQueueUnregisterQueue+0x50>)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	4413      	add	r3, r2
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d10b      	bne.n	8006a06 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80069ee:	4a0c      	ldr	r2, [pc, #48]	@ (8006a20 <vQueueUnregisterQueue+0x50>)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2100      	movs	r1, #0
 80069f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80069f8:	4a09      	ldr	r2, [pc, #36]	@ (8006a20 <vQueueUnregisterQueue+0x50>)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	00db      	lsls	r3, r3, #3
 80069fe:	4413      	add	r3, r2
 8006a00:	2200      	movs	r2, #0
 8006a02:	605a      	str	r2, [r3, #4]
				break;
 8006a04:	e006      	b.n	8006a14 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b07      	cmp	r3, #7
 8006a10:	d9e5      	bls.n	80069de <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006a12:	bf00      	nop
 8006a14:	bf00      	nop
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	20000f14 	.word	0x20000f14

08006a24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006a34:	f001 fe68 	bl	8008708 <vPortEnterCritical>
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a3e:	b25b      	sxtb	r3, r3
 8006a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a44:	d103      	bne.n	8006a4e <vQueueWaitForMessageRestricted+0x2a>
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a54:	b25b      	sxtb	r3, r3
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5a:	d103      	bne.n	8006a64 <vQueueWaitForMessageRestricted+0x40>
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a64:	f001 fe82 	bl	800876c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d106      	bne.n	8006a7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	3324      	adds	r3, #36	@ 0x24
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	68b9      	ldr	r1, [r7, #8]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 fc0f 	bl	800729c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a7e:	6978      	ldr	r0, [r7, #20]
 8006a80:	f7ff fefc 	bl	800687c <prvUnlockQueue>
	}
 8006a84:	bf00      	nop
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08e      	sub	sp, #56	@ 0x38
 8006a90:	af04      	add	r7, sp, #16
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
 8006a98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10b      	bne.n	8006ab8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	623b      	str	r3, [r7, #32]
}
 8006ab2:	bf00      	nop
 8006ab4:	bf00      	nop
 8006ab6:	e7fd      	b.n	8006ab4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10b      	bne.n	8006ad6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	61fb      	str	r3, [r7, #28]
}
 8006ad0:	bf00      	nop
 8006ad2:	bf00      	nop
 8006ad4:	e7fd      	b.n	8006ad2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ad6:	235c      	movs	r3, #92	@ 0x5c
 8006ad8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	2b5c      	cmp	r3, #92	@ 0x5c
 8006ade:	d00b      	beq.n	8006af8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae4:	f383 8811 	msr	BASEPRI, r3
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	61bb      	str	r3, [r7, #24]
}
 8006af2:	bf00      	nop
 8006af4:	bf00      	nop
 8006af6:	e7fd      	b.n	8006af4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006af8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d01e      	beq.n	8006b3e <xTaskCreateStatic+0xb2>
 8006b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d01b      	beq.n	8006b3e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b08:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b0e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b18:	2300      	movs	r3, #0
 8006b1a:	9303      	str	r3, [sp, #12]
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1e:	9302      	str	r3, [sp, #8]
 8006b20:	f107 0314 	add.w	r3, r7, #20
 8006b24:	9301      	str	r3, [sp, #4]
 8006b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	68b9      	ldr	r1, [r7, #8]
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 f850 	bl	8006bd6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006b38:	f000 f8de 	bl	8006cf8 <prvAddNewTaskToReadyList>
 8006b3c:	e001      	b.n	8006b42 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b42:	697b      	ldr	r3, [r7, #20]
	}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3728      	adds	r7, #40	@ 0x28
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08c      	sub	sp, #48	@ 0x30
 8006b50:	af04      	add	r7, sp, #16
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	603b      	str	r3, [r7, #0]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b5c:	88fb      	ldrh	r3, [r7, #6]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4618      	mov	r0, r3
 8006b62:	f001 fef3 	bl	800894c <pvPortMalloc>
 8006b66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00e      	beq.n	8006b8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b6e:	205c      	movs	r0, #92	@ 0x5c
 8006b70:	f001 feec 	bl	800894c <pvPortMalloc>
 8006b74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b82:	e005      	b.n	8006b90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b84:	6978      	ldr	r0, [r7, #20]
 8006b86:	f001 ffaf 	bl	8008ae8 <vPortFree>
 8006b8a:	e001      	b.n	8006b90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d017      	beq.n	8006bc6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b9e:	88fa      	ldrh	r2, [r7, #6]
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	9303      	str	r3, [sp, #12]
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	9302      	str	r3, [sp, #8]
 8006ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006baa:	9301      	str	r3, [sp, #4]
 8006bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	68b9      	ldr	r1, [r7, #8]
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f80e 	bl	8006bd6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bba:	69f8      	ldr	r0, [r7, #28]
 8006bbc:	f000 f89c 	bl	8006cf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	61bb      	str	r3, [r7, #24]
 8006bc4:	e002      	b.n	8006bcc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006bcc:	69bb      	ldr	r3, [r7, #24]
	}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3720      	adds	r7, #32
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b088      	sub	sp, #32
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	60f8      	str	r0, [r7, #12]
 8006bde:	60b9      	str	r1, [r7, #8]
 8006be0:	607a      	str	r2, [r7, #4]
 8006be2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	461a      	mov	r2, r3
 8006bee:	21a5      	movs	r1, #165	@ 0xa5
 8006bf0:	f002 fad8 	bl	80091a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	f023 0307 	bic.w	r3, r3, #7
 8006c0c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	f003 0307 	and.w	r3, r3, #7
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00b      	beq.n	8006c30 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	f3bf 8f6f 	isb	sy
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	617b      	str	r3, [r7, #20]
}
 8006c2a:	bf00      	nop
 8006c2c:	bf00      	nop
 8006c2e:	e7fd      	b.n	8006c2c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d01f      	beq.n	8006c76 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c36:	2300      	movs	r3, #0
 8006c38:	61fb      	str	r3, [r7, #28]
 8006c3a:	e012      	b.n	8006c62 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	4413      	add	r3, r2
 8006c42:	7819      	ldrb	r1, [r3, #0]
 8006c44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	4413      	add	r3, r2
 8006c4a:	3334      	adds	r3, #52	@ 0x34
 8006c4c:	460a      	mov	r2, r1
 8006c4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4413      	add	r3, r2
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d006      	beq.n	8006c6a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	61fb      	str	r3, [r7, #28]
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	2b0f      	cmp	r3, #15
 8006c66:	d9e9      	bls.n	8006c3c <prvInitialiseNewTask+0x66>
 8006c68:	e000      	b.n	8006c6c <prvInitialiseNewTask+0x96>
			{
				break;
 8006c6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c74:	e003      	b.n	8006c7e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c80:	2b37      	cmp	r3, #55	@ 0x37
 8006c82:	d901      	bls.n	8006c88 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c84:	2337      	movs	r3, #55	@ 0x37
 8006c86:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c8c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c92:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c96:	2200      	movs	r2, #0
 8006c98:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9c:	3304      	adds	r3, #4
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7ff f86e 	bl	8005d80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca6:	3318      	adds	r3, #24
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7ff f869 	bl	8005d80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cc2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	68f9      	ldr	r1, [r7, #12]
 8006cd6:	69b8      	ldr	r0, [r7, #24]
 8006cd8:	f001 fbe6 	bl	80084a8 <pxPortInitialiseStack>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d002      	beq.n	8006cee <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cee:	bf00      	nop
 8006cf0:	3720      	adds	r7, #32
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
	...

08006cf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d00:	f001 fd02 	bl	8008708 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d04:	4b2d      	ldr	r3, [pc, #180]	@ (8006dbc <prvAddNewTaskToReadyList+0xc4>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8006dbc <prvAddNewTaskToReadyList+0xc4>)
 8006d0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d0e:	4b2c      	ldr	r3, [pc, #176]	@ (8006dc0 <prvAddNewTaskToReadyList+0xc8>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d109      	bne.n	8006d2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d16:	4a2a      	ldr	r2, [pc, #168]	@ (8006dc0 <prvAddNewTaskToReadyList+0xc8>)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d1c:	4b27      	ldr	r3, [pc, #156]	@ (8006dbc <prvAddNewTaskToReadyList+0xc4>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d110      	bne.n	8006d46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d24:	f000 fbe8 	bl	80074f8 <prvInitialiseTaskLists>
 8006d28:	e00d      	b.n	8006d46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d2a:	4b26      	ldr	r3, [pc, #152]	@ (8006dc4 <prvAddNewTaskToReadyList+0xcc>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d109      	bne.n	8006d46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d32:	4b23      	ldr	r3, [pc, #140]	@ (8006dc0 <prvAddNewTaskToReadyList+0xc8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d802      	bhi.n	8006d46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d40:	4a1f      	ldr	r2, [pc, #124]	@ (8006dc0 <prvAddNewTaskToReadyList+0xc8>)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d46:	4b20      	ldr	r3, [pc, #128]	@ (8006dc8 <prvAddNewTaskToReadyList+0xd0>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	4a1e      	ldr	r2, [pc, #120]	@ (8006dc8 <prvAddNewTaskToReadyList+0xd0>)
 8006d4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006d50:	4b1d      	ldr	r3, [pc, #116]	@ (8006dc8 <prvAddNewTaskToReadyList+0xd0>)
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8006dcc <prvAddNewTaskToReadyList+0xd4>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d903      	bls.n	8006d6c <prvAddNewTaskToReadyList+0x74>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d68:	4a18      	ldr	r2, [pc, #96]	@ (8006dcc <prvAddNewTaskToReadyList+0xd4>)
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d70:	4613      	mov	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4a15      	ldr	r2, [pc, #84]	@ (8006dd0 <prvAddNewTaskToReadyList+0xd8>)
 8006d7a:	441a      	add	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4619      	mov	r1, r3
 8006d82:	4610      	mov	r0, r2
 8006d84:	f7ff f809 	bl	8005d9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d88:	f001 fcf0 	bl	800876c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc4 <prvAddNewTaskToReadyList+0xcc>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00e      	beq.n	8006db2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d94:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc0 <prvAddNewTaskToReadyList+0xc8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d207      	bcs.n	8006db2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006da2:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd4 <prvAddNewTaskToReadyList+0xdc>)
 8006da4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006db2:	bf00      	nop
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	20001428 	.word	0x20001428
 8006dc0:	20000f54 	.word	0x20000f54
 8006dc4:	20001434 	.word	0x20001434
 8006dc8:	20001444 	.word	0x20001444
 8006dcc:	20001430 	.word	0x20001430
 8006dd0:	20000f58 	.word	0x20000f58
 8006dd4:	e000ed04 	.word	0xe000ed04

08006dd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08a      	sub	sp, #40	@ 0x28
 8006ddc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006de2:	2300      	movs	r3, #0
 8006de4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006de6:	463a      	mov	r2, r7
 8006de8:	1d39      	adds	r1, r7, #4
 8006dea:	f107 0308 	add.w	r3, r7, #8
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fe ff72 	bl	8005cd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006df4:	6839      	ldr	r1, [r7, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	9202      	str	r2, [sp, #8]
 8006dfc:	9301      	str	r3, [sp, #4]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	2300      	movs	r3, #0
 8006e04:	460a      	mov	r2, r1
 8006e06:	4922      	ldr	r1, [pc, #136]	@ (8006e90 <vTaskStartScheduler+0xb8>)
 8006e08:	4822      	ldr	r0, [pc, #136]	@ (8006e94 <vTaskStartScheduler+0xbc>)
 8006e0a:	f7ff fe3f 	bl	8006a8c <xTaskCreateStatic>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	4a21      	ldr	r2, [pc, #132]	@ (8006e98 <vTaskStartScheduler+0xc0>)
 8006e12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e14:	4b20      	ldr	r3, [pc, #128]	@ (8006e98 <vTaskStartScheduler+0xc0>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	e001      	b.n	8006e26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e22:	2300      	movs	r3, #0
 8006e24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d102      	bne.n	8006e32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e2c:	f000 fef8 	bl	8007c20 <xTimerCreateTimerTask>
 8006e30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d116      	bne.n	8006e66 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	613b      	str	r3, [r7, #16]
}
 8006e4a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e4c:	4b13      	ldr	r3, [pc, #76]	@ (8006e9c <vTaskStartScheduler+0xc4>)
 8006e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e52:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e54:	4b12      	ldr	r3, [pc, #72]	@ (8006ea0 <vTaskStartScheduler+0xc8>)
 8006e56:	2201      	movs	r2, #1
 8006e58:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e5a:	4b12      	ldr	r3, [pc, #72]	@ (8006ea4 <vTaskStartScheduler+0xcc>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e60:	f001 fbae 	bl	80085c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e64:	e00f      	b.n	8006e86 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6c:	d10b      	bne.n	8006e86 <vTaskStartScheduler+0xae>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	60fb      	str	r3, [r7, #12]
}
 8006e80:	bf00      	nop
 8006e82:	bf00      	nop
 8006e84:	e7fd      	b.n	8006e82 <vTaskStartScheduler+0xaa>
}
 8006e86:	bf00      	nop
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	0800a0e0 	.word	0x0800a0e0
 8006e94:	080074c9 	.word	0x080074c9
 8006e98:	2000144c 	.word	0x2000144c
 8006e9c:	20001448 	.word	0x20001448
 8006ea0:	20001434 	.word	0x20001434
 8006ea4:	2000142c 	.word	0x2000142c

08006ea8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006eac:	4b04      	ldr	r3, [pc, #16]	@ (8006ec0 <vTaskSuspendAll+0x18>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	4a03      	ldr	r2, [pc, #12]	@ (8006ec0 <vTaskSuspendAll+0x18>)
 8006eb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006eb6:	bf00      	nop
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	20001450 	.word	0x20001450

08006ec4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ed2:	4b42      	ldr	r3, [pc, #264]	@ (8006fdc <xTaskResumeAll+0x118>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10b      	bne.n	8006ef2 <xTaskResumeAll+0x2e>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	603b      	str	r3, [r7, #0]
}
 8006eec:	bf00      	nop
 8006eee:	bf00      	nop
 8006ef0:	e7fd      	b.n	8006eee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ef2:	f001 fc09 	bl	8008708 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ef6:	4b39      	ldr	r3, [pc, #228]	@ (8006fdc <xTaskResumeAll+0x118>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	4a37      	ldr	r2, [pc, #220]	@ (8006fdc <xTaskResumeAll+0x118>)
 8006efe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f00:	4b36      	ldr	r3, [pc, #216]	@ (8006fdc <xTaskResumeAll+0x118>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d162      	bne.n	8006fce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f08:	4b35      	ldr	r3, [pc, #212]	@ (8006fe0 <xTaskResumeAll+0x11c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d05e      	beq.n	8006fce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f10:	e02f      	b.n	8006f72 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f12:	4b34      	ldr	r3, [pc, #208]	@ (8006fe4 <xTaskResumeAll+0x120>)
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3318      	adds	r3, #24
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fe ff98 	bl	8005e54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	3304      	adds	r3, #4
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fe ff93 	bl	8005e54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f32:	4b2d      	ldr	r3, [pc, #180]	@ (8006fe8 <xTaskResumeAll+0x124>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d903      	bls.n	8006f42 <xTaskResumeAll+0x7e>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3e:	4a2a      	ldr	r2, [pc, #168]	@ (8006fe8 <xTaskResumeAll+0x124>)
 8006f40:	6013      	str	r3, [r2, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f46:	4613      	mov	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4a27      	ldr	r2, [pc, #156]	@ (8006fec <xTaskResumeAll+0x128>)
 8006f50:	441a      	add	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3304      	adds	r3, #4
 8006f56:	4619      	mov	r1, r3
 8006f58:	4610      	mov	r0, r2
 8006f5a:	f7fe ff1e 	bl	8005d9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f62:	4b23      	ldr	r3, [pc, #140]	@ (8006ff0 <xTaskResumeAll+0x12c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d302      	bcc.n	8006f72 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006f6c:	4b21      	ldr	r3, [pc, #132]	@ (8006ff4 <xTaskResumeAll+0x130>)
 8006f6e:	2201      	movs	r2, #1
 8006f70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f72:	4b1c      	ldr	r3, [pc, #112]	@ (8006fe4 <xTaskResumeAll+0x120>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1cb      	bne.n	8006f12 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d001      	beq.n	8006f84 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f80:	f000 fb58 	bl	8007634 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f84:	4b1c      	ldr	r3, [pc, #112]	@ (8006ff8 <xTaskResumeAll+0x134>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d010      	beq.n	8006fb2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f90:	f000 f846 	bl	8007020 <xTaskIncrementTick>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d002      	beq.n	8006fa0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006f9a:	4b16      	ldr	r3, [pc, #88]	@ (8006ff4 <xTaskResumeAll+0x130>)
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1f1      	bne.n	8006f90 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006fac:	4b12      	ldr	r3, [pc, #72]	@ (8006ff8 <xTaskResumeAll+0x134>)
 8006fae:	2200      	movs	r2, #0
 8006fb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fb2:	4b10      	ldr	r3, [pc, #64]	@ (8006ff4 <xTaskResumeAll+0x130>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d009      	beq.n	8006fce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8006ffc <xTaskResumeAll+0x138>)
 8006fc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fc4:	601a      	str	r2, [r3, #0]
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fce:	f001 fbcd 	bl	800876c <vPortExitCritical>

	return xAlreadyYielded;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	20001450 	.word	0x20001450
 8006fe0:	20001428 	.word	0x20001428
 8006fe4:	200013e8 	.word	0x200013e8
 8006fe8:	20001430 	.word	0x20001430
 8006fec:	20000f58 	.word	0x20000f58
 8006ff0:	20000f54 	.word	0x20000f54
 8006ff4:	2000143c 	.word	0x2000143c
 8006ff8:	20001438 	.word	0x20001438
 8006ffc:	e000ed04 	.word	0xe000ed04

08007000 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007006:	4b05      	ldr	r3, [pc, #20]	@ (800701c <xTaskGetTickCount+0x1c>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800700c:	687b      	ldr	r3, [r7, #4]
}
 800700e:	4618      	mov	r0, r3
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	2000142c 	.word	0x2000142c

08007020 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007026:	2300      	movs	r3, #0
 8007028:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800702a:	4b4f      	ldr	r3, [pc, #316]	@ (8007168 <xTaskIncrementTick+0x148>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	f040 8090 	bne.w	8007154 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007034:	4b4d      	ldr	r3, [pc, #308]	@ (800716c <xTaskIncrementTick+0x14c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3301      	adds	r3, #1
 800703a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800703c:	4a4b      	ldr	r2, [pc, #300]	@ (800716c <xTaskIncrementTick+0x14c>)
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d121      	bne.n	800708c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007048:	4b49      	ldr	r3, [pc, #292]	@ (8007170 <xTaskIncrementTick+0x150>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00b      	beq.n	800706a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	603b      	str	r3, [r7, #0]
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop
 8007068:	e7fd      	b.n	8007066 <xTaskIncrementTick+0x46>
 800706a:	4b41      	ldr	r3, [pc, #260]	@ (8007170 <xTaskIncrementTick+0x150>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	60fb      	str	r3, [r7, #12]
 8007070:	4b40      	ldr	r3, [pc, #256]	@ (8007174 <xTaskIncrementTick+0x154>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a3e      	ldr	r2, [pc, #248]	@ (8007170 <xTaskIncrementTick+0x150>)
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	4a3e      	ldr	r2, [pc, #248]	@ (8007174 <xTaskIncrementTick+0x154>)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	4b3e      	ldr	r3, [pc, #248]	@ (8007178 <xTaskIncrementTick+0x158>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3301      	adds	r3, #1
 8007084:	4a3c      	ldr	r2, [pc, #240]	@ (8007178 <xTaskIncrementTick+0x158>)
 8007086:	6013      	str	r3, [r2, #0]
 8007088:	f000 fad4 	bl	8007634 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800708c:	4b3b      	ldr	r3, [pc, #236]	@ (800717c <xTaskIncrementTick+0x15c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	429a      	cmp	r2, r3
 8007094:	d349      	bcc.n	800712a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007096:	4b36      	ldr	r3, [pc, #216]	@ (8007170 <xTaskIncrementTick+0x150>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d104      	bne.n	80070aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070a0:	4b36      	ldr	r3, [pc, #216]	@ (800717c <xTaskIncrementTick+0x15c>)
 80070a2:	f04f 32ff 	mov.w	r2, #4294967295
 80070a6:	601a      	str	r2, [r3, #0]
					break;
 80070a8:	e03f      	b.n	800712a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070aa:	4b31      	ldr	r3, [pc, #196]	@ (8007170 <xTaskIncrementTick+0x150>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d203      	bcs.n	80070ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070c2:	4a2e      	ldr	r2, [pc, #184]	@ (800717c <xTaskIncrementTick+0x15c>)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070c8:	e02f      	b.n	800712a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	3304      	adds	r3, #4
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fe fec0 	bl	8005e54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d004      	beq.n	80070e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	3318      	adds	r3, #24
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7fe feb7 	bl	8005e54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ea:	4b25      	ldr	r3, [pc, #148]	@ (8007180 <xTaskIncrementTick+0x160>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d903      	bls.n	80070fa <xTaskIncrementTick+0xda>
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f6:	4a22      	ldr	r2, [pc, #136]	@ (8007180 <xTaskIncrementTick+0x160>)
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070fe:	4613      	mov	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4a1f      	ldr	r2, [pc, #124]	@ (8007184 <xTaskIncrementTick+0x164>)
 8007108:	441a      	add	r2, r3
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	3304      	adds	r3, #4
 800710e:	4619      	mov	r1, r3
 8007110:	4610      	mov	r0, r2
 8007112:	f7fe fe42 	bl	8005d9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800711a:	4b1b      	ldr	r3, [pc, #108]	@ (8007188 <xTaskIncrementTick+0x168>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007120:	429a      	cmp	r2, r3
 8007122:	d3b8      	bcc.n	8007096 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007124:	2301      	movs	r3, #1
 8007126:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007128:	e7b5      	b.n	8007096 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800712a:	4b17      	ldr	r3, [pc, #92]	@ (8007188 <xTaskIncrementTick+0x168>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007130:	4914      	ldr	r1, [pc, #80]	@ (8007184 <xTaskIncrementTick+0x164>)
 8007132:	4613      	mov	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	440b      	add	r3, r1
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d901      	bls.n	8007146 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007142:	2301      	movs	r3, #1
 8007144:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007146:	4b11      	ldr	r3, [pc, #68]	@ (800718c <xTaskIncrementTick+0x16c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d007      	beq.n	800715e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800714e:	2301      	movs	r3, #1
 8007150:	617b      	str	r3, [r7, #20]
 8007152:	e004      	b.n	800715e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007154:	4b0e      	ldr	r3, [pc, #56]	@ (8007190 <xTaskIncrementTick+0x170>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3301      	adds	r3, #1
 800715a:	4a0d      	ldr	r2, [pc, #52]	@ (8007190 <xTaskIncrementTick+0x170>)
 800715c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800715e:	697b      	ldr	r3, [r7, #20]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3718      	adds	r7, #24
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	20001450 	.word	0x20001450
 800716c:	2000142c 	.word	0x2000142c
 8007170:	200013e0 	.word	0x200013e0
 8007174:	200013e4 	.word	0x200013e4
 8007178:	20001440 	.word	0x20001440
 800717c:	20001448 	.word	0x20001448
 8007180:	20001430 	.word	0x20001430
 8007184:	20000f58 	.word	0x20000f58
 8007188:	20000f54 	.word	0x20000f54
 800718c:	2000143c 	.word	0x2000143c
 8007190:	20001438 	.word	0x20001438

08007194 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800719a:	4b28      	ldr	r3, [pc, #160]	@ (800723c <vTaskSwitchContext+0xa8>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071a2:	4b27      	ldr	r3, [pc, #156]	@ (8007240 <vTaskSwitchContext+0xac>)
 80071a4:	2201      	movs	r2, #1
 80071a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071a8:	e042      	b.n	8007230 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80071aa:	4b25      	ldr	r3, [pc, #148]	@ (8007240 <vTaskSwitchContext+0xac>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b0:	4b24      	ldr	r3, [pc, #144]	@ (8007244 <vTaskSwitchContext+0xb0>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60fb      	str	r3, [r7, #12]
 80071b6:	e011      	b.n	80071dc <vTaskSwitchContext+0x48>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10b      	bne.n	80071d6 <vTaskSwitchContext+0x42>
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	607b      	str	r3, [r7, #4]
}
 80071d0:	bf00      	nop
 80071d2:	bf00      	nop
 80071d4:	e7fd      	b.n	80071d2 <vTaskSwitchContext+0x3e>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	3b01      	subs	r3, #1
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	491a      	ldr	r1, [pc, #104]	@ (8007248 <vTaskSwitchContext+0xb4>)
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	4613      	mov	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	440b      	add	r3, r1
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d0e3      	beq.n	80071b8 <vTaskSwitchContext+0x24>
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	4613      	mov	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	4a13      	ldr	r2, [pc, #76]	@ (8007248 <vTaskSwitchContext+0xb4>)
 80071fc:	4413      	add	r3, r2
 80071fe:	60bb      	str	r3, [r7, #8]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	605a      	str	r2, [r3, #4]
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	3308      	adds	r3, #8
 8007212:	429a      	cmp	r2, r3
 8007214:	d104      	bne.n	8007220 <vTaskSwitchContext+0x8c>
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	605a      	str	r2, [r3, #4]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	4a09      	ldr	r2, [pc, #36]	@ (800724c <vTaskSwitchContext+0xb8>)
 8007228:	6013      	str	r3, [r2, #0]
 800722a:	4a06      	ldr	r2, [pc, #24]	@ (8007244 <vTaskSwitchContext+0xb0>)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6013      	str	r3, [r2, #0]
}
 8007230:	bf00      	nop
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	20001450 	.word	0x20001450
 8007240:	2000143c 	.word	0x2000143c
 8007244:	20001430 	.word	0x20001430
 8007248:	20000f58 	.word	0x20000f58
 800724c:	20000f54 	.word	0x20000f54

08007250 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10b      	bne.n	8007278 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	60fb      	str	r3, [r7, #12]
}
 8007272:	bf00      	nop
 8007274:	bf00      	nop
 8007276:	e7fd      	b.n	8007274 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007278:	4b07      	ldr	r3, [pc, #28]	@ (8007298 <vTaskPlaceOnEventList+0x48>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3318      	adds	r3, #24
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7fe fdae 	bl	8005de2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007286:	2101      	movs	r1, #1
 8007288:	6838      	ldr	r0, [r7, #0]
 800728a:	f000 fc75 	bl	8007b78 <prvAddCurrentTaskToDelayedList>
}
 800728e:	bf00      	nop
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20000f54 	.word	0x20000f54

0800729c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10b      	bne.n	80072c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	617b      	str	r3, [r7, #20]
}
 80072c0:	bf00      	nop
 80072c2:	bf00      	nop
 80072c4:	e7fd      	b.n	80072c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072c6:	4b0a      	ldr	r3, [pc, #40]	@ (80072f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3318      	adds	r3, #24
 80072cc:	4619      	mov	r1, r3
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f7fe fd63 	bl	8005d9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80072da:	f04f 33ff 	mov.w	r3, #4294967295
 80072de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072e0:	6879      	ldr	r1, [r7, #4]
 80072e2:	68b8      	ldr	r0, [r7, #8]
 80072e4:	f000 fc48 	bl	8007b78 <prvAddCurrentTaskToDelayedList>
	}
 80072e8:	bf00      	nop
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	20000f54 	.word	0x20000f54

080072f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10b      	bne.n	8007322 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800730a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730e:	f383 8811 	msr	BASEPRI, r3
 8007312:	f3bf 8f6f 	isb	sy
 8007316:	f3bf 8f4f 	dsb	sy
 800731a:	60fb      	str	r3, [r7, #12]
}
 800731c:	bf00      	nop
 800731e:	bf00      	nop
 8007320:	e7fd      	b.n	800731e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	3318      	adds	r3, #24
 8007326:	4618      	mov	r0, r3
 8007328:	f7fe fd94 	bl	8005e54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800732c:	4b1d      	ldr	r3, [pc, #116]	@ (80073a4 <xTaskRemoveFromEventList+0xb0>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d11d      	bne.n	8007370 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	3304      	adds	r3, #4
 8007338:	4618      	mov	r0, r3
 800733a:	f7fe fd8b 	bl	8005e54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007342:	4b19      	ldr	r3, [pc, #100]	@ (80073a8 <xTaskRemoveFromEventList+0xb4>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	429a      	cmp	r2, r3
 8007348:	d903      	bls.n	8007352 <xTaskRemoveFromEventList+0x5e>
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800734e:	4a16      	ldr	r2, [pc, #88]	@ (80073a8 <xTaskRemoveFromEventList+0xb4>)
 8007350:	6013      	str	r3, [r2, #0]
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007356:	4613      	mov	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4413      	add	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4a13      	ldr	r2, [pc, #76]	@ (80073ac <xTaskRemoveFromEventList+0xb8>)
 8007360:	441a      	add	r2, r3
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	3304      	adds	r3, #4
 8007366:	4619      	mov	r1, r3
 8007368:	4610      	mov	r0, r2
 800736a:	f7fe fd16 	bl	8005d9a <vListInsertEnd>
 800736e:	e005      	b.n	800737c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	3318      	adds	r3, #24
 8007374:	4619      	mov	r1, r3
 8007376:	480e      	ldr	r0, [pc, #56]	@ (80073b0 <xTaskRemoveFromEventList+0xbc>)
 8007378:	f7fe fd0f 	bl	8005d9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007380:	4b0c      	ldr	r3, [pc, #48]	@ (80073b4 <xTaskRemoveFromEventList+0xc0>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007386:	429a      	cmp	r2, r3
 8007388:	d905      	bls.n	8007396 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800738a:	2301      	movs	r3, #1
 800738c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800738e:	4b0a      	ldr	r3, [pc, #40]	@ (80073b8 <xTaskRemoveFromEventList+0xc4>)
 8007390:	2201      	movs	r2, #1
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	e001      	b.n	800739a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007396:	2300      	movs	r3, #0
 8007398:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800739a:	697b      	ldr	r3, [r7, #20]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	20001450 	.word	0x20001450
 80073a8:	20001430 	.word	0x20001430
 80073ac:	20000f58 	.word	0x20000f58
 80073b0:	200013e8 	.word	0x200013e8
 80073b4:	20000f54 	.word	0x20000f54
 80073b8:	2000143c 	.word	0x2000143c

080073bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073c4:	4b06      	ldr	r3, [pc, #24]	@ (80073e0 <vTaskInternalSetTimeOutState+0x24>)
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073cc:	4b05      	ldr	r3, [pc, #20]	@ (80073e4 <vTaskInternalSetTimeOutState+0x28>)
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	605a      	str	r2, [r3, #4]
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr
 80073e0:	20001440 	.word	0x20001440
 80073e4:	2000142c 	.word	0x2000142c

080073e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b088      	sub	sp, #32
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10b      	bne.n	8007410 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	613b      	str	r3, [r7, #16]
}
 800740a:	bf00      	nop
 800740c:	bf00      	nop
 800740e:	e7fd      	b.n	800740c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10b      	bne.n	800742e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	60fb      	str	r3, [r7, #12]
}
 8007428:	bf00      	nop
 800742a:	bf00      	nop
 800742c:	e7fd      	b.n	800742a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800742e:	f001 f96b 	bl	8008708 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007432:	4b1d      	ldr	r3, [pc, #116]	@ (80074a8 <xTaskCheckForTimeOut+0xc0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744a:	d102      	bne.n	8007452 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800744c:	2300      	movs	r3, #0
 800744e:	61fb      	str	r3, [r7, #28]
 8007450:	e023      	b.n	800749a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	4b15      	ldr	r3, [pc, #84]	@ (80074ac <xTaskCheckForTimeOut+0xc4>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	429a      	cmp	r2, r3
 800745c:	d007      	beq.n	800746e <xTaskCheckForTimeOut+0x86>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	69ba      	ldr	r2, [r7, #24]
 8007464:	429a      	cmp	r2, r3
 8007466:	d302      	bcc.n	800746e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007468:	2301      	movs	r3, #1
 800746a:	61fb      	str	r3, [r7, #28]
 800746c:	e015      	b.n	800749a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	429a      	cmp	r2, r3
 8007476:	d20b      	bcs.n	8007490 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	1ad2      	subs	r2, r2, r3
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f7ff ff99 	bl	80073bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800748a:	2300      	movs	r3, #0
 800748c:	61fb      	str	r3, [r7, #28]
 800748e:	e004      	b.n	800749a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	2200      	movs	r2, #0
 8007494:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007496:	2301      	movs	r3, #1
 8007498:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800749a:	f001 f967 	bl	800876c <vPortExitCritical>

	return xReturn;
 800749e:	69fb      	ldr	r3, [r7, #28]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3720      	adds	r7, #32
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	2000142c 	.word	0x2000142c
 80074ac:	20001440 	.word	0x20001440

080074b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074b0:	b480      	push	{r7}
 80074b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074b4:	4b03      	ldr	r3, [pc, #12]	@ (80074c4 <vTaskMissedYield+0x14>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	601a      	str	r2, [r3, #0]
}
 80074ba:	bf00      	nop
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr
 80074c4:	2000143c 	.word	0x2000143c

080074c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074d0:	f000 f852 	bl	8007578 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074d4:	4b06      	ldr	r3, [pc, #24]	@ (80074f0 <prvIdleTask+0x28>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d9f9      	bls.n	80074d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074dc:	4b05      	ldr	r3, [pc, #20]	@ (80074f4 <prvIdleTask+0x2c>)
 80074de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074ec:	e7f0      	b.n	80074d0 <prvIdleTask+0x8>
 80074ee:	bf00      	nop
 80074f0:	20000f58 	.word	0x20000f58
 80074f4:	e000ed04 	.word	0xe000ed04

080074f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074fe:	2300      	movs	r3, #0
 8007500:	607b      	str	r3, [r7, #4]
 8007502:	e00c      	b.n	800751e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	4613      	mov	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4a12      	ldr	r2, [pc, #72]	@ (8007558 <prvInitialiseTaskLists+0x60>)
 8007510:	4413      	add	r3, r2
 8007512:	4618      	mov	r0, r3
 8007514:	f7fe fc14 	bl	8005d40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	3301      	adds	r3, #1
 800751c:	607b      	str	r3, [r7, #4]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b37      	cmp	r3, #55	@ 0x37
 8007522:	d9ef      	bls.n	8007504 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007524:	480d      	ldr	r0, [pc, #52]	@ (800755c <prvInitialiseTaskLists+0x64>)
 8007526:	f7fe fc0b 	bl	8005d40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800752a:	480d      	ldr	r0, [pc, #52]	@ (8007560 <prvInitialiseTaskLists+0x68>)
 800752c:	f7fe fc08 	bl	8005d40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007530:	480c      	ldr	r0, [pc, #48]	@ (8007564 <prvInitialiseTaskLists+0x6c>)
 8007532:	f7fe fc05 	bl	8005d40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007536:	480c      	ldr	r0, [pc, #48]	@ (8007568 <prvInitialiseTaskLists+0x70>)
 8007538:	f7fe fc02 	bl	8005d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800753c:	480b      	ldr	r0, [pc, #44]	@ (800756c <prvInitialiseTaskLists+0x74>)
 800753e:	f7fe fbff 	bl	8005d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007542:	4b0b      	ldr	r3, [pc, #44]	@ (8007570 <prvInitialiseTaskLists+0x78>)
 8007544:	4a05      	ldr	r2, [pc, #20]	@ (800755c <prvInitialiseTaskLists+0x64>)
 8007546:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007548:	4b0a      	ldr	r3, [pc, #40]	@ (8007574 <prvInitialiseTaskLists+0x7c>)
 800754a:	4a05      	ldr	r2, [pc, #20]	@ (8007560 <prvInitialiseTaskLists+0x68>)
 800754c:	601a      	str	r2, [r3, #0]
}
 800754e:	bf00      	nop
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	20000f58 	.word	0x20000f58
 800755c:	200013b8 	.word	0x200013b8
 8007560:	200013cc 	.word	0x200013cc
 8007564:	200013e8 	.word	0x200013e8
 8007568:	200013fc 	.word	0x200013fc
 800756c:	20001414 	.word	0x20001414
 8007570:	200013e0 	.word	0x200013e0
 8007574:	200013e4 	.word	0x200013e4

08007578 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800757e:	e019      	b.n	80075b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007580:	f001 f8c2 	bl	8008708 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007584:	4b10      	ldr	r3, [pc, #64]	@ (80075c8 <prvCheckTasksWaitingTermination+0x50>)
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	3304      	adds	r3, #4
 8007590:	4618      	mov	r0, r3
 8007592:	f7fe fc5f 	bl	8005e54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007596:	4b0d      	ldr	r3, [pc, #52]	@ (80075cc <prvCheckTasksWaitingTermination+0x54>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	3b01      	subs	r3, #1
 800759c:	4a0b      	ldr	r2, [pc, #44]	@ (80075cc <prvCheckTasksWaitingTermination+0x54>)
 800759e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075a0:	4b0b      	ldr	r3, [pc, #44]	@ (80075d0 <prvCheckTasksWaitingTermination+0x58>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	3b01      	subs	r3, #1
 80075a6:	4a0a      	ldr	r2, [pc, #40]	@ (80075d0 <prvCheckTasksWaitingTermination+0x58>)
 80075a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075aa:	f001 f8df 	bl	800876c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f810 	bl	80075d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075b4:	4b06      	ldr	r3, [pc, #24]	@ (80075d0 <prvCheckTasksWaitingTermination+0x58>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1e1      	bne.n	8007580 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075bc:	bf00      	nop
 80075be:	bf00      	nop
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	200013fc 	.word	0x200013fc
 80075cc:	20001428 	.word	0x20001428
 80075d0:	20001410 	.word	0x20001410

080075d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d108      	bne.n	80075f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ea:	4618      	mov	r0, r3
 80075ec:	f001 fa7c 	bl	8008ae8 <vPortFree>
				vPortFree( pxTCB );
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f001 fa79 	bl	8008ae8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075f6:	e019      	b.n	800762c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d103      	bne.n	800760a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f001 fa70 	bl	8008ae8 <vPortFree>
	}
 8007608:	e010      	b.n	800762c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007610:	2b02      	cmp	r3, #2
 8007612:	d00b      	beq.n	800762c <prvDeleteTCB+0x58>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	60fb      	str	r3, [r7, #12]
}
 8007626:	bf00      	nop
 8007628:	bf00      	nop
 800762a:	e7fd      	b.n	8007628 <prvDeleteTCB+0x54>
	}
 800762c:	bf00      	nop
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800763a:	4b0c      	ldr	r3, [pc, #48]	@ (800766c <prvResetNextTaskUnblockTime+0x38>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d104      	bne.n	800764e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007644:	4b0a      	ldr	r3, [pc, #40]	@ (8007670 <prvResetNextTaskUnblockTime+0x3c>)
 8007646:	f04f 32ff 	mov.w	r2, #4294967295
 800764a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800764c:	e008      	b.n	8007660 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800764e:	4b07      	ldr	r3, [pc, #28]	@ (800766c <prvResetNextTaskUnblockTime+0x38>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	4a04      	ldr	r2, [pc, #16]	@ (8007670 <prvResetNextTaskUnblockTime+0x3c>)
 800765e:	6013      	str	r3, [r2, #0]
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	200013e0 	.word	0x200013e0
 8007670:	20001448 	.word	0x20001448

08007674 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800767a:	4b0b      	ldr	r3, [pc, #44]	@ (80076a8 <xTaskGetSchedulerState+0x34>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d102      	bne.n	8007688 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007682:	2301      	movs	r3, #1
 8007684:	607b      	str	r3, [r7, #4]
 8007686:	e008      	b.n	800769a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007688:	4b08      	ldr	r3, [pc, #32]	@ (80076ac <xTaskGetSchedulerState+0x38>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d102      	bne.n	8007696 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007690:	2302      	movs	r3, #2
 8007692:	607b      	str	r3, [r7, #4]
 8007694:	e001      	b.n	800769a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007696:	2300      	movs	r3, #0
 8007698:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800769a:	687b      	ldr	r3, [r7, #4]
	}
 800769c:	4618      	mov	r0, r3
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	20001434 	.word	0x20001434
 80076ac:	20001450 	.word	0x20001450

080076b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076bc:	2300      	movs	r3, #0
 80076be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d058      	beq.n	8007778 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076c6:	4b2f      	ldr	r3, [pc, #188]	@ (8007784 <xTaskPriorityDisinherit+0xd4>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d00b      	beq.n	80076e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	60fb      	str	r3, [r7, #12]
}
 80076e2:	bf00      	nop
 80076e4:	bf00      	nop
 80076e6:	e7fd      	b.n	80076e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10b      	bne.n	8007708 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	60bb      	str	r3, [r7, #8]
}
 8007702:	bf00      	nop
 8007704:	bf00      	nop
 8007706:	e7fd      	b.n	8007704 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800770c:	1e5a      	subs	r2, r3, #1
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800771a:	429a      	cmp	r2, r3
 800771c:	d02c      	beq.n	8007778 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007722:	2b00      	cmp	r3, #0
 8007724:	d128      	bne.n	8007778 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	3304      	adds	r3, #4
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe fb92 	bl	8005e54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007748:	4b0f      	ldr	r3, [pc, #60]	@ (8007788 <xTaskPriorityDisinherit+0xd8>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	429a      	cmp	r2, r3
 800774e:	d903      	bls.n	8007758 <xTaskPriorityDisinherit+0xa8>
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007754:	4a0c      	ldr	r2, [pc, #48]	@ (8007788 <xTaskPriorityDisinherit+0xd8>)
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800775c:	4613      	mov	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4a09      	ldr	r2, [pc, #36]	@ (800778c <xTaskPriorityDisinherit+0xdc>)
 8007766:	441a      	add	r2, r3
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	3304      	adds	r3, #4
 800776c:	4619      	mov	r1, r3
 800776e:	4610      	mov	r0, r2
 8007770:	f7fe fb13 	bl	8005d9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007774:	2301      	movs	r3, #1
 8007776:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007778:	697b      	ldr	r3, [r7, #20]
	}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	20000f54 	.word	0x20000f54
 8007788:	20001430 	.word	0x20001430
 800778c:	20000f58 	.word	0x20000f58

08007790 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
 800779c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800779e:	f000 ffb3 	bl	8008708 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80077a2:	4b26      	ldr	r3, [pc, #152]	@ (800783c <xTaskNotifyWait+0xac>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d01a      	beq.n	80077e6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80077b0:	4b22      	ldr	r3, [pc, #136]	@ (800783c <xTaskNotifyWait+0xac>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	43d2      	mvns	r2, r2
 80077ba:	400a      	ands	r2, r1
 80077bc:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80077be:	4b1f      	ldr	r3, [pc, #124]	@ (800783c <xTaskNotifyWait+0xac>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00b      	beq.n	80077e6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077ce:	2101      	movs	r1, #1
 80077d0:	6838      	ldr	r0, [r7, #0]
 80077d2:	f000 f9d1 	bl	8007b78 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80077d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007840 <xTaskNotifyWait+0xb0>)
 80077d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80077e6:	f000 ffc1 	bl	800876c <vPortExitCritical>

		taskENTER_CRITICAL();
 80077ea:	f000 ff8d 	bl	8008708 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d004      	beq.n	80077fe <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80077f4:	4b11      	ldr	r3, [pc, #68]	@ (800783c <xTaskNotifyWait+0xac>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80077fe:	4b0f      	ldr	r3, [pc, #60]	@ (800783c <xTaskNotifyWait+0xac>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b02      	cmp	r3, #2
 800780a:	d002      	beq.n	8007812 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800780c:	2300      	movs	r3, #0
 800780e:	617b      	str	r3, [r7, #20]
 8007810:	e008      	b.n	8007824 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007812:	4b0a      	ldr	r3, [pc, #40]	@ (800783c <xTaskNotifyWait+0xac>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	43d2      	mvns	r2, r2
 800781c:	400a      	ands	r2, r1
 800781e:	655a      	str	r2, [r3, #84]	@ 0x54
				xReturn = pdTRUE;
 8007820:	2301      	movs	r3, #1
 8007822:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007824:	4b05      	ldr	r3, [pc, #20]	@ (800783c <xTaskNotifyWait+0xac>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 800782e:	f000 ff9d 	bl	800876c <vPortExitCritical>

		return xReturn;
 8007832:	697b      	ldr	r3, [r7, #20]
	}
 8007834:	4618      	mov	r0, r3
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	20000f54 	.word	0x20000f54
 8007840:	e000ed04 	.word	0xe000ed04

08007844 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007844:	b580      	push	{r7, lr}
 8007846:	b08a      	sub	sp, #40	@ 0x28
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	603b      	str	r3, [r7, #0]
 8007850:	4613      	mov	r3, r2
 8007852:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007854:	2301      	movs	r3, #1
 8007856:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10b      	bne.n	8007876 <xTaskGenericNotify+0x32>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	61bb      	str	r3, [r7, #24]
}
 8007870:	bf00      	nop
 8007872:	bf00      	nop
 8007874:	e7fd      	b.n	8007872 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800787a:	f000 ff45 	bl	8008708 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d003      	beq.n	800788c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007892:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	2202      	movs	r2, #2
 8007898:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 800789c:	79fb      	ldrb	r3, [r7, #7]
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d827      	bhi.n	80078f2 <xTaskGenericNotify+0xae>
 80078a2:	a201      	add	r2, pc, #4	@ (adr r2, 80078a8 <xTaskGenericNotify+0x64>)
 80078a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a8:	08007915 	.word	0x08007915
 80078ac:	080078bd 	.word	0x080078bd
 80078b0:	080078cb 	.word	0x080078cb
 80078b4:	080078d7 	.word	0x080078d7
 80078b8:	080078df 	.word	0x080078df
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	431a      	orrs	r2, r3
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80078c8:	e027      	b.n	800791a <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	6a3b      	ldr	r3, [r7, #32]
 80078d2:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80078d4:	e021      	b.n	800791a <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80078dc:	e01d      	b.n	800791a <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80078de:	7ffb      	ldrb	r3, [r7, #31]
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d003      	beq.n	80078ec <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80078ea:	e016      	b.n	800791a <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 80078ec:	2300      	movs	r3, #0
 80078ee:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80078f0:	e013      	b.n	800791a <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80078f2:	6a3b      	ldr	r3, [r7, #32]
 80078f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078fa:	d00d      	beq.n	8007918 <xTaskGenericNotify+0xd4>
	__asm volatile
 80078fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	617b      	str	r3, [r7, #20]
}
 800790e:	bf00      	nop
 8007910:	bf00      	nop
 8007912:	e7fd      	b.n	8007910 <xTaskGenericNotify+0xcc>
					break;
 8007914:	bf00      	nop
 8007916:	e000      	b.n	800791a <xTaskGenericNotify+0xd6>

					break;
 8007918:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800791a:	7ffb      	ldrb	r3, [r7, #31]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d13b      	bne.n	8007998 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	3304      	adds	r3, #4
 8007924:	4618      	mov	r0, r3
 8007926:	f7fe fa95 	bl	8005e54 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800792e:	4b1e      	ldr	r3, [pc, #120]	@ (80079a8 <xTaskGenericNotify+0x164>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	429a      	cmp	r2, r3
 8007934:	d903      	bls.n	800793e <xTaskGenericNotify+0xfa>
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793a:	4a1b      	ldr	r2, [pc, #108]	@ (80079a8 <xTaskGenericNotify+0x164>)
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4a18      	ldr	r2, [pc, #96]	@ (80079ac <xTaskGenericNotify+0x168>)
 800794c:	441a      	add	r2, r3
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	3304      	adds	r3, #4
 8007952:	4619      	mov	r1, r3
 8007954:	4610      	mov	r0, r2
 8007956:	f7fe fa20 	bl	8005d9a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00b      	beq.n	800797a <xTaskGenericNotify+0x136>
	__asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	613b      	str	r3, [r7, #16]
}
 8007974:	bf00      	nop
 8007976:	bf00      	nop
 8007978:	e7fd      	b.n	8007976 <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800797e:	4b0c      	ldr	r3, [pc, #48]	@ (80079b0 <xTaskGenericNotify+0x16c>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007984:	429a      	cmp	r2, r3
 8007986:	d907      	bls.n	8007998 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007988:	4b0a      	ldr	r3, [pc, #40]	@ (80079b4 <xTaskGenericNotify+0x170>)
 800798a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007998:	f000 fee8 	bl	800876c <vPortExitCritical>

		return xReturn;
 800799c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800799e:	4618      	mov	r0, r3
 80079a0:	3728      	adds	r7, #40	@ 0x28
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	20001430 	.word	0x20001430
 80079ac:	20000f58 	.word	0x20000f58
 80079b0:	20000f54 	.word	0x20000f54
 80079b4:	e000ed04 	.word	0xe000ed04

080079b8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08e      	sub	sp, #56	@ 0x38
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	4613      	mov	r3, r2
 80079c6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80079c8:	2301      	movs	r3, #1
 80079ca:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10b      	bne.n	80079ea <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80079e4:	bf00      	nop
 80079e6:	bf00      	nop
 80079e8:	e7fd      	b.n	80079e6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079ea:	f000 ff6d 	bl	80088c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80079f2:	f3ef 8211 	mrs	r2, BASEPRI
 80079f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	623a      	str	r2, [r7, #32]
 8007a08:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007a0a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a16:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a28:	2202      	movs	r2, #2
 8007a2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8007a2e:	79fb      	ldrb	r3, [r7, #7]
 8007a30:	2b04      	cmp	r3, #4
 8007a32:	d829      	bhi.n	8007a88 <xTaskGenericNotifyFromISR+0xd0>
 8007a34:	a201      	add	r2, pc, #4	@ (adr r2, 8007a3c <xTaskGenericNotifyFromISR+0x84>)
 8007a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3a:	bf00      	nop
 8007a3c:	08007aab 	.word	0x08007aab
 8007a40:	08007a51 	.word	0x08007a51
 8007a44:	08007a5f 	.word	0x08007a5f
 8007a48:	08007a6b 	.word	0x08007a6b
 8007a4c:	08007a73 	.word	0x08007a73
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a52:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	431a      	orrs	r2, r3
 8007a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007a5c:	e028      	b.n	8007ab0 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a62:	1c5a      	adds	r2, r3, #1
 8007a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a66:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007a68:	e022      	b.n	8007ab0 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007a70:	e01e      	b.n	8007ab0 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007a72:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d003      	beq.n	8007a82 <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007a80:	e016      	b.n	8007ab0 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 8007a82:	2300      	movs	r3, #0
 8007a84:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8007a86:	e013      	b.n	8007ab0 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a90:	d00d      	beq.n	8007aae <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 8007a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	61bb      	str	r3, [r7, #24]
}
 8007aa4:	bf00      	nop
 8007aa6:	bf00      	nop
 8007aa8:	e7fd      	b.n	8007aa6 <xTaskGenericNotifyFromISR+0xee>
					break;
 8007aaa:	bf00      	nop
 8007aac:	e000      	b.n	8007ab0 <xTaskGenericNotifyFromISR+0xf8>
					break;
 8007aae:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007ab0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d147      	bne.n	8007b48 <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00b      	beq.n	8007ad8 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	617b      	str	r3, [r7, #20]
}
 8007ad2:	bf00      	nop
 8007ad4:	bf00      	nop
 8007ad6:	e7fd      	b.n	8007ad4 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ad8:	4b21      	ldr	r3, [pc, #132]	@ (8007b60 <xTaskGenericNotifyFromISR+0x1a8>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d11d      	bne.n	8007b1c <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fe f9b5 	bl	8005e54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aee:	4b1d      	ldr	r3, [pc, #116]	@ (8007b64 <xTaskGenericNotifyFromISR+0x1ac>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d903      	bls.n	8007afe <xTaskGenericNotifyFromISR+0x146>
 8007af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afa:	4a1a      	ldr	r2, [pc, #104]	@ (8007b64 <xTaskGenericNotifyFromISR+0x1ac>)
 8007afc:	6013      	str	r3, [r2, #0]
 8007afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b02:	4613      	mov	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4a17      	ldr	r2, [pc, #92]	@ (8007b68 <xTaskGenericNotifyFromISR+0x1b0>)
 8007b0c:	441a      	add	r2, r3
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b10:	3304      	adds	r3, #4
 8007b12:	4619      	mov	r1, r3
 8007b14:	4610      	mov	r0, r2
 8007b16:	f7fe f940 	bl	8005d9a <vListInsertEnd>
 8007b1a:	e005      	b.n	8007b28 <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1e:	3318      	adds	r3, #24
 8007b20:	4619      	mov	r1, r3
 8007b22:	4812      	ldr	r0, [pc, #72]	@ (8007b6c <xTaskGenericNotifyFromISR+0x1b4>)
 8007b24:	f7fe f939 	bl	8005d9a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b2c:	4b10      	ldr	r3, [pc, #64]	@ (8007b70 <xTaskGenericNotifyFromISR+0x1b8>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d908      	bls.n	8007b48 <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007b3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b3e:	2201      	movs	r2, #1
 8007b40:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007b42:	4b0c      	ldr	r3, [pc, #48]	@ (8007b74 <xTaskGenericNotifyFromISR+0x1bc>)
 8007b44:	2201      	movs	r2, #1
 8007b46:	601a      	str	r2, [r3, #0]
 8007b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b4a:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	f383 8811 	msr	BASEPRI, r3
}
 8007b52:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3738      	adds	r7, #56	@ 0x38
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20001450 	.word	0x20001450
 8007b64:	20001430 	.word	0x20001430
 8007b68:	20000f58 	.word	0x20000f58
 8007b6c:	200013e8 	.word	0x200013e8
 8007b70:	20000f54 	.word	0x20000f54
 8007b74:	2000143c 	.word	0x2000143c

08007b78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b82:	4b21      	ldr	r3, [pc, #132]	@ (8007c08 <prvAddCurrentTaskToDelayedList+0x90>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b88:	4b20      	ldr	r3, [pc, #128]	@ (8007c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fe f960 	bl	8005e54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9a:	d10a      	bne.n	8007bb2 <prvAddCurrentTaskToDelayedList+0x3a>
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d007      	beq.n	8007bb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8007c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	4619      	mov	r1, r3
 8007baa:	4819      	ldr	r0, [pc, #100]	@ (8007c10 <prvAddCurrentTaskToDelayedList+0x98>)
 8007bac:	f7fe f8f5 	bl	8005d9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007bb0:	e026      	b.n	8007c00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007bba:	4b14      	ldr	r3, [pc, #80]	@ (8007c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d209      	bcs.n	8007bde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bca:	4b12      	ldr	r3, [pc, #72]	@ (8007c14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	4b0f      	ldr	r3, [pc, #60]	@ (8007c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	f7fe f903 	bl	8005de2 <vListInsert>
}
 8007bdc:	e010      	b.n	8007c00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bde:	4b0e      	ldr	r3, [pc, #56]	@ (8007c18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	4b0a      	ldr	r3, [pc, #40]	@ (8007c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3304      	adds	r3, #4
 8007be8:	4619      	mov	r1, r3
 8007bea:	4610      	mov	r0, r2
 8007bec:	f7fe f8f9 	bl	8005de2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8007c1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d202      	bcs.n	8007c00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007bfa:	4a08      	ldr	r2, [pc, #32]	@ (8007c1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	6013      	str	r3, [r2, #0]
}
 8007c00:	bf00      	nop
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	2000142c 	.word	0x2000142c
 8007c0c:	20000f54 	.word	0x20000f54
 8007c10:	20001414 	.word	0x20001414
 8007c14:	200013e4 	.word	0x200013e4
 8007c18:	200013e0 	.word	0x200013e0
 8007c1c:	20001448 	.word	0x20001448

08007c20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b08a      	sub	sp, #40	@ 0x28
 8007c24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007c2a:	f000 fbb1 	bl	8008390 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ca4 <xTimerCreateTimerTask+0x84>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d021      	beq.n	8007c7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c3e:	1d3a      	adds	r2, r7, #4
 8007c40:	f107 0108 	add.w	r1, r7, #8
 8007c44:	f107 030c 	add.w	r3, r7, #12
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fe f85f 	bl	8005d0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007c4e:	6879      	ldr	r1, [r7, #4]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	9202      	str	r2, [sp, #8]
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	2302      	movs	r3, #2
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	460a      	mov	r2, r1
 8007c60:	4911      	ldr	r1, [pc, #68]	@ (8007ca8 <xTimerCreateTimerTask+0x88>)
 8007c62:	4812      	ldr	r0, [pc, #72]	@ (8007cac <xTimerCreateTimerTask+0x8c>)
 8007c64:	f7fe ff12 	bl	8006a8c <xTaskCreateStatic>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	4a11      	ldr	r2, [pc, #68]	@ (8007cb0 <xTimerCreateTimerTask+0x90>)
 8007c6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c6e:	4b10      	ldr	r3, [pc, #64]	@ (8007cb0 <xTimerCreateTimerTask+0x90>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007c76:	2301      	movs	r3, #1
 8007c78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10b      	bne.n	8007c98 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	613b      	str	r3, [r7, #16]
}
 8007c92:	bf00      	nop
 8007c94:	bf00      	nop
 8007c96:	e7fd      	b.n	8007c94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007c98:	697b      	ldr	r3, [r7, #20]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20001484 	.word	0x20001484
 8007ca8:	0800a0e8 	.word	0x0800a0e8
 8007cac:	08007f29 	.word	0x08007f29
 8007cb0:	20001488 	.word	0x20001488

08007cb4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b088      	sub	sp, #32
 8007cb8:	af02      	add	r7, sp, #8
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
 8007cc0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007cc2:	202c      	movs	r0, #44	@ 0x2c
 8007cc4:	f000 fe42 	bl	800894c <pvPortMalloc>
 8007cc8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00d      	beq.n	8007cec <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	9301      	str	r3, [sp, #4]
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	68b9      	ldr	r1, [r7, #8]
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 f845 	bl	8007d76 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007cec:	697b      	ldr	r3, [r7, #20]
	}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3718      	adds	r7, #24
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b08a      	sub	sp, #40	@ 0x28
 8007cfa:	af02      	add	r7, sp, #8
 8007cfc:	60f8      	str	r0, [r7, #12]
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	607a      	str	r2, [r7, #4]
 8007d02:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007d04:	232c      	movs	r3, #44	@ 0x2c
 8007d06:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	2b2c      	cmp	r3, #44	@ 0x2c
 8007d0c:	d00b      	beq.n	8007d26 <xTimerCreateStatic+0x30>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	61bb      	str	r3, [r7, #24]
}
 8007d20:	bf00      	nop
 8007d22:	bf00      	nop
 8007d24:	e7fd      	b.n	8007d22 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007d26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10b      	bne.n	8007d46 <xTimerCreateStatic+0x50>
	__asm volatile
 8007d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	617b      	str	r3, [r7, #20]
}
 8007d40:	bf00      	nop
 8007d42:	bf00      	nop
 8007d44:	e7fd      	b.n	8007d42 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d48:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00d      	beq.n	8007d6c <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	2202      	movs	r2, #2
 8007d54:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	9301      	str	r3, [sp, #4]
 8007d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	68b9      	ldr	r1, [r7, #8]
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f000 f805 	bl	8007d76 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007d6c:	69fb      	ldr	r3, [r7, #28]
	}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3720      	adds	r7, #32
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b086      	sub	sp, #24
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	60f8      	str	r0, [r7, #12]
 8007d7e:	60b9      	str	r1, [r7, #8]
 8007d80:	607a      	str	r2, [r7, #4]
 8007d82:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10b      	bne.n	8007da2 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8007d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	617b      	str	r3, [r7, #20]
}
 8007d9c:	bf00      	nop
 8007d9e:	bf00      	nop
 8007da0:	e7fd      	b.n	8007d9e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d01e      	beq.n	8007de6 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007da8:	f000 faf2 	bl	8008390 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc0:	6a3a      	ldr	r2, [r7, #32]
 8007dc2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fd ffd9 	bl	8005d80 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d008      	beq.n	8007de6 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007dda:	f043 0304 	orr.w	r3, r3, #4
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007de6:	bf00      	nop
 8007de8:	3718      	adds	r7, #24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
	...

08007df0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b08a      	sub	sp, #40	@ 0x28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10b      	bne.n	8007e20 <xTimerGenericCommand+0x30>
	__asm volatile
 8007e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e0c:	f383 8811 	msr	BASEPRI, r3
 8007e10:	f3bf 8f6f 	isb	sy
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	623b      	str	r3, [r7, #32]
}
 8007e1a:	bf00      	nop
 8007e1c:	bf00      	nop
 8007e1e:	e7fd      	b.n	8007e1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e20:	4b19      	ldr	r3, [pc, #100]	@ (8007e88 <xTimerGenericCommand+0x98>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d02a      	beq.n	8007e7e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2b05      	cmp	r3, #5
 8007e38:	dc18      	bgt.n	8007e6c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e3a:	f7ff fc1b 	bl	8007674 <xTaskGetSchedulerState>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d109      	bne.n	8007e58 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e44:	4b10      	ldr	r3, [pc, #64]	@ (8007e88 <xTimerGenericCommand+0x98>)
 8007e46:	6818      	ldr	r0, [r3, #0]
 8007e48:	f107 0110 	add.w	r1, r7, #16
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e50:	f7fe f9de 	bl	8006210 <xQueueGenericSend>
 8007e54:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e56:	e012      	b.n	8007e7e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e58:	4b0b      	ldr	r3, [pc, #44]	@ (8007e88 <xTimerGenericCommand+0x98>)
 8007e5a:	6818      	ldr	r0, [r3, #0]
 8007e5c:	f107 0110 	add.w	r1, r7, #16
 8007e60:	2300      	movs	r3, #0
 8007e62:	2200      	movs	r2, #0
 8007e64:	f7fe f9d4 	bl	8006210 <xQueueGenericSend>
 8007e68:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e6a:	e008      	b.n	8007e7e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e6c:	4b06      	ldr	r3, [pc, #24]	@ (8007e88 <xTimerGenericCommand+0x98>)
 8007e6e:	6818      	ldr	r0, [r3, #0]
 8007e70:	f107 0110 	add.w	r1, r7, #16
 8007e74:	2300      	movs	r3, #0
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	f7fe facc 	bl	8006414 <xQueueGenericSendFromISR>
 8007e7c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3728      	adds	r7, #40	@ 0x28
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	20001484 	.word	0x20001484

08007e8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b088      	sub	sp, #32
 8007e90:	af02      	add	r7, sp, #8
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e96:	4b23      	ldr	r3, [pc, #140]	@ (8007f24 <prvProcessExpiredTimer+0x98>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7fd ffd5 	bl	8005e54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007eb0:	f003 0304 	and.w	r3, r3, #4
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d023      	beq.n	8007f00 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	699a      	ldr	r2, [r3, #24]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	18d1      	adds	r1, r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	6978      	ldr	r0, [r7, #20]
 8007ec6:	f000 f8d5 	bl	8008074 <prvInsertTimerInActiveList>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d020      	beq.n	8007f12 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	2100      	movs	r1, #0
 8007eda:	6978      	ldr	r0, [r7, #20]
 8007edc:	f7ff ff88 	bl	8007df0 <xTimerGenericCommand>
 8007ee0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d114      	bne.n	8007f12 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	60fb      	str	r3, [r7, #12]
}
 8007efa:	bf00      	nop
 8007efc:	bf00      	nop
 8007efe:	e7fd      	b.n	8007efc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f06:	f023 0301 	bic.w	r3, r3, #1
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	6978      	ldr	r0, [r7, #20]
 8007f18:	4798      	blx	r3
}
 8007f1a:	bf00      	nop
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	2000147c 	.word	0x2000147c

08007f28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f30:	f107 0308 	add.w	r3, r7, #8
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 f859 	bl	8007fec <prvGetNextExpireTime>
 8007f3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	4619      	mov	r1, r3
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 f805 	bl	8007f50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f46:	f000 f8d7 	bl	80080f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f4a:	bf00      	nop
 8007f4c:	e7f0      	b.n	8007f30 <prvTimerTask+0x8>
	...

08007f50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f5a:	f7fe ffa5 	bl	8006ea8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f5e:	f107 0308 	add.w	r3, r7, #8
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 f866 	bl	8008034 <prvSampleTimeNow>
 8007f68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d130      	bne.n	8007fd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10a      	bne.n	8007f8c <prvProcessTimerOrBlockTask+0x3c>
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d806      	bhi.n	8007f8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f7e:	f7fe ffa1 	bl	8006ec4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f82:	68f9      	ldr	r1, [r7, #12]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7ff ff81 	bl	8007e8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007f8a:	e024      	b.n	8007fd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d008      	beq.n	8007fa4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f92:	4b13      	ldr	r3, [pc, #76]	@ (8007fe0 <prvProcessTimerOrBlockTask+0x90>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <prvProcessTimerOrBlockTask+0x50>
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e000      	b.n	8007fa2 <prvProcessTimerOrBlockTask+0x52>
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8007fe4 <prvProcessTimerOrBlockTask+0x94>)
 8007fa6:	6818      	ldr	r0, [r3, #0]
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	f7fe fd37 	bl	8006a24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007fb6:	f7fe ff85 	bl	8006ec4 <xTaskResumeAll>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10a      	bne.n	8007fd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007fc0:	4b09      	ldr	r3, [pc, #36]	@ (8007fe8 <prvProcessTimerOrBlockTask+0x98>)
 8007fc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	f3bf 8f6f 	isb	sy
}
 8007fd0:	e001      	b.n	8007fd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007fd2:	f7fe ff77 	bl	8006ec4 <xTaskResumeAll>
}
 8007fd6:	bf00      	nop
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20001480 	.word	0x20001480
 8007fe4:	20001484 	.word	0x20001484
 8007fe8:	e000ed04 	.word	0xe000ed04

08007fec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8008030 <prvGetNextExpireTime+0x44>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <prvGetNextExpireTime+0x16>
 8007ffe:	2201      	movs	r2, #1
 8008000:	e000      	b.n	8008004 <prvGetNextExpireTime+0x18>
 8008002:	2200      	movs	r2, #0
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d105      	bne.n	800801c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008010:	4b07      	ldr	r3, [pc, #28]	@ (8008030 <prvGetNextExpireTime+0x44>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	60fb      	str	r3, [r7, #12]
 800801a:	e001      	b.n	8008020 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008020:	68fb      	ldr	r3, [r7, #12]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	2000147c 	.word	0x2000147c

08008034 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800803c:	f7fe ffe0 	bl	8007000 <xTaskGetTickCount>
 8008040:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008042:	4b0b      	ldr	r3, [pc, #44]	@ (8008070 <prvSampleTimeNow+0x3c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	429a      	cmp	r2, r3
 800804a:	d205      	bcs.n	8008058 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800804c:	f000 f93a 	bl	80082c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	e002      	b.n	800805e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800805e:	4a04      	ldr	r2, [pc, #16]	@ (8008070 <prvSampleTimeNow+0x3c>)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008064:	68fb      	ldr	r3, [r7, #12]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	2000148c 	.word	0x2000148c

08008074 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
 8008080:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008082:	2300      	movs	r3, #0
 8008084:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	429a      	cmp	r2, r3
 8008098:	d812      	bhi.n	80080c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	1ad2      	subs	r2, r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d302      	bcc.n	80080ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80080a8:	2301      	movs	r3, #1
 80080aa:	617b      	str	r3, [r7, #20]
 80080ac:	e01b      	b.n	80080e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80080ae:	4b10      	ldr	r3, [pc, #64]	@ (80080f0 <prvInsertTimerInActiveList+0x7c>)
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3304      	adds	r3, #4
 80080b6:	4619      	mov	r1, r3
 80080b8:	4610      	mov	r0, r2
 80080ba:	f7fd fe92 	bl	8005de2 <vListInsert>
 80080be:	e012      	b.n	80080e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d206      	bcs.n	80080d6 <prvInsertTimerInActiveList+0x62>
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d302      	bcc.n	80080d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80080d0:	2301      	movs	r3, #1
 80080d2:	617b      	str	r3, [r7, #20]
 80080d4:	e007      	b.n	80080e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080d6:	4b07      	ldr	r3, [pc, #28]	@ (80080f4 <prvInsertTimerInActiveList+0x80>)
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3304      	adds	r3, #4
 80080de:	4619      	mov	r1, r3
 80080e0:	4610      	mov	r0, r2
 80080e2:	f7fd fe7e 	bl	8005de2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80080e6:	697b      	ldr	r3, [r7, #20]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	20001480 	.word	0x20001480
 80080f4:	2000147c 	.word	0x2000147c

080080f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b08e      	sub	sp, #56	@ 0x38
 80080fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080fe:	e0ce      	b.n	800829e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	da19      	bge.n	800813a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008106:	1d3b      	adds	r3, r7, #4
 8008108:	3304      	adds	r3, #4
 800810a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800810c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10b      	bne.n	800812a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	61fb      	str	r3, [r7, #28]
}
 8008124:	bf00      	nop
 8008126:	bf00      	nop
 8008128:	e7fd      	b.n	8008126 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800812a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008130:	6850      	ldr	r0, [r2, #4]
 8008132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008134:	6892      	ldr	r2, [r2, #8]
 8008136:	4611      	mov	r1, r2
 8008138:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	f2c0 80ae 	blt.w	800829e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d004      	beq.n	8008158 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800814e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008150:	3304      	adds	r3, #4
 8008152:	4618      	mov	r0, r3
 8008154:	f7fd fe7e 	bl	8005e54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008158:	463b      	mov	r3, r7
 800815a:	4618      	mov	r0, r3
 800815c:	f7ff ff6a 	bl	8008034 <prvSampleTimeNow>
 8008160:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b09      	cmp	r3, #9
 8008166:	f200 8097 	bhi.w	8008298 <prvProcessReceivedCommands+0x1a0>
 800816a:	a201      	add	r2, pc, #4	@ (adr r2, 8008170 <prvProcessReceivedCommands+0x78>)
 800816c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008170:	08008199 	.word	0x08008199
 8008174:	08008199 	.word	0x08008199
 8008178:	08008199 	.word	0x08008199
 800817c:	0800820f 	.word	0x0800820f
 8008180:	08008223 	.word	0x08008223
 8008184:	0800826f 	.word	0x0800826f
 8008188:	08008199 	.word	0x08008199
 800818c:	08008199 	.word	0x08008199
 8008190:	0800820f 	.word	0x0800820f
 8008194:	08008223 	.word	0x08008223
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800819e:	f043 0301 	orr.w	r3, r3, #1
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	18d1      	adds	r1, r2, r3
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081b8:	f7ff ff5c 	bl	8008074 <prvInsertTimerInActiveList>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d06c      	beq.n	800829c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081d0:	f003 0304 	and.w	r3, r3, #4
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d061      	beq.n	800829c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	441a      	add	r2, r3
 80081e0:	2300      	movs	r3, #0
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	2300      	movs	r3, #0
 80081e6:	2100      	movs	r1, #0
 80081e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081ea:	f7ff fe01 	bl	8007df0 <xTimerGenericCommand>
 80081ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d152      	bne.n	800829c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	61bb      	str	r3, [r7, #24]
}
 8008208:	bf00      	nop
 800820a:	bf00      	nop
 800820c:	e7fd      	b.n	800820a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800820e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008214:	f023 0301 	bic.w	r3, r3, #1
 8008218:	b2da      	uxtb	r2, r3
 800821a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008220:	e03d      	b.n	800829e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008224:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008228:	f043 0301 	orr.w	r3, r3, #1
 800822c:	b2da      	uxtb	r2, r3
 800822e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008230:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008238:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800823a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10b      	bne.n	800825a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	617b      	str	r3, [r7, #20]
}
 8008254:	bf00      	nop
 8008256:	bf00      	nop
 8008258:	e7fd      	b.n	8008256 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800825a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825c:	699a      	ldr	r2, [r3, #24]
 800825e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008260:	18d1      	adds	r1, r2, r3
 8008262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008266:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008268:	f7ff ff04 	bl	8008074 <prvInsertTimerInActiveList>
					break;
 800826c:	e017      	b.n	800829e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800826e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008270:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008274:	f003 0302 	and.w	r3, r3, #2
 8008278:	2b00      	cmp	r3, #0
 800827a:	d103      	bne.n	8008284 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800827c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800827e:	f000 fc33 	bl	8008ae8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008282:	e00c      	b.n	800829e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008286:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800828a:	f023 0301 	bic.w	r3, r3, #1
 800828e:	b2da      	uxtb	r2, r3
 8008290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008292:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008296:	e002      	b.n	800829e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008298:	bf00      	nop
 800829a:	e000      	b.n	800829e <prvProcessReceivedCommands+0x1a6>
					break;
 800829c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800829e:	4b08      	ldr	r3, [pc, #32]	@ (80082c0 <prvProcessReceivedCommands+0x1c8>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	1d39      	adds	r1, r7, #4
 80082a4:	2200      	movs	r2, #0
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7fe f952 	bl	8006550 <xQueueReceive>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f47f af26 	bne.w	8008100 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop
 80082b8:	3730      	adds	r7, #48	@ 0x30
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	20001484 	.word	0x20001484

080082c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082ca:	e049      	b.n	8008360 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082cc:	4b2e      	ldr	r3, [pc, #184]	@ (8008388 <prvSwitchTimerLists+0xc4>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082d6:	4b2c      	ldr	r3, [pc, #176]	@ (8008388 <prvSwitchTimerLists+0xc4>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3304      	adds	r3, #4
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7fd fdb5 	bl	8005e54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d02f      	beq.n	8008360 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	693a      	ldr	r2, [r7, #16]
 8008306:	4413      	add	r3, r2
 8008308:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	429a      	cmp	r2, r3
 8008310:	d90e      	bls.n	8008330 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800831e:	4b1a      	ldr	r3, [pc, #104]	@ (8008388 <prvSwitchTimerLists+0xc4>)
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	3304      	adds	r3, #4
 8008326:	4619      	mov	r1, r3
 8008328:	4610      	mov	r0, r2
 800832a:	f7fd fd5a 	bl	8005de2 <vListInsert>
 800832e:	e017      	b.n	8008360 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008330:	2300      	movs	r3, #0
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	2300      	movs	r3, #0
 8008336:	693a      	ldr	r2, [r7, #16]
 8008338:	2100      	movs	r1, #0
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f7ff fd58 	bl	8007df0 <xTimerGenericCommand>
 8008340:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10b      	bne.n	8008360 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800834c:	f383 8811 	msr	BASEPRI, r3
 8008350:	f3bf 8f6f 	isb	sy
 8008354:	f3bf 8f4f 	dsb	sy
 8008358:	603b      	str	r3, [r7, #0]
}
 800835a:	bf00      	nop
 800835c:	bf00      	nop
 800835e:	e7fd      	b.n	800835c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008360:	4b09      	ldr	r3, [pc, #36]	@ (8008388 <prvSwitchTimerLists+0xc4>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1b0      	bne.n	80082cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800836a:	4b07      	ldr	r3, [pc, #28]	@ (8008388 <prvSwitchTimerLists+0xc4>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008370:	4b06      	ldr	r3, [pc, #24]	@ (800838c <prvSwitchTimerLists+0xc8>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a04      	ldr	r2, [pc, #16]	@ (8008388 <prvSwitchTimerLists+0xc4>)
 8008376:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008378:	4a04      	ldr	r2, [pc, #16]	@ (800838c <prvSwitchTimerLists+0xc8>)
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	6013      	str	r3, [r2, #0]
}
 800837e:	bf00      	nop
 8008380:	3718      	adds	r7, #24
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	2000147c 	.word	0x2000147c
 800838c:	20001480 	.word	0x20001480

08008390 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008396:	f000 f9b7 	bl	8008708 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800839a:	4b15      	ldr	r3, [pc, #84]	@ (80083f0 <prvCheckForValidListAndQueue+0x60>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d120      	bne.n	80083e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80083a2:	4814      	ldr	r0, [pc, #80]	@ (80083f4 <prvCheckForValidListAndQueue+0x64>)
 80083a4:	f7fd fccc 	bl	8005d40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80083a8:	4813      	ldr	r0, [pc, #76]	@ (80083f8 <prvCheckForValidListAndQueue+0x68>)
 80083aa:	f7fd fcc9 	bl	8005d40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80083ae:	4b13      	ldr	r3, [pc, #76]	@ (80083fc <prvCheckForValidListAndQueue+0x6c>)
 80083b0:	4a10      	ldr	r2, [pc, #64]	@ (80083f4 <prvCheckForValidListAndQueue+0x64>)
 80083b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80083b4:	4b12      	ldr	r3, [pc, #72]	@ (8008400 <prvCheckForValidListAndQueue+0x70>)
 80083b6:	4a10      	ldr	r2, [pc, #64]	@ (80083f8 <prvCheckForValidListAndQueue+0x68>)
 80083b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80083ba:	2300      	movs	r3, #0
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	4b11      	ldr	r3, [pc, #68]	@ (8008404 <prvCheckForValidListAndQueue+0x74>)
 80083c0:	4a11      	ldr	r2, [pc, #68]	@ (8008408 <prvCheckForValidListAndQueue+0x78>)
 80083c2:	2110      	movs	r1, #16
 80083c4:	200a      	movs	r0, #10
 80083c6:	f7fd fdd9 	bl	8005f7c <xQueueGenericCreateStatic>
 80083ca:	4603      	mov	r3, r0
 80083cc:	4a08      	ldr	r2, [pc, #32]	@ (80083f0 <prvCheckForValidListAndQueue+0x60>)
 80083ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80083d0:	4b07      	ldr	r3, [pc, #28]	@ (80083f0 <prvCheckForValidListAndQueue+0x60>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d005      	beq.n	80083e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80083d8:	4b05      	ldr	r3, [pc, #20]	@ (80083f0 <prvCheckForValidListAndQueue+0x60>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	490b      	ldr	r1, [pc, #44]	@ (800840c <prvCheckForValidListAndQueue+0x7c>)
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fe facc 	bl	800697c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083e4:	f000 f9c2 	bl	800876c <vPortExitCritical>
}
 80083e8:	bf00      	nop
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	20001484 	.word	0x20001484
 80083f4:	20001454 	.word	0x20001454
 80083f8:	20001468 	.word	0x20001468
 80083fc:	2000147c 	.word	0x2000147c
 8008400:	20001480 	.word	0x20001480
 8008404:	20001530 	.word	0x20001530
 8008408:	20001490 	.word	0x20001490
 800840c:	0800a0f0 	.word	0x0800a0f0

08008410 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d10b      	bne.n	800843a <xTimerIsTimerActive+0x2a>
	__asm volatile
 8008422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008426:	f383 8811 	msr	BASEPRI, r3
 800842a:	f3bf 8f6f 	isb	sy
 800842e:	f3bf 8f4f 	dsb	sy
 8008432:	60fb      	str	r3, [r7, #12]
}
 8008434:	bf00      	nop
 8008436:	bf00      	nop
 8008438:	e7fd      	b.n	8008436 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800843a:	f000 f965 	bl	8008708 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008444:	f003 0301 	and.w	r3, r3, #1
 8008448:	2b00      	cmp	r3, #0
 800844a:	d102      	bne.n	8008452 <xTimerIsTimerActive+0x42>
		{
			xReturn = pdFALSE;
 800844c:	2300      	movs	r3, #0
 800844e:	617b      	str	r3, [r7, #20]
 8008450:	e001      	b.n	8008456 <xTimerIsTimerActive+0x46>
		}
		else
		{
			xReturn = pdTRUE;
 8008452:	2301      	movs	r3, #1
 8008454:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8008456:	f000 f989 	bl	800876c <vPortExitCritical>

	return xReturn;
 800845a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800845c:	4618      	mov	r0, r3
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10b      	bne.n	800848e <pvTimerGetTimerID+0x2a>
	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	60fb      	str	r3, [r7, #12]
}
 8008488:	bf00      	nop
 800848a:	bf00      	nop
 800848c:	e7fd      	b.n	800848a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800848e:	f000 f93b 	bl	8008708 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008498:	f000 f968 	bl	800876c <vPortExitCritical>

	return pvReturn;
 800849c:	693b      	ldr	r3, [r7, #16]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3718      	adds	r7, #24
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
	...

080084a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	3b04      	subs	r3, #4
 80084b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80084c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3b04      	subs	r3, #4
 80084c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f023 0201 	bic.w	r2, r3, #1
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	3b04      	subs	r3, #4
 80084d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084d8:	4a0c      	ldr	r2, [pc, #48]	@ (800850c <pxPortInitialiseStack+0x64>)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	3b14      	subs	r3, #20
 80084e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	3b04      	subs	r3, #4
 80084ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f06f 0202 	mvn.w	r2, #2
 80084f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	3b20      	subs	r3, #32
 80084fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084fe:	68fb      	ldr	r3, [r7, #12]
}
 8008500:	4618      	mov	r0, r3
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	08008511 	.word	0x08008511

08008510 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008516:	2300      	movs	r3, #0
 8008518:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800851a:	4b13      	ldr	r3, [pc, #76]	@ (8008568 <prvTaskExitError+0x58>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008522:	d00b      	beq.n	800853c <prvTaskExitError+0x2c>
	__asm volatile
 8008524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008528:	f383 8811 	msr	BASEPRI, r3
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	60fb      	str	r3, [r7, #12]
}
 8008536:	bf00      	nop
 8008538:	bf00      	nop
 800853a:	e7fd      	b.n	8008538 <prvTaskExitError+0x28>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	60bb      	str	r3, [r7, #8]
}
 800854e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008550:	bf00      	nop
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d0fc      	beq.n	8008552 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008558:	bf00      	nop
 800855a:	bf00      	nop
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	2000000c 	.word	0x2000000c
 800856c:	00000000 	.word	0x00000000

08008570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008570:	4b07      	ldr	r3, [pc, #28]	@ (8008590 <pxCurrentTCBConst2>)
 8008572:	6819      	ldr	r1, [r3, #0]
 8008574:	6808      	ldr	r0, [r1, #0]
 8008576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857a:	f380 8809 	msr	PSP, r0
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f04f 0000 	mov.w	r0, #0
 8008586:	f380 8811 	msr	BASEPRI, r0
 800858a:	4770      	bx	lr
 800858c:	f3af 8000 	nop.w

08008590 <pxCurrentTCBConst2>:
 8008590:	20000f54 	.word	0x20000f54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop

08008598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008598:	4808      	ldr	r0, [pc, #32]	@ (80085bc <prvPortStartFirstTask+0x24>)
 800859a:	6800      	ldr	r0, [r0, #0]
 800859c:	6800      	ldr	r0, [r0, #0]
 800859e:	f380 8808 	msr	MSP, r0
 80085a2:	f04f 0000 	mov.w	r0, #0
 80085a6:	f380 8814 	msr	CONTROL, r0
 80085aa:	b662      	cpsie	i
 80085ac:	b661      	cpsie	f
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	df00      	svc	0
 80085b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085ba:	bf00      	nop
 80085bc:	e000ed08 	.word	0xe000ed08

080085c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085c6:	4b47      	ldr	r3, [pc, #284]	@ (80086e4 <xPortStartScheduler+0x124>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a47      	ldr	r2, [pc, #284]	@ (80086e8 <xPortStartScheduler+0x128>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d10b      	bne.n	80085e8 <xPortStartScheduler+0x28>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	613b      	str	r3, [r7, #16]
}
 80085e2:	bf00      	nop
 80085e4:	bf00      	nop
 80085e6:	e7fd      	b.n	80085e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085e8:	4b3e      	ldr	r3, [pc, #248]	@ (80086e4 <xPortStartScheduler+0x124>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a3f      	ldr	r2, [pc, #252]	@ (80086ec <xPortStartScheduler+0x12c>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d10b      	bne.n	800860a <xPortStartScheduler+0x4a>
	__asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	60fb      	str	r3, [r7, #12]
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop
 8008608:	e7fd      	b.n	8008606 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800860a:	4b39      	ldr	r3, [pc, #228]	@ (80086f0 <xPortStartScheduler+0x130>)
 800860c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	b2db      	uxtb	r3, r3
 8008614:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	22ff      	movs	r2, #255	@ 0xff
 800861a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	b2db      	uxtb	r3, r3
 8008622:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008624:	78fb      	ldrb	r3, [r7, #3]
 8008626:	b2db      	uxtb	r3, r3
 8008628:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800862c:	b2da      	uxtb	r2, r3
 800862e:	4b31      	ldr	r3, [pc, #196]	@ (80086f4 <xPortStartScheduler+0x134>)
 8008630:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008632:	4b31      	ldr	r3, [pc, #196]	@ (80086f8 <xPortStartScheduler+0x138>)
 8008634:	2207      	movs	r2, #7
 8008636:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008638:	e009      	b.n	800864e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800863a:	4b2f      	ldr	r3, [pc, #188]	@ (80086f8 <xPortStartScheduler+0x138>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3b01      	subs	r3, #1
 8008640:	4a2d      	ldr	r2, [pc, #180]	@ (80086f8 <xPortStartScheduler+0x138>)
 8008642:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008644:	78fb      	ldrb	r3, [r7, #3]
 8008646:	b2db      	uxtb	r3, r3
 8008648:	005b      	lsls	r3, r3, #1
 800864a:	b2db      	uxtb	r3, r3
 800864c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800864e:	78fb      	ldrb	r3, [r7, #3]
 8008650:	b2db      	uxtb	r3, r3
 8008652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008656:	2b80      	cmp	r3, #128	@ 0x80
 8008658:	d0ef      	beq.n	800863a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800865a:	4b27      	ldr	r3, [pc, #156]	@ (80086f8 <xPortStartScheduler+0x138>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f1c3 0307 	rsb	r3, r3, #7
 8008662:	2b04      	cmp	r3, #4
 8008664:	d00b      	beq.n	800867e <xPortStartScheduler+0xbe>
	__asm volatile
 8008666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	60bb      	str	r3, [r7, #8]
}
 8008678:	bf00      	nop
 800867a:	bf00      	nop
 800867c:	e7fd      	b.n	800867a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800867e:	4b1e      	ldr	r3, [pc, #120]	@ (80086f8 <xPortStartScheduler+0x138>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	021b      	lsls	r3, r3, #8
 8008684:	4a1c      	ldr	r2, [pc, #112]	@ (80086f8 <xPortStartScheduler+0x138>)
 8008686:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008688:	4b1b      	ldr	r3, [pc, #108]	@ (80086f8 <xPortStartScheduler+0x138>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008690:	4a19      	ldr	r2, [pc, #100]	@ (80086f8 <xPortStartScheduler+0x138>)
 8008692:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	b2da      	uxtb	r2, r3
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800869c:	4b17      	ldr	r3, [pc, #92]	@ (80086fc <xPortStartScheduler+0x13c>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a16      	ldr	r2, [pc, #88]	@ (80086fc <xPortStartScheduler+0x13c>)
 80086a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80086a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086a8:	4b14      	ldr	r3, [pc, #80]	@ (80086fc <xPortStartScheduler+0x13c>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a13      	ldr	r2, [pc, #76]	@ (80086fc <xPortStartScheduler+0x13c>)
 80086ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80086b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086b4:	f000 f8da 	bl	800886c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086b8:	4b11      	ldr	r3, [pc, #68]	@ (8008700 <xPortStartScheduler+0x140>)
 80086ba:	2200      	movs	r2, #0
 80086bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086be:	f000 f8f9 	bl	80088b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086c2:	4b10      	ldr	r3, [pc, #64]	@ (8008704 <xPortStartScheduler+0x144>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a0f      	ldr	r2, [pc, #60]	@ (8008704 <xPortStartScheduler+0x144>)
 80086c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80086cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086ce:	f7ff ff63 	bl	8008598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086d2:	f7fe fd5f 	bl	8007194 <vTaskSwitchContext>
	prvTaskExitError();
 80086d6:	f7ff ff1b 	bl	8008510 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3718      	adds	r7, #24
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	e000ed00 	.word	0xe000ed00
 80086e8:	410fc271 	.word	0x410fc271
 80086ec:	410fc270 	.word	0x410fc270
 80086f0:	e000e400 	.word	0xe000e400
 80086f4:	20001580 	.word	0x20001580
 80086f8:	20001584 	.word	0x20001584
 80086fc:	e000ed20 	.word	0xe000ed20
 8008700:	2000000c 	.word	0x2000000c
 8008704:	e000ef34 	.word	0xe000ef34

08008708 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	607b      	str	r3, [r7, #4]
}
 8008720:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008722:	4b10      	ldr	r3, [pc, #64]	@ (8008764 <vPortEnterCritical+0x5c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3301      	adds	r3, #1
 8008728:	4a0e      	ldr	r2, [pc, #56]	@ (8008764 <vPortEnterCritical+0x5c>)
 800872a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800872c:	4b0d      	ldr	r3, [pc, #52]	@ (8008764 <vPortEnterCritical+0x5c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d110      	bne.n	8008756 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008734:	4b0c      	ldr	r3, [pc, #48]	@ (8008768 <vPortEnterCritical+0x60>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00b      	beq.n	8008756 <vPortEnterCritical+0x4e>
	__asm volatile
 800873e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	603b      	str	r3, [r7, #0]
}
 8008750:	bf00      	nop
 8008752:	bf00      	nop
 8008754:	e7fd      	b.n	8008752 <vPortEnterCritical+0x4a>
	}
}
 8008756:	bf00      	nop
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	2000000c 	.word	0x2000000c
 8008768:	e000ed04 	.word	0xe000ed04

0800876c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008772:	4b12      	ldr	r3, [pc, #72]	@ (80087bc <vPortExitCritical+0x50>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10b      	bne.n	8008792 <vPortExitCritical+0x26>
	__asm volatile
 800877a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	607b      	str	r3, [r7, #4]
}
 800878c:	bf00      	nop
 800878e:	bf00      	nop
 8008790:	e7fd      	b.n	800878e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008792:	4b0a      	ldr	r3, [pc, #40]	@ (80087bc <vPortExitCritical+0x50>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	3b01      	subs	r3, #1
 8008798:	4a08      	ldr	r2, [pc, #32]	@ (80087bc <vPortExitCritical+0x50>)
 800879a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800879c:	4b07      	ldr	r3, [pc, #28]	@ (80087bc <vPortExitCritical+0x50>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d105      	bne.n	80087b0 <vPortExitCritical+0x44>
 80087a4:	2300      	movs	r3, #0
 80087a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	f383 8811 	msr	BASEPRI, r3
}
 80087ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr
 80087bc:	2000000c 	.word	0x2000000c

080087c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087c0:	f3ef 8009 	mrs	r0, PSP
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	4b15      	ldr	r3, [pc, #84]	@ (8008820 <pxCurrentTCBConst>)
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	f01e 0f10 	tst.w	lr, #16
 80087d0:	bf08      	it	eq
 80087d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087da:	6010      	str	r0, [r2, #0]
 80087dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80087e4:	f380 8811 	msr	BASEPRI, r0
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f7fe fcd0 	bl	8007194 <vTaskSwitchContext>
 80087f4:	f04f 0000 	mov.w	r0, #0
 80087f8:	f380 8811 	msr	BASEPRI, r0
 80087fc:	bc09      	pop	{r0, r3}
 80087fe:	6819      	ldr	r1, [r3, #0]
 8008800:	6808      	ldr	r0, [r1, #0]
 8008802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008806:	f01e 0f10 	tst.w	lr, #16
 800880a:	bf08      	it	eq
 800880c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008810:	f380 8809 	msr	PSP, r0
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	f3af 8000 	nop.w

08008820 <pxCurrentTCBConst>:
 8008820:	20000f54 	.word	0x20000f54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop

08008828 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	607b      	str	r3, [r7, #4]
}
 8008840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008842:	f7fe fbed 	bl	8007020 <xTaskIncrementTick>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d003      	beq.n	8008854 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800884c:	4b06      	ldr	r3, [pc, #24]	@ (8008868 <xPortSysTickHandler+0x40>)
 800884e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	2300      	movs	r3, #0
 8008856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	f383 8811 	msr	BASEPRI, r3
}
 800885e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008860:	bf00      	nop
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	e000ed04 	.word	0xe000ed04

0800886c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800886c:	b480      	push	{r7}
 800886e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008870:	4b0b      	ldr	r3, [pc, #44]	@ (80088a0 <vPortSetupTimerInterrupt+0x34>)
 8008872:	2200      	movs	r2, #0
 8008874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008876:	4b0b      	ldr	r3, [pc, #44]	@ (80088a4 <vPortSetupTimerInterrupt+0x38>)
 8008878:	2200      	movs	r2, #0
 800887a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800887c:	4b0a      	ldr	r3, [pc, #40]	@ (80088a8 <vPortSetupTimerInterrupt+0x3c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a0a      	ldr	r2, [pc, #40]	@ (80088ac <vPortSetupTimerInterrupt+0x40>)
 8008882:	fba2 2303 	umull	r2, r3, r2, r3
 8008886:	099b      	lsrs	r3, r3, #6
 8008888:	4a09      	ldr	r2, [pc, #36]	@ (80088b0 <vPortSetupTimerInterrupt+0x44>)
 800888a:	3b01      	subs	r3, #1
 800888c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800888e:	4b04      	ldr	r3, [pc, #16]	@ (80088a0 <vPortSetupTimerInterrupt+0x34>)
 8008890:	2207      	movs	r2, #7
 8008892:	601a      	str	r2, [r3, #0]
}
 8008894:	bf00      	nop
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	e000e010 	.word	0xe000e010
 80088a4:	e000e018 	.word	0xe000e018
 80088a8:	20000000 	.word	0x20000000
 80088ac:	10624dd3 	.word	0x10624dd3
 80088b0:	e000e014 	.word	0xe000e014

080088b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80088c4 <vPortEnableVFP+0x10>
 80088b8:	6801      	ldr	r1, [r0, #0]
 80088ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80088be:	6001      	str	r1, [r0, #0]
 80088c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088c2:	bf00      	nop
 80088c4:	e000ed88 	.word	0xe000ed88

080088c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088ce:	f3ef 8305 	mrs	r3, IPSR
 80088d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2b0f      	cmp	r3, #15
 80088d8:	d915      	bls.n	8008906 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088da:	4a18      	ldr	r2, [pc, #96]	@ (800893c <vPortValidateInterruptPriority+0x74>)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4413      	add	r3, r2
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088e4:	4b16      	ldr	r3, [pc, #88]	@ (8008940 <vPortValidateInterruptPriority+0x78>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	7afa      	ldrb	r2, [r7, #11]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d20b      	bcs.n	8008906 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	607b      	str	r3, [r7, #4]
}
 8008900:	bf00      	nop
 8008902:	bf00      	nop
 8008904:	e7fd      	b.n	8008902 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008906:	4b0f      	ldr	r3, [pc, #60]	@ (8008944 <vPortValidateInterruptPriority+0x7c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800890e:	4b0e      	ldr	r3, [pc, #56]	@ (8008948 <vPortValidateInterruptPriority+0x80>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	429a      	cmp	r2, r3
 8008914:	d90b      	bls.n	800892e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891a:	f383 8811 	msr	BASEPRI, r3
 800891e:	f3bf 8f6f 	isb	sy
 8008922:	f3bf 8f4f 	dsb	sy
 8008926:	603b      	str	r3, [r7, #0]
}
 8008928:	bf00      	nop
 800892a:	bf00      	nop
 800892c:	e7fd      	b.n	800892a <vPortValidateInterruptPriority+0x62>
	}
 800892e:	bf00      	nop
 8008930:	3714      	adds	r7, #20
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	e000e3f0 	.word	0xe000e3f0
 8008940:	20001580 	.word	0x20001580
 8008944:	e000ed0c 	.word	0xe000ed0c
 8008948:	20001584 	.word	0x20001584

0800894c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b08a      	sub	sp, #40	@ 0x28
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008954:	2300      	movs	r3, #0
 8008956:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008958:	f7fe faa6 	bl	8006ea8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800895c:	4b5c      	ldr	r3, [pc, #368]	@ (8008ad0 <pvPortMalloc+0x184>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d101      	bne.n	8008968 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008964:	f000 f924 	bl	8008bb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008968:	4b5a      	ldr	r3, [pc, #360]	@ (8008ad4 <pvPortMalloc+0x188>)
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4013      	ands	r3, r2
 8008970:	2b00      	cmp	r3, #0
 8008972:	f040 8095 	bne.w	8008aa0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d01e      	beq.n	80089ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800897c:	2208      	movs	r2, #8
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4413      	add	r3, r2
 8008982:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f003 0307 	and.w	r3, r3, #7
 800898a:	2b00      	cmp	r3, #0
 800898c:	d015      	beq.n	80089ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f023 0307 	bic.w	r3, r3, #7
 8008994:	3308      	adds	r3, #8
 8008996:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f003 0307 	and.w	r3, r3, #7
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00b      	beq.n	80089ba <pvPortMalloc+0x6e>
	__asm volatile
 80089a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	617b      	str	r3, [r7, #20]
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop
 80089b8:	e7fd      	b.n	80089b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d06f      	beq.n	8008aa0 <pvPortMalloc+0x154>
 80089c0:	4b45      	ldr	r3, [pc, #276]	@ (8008ad8 <pvPortMalloc+0x18c>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d86a      	bhi.n	8008aa0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089ca:	4b44      	ldr	r3, [pc, #272]	@ (8008adc <pvPortMalloc+0x190>)
 80089cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089ce:	4b43      	ldr	r3, [pc, #268]	@ (8008adc <pvPortMalloc+0x190>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089d4:	e004      	b.n	80089e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80089d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d903      	bls.n	80089f2 <pvPortMalloc+0xa6>
 80089ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1f1      	bne.n	80089d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089f2:	4b37      	ldr	r3, [pc, #220]	@ (8008ad0 <pvPortMalloc+0x184>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d051      	beq.n	8008aa0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089fc:	6a3b      	ldr	r3, [r7, #32]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2208      	movs	r2, #8
 8008a02:	4413      	add	r3, r2
 8008a04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	1ad2      	subs	r2, r2, r3
 8008a16:	2308      	movs	r3, #8
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d920      	bls.n	8008a60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4413      	add	r3, r2
 8008a24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	f003 0307 	and.w	r3, r3, #7
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00b      	beq.n	8008a48 <pvPortMalloc+0xfc>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	613b      	str	r3, [r7, #16]
}
 8008a42:	bf00      	nop
 8008a44:	bf00      	nop
 8008a46:	e7fd      	b.n	8008a44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	1ad2      	subs	r2, r2, r3
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a5a:	69b8      	ldr	r0, [r7, #24]
 8008a5c:	f000 f90a 	bl	8008c74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a60:	4b1d      	ldr	r3, [pc, #116]	@ (8008ad8 <pvPortMalloc+0x18c>)
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8008ad8 <pvPortMalloc+0x18c>)
 8008a6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ad8 <pvPortMalloc+0x18c>)
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	4b1b      	ldr	r3, [pc, #108]	@ (8008ae0 <pvPortMalloc+0x194>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d203      	bcs.n	8008a82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a7a:	4b17      	ldr	r3, [pc, #92]	@ (8008ad8 <pvPortMalloc+0x18c>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a18      	ldr	r2, [pc, #96]	@ (8008ae0 <pvPortMalloc+0x194>)
 8008a80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a84:	685a      	ldr	r2, [r3, #4]
 8008a86:	4b13      	ldr	r3, [pc, #76]	@ (8008ad4 <pvPortMalloc+0x188>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	431a      	orrs	r2, r3
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a92:	2200      	movs	r2, #0
 8008a94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a96:	4b13      	ldr	r3, [pc, #76]	@ (8008ae4 <pvPortMalloc+0x198>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	4a11      	ldr	r2, [pc, #68]	@ (8008ae4 <pvPortMalloc+0x198>)
 8008a9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008aa0:	f7fe fa10 	bl	8006ec4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00b      	beq.n	8008ac6 <pvPortMalloc+0x17a>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	60fb      	str	r3, [r7, #12]
}
 8008ac0:	bf00      	nop
 8008ac2:	bf00      	nop
 8008ac4:	e7fd      	b.n	8008ac2 <pvPortMalloc+0x176>
	return pvReturn;
 8008ac6:	69fb      	ldr	r3, [r7, #28]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3728      	adds	r7, #40	@ 0x28
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	20002d00 	.word	0x20002d00
 8008ad4:	20002d14 	.word	0x20002d14
 8008ad8:	20002d04 	.word	0x20002d04
 8008adc:	20002cf8 	.word	0x20002cf8
 8008ae0:	20002d08 	.word	0x20002d08
 8008ae4:	20002d0c 	.word	0x20002d0c

08008ae8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d04f      	beq.n	8008b9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008afa:	2308      	movs	r3, #8
 8008afc:	425b      	negs	r3, r3
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	4413      	add	r3, r2
 8008b02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	4b25      	ldr	r3, [pc, #148]	@ (8008ba4 <vPortFree+0xbc>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4013      	ands	r3, r2
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10b      	bne.n	8008b2e <vPortFree+0x46>
	__asm volatile
 8008b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	60fb      	str	r3, [r7, #12]
}
 8008b28:	bf00      	nop
 8008b2a:	bf00      	nop
 8008b2c:	e7fd      	b.n	8008b2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00b      	beq.n	8008b4e <vPortFree+0x66>
	__asm volatile
 8008b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b3a:	f383 8811 	msr	BASEPRI, r3
 8008b3e:	f3bf 8f6f 	isb	sy
 8008b42:	f3bf 8f4f 	dsb	sy
 8008b46:	60bb      	str	r3, [r7, #8]
}
 8008b48:	bf00      	nop
 8008b4a:	bf00      	nop
 8008b4c:	e7fd      	b.n	8008b4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	4b14      	ldr	r3, [pc, #80]	@ (8008ba4 <vPortFree+0xbc>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4013      	ands	r3, r2
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d01e      	beq.n	8008b9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d11a      	bne.n	8008b9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	4b0e      	ldr	r3, [pc, #56]	@ (8008ba4 <vPortFree+0xbc>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	43db      	mvns	r3, r3
 8008b6e:	401a      	ands	r2, r3
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b74:	f7fe f998 	bl	8006ea8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ba8 <vPortFree+0xc0>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4413      	add	r3, r2
 8008b82:	4a09      	ldr	r2, [pc, #36]	@ (8008ba8 <vPortFree+0xc0>)
 8008b84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b86:	6938      	ldr	r0, [r7, #16]
 8008b88:	f000 f874 	bl	8008c74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b8c:	4b07      	ldr	r3, [pc, #28]	@ (8008bac <vPortFree+0xc4>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	3301      	adds	r3, #1
 8008b92:	4a06      	ldr	r2, [pc, #24]	@ (8008bac <vPortFree+0xc4>)
 8008b94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b96:	f7fe f995 	bl	8006ec4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b9a:	bf00      	nop
 8008b9c:	3718      	adds	r7, #24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	20002d14 	.word	0x20002d14
 8008ba8:	20002d04 	.word	0x20002d04
 8008bac:	20002d10 	.word	0x20002d10

08008bb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008bb6:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008bba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008bbc:	4b27      	ldr	r3, [pc, #156]	@ (8008c5c <prvHeapInit+0xac>)
 8008bbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f003 0307 	and.w	r3, r3, #7
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00c      	beq.n	8008be4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3307      	adds	r3, #7
 8008bce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f023 0307 	bic.w	r3, r3, #7
 8008bd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	4a1f      	ldr	r2, [pc, #124]	@ (8008c5c <prvHeapInit+0xac>)
 8008be0:	4413      	add	r3, r2
 8008be2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008be8:	4a1d      	ldr	r2, [pc, #116]	@ (8008c60 <prvHeapInit+0xb0>)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008bee:	4b1c      	ldr	r3, [pc, #112]	@ (8008c60 <prvHeapInit+0xb0>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008bfc:	2208      	movs	r2, #8
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	1a9b      	subs	r3, r3, r2
 8008c02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f023 0307 	bic.w	r3, r3, #7
 8008c0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	4a15      	ldr	r2, [pc, #84]	@ (8008c64 <prvHeapInit+0xb4>)
 8008c10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c12:	4b14      	ldr	r3, [pc, #80]	@ (8008c64 <prvHeapInit+0xb4>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2200      	movs	r2, #0
 8008c18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c1a:	4b12      	ldr	r3, [pc, #72]	@ (8008c64 <prvHeapInit+0xb4>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	1ad2      	subs	r2, r2, r3
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c30:	4b0c      	ldr	r3, [pc, #48]	@ (8008c64 <prvHeapInit+0xb4>)
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8008c68 <prvHeapInit+0xb8>)
 8008c3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	4a09      	ldr	r2, [pc, #36]	@ (8008c6c <prvHeapInit+0xbc>)
 8008c46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c48:	4b09      	ldr	r3, [pc, #36]	@ (8008c70 <prvHeapInit+0xc0>)
 8008c4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008c4e:	601a      	str	r2, [r3, #0]
}
 8008c50:	bf00      	nop
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	20001588 	.word	0x20001588
 8008c60:	20002cf8 	.word	0x20002cf8
 8008c64:	20002d00 	.word	0x20002d00
 8008c68:	20002d08 	.word	0x20002d08
 8008c6c:	20002d04 	.word	0x20002d04
 8008c70:	20002d14 	.word	0x20002d14

08008c74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c7c:	4b28      	ldr	r3, [pc, #160]	@ (8008d20 <prvInsertBlockIntoFreeList+0xac>)
 8008c7e:	60fb      	str	r3, [r7, #12]
 8008c80:	e002      	b.n	8008c88 <prvInsertBlockIntoFreeList+0x14>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d8f7      	bhi.n	8008c82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d108      	bne.n	8008cb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	685a      	ldr	r2, [r3, #4]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	441a      	add	r2, r3
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	441a      	add	r2, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d118      	bne.n	8008cfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	4b15      	ldr	r3, [pc, #84]	@ (8008d24 <prvInsertBlockIntoFreeList+0xb0>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d00d      	beq.n	8008cf2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685a      	ldr	r2, [r3, #4]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	441a      	add	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	601a      	str	r2, [r3, #0]
 8008cf0:	e008      	b.n	8008d04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8008d24 <prvInsertBlockIntoFreeList+0xb0>)
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	601a      	str	r2, [r3, #0]
 8008cfa:	e003      	b.n	8008d04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d002      	beq.n	8008d12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d12:	bf00      	nop
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	20002cf8 	.word	0x20002cf8
 8008d24:	20002d00 	.word	0x20002d00

08008d28 <std>:
 8008d28:	2300      	movs	r3, #0
 8008d2a:	b510      	push	{r4, lr}
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	e9c0 3300 	strd	r3, r3, [r0]
 8008d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d36:	6083      	str	r3, [r0, #8]
 8008d38:	8181      	strh	r1, [r0, #12]
 8008d3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008d3c:	81c2      	strh	r2, [r0, #14]
 8008d3e:	6183      	str	r3, [r0, #24]
 8008d40:	4619      	mov	r1, r3
 8008d42:	2208      	movs	r2, #8
 8008d44:	305c      	adds	r0, #92	@ 0x5c
 8008d46:	f000 fa2d 	bl	80091a4 <memset>
 8008d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d80 <std+0x58>)
 8008d4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008d84 <std+0x5c>)
 8008d50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008d52:	4b0d      	ldr	r3, [pc, #52]	@ (8008d88 <std+0x60>)
 8008d54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008d56:	4b0d      	ldr	r3, [pc, #52]	@ (8008d8c <std+0x64>)
 8008d58:	6323      	str	r3, [r4, #48]	@ 0x30
 8008d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d90 <std+0x68>)
 8008d5c:	6224      	str	r4, [r4, #32]
 8008d5e:	429c      	cmp	r4, r3
 8008d60:	d006      	beq.n	8008d70 <std+0x48>
 8008d62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008d66:	4294      	cmp	r4, r2
 8008d68:	d002      	beq.n	8008d70 <std+0x48>
 8008d6a:	33d0      	adds	r3, #208	@ 0xd0
 8008d6c:	429c      	cmp	r4, r3
 8008d6e:	d105      	bne.n	8008d7c <std+0x54>
 8008d70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d78:	f000 ba8c 	b.w	8009294 <__retarget_lock_init_recursive>
 8008d7c:	bd10      	pop	{r4, pc}
 8008d7e:	bf00      	nop
 8008d80:	08008ff5 	.word	0x08008ff5
 8008d84:	08009017 	.word	0x08009017
 8008d88:	0800904f 	.word	0x0800904f
 8008d8c:	08009073 	.word	0x08009073
 8008d90:	20002d18 	.word	0x20002d18

08008d94 <stdio_exit_handler>:
 8008d94:	4a02      	ldr	r2, [pc, #8]	@ (8008da0 <stdio_exit_handler+0xc>)
 8008d96:	4903      	ldr	r1, [pc, #12]	@ (8008da4 <stdio_exit_handler+0x10>)
 8008d98:	4803      	ldr	r0, [pc, #12]	@ (8008da8 <stdio_exit_handler+0x14>)
 8008d9a:	f000 b869 	b.w	8008e70 <_fwalk_sglue>
 8008d9e:	bf00      	nop
 8008da0:	20000010 	.word	0x20000010
 8008da4:	08009e01 	.word	0x08009e01
 8008da8:	20000020 	.word	0x20000020

08008dac <cleanup_stdio>:
 8008dac:	6841      	ldr	r1, [r0, #4]
 8008dae:	4b0c      	ldr	r3, [pc, #48]	@ (8008de0 <cleanup_stdio+0x34>)
 8008db0:	4299      	cmp	r1, r3
 8008db2:	b510      	push	{r4, lr}
 8008db4:	4604      	mov	r4, r0
 8008db6:	d001      	beq.n	8008dbc <cleanup_stdio+0x10>
 8008db8:	f001 f822 	bl	8009e00 <_fflush_r>
 8008dbc:	68a1      	ldr	r1, [r4, #8]
 8008dbe:	4b09      	ldr	r3, [pc, #36]	@ (8008de4 <cleanup_stdio+0x38>)
 8008dc0:	4299      	cmp	r1, r3
 8008dc2:	d002      	beq.n	8008dca <cleanup_stdio+0x1e>
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f001 f81b 	bl	8009e00 <_fflush_r>
 8008dca:	68e1      	ldr	r1, [r4, #12]
 8008dcc:	4b06      	ldr	r3, [pc, #24]	@ (8008de8 <cleanup_stdio+0x3c>)
 8008dce:	4299      	cmp	r1, r3
 8008dd0:	d004      	beq.n	8008ddc <cleanup_stdio+0x30>
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dd8:	f001 b812 	b.w	8009e00 <_fflush_r>
 8008ddc:	bd10      	pop	{r4, pc}
 8008dde:	bf00      	nop
 8008de0:	20002d18 	.word	0x20002d18
 8008de4:	20002d80 	.word	0x20002d80
 8008de8:	20002de8 	.word	0x20002de8

08008dec <global_stdio_init.part.0>:
 8008dec:	b510      	push	{r4, lr}
 8008dee:	4b0b      	ldr	r3, [pc, #44]	@ (8008e1c <global_stdio_init.part.0+0x30>)
 8008df0:	4c0b      	ldr	r4, [pc, #44]	@ (8008e20 <global_stdio_init.part.0+0x34>)
 8008df2:	4a0c      	ldr	r2, [pc, #48]	@ (8008e24 <global_stdio_init.part.0+0x38>)
 8008df4:	601a      	str	r2, [r3, #0]
 8008df6:	4620      	mov	r0, r4
 8008df8:	2200      	movs	r2, #0
 8008dfa:	2104      	movs	r1, #4
 8008dfc:	f7ff ff94 	bl	8008d28 <std>
 8008e00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008e04:	2201      	movs	r2, #1
 8008e06:	2109      	movs	r1, #9
 8008e08:	f7ff ff8e 	bl	8008d28 <std>
 8008e0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e10:	2202      	movs	r2, #2
 8008e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e16:	2112      	movs	r1, #18
 8008e18:	f7ff bf86 	b.w	8008d28 <std>
 8008e1c:	20002e50 	.word	0x20002e50
 8008e20:	20002d18 	.word	0x20002d18
 8008e24:	08008d95 	.word	0x08008d95

08008e28 <__sfp_lock_acquire>:
 8008e28:	4801      	ldr	r0, [pc, #4]	@ (8008e30 <__sfp_lock_acquire+0x8>)
 8008e2a:	f000 ba34 	b.w	8009296 <__retarget_lock_acquire_recursive>
 8008e2e:	bf00      	nop
 8008e30:	20002e59 	.word	0x20002e59

08008e34 <__sfp_lock_release>:
 8008e34:	4801      	ldr	r0, [pc, #4]	@ (8008e3c <__sfp_lock_release+0x8>)
 8008e36:	f000 ba2f 	b.w	8009298 <__retarget_lock_release_recursive>
 8008e3a:	bf00      	nop
 8008e3c:	20002e59 	.word	0x20002e59

08008e40 <__sinit>:
 8008e40:	b510      	push	{r4, lr}
 8008e42:	4604      	mov	r4, r0
 8008e44:	f7ff fff0 	bl	8008e28 <__sfp_lock_acquire>
 8008e48:	6a23      	ldr	r3, [r4, #32]
 8008e4a:	b11b      	cbz	r3, 8008e54 <__sinit+0x14>
 8008e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e50:	f7ff bff0 	b.w	8008e34 <__sfp_lock_release>
 8008e54:	4b04      	ldr	r3, [pc, #16]	@ (8008e68 <__sinit+0x28>)
 8008e56:	6223      	str	r3, [r4, #32]
 8008e58:	4b04      	ldr	r3, [pc, #16]	@ (8008e6c <__sinit+0x2c>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1f5      	bne.n	8008e4c <__sinit+0xc>
 8008e60:	f7ff ffc4 	bl	8008dec <global_stdio_init.part.0>
 8008e64:	e7f2      	b.n	8008e4c <__sinit+0xc>
 8008e66:	bf00      	nop
 8008e68:	08008dad 	.word	0x08008dad
 8008e6c:	20002e50 	.word	0x20002e50

08008e70 <_fwalk_sglue>:
 8008e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e74:	4607      	mov	r7, r0
 8008e76:	4688      	mov	r8, r1
 8008e78:	4614      	mov	r4, r2
 8008e7a:	2600      	movs	r6, #0
 8008e7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e80:	f1b9 0901 	subs.w	r9, r9, #1
 8008e84:	d505      	bpl.n	8008e92 <_fwalk_sglue+0x22>
 8008e86:	6824      	ldr	r4, [r4, #0]
 8008e88:	2c00      	cmp	r4, #0
 8008e8a:	d1f7      	bne.n	8008e7c <_fwalk_sglue+0xc>
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e92:	89ab      	ldrh	r3, [r5, #12]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d907      	bls.n	8008ea8 <_fwalk_sglue+0x38>
 8008e98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	d003      	beq.n	8008ea8 <_fwalk_sglue+0x38>
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	4638      	mov	r0, r7
 8008ea4:	47c0      	blx	r8
 8008ea6:	4306      	orrs	r6, r0
 8008ea8:	3568      	adds	r5, #104	@ 0x68
 8008eaa:	e7e9      	b.n	8008e80 <_fwalk_sglue+0x10>

08008eac <iprintf>:
 8008eac:	b40f      	push	{r0, r1, r2, r3}
 8008eae:	b507      	push	{r0, r1, r2, lr}
 8008eb0:	4906      	ldr	r1, [pc, #24]	@ (8008ecc <iprintf+0x20>)
 8008eb2:	ab04      	add	r3, sp, #16
 8008eb4:	6808      	ldr	r0, [r1, #0]
 8008eb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eba:	6881      	ldr	r1, [r0, #8]
 8008ebc:	9301      	str	r3, [sp, #4]
 8008ebe:	f000 fc75 	bl	80097ac <_vfiprintf_r>
 8008ec2:	b003      	add	sp, #12
 8008ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ec8:	b004      	add	sp, #16
 8008eca:	4770      	bx	lr
 8008ecc:	2000001c 	.word	0x2000001c

08008ed0 <_puts_r>:
 8008ed0:	6a03      	ldr	r3, [r0, #32]
 8008ed2:	b570      	push	{r4, r5, r6, lr}
 8008ed4:	6884      	ldr	r4, [r0, #8]
 8008ed6:	4605      	mov	r5, r0
 8008ed8:	460e      	mov	r6, r1
 8008eda:	b90b      	cbnz	r3, 8008ee0 <_puts_r+0x10>
 8008edc:	f7ff ffb0 	bl	8008e40 <__sinit>
 8008ee0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ee2:	07db      	lsls	r3, r3, #31
 8008ee4:	d405      	bmi.n	8008ef2 <_puts_r+0x22>
 8008ee6:	89a3      	ldrh	r3, [r4, #12]
 8008ee8:	0598      	lsls	r0, r3, #22
 8008eea:	d402      	bmi.n	8008ef2 <_puts_r+0x22>
 8008eec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008eee:	f000 f9d2 	bl	8009296 <__retarget_lock_acquire_recursive>
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	0719      	lsls	r1, r3, #28
 8008ef6:	d502      	bpl.n	8008efe <_puts_r+0x2e>
 8008ef8:	6923      	ldr	r3, [r4, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d135      	bne.n	8008f6a <_puts_r+0x9a>
 8008efe:	4621      	mov	r1, r4
 8008f00:	4628      	mov	r0, r5
 8008f02:	f000 f8f9 	bl	80090f8 <__swsetup_r>
 8008f06:	b380      	cbz	r0, 8008f6a <_puts_r+0x9a>
 8008f08:	f04f 35ff 	mov.w	r5, #4294967295
 8008f0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f0e:	07da      	lsls	r2, r3, #31
 8008f10:	d405      	bmi.n	8008f1e <_puts_r+0x4e>
 8008f12:	89a3      	ldrh	r3, [r4, #12]
 8008f14:	059b      	lsls	r3, r3, #22
 8008f16:	d402      	bmi.n	8008f1e <_puts_r+0x4e>
 8008f18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f1a:	f000 f9bd 	bl	8009298 <__retarget_lock_release_recursive>
 8008f1e:	4628      	mov	r0, r5
 8008f20:	bd70      	pop	{r4, r5, r6, pc}
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	da04      	bge.n	8008f30 <_puts_r+0x60>
 8008f26:	69a2      	ldr	r2, [r4, #24]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	dc17      	bgt.n	8008f5c <_puts_r+0x8c>
 8008f2c:	290a      	cmp	r1, #10
 8008f2e:	d015      	beq.n	8008f5c <_puts_r+0x8c>
 8008f30:	6823      	ldr	r3, [r4, #0]
 8008f32:	1c5a      	adds	r2, r3, #1
 8008f34:	6022      	str	r2, [r4, #0]
 8008f36:	7019      	strb	r1, [r3, #0]
 8008f38:	68a3      	ldr	r3, [r4, #8]
 8008f3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	60a3      	str	r3, [r4, #8]
 8008f42:	2900      	cmp	r1, #0
 8008f44:	d1ed      	bne.n	8008f22 <_puts_r+0x52>
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	da11      	bge.n	8008f6e <_puts_r+0x9e>
 8008f4a:	4622      	mov	r2, r4
 8008f4c:	210a      	movs	r1, #10
 8008f4e:	4628      	mov	r0, r5
 8008f50:	f000 f893 	bl	800907a <__swbuf_r>
 8008f54:	3001      	adds	r0, #1
 8008f56:	d0d7      	beq.n	8008f08 <_puts_r+0x38>
 8008f58:	250a      	movs	r5, #10
 8008f5a:	e7d7      	b.n	8008f0c <_puts_r+0x3c>
 8008f5c:	4622      	mov	r2, r4
 8008f5e:	4628      	mov	r0, r5
 8008f60:	f000 f88b 	bl	800907a <__swbuf_r>
 8008f64:	3001      	adds	r0, #1
 8008f66:	d1e7      	bne.n	8008f38 <_puts_r+0x68>
 8008f68:	e7ce      	b.n	8008f08 <_puts_r+0x38>
 8008f6a:	3e01      	subs	r6, #1
 8008f6c:	e7e4      	b.n	8008f38 <_puts_r+0x68>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	1c5a      	adds	r2, r3, #1
 8008f72:	6022      	str	r2, [r4, #0]
 8008f74:	220a      	movs	r2, #10
 8008f76:	701a      	strb	r2, [r3, #0]
 8008f78:	e7ee      	b.n	8008f58 <_puts_r+0x88>
	...

08008f7c <puts>:
 8008f7c:	4b02      	ldr	r3, [pc, #8]	@ (8008f88 <puts+0xc>)
 8008f7e:	4601      	mov	r1, r0
 8008f80:	6818      	ldr	r0, [r3, #0]
 8008f82:	f7ff bfa5 	b.w	8008ed0 <_puts_r>
 8008f86:	bf00      	nop
 8008f88:	2000001c 	.word	0x2000001c

08008f8c <sniprintf>:
 8008f8c:	b40c      	push	{r2, r3}
 8008f8e:	b530      	push	{r4, r5, lr}
 8008f90:	4b17      	ldr	r3, [pc, #92]	@ (8008ff0 <sniprintf+0x64>)
 8008f92:	1e0c      	subs	r4, r1, #0
 8008f94:	681d      	ldr	r5, [r3, #0]
 8008f96:	b09d      	sub	sp, #116	@ 0x74
 8008f98:	da08      	bge.n	8008fac <sniprintf+0x20>
 8008f9a:	238b      	movs	r3, #139	@ 0x8b
 8008f9c:	602b      	str	r3, [r5, #0]
 8008f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa2:	b01d      	add	sp, #116	@ 0x74
 8008fa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fa8:	b002      	add	sp, #8
 8008faa:	4770      	bx	lr
 8008fac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008fb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008fb4:	bf14      	ite	ne
 8008fb6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008fba:	4623      	moveq	r3, r4
 8008fbc:	9304      	str	r3, [sp, #16]
 8008fbe:	9307      	str	r3, [sp, #28]
 8008fc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008fc4:	9002      	str	r0, [sp, #8]
 8008fc6:	9006      	str	r0, [sp, #24]
 8008fc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008fcc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008fce:	ab21      	add	r3, sp, #132	@ 0x84
 8008fd0:	a902      	add	r1, sp, #8
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	9301      	str	r3, [sp, #4]
 8008fd6:	f000 fac3 	bl	8009560 <_svfiprintf_r>
 8008fda:	1c43      	adds	r3, r0, #1
 8008fdc:	bfbc      	itt	lt
 8008fde:	238b      	movlt	r3, #139	@ 0x8b
 8008fe0:	602b      	strlt	r3, [r5, #0]
 8008fe2:	2c00      	cmp	r4, #0
 8008fe4:	d0dd      	beq.n	8008fa2 <sniprintf+0x16>
 8008fe6:	9b02      	ldr	r3, [sp, #8]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	701a      	strb	r2, [r3, #0]
 8008fec:	e7d9      	b.n	8008fa2 <sniprintf+0x16>
 8008fee:	bf00      	nop
 8008ff0:	2000001c 	.word	0x2000001c

08008ff4 <__sread>:
 8008ff4:	b510      	push	{r4, lr}
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ffc:	f000 f8fc 	bl	80091f8 <_read_r>
 8009000:	2800      	cmp	r0, #0
 8009002:	bfab      	itete	ge
 8009004:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009006:	89a3      	ldrhlt	r3, [r4, #12]
 8009008:	181b      	addge	r3, r3, r0
 800900a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800900e:	bfac      	ite	ge
 8009010:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009012:	81a3      	strhlt	r3, [r4, #12]
 8009014:	bd10      	pop	{r4, pc}

08009016 <__swrite>:
 8009016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800901a:	461f      	mov	r7, r3
 800901c:	898b      	ldrh	r3, [r1, #12]
 800901e:	05db      	lsls	r3, r3, #23
 8009020:	4605      	mov	r5, r0
 8009022:	460c      	mov	r4, r1
 8009024:	4616      	mov	r6, r2
 8009026:	d505      	bpl.n	8009034 <__swrite+0x1e>
 8009028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800902c:	2302      	movs	r3, #2
 800902e:	2200      	movs	r2, #0
 8009030:	f000 f8d0 	bl	80091d4 <_lseek_r>
 8009034:	89a3      	ldrh	r3, [r4, #12]
 8009036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800903a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800903e:	81a3      	strh	r3, [r4, #12]
 8009040:	4632      	mov	r2, r6
 8009042:	463b      	mov	r3, r7
 8009044:	4628      	mov	r0, r5
 8009046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800904a:	f000 b8e7 	b.w	800921c <_write_r>

0800904e <__sseek>:
 800904e:	b510      	push	{r4, lr}
 8009050:	460c      	mov	r4, r1
 8009052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009056:	f000 f8bd 	bl	80091d4 <_lseek_r>
 800905a:	1c43      	adds	r3, r0, #1
 800905c:	89a3      	ldrh	r3, [r4, #12]
 800905e:	bf15      	itete	ne
 8009060:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009062:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009066:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800906a:	81a3      	strheq	r3, [r4, #12]
 800906c:	bf18      	it	ne
 800906e:	81a3      	strhne	r3, [r4, #12]
 8009070:	bd10      	pop	{r4, pc}

08009072 <__sclose>:
 8009072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009076:	f000 b89d 	b.w	80091b4 <_close_r>

0800907a <__swbuf_r>:
 800907a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907c:	460e      	mov	r6, r1
 800907e:	4614      	mov	r4, r2
 8009080:	4605      	mov	r5, r0
 8009082:	b118      	cbz	r0, 800908c <__swbuf_r+0x12>
 8009084:	6a03      	ldr	r3, [r0, #32]
 8009086:	b90b      	cbnz	r3, 800908c <__swbuf_r+0x12>
 8009088:	f7ff feda 	bl	8008e40 <__sinit>
 800908c:	69a3      	ldr	r3, [r4, #24]
 800908e:	60a3      	str	r3, [r4, #8]
 8009090:	89a3      	ldrh	r3, [r4, #12]
 8009092:	071a      	lsls	r2, r3, #28
 8009094:	d501      	bpl.n	800909a <__swbuf_r+0x20>
 8009096:	6923      	ldr	r3, [r4, #16]
 8009098:	b943      	cbnz	r3, 80090ac <__swbuf_r+0x32>
 800909a:	4621      	mov	r1, r4
 800909c:	4628      	mov	r0, r5
 800909e:	f000 f82b 	bl	80090f8 <__swsetup_r>
 80090a2:	b118      	cbz	r0, 80090ac <__swbuf_r+0x32>
 80090a4:	f04f 37ff 	mov.w	r7, #4294967295
 80090a8:	4638      	mov	r0, r7
 80090aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090ac:	6823      	ldr	r3, [r4, #0]
 80090ae:	6922      	ldr	r2, [r4, #16]
 80090b0:	1a98      	subs	r0, r3, r2
 80090b2:	6963      	ldr	r3, [r4, #20]
 80090b4:	b2f6      	uxtb	r6, r6
 80090b6:	4283      	cmp	r3, r0
 80090b8:	4637      	mov	r7, r6
 80090ba:	dc05      	bgt.n	80090c8 <__swbuf_r+0x4e>
 80090bc:	4621      	mov	r1, r4
 80090be:	4628      	mov	r0, r5
 80090c0:	f000 fe9e 	bl	8009e00 <_fflush_r>
 80090c4:	2800      	cmp	r0, #0
 80090c6:	d1ed      	bne.n	80090a4 <__swbuf_r+0x2a>
 80090c8:	68a3      	ldr	r3, [r4, #8]
 80090ca:	3b01      	subs	r3, #1
 80090cc:	60a3      	str	r3, [r4, #8]
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	1c5a      	adds	r2, r3, #1
 80090d2:	6022      	str	r2, [r4, #0]
 80090d4:	701e      	strb	r6, [r3, #0]
 80090d6:	6962      	ldr	r2, [r4, #20]
 80090d8:	1c43      	adds	r3, r0, #1
 80090da:	429a      	cmp	r2, r3
 80090dc:	d004      	beq.n	80090e8 <__swbuf_r+0x6e>
 80090de:	89a3      	ldrh	r3, [r4, #12]
 80090e0:	07db      	lsls	r3, r3, #31
 80090e2:	d5e1      	bpl.n	80090a8 <__swbuf_r+0x2e>
 80090e4:	2e0a      	cmp	r6, #10
 80090e6:	d1df      	bne.n	80090a8 <__swbuf_r+0x2e>
 80090e8:	4621      	mov	r1, r4
 80090ea:	4628      	mov	r0, r5
 80090ec:	f000 fe88 	bl	8009e00 <_fflush_r>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d0d9      	beq.n	80090a8 <__swbuf_r+0x2e>
 80090f4:	e7d6      	b.n	80090a4 <__swbuf_r+0x2a>
	...

080090f8 <__swsetup_r>:
 80090f8:	b538      	push	{r3, r4, r5, lr}
 80090fa:	4b29      	ldr	r3, [pc, #164]	@ (80091a0 <__swsetup_r+0xa8>)
 80090fc:	4605      	mov	r5, r0
 80090fe:	6818      	ldr	r0, [r3, #0]
 8009100:	460c      	mov	r4, r1
 8009102:	b118      	cbz	r0, 800910c <__swsetup_r+0x14>
 8009104:	6a03      	ldr	r3, [r0, #32]
 8009106:	b90b      	cbnz	r3, 800910c <__swsetup_r+0x14>
 8009108:	f7ff fe9a 	bl	8008e40 <__sinit>
 800910c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009110:	0719      	lsls	r1, r3, #28
 8009112:	d422      	bmi.n	800915a <__swsetup_r+0x62>
 8009114:	06da      	lsls	r2, r3, #27
 8009116:	d407      	bmi.n	8009128 <__swsetup_r+0x30>
 8009118:	2209      	movs	r2, #9
 800911a:	602a      	str	r2, [r5, #0]
 800911c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009120:	81a3      	strh	r3, [r4, #12]
 8009122:	f04f 30ff 	mov.w	r0, #4294967295
 8009126:	e033      	b.n	8009190 <__swsetup_r+0x98>
 8009128:	0758      	lsls	r0, r3, #29
 800912a:	d512      	bpl.n	8009152 <__swsetup_r+0x5a>
 800912c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800912e:	b141      	cbz	r1, 8009142 <__swsetup_r+0x4a>
 8009130:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009134:	4299      	cmp	r1, r3
 8009136:	d002      	beq.n	800913e <__swsetup_r+0x46>
 8009138:	4628      	mov	r0, r5
 800913a:	f000 f8bd 	bl	80092b8 <_free_r>
 800913e:	2300      	movs	r3, #0
 8009140:	6363      	str	r3, [r4, #52]	@ 0x34
 8009142:	89a3      	ldrh	r3, [r4, #12]
 8009144:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009148:	81a3      	strh	r3, [r4, #12]
 800914a:	2300      	movs	r3, #0
 800914c:	6063      	str	r3, [r4, #4]
 800914e:	6923      	ldr	r3, [r4, #16]
 8009150:	6023      	str	r3, [r4, #0]
 8009152:	89a3      	ldrh	r3, [r4, #12]
 8009154:	f043 0308 	orr.w	r3, r3, #8
 8009158:	81a3      	strh	r3, [r4, #12]
 800915a:	6923      	ldr	r3, [r4, #16]
 800915c:	b94b      	cbnz	r3, 8009172 <__swsetup_r+0x7a>
 800915e:	89a3      	ldrh	r3, [r4, #12]
 8009160:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009168:	d003      	beq.n	8009172 <__swsetup_r+0x7a>
 800916a:	4621      	mov	r1, r4
 800916c:	4628      	mov	r0, r5
 800916e:	f000 fe95 	bl	8009e9c <__smakebuf_r>
 8009172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009176:	f013 0201 	ands.w	r2, r3, #1
 800917a:	d00a      	beq.n	8009192 <__swsetup_r+0x9a>
 800917c:	2200      	movs	r2, #0
 800917e:	60a2      	str	r2, [r4, #8]
 8009180:	6962      	ldr	r2, [r4, #20]
 8009182:	4252      	negs	r2, r2
 8009184:	61a2      	str	r2, [r4, #24]
 8009186:	6922      	ldr	r2, [r4, #16]
 8009188:	b942      	cbnz	r2, 800919c <__swsetup_r+0xa4>
 800918a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800918e:	d1c5      	bne.n	800911c <__swsetup_r+0x24>
 8009190:	bd38      	pop	{r3, r4, r5, pc}
 8009192:	0799      	lsls	r1, r3, #30
 8009194:	bf58      	it	pl
 8009196:	6962      	ldrpl	r2, [r4, #20]
 8009198:	60a2      	str	r2, [r4, #8]
 800919a:	e7f4      	b.n	8009186 <__swsetup_r+0x8e>
 800919c:	2000      	movs	r0, #0
 800919e:	e7f7      	b.n	8009190 <__swsetup_r+0x98>
 80091a0:	2000001c 	.word	0x2000001c

080091a4 <memset>:
 80091a4:	4402      	add	r2, r0
 80091a6:	4603      	mov	r3, r0
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d100      	bne.n	80091ae <memset+0xa>
 80091ac:	4770      	bx	lr
 80091ae:	f803 1b01 	strb.w	r1, [r3], #1
 80091b2:	e7f9      	b.n	80091a8 <memset+0x4>

080091b4 <_close_r>:
 80091b4:	b538      	push	{r3, r4, r5, lr}
 80091b6:	4d06      	ldr	r5, [pc, #24]	@ (80091d0 <_close_r+0x1c>)
 80091b8:	2300      	movs	r3, #0
 80091ba:	4604      	mov	r4, r0
 80091bc:	4608      	mov	r0, r1
 80091be:	602b      	str	r3, [r5, #0]
 80091c0:	f7f8 fadd 	bl	800177e <_close>
 80091c4:	1c43      	adds	r3, r0, #1
 80091c6:	d102      	bne.n	80091ce <_close_r+0x1a>
 80091c8:	682b      	ldr	r3, [r5, #0]
 80091ca:	b103      	cbz	r3, 80091ce <_close_r+0x1a>
 80091cc:	6023      	str	r3, [r4, #0]
 80091ce:	bd38      	pop	{r3, r4, r5, pc}
 80091d0:	20002e54 	.word	0x20002e54

080091d4 <_lseek_r>:
 80091d4:	b538      	push	{r3, r4, r5, lr}
 80091d6:	4d07      	ldr	r5, [pc, #28]	@ (80091f4 <_lseek_r+0x20>)
 80091d8:	4604      	mov	r4, r0
 80091da:	4608      	mov	r0, r1
 80091dc:	4611      	mov	r1, r2
 80091de:	2200      	movs	r2, #0
 80091e0:	602a      	str	r2, [r5, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	f7f8 faf2 	bl	80017cc <_lseek>
 80091e8:	1c43      	adds	r3, r0, #1
 80091ea:	d102      	bne.n	80091f2 <_lseek_r+0x1e>
 80091ec:	682b      	ldr	r3, [r5, #0]
 80091ee:	b103      	cbz	r3, 80091f2 <_lseek_r+0x1e>
 80091f0:	6023      	str	r3, [r4, #0]
 80091f2:	bd38      	pop	{r3, r4, r5, pc}
 80091f4:	20002e54 	.word	0x20002e54

080091f8 <_read_r>:
 80091f8:	b538      	push	{r3, r4, r5, lr}
 80091fa:	4d07      	ldr	r5, [pc, #28]	@ (8009218 <_read_r+0x20>)
 80091fc:	4604      	mov	r4, r0
 80091fe:	4608      	mov	r0, r1
 8009200:	4611      	mov	r1, r2
 8009202:	2200      	movs	r2, #0
 8009204:	602a      	str	r2, [r5, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	f7f8 fa9c 	bl	8001744 <_read>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	d102      	bne.n	8009216 <_read_r+0x1e>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	b103      	cbz	r3, 8009216 <_read_r+0x1e>
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	20002e54 	.word	0x20002e54

0800921c <_write_r>:
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	4d07      	ldr	r5, [pc, #28]	@ (800923c <_write_r+0x20>)
 8009220:	4604      	mov	r4, r0
 8009222:	4608      	mov	r0, r1
 8009224:	4611      	mov	r1, r2
 8009226:	2200      	movs	r2, #0
 8009228:	602a      	str	r2, [r5, #0]
 800922a:	461a      	mov	r2, r3
 800922c:	f7f7 f9bf 	bl	80005ae <_write>
 8009230:	1c43      	adds	r3, r0, #1
 8009232:	d102      	bne.n	800923a <_write_r+0x1e>
 8009234:	682b      	ldr	r3, [r5, #0]
 8009236:	b103      	cbz	r3, 800923a <_write_r+0x1e>
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	bd38      	pop	{r3, r4, r5, pc}
 800923c:	20002e54 	.word	0x20002e54

08009240 <__errno>:
 8009240:	4b01      	ldr	r3, [pc, #4]	@ (8009248 <__errno+0x8>)
 8009242:	6818      	ldr	r0, [r3, #0]
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	2000001c 	.word	0x2000001c

0800924c <__libc_init_array>:
 800924c:	b570      	push	{r4, r5, r6, lr}
 800924e:	4d0d      	ldr	r5, [pc, #52]	@ (8009284 <__libc_init_array+0x38>)
 8009250:	4c0d      	ldr	r4, [pc, #52]	@ (8009288 <__libc_init_array+0x3c>)
 8009252:	1b64      	subs	r4, r4, r5
 8009254:	10a4      	asrs	r4, r4, #2
 8009256:	2600      	movs	r6, #0
 8009258:	42a6      	cmp	r6, r4
 800925a:	d109      	bne.n	8009270 <__libc_init_array+0x24>
 800925c:	4d0b      	ldr	r5, [pc, #44]	@ (800928c <__libc_init_array+0x40>)
 800925e:	4c0c      	ldr	r4, [pc, #48]	@ (8009290 <__libc_init_array+0x44>)
 8009260:	f000 feda 	bl	800a018 <_init>
 8009264:	1b64      	subs	r4, r4, r5
 8009266:	10a4      	asrs	r4, r4, #2
 8009268:	2600      	movs	r6, #0
 800926a:	42a6      	cmp	r6, r4
 800926c:	d105      	bne.n	800927a <__libc_init_array+0x2e>
 800926e:	bd70      	pop	{r4, r5, r6, pc}
 8009270:	f855 3b04 	ldr.w	r3, [r5], #4
 8009274:	4798      	blx	r3
 8009276:	3601      	adds	r6, #1
 8009278:	e7ee      	b.n	8009258 <__libc_init_array+0xc>
 800927a:	f855 3b04 	ldr.w	r3, [r5], #4
 800927e:	4798      	blx	r3
 8009280:	3601      	adds	r6, #1
 8009282:	e7f2      	b.n	800926a <__libc_init_array+0x1e>
 8009284:	0800a218 	.word	0x0800a218
 8009288:	0800a218 	.word	0x0800a218
 800928c:	0800a218 	.word	0x0800a218
 8009290:	0800a21c 	.word	0x0800a21c

08009294 <__retarget_lock_init_recursive>:
 8009294:	4770      	bx	lr

08009296 <__retarget_lock_acquire_recursive>:
 8009296:	4770      	bx	lr

08009298 <__retarget_lock_release_recursive>:
 8009298:	4770      	bx	lr

0800929a <memcpy>:
 800929a:	440a      	add	r2, r1
 800929c:	4291      	cmp	r1, r2
 800929e:	f100 33ff 	add.w	r3, r0, #4294967295
 80092a2:	d100      	bne.n	80092a6 <memcpy+0xc>
 80092a4:	4770      	bx	lr
 80092a6:	b510      	push	{r4, lr}
 80092a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092b0:	4291      	cmp	r1, r2
 80092b2:	d1f9      	bne.n	80092a8 <memcpy+0xe>
 80092b4:	bd10      	pop	{r4, pc}
	...

080092b8 <_free_r>:
 80092b8:	b538      	push	{r3, r4, r5, lr}
 80092ba:	4605      	mov	r5, r0
 80092bc:	2900      	cmp	r1, #0
 80092be:	d041      	beq.n	8009344 <_free_r+0x8c>
 80092c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092c4:	1f0c      	subs	r4, r1, #4
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	bfb8      	it	lt
 80092ca:	18e4      	addlt	r4, r4, r3
 80092cc:	f000 f8e0 	bl	8009490 <__malloc_lock>
 80092d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009348 <_free_r+0x90>)
 80092d2:	6813      	ldr	r3, [r2, #0]
 80092d4:	b933      	cbnz	r3, 80092e4 <_free_r+0x2c>
 80092d6:	6063      	str	r3, [r4, #4]
 80092d8:	6014      	str	r4, [r2, #0]
 80092da:	4628      	mov	r0, r5
 80092dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092e0:	f000 b8dc 	b.w	800949c <__malloc_unlock>
 80092e4:	42a3      	cmp	r3, r4
 80092e6:	d908      	bls.n	80092fa <_free_r+0x42>
 80092e8:	6820      	ldr	r0, [r4, #0]
 80092ea:	1821      	adds	r1, r4, r0
 80092ec:	428b      	cmp	r3, r1
 80092ee:	bf01      	itttt	eq
 80092f0:	6819      	ldreq	r1, [r3, #0]
 80092f2:	685b      	ldreq	r3, [r3, #4]
 80092f4:	1809      	addeq	r1, r1, r0
 80092f6:	6021      	streq	r1, [r4, #0]
 80092f8:	e7ed      	b.n	80092d6 <_free_r+0x1e>
 80092fa:	461a      	mov	r2, r3
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	b10b      	cbz	r3, 8009304 <_free_r+0x4c>
 8009300:	42a3      	cmp	r3, r4
 8009302:	d9fa      	bls.n	80092fa <_free_r+0x42>
 8009304:	6811      	ldr	r1, [r2, #0]
 8009306:	1850      	adds	r0, r2, r1
 8009308:	42a0      	cmp	r0, r4
 800930a:	d10b      	bne.n	8009324 <_free_r+0x6c>
 800930c:	6820      	ldr	r0, [r4, #0]
 800930e:	4401      	add	r1, r0
 8009310:	1850      	adds	r0, r2, r1
 8009312:	4283      	cmp	r3, r0
 8009314:	6011      	str	r1, [r2, #0]
 8009316:	d1e0      	bne.n	80092da <_free_r+0x22>
 8009318:	6818      	ldr	r0, [r3, #0]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	6053      	str	r3, [r2, #4]
 800931e:	4408      	add	r0, r1
 8009320:	6010      	str	r0, [r2, #0]
 8009322:	e7da      	b.n	80092da <_free_r+0x22>
 8009324:	d902      	bls.n	800932c <_free_r+0x74>
 8009326:	230c      	movs	r3, #12
 8009328:	602b      	str	r3, [r5, #0]
 800932a:	e7d6      	b.n	80092da <_free_r+0x22>
 800932c:	6820      	ldr	r0, [r4, #0]
 800932e:	1821      	adds	r1, r4, r0
 8009330:	428b      	cmp	r3, r1
 8009332:	bf04      	itt	eq
 8009334:	6819      	ldreq	r1, [r3, #0]
 8009336:	685b      	ldreq	r3, [r3, #4]
 8009338:	6063      	str	r3, [r4, #4]
 800933a:	bf04      	itt	eq
 800933c:	1809      	addeq	r1, r1, r0
 800933e:	6021      	streq	r1, [r4, #0]
 8009340:	6054      	str	r4, [r2, #4]
 8009342:	e7ca      	b.n	80092da <_free_r+0x22>
 8009344:	bd38      	pop	{r3, r4, r5, pc}
 8009346:	bf00      	nop
 8009348:	20002e60 	.word	0x20002e60

0800934c <sbrk_aligned>:
 800934c:	b570      	push	{r4, r5, r6, lr}
 800934e:	4e0f      	ldr	r6, [pc, #60]	@ (800938c <sbrk_aligned+0x40>)
 8009350:	460c      	mov	r4, r1
 8009352:	6831      	ldr	r1, [r6, #0]
 8009354:	4605      	mov	r5, r0
 8009356:	b911      	cbnz	r1, 800935e <sbrk_aligned+0x12>
 8009358:	f000 fe18 	bl	8009f8c <_sbrk_r>
 800935c:	6030      	str	r0, [r6, #0]
 800935e:	4621      	mov	r1, r4
 8009360:	4628      	mov	r0, r5
 8009362:	f000 fe13 	bl	8009f8c <_sbrk_r>
 8009366:	1c43      	adds	r3, r0, #1
 8009368:	d103      	bne.n	8009372 <sbrk_aligned+0x26>
 800936a:	f04f 34ff 	mov.w	r4, #4294967295
 800936e:	4620      	mov	r0, r4
 8009370:	bd70      	pop	{r4, r5, r6, pc}
 8009372:	1cc4      	adds	r4, r0, #3
 8009374:	f024 0403 	bic.w	r4, r4, #3
 8009378:	42a0      	cmp	r0, r4
 800937a:	d0f8      	beq.n	800936e <sbrk_aligned+0x22>
 800937c:	1a21      	subs	r1, r4, r0
 800937e:	4628      	mov	r0, r5
 8009380:	f000 fe04 	bl	8009f8c <_sbrk_r>
 8009384:	3001      	adds	r0, #1
 8009386:	d1f2      	bne.n	800936e <sbrk_aligned+0x22>
 8009388:	e7ef      	b.n	800936a <sbrk_aligned+0x1e>
 800938a:	bf00      	nop
 800938c:	20002e5c 	.word	0x20002e5c

08009390 <_malloc_r>:
 8009390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009394:	1ccd      	adds	r5, r1, #3
 8009396:	f025 0503 	bic.w	r5, r5, #3
 800939a:	3508      	adds	r5, #8
 800939c:	2d0c      	cmp	r5, #12
 800939e:	bf38      	it	cc
 80093a0:	250c      	movcc	r5, #12
 80093a2:	2d00      	cmp	r5, #0
 80093a4:	4606      	mov	r6, r0
 80093a6:	db01      	blt.n	80093ac <_malloc_r+0x1c>
 80093a8:	42a9      	cmp	r1, r5
 80093aa:	d904      	bls.n	80093b6 <_malloc_r+0x26>
 80093ac:	230c      	movs	r3, #12
 80093ae:	6033      	str	r3, [r6, #0]
 80093b0:	2000      	movs	r0, #0
 80093b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800948c <_malloc_r+0xfc>
 80093ba:	f000 f869 	bl	8009490 <__malloc_lock>
 80093be:	f8d8 3000 	ldr.w	r3, [r8]
 80093c2:	461c      	mov	r4, r3
 80093c4:	bb44      	cbnz	r4, 8009418 <_malloc_r+0x88>
 80093c6:	4629      	mov	r1, r5
 80093c8:	4630      	mov	r0, r6
 80093ca:	f7ff ffbf 	bl	800934c <sbrk_aligned>
 80093ce:	1c43      	adds	r3, r0, #1
 80093d0:	4604      	mov	r4, r0
 80093d2:	d158      	bne.n	8009486 <_malloc_r+0xf6>
 80093d4:	f8d8 4000 	ldr.w	r4, [r8]
 80093d8:	4627      	mov	r7, r4
 80093da:	2f00      	cmp	r7, #0
 80093dc:	d143      	bne.n	8009466 <_malloc_r+0xd6>
 80093de:	2c00      	cmp	r4, #0
 80093e0:	d04b      	beq.n	800947a <_malloc_r+0xea>
 80093e2:	6823      	ldr	r3, [r4, #0]
 80093e4:	4639      	mov	r1, r7
 80093e6:	4630      	mov	r0, r6
 80093e8:	eb04 0903 	add.w	r9, r4, r3
 80093ec:	f000 fdce 	bl	8009f8c <_sbrk_r>
 80093f0:	4581      	cmp	r9, r0
 80093f2:	d142      	bne.n	800947a <_malloc_r+0xea>
 80093f4:	6821      	ldr	r1, [r4, #0]
 80093f6:	1a6d      	subs	r5, r5, r1
 80093f8:	4629      	mov	r1, r5
 80093fa:	4630      	mov	r0, r6
 80093fc:	f7ff ffa6 	bl	800934c <sbrk_aligned>
 8009400:	3001      	adds	r0, #1
 8009402:	d03a      	beq.n	800947a <_malloc_r+0xea>
 8009404:	6823      	ldr	r3, [r4, #0]
 8009406:	442b      	add	r3, r5
 8009408:	6023      	str	r3, [r4, #0]
 800940a:	f8d8 3000 	ldr.w	r3, [r8]
 800940e:	685a      	ldr	r2, [r3, #4]
 8009410:	bb62      	cbnz	r2, 800946c <_malloc_r+0xdc>
 8009412:	f8c8 7000 	str.w	r7, [r8]
 8009416:	e00f      	b.n	8009438 <_malloc_r+0xa8>
 8009418:	6822      	ldr	r2, [r4, #0]
 800941a:	1b52      	subs	r2, r2, r5
 800941c:	d420      	bmi.n	8009460 <_malloc_r+0xd0>
 800941e:	2a0b      	cmp	r2, #11
 8009420:	d917      	bls.n	8009452 <_malloc_r+0xc2>
 8009422:	1961      	adds	r1, r4, r5
 8009424:	42a3      	cmp	r3, r4
 8009426:	6025      	str	r5, [r4, #0]
 8009428:	bf18      	it	ne
 800942a:	6059      	strne	r1, [r3, #4]
 800942c:	6863      	ldr	r3, [r4, #4]
 800942e:	bf08      	it	eq
 8009430:	f8c8 1000 	streq.w	r1, [r8]
 8009434:	5162      	str	r2, [r4, r5]
 8009436:	604b      	str	r3, [r1, #4]
 8009438:	4630      	mov	r0, r6
 800943a:	f000 f82f 	bl	800949c <__malloc_unlock>
 800943e:	f104 000b 	add.w	r0, r4, #11
 8009442:	1d23      	adds	r3, r4, #4
 8009444:	f020 0007 	bic.w	r0, r0, #7
 8009448:	1ac2      	subs	r2, r0, r3
 800944a:	bf1c      	itt	ne
 800944c:	1a1b      	subne	r3, r3, r0
 800944e:	50a3      	strne	r3, [r4, r2]
 8009450:	e7af      	b.n	80093b2 <_malloc_r+0x22>
 8009452:	6862      	ldr	r2, [r4, #4]
 8009454:	42a3      	cmp	r3, r4
 8009456:	bf0c      	ite	eq
 8009458:	f8c8 2000 	streq.w	r2, [r8]
 800945c:	605a      	strne	r2, [r3, #4]
 800945e:	e7eb      	b.n	8009438 <_malloc_r+0xa8>
 8009460:	4623      	mov	r3, r4
 8009462:	6864      	ldr	r4, [r4, #4]
 8009464:	e7ae      	b.n	80093c4 <_malloc_r+0x34>
 8009466:	463c      	mov	r4, r7
 8009468:	687f      	ldr	r7, [r7, #4]
 800946a:	e7b6      	b.n	80093da <_malloc_r+0x4a>
 800946c:	461a      	mov	r2, r3
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	42a3      	cmp	r3, r4
 8009472:	d1fb      	bne.n	800946c <_malloc_r+0xdc>
 8009474:	2300      	movs	r3, #0
 8009476:	6053      	str	r3, [r2, #4]
 8009478:	e7de      	b.n	8009438 <_malloc_r+0xa8>
 800947a:	230c      	movs	r3, #12
 800947c:	6033      	str	r3, [r6, #0]
 800947e:	4630      	mov	r0, r6
 8009480:	f000 f80c 	bl	800949c <__malloc_unlock>
 8009484:	e794      	b.n	80093b0 <_malloc_r+0x20>
 8009486:	6005      	str	r5, [r0, #0]
 8009488:	e7d6      	b.n	8009438 <_malloc_r+0xa8>
 800948a:	bf00      	nop
 800948c:	20002e60 	.word	0x20002e60

08009490 <__malloc_lock>:
 8009490:	4801      	ldr	r0, [pc, #4]	@ (8009498 <__malloc_lock+0x8>)
 8009492:	f7ff bf00 	b.w	8009296 <__retarget_lock_acquire_recursive>
 8009496:	bf00      	nop
 8009498:	20002e58 	.word	0x20002e58

0800949c <__malloc_unlock>:
 800949c:	4801      	ldr	r0, [pc, #4]	@ (80094a4 <__malloc_unlock+0x8>)
 800949e:	f7ff befb 	b.w	8009298 <__retarget_lock_release_recursive>
 80094a2:	bf00      	nop
 80094a4:	20002e58 	.word	0x20002e58

080094a8 <__ssputs_r>:
 80094a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ac:	688e      	ldr	r6, [r1, #8]
 80094ae:	461f      	mov	r7, r3
 80094b0:	42be      	cmp	r6, r7
 80094b2:	680b      	ldr	r3, [r1, #0]
 80094b4:	4682      	mov	sl, r0
 80094b6:	460c      	mov	r4, r1
 80094b8:	4690      	mov	r8, r2
 80094ba:	d82d      	bhi.n	8009518 <__ssputs_r+0x70>
 80094bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80094c4:	d026      	beq.n	8009514 <__ssputs_r+0x6c>
 80094c6:	6965      	ldr	r5, [r4, #20]
 80094c8:	6909      	ldr	r1, [r1, #16]
 80094ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094ce:	eba3 0901 	sub.w	r9, r3, r1
 80094d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094d6:	1c7b      	adds	r3, r7, #1
 80094d8:	444b      	add	r3, r9
 80094da:	106d      	asrs	r5, r5, #1
 80094dc:	429d      	cmp	r5, r3
 80094de:	bf38      	it	cc
 80094e0:	461d      	movcc	r5, r3
 80094e2:	0553      	lsls	r3, r2, #21
 80094e4:	d527      	bpl.n	8009536 <__ssputs_r+0x8e>
 80094e6:	4629      	mov	r1, r5
 80094e8:	f7ff ff52 	bl	8009390 <_malloc_r>
 80094ec:	4606      	mov	r6, r0
 80094ee:	b360      	cbz	r0, 800954a <__ssputs_r+0xa2>
 80094f0:	6921      	ldr	r1, [r4, #16]
 80094f2:	464a      	mov	r2, r9
 80094f4:	f7ff fed1 	bl	800929a <memcpy>
 80094f8:	89a3      	ldrh	r3, [r4, #12]
 80094fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80094fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009502:	81a3      	strh	r3, [r4, #12]
 8009504:	6126      	str	r6, [r4, #16]
 8009506:	6165      	str	r5, [r4, #20]
 8009508:	444e      	add	r6, r9
 800950a:	eba5 0509 	sub.w	r5, r5, r9
 800950e:	6026      	str	r6, [r4, #0]
 8009510:	60a5      	str	r5, [r4, #8]
 8009512:	463e      	mov	r6, r7
 8009514:	42be      	cmp	r6, r7
 8009516:	d900      	bls.n	800951a <__ssputs_r+0x72>
 8009518:	463e      	mov	r6, r7
 800951a:	6820      	ldr	r0, [r4, #0]
 800951c:	4632      	mov	r2, r6
 800951e:	4641      	mov	r1, r8
 8009520:	f000 fcf8 	bl	8009f14 <memmove>
 8009524:	68a3      	ldr	r3, [r4, #8]
 8009526:	1b9b      	subs	r3, r3, r6
 8009528:	60a3      	str	r3, [r4, #8]
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	4433      	add	r3, r6
 800952e:	6023      	str	r3, [r4, #0]
 8009530:	2000      	movs	r0, #0
 8009532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009536:	462a      	mov	r2, r5
 8009538:	f000 fd38 	bl	8009fac <_realloc_r>
 800953c:	4606      	mov	r6, r0
 800953e:	2800      	cmp	r0, #0
 8009540:	d1e0      	bne.n	8009504 <__ssputs_r+0x5c>
 8009542:	6921      	ldr	r1, [r4, #16]
 8009544:	4650      	mov	r0, sl
 8009546:	f7ff feb7 	bl	80092b8 <_free_r>
 800954a:	230c      	movs	r3, #12
 800954c:	f8ca 3000 	str.w	r3, [sl]
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009556:	81a3      	strh	r3, [r4, #12]
 8009558:	f04f 30ff 	mov.w	r0, #4294967295
 800955c:	e7e9      	b.n	8009532 <__ssputs_r+0x8a>
	...

08009560 <_svfiprintf_r>:
 8009560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009564:	4698      	mov	r8, r3
 8009566:	898b      	ldrh	r3, [r1, #12]
 8009568:	061b      	lsls	r3, r3, #24
 800956a:	b09d      	sub	sp, #116	@ 0x74
 800956c:	4607      	mov	r7, r0
 800956e:	460d      	mov	r5, r1
 8009570:	4614      	mov	r4, r2
 8009572:	d510      	bpl.n	8009596 <_svfiprintf_r+0x36>
 8009574:	690b      	ldr	r3, [r1, #16]
 8009576:	b973      	cbnz	r3, 8009596 <_svfiprintf_r+0x36>
 8009578:	2140      	movs	r1, #64	@ 0x40
 800957a:	f7ff ff09 	bl	8009390 <_malloc_r>
 800957e:	6028      	str	r0, [r5, #0]
 8009580:	6128      	str	r0, [r5, #16]
 8009582:	b930      	cbnz	r0, 8009592 <_svfiprintf_r+0x32>
 8009584:	230c      	movs	r3, #12
 8009586:	603b      	str	r3, [r7, #0]
 8009588:	f04f 30ff 	mov.w	r0, #4294967295
 800958c:	b01d      	add	sp, #116	@ 0x74
 800958e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009592:	2340      	movs	r3, #64	@ 0x40
 8009594:	616b      	str	r3, [r5, #20]
 8009596:	2300      	movs	r3, #0
 8009598:	9309      	str	r3, [sp, #36]	@ 0x24
 800959a:	2320      	movs	r3, #32
 800959c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80095a4:	2330      	movs	r3, #48	@ 0x30
 80095a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009744 <_svfiprintf_r+0x1e4>
 80095aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095ae:	f04f 0901 	mov.w	r9, #1
 80095b2:	4623      	mov	r3, r4
 80095b4:	469a      	mov	sl, r3
 80095b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095ba:	b10a      	cbz	r2, 80095c0 <_svfiprintf_r+0x60>
 80095bc:	2a25      	cmp	r2, #37	@ 0x25
 80095be:	d1f9      	bne.n	80095b4 <_svfiprintf_r+0x54>
 80095c0:	ebba 0b04 	subs.w	fp, sl, r4
 80095c4:	d00b      	beq.n	80095de <_svfiprintf_r+0x7e>
 80095c6:	465b      	mov	r3, fp
 80095c8:	4622      	mov	r2, r4
 80095ca:	4629      	mov	r1, r5
 80095cc:	4638      	mov	r0, r7
 80095ce:	f7ff ff6b 	bl	80094a8 <__ssputs_r>
 80095d2:	3001      	adds	r0, #1
 80095d4:	f000 80a7 	beq.w	8009726 <_svfiprintf_r+0x1c6>
 80095d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095da:	445a      	add	r2, fp
 80095dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80095de:	f89a 3000 	ldrb.w	r3, [sl]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f000 809f 	beq.w	8009726 <_svfiprintf_r+0x1c6>
 80095e8:	2300      	movs	r3, #0
 80095ea:	f04f 32ff 	mov.w	r2, #4294967295
 80095ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095f2:	f10a 0a01 	add.w	sl, sl, #1
 80095f6:	9304      	str	r3, [sp, #16]
 80095f8:	9307      	str	r3, [sp, #28]
 80095fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80095fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8009600:	4654      	mov	r4, sl
 8009602:	2205      	movs	r2, #5
 8009604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009608:	484e      	ldr	r0, [pc, #312]	@ (8009744 <_svfiprintf_r+0x1e4>)
 800960a:	f7f6 fde1 	bl	80001d0 <memchr>
 800960e:	9a04      	ldr	r2, [sp, #16]
 8009610:	b9d8      	cbnz	r0, 800964a <_svfiprintf_r+0xea>
 8009612:	06d0      	lsls	r0, r2, #27
 8009614:	bf44      	itt	mi
 8009616:	2320      	movmi	r3, #32
 8009618:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800961c:	0711      	lsls	r1, r2, #28
 800961e:	bf44      	itt	mi
 8009620:	232b      	movmi	r3, #43	@ 0x2b
 8009622:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009626:	f89a 3000 	ldrb.w	r3, [sl]
 800962a:	2b2a      	cmp	r3, #42	@ 0x2a
 800962c:	d015      	beq.n	800965a <_svfiprintf_r+0xfa>
 800962e:	9a07      	ldr	r2, [sp, #28]
 8009630:	4654      	mov	r4, sl
 8009632:	2000      	movs	r0, #0
 8009634:	f04f 0c0a 	mov.w	ip, #10
 8009638:	4621      	mov	r1, r4
 800963a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800963e:	3b30      	subs	r3, #48	@ 0x30
 8009640:	2b09      	cmp	r3, #9
 8009642:	d94b      	bls.n	80096dc <_svfiprintf_r+0x17c>
 8009644:	b1b0      	cbz	r0, 8009674 <_svfiprintf_r+0x114>
 8009646:	9207      	str	r2, [sp, #28]
 8009648:	e014      	b.n	8009674 <_svfiprintf_r+0x114>
 800964a:	eba0 0308 	sub.w	r3, r0, r8
 800964e:	fa09 f303 	lsl.w	r3, r9, r3
 8009652:	4313      	orrs	r3, r2
 8009654:	9304      	str	r3, [sp, #16]
 8009656:	46a2      	mov	sl, r4
 8009658:	e7d2      	b.n	8009600 <_svfiprintf_r+0xa0>
 800965a:	9b03      	ldr	r3, [sp, #12]
 800965c:	1d19      	adds	r1, r3, #4
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	9103      	str	r1, [sp, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	bfbb      	ittet	lt
 8009666:	425b      	neglt	r3, r3
 8009668:	f042 0202 	orrlt.w	r2, r2, #2
 800966c:	9307      	strge	r3, [sp, #28]
 800966e:	9307      	strlt	r3, [sp, #28]
 8009670:	bfb8      	it	lt
 8009672:	9204      	strlt	r2, [sp, #16]
 8009674:	7823      	ldrb	r3, [r4, #0]
 8009676:	2b2e      	cmp	r3, #46	@ 0x2e
 8009678:	d10a      	bne.n	8009690 <_svfiprintf_r+0x130>
 800967a:	7863      	ldrb	r3, [r4, #1]
 800967c:	2b2a      	cmp	r3, #42	@ 0x2a
 800967e:	d132      	bne.n	80096e6 <_svfiprintf_r+0x186>
 8009680:	9b03      	ldr	r3, [sp, #12]
 8009682:	1d1a      	adds	r2, r3, #4
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	9203      	str	r2, [sp, #12]
 8009688:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800968c:	3402      	adds	r4, #2
 800968e:	9305      	str	r3, [sp, #20]
 8009690:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009754 <_svfiprintf_r+0x1f4>
 8009694:	7821      	ldrb	r1, [r4, #0]
 8009696:	2203      	movs	r2, #3
 8009698:	4650      	mov	r0, sl
 800969a:	f7f6 fd99 	bl	80001d0 <memchr>
 800969e:	b138      	cbz	r0, 80096b0 <_svfiprintf_r+0x150>
 80096a0:	9b04      	ldr	r3, [sp, #16]
 80096a2:	eba0 000a 	sub.w	r0, r0, sl
 80096a6:	2240      	movs	r2, #64	@ 0x40
 80096a8:	4082      	lsls	r2, r0
 80096aa:	4313      	orrs	r3, r2
 80096ac:	3401      	adds	r4, #1
 80096ae:	9304      	str	r3, [sp, #16]
 80096b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b4:	4824      	ldr	r0, [pc, #144]	@ (8009748 <_svfiprintf_r+0x1e8>)
 80096b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096ba:	2206      	movs	r2, #6
 80096bc:	f7f6 fd88 	bl	80001d0 <memchr>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	d036      	beq.n	8009732 <_svfiprintf_r+0x1d2>
 80096c4:	4b21      	ldr	r3, [pc, #132]	@ (800974c <_svfiprintf_r+0x1ec>)
 80096c6:	bb1b      	cbnz	r3, 8009710 <_svfiprintf_r+0x1b0>
 80096c8:	9b03      	ldr	r3, [sp, #12]
 80096ca:	3307      	adds	r3, #7
 80096cc:	f023 0307 	bic.w	r3, r3, #7
 80096d0:	3308      	adds	r3, #8
 80096d2:	9303      	str	r3, [sp, #12]
 80096d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096d6:	4433      	add	r3, r6
 80096d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80096da:	e76a      	b.n	80095b2 <_svfiprintf_r+0x52>
 80096dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80096e0:	460c      	mov	r4, r1
 80096e2:	2001      	movs	r0, #1
 80096e4:	e7a8      	b.n	8009638 <_svfiprintf_r+0xd8>
 80096e6:	2300      	movs	r3, #0
 80096e8:	3401      	adds	r4, #1
 80096ea:	9305      	str	r3, [sp, #20]
 80096ec:	4619      	mov	r1, r3
 80096ee:	f04f 0c0a 	mov.w	ip, #10
 80096f2:	4620      	mov	r0, r4
 80096f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096f8:	3a30      	subs	r2, #48	@ 0x30
 80096fa:	2a09      	cmp	r2, #9
 80096fc:	d903      	bls.n	8009706 <_svfiprintf_r+0x1a6>
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0c6      	beq.n	8009690 <_svfiprintf_r+0x130>
 8009702:	9105      	str	r1, [sp, #20]
 8009704:	e7c4      	b.n	8009690 <_svfiprintf_r+0x130>
 8009706:	fb0c 2101 	mla	r1, ip, r1, r2
 800970a:	4604      	mov	r4, r0
 800970c:	2301      	movs	r3, #1
 800970e:	e7f0      	b.n	80096f2 <_svfiprintf_r+0x192>
 8009710:	ab03      	add	r3, sp, #12
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	462a      	mov	r2, r5
 8009716:	4b0e      	ldr	r3, [pc, #56]	@ (8009750 <_svfiprintf_r+0x1f0>)
 8009718:	a904      	add	r1, sp, #16
 800971a:	4638      	mov	r0, r7
 800971c:	f3af 8000 	nop.w
 8009720:	1c42      	adds	r2, r0, #1
 8009722:	4606      	mov	r6, r0
 8009724:	d1d6      	bne.n	80096d4 <_svfiprintf_r+0x174>
 8009726:	89ab      	ldrh	r3, [r5, #12]
 8009728:	065b      	lsls	r3, r3, #25
 800972a:	f53f af2d 	bmi.w	8009588 <_svfiprintf_r+0x28>
 800972e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009730:	e72c      	b.n	800958c <_svfiprintf_r+0x2c>
 8009732:	ab03      	add	r3, sp, #12
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	462a      	mov	r2, r5
 8009738:	4b05      	ldr	r3, [pc, #20]	@ (8009750 <_svfiprintf_r+0x1f0>)
 800973a:	a904      	add	r1, sp, #16
 800973c:	4638      	mov	r0, r7
 800973e:	f000 f9bb 	bl	8009ab8 <_printf_i>
 8009742:	e7ed      	b.n	8009720 <_svfiprintf_r+0x1c0>
 8009744:	0800a1dc 	.word	0x0800a1dc
 8009748:	0800a1e6 	.word	0x0800a1e6
 800974c:	00000000 	.word	0x00000000
 8009750:	080094a9 	.word	0x080094a9
 8009754:	0800a1e2 	.word	0x0800a1e2

08009758 <__sfputc_r>:
 8009758:	6893      	ldr	r3, [r2, #8]
 800975a:	3b01      	subs	r3, #1
 800975c:	2b00      	cmp	r3, #0
 800975e:	b410      	push	{r4}
 8009760:	6093      	str	r3, [r2, #8]
 8009762:	da08      	bge.n	8009776 <__sfputc_r+0x1e>
 8009764:	6994      	ldr	r4, [r2, #24]
 8009766:	42a3      	cmp	r3, r4
 8009768:	db01      	blt.n	800976e <__sfputc_r+0x16>
 800976a:	290a      	cmp	r1, #10
 800976c:	d103      	bne.n	8009776 <__sfputc_r+0x1e>
 800976e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009772:	f7ff bc82 	b.w	800907a <__swbuf_r>
 8009776:	6813      	ldr	r3, [r2, #0]
 8009778:	1c58      	adds	r0, r3, #1
 800977a:	6010      	str	r0, [r2, #0]
 800977c:	7019      	strb	r1, [r3, #0]
 800977e:	4608      	mov	r0, r1
 8009780:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009784:	4770      	bx	lr

08009786 <__sfputs_r>:
 8009786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009788:	4606      	mov	r6, r0
 800978a:	460f      	mov	r7, r1
 800978c:	4614      	mov	r4, r2
 800978e:	18d5      	adds	r5, r2, r3
 8009790:	42ac      	cmp	r4, r5
 8009792:	d101      	bne.n	8009798 <__sfputs_r+0x12>
 8009794:	2000      	movs	r0, #0
 8009796:	e007      	b.n	80097a8 <__sfputs_r+0x22>
 8009798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800979c:	463a      	mov	r2, r7
 800979e:	4630      	mov	r0, r6
 80097a0:	f7ff ffda 	bl	8009758 <__sfputc_r>
 80097a4:	1c43      	adds	r3, r0, #1
 80097a6:	d1f3      	bne.n	8009790 <__sfputs_r+0xa>
 80097a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097ac <_vfiprintf_r>:
 80097ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b0:	460d      	mov	r5, r1
 80097b2:	b09d      	sub	sp, #116	@ 0x74
 80097b4:	4614      	mov	r4, r2
 80097b6:	4698      	mov	r8, r3
 80097b8:	4606      	mov	r6, r0
 80097ba:	b118      	cbz	r0, 80097c4 <_vfiprintf_r+0x18>
 80097bc:	6a03      	ldr	r3, [r0, #32]
 80097be:	b90b      	cbnz	r3, 80097c4 <_vfiprintf_r+0x18>
 80097c0:	f7ff fb3e 	bl	8008e40 <__sinit>
 80097c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097c6:	07d9      	lsls	r1, r3, #31
 80097c8:	d405      	bmi.n	80097d6 <_vfiprintf_r+0x2a>
 80097ca:	89ab      	ldrh	r3, [r5, #12]
 80097cc:	059a      	lsls	r2, r3, #22
 80097ce:	d402      	bmi.n	80097d6 <_vfiprintf_r+0x2a>
 80097d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097d2:	f7ff fd60 	bl	8009296 <__retarget_lock_acquire_recursive>
 80097d6:	89ab      	ldrh	r3, [r5, #12]
 80097d8:	071b      	lsls	r3, r3, #28
 80097da:	d501      	bpl.n	80097e0 <_vfiprintf_r+0x34>
 80097dc:	692b      	ldr	r3, [r5, #16]
 80097de:	b99b      	cbnz	r3, 8009808 <_vfiprintf_r+0x5c>
 80097e0:	4629      	mov	r1, r5
 80097e2:	4630      	mov	r0, r6
 80097e4:	f7ff fc88 	bl	80090f8 <__swsetup_r>
 80097e8:	b170      	cbz	r0, 8009808 <_vfiprintf_r+0x5c>
 80097ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097ec:	07dc      	lsls	r4, r3, #31
 80097ee:	d504      	bpl.n	80097fa <_vfiprintf_r+0x4e>
 80097f0:	f04f 30ff 	mov.w	r0, #4294967295
 80097f4:	b01d      	add	sp, #116	@ 0x74
 80097f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fa:	89ab      	ldrh	r3, [r5, #12]
 80097fc:	0598      	lsls	r0, r3, #22
 80097fe:	d4f7      	bmi.n	80097f0 <_vfiprintf_r+0x44>
 8009800:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009802:	f7ff fd49 	bl	8009298 <__retarget_lock_release_recursive>
 8009806:	e7f3      	b.n	80097f0 <_vfiprintf_r+0x44>
 8009808:	2300      	movs	r3, #0
 800980a:	9309      	str	r3, [sp, #36]	@ 0x24
 800980c:	2320      	movs	r3, #32
 800980e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009812:	f8cd 800c 	str.w	r8, [sp, #12]
 8009816:	2330      	movs	r3, #48	@ 0x30
 8009818:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80099c8 <_vfiprintf_r+0x21c>
 800981c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009820:	f04f 0901 	mov.w	r9, #1
 8009824:	4623      	mov	r3, r4
 8009826:	469a      	mov	sl, r3
 8009828:	f813 2b01 	ldrb.w	r2, [r3], #1
 800982c:	b10a      	cbz	r2, 8009832 <_vfiprintf_r+0x86>
 800982e:	2a25      	cmp	r2, #37	@ 0x25
 8009830:	d1f9      	bne.n	8009826 <_vfiprintf_r+0x7a>
 8009832:	ebba 0b04 	subs.w	fp, sl, r4
 8009836:	d00b      	beq.n	8009850 <_vfiprintf_r+0xa4>
 8009838:	465b      	mov	r3, fp
 800983a:	4622      	mov	r2, r4
 800983c:	4629      	mov	r1, r5
 800983e:	4630      	mov	r0, r6
 8009840:	f7ff ffa1 	bl	8009786 <__sfputs_r>
 8009844:	3001      	adds	r0, #1
 8009846:	f000 80a7 	beq.w	8009998 <_vfiprintf_r+0x1ec>
 800984a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800984c:	445a      	add	r2, fp
 800984e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009850:	f89a 3000 	ldrb.w	r3, [sl]
 8009854:	2b00      	cmp	r3, #0
 8009856:	f000 809f 	beq.w	8009998 <_vfiprintf_r+0x1ec>
 800985a:	2300      	movs	r3, #0
 800985c:	f04f 32ff 	mov.w	r2, #4294967295
 8009860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009864:	f10a 0a01 	add.w	sl, sl, #1
 8009868:	9304      	str	r3, [sp, #16]
 800986a:	9307      	str	r3, [sp, #28]
 800986c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009870:	931a      	str	r3, [sp, #104]	@ 0x68
 8009872:	4654      	mov	r4, sl
 8009874:	2205      	movs	r2, #5
 8009876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800987a:	4853      	ldr	r0, [pc, #332]	@ (80099c8 <_vfiprintf_r+0x21c>)
 800987c:	f7f6 fca8 	bl	80001d0 <memchr>
 8009880:	9a04      	ldr	r2, [sp, #16]
 8009882:	b9d8      	cbnz	r0, 80098bc <_vfiprintf_r+0x110>
 8009884:	06d1      	lsls	r1, r2, #27
 8009886:	bf44      	itt	mi
 8009888:	2320      	movmi	r3, #32
 800988a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800988e:	0713      	lsls	r3, r2, #28
 8009890:	bf44      	itt	mi
 8009892:	232b      	movmi	r3, #43	@ 0x2b
 8009894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009898:	f89a 3000 	ldrb.w	r3, [sl]
 800989c:	2b2a      	cmp	r3, #42	@ 0x2a
 800989e:	d015      	beq.n	80098cc <_vfiprintf_r+0x120>
 80098a0:	9a07      	ldr	r2, [sp, #28]
 80098a2:	4654      	mov	r4, sl
 80098a4:	2000      	movs	r0, #0
 80098a6:	f04f 0c0a 	mov.w	ip, #10
 80098aa:	4621      	mov	r1, r4
 80098ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098b0:	3b30      	subs	r3, #48	@ 0x30
 80098b2:	2b09      	cmp	r3, #9
 80098b4:	d94b      	bls.n	800994e <_vfiprintf_r+0x1a2>
 80098b6:	b1b0      	cbz	r0, 80098e6 <_vfiprintf_r+0x13a>
 80098b8:	9207      	str	r2, [sp, #28]
 80098ba:	e014      	b.n	80098e6 <_vfiprintf_r+0x13a>
 80098bc:	eba0 0308 	sub.w	r3, r0, r8
 80098c0:	fa09 f303 	lsl.w	r3, r9, r3
 80098c4:	4313      	orrs	r3, r2
 80098c6:	9304      	str	r3, [sp, #16]
 80098c8:	46a2      	mov	sl, r4
 80098ca:	e7d2      	b.n	8009872 <_vfiprintf_r+0xc6>
 80098cc:	9b03      	ldr	r3, [sp, #12]
 80098ce:	1d19      	adds	r1, r3, #4
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	9103      	str	r1, [sp, #12]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	bfbb      	ittet	lt
 80098d8:	425b      	neglt	r3, r3
 80098da:	f042 0202 	orrlt.w	r2, r2, #2
 80098de:	9307      	strge	r3, [sp, #28]
 80098e0:	9307      	strlt	r3, [sp, #28]
 80098e2:	bfb8      	it	lt
 80098e4:	9204      	strlt	r2, [sp, #16]
 80098e6:	7823      	ldrb	r3, [r4, #0]
 80098e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80098ea:	d10a      	bne.n	8009902 <_vfiprintf_r+0x156>
 80098ec:	7863      	ldrb	r3, [r4, #1]
 80098ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80098f0:	d132      	bne.n	8009958 <_vfiprintf_r+0x1ac>
 80098f2:	9b03      	ldr	r3, [sp, #12]
 80098f4:	1d1a      	adds	r2, r3, #4
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	9203      	str	r2, [sp, #12]
 80098fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098fe:	3402      	adds	r4, #2
 8009900:	9305      	str	r3, [sp, #20]
 8009902:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80099d8 <_vfiprintf_r+0x22c>
 8009906:	7821      	ldrb	r1, [r4, #0]
 8009908:	2203      	movs	r2, #3
 800990a:	4650      	mov	r0, sl
 800990c:	f7f6 fc60 	bl	80001d0 <memchr>
 8009910:	b138      	cbz	r0, 8009922 <_vfiprintf_r+0x176>
 8009912:	9b04      	ldr	r3, [sp, #16]
 8009914:	eba0 000a 	sub.w	r0, r0, sl
 8009918:	2240      	movs	r2, #64	@ 0x40
 800991a:	4082      	lsls	r2, r0
 800991c:	4313      	orrs	r3, r2
 800991e:	3401      	adds	r4, #1
 8009920:	9304      	str	r3, [sp, #16]
 8009922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009926:	4829      	ldr	r0, [pc, #164]	@ (80099cc <_vfiprintf_r+0x220>)
 8009928:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800992c:	2206      	movs	r2, #6
 800992e:	f7f6 fc4f 	bl	80001d0 <memchr>
 8009932:	2800      	cmp	r0, #0
 8009934:	d03f      	beq.n	80099b6 <_vfiprintf_r+0x20a>
 8009936:	4b26      	ldr	r3, [pc, #152]	@ (80099d0 <_vfiprintf_r+0x224>)
 8009938:	bb1b      	cbnz	r3, 8009982 <_vfiprintf_r+0x1d6>
 800993a:	9b03      	ldr	r3, [sp, #12]
 800993c:	3307      	adds	r3, #7
 800993e:	f023 0307 	bic.w	r3, r3, #7
 8009942:	3308      	adds	r3, #8
 8009944:	9303      	str	r3, [sp, #12]
 8009946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009948:	443b      	add	r3, r7
 800994a:	9309      	str	r3, [sp, #36]	@ 0x24
 800994c:	e76a      	b.n	8009824 <_vfiprintf_r+0x78>
 800994e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009952:	460c      	mov	r4, r1
 8009954:	2001      	movs	r0, #1
 8009956:	e7a8      	b.n	80098aa <_vfiprintf_r+0xfe>
 8009958:	2300      	movs	r3, #0
 800995a:	3401      	adds	r4, #1
 800995c:	9305      	str	r3, [sp, #20]
 800995e:	4619      	mov	r1, r3
 8009960:	f04f 0c0a 	mov.w	ip, #10
 8009964:	4620      	mov	r0, r4
 8009966:	f810 2b01 	ldrb.w	r2, [r0], #1
 800996a:	3a30      	subs	r2, #48	@ 0x30
 800996c:	2a09      	cmp	r2, #9
 800996e:	d903      	bls.n	8009978 <_vfiprintf_r+0x1cc>
 8009970:	2b00      	cmp	r3, #0
 8009972:	d0c6      	beq.n	8009902 <_vfiprintf_r+0x156>
 8009974:	9105      	str	r1, [sp, #20]
 8009976:	e7c4      	b.n	8009902 <_vfiprintf_r+0x156>
 8009978:	fb0c 2101 	mla	r1, ip, r1, r2
 800997c:	4604      	mov	r4, r0
 800997e:	2301      	movs	r3, #1
 8009980:	e7f0      	b.n	8009964 <_vfiprintf_r+0x1b8>
 8009982:	ab03      	add	r3, sp, #12
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	462a      	mov	r2, r5
 8009988:	4b12      	ldr	r3, [pc, #72]	@ (80099d4 <_vfiprintf_r+0x228>)
 800998a:	a904      	add	r1, sp, #16
 800998c:	4630      	mov	r0, r6
 800998e:	f3af 8000 	nop.w
 8009992:	4607      	mov	r7, r0
 8009994:	1c78      	adds	r0, r7, #1
 8009996:	d1d6      	bne.n	8009946 <_vfiprintf_r+0x19a>
 8009998:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800999a:	07d9      	lsls	r1, r3, #31
 800999c:	d405      	bmi.n	80099aa <_vfiprintf_r+0x1fe>
 800999e:	89ab      	ldrh	r3, [r5, #12]
 80099a0:	059a      	lsls	r2, r3, #22
 80099a2:	d402      	bmi.n	80099aa <_vfiprintf_r+0x1fe>
 80099a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099a6:	f7ff fc77 	bl	8009298 <__retarget_lock_release_recursive>
 80099aa:	89ab      	ldrh	r3, [r5, #12]
 80099ac:	065b      	lsls	r3, r3, #25
 80099ae:	f53f af1f 	bmi.w	80097f0 <_vfiprintf_r+0x44>
 80099b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099b4:	e71e      	b.n	80097f4 <_vfiprintf_r+0x48>
 80099b6:	ab03      	add	r3, sp, #12
 80099b8:	9300      	str	r3, [sp, #0]
 80099ba:	462a      	mov	r2, r5
 80099bc:	4b05      	ldr	r3, [pc, #20]	@ (80099d4 <_vfiprintf_r+0x228>)
 80099be:	a904      	add	r1, sp, #16
 80099c0:	4630      	mov	r0, r6
 80099c2:	f000 f879 	bl	8009ab8 <_printf_i>
 80099c6:	e7e4      	b.n	8009992 <_vfiprintf_r+0x1e6>
 80099c8:	0800a1dc 	.word	0x0800a1dc
 80099cc:	0800a1e6 	.word	0x0800a1e6
 80099d0:	00000000 	.word	0x00000000
 80099d4:	08009787 	.word	0x08009787
 80099d8:	0800a1e2 	.word	0x0800a1e2

080099dc <_printf_common>:
 80099dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099e0:	4616      	mov	r6, r2
 80099e2:	4698      	mov	r8, r3
 80099e4:	688a      	ldr	r2, [r1, #8]
 80099e6:	690b      	ldr	r3, [r1, #16]
 80099e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80099ec:	4293      	cmp	r3, r2
 80099ee:	bfb8      	it	lt
 80099f0:	4613      	movlt	r3, r2
 80099f2:	6033      	str	r3, [r6, #0]
 80099f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80099f8:	4607      	mov	r7, r0
 80099fa:	460c      	mov	r4, r1
 80099fc:	b10a      	cbz	r2, 8009a02 <_printf_common+0x26>
 80099fe:	3301      	adds	r3, #1
 8009a00:	6033      	str	r3, [r6, #0]
 8009a02:	6823      	ldr	r3, [r4, #0]
 8009a04:	0699      	lsls	r1, r3, #26
 8009a06:	bf42      	ittt	mi
 8009a08:	6833      	ldrmi	r3, [r6, #0]
 8009a0a:	3302      	addmi	r3, #2
 8009a0c:	6033      	strmi	r3, [r6, #0]
 8009a0e:	6825      	ldr	r5, [r4, #0]
 8009a10:	f015 0506 	ands.w	r5, r5, #6
 8009a14:	d106      	bne.n	8009a24 <_printf_common+0x48>
 8009a16:	f104 0a19 	add.w	sl, r4, #25
 8009a1a:	68e3      	ldr	r3, [r4, #12]
 8009a1c:	6832      	ldr	r2, [r6, #0]
 8009a1e:	1a9b      	subs	r3, r3, r2
 8009a20:	42ab      	cmp	r3, r5
 8009a22:	dc26      	bgt.n	8009a72 <_printf_common+0x96>
 8009a24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009a28:	6822      	ldr	r2, [r4, #0]
 8009a2a:	3b00      	subs	r3, #0
 8009a2c:	bf18      	it	ne
 8009a2e:	2301      	movne	r3, #1
 8009a30:	0692      	lsls	r2, r2, #26
 8009a32:	d42b      	bmi.n	8009a8c <_printf_common+0xb0>
 8009a34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009a38:	4641      	mov	r1, r8
 8009a3a:	4638      	mov	r0, r7
 8009a3c:	47c8      	blx	r9
 8009a3e:	3001      	adds	r0, #1
 8009a40:	d01e      	beq.n	8009a80 <_printf_common+0xa4>
 8009a42:	6823      	ldr	r3, [r4, #0]
 8009a44:	6922      	ldr	r2, [r4, #16]
 8009a46:	f003 0306 	and.w	r3, r3, #6
 8009a4a:	2b04      	cmp	r3, #4
 8009a4c:	bf02      	ittt	eq
 8009a4e:	68e5      	ldreq	r5, [r4, #12]
 8009a50:	6833      	ldreq	r3, [r6, #0]
 8009a52:	1aed      	subeq	r5, r5, r3
 8009a54:	68a3      	ldr	r3, [r4, #8]
 8009a56:	bf0c      	ite	eq
 8009a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a5c:	2500      	movne	r5, #0
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	bfc4      	itt	gt
 8009a62:	1a9b      	subgt	r3, r3, r2
 8009a64:	18ed      	addgt	r5, r5, r3
 8009a66:	2600      	movs	r6, #0
 8009a68:	341a      	adds	r4, #26
 8009a6a:	42b5      	cmp	r5, r6
 8009a6c:	d11a      	bne.n	8009aa4 <_printf_common+0xc8>
 8009a6e:	2000      	movs	r0, #0
 8009a70:	e008      	b.n	8009a84 <_printf_common+0xa8>
 8009a72:	2301      	movs	r3, #1
 8009a74:	4652      	mov	r2, sl
 8009a76:	4641      	mov	r1, r8
 8009a78:	4638      	mov	r0, r7
 8009a7a:	47c8      	blx	r9
 8009a7c:	3001      	adds	r0, #1
 8009a7e:	d103      	bne.n	8009a88 <_printf_common+0xac>
 8009a80:	f04f 30ff 	mov.w	r0, #4294967295
 8009a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a88:	3501      	adds	r5, #1
 8009a8a:	e7c6      	b.n	8009a1a <_printf_common+0x3e>
 8009a8c:	18e1      	adds	r1, r4, r3
 8009a8e:	1c5a      	adds	r2, r3, #1
 8009a90:	2030      	movs	r0, #48	@ 0x30
 8009a92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009a96:	4422      	add	r2, r4
 8009a98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009a9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009aa0:	3302      	adds	r3, #2
 8009aa2:	e7c7      	b.n	8009a34 <_printf_common+0x58>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	4622      	mov	r2, r4
 8009aa8:	4641      	mov	r1, r8
 8009aaa:	4638      	mov	r0, r7
 8009aac:	47c8      	blx	r9
 8009aae:	3001      	adds	r0, #1
 8009ab0:	d0e6      	beq.n	8009a80 <_printf_common+0xa4>
 8009ab2:	3601      	adds	r6, #1
 8009ab4:	e7d9      	b.n	8009a6a <_printf_common+0x8e>
	...

08009ab8 <_printf_i>:
 8009ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009abc:	7e0f      	ldrb	r7, [r1, #24]
 8009abe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ac0:	2f78      	cmp	r7, #120	@ 0x78
 8009ac2:	4691      	mov	r9, r2
 8009ac4:	4680      	mov	r8, r0
 8009ac6:	460c      	mov	r4, r1
 8009ac8:	469a      	mov	sl, r3
 8009aca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009ace:	d807      	bhi.n	8009ae0 <_printf_i+0x28>
 8009ad0:	2f62      	cmp	r7, #98	@ 0x62
 8009ad2:	d80a      	bhi.n	8009aea <_printf_i+0x32>
 8009ad4:	2f00      	cmp	r7, #0
 8009ad6:	f000 80d2 	beq.w	8009c7e <_printf_i+0x1c6>
 8009ada:	2f58      	cmp	r7, #88	@ 0x58
 8009adc:	f000 80b9 	beq.w	8009c52 <_printf_i+0x19a>
 8009ae0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ae4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ae8:	e03a      	b.n	8009b60 <_printf_i+0xa8>
 8009aea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009aee:	2b15      	cmp	r3, #21
 8009af0:	d8f6      	bhi.n	8009ae0 <_printf_i+0x28>
 8009af2:	a101      	add	r1, pc, #4	@ (adr r1, 8009af8 <_printf_i+0x40>)
 8009af4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009af8:	08009b51 	.word	0x08009b51
 8009afc:	08009b65 	.word	0x08009b65
 8009b00:	08009ae1 	.word	0x08009ae1
 8009b04:	08009ae1 	.word	0x08009ae1
 8009b08:	08009ae1 	.word	0x08009ae1
 8009b0c:	08009ae1 	.word	0x08009ae1
 8009b10:	08009b65 	.word	0x08009b65
 8009b14:	08009ae1 	.word	0x08009ae1
 8009b18:	08009ae1 	.word	0x08009ae1
 8009b1c:	08009ae1 	.word	0x08009ae1
 8009b20:	08009ae1 	.word	0x08009ae1
 8009b24:	08009c65 	.word	0x08009c65
 8009b28:	08009b8f 	.word	0x08009b8f
 8009b2c:	08009c1f 	.word	0x08009c1f
 8009b30:	08009ae1 	.word	0x08009ae1
 8009b34:	08009ae1 	.word	0x08009ae1
 8009b38:	08009c87 	.word	0x08009c87
 8009b3c:	08009ae1 	.word	0x08009ae1
 8009b40:	08009b8f 	.word	0x08009b8f
 8009b44:	08009ae1 	.word	0x08009ae1
 8009b48:	08009ae1 	.word	0x08009ae1
 8009b4c:	08009c27 	.word	0x08009c27
 8009b50:	6833      	ldr	r3, [r6, #0]
 8009b52:	1d1a      	adds	r2, r3, #4
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6032      	str	r2, [r6, #0]
 8009b58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b60:	2301      	movs	r3, #1
 8009b62:	e09d      	b.n	8009ca0 <_printf_i+0x1e8>
 8009b64:	6833      	ldr	r3, [r6, #0]
 8009b66:	6820      	ldr	r0, [r4, #0]
 8009b68:	1d19      	adds	r1, r3, #4
 8009b6a:	6031      	str	r1, [r6, #0]
 8009b6c:	0606      	lsls	r6, r0, #24
 8009b6e:	d501      	bpl.n	8009b74 <_printf_i+0xbc>
 8009b70:	681d      	ldr	r5, [r3, #0]
 8009b72:	e003      	b.n	8009b7c <_printf_i+0xc4>
 8009b74:	0645      	lsls	r5, r0, #25
 8009b76:	d5fb      	bpl.n	8009b70 <_printf_i+0xb8>
 8009b78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009b7c:	2d00      	cmp	r5, #0
 8009b7e:	da03      	bge.n	8009b88 <_printf_i+0xd0>
 8009b80:	232d      	movs	r3, #45	@ 0x2d
 8009b82:	426d      	negs	r5, r5
 8009b84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b88:	4859      	ldr	r0, [pc, #356]	@ (8009cf0 <_printf_i+0x238>)
 8009b8a:	230a      	movs	r3, #10
 8009b8c:	e011      	b.n	8009bb2 <_printf_i+0xfa>
 8009b8e:	6821      	ldr	r1, [r4, #0]
 8009b90:	6833      	ldr	r3, [r6, #0]
 8009b92:	0608      	lsls	r0, r1, #24
 8009b94:	f853 5b04 	ldr.w	r5, [r3], #4
 8009b98:	d402      	bmi.n	8009ba0 <_printf_i+0xe8>
 8009b9a:	0649      	lsls	r1, r1, #25
 8009b9c:	bf48      	it	mi
 8009b9e:	b2ad      	uxthmi	r5, r5
 8009ba0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ba2:	4853      	ldr	r0, [pc, #332]	@ (8009cf0 <_printf_i+0x238>)
 8009ba4:	6033      	str	r3, [r6, #0]
 8009ba6:	bf14      	ite	ne
 8009ba8:	230a      	movne	r3, #10
 8009baa:	2308      	moveq	r3, #8
 8009bac:	2100      	movs	r1, #0
 8009bae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009bb2:	6866      	ldr	r6, [r4, #4]
 8009bb4:	60a6      	str	r6, [r4, #8]
 8009bb6:	2e00      	cmp	r6, #0
 8009bb8:	bfa2      	ittt	ge
 8009bba:	6821      	ldrge	r1, [r4, #0]
 8009bbc:	f021 0104 	bicge.w	r1, r1, #4
 8009bc0:	6021      	strge	r1, [r4, #0]
 8009bc2:	b90d      	cbnz	r5, 8009bc8 <_printf_i+0x110>
 8009bc4:	2e00      	cmp	r6, #0
 8009bc6:	d04b      	beq.n	8009c60 <_printf_i+0x1a8>
 8009bc8:	4616      	mov	r6, r2
 8009bca:	fbb5 f1f3 	udiv	r1, r5, r3
 8009bce:	fb03 5711 	mls	r7, r3, r1, r5
 8009bd2:	5dc7      	ldrb	r7, [r0, r7]
 8009bd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009bd8:	462f      	mov	r7, r5
 8009bda:	42bb      	cmp	r3, r7
 8009bdc:	460d      	mov	r5, r1
 8009bde:	d9f4      	bls.n	8009bca <_printf_i+0x112>
 8009be0:	2b08      	cmp	r3, #8
 8009be2:	d10b      	bne.n	8009bfc <_printf_i+0x144>
 8009be4:	6823      	ldr	r3, [r4, #0]
 8009be6:	07df      	lsls	r7, r3, #31
 8009be8:	d508      	bpl.n	8009bfc <_printf_i+0x144>
 8009bea:	6923      	ldr	r3, [r4, #16]
 8009bec:	6861      	ldr	r1, [r4, #4]
 8009bee:	4299      	cmp	r1, r3
 8009bf0:	bfde      	ittt	le
 8009bf2:	2330      	movle	r3, #48	@ 0x30
 8009bf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009bf8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009bfc:	1b92      	subs	r2, r2, r6
 8009bfe:	6122      	str	r2, [r4, #16]
 8009c00:	f8cd a000 	str.w	sl, [sp]
 8009c04:	464b      	mov	r3, r9
 8009c06:	aa03      	add	r2, sp, #12
 8009c08:	4621      	mov	r1, r4
 8009c0a:	4640      	mov	r0, r8
 8009c0c:	f7ff fee6 	bl	80099dc <_printf_common>
 8009c10:	3001      	adds	r0, #1
 8009c12:	d14a      	bne.n	8009caa <_printf_i+0x1f2>
 8009c14:	f04f 30ff 	mov.w	r0, #4294967295
 8009c18:	b004      	add	sp, #16
 8009c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	f043 0320 	orr.w	r3, r3, #32
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	4833      	ldr	r0, [pc, #204]	@ (8009cf4 <_printf_i+0x23c>)
 8009c28:	2778      	movs	r7, #120	@ 0x78
 8009c2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009c2e:	6823      	ldr	r3, [r4, #0]
 8009c30:	6831      	ldr	r1, [r6, #0]
 8009c32:	061f      	lsls	r7, r3, #24
 8009c34:	f851 5b04 	ldr.w	r5, [r1], #4
 8009c38:	d402      	bmi.n	8009c40 <_printf_i+0x188>
 8009c3a:	065f      	lsls	r7, r3, #25
 8009c3c:	bf48      	it	mi
 8009c3e:	b2ad      	uxthmi	r5, r5
 8009c40:	6031      	str	r1, [r6, #0]
 8009c42:	07d9      	lsls	r1, r3, #31
 8009c44:	bf44      	itt	mi
 8009c46:	f043 0320 	orrmi.w	r3, r3, #32
 8009c4a:	6023      	strmi	r3, [r4, #0]
 8009c4c:	b11d      	cbz	r5, 8009c56 <_printf_i+0x19e>
 8009c4e:	2310      	movs	r3, #16
 8009c50:	e7ac      	b.n	8009bac <_printf_i+0xf4>
 8009c52:	4827      	ldr	r0, [pc, #156]	@ (8009cf0 <_printf_i+0x238>)
 8009c54:	e7e9      	b.n	8009c2a <_printf_i+0x172>
 8009c56:	6823      	ldr	r3, [r4, #0]
 8009c58:	f023 0320 	bic.w	r3, r3, #32
 8009c5c:	6023      	str	r3, [r4, #0]
 8009c5e:	e7f6      	b.n	8009c4e <_printf_i+0x196>
 8009c60:	4616      	mov	r6, r2
 8009c62:	e7bd      	b.n	8009be0 <_printf_i+0x128>
 8009c64:	6833      	ldr	r3, [r6, #0]
 8009c66:	6825      	ldr	r5, [r4, #0]
 8009c68:	6961      	ldr	r1, [r4, #20]
 8009c6a:	1d18      	adds	r0, r3, #4
 8009c6c:	6030      	str	r0, [r6, #0]
 8009c6e:	062e      	lsls	r6, r5, #24
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	d501      	bpl.n	8009c78 <_printf_i+0x1c0>
 8009c74:	6019      	str	r1, [r3, #0]
 8009c76:	e002      	b.n	8009c7e <_printf_i+0x1c6>
 8009c78:	0668      	lsls	r0, r5, #25
 8009c7a:	d5fb      	bpl.n	8009c74 <_printf_i+0x1bc>
 8009c7c:	8019      	strh	r1, [r3, #0]
 8009c7e:	2300      	movs	r3, #0
 8009c80:	6123      	str	r3, [r4, #16]
 8009c82:	4616      	mov	r6, r2
 8009c84:	e7bc      	b.n	8009c00 <_printf_i+0x148>
 8009c86:	6833      	ldr	r3, [r6, #0]
 8009c88:	1d1a      	adds	r2, r3, #4
 8009c8a:	6032      	str	r2, [r6, #0]
 8009c8c:	681e      	ldr	r6, [r3, #0]
 8009c8e:	6862      	ldr	r2, [r4, #4]
 8009c90:	2100      	movs	r1, #0
 8009c92:	4630      	mov	r0, r6
 8009c94:	f7f6 fa9c 	bl	80001d0 <memchr>
 8009c98:	b108      	cbz	r0, 8009c9e <_printf_i+0x1e6>
 8009c9a:	1b80      	subs	r0, r0, r6
 8009c9c:	6060      	str	r0, [r4, #4]
 8009c9e:	6863      	ldr	r3, [r4, #4]
 8009ca0:	6123      	str	r3, [r4, #16]
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ca8:	e7aa      	b.n	8009c00 <_printf_i+0x148>
 8009caa:	6923      	ldr	r3, [r4, #16]
 8009cac:	4632      	mov	r2, r6
 8009cae:	4649      	mov	r1, r9
 8009cb0:	4640      	mov	r0, r8
 8009cb2:	47d0      	blx	sl
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d0ad      	beq.n	8009c14 <_printf_i+0x15c>
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	079b      	lsls	r3, r3, #30
 8009cbc:	d413      	bmi.n	8009ce6 <_printf_i+0x22e>
 8009cbe:	68e0      	ldr	r0, [r4, #12]
 8009cc0:	9b03      	ldr	r3, [sp, #12]
 8009cc2:	4298      	cmp	r0, r3
 8009cc4:	bfb8      	it	lt
 8009cc6:	4618      	movlt	r0, r3
 8009cc8:	e7a6      	b.n	8009c18 <_printf_i+0x160>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	4632      	mov	r2, r6
 8009cce:	4649      	mov	r1, r9
 8009cd0:	4640      	mov	r0, r8
 8009cd2:	47d0      	blx	sl
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	d09d      	beq.n	8009c14 <_printf_i+0x15c>
 8009cd8:	3501      	adds	r5, #1
 8009cda:	68e3      	ldr	r3, [r4, #12]
 8009cdc:	9903      	ldr	r1, [sp, #12]
 8009cde:	1a5b      	subs	r3, r3, r1
 8009ce0:	42ab      	cmp	r3, r5
 8009ce2:	dcf2      	bgt.n	8009cca <_printf_i+0x212>
 8009ce4:	e7eb      	b.n	8009cbe <_printf_i+0x206>
 8009ce6:	2500      	movs	r5, #0
 8009ce8:	f104 0619 	add.w	r6, r4, #25
 8009cec:	e7f5      	b.n	8009cda <_printf_i+0x222>
 8009cee:	bf00      	nop
 8009cf0:	0800a1ed 	.word	0x0800a1ed
 8009cf4:	0800a1fe 	.word	0x0800a1fe

08009cf8 <__sflush_r>:
 8009cf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d00:	0716      	lsls	r6, r2, #28
 8009d02:	4605      	mov	r5, r0
 8009d04:	460c      	mov	r4, r1
 8009d06:	d454      	bmi.n	8009db2 <__sflush_r+0xba>
 8009d08:	684b      	ldr	r3, [r1, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	dc02      	bgt.n	8009d14 <__sflush_r+0x1c>
 8009d0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	dd48      	ble.n	8009da6 <__sflush_r+0xae>
 8009d14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d16:	2e00      	cmp	r6, #0
 8009d18:	d045      	beq.n	8009da6 <__sflush_r+0xae>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d20:	682f      	ldr	r7, [r5, #0]
 8009d22:	6a21      	ldr	r1, [r4, #32]
 8009d24:	602b      	str	r3, [r5, #0]
 8009d26:	d030      	beq.n	8009d8a <__sflush_r+0x92>
 8009d28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d2a:	89a3      	ldrh	r3, [r4, #12]
 8009d2c:	0759      	lsls	r1, r3, #29
 8009d2e:	d505      	bpl.n	8009d3c <__sflush_r+0x44>
 8009d30:	6863      	ldr	r3, [r4, #4]
 8009d32:	1ad2      	subs	r2, r2, r3
 8009d34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d36:	b10b      	cbz	r3, 8009d3c <__sflush_r+0x44>
 8009d38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d3a:	1ad2      	subs	r2, r2, r3
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d40:	6a21      	ldr	r1, [r4, #32]
 8009d42:	4628      	mov	r0, r5
 8009d44:	47b0      	blx	r6
 8009d46:	1c43      	adds	r3, r0, #1
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	d106      	bne.n	8009d5a <__sflush_r+0x62>
 8009d4c:	6829      	ldr	r1, [r5, #0]
 8009d4e:	291d      	cmp	r1, #29
 8009d50:	d82b      	bhi.n	8009daa <__sflush_r+0xb2>
 8009d52:	4a2a      	ldr	r2, [pc, #168]	@ (8009dfc <__sflush_r+0x104>)
 8009d54:	410a      	asrs	r2, r1
 8009d56:	07d6      	lsls	r6, r2, #31
 8009d58:	d427      	bmi.n	8009daa <__sflush_r+0xb2>
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	6062      	str	r2, [r4, #4]
 8009d5e:	04d9      	lsls	r1, r3, #19
 8009d60:	6922      	ldr	r2, [r4, #16]
 8009d62:	6022      	str	r2, [r4, #0]
 8009d64:	d504      	bpl.n	8009d70 <__sflush_r+0x78>
 8009d66:	1c42      	adds	r2, r0, #1
 8009d68:	d101      	bne.n	8009d6e <__sflush_r+0x76>
 8009d6a:	682b      	ldr	r3, [r5, #0]
 8009d6c:	b903      	cbnz	r3, 8009d70 <__sflush_r+0x78>
 8009d6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d72:	602f      	str	r7, [r5, #0]
 8009d74:	b1b9      	cbz	r1, 8009da6 <__sflush_r+0xae>
 8009d76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d7a:	4299      	cmp	r1, r3
 8009d7c:	d002      	beq.n	8009d84 <__sflush_r+0x8c>
 8009d7e:	4628      	mov	r0, r5
 8009d80:	f7ff fa9a 	bl	80092b8 <_free_r>
 8009d84:	2300      	movs	r3, #0
 8009d86:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d88:	e00d      	b.n	8009da6 <__sflush_r+0xae>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	47b0      	blx	r6
 8009d90:	4602      	mov	r2, r0
 8009d92:	1c50      	adds	r0, r2, #1
 8009d94:	d1c9      	bne.n	8009d2a <__sflush_r+0x32>
 8009d96:	682b      	ldr	r3, [r5, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d0c6      	beq.n	8009d2a <__sflush_r+0x32>
 8009d9c:	2b1d      	cmp	r3, #29
 8009d9e:	d001      	beq.n	8009da4 <__sflush_r+0xac>
 8009da0:	2b16      	cmp	r3, #22
 8009da2:	d11e      	bne.n	8009de2 <__sflush_r+0xea>
 8009da4:	602f      	str	r7, [r5, #0]
 8009da6:	2000      	movs	r0, #0
 8009da8:	e022      	b.n	8009df0 <__sflush_r+0xf8>
 8009daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dae:	b21b      	sxth	r3, r3
 8009db0:	e01b      	b.n	8009dea <__sflush_r+0xf2>
 8009db2:	690f      	ldr	r7, [r1, #16]
 8009db4:	2f00      	cmp	r7, #0
 8009db6:	d0f6      	beq.n	8009da6 <__sflush_r+0xae>
 8009db8:	0793      	lsls	r3, r2, #30
 8009dba:	680e      	ldr	r6, [r1, #0]
 8009dbc:	bf08      	it	eq
 8009dbe:	694b      	ldreq	r3, [r1, #20]
 8009dc0:	600f      	str	r7, [r1, #0]
 8009dc2:	bf18      	it	ne
 8009dc4:	2300      	movne	r3, #0
 8009dc6:	eba6 0807 	sub.w	r8, r6, r7
 8009dca:	608b      	str	r3, [r1, #8]
 8009dcc:	f1b8 0f00 	cmp.w	r8, #0
 8009dd0:	dde9      	ble.n	8009da6 <__sflush_r+0xae>
 8009dd2:	6a21      	ldr	r1, [r4, #32]
 8009dd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009dd6:	4643      	mov	r3, r8
 8009dd8:	463a      	mov	r2, r7
 8009dda:	4628      	mov	r0, r5
 8009ddc:	47b0      	blx	r6
 8009dde:	2800      	cmp	r0, #0
 8009de0:	dc08      	bgt.n	8009df4 <__sflush_r+0xfc>
 8009de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009de6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dea:	81a3      	strh	r3, [r4, #12]
 8009dec:	f04f 30ff 	mov.w	r0, #4294967295
 8009df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009df4:	4407      	add	r7, r0
 8009df6:	eba8 0800 	sub.w	r8, r8, r0
 8009dfa:	e7e7      	b.n	8009dcc <__sflush_r+0xd4>
 8009dfc:	dfbffffe 	.word	0xdfbffffe

08009e00 <_fflush_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	690b      	ldr	r3, [r1, #16]
 8009e04:	4605      	mov	r5, r0
 8009e06:	460c      	mov	r4, r1
 8009e08:	b913      	cbnz	r3, 8009e10 <_fflush_r+0x10>
 8009e0a:	2500      	movs	r5, #0
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	bd38      	pop	{r3, r4, r5, pc}
 8009e10:	b118      	cbz	r0, 8009e1a <_fflush_r+0x1a>
 8009e12:	6a03      	ldr	r3, [r0, #32]
 8009e14:	b90b      	cbnz	r3, 8009e1a <_fflush_r+0x1a>
 8009e16:	f7ff f813 	bl	8008e40 <__sinit>
 8009e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d0f3      	beq.n	8009e0a <_fflush_r+0xa>
 8009e22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e24:	07d0      	lsls	r0, r2, #31
 8009e26:	d404      	bmi.n	8009e32 <_fflush_r+0x32>
 8009e28:	0599      	lsls	r1, r3, #22
 8009e2a:	d402      	bmi.n	8009e32 <_fflush_r+0x32>
 8009e2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e2e:	f7ff fa32 	bl	8009296 <__retarget_lock_acquire_recursive>
 8009e32:	4628      	mov	r0, r5
 8009e34:	4621      	mov	r1, r4
 8009e36:	f7ff ff5f 	bl	8009cf8 <__sflush_r>
 8009e3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e3c:	07da      	lsls	r2, r3, #31
 8009e3e:	4605      	mov	r5, r0
 8009e40:	d4e4      	bmi.n	8009e0c <_fflush_r+0xc>
 8009e42:	89a3      	ldrh	r3, [r4, #12]
 8009e44:	059b      	lsls	r3, r3, #22
 8009e46:	d4e1      	bmi.n	8009e0c <_fflush_r+0xc>
 8009e48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e4a:	f7ff fa25 	bl	8009298 <__retarget_lock_release_recursive>
 8009e4e:	e7dd      	b.n	8009e0c <_fflush_r+0xc>

08009e50 <__swhatbuf_r>:
 8009e50:	b570      	push	{r4, r5, r6, lr}
 8009e52:	460c      	mov	r4, r1
 8009e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e58:	2900      	cmp	r1, #0
 8009e5a:	b096      	sub	sp, #88	@ 0x58
 8009e5c:	4615      	mov	r5, r2
 8009e5e:	461e      	mov	r6, r3
 8009e60:	da0d      	bge.n	8009e7e <__swhatbuf_r+0x2e>
 8009e62:	89a3      	ldrh	r3, [r4, #12]
 8009e64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e68:	f04f 0100 	mov.w	r1, #0
 8009e6c:	bf14      	ite	ne
 8009e6e:	2340      	movne	r3, #64	@ 0x40
 8009e70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e74:	2000      	movs	r0, #0
 8009e76:	6031      	str	r1, [r6, #0]
 8009e78:	602b      	str	r3, [r5, #0]
 8009e7a:	b016      	add	sp, #88	@ 0x58
 8009e7c:	bd70      	pop	{r4, r5, r6, pc}
 8009e7e:	466a      	mov	r2, sp
 8009e80:	f000 f862 	bl	8009f48 <_fstat_r>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	dbec      	blt.n	8009e62 <__swhatbuf_r+0x12>
 8009e88:	9901      	ldr	r1, [sp, #4]
 8009e8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e92:	4259      	negs	r1, r3
 8009e94:	4159      	adcs	r1, r3
 8009e96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e9a:	e7eb      	b.n	8009e74 <__swhatbuf_r+0x24>

08009e9c <__smakebuf_r>:
 8009e9c:	898b      	ldrh	r3, [r1, #12]
 8009e9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ea0:	079d      	lsls	r5, r3, #30
 8009ea2:	4606      	mov	r6, r0
 8009ea4:	460c      	mov	r4, r1
 8009ea6:	d507      	bpl.n	8009eb8 <__smakebuf_r+0x1c>
 8009ea8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009eac:	6023      	str	r3, [r4, #0]
 8009eae:	6123      	str	r3, [r4, #16]
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	6163      	str	r3, [r4, #20]
 8009eb4:	b003      	add	sp, #12
 8009eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eb8:	ab01      	add	r3, sp, #4
 8009eba:	466a      	mov	r2, sp
 8009ebc:	f7ff ffc8 	bl	8009e50 <__swhatbuf_r>
 8009ec0:	9f00      	ldr	r7, [sp, #0]
 8009ec2:	4605      	mov	r5, r0
 8009ec4:	4639      	mov	r1, r7
 8009ec6:	4630      	mov	r0, r6
 8009ec8:	f7ff fa62 	bl	8009390 <_malloc_r>
 8009ecc:	b948      	cbnz	r0, 8009ee2 <__smakebuf_r+0x46>
 8009ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ed2:	059a      	lsls	r2, r3, #22
 8009ed4:	d4ee      	bmi.n	8009eb4 <__smakebuf_r+0x18>
 8009ed6:	f023 0303 	bic.w	r3, r3, #3
 8009eda:	f043 0302 	orr.w	r3, r3, #2
 8009ede:	81a3      	strh	r3, [r4, #12]
 8009ee0:	e7e2      	b.n	8009ea8 <__smakebuf_r+0xc>
 8009ee2:	89a3      	ldrh	r3, [r4, #12]
 8009ee4:	6020      	str	r0, [r4, #0]
 8009ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eea:	81a3      	strh	r3, [r4, #12]
 8009eec:	9b01      	ldr	r3, [sp, #4]
 8009eee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ef2:	b15b      	cbz	r3, 8009f0c <__smakebuf_r+0x70>
 8009ef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ef8:	4630      	mov	r0, r6
 8009efa:	f000 f837 	bl	8009f6c <_isatty_r>
 8009efe:	b128      	cbz	r0, 8009f0c <__smakebuf_r+0x70>
 8009f00:	89a3      	ldrh	r3, [r4, #12]
 8009f02:	f023 0303 	bic.w	r3, r3, #3
 8009f06:	f043 0301 	orr.w	r3, r3, #1
 8009f0a:	81a3      	strh	r3, [r4, #12]
 8009f0c:	89a3      	ldrh	r3, [r4, #12]
 8009f0e:	431d      	orrs	r5, r3
 8009f10:	81a5      	strh	r5, [r4, #12]
 8009f12:	e7cf      	b.n	8009eb4 <__smakebuf_r+0x18>

08009f14 <memmove>:
 8009f14:	4288      	cmp	r0, r1
 8009f16:	b510      	push	{r4, lr}
 8009f18:	eb01 0402 	add.w	r4, r1, r2
 8009f1c:	d902      	bls.n	8009f24 <memmove+0x10>
 8009f1e:	4284      	cmp	r4, r0
 8009f20:	4623      	mov	r3, r4
 8009f22:	d807      	bhi.n	8009f34 <memmove+0x20>
 8009f24:	1e43      	subs	r3, r0, #1
 8009f26:	42a1      	cmp	r1, r4
 8009f28:	d008      	beq.n	8009f3c <memmove+0x28>
 8009f2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f32:	e7f8      	b.n	8009f26 <memmove+0x12>
 8009f34:	4402      	add	r2, r0
 8009f36:	4601      	mov	r1, r0
 8009f38:	428a      	cmp	r2, r1
 8009f3a:	d100      	bne.n	8009f3e <memmove+0x2a>
 8009f3c:	bd10      	pop	{r4, pc}
 8009f3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f46:	e7f7      	b.n	8009f38 <memmove+0x24>

08009f48 <_fstat_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	4d07      	ldr	r5, [pc, #28]	@ (8009f68 <_fstat_r+0x20>)
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	4604      	mov	r4, r0
 8009f50:	4608      	mov	r0, r1
 8009f52:	4611      	mov	r1, r2
 8009f54:	602b      	str	r3, [r5, #0]
 8009f56:	f7f7 fc1e 	bl	8001796 <_fstat>
 8009f5a:	1c43      	adds	r3, r0, #1
 8009f5c:	d102      	bne.n	8009f64 <_fstat_r+0x1c>
 8009f5e:	682b      	ldr	r3, [r5, #0]
 8009f60:	b103      	cbz	r3, 8009f64 <_fstat_r+0x1c>
 8009f62:	6023      	str	r3, [r4, #0]
 8009f64:	bd38      	pop	{r3, r4, r5, pc}
 8009f66:	bf00      	nop
 8009f68:	20002e54 	.word	0x20002e54

08009f6c <_isatty_r>:
 8009f6c:	b538      	push	{r3, r4, r5, lr}
 8009f6e:	4d06      	ldr	r5, [pc, #24]	@ (8009f88 <_isatty_r+0x1c>)
 8009f70:	2300      	movs	r3, #0
 8009f72:	4604      	mov	r4, r0
 8009f74:	4608      	mov	r0, r1
 8009f76:	602b      	str	r3, [r5, #0]
 8009f78:	f7f7 fc1d 	bl	80017b6 <_isatty>
 8009f7c:	1c43      	adds	r3, r0, #1
 8009f7e:	d102      	bne.n	8009f86 <_isatty_r+0x1a>
 8009f80:	682b      	ldr	r3, [r5, #0]
 8009f82:	b103      	cbz	r3, 8009f86 <_isatty_r+0x1a>
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	bd38      	pop	{r3, r4, r5, pc}
 8009f88:	20002e54 	.word	0x20002e54

08009f8c <_sbrk_r>:
 8009f8c:	b538      	push	{r3, r4, r5, lr}
 8009f8e:	4d06      	ldr	r5, [pc, #24]	@ (8009fa8 <_sbrk_r+0x1c>)
 8009f90:	2300      	movs	r3, #0
 8009f92:	4604      	mov	r4, r0
 8009f94:	4608      	mov	r0, r1
 8009f96:	602b      	str	r3, [r5, #0]
 8009f98:	f7f7 fc26 	bl	80017e8 <_sbrk>
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	d102      	bne.n	8009fa6 <_sbrk_r+0x1a>
 8009fa0:	682b      	ldr	r3, [r5, #0]
 8009fa2:	b103      	cbz	r3, 8009fa6 <_sbrk_r+0x1a>
 8009fa4:	6023      	str	r3, [r4, #0]
 8009fa6:	bd38      	pop	{r3, r4, r5, pc}
 8009fa8:	20002e54 	.word	0x20002e54

08009fac <_realloc_r>:
 8009fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb0:	4680      	mov	r8, r0
 8009fb2:	4615      	mov	r5, r2
 8009fb4:	460c      	mov	r4, r1
 8009fb6:	b921      	cbnz	r1, 8009fc2 <_realloc_r+0x16>
 8009fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fbc:	4611      	mov	r1, r2
 8009fbe:	f7ff b9e7 	b.w	8009390 <_malloc_r>
 8009fc2:	b92a      	cbnz	r2, 8009fd0 <_realloc_r+0x24>
 8009fc4:	f7ff f978 	bl	80092b8 <_free_r>
 8009fc8:	2400      	movs	r4, #0
 8009fca:	4620      	mov	r0, r4
 8009fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fd0:	f000 f81a 	bl	800a008 <_malloc_usable_size_r>
 8009fd4:	4285      	cmp	r5, r0
 8009fd6:	4606      	mov	r6, r0
 8009fd8:	d802      	bhi.n	8009fe0 <_realloc_r+0x34>
 8009fda:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009fde:	d8f4      	bhi.n	8009fca <_realloc_r+0x1e>
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	4640      	mov	r0, r8
 8009fe4:	f7ff f9d4 	bl	8009390 <_malloc_r>
 8009fe8:	4607      	mov	r7, r0
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d0ec      	beq.n	8009fc8 <_realloc_r+0x1c>
 8009fee:	42b5      	cmp	r5, r6
 8009ff0:	462a      	mov	r2, r5
 8009ff2:	4621      	mov	r1, r4
 8009ff4:	bf28      	it	cs
 8009ff6:	4632      	movcs	r2, r6
 8009ff8:	f7ff f94f 	bl	800929a <memcpy>
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	4640      	mov	r0, r8
 800a000:	f7ff f95a 	bl	80092b8 <_free_r>
 800a004:	463c      	mov	r4, r7
 800a006:	e7e0      	b.n	8009fca <_realloc_r+0x1e>

0800a008 <_malloc_usable_size_r>:
 800a008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a00c:	1f18      	subs	r0, r3, #4
 800a00e:	2b00      	cmp	r3, #0
 800a010:	bfbc      	itt	lt
 800a012:	580b      	ldrlt	r3, [r1, r0]
 800a014:	18c0      	addlt	r0, r0, r3
 800a016:	4770      	bx	lr

0800a018 <_init>:
 800a018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01a:	bf00      	nop
 800a01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a01e:	bc08      	pop	{r3}
 800a020:	469e      	mov	lr, r3
 800a022:	4770      	bx	lr

0800a024 <_fini>:
 800a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a026:	bf00      	nop
 800a028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a02a:	bc08      	pop	{r3}
 800a02c:	469e      	mov	lr, r3
 800a02e:	4770      	bx	lr
